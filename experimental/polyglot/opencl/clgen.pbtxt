# File: //deeplearning/clgen/proto/clgen.proto
# Proto: clgen.Instance
working_dir: "/var/phd/clgen/opencl"
model {
  corpus {
    local_directory: "/mnt/cc/data/kernels/github"
    # Note these tokens omit the optional __ qualifiers on OpenCL keywords.
    # The __ qualifiers are stripped in the corpus by the preprocessor
    # deeplearning.clgen.preprocessors.opencl:StripDoubleUnderscorePrefixes.
    greedy_multichar_atomizer {
      tokens: "  "
      tokens: "__assert"
      tokens: "__attribute"
      tokens: "__builtin_astype"
      tokens: "__clc_fabs"
      tokens: "__clc_fma"
      tokens: "__inline"
      tokens: "abs"
      tokens: "alignas"
      tokens: "alignof"
      tokens: "atomic_add"
      tokens: "auto"
      tokens: "barrier"
      tokens: "bool"
      tokens: "break"
      tokens: "case"
      tokens: "char"
      tokens: "clamp"
      tokens: "complex"
      tokens: "const"
      tokens: "constant"
      tokens: "continue"
      tokens: "default"
      tokens: "defined"
      tokens: "do"
      tokens: "double"
      tokens: "else"
      tokens: "enum"
      tokens: "error"
      tokens: "event_t"
      tokens: "extern"
      tokens: "fabs"
      tokens: "false"
      tokens: "float"
      tokens: "for"
      tokens: "get_global_id"
      tokens: "get_global_size"
      tokens: "get_local_id"
      tokens: "get_local_size"
      tokens: "get_num_groups"
      tokens: "global"
      tokens: "goto"
      tokens: "half"
      tokens: "if"
      tokens: "image1d_array_t"
      tokens: "image1d_buffer_t"
      tokens: "image1d_t"
      tokens: "image2d_array_t"
      tokens: "image2d_t"
      tokens: "image3d_t"
      tokens: "imaginary"
      tokens: "include"
      tokens: "inline"
      tokens: "int"
      tokens: "into"
      tokens: "kernel"
      tokens: "line"
      tokens: "local"
      tokens: "long"
      tokens: "noreturn"
      tokens: "pragma"
      tokens: "private"
      tokens: "quad"
      tokens: "read_only"
      tokens: "read_write"
      tokens: "register"
      tokens: "restrict"
      tokens: "return"
      tokens: "sampler_t"
      tokens: "short"
      tokens: "shuffle"
      tokens: "signed"
      tokens: "size_t"
      tokens: "sizeof"
      tokens: "sqrt"
      tokens: "static"
      tokens: "struct"
      tokens: "switch"
      tokens: "true"
      tokens: "typedef"
      tokens: "u32"
      tokens: "uchar"
      tokens: "uint"
      tokens: "ulong"
      tokens: "undef"
      tokens: "union"
      tokens: "unsigned"
      tokens: "void"
      tokens: "volatile"
      tokens: "while"
      tokens: "wide"
      tokens: "write_only"
    }
    contentfile_separator: "\n\n"
    preprocessor: "deeplearning.clgen.preprocessors.opencl:ClangPreprocessWithShim"
    preprocessor: "deeplearning.clgen.preprocessors.opencl:Compile"
    preprocessor: "deeplearning.clgen.preprocessors.opencl:NormalizeIdentifiers"
    preprocessor: "deeplearning.clgen.preprocessors.opencl:StripDoubleUnderscorePrefixes"
    preprocessor: "deeplearning.clgen.preprocessors.common:StripDuplicateEmptyLines"
    preprocessor: "deeplearning.clgen.preprocessors.opencl:SanitizeKernelPrototype"
    preprocessor: "deeplearning.clgen.preprocessors.common:StripTrailingWhitespace"
    preprocessor: "deeplearning.clgen.preprocessors.opencl:ClangFormat"
    preprocessor: "deeplearning.clgen.preprocessors.common:MinimumLineCount3"
    preprocessor: "deeplearning.clgen.preprocessors.opencl:Compile"
  }
  architecture {
    neuron_type: LSTM
    neurons_per_layer: 1024
    num_layers: 2
  }
  training {
    num_epochs: 50
    sequence_length: 50
    batch_size: 64
    shuffle_corpus_contentfiles_between_epochs: true
    adam_optimizer {
      initial_learning_rate_micros: 2000  # 0.02
      learning_rate_decay_per_epoch_micros: 5000  # 0.05
      beta_1_micros: 900000 # 0.9
      beta_2_micros: 999000 # 0.999
      normalized_gradient_clip_micros: 5000000 # 5.0
    }
  }
}
sampler {
  start_text: "kernel void "
  batch_size: 64
  termination_criteria {
    symtok {
      depth_increase_token: "{"
      depth_decrease_token: "}"
    }
  }
  termination_criteria {
    maxlen {
      maximum_tokens_in_sample: 5000
    }
  }
}
