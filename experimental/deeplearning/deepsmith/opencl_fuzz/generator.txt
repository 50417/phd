# File: //deeplearning/deepsmith/proto/generator.proto
# Proto: deepsmith.ClgenGenerator
instance {
  working_dir: "/mnt/cc/data/experimental/deeplearning/polyglot/clgen"
  model {
    corpus {
      content_id: "ca98cc9e59c73b712d50f099d033ed3dcc6fa10a"
      ascii_character_atomizer: true
      preprocessor: "deeplearning.clgen.preprocessors.opencl:ClangPreprocessWithShim"
      preprocessor: "deeplearning.clgen.preprocessors.opencl:Compile"
      preprocessor: "deeplearning.clgen.preprocessors.opencl:NormalizeIdentifiers"
      preprocessor: "deeplearning.clgen.preprocessors.opencl:StripDoubleUnderscorePrefixes"
      preprocessor: "deeplearning.clgen.preprocessors.common:StripDuplicateEmptyLines"
      preprocessor: "deeplearning.clgen.preprocessors.opencl:SanitizeKernelPrototype"
      preprocessor: "deeplearning.clgen.preprocessors.common:StripTrailingWhitespace"
      preprocessor: "deeplearning.clgen.preprocessors.opencl:ClangFormat"
      preprocessor: "deeplearning.clgen.preprocessors.common:MinimumLineCount3"
      preprocessor: "deeplearning.clgen.preprocessors.opencl:Compile"
      contentfile_separator: "\n\n"
    }
    architecture {
      backend: TENSORFLOW
      neuron_type: LSTM
      neurons_per_layer: 256
      num_layers: 2
      post_layer_dropout_micros: 0
    }
    training {
      num_epochs: 50
      sequence_length: 64
      shuffle_corpus_contentfiles_between_epochs: true
      batch_size: 64
      adam_optimizer {
        initial_learning_rate_micros: 2000
        learning_rate_decay_per_epoch_micros: 50000
        beta_1_micros: 900000
        beta_2_micros: 999000
        normalized_gradient_clip_micros: 5000000
      }
    }
  }
  sampler {
    start_text: "kernel void "
    batch_size: 1
    temperature_micros: 750000  # real value = 0.75
    termination_criteria {
      symtok {
        depth_increase_token: "{"
        depth_decrease_token: "}"
      }
    }
    termination_criteria {
      maxlen {
        maximum_tokens_in_sample: 5000
      }
    }
  }
}
testcase_skeleton {
  toolchain: "opencl"
  harness {
    name: "cldrive"
  }
  inputs {
    key: "gsize"
    value: "1,1,1"
  }
  inputs {
    key: "lsize"
    value: "1,1,1"
  }
}
