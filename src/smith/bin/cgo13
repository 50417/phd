#!/usr/bin/env python2
#
# Run CGO13 autotuner on training data.
#
from __future__ import print_function
from __future__ import division

import os
import sys

from argparse import ArgumentParser
from sklearn import tree

import labm8
from labm8 import fs

import smith
from smith import cgo13


def main():
    parser = ArgumentParser()
    parser.add_argument('input', help='path to training data CSV')
    parser.add_argument('-t', '--test', action="store", dest="test_data",
                        help='path to training data CSV')
    parser.add_argument("--with-raw-features", action="store_true",
                        help="if true, use raw features as well as combined")
    parser.add_argument("--only-raw-features", action="store_true",
                        help="if true, use only raw features")
    parser.add_argument("-g", "--group", action="store", default=None,
                        help='group results by {suite}')
    parser.add_argument("-n", "--nfolds", action="store", default="10",
                        help="number of folds to use for cross-validation")
    parser.add_argument("--l1o", "--leave-one-out", action="store_true",
                        help="perform leave-one-out validation")
    parser.add_argument("-C", "--classifier", action="store",
                        default="DecisionTree",
                        help="classifier type")
    args = parser.parse_args()

    # try:
    training_data = cgo13.LabelledData.from_csv(smith.assert_exists(args.input),
                                                group_by=args.group)

    if args.test_data:
        test_data = cgo13.LabelledData.from_csv(
            smith.assert_exists(args.test_data))
    else:
        test_data = None
    m = cgo13.classification(training_data, test=test_data,
                             classifier=args.classifier, l1o=args.l1o,
                             with_raw_features=args.with_raw_features,
                             only_raw_features=args.only_raw_features,
                             group_by=args.group, nfolds=args.nfolds)

    groups = sorted(set(training_data["Group"]))

    if len(groups) > 1:
        if isinstance(m[0], (list, tuple)):
            # Return is a matrix of groups:
            for j,train in enumerate(groups):
                for i,test in enumerate(groups):
                    print(train, test, m[j][i], sep=", ")
        else:
            for i,group in enumerate(groups):
                print(group, m[i], sep=", ")
    else:
        print(m.header)
        print(m)
        try:
            m.export_model("tree")
        except AttributeError:
            pass

    # except Exception as e:
    #     print("fatal:", e, file=sys.stderr)
    #     # ml.stop()
    #     sys.exit(1)


if __name__ == '__main__':
    main()
