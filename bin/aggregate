#!/usr/bin/env python3.6

import csv
import datetime
import logging
import os
import re
import spreadsheet

from argparse import ArgumentParser, FileType


def parse_date(string):
    return datetime.datetime.strptime(str(string), "%Y-%m-%d").date()


def read_csv(path):
    with open(path) as infile:
        reader = csv.reader(infile)
        rows = []
        first = True
        for row in reader:
            if first:
                rows.append(row)
                first = False
            else:
                rows.append([parse_date(row[0])] + row[1:])
    return rows


def daterange(start_date, end_date):
    for n in range(int((end_date - start_date).days)):
        yield start_date + datetime.timedelta(n)


def get_row(data, date):
    for row in data[1:]:
        if row[0] > date:
            return [''] * (len(data[0]) - 1)
        elif row[0] == date:
            return row[1:]
    return [''] * (len(data[0]) - 1)


def aggregate(outdir):
    csvs = [
        "Step Count.csv",
        "Heart Rate.csv",
        "Calories In.csv",
        "Calories Out.csv",
        "Water.csv",
        "Caffeine.csv",
        "Weight.csv",
        "BMI.csv",
        "Distance.csv",
        "OmniFocus Tasks.csv",
    ]

    csv_data = [read_csv(f"{outdir}/{x}") for x in csvs]

    # Get the earlest reading date
    start_date = min(x[1][0] for x in csv_data)
    end_date = max(x[1][0] for x in csv_data)
    nrecords = sum(len(x) - 1 for x in csv_data)
    logging.info(f"Aggreating {nrecords} records from {start_date} to {end_date}")

    with open(f"{outdir}/me.csv", "w") as outfile:
        writer = csv.writer(outfile, delimiter=",", quoting=csv.QUOTE_MINIMAL)
        header = []
        for data in csv_data:
            header += data[0][1:]
        writer.writerow(['Date'] + header)
        for date in daterange(start_date, end_date):
            row = []
            for data in csv_data:
                row += get_row(data, date)
            writer.writerow([date] + row)

    logging.info(f'Updating worksheet "Data"')
    gc = spreadsheet.get_connection()
    sh = spreadsheet.get_or_create_spreadsheet(gc, "me.csv")
    worksheet = spreadsheet.get_or_create_worksheet(sh, f"Data")
    with open(f"{outdir}/me.csv") as infile:
        reader = csv.reader(infile)
        rows = [row for row in reader]
        spreadsheet.csv_to_worksheet(worksheet, rows)


def main():
    parser = ArgumentParser()
    parser.add_argument("outdir", metavar="<dir>",
                        help="Path to CSV directory")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="enable more verbose logging output")
    args = parser.parse_args()

    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    else:
        logging.getLogger().setLevel(logging.INFO)
    logging.basicConfig(format="%(message)s")

    aggregate(args.outdir)


if __name__ == "__main__":
    main()
