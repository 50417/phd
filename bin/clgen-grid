#!/usr/bin/env python
#
# Copyright 2016, 2017 Chris Cummins <chrisc.101@gmail.com>.
#
# This file is part of CLgen.
#
# CLgen is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CLgen is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CLgen.  If not, see <http://www.gnu.org/licenses/>.
#
"""
Print model stats.
"""
import sys

from labm8 import jsonutil
from labm8 import fs
from prettytable import PrettyTable

import clgen
from clgen import cli
from clgen import log


def main():
    parser = cli.ArgumentParser(description=__doc__)
    args = parser.parse_args()

    cache = clgen.cachepath()

    x = PrettyTable([
        "id",
        "trained",
        "type",
        "nodes",
        "layers",
        "epochs",
        "lr",
        "dr",
        "gc",
    ])

    x.align['nodes'] = 'r'
    x.align['layers'] = 'l'

    for model in clgen.models():
        meta = model.to_json()

        network = f'{meta["architecture"]["rnn_size"]} x {meta["architecture"]["num_layers"]}'

        if "stats" in meta:
            num_epochs = len(meta["stats"]["epoch_costs"])
        else:
            num_epochs = 0

        if num_epochs >= meta["train_opts"]["epochs"]:
            trained = "Y"
        elif fs.isfile(fs.path(model.cache.path, "LOCK")):
            trained = f"WIP ({num_epochs}/{meta['train_opts']['epochs']})"
        elif num_epochs > 0:
            trained = f"{num_epochs}/{meta['train_opts']['epochs']}"
        else:
            trained = ""

        x.add_row([
            model.hash,
            trained,
            meta["architecture"]["model_type"],
            meta["architecture"]["rnn_size"],
            meta["architecture"]["num_layers"],
            meta["train_opts"]["epochs"],
            "{:.0e}".format(meta["train_opts"]["learning_rate"]),
            meta["train_opts"]["lr_decay_rate"],
            meta["train_opts"]["grad_clip"],
        ])

    print(x.get_string(sortby="nodes"))


if __name__ == "__main__":
    main()
