%run lib/preamble.py

def zero_r():
    def train_fn(model, train, *args, platform=None, **kwargs):
        """ train a model """
        if platform == "amd":
            model["zero_r"] = 0
        elif platform == "nvidia":
            model["zero_r"] = 1

    def test_fn(model, test, seed, *args, **kwargs):
        """ make predictions for test data """
        return [model["zero_r"]] * len(test["y"])

    def save_fn(outpath, model):
        """ save a trained model """
        with open(outpath, "wb") as outfile:
            pickle.dump(model, outfile)

    def load_fn(inpath):
        """ load a trained model """
        with open(inpath, "rb") as infile:
            model = pickle.load(infile)
        return model

    return {
        "name": "zero_r",
        "train_fn": train_fn,
        "test_fn": test_fn,
        "save_fn": save_fn,
        "load_fn": load_fn
    }

seed = 204
n_splits = 10

for i in range(n_splits):
    # train_and_save(zero_r(), "amd", "B", atomizer="CharacterAtomizer", seed=seed, n_splits=n_splits, split_i=split_i)
    # train_and_save(zero_r(), "nvidia", "B", atomizer="CharacterAtomizer", seed=seed, n_splits=n_splits, split_i=split_i)

    train_and_save(zero_r(), "amd", "B", atomizer="GreedyAtomizer", seed=seed, n_splits=n_splits, split_i=i)
    train_and_save(zero_r(), "nvidia", "B", atomizer="GreedyAtomizer", seed=seed, n_splits=n_splits, split_i=i)

# for i in range(n_splits):
    # train_and_save(zero_r(), "amd", "BS", atomizer="CharacterAtomizer", seed=seed, n_splits=n_splits, split_i=split_i)
    # train_and_save(zero_r(), "nvidia", "BS", atomizer="CharacterAtomizer", seed=seed, n_splits=n_splits, split_i=split_i)

    # train_and_save(zero_r(), "amd", "B", atomizer="GreedyAtomizer", seed=seed, n_splits=n_splits, split_i=i)
    # train_and_save(zero_r(), "nvidia", "B", atomizer="GreedyAtomizer", seed=seed, n_splits=n_splits, split_i=i)
