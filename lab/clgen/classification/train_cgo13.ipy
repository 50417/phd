%run lib/preamble.py

def cgo13():
    def create_model(seed=seed, **kwargs):
        """ instantiate a model """
        return DecisionTreeClassifier(
            random_state=seed, splitter="best",
            max_depth=5, min_samples_leaf=5,
            criterion="entropy")

    def train_fn(model, train, *args, **kwargs):
        """ train a model """
        np.random.seed(seed)
        model.fit(train["x_4"], train["y"])
        return {}

    def test_fn(model, test, seed, *args, **kwargs):
        """ make predictions for test data """
        np.random.seed(seed)
        return model.predict(test["x_4"])

    def save_fn(outpath, model):
        """ save a trained model """
        with open(outpath, "wb") as outfile:
            pickle.dump(model, outfile)

    def load_fn(inpath):
        """ load a trained model """
        with open(inpath, "rb") as infile:
            model = pickle.load(infile)
        return model

    return {
        "name": "cgo13",
        "create_model": create_model,
        "train_fn": train_fn,
        "test_fn": test_fn,
        "save_fn": save_fn,
        "load_fn": load_fn
    }

seed = 204
n_splits = 10

for i in range(n_splits):
    # train_and_save(cgo13(), "amd", "B", split=(.6, .2, .2), seed=seed)
    # train_and_save(cgo13(), "nvidia", "B", split=(.6, .2, .2), seed=seed)
    #
    train_and_save(cgo13(), "amd", "B", atomizer="GreedyAtomizer", seed=seed, split_i=i)
    train_and_save(cgo13(), "nvidia", "B", atomizer="GreedyAtomizer", seed=seed, split_i=i)

# for seed in range(204, 214):
#     train_and_save(cgo13(), "amd", "BS", split=(.6, .2, .2), seed=seed)
#     train_and_save(cgo13(), "nvidia", "BS", split=(.6, .2, .2), seed=seed)
#
#     train_and_save(cgo13(), "amd", "BS", split=(.6, .2, .2), atomizer="GreedyAtomizer", seed=seed)
#     train_and_save(cgo13(), "nvidia", "BS", split=(.6, .2, .2), atomizer="GreedyAtomizer", seed=seed)
