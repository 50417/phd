#!/usr/bin/env python3
#
#
import matplotlib
import matplotlib.cm as cm
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import re
import seaborn as sns
import sklearn
import sys

from argparse import ArgumentParser
from collections import Counter
from copy import copy
from functools import partial
from itertools import combinations
from math import sqrt,ceil
from numpy.random import RandomState
from os import system
from random import seed,random
from sklearn.base import clone
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import normalize
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier, export_graphviz

import labm8
from labm8 import fmt
from labm8 import fs
from labm8 import io
from labm8 import math as labmath
from labm8 import viz

import smith
from smith import cgo13


def main():
    # A = pd.read_csv("driver/data/synthetic/platform-a.csv.bkp")
    # B = pd.read_csv("driver/data/synthetic/platform-b.csv.bkp")

    # Apruned = A[A["kernel_nlines"] > 5][:44924]
    # Bpruned = B[B["kernel_nlines"] > 5][:44924]

    # print(len(A), len(Apruned), (len(Apruned) / len(A)) * 100)
    # print("num kernels", len(set(Apruned["benchmark"])))
    # print()
    # print(len(B), len(Bpruned), (len(Bpruned) / len(B)) * 100)
    # print("num kernels", len(set(Bpruned["benchmark"])))

    # Apruned.to_csv("driver/data/synthetic/platform-a.csv", index=False)
    # Bpruned.to_csv("driver/data/synthetic/platform-b.csv", index=False)

    A = pd.read_csv("driver/data/synthetic/platform-a.csv")
    B = pd.read_csv("driver/data/synthetic/platform-b.csv")




if __name__ == '__main__':
    main()
