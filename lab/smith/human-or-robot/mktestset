#!/usr/bin/env python3
#
#
import os
import re
import time

from random import choice, random
from shutil import copyfile, move

def main():
    CLSMITH = True

    def get_kernels(path):
        with open(path) as infile:
            return [s.strip() for s in re.split(r"/\* .+ \*/", infile.read())
                    if s.strip()]

    def write_sample(sample, i):
        with open("sample-{}.cl".format(i), "w") as outfile:
            print(sample, file=outfile)

    uid = hex(int(time.time()))[6:]

    with open("uid.tex", "w") as outfile:
        print("{}-answers.txt".format(uid), end="", file=outfile)

    human = get_kernels("data/github.cl")
    if CLSMITH:
        synthetic = get_kernels("data/clsmith.cl")
    else:
        synthetic = get_kernels("data/synthetic.cl")

    samples = []
    with open("data/{}-solutions.txt".format(uid), "w") as outfile:
        if CLSMITH:
            print(
                """Thank you for participating in this survey. You were part of a
control group. The synthetic code you saw was generated by CLsmith, an
OpenCL fuzz tester. Below are the solutions for the test which you
undertook:

""", file=outfile)
        else:
            print(
                """Thank you for participating in this survey. The synthetic OpenCL
is generated by 'CLgen', an in-development program synthesis tool
which uses neural-networks to generate human-like source codes. Below
are the solutions for the test which you undertook:

""", file=outfile)
        print("TEST", uid, file=outfile)
        for i in range(1, 11):
            is_human = True if random() < .5 else False

            print("sample:", i, "is", "human" if is_human else "synthetic")
            print("sample:", i, "is", "human" if is_human else "synthetic",
                  file=outfile)

            # Select a sample (must be unique):
            while True:
                sample = choice(human if is_human else synthetic)
                if sample not in samples:
                    samples.append(sample)
                    break

            write_sample(sample, i)

    # Generate questions PDF
    os.system("pdflatex questions.tex >/dev/null")

    move("questions.pdf", "data/{}-questions.pdf".format(uid))
    copyfile("answers.txt", "data/{}-answers.txt".format(uid))
    print("Written file data/{}-questions.pdf".format(uid))


if __name__ == '__main__':
    main()
