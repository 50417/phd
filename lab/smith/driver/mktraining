#!/usr/bin/env python3
#
# Generate OpenCL programs using clsmith.
#
import csv
import sys
import os

from argparse import ArgumentParser

import labm8
from labm8 import fs
from labm8 import math as labmath

import smith
from smith import features

class MalformedDataException(smith.SmithException): pass


def unique(a):
    return list(set(a))


def intersect(a, b):
    return list(set(a) & set(b))


def make_kernel_features_file(kernels_dir, kernel_features_path):
    kernel_paths = fs.ls(kernels_dir, abspaths=True)
    with open(kernel_features_path, 'w') as outfile:
        features.files(kernel_paths, file=outfile)


def get_kernel_features(kernels):
    kernel_features_path = fs.path(kernels, 'features.csv')

    if not fs.exists(kernel_features_path):
        make_kernel_features_file(kernels, kernel_features_path)

    with open(kernel_features_path) as infile:
        reader = csv.DictReader(infile)
        return [row for row in reader]


def results_to_dict(row):
    return {
        'dataset': row[0],
        'file': fs.basename(row[1]),
        'kernel': row[2],
        'wgsize': row[3],
        'transfer': row[4],
        'runtime': row[5],
        'ci': row[6]
    }


def read_results(csv_path):
    with open(csv_path) as infile:
        reader = csv.reader(infile)
        results = []
        for row in reader:
            try:
                results.append(results_to_dict(row))
            except Exception as e:
                pass
        return results


def print_header(file=sys.stdout):
    print(
        "benchmark",
        "dataset",
        "comp",
        "rational",
        "mem",
        "localmem",
        "coalesced",
        "atomic",
        "transfer",
        "wgsize",
        "F1:transfer/(comp+mem)",
        "F2:coalesced/mem",
        "F3:(localmem/mem)*avgws",
        "F4:comp/mem",
        "oracle",
        "runtime",
        "speedup",
        "penalty",
        sep=',', file=file)


def fetch_result(filename, kernel, dataset, results):
    """
    Fetch result from results which matches keys.
    """
    res = [d for d in results if
           d['file'] == filename and
           d['kernel'] == kernel and
           d['dataset'] == dataset]

    return {
        'dataset': res[0]['dataset'],
        'file': res[0]['file'],
        'kernel': res[0]['kernel'],
        'wgsize': labmath.mean([round(float(d['wgsize'])) for d in res]),
        'transfer': labmath.mean([round(float(d['transfer'])) for d in res]),
        'runtime': labmath.mean([float(d['runtime']) for d in res]),
        'ci': labmath.mean([float(d['ci']) for d in res])
    }

def fetch_kernel_features(filename, kernel, kernel_features):
    res = [r for r in kernel_features if
           r['file'] == filename and
           r['kernel'] == kernel]
    assert(len(res) == 1)
    return res[0]


def print_datapoint(filename, kernel, dataset, kernel_features, cpu, gpu,
                    file=sys.stdout):
    cpur = fetch_result(filename, kernel, dataset, cpu)
    gpur = fetch_result(filename, kernel, dataset, gpu)
    kfeatures = fetch_kernel_features(filename, kernel, kernel_features)

    if gpur['runtime'] < cpur['runtime']:
        oracle = gpur
        fast = gpur['runtime']
        slow = cpur['runtime']
    else:
        oracle = cpur
        fast = cpur['runtime']
        slow = gpur['runtime']
    speedup = slow / fast
    penalty = fast / slow
    benchmark = '-'.join((filename, kernel))
    transfer = int(oracle['transfer'])
    comp = int(kfeatures['comp'])
    mem = int(kfeatures['mem'])
    localmem = int(kfeatures['localmem'])
    wgsize = oracle['wgsize']
    F1 = transfer / max((comp + mem), 1)
    F3 = (localmem / max(mem, 1)) * wgsize
    print(
        benchmark,
        dataset,
        comp,
        kfeatures['rational'],
        mem,
        localmem,
        kfeatures['coalesced'],
        kfeatures['atomic'],
        transfer,
        wgsize,
        round(F1, 6),
        kfeatures['F2:coalesced/mem'],
        round(F3, 6),
        kfeatures['F4:comp/mem'],
        'GPU' if oracle == gpur else 'CPU',
        fast,
        '{0:.2f}'.format(speedup),
        '{0:.2f}'.format(penalty),
        sep=',', file=file)



def mktraining(kernels, cpu_path, gpu_path, out=sys.stdout, metaout=sys.stderr):
    print("loading kernel features ... ", end='', file=metaout)
    kernel_features = get_kernel_features(kernels)
    print(len(kernel_features), file=metaout)
    print("loading cpu results ... ", end='', file=metaout)
    cpu = read_results(cpu_path)
    print(len(cpu), file=metaout)
    print("loading gpu results ... ", end='', file=metaout)
    gpu = read_results(gpu_path)
    print(len(gpu), file=metaout)

    print("common results ... ", end='', file=metaout)
    kfiles = [(fs.basename(r['file']), r['kernel']) for r in kernel_features]
    common = intersect(
        [(r['file'], r['kernel'], r['dataset']) for r in cpu
         if (r['file'], r['kernel']) in kfiles],
        [(r['file'], r['kernel'], r['dataset']) for r in gpu
         if (r['file'], r['kernel']) in kfiles])
    print(len(common), file=metaout)

    print("    # files ... ", end='', file=metaout)
    files = unique([d[0] for d in common])
    print(len(files), file=metaout)

    print("    # kernels ... ", end='', file=metaout)
    kernels = unique([(d[0], d[1]) for d in common])
    print(len(kernels), file=metaout)

    print("    # datasets ... ", end='', file=metaout)
    datasets = unique([d[2] for d in common])
    print(len(datasets), file=metaout)

    print_header(file=out)
    for filename,kernel,dataset in common:
        print_datapoint(filename, kernel, dataset, kernel_features,
                        cpu, gpu, file=out)


def main():
    parser = ArgumentParser()
    parser.add_argument('kernels', help='path to kernels directory')
    parser.add_argument('cpu', help='path to CPU results CSV')
    parser.add_argument('gpu', help='path to GPU results CSV')
    args = parser.parse_args()

    try:
        smith.assert_exists(args.kernels)
        smith.assert_exists(args.cpu)
        smith.assert_exists(args.gpu)
    except Exception as e:
        print('fatal:', e, file=sys.stderr)
        sys.exit(1)

    mktraining(args.kernels, args.cpu, args.gpu)


if __name__ == '__main__':
    main()
