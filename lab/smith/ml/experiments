#!/usr/bin/env python3
#
import matplotlib
import matplotlib.cm as cm
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import re
import seaborn as sns
import sklearn
import sys

from argparse import ArgumentParser
from collections import Counter
from copy import copy
from itertools import combinations
from functools import partial
from math import sqrt,ceil
from random import seed,random
from sklearn.base import clone
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import normalize
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from numpy.random import RandomState


import labm8
from labm8 import fmt
from labm8 import fs
from labm8 import math as labmath
from labm8 import viz

import smith
from smith import cgo13

# Seaborn configuration:
sns.set(style="ticks", color_codes=True)
plt.style.use(["seaborn-white", "seaborn-paper"])


def get_cgo13_model():
    return DecisionTreeClassifier(
        random_state=204,
        splitter="best",
        criterion="entropy",
        # max_depth=4,
        # min_samples_split=6,
        # min_samples_leaf=3
    )


def get_cgo13_features(D):
    return np.array([
        (D["transfer"].values / (D["comp"].values + D["mem"].values)),
        (D["coalesced"].values / D["mem"].values),
        ((D["localmem"].values / D["mem"].values) * D["wgsize"].values),
        (D["comp"].values / D["mem"].values),
    ]).T


def get_our_model():
    # return KNeighborsClassifier(1)
    # return SVC(kernel="linear", C=0.025)
    # return SVC(gamma=2, C=1)
    # return RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)
    # return AdaBoostClassifier()
    # return GaussianNB()
    # return LinearDiscriminantAnalysis()
    # return QuadraticDiscriminantAnalysis()
    return DecisionTreeClassifier(
        random_state=204, criterion="entropy", splitter="best")


def get_our_features(D):
    return np.array([
        D["comp"].values,
        D["rational"].values,
        D["mem"].values,
        D["localmem"].values,
        D["coalesced"].values,
        D["atomic"].values,
        D["transfer"].values,
        D["wgsize"].values,
        (D["transfer"].values / (D["comp"].values + D["mem"].values)),
        (D["coalesced"].values / D["mem"].values),
        ((D["localmem"].values / D["mem"].values) * D["wgsize"].values),
        (D["comp"].values / D["mem"].values),
    ]).T


def get_raw_features(D):
    return np.array([
        D["comp"].values,
        D["rational"].values,
        D["mem"].values,
        D["localmem"].values,
        D["coalesced"].values,
        D["atomic"].values,
        D["transfer"].values,
        D["wgsize"].values,
    ]).T


def get_labels(D):
    return D["oracle"]


def customaxis(ax, c_left='k', c_bottom='k', c_right='none', c_top='none',
               lw=1, size=12, pad=8):
    """
    Credit: http://stackoverflow.com/a/11417222
    """
    for c_spine, spine in zip([c_left, c_bottom, c_right, c_top],
                              ['left', 'bottom', 'right', 'top']):
        if c_spine != 'none':
            ax.spines[spine].set_color(c_spine)
            ax.spines[spine].set_linewidth(lw)
        else:
            ax.spines[spine].set_color('none')
    if (c_bottom == 'none') & (c_top == 'none'): # no bottom and no top
        ax.xaxis.set_ticks_position('none')
    elif (c_bottom != 'none') & (c_top != 'none'): # bottom and top
        ax.tick_params(axis='x', direction='out', width=lw, length=7,
                       color=c_bottom, labelsize=size, pad=pad)
    elif (c_bottom != 'none') & (c_top == 'none'): # bottom but not top
        ax.xaxis.set_ticks_position('bottom')
        ax.tick_params(axis='x', direction='out', width=lw, length=7,
                       color=c_bottom, labelsize=size, pad=pad)
    elif (c_bottom == 'none') & (c_top != 'none'): # no bottom but top
        ax.xaxis.set_ticks_position('top')
        ax.tick_params(axis='x', direction='out', width=lw, length=7,
                       color=c_top, labelsize=size, pad=pad)
    if (c_left == 'none') & (c_right == 'none'): # no left and no right
        ax.yaxis.set_ticks_position('none')
    elif (c_left != 'none') & (c_right != 'none'): # left and right
        ax.tick_params(axis='y', direction='out', width=lw, length=7,
                       color=c_left, labelsize=size, pad=pad)
    elif (c_left != 'none') & (c_right == 'none'): # left but not right
        ax.yaxis.set_ticks_position('left')
        ax.tick_params(axis='y', direction='out', width=lw, length=7,
                       color=c_left, labelsize=size, pad=pad)
    elif (c_left == 'none') & (c_right != 'none'): # no left but right
        ax.yaxis.set_ticks_position('right')
        ax.tick_params(axis='y', direction='out', width=lw, length=7,
                       color=c_right, labelsize=size, pad=pad)


def leave_one_benchmark_out(clf, get_features, D, benchmark, verbose=False):
    # Create data masks. For training we exclude all results from
    # the test benchmark.
    test_mask = D["benchmark"].str.contains(r"^" + benchmark)
    train_mask = ~test_mask

    # Create training and testing data:
    X_train = get_features(D[train_mask])
    y_train = get_labels(D[train_mask])

    D_test = D[test_mask]
    X_test = get_features(D_test)
    y_test = get_labels(D_test)

    # Debugging printout:
    if verbose:
        print("benchmark:", benchmark,
              "train on:", len(X_train), "test on:", len(X_test))

    # Train classifier:
    clf.fit(X_train, y_train)

    # Make predictions
    predicted = clf.predict(X_test)
    D_out = []
    for d,y,p in zip(D_test.to_dict('records'), y_test, predicted):
        d["p"] = p
        d["p_correct"] = 1 if y == p else 0
        D_out.append(d)

    # Return a list of dicts
    return D_out


def rand_jitter(arr, factor=0.01, randomstate=RandomState(204)):
    stdev = factor * (max(arr) - min(arr))
    return arr + randomstate.randn(len(arr)) * stdev


def scatter_with_jitter(plt, x, y, **kwargs):
    jitter_opts = kwargs.get("jitter_opts", {})
    if "jitter_opts" in kwargs: kwargs.pop("jitter_opts")

    jitter_factor = kwargs.get("jitter", None)
    if jitter_factor is not None:
        jitter_opts["factor"] = jitter_factor
        kwargs.pop("jitter")

    return plt.scatter(rand_jitter(x, **jitter_opts),
                       rand_jitter(y, **jitter_opts), **kwargs)

def motivation():
    #######################
    # Motivation Baseline #
    #######################
    clf = get_cgo13_model()
    platform = "b"
    suite = "parboil"
    other_suite = "shoc"

    # Load data and mask off the benchmark suite in use:
    B = pd.read_csv("data/{}/benchmarks.csv".format(platform))
    test_mask = B["benchmark"].str.contains(r"^{}-".format(suite))
    B = B[test_mask]

    benchmark_names = sorted(set([
        re.match(r"^([^0-9]+-[0-9\.]+-[^-]+)", b).group(1)
        for b in B["benchmark"] if b.startswith(suite)
    ]))

    B_out = []
    for benchmark in benchmark_names:
        B_out += leave_one_benchmark_out(clf, get_cgo13_features, B, benchmark)
    B_out = pd.DataFrame(B_out)
    assert(len(B) == len(B_out))

    pca = PCA(n_components=2)
    pca.fit(get_raw_features(B))

    X = pca.transform(get_raw_features(B))
    jitter = .075

    # Apply jitter and repack
    x,y = zip(*X)
    x = rand_jitter(x, jitter, RandomState(204))
    y = rand_jitter(y, jitter, RandomState(205))
    X = list(zip(x, y))

    correct = [x for x,b in zip(X,B_out.to_dict('records')) if b["p_correct"]]
    incorrect = [x for x,b in zip(X,B_out.to_dict('records')) if not b["p_correct"]]

    print()
    print("Motivation:")
    print("  #. correct:   ", len(correct),
          "({:.1f}%)".format((len(correct) / len(X)) * 100))
    print("  #. incorrect: ", len(incorrect))
    print()

    # Scatter type:
    plot_opts = { "s": 85, "alpha": .65 }
    plt.scatter(*zip(*incorrect),
                color="r", marker="v", label='Incorrect', **plot_opts)
    plt.scatter(*zip(*correct),
                color="b", marker="^", label='Correct', **plot_opts)

    ax = plt.gca()
    # No tick labels:
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    # customaxis(ax)

    # Axis labels
    plt.xlabel(r"$e_1 \rightarrow$", ha="right")
    plt.ylabel(r"$e_2 \rightarrow$", ha="right")

    # Position axis labels at end of axis
    ax.xaxis.set_label_coords(1, -.025)
    ax.yaxis.set_label_coords(-.025, 1)

    # Show legend
    handles, labels = ax.get_legend_handles_labels()
    ax.legend(handles[::-1], labels[::-1])
    ax.get_legend().draw_frame(True)

    xlim = ax.get_xlim()
    ylim = ax.get_ylim()

    figsize = (2.5,2.5)
    viz.finalise(fs.path("~/phd/docs/wip-smith/img/motivation-a.pdf"),
                 figsize=figsize, tight=True)

    # Reset classifier
    clf = clone(clf)


    ##############################
    # With additional benchmarks #
    ##############################

    # Load data and mask off the benchmark suite in use:
    B = pd.read_csv("data/{}/benchmarks.csv".format(platform))
    train_mask = B["benchmark"].str.contains(r"^{}|{}-".format(suite, other_suite))
    test_mask = B["benchmark"].str.contains(r"^{}-".format(suite))
    candidates = [
        "shoc-1.1.5-S3D-ratx_kernel",
        "shoc-1.1.5-S3D-ratxb_kernel",
        "shoc-1.1.5-S3D-rdsmh_kernel",
        "shoc-1.1.5-S3D-rdwdot10_kernel",
        "shoc-1.1.5-S3D-rdwdot2_kernel",
        "shoc-1.1.5-S3D-rdwdot3_kernel",
        "shoc-1.1.5-S3D-rdwdot6_kernel",
    ]
    other_mask = B["benchmark"].str.contains("|".join(candidates))

    Btrain = B[train_mask]
    Btest = B[test_mask]
    Bother = B[other_mask]

    B_out = []
    for benchmark in benchmark_names:
        B_out += leave_one_benchmark_out(
            clf, get_cgo13_features, Btrain, benchmark)
    B_out = pd.DataFrame(B_out)
    assert(len(Btest) == len(B_out))

    X = pca.transform(get_raw_features(Btest))

    # Apply jitter
    x,y = zip(*X)
    x = rand_jitter(x, jitter, RandomState(204))
    y = rand_jitter(y, jitter, RandomState(205))
    X = list(zip(x, y))

    correct = [
        x for x,b in zip(X,B_out.to_dict('records')) if b["p_correct"]]
    incorrect = [
        x for x,b in zip(X,B_out.to_dict('records')) if not b["p_correct"]]
    other = pca.transform(get_raw_features(Bother))

    print()
    print("Motivation w. other suite:")
    print("  #. correct:   ", len(correct),
          "({:.1f}%)".format((len(correct) / len(X)) * 100))
    print("  #. incorrect: ", len(incorrect))
    print("  #. additional:", len(Bother))
    print()

    scatter_with_jitter(plt, *zip(*other),
                        color="g", marker="o", label="Additional",
                        jitter=jitter, **plot_opts)
    plt.scatter(*zip(*incorrect),
                color="r", marker="v", label='Incorrect', **plot_opts)
    plt.scatter(*zip(*correct),
                color="b", marker="^", label='Correct', **plot_opts)

    ax = plt.gca()
    # No tick labels:
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    # customaxis(ax)

    # Axis labels
    plt.xlabel(r"$e_1 \rightarrow$", ha="right")
    plt.ylabel(r"$e_2 \rightarrow$", ha="right")

    # Position axis labels at end of axis
    ax.xaxis.set_label_coords(1, -.025)
    ax.yaxis.set_label_coords(-.025, 1)

    # Show legend
    handles, labels = ax.get_legend_handles_labels()
    ax.legend(handles[::-1], labels[::-1])
    ax.get_legend().draw_frame(True)

    # Set same axis limits as before
    ax.set_xlim(xlim)
    ax.set_ylim(ylim)

    # plt.show()
    viz.finalise(fs.path("~/phd/docs/wip-smith/img/motivation-b.pdf"),
                 figsize=figsize, tight=True)


    ##########################
    # Survey of GPGPU papers #
    ##########################

    # Load data from literature review:
    data = pd.read_csv("data/motivation-survey.csv", delimiter="\t")

    benchmark_counts = [x[1] for x in data.groupby("Paper").size().iteritems()]
    median_benchmark_counts = labmath.median(benchmark_counts)

    suites = pd.DataFrame(
        [(x[0], x[1] / median_benchmark_counts)
         for x in data.groupby(["Benchmark Suite"]).size().iteritems()],
        columns=["Suite", "#. benchmarks"])

    # To sort by frequency count:
    suites.sort_values("#. benchmarks", inplace=True, ascending=False)
    # To sort by alphabetical:
    # suites.sort_values("Suite", inplace=True)

    print(suites)

    ax = sns.barplot(x="Suite", y="#. benchmarks", data=suites)

    # customaxis(ax)

    # Add threshold line:
    plt.axhline(y=1, color="k", lw=1)

    # Rotate x labels:
    plt.setp(ax.get_xticklabels(), rotation=90)

    plt.xlabel("")
    plt.ylabel(r"\#. benchmarks")

    figsize = (4, 2.35)
    viz.finalise(fs.path("~/phd/docs/wip-smith/img/motivation-c.pdf"),
                 figsize=figsize, tight=True)


counter = 0
def check_for_subset(candidates):
    global counter
    counter += 1
    print("\r\033[Ktest #.", counter, end="")
    sys.stdout.flush()

    clf = get_cgo13_model()
    platform = "b"
    suite = "parboil"
    other_suite = "shoc"

    # Load data and mask off the benchmark suite in use:
    B = pd.read_csv("data/{}/benchmarks.csv".format(platform))
    test_mask = B["benchmark"].str.contains(r"^{}-".format(suite))
    B = B[test_mask]

    benchmark_names = sorted(set([
        re.match(r"^([^0-9]+-[0-9\.]+-[^-]+)-", b).group(1)
        for b in B["benchmark"] if b.startswith(suite)
    ]))

    # Scatter type:
    opts = { "s": 85, "alpha": .65 }

    # Reset classifier
    clf = clone(clf)

    # Load data and mask off the benchmark suite in use:
    B = pd.read_csv("data/{}/benchmarks.csv".format(platform))
    train_mask = B["benchmark"].str.contains(r"^{}|{}-".format(suite, other_suite))
    test_mask = B["benchmark"].str.contains(r"^{}-".format(suite))
    other_mask = B["benchmark"].str.contains("|".join(candidates))

    Btrain = B[train_mask]
    Btest = B[test_mask]
    Bother = B[other_mask]

    B_out = []
    for benchmark in benchmark_names:
        B_out += leave_one_benchmark_out(clf, get_cgo13_features, Btrain,
                                         benchmark, verbose=False)
    B_out = pd.DataFrame(B_out)
    assert(len(Btest) == len(B_out))

    jitter = .05
    pca = PCA(n_components=2)
    pca.fit(get_raw_features(Btrain))
    X = pca.transform(get_raw_features(Btest))

    # Apply jitter
    x,y = zip(*X)
    x = rand_jitter(x, jitter, RandomState(204))
    y = rand_jitter(y, jitter, RandomState(205))
    X = list(zip(x, y))

    incorrect = [x for x,b in zip(X,B_out.to_dict('records')) if not b["p_correct"]]
    return len(incorrect)
    # TODO:
    correct = [x for x,b in zip(X,B_out.to_dict('records')) if b["p_correct"]]

    other = pca.transform(get_raw_features(Bother))

    scatter_with_jitter(plt, *zip(*other), color="g", label='Correct', jitter=jitter, **opts)
    plt.scatter(*zip(*incorrect), color="r", label='Incorrect', **opts)
    plt.scatter(*zip(*correct), color="b", label='Correct', **opts)

    ax = plt.gca()
    # No ticks
    ax.xaxis.set_major_locator(plt.NullLocator())
    ax.yaxis.set_major_locator(plt.NullLocator())

    # Axis labels
    plt.xlabel("e1 →", ha="right")
    plt.ylabel("e2 →", ha="right")

    # Position axis labels at end of axis
    ax.xaxis.set_label_coords(1, -.025)
    ax.yaxis.set_label_coords(-.025, 1)

    # Show legend
    # handles, labels = ax.get_legend_handles_labels()
    # ax.legend(handles, labels)
    # ax.get_legend().draw_frame(True)

    # Set same axis limits as before

    with open("data/img/motivation-b-{}.txt".format(counter), "w") as outfile:
        print("\n".join(candidates), file=outfile)

    figsize = (2.5,2.5)
    # plt.show()
    viz.finalise("data/img/motivation-b-{}.pdf".format(counter),
                 figsize=figsize)
    return len(incorrect)


def speedup_with_synthetic_benchmarks(platform_id):
    #
    # Cross-validate CGO13 model across NPB benchmarks, with and
    # without synthetic benchmarks.
    #
    # Datasets:
    #
    #   B -  benchmarks
    #   S -  synthetics
    #   BS - benchmarks + synthetics
    #
    B = pd.read_csv("data/{platform_id}/benchmarks.csv"
                    .format(platform_id=platform_id.lower()))
    B["synthetic"] = np.zeros(len(B))

    S = pd.read_csv("data/{platform_id}/synthetics.csv"
                    .format(platform_id=platform_id.lower()))
    S["synthetic"] = np.ones(len(S))

    BS = pd.concat((B, S))

    # Find the ZeroR. This is the device which is most frequently
    # optimal:
    Bmask = B[B["benchmark"].str.contains("npb-3.3-")]

    zeror = Counter(Bmask["oracle"]).most_common(1)[0][0]
    zeror_freq = Counter(Bmask["oracle"]).most_common(1)[0][1]
    zeror_ratio = zeror_freq / len(Bmask)
    zeror_runtime = "runtime_" + zeror.lower()

    # Get the names of the benchmarks, in the form: $suite-$version-$benchmark
    benchmark_names = sorted(set([
        re.match(r"^([^0-9]+-[0-9\.]+-[^-]+)-", b).group(1)
        for b in B["benchmark"] if b.startswith("npb-")
    ]))

    B_out, BS_out = [], []
    for benchmark in benchmark_names:
        # CGO13 predictive model:
        clf = get_cgo13_model()
        features = get_cgo13_features
        # clf = KNeighborsClassifier(n_neighbors=1)

        # Cross validate on baseline:
        B_out += leave_one_benchmark_out(clf, get_cgo13_features, B, benchmark)

        # Reset model.
        clf = get_cgo13_model()

        # Repeate cross-validation with synthetic kernels:
        BS_out += leave_one_benchmark_out(clf, get_cgo13_features, BS, benchmark)
        assert len(B_out) == len(BS_out)

    # Create results frame:
    R_out = []
    for b,bs in zip(B_out, BS_out):
        # Get runtimes of device using predicted device.
        b_p_runtime = b["runtime_" + b["p"].lower()]
        bs_p_runtime = bs["runtime_" + bs["p"].lower()]

        # Speedup is the ratio of runtime using the predicted device
        # over runtime using ZeroR device.
        b["p_speedup"] = b_p_runtime / b[zeror_runtime]
        bs["p_speedup"] = bs_p_runtime / bs[zeror_runtime]

        # Oracle is the ratio of runtime using the best device vs
        # runtime using predicted device.
        b["p_oracle"] = b["runtime"] / b_p_runtime
        bs["p_oracle"] = bs["runtime"] / bs_p_runtime

        # Get the group label, in the form $benchmark.$dataset:
        group = re.sub(r"[^-]+-[0-9\.]+-([^-]+)-.+", r"\1",
                       b["benchmark"]) + "." + b["dataset"]
        b["group"] = group
        bs["group"] = group

        # Set the training data type.
        b["training"] = "Baseline"
        bs["training"] = "w. Synthesized"

        R_out.append(b)
        R_out.append(bs)
    R = pd.DataFrame(R_out)

    b_mask = R["training"] == "Baseline"
    bs_mask = R["training"] == "w. Synthesized"

    B_acc = labmath.mean(R[b_mask].groupby(["group"])["p_correct"].mean())
    BS_acc = labmath.mean(R[bs_mask].groupby(["group"])["p_correct"].mean())

    B_oracle = labmath.mean(R[b_mask].groupby(["group"])["p_oracle"].mean())
    BS_oracle = labmath.mean(R[bs_mask].groupby(["group"])["p_oracle"].mean())

    B_speedup = labmath.mean(R[b_mask].groupby(["group"])["p_speedup"].mean())
    BS_speedup = labmath.mean(R[bs_mask].groupby(["group"])["p_speedup"].mean())

    # Print analytics:
    print()
    print("Experiment 1 on Platform {}:".format(platform_id.upper()))
    print("  ZeroR device:            {} ({:.1f} %)"
          .format(zeror, zeror_ratio * 100))
    print()
    print("  Accuracy of baseline:    {:.1f} %".format(B_acc * 100))
    print("  Accuracy w. synthesized: {:.1f} %".format(BS_acc * 100))
    print()
    print("  Oracle of baseline:      {:.1f} %".format(B_oracle * 100))
    print("  Oracle w. synthesized:   {:.1f} %".format(BS_oracle * 100))
    print()
    print("  Speedup of baseline:     {:.2f} x".format(B_speedup))
    print("  Speedup w. synthesized:  {:.2f} x".format(BS_speedup))
    print()

    # Plot summary:
    ax = sns.barplot(x="group", y="p_speedup", hue="training",
                     data=R, ci=None)
    plt.ylabel("Speedup")
    plt.xlabel("")

    # FIXME: Apply hatch pattern to alternate bars:
    # for i,bar in enumerate(ax.patches):
    #     if not i % 2:
    #         bar.set_hatch("////")

    # Speedup line
    plt.axhline(y=1, color="k", lw=1)

    # No legend title
    ax.get_legend().set_title("")

    figsize = (9, 2.2)
    if platform_id == "B":
        plt.ylim(0, 15)
    plt.setp(ax.get_xticklabels(), rotation=90)

    # plt.show()
    viz.finalise(fs.path("~/phd/docs/wip-smith/img/ex1-{}.png"
                         .format(platform_id.upper())),
                 figsize=figsize, tight=True)


def predictive_models(benchmark, platform_id):
    B = pd.read_csv("data/{platform_id}/benchmarks.csv"
                    .format(platform_id=platform_id.lower()))
    S = pd.read_csv("data/{platform_id}/synthetics.csv"
                    .format(platform_id=platform_id.lower()))
    BS = pd.concat((B, S))


def experiment1():
    predictive_models("npb-3.3-FT", "B")
    speedup_with_synthetic_benchmarks("A")
    speedup_with_synthetic_benchmarks("B")


def escape_benchmark_name(g):
    c = g.split('-')
    if (c[0] == "shoc" or
        c[0] == "npb" or
        c[0] == "nvidia" or
        c[0] == "amd"):
        return c[0].upper() + "." + c[-2]
    else:
        return c[0].capitalize() + "." + c[-2]


def experiment2():
    #
    # Cross-validate across all benchmarks using CGO13 model and our
    # own, with and without synthetic benchmarks. Report per-platform
    # speedup of our model over CGO13.
    #
    def compare_clfs(clf1, get_features1, clf2, get_features2, D1, D2, benchmark):
        test1_mask = D1["benchmark"].str.contains(r"^" + benchmark)
        test2_mask = D2["benchmark"].str.contains(r"^" + benchmark)
        assert(len(D1[test1_mask]) == len(D2[test2_mask]))

        # Create data masks. For training we exclude all results from
        # benchmark.
        train1_mask = ~test1_mask
        train2_mask = ~test2_mask

        # Create training and testing data:
        X1_train = get_features1(D1.loc[train1_mask])
        X2_train = get_features2(D2.loc[train2_mask])
        y1_train = get_labels(D1[train1_mask])
        y2_train = get_labels(D2[train2_mask])

        D1_test = D1[test1_mask]
        D2_test = D2[test2_mask]
        X1_test = get_features1(D1.loc[test1_mask])
        X2_test = get_features2(D2.loc[test2_mask])
        y1_test = get_labels(D1_test)
        y2_test = get_labels(D2_test)

        # Train classifiers:
        clf1.fit(X1_train, y1_train)
        clf2.fit(X2_train, y2_train)

        # Make predictions
        predicted1 = clf1.predict(X1_test)
        predicted2 = clf2.predict(X2_test)

        D_out = []
        for d,y,p1,p2 in zip(D1_test.to_dict('records'), y1_test,
                             predicted1, predicted2):
            d["p1"], d["p2"] = p1, p2
            d["p1_correct"] = 1 if y == p1 else 0
            d["p2_correct"] = 1 if y == p2 else 0
            D_out.append(d)

        # Return a list of dicts
        return D_out


    aB = pd.read_csv("data/a/benchmarks.csv")
    aB["synthetic"] = np.zeros(len(aB))
    bB = pd.read_csv("data/b/benchmarks.csv")
    bB["synthetic"] = np.zeros(len(bB))
    B = pd.concat((aB, bB))

    aS = pd.read_csv("data/a/synthetics.csv")
    aS["synthetic"] = np.ones(len(aS))
    bS = pd.read_csv("data/b/synthetics.csv")
    bS["synthetic"] = np.ones(len(bS))
    S = pd.concat((aS, bS))

    aBS = pd.concat((aB, aS))
    bBS = pd.concat((bB, bS))
    BS = pd.concat((B, S))

    assert(len(B) == len(aB) + len(bB))
    assert(len(S) == len(aS) + len(bS))
    assert(len(BS) == len(aBS) + len(bBS))

    benchmark_names = sorted(set(B["benchmark"]))

    # Perform cross-validation:
    B_out = []
    for benchmark in benchmark_names:
        cgo13_clf = get_cgo13_model()
        our_clf = get_our_model()

        cgo13_features = get_cgo13_features
        our_features = get_our_features

        # Cross validate on baseline:
        tmp = compare_clfs(cgo13_clf, cgo13_features, our_clf, our_features,
                           aBS, aBS, benchmark)
        for d in tmp:
            d["platform"] = "Platform A"
        B_out += tmp

        # Reset models.
        cgo13_clf = get_cgo13_model()
        our_clf = get_our_model()

        # Same as before, on other platform:
        tmp = compare_clfs(cgo13_clf, cgo13_features, our_clf, our_features,
                           bBS, bBS, benchmark)
        for d in tmp:
            d["platform"] = "Platform B"
        B_out += tmp


    # Create results frame:
    R_out = []
    # Get runtimes of device using predicted device.
    for b in B_out:
        p1_runtime = b["runtime_" + b["p1"].lower()]
        p2_runtime = b["runtime_" + b["p2"].lower()]

        # Speedup is the ratio of runtime using our predicted device
        # over runtime using CGO13 predicted device.
        b["p_speedup"] = p2_runtime / p1_runtime

        # Oracle is the ratio of runtime using the best device vs
        # runtime using predicted device.
        b["p_oracle"] = b["runtime"] / p2_runtime

        # Get the benchmark name:
        b["group"] = escape_benchmark_name(b["benchmark"])

        R_out.append(b)
    R = pd.DataFrame(R_out)

    improved = R[R["p_speedup"] > 1]

    Amask = R["platform"] == "Platform A"
    Bmask = R["platform"] == "Platform B"
    assert(len(R) == len(R[Amask]) + len(R[Bmask]))

    a_matched_or_improved = R[Amask & R["p_speedup"] >= 1]
    b_matched_or_improved = R[Bmask & R["p_speedup"] >= 1]

    a_improved = R[Amask & R["p_speedup"] > 1]
    b_improved = R[Bmask & R["p_speedup"] > 1]

    a_worsened = R[Amask & R["p_speedup"] < 1]
    b_worsened = R[Amask & R["p_speedup"] < 1]

    print()
    print("Experiment 2:")
    print("  Num Results:            ", len(R))
    print("  Num matched or improved:", len(R[R["p_speedup"] >= 1]))
    print("  Num improved:           ", len(R[R["p_speedup"] > 1]))
    print("  Num worse:              ", len(R[R["p_speedup"] < 1]))
    print()
    print("  Matched or improved:     {:.1f} %"
          .format(((len(a_matched_or_improved) + len(b_matched_or_improved))
                   / float(len(R))) * 100))
    print("  Improved:                {:.1f} %"
          .format(((len(a_improved) + len(b_improved)) / float(len(R))) * 100))
    print("  Worsened:                {:.1f} %"
          .format(((len(a_worsened) + len(b_worsened)) / float(len(R))) * 100))
    print()

    ax = sns.barplot(x="group", y="p_speedup", hue="platform", data=R,
                     palette=sns.color_palette("Set1", n_colors=2, desat=.8),
                     ci=None)

    # FIXME: Apply hatch pattern to alternate bars:
    # for i,bar in enumerate(ax.patches):
    #     if not i % 2:
    #         bar.set_hatch("////")

    plt.ylabel("Speedup")
    plt.xlabel("")
    plt.axhline(y=1, color="k", lw=1)

    # Rotate x ticks
    plt.setp(ax.get_xticklabels(), rotation=90)

    # Set plot limit:
    plt.ylim(0,4)

    # No legend title
    ax.get_legend().set_title("")
    plt.legend(loc='upper right')
    ax.get_legend().draw_frame(True)

    figsize = (9, 4.5)
    viz.finalise(fs.path("~/phd/docs/wip-smith/img/ex2.pdf"),
                 figsize=figsize, tight=True)



def main():
    candidates = [
        # "amd-app-sdk-3.0-BinomialOption-binomial_options",
        # "amd-app-sdk-3.0-BitonicSort-bitonicSort",
        # "amd-app-sdk-3.0-BlackScholes-blackScholes",
        # "amd-app-sdk-3.0-FastWalshTransform-fastWalshTransform",
        # "amd-app-sdk-3.0-FloydWarshall-floydWarshallPass",
        # "amd-app-sdk-3.0-MatrixMultiplication-mmmKernel",
        # "amd-app-sdk-3.0-MatrixTranspose-matrixTranspose",
        # "amd-app-sdk-3.0-PrefixSum-group_prefixSum",
        # "amd-app-sdk-3.0-Reduction-reduce",
        # "amd-app-sdk-3.0-ScanLargeArrays-ScanLargeArrays",
        # "amd-app-sdk-3.0-ScanLargeArrays-blockAddition",
        # "amd-app-sdk-3.0-ScanLargeArrays-prefixSum",
        # "amd-app-sdk-3.0-SimpleConvolution-simpleNonSeparableConvolution",
        # "amd-app-sdk-3.0-SimpleConvolution-simpleSeparableConvolutionPass1",
        # "amd-app-sdk-3.0-SimpleConvolution-simpleSeparableConvolutionPass2",
        # "amd-app-sdk-3.0-SobelFilter-sobel_filter",
        # "npb-3.3-BT-add",
        # "npb-3.3-BT-add",
        # "npb-3.3-BT-add",
        # "npb-3.3-BT-add",
        # "npb-3.3-BT-compute_rhs1",
        # "npb-3.3-BT-compute_rhs1",
        # "npb-3.3-BT-compute_rhs1",
        # "npb-3.3-BT-compute_rhs1",
        # "npb-3.3-BT-compute_rhs2",
        # "npb-3.3-BT-compute_rhs2",
        # "npb-3.3-BT-compute_rhs2",
        # "npb-3.3-BT-compute_rhs2",
        # "npb-3.3-BT-compute_rhs3",
        # "npb-3.3-BT-compute_rhs3",
        # "npb-3.3-BT-compute_rhs3",
        # "npb-3.3-BT-compute_rhs3",
        # "npb-3.3-BT-compute_rhs4",
        # "npb-3.3-BT-compute_rhs4",
        # "npb-3.3-BT-compute_rhs4",
        # "npb-3.3-BT-compute_rhs4",
        # "npb-3.3-BT-compute_rhs5",
        # "npb-3.3-BT-compute_rhs5",
        # "npb-3.3-BT-compute_rhs5",
        # "npb-3.3-BT-compute_rhs5",
        # "npb-3.3-BT-compute_rhs6",
        # "npb-3.3-BT-compute_rhs6",
        # "npb-3.3-BT-compute_rhs6",
        # "npb-3.3-BT-compute_rhs6",
        # "npb-3.3-BT-error_norm",
        # "npb-3.3-BT-error_norm",
        # "npb-3.3-BT-error_norm",
        # "npb-3.3-BT-error_norm",
        # "npb-3.3-BT-exact_rhs1",
        # "npb-3.3-BT-exact_rhs1",
        # "npb-3.3-BT-exact_rhs1",
        # "npb-3.3-BT-exact_rhs1",
        # "npb-3.3-BT-exact_rhs2",
        # "npb-3.3-BT-exact_rhs2",
        # "npb-3.3-BT-exact_rhs2",
        # "npb-3.3-BT-exact_rhs2",
        # "npb-3.3-BT-exact_rhs3",
        # "npb-3.3-BT-exact_rhs3",
        # "npb-3.3-BT-exact_rhs3",
        # "npb-3.3-BT-exact_rhs3",
        # "npb-3.3-BT-exact_rhs4",
        # "npb-3.3-BT-exact_rhs4",
        # "npb-3.3-BT-exact_rhs4",
        # "npb-3.3-BT-exact_rhs4",
        # "npb-3.3-BT-exact_rhs5",
        # "npb-3.3-BT-exact_rhs5",
        # "npb-3.3-BT-exact_rhs5",
        # "npb-3.3-BT-exact_rhs5",
        # "npb-3.3-BT-initialize1",
        # "npb-3.3-BT-initialize1",
        # "npb-3.3-BT-initialize1",
        # "npb-3.3-BT-initialize1",
        # "npb-3.3-BT-initialize2",
        # "npb-3.3-BT-initialize2",
        # "npb-3.3-BT-initialize2",
        # "npb-3.3-BT-initialize2",
        # "npb-3.3-BT-initialize3",
        # "npb-3.3-BT-initialize3",
        # "npb-3.3-BT-initialize3",
        # "npb-3.3-BT-initialize3",
        # "npb-3.3-BT-initialize4",
        # "npb-3.3-BT-initialize4",
        # "npb-3.3-BT-initialize4",
        # "npb-3.3-BT-initialize4",
        # "npb-3.3-BT-initialize5",
        # "npb-3.3-BT-initialize5",
        # "npb-3.3-BT-initialize5",
        # "npb-3.3-BT-initialize5",
        # "npb-3.3-BT-rhs_norm",
        # "npb-3.3-BT-rhs_norm",
        # "npb-3.3-BT-rhs_norm",
        # "npb-3.3-BT-rhs_norm",
        # "npb-3.3-BT-x_solve",
        # "npb-3.3-BT-x_solve",
        # "npb-3.3-BT-x_solve",
        # "npb-3.3-BT-x_solve",
        # "npb-3.3-BT-x_solve1",
        # "npb-3.3-BT-x_solve1",
        # "npb-3.3-BT-x_solve1",
        # "npb-3.3-BT-x_solve1",
        # "npb-3.3-BT-x_solve2",
        # "npb-3.3-BT-x_solve2",
        # "npb-3.3-BT-x_solve2",
        # "npb-3.3-BT-x_solve2",
        # "npb-3.3-BT-x_solve3",
        # "npb-3.3-BT-x_solve3",
        # "npb-3.3-BT-x_solve3",
        # "npb-3.3-BT-x_solve3",
        # "npb-3.3-BT-y_solve",
        # "npb-3.3-BT-y_solve",
        # "npb-3.3-BT-y_solve",
        # "npb-3.3-BT-y_solve",
        # "npb-3.3-BT-y_solve1",
        # "npb-3.3-BT-y_solve1",
        # "npb-3.3-BT-y_solve1",
        # "npb-3.3-BT-y_solve1",
        # "npb-3.3-BT-y_solve2",
        # "npb-3.3-BT-y_solve2",
        # "npb-3.3-BT-y_solve2",
        # "npb-3.3-BT-y_solve2",
        # "npb-3.3-BT-y_solve3",
        # "npb-3.3-BT-y_solve3",
        # "npb-3.3-BT-y_solve3",
        # "npb-3.3-BT-y_solve3",
        # "npb-3.3-BT-z_solve",
        # "npb-3.3-BT-z_solve",
        # "npb-3.3-BT-z_solve",
        # "npb-3.3-BT-z_solve",
        # "npb-3.3-BT-z_solve1",
        # "npb-3.3-BT-z_solve1",
        # "npb-3.3-BT-z_solve1",
        # "npb-3.3-BT-z_solve1",
        # "npb-3.3-BT-z_solve2",
        # "npb-3.3-BT-z_solve2",
        # "npb-3.3-BT-z_solve2",
        # "npb-3.3-BT-z_solve2",
        # "npb-3.3-BT-z_solve3",
        # "npb-3.3-BT-z_solve3",
        # "npb-3.3-BT-z_solve3",
        # "npb-3.3-BT-z_solve3",
        # "npb-3.3-CG-conj_grad_0",
        # "npb-3.3-CG-conj_grad_0",
        # "npb-3.3-CG-conj_grad_0",
        # "npb-3.3-CG-conj_grad_0",
        # "npb-3.3-CG-conj_grad_0",
        # "npb-3.3-CG-init_mem_0",
        # "npb-3.3-CG-init_mem_0",
        # "npb-3.3-CG-init_mem_0",
        # "npb-3.3-CG-init_mem_0",
        # "npb-3.3-CG-init_mem_0",
        # "npb-3.3-CG-init_mem_1",
        # "npb-3.3-CG-init_mem_1",
        # "npb-3.3-CG-init_mem_1",
        # "npb-3.3-CG-init_mem_1",
        # "npb-3.3-CG-init_mem_1",
        # "npb-3.3-CG-main_0",
        # "npb-3.3-CG-main_0",
        # "npb-3.3-CG-main_0",
        # "npb-3.3-CG-main_0",
        # "npb-3.3-CG-main_0",
        # "npb-3.3-CG-main_1",
        # "npb-3.3-CG-main_1",
        # "npb-3.3-CG-main_1",
        # "npb-3.3-CG-main_1",
        # "npb-3.3-CG-main_1",
        # "npb-3.3-CG-main_2",
        # "npb-3.3-CG-main_2",
        # "npb-3.3-CG-main_2",
        # "npb-3.3-CG-main_2",
        # "npb-3.3-CG-main_2",
        # "npb-3.3-CG-makea_0",
        # "npb-3.3-CG-makea_0",
        # "npb-3.3-CG-makea_0",
        # "npb-3.3-CG-makea_0",
        # "npb-3.3-CG-makea_0",
        # "npb-3.3-CG-makea_1",
        # "npb-3.3-CG-makea_1",
        # "npb-3.3-CG-makea_1",
        # "npb-3.3-CG-makea_1",
        # "npb-3.3-CG-makea_1",
        # "npb-3.3-CG-makea_2",
        # "npb-3.3-CG-makea_2",
        # "npb-3.3-CG-makea_2",
        # "npb-3.3-CG-makea_2",
        # "npb-3.3-CG-makea_2",
        # "npb-3.3-CG-makea_3",
        # "npb-3.3-CG-makea_3",
        # "npb-3.3-CG-makea_3",
        # "npb-3.3-CG-makea_3",
        # "npb-3.3-CG-makea_3",
        # "npb-3.3-CG-makea_4",
        # "npb-3.3-CG-makea_4",
        # "npb-3.3-CG-makea_4",
        # "npb-3.3-CG-makea_4",
        # "npb-3.3-CG-makea_4",
        # "npb-3.3-CG-makea_5",
        # "npb-3.3-CG-makea_5",
        # "npb-3.3-CG-makea_5",
        # "npb-3.3-CG-makea_5",
        # "npb-3.3-CG-makea_5",
        # "npb-3.3-CG-makea_6",
        # "npb-3.3-CG-makea_6",
        # "npb-3.3-CG-makea_6",
        # "npb-3.3-CG-makea_6",
        # "npb-3.3-CG-makea_6",
        # "npb-3.3-CG-makea_7",
        # "npb-3.3-CG-makea_7",
        # "npb-3.3-CG-makea_7",
        # "npb-3.3-CG-makea_7",
        # "npb-3.3-CG-makea_7",
        # "npb-3.3-EP-embar",
        # "npb-3.3-EP-embar",
        # "npb-3.3-EP-embar",
        # "npb-3.3-EP-embar",
        # "npb-3.3-FT-cffts1",
        # "npb-3.3-FT-cffts1",
        # "npb-3.3-FT-cffts1",
        # "npb-3.3-FT-cffts1",
        # "npb-3.3-FT-cffts2",
        # "npb-3.3-FT-cffts2",
        # "npb-3.3-FT-cffts2",
        # "npb-3.3-FT-cffts2",
        # "npb-3.3-FT-cffts3",
        # "npb-3.3-FT-cffts3",
        # "npb-3.3-FT-cffts3",
        # "npb-3.3-FT-cffts3",
        # "npb-3.3-FT-checksum",
        # "npb-3.3-FT-checksum",
        # "npb-3.3-FT-checksum",
        # "npb-3.3-FT-checksum",
        # "npb-3.3-FT-compute_indexmap",
        # "npb-3.3-FT-compute_indexmap",
        # "npb-3.3-FT-compute_indexmap",
        # "npb-3.3-FT-compute_indexmap",
        # "npb-3.3-FT-compute_initial_conditions",
        # "npb-3.3-FT-compute_initial_conditions",
        # "npb-3.3-FT-compute_initial_conditions",
        # "npb-3.3-FT-compute_initial_conditions",
        # "npb-3.3-FT-evolve",
        # "npb-3.3-FT-evolve",
        # "npb-3.3-FT-evolve",
        # "npb-3.3-FT-evolve",
        # "npb-3.3-FT-init_ui",
        # "npb-3.3-FT-init_ui",
        # "npb-3.3-FT-init_ui",
        # "npb-3.3-FT-init_ui",
        # "npb-3.3-LU-blts",
        # "npb-3.3-LU-blts",
        # "npb-3.3-LU-blts",
        # "npb-3.3-LU-blts",
        # "npb-3.3-LU-blts",
        # "npb-3.3-LU-buts",
        # "npb-3.3-LU-buts",
        # "npb-3.3-LU-buts",
        # "npb-3.3-LU-buts",
        # "npb-3.3-LU-buts",
        # "npb-3.3-LU-erhs1",
        # "npb-3.3-LU-erhs1",
        # "npb-3.3-LU-erhs1",
        # "npb-3.3-LU-erhs1",
        # "npb-3.3-LU-erhs1",
        # "npb-3.3-LU-erhs2",
        # "npb-3.3-LU-erhs2",
        # "npb-3.3-LU-erhs2",
        # "npb-3.3-LU-erhs2",
        # "npb-3.3-LU-erhs2",
        # "npb-3.3-LU-erhs3",
        # "npb-3.3-LU-erhs3",
        # "npb-3.3-LU-erhs3",
        # "npb-3.3-LU-erhs3",
        # "npb-3.3-LU-erhs3",
        # "npb-3.3-LU-erhs4",
        # "npb-3.3-LU-erhs4",
        # "npb-3.3-LU-erhs4",
        # "npb-3.3-LU-erhs4",
        # "npb-3.3-LU-erhs4",
        # "npb-3.3-LU-error",
        # "npb-3.3-LU-error",
        # "npb-3.3-LU-error",
        # "npb-3.3-LU-error",
        # "npb-3.3-LU-error",
        # "npb-3.3-LU-l2norm",
        # "npb-3.3-LU-l2norm",
        # "npb-3.3-LU-l2norm",
        # "npb-3.3-LU-l2norm",
        # "npb-3.3-LU-l2norm",
        # "npb-3.3-LU-pintgr1",
        # "npb-3.3-LU-pintgr1",
        # "npb-3.3-LU-pintgr1",
        # "npb-3.3-LU-pintgr1",
        # "npb-3.3-LU-pintgr1",
        # "npb-3.3-LU-pintgr2",
        # "npb-3.3-LU-pintgr2",
        # "npb-3.3-LU-pintgr2",
        # "npb-3.3-LU-pintgr2",
        # "npb-3.3-LU-pintgr2",
        # "npb-3.3-LU-pintgr3",
        # "npb-3.3-LU-pintgr3",
        # "npb-3.3-LU-pintgr3",
        # "npb-3.3-LU-pintgr3",
        # "npb-3.3-LU-pintgr3",
        # "npb-3.3-LU-pintgr_reduce",
        # "npb-3.3-LU-pintgr_reduce",
        # "npb-3.3-LU-pintgr_reduce",
        # "npb-3.3-LU-pintgr_reduce",
        # "npb-3.3-LU-pintgr_reduce",
        # "npb-3.3-LU-rhs",
        # "npb-3.3-LU-rhs",
        # "npb-3.3-LU-rhs",
        # "npb-3.3-LU-rhs",
        # "npb-3.3-LU-rhs",
        # "npb-3.3-LU-rhsx",
        # "npb-3.3-LU-rhsx",
        # "npb-3.3-LU-rhsx",
        # "npb-3.3-LU-rhsx",
        # "npb-3.3-LU-rhsx",
        # "npb-3.3-LU-rhsy",
        # "npb-3.3-LU-rhsy",
        # "npb-3.3-LU-rhsy",
        # "npb-3.3-LU-rhsy",
        # "npb-3.3-LU-rhsy",
        # "npb-3.3-LU-rhsz",
        # "npb-3.3-LU-rhsz",
        # "npb-3.3-LU-rhsz",
        # "npb-3.3-LU-rhsz",
        # "npb-3.3-LU-rhsz",
        # "npb-3.3-LU-setbv1",
        # "npb-3.3-LU-setbv1",
        # "npb-3.3-LU-setbv1",
        # "npb-3.3-LU-setbv1",
        # "npb-3.3-LU-setbv1",
        # "npb-3.3-LU-setbv2",
        # "npb-3.3-LU-setbv2",
        # "npb-3.3-LU-setbv2",
        # "npb-3.3-LU-setbv2",
        # "npb-3.3-LU-setbv2",
        # "npb-3.3-LU-setbv3",
        # "npb-3.3-LU-setbv3",
        # "npb-3.3-LU-setbv3",
        # "npb-3.3-LU-setbv3",
        # "npb-3.3-LU-setbv3",
        # "npb-3.3-LU-setiv",
        # "npb-3.3-LU-setiv",
        # "npb-3.3-LU-setiv",
        # "npb-3.3-LU-setiv",
        # "npb-3.3-LU-setiv",
        # "npb-3.3-LU-ssor2",
        # "npb-3.3-LU-ssor2",
        # "npb-3.3-LU-ssor2",
        # "npb-3.3-LU-ssor2",
        # "npb-3.3-LU-ssor2",
        # "npb-3.3-LU-ssor3",
        # "npb-3.3-LU-ssor3",
        # "npb-3.3-LU-ssor3",
        # "npb-3.3-LU-ssor3",
        # "npb-3.3-LU-ssor3",
        # "npb-3.3-MG-kernel_comm3_1",
        # "npb-3.3-MG-kernel_comm3_1",
        # "npb-3.3-MG-kernel_comm3_1",
        # "npb-3.3-MG-kernel_comm3_1",
        # "npb-3.3-MG-kernel_comm3_1",
        # "npb-3.3-MG-kernel_comm3_2",
        # "npb-3.3-MG-kernel_comm3_2",
        # "npb-3.3-MG-kernel_comm3_2",
        # "npb-3.3-MG-kernel_comm3_2",
        # "npb-3.3-MG-kernel_comm3_2",
        # "npb-3.3-MG-kernel_comm3_3",
        # "npb-3.3-MG-kernel_comm3_3",
        # "npb-3.3-MG-kernel_comm3_3",
        # "npb-3.3-MG-kernel_comm3_3",
        # "npb-3.3-MG-kernel_comm3_3",
        # "npb-3.3-MG-kernel_interp_1",
        # "npb-3.3-MG-kernel_interp_1",
        # "npb-3.3-MG-kernel_interp_1",
        # "npb-3.3-MG-kernel_interp_1",
        # "npb-3.3-MG-kernel_norm2u3",
        # "npb-3.3-MG-kernel_norm2u3",
        # "npb-3.3-MG-kernel_norm2u3",
        # "npb-3.3-MG-kernel_norm2u3",
        # "npb-3.3-MG-kernel_norm2u3",
        # "npb-3.3-MG-kernel_psinv",
        # "npb-3.3-MG-kernel_psinv",
        # "npb-3.3-MG-kernel_psinv",
        # "npb-3.3-MG-kernel_psinv",
        # "npb-3.3-MG-kernel_resid",
        # "npb-3.3-MG-kernel_resid",
        # "npb-3.3-MG-kernel_resid",
        # "npb-3.3-MG-kernel_resid",
        # "npb-3.3-MG-kernel_resid",
        # "npb-3.3-MG-kernel_rprj3",
        # "npb-3.3-MG-kernel_rprj3",
        # "npb-3.3-MG-kernel_rprj3",
        # "npb-3.3-MG-kernel_rprj3",
        # "npb-3.3-MG-kernel_zero3",
        # "npb-3.3-MG-kernel_zero3",
        # "npb-3.3-MG-kernel_zero3",
        # "npb-3.3-MG-kernel_zero3",
        # "npb-3.3-MG-kernel_zero3",
        # "npb-3.3-MG-kernel_zran3_1",
        # "npb-3.3-MG-kernel_zran3_1",
        # "npb-3.3-MG-kernel_zran3_1",
        # "npb-3.3-MG-kernel_zran3_1",
        # "npb-3.3-MG-kernel_zran3_1",
        # "npb-3.3-MG-kernel_zran3_2",
        # "npb-3.3-MG-kernel_zran3_2",
        # "npb-3.3-MG-kernel_zran3_2",
        # "npb-3.3-MG-kernel_zran3_2",
        # "npb-3.3-MG-kernel_zran3_2",
        # "npb-3.3-MG-kernel_zran3_3",
        # "npb-3.3-MG-kernel_zran3_3",
        # "npb-3.3-MG-kernel_zran3_3",
        # "npb-3.3-MG-kernel_zran3_3",
        # "npb-3.3-MG-kernel_zran3_3",
        # "npb-3.3-SP-add",
        # "npb-3.3-SP-add",
        # "npb-3.3-SP-add",
        # "npb-3.3-SP-add",
        # "npb-3.3-SP-add",
        # "npb-3.3-SP-compute_rhs1",
        # "npb-3.3-SP-compute_rhs1",
        # "npb-3.3-SP-compute_rhs1",
        # "npb-3.3-SP-compute_rhs1",
        # "npb-3.3-SP-compute_rhs1",
        # "npb-3.3-SP-compute_rhs2",
        # "npb-3.3-SP-compute_rhs2",
        # "npb-3.3-SP-compute_rhs2",
        # "npb-3.3-SP-compute_rhs2",
        # "npb-3.3-SP-compute_rhs2",
        # "npb-3.3-SP-compute_rhs3",
        # "npb-3.3-SP-compute_rhs3",
        # "npb-3.3-SP-compute_rhs3",
        # "npb-3.3-SP-compute_rhs3",
        # "npb-3.3-SP-compute_rhs3",
        # "npb-3.3-SP-compute_rhs4",
        # "npb-3.3-SP-compute_rhs4",
        # "npb-3.3-SP-compute_rhs4",
        # "npb-3.3-SP-compute_rhs4",
        # "npb-3.3-SP-compute_rhs4",
        # "npb-3.3-SP-compute_rhs5",
        # "npb-3.3-SP-compute_rhs5",
        # "npb-3.3-SP-compute_rhs5",
        # "npb-3.3-SP-compute_rhs5",
        # "npb-3.3-SP-compute_rhs5",
        # "npb-3.3-SP-compute_rhs6",
        # "npb-3.3-SP-compute_rhs6",
        # "npb-3.3-SP-compute_rhs6",
        # "npb-3.3-SP-compute_rhs6",
        # "npb-3.3-SP-compute_rhs6",
        # "npb-3.3-SP-error_norm",
        # "npb-3.3-SP-error_norm",
        # "npb-3.3-SP-error_norm",
        # "npb-3.3-SP-error_norm",
        # "npb-3.3-SP-error_norm",
        # "npb-3.3-SP-exact_rhs1",
        # "npb-3.3-SP-exact_rhs1",
        # "npb-3.3-SP-exact_rhs1",
        # "npb-3.3-SP-exact_rhs1",
        # "npb-3.3-SP-exact_rhs1",
        # "npb-3.3-SP-exact_rhs2",
        # "npb-3.3-SP-exact_rhs2",
        # "npb-3.3-SP-exact_rhs2",
        # "npb-3.3-SP-exact_rhs2",
        # "npb-3.3-SP-exact_rhs2",
        # "npb-3.3-SP-exact_rhs3",
        # "npb-3.3-SP-exact_rhs3",
        # "npb-3.3-SP-exact_rhs3",
        # "npb-3.3-SP-exact_rhs3",
        # "npb-3.3-SP-exact_rhs3",
        # "npb-3.3-SP-exact_rhs4",
        # "npb-3.3-SP-exact_rhs4",
        # "npb-3.3-SP-exact_rhs4",
        # "npb-3.3-SP-exact_rhs4",
        # "npb-3.3-SP-exact_rhs4",
        # "npb-3.3-SP-exact_rhs5",
        # "npb-3.3-SP-exact_rhs5",
        # "npb-3.3-SP-exact_rhs5",
        # "npb-3.3-SP-exact_rhs5",
        # "npb-3.3-SP-exact_rhs5",
        # "npb-3.3-SP-initialize1",
        # "npb-3.3-SP-initialize1",
        # "npb-3.3-SP-initialize1",
        # "npb-3.3-SP-initialize1",
        # "npb-3.3-SP-initialize1",
        # "npb-3.3-SP-initialize2",
        # "npb-3.3-SP-initialize2",
        # "npb-3.3-SP-initialize2",
        # "npb-3.3-SP-initialize2",
        # "npb-3.3-SP-initialize2",
        # "npb-3.3-SP-initialize3",
        # "npb-3.3-SP-initialize3",
        # "npb-3.3-SP-initialize3",
        # "npb-3.3-SP-initialize3",
        # "npb-3.3-SP-initialize3",
        # "npb-3.3-SP-initialize4",
        # "npb-3.3-SP-initialize4",
        # "npb-3.3-SP-initialize4",
        # "npb-3.3-SP-initialize4",
        # "npb-3.3-SP-initialize4",
        # "npb-3.3-SP-initialize5",
        # "npb-3.3-SP-initialize5",
        # "npb-3.3-SP-initialize5",
        # "npb-3.3-SP-initialize5",
        # "npb-3.3-SP-initialize5",
        # "npb-3.3-SP-ninvr",
        # "npb-3.3-SP-ninvr",
        # "npb-3.3-SP-ninvr",
        # "npb-3.3-SP-ninvr",
        # "npb-3.3-SP-ninvr",
        # "npb-3.3-SP-pinvr",
        # "npb-3.3-SP-pinvr",
        # "npb-3.3-SP-pinvr",
        # "npb-3.3-SP-pinvr",
        # "npb-3.3-SP-pinvr",
        # "npb-3.3-SP-rhs_norm",
        # "npb-3.3-SP-rhs_norm",
        # "npb-3.3-SP-rhs_norm",
        # "npb-3.3-SP-rhs_norm",
        # "npb-3.3-SP-rhs_norm",
        # "npb-3.3-SP-txinvr",
        # "npb-3.3-SP-txinvr",
        # "npb-3.3-SP-txinvr",
        # "npb-3.3-SP-txinvr",
        # "npb-3.3-SP-txinvr",
        # "npb-3.3-SP-tzetar",
        # "npb-3.3-SP-tzetar",
        # "npb-3.3-SP-tzetar",
        # "npb-3.3-SP-tzetar",
        # "npb-3.3-SP-tzetar",
        # "npb-3.3-SP-x_solve",
        # "npb-3.3-SP-x_solve",
        # "npb-3.3-SP-x_solve",
        # "npb-3.3-SP-x_solve",
        # "npb-3.3-SP-x_solve",
        # "npb-3.3-SP-y_solve",
        # "npb-3.3-SP-y_solve",
        # "npb-3.3-SP-y_solve",
        # "npb-3.3-SP-y_solve",
        # "npb-3.3-SP-y_solve",
        # "npb-3.3-SP-z_solve",
        # "npb-3.3-SP-z_solve",
        # "npb-3.3-SP-z_solve",
        # "npb-3.3-SP-z_solve",
        # "npb-3.3-SP-z_solve",
        # "nvidia-4.2-DotProduct-DotProduct",
        # "nvidia-4.2-FDTD3d-FiniteDifferences",
        # "nvidia-4.2-MatVecMul-MatVecMulCoalesced0",
        # "nvidia-4.2-MatVecMul-MatVecMulCoalesced1",
        # "nvidia-4.2-MatVecMul-MatVecMulCoalesced2",
        # "nvidia-4.2-MatVecMul-MatVecMulCoalesced3",
        # "nvidia-4.2-MatVecMul-MatVecMulUncoalesced0",
        # "nvidia-4.2-MatVecMul-MatVecMulUncoalesced1",
        # "nvidia-4.2-MatrixMul-matrixMul",
        # "nvidia-4.2-MersenneTwister-BoxMuller",
        # "nvidia-4.2-MersenneTwister-MersenneTwister",
        # "nvidia-4.2-VectorAdd-VectorAdd",
        # "polybench-gpu-1.0-2DConvolution-Convolution2D_kernel",
        # "polybench-gpu-1.0-2mm-mm2_kernel1",
        # "polybench-gpu-1.0-2mm-mm2_kernel2",
        # "polybench-gpu-1.0-3DConvolution-Convolution3D_kernel",
        # "polybench-gpu-1.0-3mm-mm3_kernel1",
        # "polybench-gpu-1.0-3mm-mm3_kernel2",
        # "polybench-gpu-1.0-3mm-mm3_kernel3",
        # "polybench-gpu-1.0-atax-atax_kernel1",
        # "polybench-gpu-1.0-atax-atax_kernel2",
        # "polybench-gpu-1.0-bicg-bicgKernel1",
        # "polybench-gpu-1.0-bicg-bicgKernel2",
        # "polybench-gpu-1.0-correlation-corr_kernel",
        # "polybench-gpu-1.0-correlation-mean_kernel",
        # "polybench-gpu-1.0-correlation-reduce_kernel",
        # "polybench-gpu-1.0-correlation-std_kernel",
        # "polybench-gpu-1.0-covariance-covar_kernel",
        # "polybench-gpu-1.0-covariance-mean_kernel",
        # "polybench-gpu-1.0-covariance-reduce_kernel",
        # "polybench-gpu-1.0-gemm-gemm",
        # "polybench-gpu-1.0-gesummv-gesummv_kernel",
        # "polybench-gpu-1.0-gramschmidt-gramschmidt_kernel1",
        # "polybench-gpu-1.0-gramschmidt-gramschmidt_kernel2",
        # "polybench-gpu-1.0-gramschmidt-gramschmidt_kernel3",
        # "polybench-gpu-1.0-mvt-mvt_kernel1",
        # "polybench-gpu-1.0-mvt-mvt_kernel2",
        # "polybench-gpu-1.0-syr2k-syr2k_kernel",
        # "polybench-gpu-1.0-syrk-syrk_kernel",
        # "rodinia-3.1-backprop-bpnn_adjust_weights_ocl",
        # "rodinia-3.1-backprop-bpnn_layerforward_ocl",
        # "rodinia-3.1-bfs-BFS_1",
        # "rodinia-3.1-bfs-BFS_2",
        # "rodinia-3.1-cfd-compute_flux",
        # "rodinia-3.1-cfd-compute_step_factor",
        # "rodinia-3.1-cfd-initialize_variables",
        # "rodinia-3.1-cfd-memset_kernel",
        # "rodinia-3.1-cfd-time_step",
        # "rodinia-3.1-gaussian-Fan1",
        # "rodinia-3.1-gaussian-Fan2",
        # "rodinia-3.1-hotspot-hotspot",
        # "rodinia-3.1-kmeans-kmeans_kernel_c",
        # "rodinia-3.1-kmeans-kmeans_swap",
        # "rodinia-3.1-lavaMD-kernel_gpu_opencl",
        # "rodinia-3.1-leukocyte-GICOV_kernel",
        # "rodinia-3.1-leukocyte-IMGVF_kernel",
        # "rodinia-3.1-leukocyte-dilate_kernel",
        # "rodinia-3.1-lud-lud_diagonal",
        # "rodinia-3.1-lud-lud_internal",
        # "rodinia-3.1-lud-lud_perimeter",
        # "rodinia-3.1-nn-NearestNeighbor",
        # "rodinia-3.1-nw-nw_kernel1",
        # "rodinia-3.1-nw-nw_kernel2",
        # "rodinia-3.1-particlefilter-find_index_kernel",
        # "rodinia-3.1-particlefilter-likelihood_kernel",
        # "rodinia-3.1-particlefilter-normalize_weights_kernel",
        # "rodinia-3.1-particlefilter-sum_kernel",
        # "rodinia-3.1-pathfinder-dynproc_kernel",
        # "rodinia-3.1-streamcluster-memset_kernel",
        # "rodinia-3.1-streamcluster-pgain_kernel",
        "shoc-1.1.5-BFS-BFS_kernel_warp",
        "shoc-1.1.5-FFT-chk1D_512",
        "shoc-1.1.5-FFT-fft1D_512",
        "shoc-1.1.5-FFT-ifft1D_512",
        "shoc-1.1.5-GEMM-sgemmNN",
        "shoc-1.1.5-GEMM-sgemmNT",
        "shoc-1.1.5-MD-compute_lj_force",
        "shoc-1.1.5-MD5Hash-FindKeyWithDigest_Kernel",
        "shoc-1.1.5-Reduction-reduce",
        "shoc-1.1.5-S3D-gr_base",
        "shoc-1.1.5-S3D-qssa2_kernel",
        "shoc-1.1.5-S3D-qssa_kernel",
        "shoc-1.1.5-S3D-qssab_kernel",
        "shoc-1.1.5-S3D-ratt10_kernel",
        "shoc-1.1.5-S3D-ratt2_kernel",
        "shoc-1.1.5-S3D-ratt3_kernel",
        "shoc-1.1.5-S3D-ratt4_kernel",
        "shoc-1.1.5-S3D-ratt5_kernel",
        "shoc-1.1.5-S3D-ratt6_kernel",
        "shoc-1.1.5-S3D-ratt7_kernel",
        "shoc-1.1.5-S3D-ratt8_kernel",
        "shoc-1.1.5-S3D-ratt9_kernel",
        "shoc-1.1.5-S3D-ratt_kernel",
        "shoc-1.1.5-S3D-ratx2_kernel",
        "shoc-1.1.5-S3D-ratx4_kernel",
        "shoc-1.1.5-S3D-ratx_kernel",
        "shoc-1.1.5-S3D-ratxb_kernel",
        "shoc-1.1.5-S3D-rdsmh_kernel",
        "shoc-1.1.5-S3D-rdwdot10_kernel",
        "shoc-1.1.5-S3D-rdwdot2_kernel",
        "shoc-1.1.5-S3D-rdwdot3_kernel",
        "shoc-1.1.5-S3D-rdwdot6_kernel",
        "shoc-1.1.5-S3D-rdwdot7_kernel",
        "shoc-1.1.5-S3D-rdwdot8_kernel",
        "shoc-1.1.5-S3D-rdwdot9_kernel",
        "shoc-1.1.5-S3D-rdwdot_kernel",
        "shoc-1.1.5-Scan-bottom_scan",
        "shoc-1.1.5-Scan-reduce",
        "shoc-1.1.5-Scan-top_scan",
        "shoc-1.1.5-Sort-bottom_scan",
        "shoc-1.1.5-Sort-reduce",
    ]

    # best = 100000000
    # best_combination = None
    # for n in range(1, 10):
    #     print()
    #     print("Trying all combinations of", n, "additions")
    #     for combination in combinations(candidates, n):
    #         c = check_for_subset(combination)
    #         if c < best:
    #             best = c
    #             best_combination = combination
    #             print()
    #             print("Current best:", best, best_combination)
    #             with open("best-{}-{}.txt".format(best, n), "w") as outfile:
    #                 print("\n".join(best_combination), file=outfile)
    # print("Best results:", best, best_combination)

    motivation()
    experiment1()
    experiment2()


if __name__ == "__main__":
    main()
