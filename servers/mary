#!/bin/bash
#
# server.sh
#
# Copyright (C) 2013, 2014 Chris Cummins
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#  Chris Cummins <chrisc.101@gmail.com

set -u
set -e

# Networking details
HOST=$MARY
SSH_PORT=$MARY_SSH_PORT

MAC=$MARY_MAC

# A space delimited list of usernames with ssh access
USERS=$MARY_USERS

# Git configuration
GIT_USER=$MARY_GIT_USER
GIT_DIR=$MARY_GIT_DIR
GIT_URL=$MARY_GIT_URL
GIT_REMOTE_NAME=$MARY_GIT_REMOTE_NAME

default_user=$(echo $USERS | cut -f1 -d ' ')

set +u
set -e

# Enable debugging if set
test -n "$DEBUG" && set -x

usage() {
	echo "Usage:"
	echo "        $(basename $0) backup            - backup server to wilson"
	echo "        $(basename $0) df                - report disc usage"
	echo "        $(basename $0) git <push|clone|ls|rm> [args]"
	echo "                  ls           - list all repositories"
	echo "                  init <name>  - initialise an empty repo"
	echo "                  push <repo>  - push the current repository to <repo>"
	echo "                  rm   <repo>  - permanently delete <repo>"
	echo "                  clone <repo> - clone <repo>"
	echo "        $(basename $0) info              - display diagnostic information"
	echo "        $(basename $0) off               - power down"
	echo "        $(basename $0) on                - power up"
	echo "        $(basename $0) ping              - ping server"
	echo "        $(basename $0) reboot            - reboot system"
	echo "        $(basename $0) ssh [user] [args] - open ssh connection"
	echo "        $(basename $0) update            - system update"
	echo "        $(basename $0) uptime            - system uptime"
	echo "        $(basename $0) mount             - mount network shares"
	echo "        $(basename $0) umount            - unmount network shares"
}

do_df() {
	do_ssh $default_user "df $@"
}

do_ssh() {
	local user=$default_user

	# Select our user, first from the command line, else use default.
	if [ -n "$1" ]; then
		user="$1"
		shift
	fi

	ssh -p$SSH_PORT $user@$HOST $@
}

fail_if_repository_exists() {
	local repo="$1"

	set +e
	do_git_ls | grep '^'"$repo"'$' &> /dev/null
	if [ $? -eq 0 ]; then
		echo "A repository named '$repo' already exists!" > /dev/stderr
		exit 1
	fi
	set -e
}

fail_if_repository_not_exist() {
	local repo="$1"

	set +e
	do_git_ls | grep '^'"$repo"'$' &> /dev/null
	if [ $? -ne 0 ]; then
		echo "No repository named '$repo' found!" > /dev/stderr
		exit 1
	fi
	set -e
}

do_git_ls() {
	do_ssh $GIT_USER "ls $GIT_DIR" | grep '.git$' | sed 's/.git$//'
}

do_git_clone() {
	if [ -z "$1" ]; then
		echo "No repository name specified!" > /dev/stderr
		exit 1
	fi

	local repo="$1"
	local repo_url="$GIT_DIR/$repo"

	fail_if_repository_not_exist "$repo"

	git clone $GIT_URL$repo_url
}

do_git_init() {
	if [ -z "$1" ]; then
		echo "No repository name specified!" > /dev/stderr
		exit 1
	fi

	local repo="$1"
	local repo_path="$GIT_DIR/$repo.git"

	fail_if_repository_exists "$repo"

	do_ssh $GIT_USER "mkdir $repo_path && GIT_DIR=$repo_path git init --bare"
}

do_git_rm() {
	if [ -z "$1" ]; then
		echo "No repository name specified!" > /dev/stderr
		exit 1
	fi

	local repo="$1"
	local repo_path="$GIT_DIR/$repo.git"

	fail_if_repository_not_exist "$repo"

	do_ssh $GIT_USER "rm -rf $repo_path"
	echo "Deleted Git repository at '$repo_path'"
}

do_git_add() {
	local dir=$(pwd)
	local repo=${dir##*/}
	local repo_path="$GIT_DIR/$repo.git"

	if [[ ! -d .git ]]; then
		echo "fatal: not a git repository!" > /dev/stderr
		exit 1
	fi

	git remote add $GIT_REMOTE_NAME $GIT_URL$repo_path

	set +e
	do_git_ls | grep '^'"$repo"'$' &> /dev/null
	if [ $? -ne 0 ]; then
		echo "warning: a repository named '$repo' found!" > /dev/stderr
		exit 1
	fi
	set -e
}

do_git_push() {
	local dir=$(pwd)
	local repo=${dir##*/}

	do_git_init "$repo"
	do_git_add
	git push --all $GIT_REMOTE_NAME
}

do_backup() {
	do_ssh $default_user "emu push -S /mnt/primary $@"
}

do_update() {
	do_ssh $default_user "sudo apt-get update && sudo apt-get upgrade"
}

do_startup() {
	wakeonlan $MAC
}

do_shutdown() {
	do_ssh $default_user "sudo shutdown -h now"
	echo "Shutting down..."
}

do_reboot() {
	do_ssh $default_user "sudo reboot"
	echo "Rebooting..."
}

do_ping() {
	ping $HOST
}

do_git() {
	# If there's no argument, default to ls
	if [ -z "$1" ]; then
		do_git_ls
	fi

	case "$1" in
	"ls")
		do_git_ls
		;;
	"add")
		shift
		do_git_add $@
		;;
	"clone")
		shift
		do_git_clone $@
		;;
	"init")
		shift
		do_git_init $@
		;;
	"rm")
		shift
		do_git_rm $@
		;;
	"push")
		shift
		do_git_push $@
		;;
	*)
		echo "fatal: unrecognised git command!" > /dev/stderr
		exit 1
		;;
	esac
}

do_inxi() {
	local inxi_args="-F -u -xxx"

	# Use supplied args, if any
	if [ -n "$1" ]; then
		inxi_args=$@
	fi

	do_ssh $default_user "inxi $inxi_args $@"
}

do_uptime() {
	do_ssh $default_user "uptime"
}

do_mount() {
	df | grep mary &>/dev/null && { echo "mary already mounted!"; exit 1; }
	sudo mkdir -p /mnt/mary/backup
	sudo mkdir -p /mnt/mary/media
	sudo mkdir -p /mnt/mary/data
	user=$USER
	sudo chown -R $USER:$USER /mnt/mary
	sudo mount -t cifs //mary/backup /mnt/mary/backup -o username=maria,passowrd='F7]u*$&fg:iS'
	sudo mount -t cifs //mary/data   /mnt/mary/data -o username=maria,passowrd='F7]u*$&fg:iS'
	sudo mount -t cifs //mary/media  /mnt/mary/media -o username=maria,passowrd='F7]u*$&fg:iS'
}

do_umount() {
	test -d /mnt/mary || { echo "/mnt/mary does not exist!"; exit 1; }
	sudo umount /mnt/mary/backup
	sudo rmdir  /mnt/mary/backup
	sudo umount /mnt/mary/data
	sudo rmdir  /mnt/mary/data
	sudo umount /mnt/mary/media
	sudo rmdir  /mnt/mary/media
	sudo rmdir  /mnt/mary
}

main() {
	# If there's no argument, default to ssh
	if [ -z "$1" ]; then
		do_ssh
	fi

	# Parse the command
	case "$1" in
	"backup")
		shift
		do_backup $@
		;;
	"df")
		shift
		do_df $@
		;;
	"git")
		shift
		do_git $@
		;;
	"help"|"-h"|"--help")
		usage
		exit 0
		;;
	"info")
		shift
		do_inxi $@
		;;
	"off")
		shift
		do_shutdown $@
		;;
	"on")
		shift
		do_startup $@
		;;
	"ping")
		shift
		do_ping $@
		;;
	"reboot")
		shift
		do_reboot $@
		;;
	"ssh")
		shift
		do_ssh $@
		;;
	"update")
		shift
		do_update $@
		;;
	"uptime")
		shift
		do_uptime $@
		;;
        "mount")
                shift
                do_mount $@
                ;;
        "umount")
                shift
                do_umount $@
                ;;
	*)
		echo "fatal: unrecognised command '$1'" > /dev/stderr
		exit 1
		;;
	esac
}
main $@
