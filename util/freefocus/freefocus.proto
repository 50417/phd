// Draft message protocol for FreeFocus 1.0.0.
syntax = "proto2";
package freefocus;

// Core Building Blocks.

// A Person represents a user in a system.
message Person {
  // The pid is a string of one or more characters which uniquely identifies
  // the Person amongst all other Persons in a system. Markdown format is
  // accepted, but text must be only a single line.
  optional string pid = 1;
  // The name of a Person is a string of one or more characters. A Person may
  // have multiple names. Each name for a Person must be unique, but multiple
  // Persons in a system may have the same name. Markdown format is
  // accepted, but text must be only a single line.
  repeated string name = 2;
  // A Person belongs to zero or more groups, each of which belong to a
  // Workspace.
  repeated WorkspaceGroups workspace_group = 3;
  // A list of one or more email addresses for a Person.
  repeated string email = 4;
  // The number of milliseconds since the epoch (UTC) that a Person was created.
  optional int64 created_at_utc_epoch_ms = 5;

  // A list of Groups and the Workspace they belong to. This is required because
  // the gid is unique only to a Workspace. Groups do not need to be top-level
  // in that Workspace.
  message WorkspaceGroups {
    optional string wid = 1;
    repeated string gid = 2;
  }
}

// A Workspace represents the root object for a collection of Groups, Tasks,
// Tags, and Assets.
message Workspace {
  // The wid is a string of one or more characters which uniquely identifies the
  // Workspace amongst all other Workspaces in a system. Markdown format is
  // accepted, but text must be only a single line.
  optional string wid = 1;
  // The root of the Workspace's Groups, Tasks, Tags, and Assets trees.
  repeated Group group = 2;
  repeated Task task = 3;
  repeated Tag tag = 4;
  repeated Asset asset = 5;
  // A list of Groups which own this workspace. Only members of these groups
  // may create new top-level groups, tasks, tags, and assets. Members of owner
  // groups may add Workspace comments. Owner groups must belong to the
  // workspace.
  repeated string owner_gid = 6;
  // A list of Groups which are friends of this workspace. Members of friend
  // groups have read-only access to the Workspace, but can add comments. Friend
  // groups must belong to the workspace.
  repeated string friend_gid = 7;
  // The number of milliseconds since the epoch (UTC) that the Workspace was
  // created.
  optional int64 created_at_utc_epoch_ms = 8;
  // The root of a Workspace's comment trees.
  repeated Comment comment = 10;
}

// A Group represents a collection of Persons.
message Group {
  // The gid is a string of one or more characters which uniquely identifies the
  // Group amongst all other Groups in a Workspace. Markdown format is accepted,
  // but text must be only a single line.
  optional string gid = 1;
  // A Group belongs to either a Workspace or another Group.
  oneof parent {
    string parent_wid = 2;
    string parent_gid = 3;
  }
  // An optional string of one or more characters providing a description of the
  // group. Markdown format is accepted.
  optional string description = 4;
  // Lists of a Group's members. A group member is either another Group or a
  // Person. If a group has no Group or Person members, it is destroyed.
  repeated string member_gid = 5;
  repeated string member_pid = 6;
  // The pid of the Person who created the group.
  optional string created_by_pid = 7;
  // The number of milliseconds since the epoch (UTC) that the Group was
  // created.
  optional int64 created_at_utc_epoch_ms = 8;
  // TODO(cec): Create a GroupChange message, and record a history of all
  // modifications to a group, not just the ID and timestamp of the most recent
  // modification.
  //
  // The pid of the Person who most recently modified the group.
  optional string most_recently_modified_by_pid = 9;
  // The number of milliseconds since the epoch (UTC) that the Group was
  // created.
  optional int64 most_recently_modified_at_utc_epoch_ms = 10;
  // The root of a Group's comment trees.
  repeated Comment comments = 11;
}

// A Task is a unit of work.
message Task {
  // The id is a positive integer which uniquely identifies the Task amongst
  // all other Tasks in a Workspace. The id is a counter: the first Task is
  // assigned id 1, the second task id 2, etc.
  optional int64 id = 1;
  // A Task belongs to either a Workspace or another Task.
  oneof parent {
    string parent_wid = 2;
    string parent_id = 3;
  }
  // A list of zero or more child Tasks.
  repeated int64 child_id = 4;
  // A list of Groups for which the Task is assigned. When a Task is created,
  // no Group is assigned. Members of assigned Groups may complete the Task,
  // but make no other alterations.
  repeated string assigned_gid = 5;
  // A list of Groups which own this Task. Members of these groups may modify
  // the Task.
  repeated string owner_gid = 6;
  // A list of Friends of the Task. Members of friend groups may view the Task,
  // but not modify it.
  repeated string friend_gid = 7;
  // An optional string of one or more characters providing a description of the
  // group. Markdown format is accepted.
  optional string description = 8;
  // A list of zero or more Task Tags.
  repeated string tag_tid = 8;
  // A list of zero or more Assets associated with a Task.
  repeated string asset_aid = 9;

  // The state of a Task. This defines a set of mutually-exlcusive states that
  // a Task can be in. Note that there is a further state, OVERDUE, but this is
  // not exclusive. A task can be OVERDUE in the READY, BLOCKED, and IN_PROGRESS
  // states.
  enum TaskState {
    // The task is available and elligible for completion.
    READY = 0;
    // The task is not yet ready to be elligible for completion. If a Task is
    // not ready, the field ready_at_utc_epoch_ms must be set to a time in the
    // future at which the task will transition either to READY or BLOCKED.
    NOT_READY = 1;
    // The task depends on other tasks which are not yet completed. If a Task
    // is blocked, the field blocked_by_id must be set to a list of one or more
    // tasks which must be completed before this task will transition to READY.
    // If all of the blocking Tasks are either COMPLETE or DROPPED, the task
    // will transition to READY.
    BLOCKED = 2;
    // The task is currently being worked on. Once a task is in progress, it may
    // transition to either COMPLETE or DROPPED state.
    IN_PROGRESS = 3;
    // The task has been completed. A Task which has been completed cannot
    // change state. If a Task is complete, the completed_by_pid and
    // completed_at_utc_epoch_ms fields must be set.
    COMPLETE = 4;
    // The task has been dropped. A dropped task can transition to READY, NOT
    // READ
    DROPPED = 5;
  }
  optional TaskState state = 10;
  optional int64 ready_at_utc_epoch_ms = 11;
  repeated int64 blocked_by_id = 12;
  optional string completed_by_pid = 13;
  optional int64 completed_at_utc_epoch_ms = 14;
  // An optional number of milliseconds since the epoch (UTC) that the a Task is
  // due at. A task is OVERDUE if this value is in the past and the Task state
  // is one of {READY,BLOCKED,IN_PROGRESS}.
  optional int64 dueat_utc_epoch_ms = 15;
  // An optional estimate for the amount of time taken to complete a task.
  optional int64 estimated_duration_ms = 16;
  // An optional record of the amount of time that a Task has been worked on
  // for. This can be set to any arbitrary positive integer by a Person - there
  // is no mechanism to enforce its accuracy.
  optional int64 actual_duration_ms = 17;
  // An optional number of milliseconds since the epoch (UTC) that a Task was
  // most recently transition to the IN_PROGRESS state.
  optional int64 started_at_utc_epoch_ms = 18;
  // Support for optionally duplicating tasks.
  oneof duplicate_after {
    // Duplicate the Task this many milliseconds after the Task is completed.
    int64 duplicate_after_ms_completed = 19;
    // Duplicate the Task this many milliseconds after the Task was created.
    int64 duplicate_after_ms_created = 20;
  }
  // The ID of a Task that this task was duplicated from.
  optional int64 duplicated_from_id = 21;
  // The remaining number of times that this Task should be duplicated. Only
  // used if duplicate_after field is set. If this value is < 0, there is no
  // limit on the remaining duplications.
  optional int32 remaining_duplications = 22;

  // The pid of the Person who created the task.
  optional string created_by_pid = 23;
  // The number of milliseconds since the epoch (UTC) that the task was created.
  optional int64 created_at_utc_epoch_ms = 24;
  // The pid of the Person who most recently modified the group.
  optional string most_recently_modified_by_pid = 25;
  // The number of milliseconds since the epoch (UTC) that the Group was
  // created.
  optional int64 most_recently_modified_at_utc_epoch_ms = 26;
  // The root of the Tasks' comment tree.
  repeated Comment comments = 27;
}


message Tag {

  message Parent {
    enum Type {
      WORKSPACE = 0;
      TAG = 1;
    }

    optional Type type = 1;
    optional Workspace workspace = 2;
    optional Tag tag = 3;
  }

  optional string id = 1;
  optional Parent parent = 2;
  repeated Tag children = 3;

  optional string body = 4;

  repeated Group owners = 5;
  repeated Group friends = 6;

  // Accountability
  optional Person created_by = 7;
  optional int64 created = 8;
  optional Person modified_by = 9;
  optional int64 modified = 10;

  repeated Comment comments = 11;
}


message Asset {
  message Parent {
    enum Type {
      WORKSPACE = 0;
      ASSET = 1;
    }

    optional Type type = 1;
    optional Workspace workspace = 2;
    optional Asset asset = 3;
  }

  oneof location {
    string uri = 1;
    string urn = 2;
  }

  optional string id = 1;
  optional Parent parent = 2;
  repeated Asset children = 3;

  repeated Group owners = 4;
  repeated Group friends = 5;

  optional string type = 6;
  optional string body = 7;

  // Accountability
  optional Person created_by = 8;
  optional int64 created = 9;
  optional Person modified_by = 10;
  optional int64 modified = 11;

  repeated Comment comments = 12;
}


message Comment {

  message Parent {
    enum Type {
      WORKSPACE = 0;
      TASK = 1;
      ASSET = 2;
      TAG = 3;
      COMMENT = 4;
    }

    optional Type type = 1;
    optional Workspace workspace = 2;
    optional Task task = 3;
    optional Asset asset = 4;
    optional Tag tag = 5;
    optional Comment comment = 6;
  }

  optional string id = 1;
  optional Parent parent = 2;
  repeated Comment comments = 3;

  optional string body = 4;

  // Accountability
  optional Person created_by = 5;
  optional int64 created = 6;
  optional int64 modified = 7;
}
