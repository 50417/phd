// A Generator generates testcases.

syntax = "proto2";
package deepsmith;

import "deeplearning/deepsmith/proto/deepsmith.proto";
import "deeplearning/deepsmith/proto/service.proto";

service GeneratorService {
  rpc GetGeneratorCapabilities (GetCapabilitiesRequest) returns (GetCapabilitiesResponse);
  rpc GenerateTestcases (GenerateTestcasesRequest) returns (GenerateTestcasesResponse);
}

message GetCapabilitiesRequest {
  optional ServiceStatus status = 1;
}

message GetCapabilitiesResponse {
  optional ServiceStatus status = 1;
  optional string toolchain = 2;
  optional Generator generator = 3;
}

message GenerateTestcasesRequest {
  optional ServiceStatus status = 1;
}

message GenerateTestcasesResponse {
  optional ServiceStatus status = 1;
  repeated Testcase testcases = 2;
}

// A testcase generator which uses CLgen to generate programs.
message ClgenGenerator {
  optional ServiceConfig service = 1;
}
