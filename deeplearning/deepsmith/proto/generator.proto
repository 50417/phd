// A Generator generates testcases.

syntax = "proto2";
package deepsmith;

import "deeplearning/deepsmith/proto/deepsmith.proto";
import "deeplearning/deepsmith/proto/service.proto";
import "deeplearning/clgen/proto/model.proto";
import "deeplearning/clgen/proto/sampler.proto";

service GeneratorService {
  rpc GetGeneratorCapabilities (GetGeneratorCapabilitiesRequest) returns (GetGeneratorCapabilitiesResponse);
  rpc GenerateTestcases (GenerateTestcasesRequest) returns (GenerateTestcasesResponse);
}

message GetGeneratorCapabilitiesRequest {
  optional ServiceStatus status = 1;
}

message GetGeneratorCapabilitiesResponse {
  optional ServiceStatus status = 1;
  optional string toolchain = 2;
  optional Generator generator = 3;
}

message GenerateTestcasesRequest {
  optional ServiceStatus status = 1;
}

message GenerateTestcasesResponse {
  optional ServiceStatus status = 1;
  repeated Testcase testcases = 2;
}

// A testcase generator which uses CLgen to generate programs.
message ClgenGenerator {
  // Configuration of the service host.
  optional ServiceConfig service = 1;
  // The path to the clgen working directory on the host machine. This directory
  // stores persistent CLgen files, including the corpus, model checkpoints,
  // and sampler outputs. If not provided, the default value of
  // $HOME/.cache/clgen is used.
  optional string clgen_working_dir = 2;
  // The CLgen model and sampler configuration.
  optional clgen.Model model = 3;
  optional clgen.Sampler sampler = 4;
  // The skeleton Testcases used to convert CLgen samples into DeepSmith
  // testcases. For each CLgen sample, a copy of all of the Testcase skeletons
  // is made and the 'src' input is set as the sample text.
  repeated Testcase testcase_skeleton = 5;
}
