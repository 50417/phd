    1: import compileall
    1: import imp
    1: import os
    1: import py_compile
    1: import shutil
    1: import struct
    1: import tempfile
    1: from test import test_support
    1: import unittest
       
       
    2: class CompileallTests(unittest.TestCase):
       
    1:     def setUp(self):
    3:         self.directory = tempfile.mkdtemp()
    3:         self.source_path = os.path.join(self.directory, '_test.py')
    3:         self.bc_path = self.source_path + ('c' if __debug__ else 'o')
    3:         with open(self.source_path, 'w') as file:
    3:             file.write('x = 123\n')
    3:         self.source_path2 = os.path.join(self.directory, '_test2.py')
    3:         self.bc_path2 = self.source_path2 + ('c' if __debug__ else 'o')
    3:         shutil.copyfile(self.source_path, self.source_path2)
       
    1:     def tearDown(self):
    3:         shutil.rmtree(self.directory)
       
    1:     def data(self):
    6:         with open(self.bc_path, 'rb') as file:
    6:             data = file.read(8)
    6:         mtime = int(os.stat(self.source_path).st_mtime)
    6:         compare = struct.pack('<4sl', imp.get_magic(), mtime)
    6:         return data, compare
       
    1:     @unittest.skipUnless(hasattr(os, 'stat'), 'test needs os.stat()')
           def recreation_check(self, metadata):
               """Check that compileall recreates bytecode when the new metadata is
               used."""
    2:         py_compile.compile(self.source_path)
    2:         self.assertEqual(*self.data())
    2:         with open(self.bc_path, 'rb') as file:
    2:             bc = file.read()[len(metadata):]
    2:         with open(self.bc_path, 'wb') as file:
    2:             file.write(metadata)
    2:             file.write(bc)
    2:         self.assertNotEqual(*self.data())
    2:         compileall.compile_dir(self.directory, force=False, quiet=True)
    2:         self.assertTrue(*self.data())
       
    1:     def test_mtime(self):
               # Test a change in mtime leads to a new .pyc.
    1:         self.recreation_check(struct.pack('<4sl', imp.get_magic(), 1))
       
    1:     def test_magic_number(self):
               # Test a change in mtime leads to a new .pyc.
    1:         self.recreation_check(b'\0\0\0\0')
       
    1:     def test_compile_files(self):
               # Test compiling a single file, and complete directory
    3:         for fn in (self.bc_path, self.bc_path2):
    2:             try:
    2:                 os.unlink(fn)
    2:             except:
    2:                 pass
    1:         compileall.compile_file(self.source_path, force=False, quiet=True)
    1:         self.assertTrue(os.path.isfile(self.bc_path) \
    1:                         and not os.path.isfile(self.bc_path2))
    1:         os.unlink(self.bc_path)
    1:         compileall.compile_dir(self.directory, force=False, quiet=True)
    1:         self.assertTrue(os.path.isfile(self.bc_path) \
    1:                         and os.path.isfile(self.bc_path2))
    1:         os.unlink(self.bc_path)
    1:         os.unlink(self.bc_path2)
       
    1: def test_main():
    1:     test_support.run_unittest(CompileallTests)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
