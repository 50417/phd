       """distutils.file_util
       
       Utility functions for operating on single files.
    2: """
       
    2: __revision__ = "$Id$"
       
    2: import os
    2: from distutils.errors import DistutilsFileError
    2: from distutils import log
       
       # for generating verbose output in 'copy_file()'
    2: _copy_action = {None: 'copying',
    2:                 'hard': 'hard linking',
    2:                 'sym': 'symbolically linking'}
       
       
    2: def _copy_file_contents(src, dst, buffer_size=16*1024):
           """Copy the file 'src' to 'dst'.
       
           Both must be filenames. Any error opening either file, reading from
           'src', or writing to 'dst', raises DistutilsFileError.  Data is
           read/written in chunks of 'buffer_size' bytes (default 16k).  No attempt
           is made to handle anything apart from regular files.
           """
           # Stolen from shutil module in the standard library, but with
           # custom error-handling added.
   31:     fsrc = None
   31:     fdst = None
   31:     try:
   31:         try:
   31:             fsrc = open(src, 'rb')
>>>>>>         except os.error, (errno, errstr):
>>>>>>             raise DistutilsFileError("could not open '%s': %s" % (src, errstr))
       
   31:         if os.path.exists(dst):
>>>>>>             try:
>>>>>>                 os.unlink(dst)
>>>>>>             except os.error, (errno, errstr):
>>>>>>                 raise DistutilsFileError(
>>>>>>                       "could not delete '%s': %s" % (dst, errstr))
       
   31:         try:
   31:             fdst = open(dst, 'wb')
>>>>>>         except os.error, (errno, errstr):
>>>>>>             raise DistutilsFileError(
>>>>>>                   "could not create '%s': %s" % (dst, errstr))
       
   31:         while 1:
   58:             try:
   58:                 buf = fsrc.read(buffer_size)
>>>>>>             except os.error, (errno, errstr):
>>>>>>                 raise DistutilsFileError(
>>>>>>                       "could not read from '%s': %s" % (src, errstr))
       
   58:             if not buf:
   31:                 break
       
   27:             try:
   27:                 fdst.write(buf)
>>>>>>             except os.error, (errno, errstr):
>>>>>>                 raise DistutilsFileError(
>>>>>>                       "could not write to '%s': %s" % (dst, errstr))
       
           finally:
   31:         if fdst:
   31:             fdst.close()
   31:         if fsrc:
   31:             fsrc.close()
       
    2: def copy_file(src, dst, preserve_mode=1, preserve_times=1, update=0,
    2:               link=None, verbose=1, dry_run=0):
           """Copy a file 'src' to 'dst'.
       
           If 'dst' is a directory, then 'src' is copied there with the same name;
           otherwise, it must be a filename.  (If the file exists, it will be
           ruthlessly clobbered.)  If 'preserve_mode' is true (the default),
           the file's mode (type and permission bits, or whatever is analogous on
           the current platform) is copied.  If 'preserve_times' is true (the
           default), the last-modified and last-access times are copied as well.
           If 'update' is true, 'src' will only be copied if 'dst' does not exist,
           or if 'dst' does exist but is older than 'src'.
       
           'link' allows you to make hard links (os.link) or symbolic links
           (os.symlink) instead of copying: set it to "hard" or "sym"; if it is
           None (the default), files are copied.  Don't set 'link' on systems that
           don't support it: 'copy_file()' doesn't check if hard or symbolic
           linking is available. If hardlink fails, falls back to
           _copy_file_contents().
       
           Under Mac OS, uses the native file copy function in macostools; on
           other systems, uses '_copy_file_contents()' to copy file contents.
       
           Return a tuple (dest_name, copied): 'dest_name' is the actual name of
           the output file, and 'copied' is true if the file was copied (or would
           have been copied, if 'dry_run' true).
           """
           # XXX if the destination file already exists, we clobber it if
           # copying, but blow up if linking.  Hmmm.  And I don't know what
           # macostools.copyfile() does.  Should definitely be consistent, and
           # should probably blow up if destination exists and we would be
           # changing it (ie. it's not already a hard/soft link to src OR
           # (not update) and (src newer than dst).
       
   84:     from distutils.dep_util import newer
   84:     from stat import ST_ATIME, ST_MTIME, ST_MODE, S_IMODE
       
   84:     if not os.path.isfile(src):
>>>>>>         raise DistutilsFileError(
>>>>>>               "can't copy '%s': doesn't exist or not a regular file" % src)
       
   84:     if os.path.isdir(dst):
   10:         dir = dst
   10:         dst = os.path.join(dst, os.path.basename(src))
           else:
   74:         dir = os.path.dirname(dst)
       
   84:     if update and not newer(src, dst):
    3:         if verbose >= 1:
    3:             log.debug("not copying %s (output up-to-date)", src)
    3:         return dst, 0
       
   81:     try:
   81:         action = _copy_action[link]
>>>>>>     except KeyError:
>>>>>>         raise ValueError("invalid value '%s' for 'link' argument" % link)
       
   81:     if verbose >= 1:
   81:         if os.path.basename(dst) == os.path.basename(src):
   79:             log.info("%s %s -> %s", action, src, dir)
               else:
    2:             log.info("%s %s -> %s", action, src, dst)
       
   81:     if dry_run:
>>>>>>         return (dst, 1)
       
           # If linking (hard or symbolic), use the appropriate system call
           # (Unix only, of course, but that's the caller's responsibility)
   81:     if link == 'hard':
   51:         if not (os.path.exists(dst) and os.path.samefile(src, dst)):
   51:             try:
   51:                 os.link(src, dst)
   50:                 return (dst, 1)
    1:             except OSError:
                       # If hard linking fails, fall back on copying file
                       # (some special filesystems don't support hard linking
                       #  even under Unix, see issue #8876).
    1:                 pass
   30:     elif link == 'sym':
>>>>>>         if not (os.path.exists(dst) and os.path.samefile(src, dst)):
>>>>>>             os.symlink(src, dst)
>>>>>>             return (dst, 1)
       
           # Otherwise (non-Mac, not linking), copy the file contents and
           # (optionally) copy the times and mode.
   31:     _copy_file_contents(src, dst)
   31:     if preserve_mode or preserve_times:
   31:         st = os.stat(src)
       
               # According to David Ascher <da@ski.org>, utime() should be done
               # before chmod() (at least under NT).
   31:         if preserve_times:
   31:             os.utime(dst, (st[ST_ATIME], st[ST_MTIME]))
   31:         if preserve_mode:
   22:             os.chmod(dst, S_IMODE(st[ST_MODE]))
       
   31:     return (dst, 1)
       
       # XXX I suspect this is Unix-specific -- need porting help!
    2: def move_file (src, dst, verbose=1, dry_run=0):
           """Move a file 'src' to 'dst'.
       
           If 'dst' is a directory, the file will be moved into it with the same
           name; otherwise, 'src' is just renamed to 'dst'.  Return the new
           full name of the file.
       
           Handles cross-device moves on Unix using 'copy_file()'.  What about
           other systems???
           """
    5:     from os.path import exists, isfile, isdir, basename, dirname
    5:     import errno
       
    5:     if verbose >= 1:
    2:         log.info("moving %s -> %s", src, dst)
       
    5:     if dry_run:
>>>>>>         return dst
       
    5:     if not isfile(src):
>>>>>>         raise DistutilsFileError("can't move '%s': not a regular file" % src)
       
    5:     if isdir(dst):
    1:         dst = os.path.join(dst, basename(src))
    4:     elif exists(dst):
>>>>>>         raise DistutilsFileError(
>>>>>>               "can't move '%s': destination '%s' already exists" %
>>>>>>               (src, dst))
       
    5:     if not isdir(dirname(dst)):
>>>>>>         raise DistutilsFileError(
>>>>>>               "can't move '%s': destination '%s' not a valid path" % \
>>>>>>               (src, dst))
       
    5:     copy_it = 0
    5:     try:
    5:         os.rename(src, dst)
>>>>>>     except os.error, (num, msg):
>>>>>>         if num == errno.EXDEV:
>>>>>>             copy_it = 1
               else:
>>>>>>             raise DistutilsFileError(
>>>>>>                   "couldn't move '%s' to '%s': %s" % (src, dst, msg))
       
    5:     if copy_it:
>>>>>>         copy_file(src, dst, verbose=verbose)
>>>>>>         try:
>>>>>>             os.unlink(src)
>>>>>>         except os.error, (num, msg):
>>>>>>             try:
>>>>>>                 os.unlink(dst)
>>>>>>             except os.error:
>>>>>>                 pass
>>>>>>             raise DistutilsFileError(
>>>>>>                   ("couldn't move '%s' to '%s' by copy/delete: " +
>>>>>>                    "delete '%s' failed: %s") %
>>>>>>                   (src, dst, src, msg))
    5:     return dst
       
       
    2: def write_file (filename, contents):
           """Create a file with the specified name and write 'contents' (a
           sequence of strings without line terminators) to it.
           """
   16:     f = open(filename, "w")
   16:     try:
   93:         for line in contents:
   77:             f.write(line + "\n")
           finally:
   16:         f.close()
