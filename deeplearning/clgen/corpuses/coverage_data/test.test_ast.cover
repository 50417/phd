    1: import sys, itertools, unittest
    1: from test import test_support
    1: import ast
       
    1: def to_tuple(t):
 6942:     if t is None or isinstance(t, (basestring, int, long, complex)):
 1481:         return t
 5461:     elif isinstance(t, list):
 3058:         return [to_tuple(e) for e in t]
 3836:     result = [t.__class__.__name__]
 3836:     if hasattr(t, 'lineno') and hasattr(t, 'col_offset'):
 2030:         result.append((t.lineno, t.col_offset))
 3836:     if t._fields is None:
>>>>>>         return tuple(result)
 8825:     for f in t._fields:
 4989:         result.append(to_tuple(getattr(t, f)))
 3836:     return tuple(result)
       
       
       # These tests are compiled through "exec"
       # There should be at least one test per statement
       exec_tests = [
           # None
    1:     "None",
           # FunctionDef
    1:     "def f(): pass",
           # FunctionDef with arg
    1:     "def f(a): pass",
           # FunctionDef with arg and default value
    1:     "def f(a=0): pass",
           # FunctionDef with varargs
    1:     "def f(*args): pass",
           # FunctionDef with kwargs
    1:     "def f(**kwargs): pass",
           # FunctionDef with all kind of args
    1:     "def f(a, b=1, c=None, d=[], e={}, *args, **kwargs): pass",
           # ClassDef
    1:     "class C:pass",
           # ClassDef, new style class
    1:     "class C(object): pass",
           # Return
    1:     "def f():return 1",
           # Delete
    1:     "del v",
           # Assign
    1:     "v = 1",
           # AugAssign
    1:     "v += 1",
           # Print
    1:     "print >>f, 1, ",
           # For
    1:     "for v in v:pass",
           # While
    1:     "while v:pass",
           # If
    1:     "if v:pass",
           # Raise
    1:     "raise Exception, 'string'",
           # TryExcept
    1:     "try:\n  pass\nexcept Exception:\n  pass",
           # TryFinally
    1:     "try:\n  pass\nfinally:\n  pass",
           # Assert
    1:     "assert v",
           # Import
    1:     "import sys",
           # ImportFrom
    1:     "from sys import v",
           # Exec
    1:     "exec 'v'",
           # Global
    1:     "global v",
           # Expr
    1:     "1",
           # Pass,
    1:     "pass",
           # Break
    1:     "break",
           # Continue
    1:     "continue",
           # for statements with naked tuples (see http://bugs.python.org/issue6704)
    1:     "for a,b in c: pass",
    1:     "[(a,b) for a,b in c]",
    1:     "((a,b) for a,b in c)",
    1:     "((a,b) for (a,b) in c)",
           # Multiline generator expression (test for .lineno & .col_offset)
           """(
           (
           Aa
           ,
              Bb
           )
           for
           Aa
           ,
           Bb in Cc
    1:     )""",
           # dictcomp
    1:     "{a : b for w in x for m in p if g}",
           # dictcomp with naked tuple
    1:     "{a : b for v,w in x}",
           # setcomp
    1:     "{r for l in x if g}",
           # setcomp with naked tuple
    1:     "{r for l,m in x}",
       ]
       
       # These are compiled through "single"
       # because of overlap with "eval", it just tests what
       # can't be tested with "eval"
       single_tests = [
    1:     "1+2"
       ]
       
       # These are compiled through "eval"
       # It should test all expressions
       eval_tests = [
         # None
    1:   "None",
         # BoolOp
    1:   "a and b",
         # BinOp
    1:   "a + b",
         # UnaryOp
    1:   "not v",
         # Lambda
    1:   "lambda:None",
         # Dict
    1:   "{ 1:2 }",
         # Empty dict
    1:   "{}",
         # Set
    1:   "{None,}",
         # Multiline dict (test for .lineno & .col_offset)
         """{
             1
               :
                 2
    1:      }""",
         # ListComp
    1:   "[a for b in c if d]",
         # GeneratorExp
    1:   "(a for b in c if d)",
         # Yield - yield expressions can't work outside a function
         #
         # Compare
    1:   "1 < 2 < 3",
         # Call
    1:   "f(1,2,c=3,*d,**e)",
         # Repr
    1:   "`v`",
         # Num
    1:   "10L",
         # Str
    1:   "'string'",
         # Attribute
    1:   "a.b",
         # Subscript
    1:   "a[b:c]",
         # Name
    1:   "v",
         # List
    1:   "[1,2,3]",
         # Empty list
    1:   "[]",
         # Tuple
    1:   "1,2,3",
         # Tuple
    1:   "(1,2,3)",
         # Empty tuple
    1:   "()",
         # Combination
    1:   "a.b.c.d(a.b[1:2])",
       
       ]
       
       # TODO: expr_context, slice, boolop, operator, unaryop, cmpop, comprehension
       # excepthandler, arguments, keywords, alias
       
    2: class AST_Tests(unittest.TestCase):
       
    1:     def _assertTrueorder(self, ast_node, parent_pos):
  590:         if not isinstance(ast_node, ast.AST) or ast_node._fields is None:
  150:             return
  440:         if isinstance(ast_node, (ast.expr, ast.stmt, ast.excepthandler)):
  230:             node_pos = (ast_node.lineno, ast_node.col_offset)
  230:             self.assertTrue(node_pos >= parent_pos)
  230:             parent_pos = (ast_node.lineno, ast_node.col_offset)
 1001:         for name in ast_node._fields:
  561:             value = getattr(ast_node, name)
  561:             if isinstance(value, list):
  286:                 for child in value:
  137:                     self._assertTrueorder(child, parent_pos)
  412:             elif value is not None:
  389:                 self._assertTrueorder(value, parent_pos)
       
    1:     def test_AST_objects(self):
    1:         x = ast.AST()
    1:         self.assertEqual(x._fields, ())
       
    1:         with self.assertRaises(AttributeError):
    1:             x.vararg
       
    1:         with self.assertRaises(AttributeError):
    1:             x.foobar = 21
       
    1:         with self.assertRaises(AttributeError):
    1:             ast.AST(lineno=2)
       
    1:         with self.assertRaises(TypeError):
                   # "_ast.AST constructor takes 0 positional arguments"
    1:             ast.AST(2)
       
    1:     def test_snippets(self):
    1:         for input, output, kind in ((exec_tests, exec_results, "exec"),
    1:                                     (single_tests, single_results, "single"),
    4:                                     (eval_tests, eval_results, "eval")):
   67:             for i, o in itertools.izip(input, output):
   64:                 ast_tree = compile(i, "?", kind, ast.PyCF_ONLY_AST)
   64:                 self.assertEqual(to_tuple(ast_tree), o)
   64:                 self._assertTrueorder(ast_tree, (0, 0))
       
    1:     def test_slice(self):
    1:         slc = ast.parse("x[::]").body[0].value.slice
    1:         self.assertIsNone(slc.upper)
    1:         self.assertIsNone(slc.lower)
    1:         self.assertIsInstance(slc.step, ast.Name)
    1:         self.assertEqual(slc.step.id, "None")
       
    1:     def test_from_import(self):
    1:         im = ast.parse("from . import y").body[0]
    1:         self.assertIsNone(im.module)
       
    1:     def test_non_interned_future_from_ast(self):
    1:         mod = ast.parse("from __future__ import division")
    1:         self.assertIsInstance(mod.body[0], ast.ImportFrom)
    1:         mod.body[0].module = " __future__ ".strip()
    1:         compile(mod, "<test>", "exec")
       
    1:     def test_base_classes(self):
    1:         self.assertTrue(issubclass(ast.For, ast.stmt))
    1:         self.assertTrue(issubclass(ast.Name, ast.expr))
    1:         self.assertTrue(issubclass(ast.stmt, ast.AST))
    1:         self.assertTrue(issubclass(ast.expr, ast.AST))
    1:         self.assertTrue(issubclass(ast.comprehension, ast.AST))
    1:         self.assertTrue(issubclass(ast.Gt, ast.AST))
       
    1:     def test_field_attr_existence(self):
  123:         for name, item in ast.__dict__.iteritems():
  122:             if isinstance(item, type) and name != 'AST' and name[0].isupper():
   90:                 x = item()
   90:                 if isinstance(x, ast.AST):
   88:                     self.assertEqual(type(x._fields), tuple)
       
    1:     def test_arguments(self):
    1:         x = ast.arguments()
    1:         self.assertEqual(x._fields, ('args', 'vararg', 'kwarg', 'defaults'))
       
    1:         with self.assertRaises(AttributeError):
    1:             x.vararg
       
    1:         x = ast.arguments(1, 2, 3, 4)
    1:         self.assertEqual(x.vararg, 2)
       
    1:     def test_field_attr_writable(self):
    1:         x = ast.Num()
               # We can assign to _fields
    1:         x._fields = 666
    1:         self.assertEqual(x._fields, 666)
       
    1:     def test_classattrs(self):
    1:         x = ast.Num()
    1:         self.assertEqual(x._fields, ('n',))
       
    1:         with self.assertRaises(AttributeError):
    1:             x.n
       
    1:         x = ast.Num(42)
    1:         self.assertEqual(x.n, 42)
       
    1:         with self.assertRaises(AttributeError):
    1:             x.lineno
       
    1:         with self.assertRaises(AttributeError):
    1:             x.foobar
       
    1:         x = ast.Num(lineno=2)
    1:         self.assertEqual(x.lineno, 2)
       
    1:         x = ast.Num(42, lineno=0)
    1:         self.assertEqual(x.lineno, 0)
    1:         self.assertEqual(x._fields, ('n',))
    1:         self.assertEqual(x.n, 42)
       
    1:         self.assertRaises(TypeError, ast.Num, 1, 2)
    1:         self.assertRaises(TypeError, ast.Num, 1, 2, lineno=0)
       
    1:     def test_module(self):
    1:         body = [ast.Num(42)]
    1:         x = ast.Module(body)
    1:         self.assertEqual(x.body, body)
       
    1:     def test_nodeclasses(self):
               # Zero arguments constructor explicitely allowed
    1:         x = ast.BinOp()
    1:         self.assertEqual(x._fields, ('left', 'op', 'right'))
       
               # Random attribute allowed too
    1:         x.foobarbaz = 5
    1:         self.assertEqual(x.foobarbaz, 5)
       
    1:         n1 = ast.Num(1)
    1:         n3 = ast.Num(3)
    1:         addop = ast.Add()
    1:         x = ast.BinOp(n1, addop, n3)
    1:         self.assertEqual(x.left, n1)
    1:         self.assertEqual(x.op, addop)
    1:         self.assertEqual(x.right, n3)
       
    1:         x = ast.BinOp(1, 2, 3)
    1:         self.assertEqual(x.left, 1)
    1:         self.assertEqual(x.op, 2)
    1:         self.assertEqual(x.right, 3)
       
    1:         x = ast.BinOp(1, 2, 3, lineno=0)
    1:         self.assertEqual(x.left, 1)
    1:         self.assertEqual(x.op, 2)
    1:         self.assertEqual(x.right, 3)
    1:         self.assertEqual(x.lineno, 0)
       
               # node raises exception when not given enough arguments
    1:         self.assertRaises(TypeError, ast.BinOp, 1, 2)
               # node raises exception when given too many arguments
    1:         self.assertRaises(TypeError, ast.BinOp, 1, 2, 3, 4)
               # node raises exception when not given enough arguments
    1:         self.assertRaises(TypeError, ast.BinOp, 1, 2, lineno=0)
               # node raises exception when given too many arguments
    1:         self.assertRaises(TypeError, ast.BinOp, 1, 2, 3, 4, lineno=0)
       
               # can set attributes through kwargs too
    1:         x = ast.BinOp(left=1, op=2, right=3, lineno=0)
    1:         self.assertEqual(x.left, 1)
    1:         self.assertEqual(x.op, 2)
    1:         self.assertEqual(x.right, 3)
    1:         self.assertEqual(x.lineno, 0)
       
               # Random kwargs also allowed
    1:         x = ast.BinOp(1, 2, 3, foobarbaz=42)
    1:         self.assertEqual(x.foobarbaz, 42)
       
    1:     def test_no_fields(self):
               # this used to fail because Sub._fields was None
    1:         x = ast.Sub()
    1:         self.assertEqual(x._fields, ())
       
    1:     def test_pickling(self):
    1:         import pickle
    1:         mods = [pickle]
    1:         try:
    1:             import cPickle
    1:             mods.append(cPickle)
>>>>>>         except ImportError:
>>>>>>             pass
    1:         protocols = [0, 1, 2]
    3:         for mod in mods:
    8:             for protocol in protocols:
  468:                 for ast in (compile(i, "?", "exec", 0x400) for i in exec_tests):
  228:                     ast2 = mod.loads(mod.dumps(ast, protocol))
  228:                     self.assertEqual(to_tuple(ast2), to_tuple(ast))
       
    1:     def test_invalid_identitifer(self):
    1:         m = ast.Module([ast.Expr(ast.Name(u"x", ast.Load()))])
    1:         ast.fix_missing_locations(m)
    1:         with self.assertRaises(TypeError) as cm:
    1:             compile(m, "<test>", "exec")
    1:         self.assertIn("identifier must be of type str", str(cm.exception))
       
    1:     def test_invalid_string(self):
    1:         m = ast.Module([ast.Expr(ast.Str(43))])
    1:         ast.fix_missing_locations(m)
    1:         with self.assertRaises(TypeError) as cm:
    1:             compile(m, "<test>", "exec")
    1:         self.assertIn("string must be of type str or uni", str(cm.exception))
       
       
    2: class ASTHelpers_Test(unittest.TestCase):
       
    1:     def test_parse(self):
    1:         a = ast.parse('foo(1 + 1)')
    1:         b = compile('foo(1 + 1)', '<unknown>', 'exec', ast.PyCF_ONLY_AST)
    1:         self.assertEqual(ast.dump(a), ast.dump(b))
       
    1:     def test_dump(self):
    1:         node = ast.parse('spam(eggs, "and cheese")')
    1:         self.assertEqual(ast.dump(node),
    1:             "Module(body=[Expr(value=Call(func=Name(id='spam', ctx=Load()), "
                   "args=[Name(id='eggs', ctx=Load()), Str(s='and cheese')], "
                   "keywords=[], starargs=None, kwargs=None))])"
               )
    1:         self.assertEqual(ast.dump(node, annotate_fields=False),
    1:             "Module([Expr(Call(Name('spam', Load()), [Name('eggs', Load()), "
                   "Str('and cheese')], [], None, None))])"
               )
    1:         self.assertEqual(ast.dump(node, include_attributes=True),
    1:             "Module(body=[Expr(value=Call(func=Name(id='spam', ctx=Load(), "
                   "lineno=1, col_offset=0), args=[Name(id='eggs', ctx=Load(), "
                   "lineno=1, col_offset=5), Str(s='and cheese', lineno=1, "
                   "col_offset=11)], keywords=[], starargs=None, kwargs=None, "
                   "lineno=1, col_offset=0), lineno=1, col_offset=0)])"
               )
       
    1:     def test_copy_location(self):
    1:         src = ast.parse('1 + 1', mode='eval')
    1:         src.body.right = ast.copy_location(ast.Num(2), src.body.right)
    1:         self.assertEqual(ast.dump(src, include_attributes=True),
    1:             'Expression(body=BinOp(left=Num(n=1, lineno=1, col_offset=0), '
                   'op=Add(), right=Num(n=2, lineno=1, col_offset=4), lineno=1, '
                   'col_offset=0))'
               )
       
    1:     def test_fix_missing_locations(self):
    1:         src = ast.parse('write("spam")')
    1:         src.body.append(ast.Expr(ast.Call(ast.Name('spam', ast.Load()),
    1:                                           [ast.Str('eggs')], [], None, None)))
    1:         self.assertEqual(src, ast.fix_missing_locations(src))
    1:         self.assertEqual(ast.dump(src, include_attributes=True),
    1:             "Module(body=[Expr(value=Call(func=Name(id='write', ctx=Load(), "
                   "lineno=1, col_offset=0), args=[Str(s='spam', lineno=1, "
                   "col_offset=6)], keywords=[], starargs=None, kwargs=None, "
                   "lineno=1, col_offset=0), lineno=1, col_offset=0), "
                   "Expr(value=Call(func=Name(id='spam', ctx=Load(), lineno=1, "
                   "col_offset=0), args=[Str(s='eggs', lineno=1, col_offset=0)], "
                   "keywords=[], starargs=None, kwargs=None, lineno=1, "
                   "col_offset=0), lineno=1, col_offset=0)])"
               )
       
    1:     def test_increment_lineno(self):
    1:         src = ast.parse('1 + 1', mode='eval')
    1:         self.assertEqual(ast.increment_lineno(src, n=3), src)
    1:         self.assertEqual(ast.dump(src, include_attributes=True),
    1:             'Expression(body=BinOp(left=Num(n=1, lineno=4, col_offset=0), '
                   'op=Add(), right=Num(n=1, lineno=4, col_offset=4), lineno=4, '
                   'col_offset=0))'
               )
               # issue10869: do not increment lineno of root twice
    1:         src = ast.parse('1 + 1', mode='eval')
    1:         self.assertEqual(ast.increment_lineno(src.body, n=3), src.body)
    1:         self.assertEqual(ast.dump(src, include_attributes=True),
    1:             'Expression(body=BinOp(left=Num(n=1, lineno=4, col_offset=0), '
                   'op=Add(), right=Num(n=1, lineno=4, col_offset=4), lineno=4, '
                   'col_offset=0))'
               )
       
    1:     def test_iter_fields(self):
    1:         node = ast.parse('foo()', mode='eval')
    1:         d = dict(ast.iter_fields(node.body))
    1:         self.assertEqual(d.pop('func').id, 'foo')
    1:         self.assertEqual(d, {'keywords': [], 'kwargs': None,
    1:                              'args': [], 'starargs': None})
       
    1:     def test_iter_child_nodes(self):
    1:         node = ast.parse("spam(23, 42, eggs='leek')", mode='eval')
    1:         self.assertEqual(len(list(ast.iter_child_nodes(node.body))), 4)
    1:         iterator = ast.iter_child_nodes(node.body)
    1:         self.assertEqual(next(iterator).id, 'spam')
    1:         self.assertEqual(next(iterator).n, 23)
    1:         self.assertEqual(next(iterator).n, 42)
    1:         self.assertEqual(ast.dump(next(iterator)),
    1:             "keyword(arg='eggs', value=Str(s='leek'))"
               )
       
    1:     def test_get_docstring(self):
    1:         node = ast.parse('def foo():\n  """line one\n  line two"""')
    1:         self.assertEqual(ast.get_docstring(node.body[0]),
    1:                          'line one\nline two')
       
    1:     def test_literal_eval(self):
    1:         self.assertEqual(ast.literal_eval('[1, 2, 3]'), [1, 2, 3])
    1:         self.assertEqual(ast.literal_eval('{"foo": 42}'), {"foo": 42})
    1:         self.assertEqual(ast.literal_eval('(True, False, None)'), (True, False, None))
    1:         self.assertRaises(ValueError, ast.literal_eval, 'foo()')
       
    1:     def test_literal_eval_issue4907(self):
    1:         self.assertEqual(ast.literal_eval('2j'), 2j)
    1:         self.assertEqual(ast.literal_eval('10 + 2j'), 10 + 2j)
    1:         self.assertEqual(ast.literal_eval('1.5 - 2j'), 1.5 - 2j)
    1:         self.assertRaises(ValueError, ast.literal_eval, '2 + (3 + 4j)')
       
       
    1: def test_main():
    1:     with test_support.check_py3k_warnings(("backquote not supported",
    1:                                              SyntaxWarning)):
    1:         test_support.run_unittest(AST_Tests, ASTHelpers_Test)
       
    1: def main():
    1:     if __name__ != '__main__':
    1:         return
>>>>>>     if sys.argv[1:] == ['-g']:
>>>>>>         for statements, kind in ((exec_tests, "exec"), (single_tests, "single"),
>>>>>>                                  (eval_tests, "eval")):
>>>>>>             print kind+"_results = ["
>>>>>>             for s in statements:
>>>>>>                 print repr(to_tuple(compile(s, "?", kind, 0x400)))+","
>>>>>>             print "]"
>>>>>>         print "main()"
>>>>>>         raise SystemExit
>>>>>>     test_main()
       
       #### EVERYTHING BELOW IS GENERATED #####
       exec_results = [
    1: ('Module', [('Expr', (1, 0), ('Name', (1, 0), 'None', ('Load',)))]),
    1: ('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], None, None, []), [('Pass', (1, 9))], [])]),
    1: ('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [('Name', (1, 6), 'a', ('Param',))], None, None, []), [('Pass', (1, 10))], [])]),
    1: ('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [('Name', (1, 6), 'a', ('Param',))], None, None, [('Num', (1, 8), 0)]), [('Pass', (1, 12))], [])]),
    1: ('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], 'args', None, []), [('Pass', (1, 14))], [])]),
    1: ('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], None, 'kwargs', []), [('Pass', (1, 17))], [])]),
    1: ('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [('Name', (1, 6), 'a', ('Param',)), ('Name', (1, 9), 'b', ('Param',)), ('Name', (1, 14), 'c', ('Param',)), ('Name', (1, 22), 'd', ('Param',)), ('Name', (1, 28), 'e', ('Param',))], 'args', 'kwargs', [('Num', (1, 11), 1), ('Name', (1, 16), 'None', ('Load',)), ('List', (1, 24), [], ('Load',)), ('Dict', (1, 30), [], [])]), [('Pass', (1, 52))], [])]),
    1: ('Module', [('ClassDef', (1, 0), 'C', [], [('Pass', (1, 8))], [])]),
    1: ('Module', [('ClassDef', (1, 0), 'C', [('Name', (1, 8), 'object', ('Load',))], [('Pass', (1, 17))], [])]),
    1: ('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], None, None, []), [('Return', (1, 8), ('Num', (1, 15), 1))], [])]),
    1: ('Module', [('Delete', (1, 0), [('Name', (1, 4), 'v', ('Del',))])]),
    1: ('Module', [('Assign', (1, 0), [('Name', (1, 0), 'v', ('Store',))], ('Num', (1, 4), 1))]),
    1: ('Module', [('AugAssign', (1, 0), ('Name', (1, 0), 'v', ('Store',)), ('Add',), ('Num', (1, 5), 1))]),
    1: ('Module', [('Print', (1, 0), ('Name', (1, 8), 'f', ('Load',)), [('Num', (1, 11), 1)], False)]),
    1: ('Module', [('For', (1, 0), ('Name', (1, 4), 'v', ('Store',)), ('Name', (1, 9), 'v', ('Load',)), [('Pass', (1, 11))], [])]),
    1: ('Module', [('While', (1, 0), ('Name', (1, 6), 'v', ('Load',)), [('Pass', (1, 8))], [])]),
    1: ('Module', [('If', (1, 0), ('Name', (1, 3), 'v', ('Load',)), [('Pass', (1, 5))], [])]),
    1: ('Module', [('Raise', (1, 0), ('Name', (1, 6), 'Exception', ('Load',)), ('Str', (1, 17), 'string'), None)]),
    1: ('Module', [('TryExcept', (1, 0), [('Pass', (2, 2))], [('ExceptHandler', (3, 0), ('Name', (3, 7), 'Exception', ('Load',)), None, [('Pass', (4, 2))])], [])]),
    1: ('Module', [('TryFinally', (1, 0), [('Pass', (2, 2))], [('Pass', (4, 2))])]),
    1: ('Module', [('Assert', (1, 0), ('Name', (1, 7), 'v', ('Load',)), None)]),
    1: ('Module', [('Import', (1, 0), [('alias', 'sys', None)])]),
    1: ('Module', [('ImportFrom', (1, 0), 'sys', [('alias', 'v', None)], 0)]),
    1: ('Module', [('Exec', (1, 0), ('Str', (1, 5), 'v'), None, None)]),
    1: ('Module', [('Global', (1, 0), ['v'])]),
    1: ('Module', [('Expr', (1, 0), ('Num', (1, 0), 1))]),
    1: ('Module', [('Pass', (1, 0))]),
    1: ('Module', [('Break', (1, 0))]),
    1: ('Module', [('Continue', (1, 0))]),
    1: ('Module', [('For', (1, 0), ('Tuple', (1, 4), [('Name', (1, 4), 'a', ('Store',)), ('Name', (1, 6), 'b', ('Store',))], ('Store',)), ('Name', (1, 11), 'c', ('Load',)), [('Pass', (1, 14))], [])]),
    1: ('Module', [('Expr', (1, 0), ('ListComp', (1, 1), ('Tuple', (1, 2), [('Name', (1, 2), 'a', ('Load',)), ('Name', (1, 4), 'b', ('Load',))], ('Load',)), [('comprehension', ('Tuple', (1, 11), [('Name', (1, 11), 'a', ('Store',)), ('Name', (1, 13), 'b', ('Store',))], ('Store',)), ('Name', (1, 18), 'c', ('Load',)), [])]))]),
    1: ('Module', [('Expr', (1, 0), ('GeneratorExp', (1, 1), ('Tuple', (1, 2), [('Name', (1, 2), 'a', ('Load',)), ('Name', (1, 4), 'b', ('Load',))], ('Load',)), [('comprehension', ('Tuple', (1, 11), [('Name', (1, 11), 'a', ('Store',)), ('Name', (1, 13), 'b', ('Store',))], ('Store',)), ('Name', (1, 18), 'c', ('Load',)), [])]))]),
    1: ('Module', [('Expr', (1, 0), ('GeneratorExp', (1, 1), ('Tuple', (1, 2), [('Name', (1, 2), 'a', ('Load',)), ('Name', (1, 4), 'b', ('Load',))], ('Load',)), [('comprehension', ('Tuple', (1, 12), [('Name', (1, 12), 'a', ('Store',)), ('Name', (1, 14), 'b', ('Store',))], ('Store',)), ('Name', (1, 20), 'c', ('Load',)), [])]))]),
    1: ('Module', [('Expr', (1, 0), ('GeneratorExp', (2, 4), ('Tuple', (3, 4), [('Name', (3, 4), 'Aa', ('Load',)), ('Name', (5, 7), 'Bb', ('Load',))], ('Load',)), [('comprehension', ('Tuple', (8, 4), [('Name', (8, 4), 'Aa', ('Store',)), ('Name', (10, 4), 'Bb', ('Store',))], ('Store',)), ('Name', (10, 10), 'Cc', ('Load',)), [])]))]),
    1: ('Module', [('Expr', (1, 0), ('DictComp', (1, 1), ('Name', (1, 1), 'a', ('Load',)), ('Name', (1, 5), 'b', ('Load',)), [('comprehension', ('Name', (1, 11), 'w', ('Store',)), ('Name', (1, 16), 'x', ('Load',)), []), ('comprehension', ('Name', (1, 22), 'm', ('Store',)), ('Name', (1, 27), 'p', ('Load',)), [('Name', (1, 32), 'g', ('Load',))])]))]),
    1: ('Module', [('Expr', (1, 0), ('DictComp', (1, 1), ('Name', (1, 1), 'a', ('Load',)), ('Name', (1, 5), 'b', ('Load',)), [('comprehension', ('Tuple', (1, 11), [('Name', (1, 11), 'v', ('Store',)), ('Name', (1, 13), 'w', ('Store',))], ('Store',)), ('Name', (1, 18), 'x', ('Load',)), [])]))]),
    1: ('Module', [('Expr', (1, 0), ('SetComp', (1, 1), ('Name', (1, 1), 'r', ('Load',)), [('comprehension', ('Name', (1, 7), 'l', ('Store',)), ('Name', (1, 12), 'x', ('Load',)), [('Name', (1, 17), 'g', ('Load',))])]))]),
    1: ('Module', [('Expr', (1, 0), ('SetComp', (1, 1), ('Name', (1, 1), 'r', ('Load',)), [('comprehension', ('Tuple', (1, 7), [('Name', (1, 7), 'l', ('Store',)), ('Name', (1, 9), 'm', ('Store',))], ('Store',)), ('Name', (1, 14), 'x', ('Load',)), [])]))]),
       ]
       single_results = [
    1: ('Interactive', [('Expr', (1, 0), ('BinOp', (1, 0), ('Num', (1, 0), 1), ('Add',), ('Num', (1, 2), 2)))]),
       ]
       eval_results = [
    1: ('Expression', ('Name', (1, 0), 'None', ('Load',))),
    1: ('Expression', ('BoolOp', (1, 0), ('And',), [('Name', (1, 0), 'a', ('Load',)), ('Name', (1, 6), 'b', ('Load',))])),
    1: ('Expression', ('BinOp', (1, 0), ('Name', (1, 0), 'a', ('Load',)), ('Add',), ('Name', (1, 4), 'b', ('Load',)))),
    1: ('Expression', ('UnaryOp', (1, 0), ('Not',), ('Name', (1, 4), 'v', ('Load',)))),
    1: ('Expression', ('Lambda', (1, 0), ('arguments', [], None, None, []), ('Name', (1, 7), 'None', ('Load',)))),
    1: ('Expression', ('Dict', (1, 0), [('Num', (1, 2), 1)], [('Num', (1, 4), 2)])),
    1: ('Expression', ('Dict', (1, 0), [], [])),
    1: ('Expression', ('Set', (1, 0), [('Name', (1, 1), 'None', ('Load',))])),
    1: ('Expression', ('Dict', (1, 0), [('Num', (2, 6), 1)], [('Num', (4, 10), 2)])),
    1: ('Expression', ('ListComp', (1, 1), ('Name', (1, 1), 'a', ('Load',)), [('comprehension', ('Name', (1, 7), 'b', ('Store',)), ('Name', (1, 12), 'c', ('Load',)), [('Name', (1, 17), 'd', ('Load',))])])),
    1: ('Expression', ('GeneratorExp', (1, 1), ('Name', (1, 1), 'a', ('Load',)), [('comprehension', ('Name', (1, 7), 'b', ('Store',)), ('Name', (1, 12), 'c', ('Load',)), [('Name', (1, 17), 'd', ('Load',))])])),
    1: ('Expression', ('Compare', (1, 0), ('Num', (1, 0), 1), [('Lt',), ('Lt',)], [('Num', (1, 4), 2), ('Num', (1, 8), 3)])),
    1: ('Expression', ('Call', (1, 0), ('Name', (1, 0), 'f', ('Load',)), [('Num', (1, 2), 1), ('Num', (1, 4), 2)], [('keyword', 'c', ('Num', (1, 8), 3))], ('Name', (1, 11), 'd', ('Load',)), ('Name', (1, 15), 'e', ('Load',)))),
    1: ('Expression', ('Repr', (1, 0), ('Name', (1, 1), 'v', ('Load',)))),
    1: ('Expression', ('Num', (1, 0), 10L)),
    1: ('Expression', ('Str', (1, 0), 'string')),
    1: ('Expression', ('Attribute', (1, 0), ('Name', (1, 0), 'a', ('Load',)), 'b', ('Load',))),
    1: ('Expression', ('Subscript', (1, 0), ('Name', (1, 0), 'a', ('Load',)), ('Slice', ('Name', (1, 2), 'b', ('Load',)), ('Name', (1, 4), 'c', ('Load',)), None), ('Load',))),
    1: ('Expression', ('Name', (1, 0), 'v', ('Load',))),
    1: ('Expression', ('List', (1, 0), [('Num', (1, 1), 1), ('Num', (1, 3), 2), ('Num', (1, 5), 3)], ('Load',))),
    1: ('Expression', ('List', (1, 0), [], ('Load',))),
    1: ('Expression', ('Tuple', (1, 0), [('Num', (1, 0), 1), ('Num', (1, 2), 2), ('Num', (1, 4), 3)], ('Load',))),
    1: ('Expression', ('Tuple', (1, 1), [('Num', (1, 1), 1), ('Num', (1, 3), 2), ('Num', (1, 5), 3)], ('Load',))),
    1: ('Expression', ('Tuple', (1, 0), [], ('Load',))),
    1: ('Expression', ('Call', (1, 0), ('Attribute', (1, 0), ('Attribute', (1, 0), ('Attribute', (1, 0), ('Name', (1, 0), 'a', ('Load',)), 'b', ('Load',)), 'c', ('Load',)), 'd', ('Load',)), [('Subscript', (1, 8), ('Attribute', (1, 8), ('Name', (1, 8), 'a', ('Load',)), 'b', ('Load',)), ('Slice', ('Num', (1, 12), 1), ('Num', (1, 14), 2), None), ('Load',))], [], None, None)),
       ]
    1: main()
