    1: import unittest
       
    1: from unittest.test.support import LoggingResult
       
       
    2: class Test_FunctionTestCase(unittest.TestCase):
       
           # "Return the number of tests represented by the this test object. For
           # TestCase instances, this will always be 1"
    1:     def test_countTestCases(self):
    1:         test = unittest.FunctionTestCase(lambda: None)
       
    1:         self.assertEqual(test.countTestCases(), 1)
       
           # "When a setUp() method is defined, the test runner will run that method
           # prior to each test. Likewise, if a tearDown() method is defined, the
           # test runner will invoke that method after each test. In the example,
           # setUp() was used to create a fresh sequence for each test."
           #
           # Make sure the proper call order is maintained, even if setUp() raises
           # an exception.
    1:     def test_run_call_order__error_in_setUp(self):
    1:         events = []
    1:         result = LoggingResult(events)
       
    1:         def setUp():
    1:             events.append('setUp')
    1:             raise RuntimeError('raised by setUp')
       
    1:         def test():
>>>>>>             events.append('test')
       
    1:         def tearDown():
>>>>>>             events.append('tearDown')
       
    1:         expected = ['startTest', 'setUp', 'addError', 'stopTest']
    1:         unittest.FunctionTestCase(test, setUp, tearDown).run(result)
    1:         self.assertEqual(events, expected)
       
           # "When a setUp() method is defined, the test runner will run that method
           # prior to each test. Likewise, if a tearDown() method is defined, the
           # test runner will invoke that method after each test. In the example,
           # setUp() was used to create a fresh sequence for each test."
           #
           # Make sure the proper call order is maintained, even if the test raises
           # an error (as opposed to a failure).
    1:     def test_run_call_order__error_in_test(self):
    1:         events = []
    1:         result = LoggingResult(events)
       
    1:         def setUp():
    1:             events.append('setUp')
       
    1:         def test():
    1:             events.append('test')
    1:             raise RuntimeError('raised by test')
       
    1:         def tearDown():
    1:             events.append('tearDown')
       
    1:         expected = ['startTest', 'setUp', 'test', 'addError', 'tearDown',
    1:                     'stopTest']
    1:         unittest.FunctionTestCase(test, setUp, tearDown).run(result)
    1:         self.assertEqual(events, expected)
       
           # "When a setUp() method is defined, the test runner will run that method
           # prior to each test. Likewise, if a tearDown() method is defined, the
           # test runner will invoke that method after each test. In the example,
           # setUp() was used to create a fresh sequence for each test."
           #
           # Make sure the proper call order is maintained, even if the test signals
           # a failure (as opposed to an error).
    1:     def test_run_call_order__failure_in_test(self):
    1:         events = []
    1:         result = LoggingResult(events)
       
    1:         def setUp():
    1:             events.append('setUp')
       
    1:         def test():
    1:             events.append('test')
    1:             self.fail('raised by test')
       
    1:         def tearDown():
    1:             events.append('tearDown')
       
    1:         expected = ['startTest', 'setUp', 'test', 'addFailure', 'tearDown',
    1:                     'stopTest']
    1:         unittest.FunctionTestCase(test, setUp, tearDown).run(result)
    1:         self.assertEqual(events, expected)
       
           # "When a setUp() method is defined, the test runner will run that method
           # prior to each test. Likewise, if a tearDown() method is defined, the
           # test runner will invoke that method after each test. In the example,
           # setUp() was used to create a fresh sequence for each test."
           #
           # Make sure the proper call order is maintained, even if tearDown() raises
           # an exception.
    1:     def test_run_call_order__error_in_tearDown(self):
    1:         events = []
    1:         result = LoggingResult(events)
       
    1:         def setUp():
    1:             events.append('setUp')
       
    1:         def test():
    1:             events.append('test')
       
    1:         def tearDown():
    1:             events.append('tearDown')
    1:             raise RuntimeError('raised by tearDown')
       
    1:         expected = ['startTest', 'setUp', 'test', 'tearDown', 'addError',
    1:                     'stopTest']
    1:         unittest.FunctionTestCase(test, setUp, tearDown).run(result)
    1:         self.assertEqual(events, expected)
       
           # "Return a string identifying the specific test case."
           #
           # Because of the vague nature of the docs, I'm not going to lock this
           # test down too much. Really all that can be asserted is that the id()
           # will be a string (either 8-byte or unicode -- again, because the docs
           # just say "string")
    1:     def test_id(self):
    1:         test = unittest.FunctionTestCase(lambda: None)
       
    1:         self.assertIsInstance(test.id(), basestring)
       
           # "Returns a one-line description of the test, or None if no description
           # has been provided. The default implementation of this method returns
           # the first line of the test method's docstring, if available, or None."
    1:     def test_shortDescription__no_docstring(self):
    1:         test = unittest.FunctionTestCase(lambda: None)
       
    1:         self.assertEqual(test.shortDescription(), None)
       
           # "Returns a one-line description of the test, or None if no description
           # has been provided. The default implementation of this method returns
           # the first line of the test method's docstring, if available, or None."
    1:     def test_shortDescription__singleline_docstring(self):
    1:         desc = "this tests foo"
    1:         test = unittest.FunctionTestCase(lambda: None, description=desc)
       
    1:         self.assertEqual(test.shortDescription(), "this tests foo")
       
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
