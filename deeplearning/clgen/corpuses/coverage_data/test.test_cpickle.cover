    1: import cPickle
    1: import cStringIO
    1: import io
    1: import functools
    1: import unittest
    1: from test.pickletester import (AbstractUnpickleTests,
                                      AbstractPickleTests,
                                      AbstractPickleModuleTests,
                                      AbstractPicklerUnpicklerObjectTests,
                                      BigmemPickleTests)
    1: from test import test_support
       
    2: class cStringIOMixin:
    1:     output = input = cStringIO.StringIO
       
    1:     def close(self, f):
 3906:         pass
       
    2: class BytesIOMixin:
    1:     output = input = io.BytesIO
       
    1:     def close(self, f):
 2560:         pass
       
    2: class FileIOMixin:
       
    1:     def output(self):
  803:         return open(test_support.TESTFN, 'wb+')
       
    1:     def input(self, data):
 1757:         f = open(test_support.TESTFN, 'wb+')
 1757:         try:
 1757:             f.write(data)
 1757:             f.seek(0)
 1757:             return f
>>>>>>         except:
>>>>>>             f.close()
>>>>>>             raise
       
    1:     def close(self, f):
 2560:         f.close()
 2560:         test_support.unlink(test_support.TESTFN)
       
       
    2: class cPickleTests(AbstractUnpickleTests, AbstractPickleTests,
    1:                    AbstractPickleModuleTests):
       
    1:     def setUp(self):
   85:         self.dumps = cPickle.dumps
   85:         self.loads = cPickle.loads
       
    1:     error = cPickle.BadPickleGet
    1:     module = cPickle
    1:     bad_stack_errors = (cPickle.UnpicklingError,)
    1:     bad_mark_errors = (EOFError,)
    1:     truncated_errors = (cPickle.UnpicklingError, EOFError,
    1:                         AttributeError, ValueError)
       
    2: class cPickleUnpicklerTests(AbstractUnpickleTests):
       
    1:     def loads(self, buf):
  507:         f = self.input(buf)
  507:         try:
  507:             p = cPickle.Unpickler(f)
  507:             return p.load()
               finally:
  507:             self.close(f)
       
    1:     error = cPickle.BadPickleGet
    1:     bad_stack_errors = (cPickle.UnpicklingError,)
    1:     bad_mark_errors = (EOFError,)
    1:     truncated_errors = (cPickle.UnpicklingError, EOFError,
    1:                         AttributeError, ValueError)
       
    2: class cStringIOCUnpicklerTests(cStringIOMixin, cPickleUnpicklerTests):
    1:     pass
       
    2: class BytesIOCUnpicklerTests(BytesIOMixin, cPickleUnpicklerTests):
    1:     pass
       
    2: class FileIOCUnpicklerTests(FileIOMixin, cPickleUnpicklerTests):
    1:     pass
       
       
    2: class cPicklePicklerTests(AbstractPickleTests):
       
    1:     def dumps(self, arg, proto=0):
 2409:         f = self.output()
 2409:         try:
 2409:             p = cPickle.Pickler(f, proto)
 2409:             p.dump(arg)
 2391:             f.seek(0)
 2391:             return f.read()
               finally:
 2409:             self.close(f)
       
    1:     def loads(self, buf):
 2382:         f = self.input(buf)
 2382:         try:
 2382:             p = cPickle.Unpickler(f)
 2382:             return p.load()
               finally:
 2382:             self.close(f)
       
    2: class cStringIOCPicklerTests(cStringIOMixin, cPicklePicklerTests):
    1:     pass
       
    2: class BytesIOCPicklerTests(BytesIOMixin, cPicklePicklerTests):
    1:     pass
       
    2: class FileIOCPicklerTests(FileIOMixin, cPicklePicklerTests):
    1:     pass
       
       
    2: class cPickleListPicklerTests(AbstractPickleTests):
       
    1:     def dumps(self, arg, proto=0):
 2409:         p = cPickle.Pickler(proto)
 2409:         p.dump(arg)
 2391:         return p.getvalue()
       
    1:     def loads(self, *args):
 2382:         f = self.input(args[0])
 2382:         try:
 2382:             p = cPickle.Unpickler(f)
 2382:             return p.load()
               finally:
 2382:             self.close(f)
       
    1:     error = cPickle.BadPickleGet
       
    2: class cStringIOCPicklerListTests(cStringIOMixin, cPickleListPicklerTests):
    1:     pass
       
    2: class BytesIOCPicklerListTests(BytesIOMixin, cPickleListPicklerTests):
    1:     pass
       
    2: class FileIOCPicklerListTests(FileIOMixin, cPickleListPicklerTests):
    1:     pass
       
       
    2: class cPickleFastPicklerTests(AbstractPickleTests):
       
    1:     def dumps(self, arg, proto=0):
  678:         f = self.output()
  678:         try:
  678:             p = cPickle.Pickler(f, proto)
  678:             p.fast = 1
  678:             p.dump(arg)
  672:             f.seek(0)
  672:             return f.read()
               finally:
  677:             self.close(f)
       
    1:     def loads(self, *args):
  669:         f = self.input(args[0])
  669:         try:
  669:             p = cPickle.Unpickler(f)
  669:             return p.load()
               finally:
  669:             self.close(f)
       
    1:     def test_nonrecursive_deep(self):
               # If it's not cyclic, it should pickle OK even if the nesting
               # depth exceeds PY_CPICKLE_FAST_LIMIT.  That happens to be
               # 50 today.  Jack Jansen reported stack overflow on Mac OS 9
               # at 64.
    1:         a = []
   61:         for i in range(60):
   60:             a = [a]
    1:         b = self.loads(self.dumps(a))
    1:         self.assertEqual(a, b)
       
  155: for name in dir(AbstractPickleTests):
  154:     if name.startswith('test_recursive_'):
   17:         func = getattr(AbstractPickleTests, name)
   17:         if '_subclass' in name and '_and_inst' not in name:
    3:             assert_args = RuntimeError, 'maximum recursion depth exceeded'
               else:
   14:             assert_args = ValueError, "can't pickle cyclic objects"
   17:         def wrapper(self, func=func, assert_args=assert_args):
    6:             with self.assertRaisesRegexp(*assert_args):
    6:                 func(self)
   17:         functools.update_wrapper(wrapper, func)
   17:         setattr(cPickleFastPicklerTests, name, wrapper)
       
    2: class cStringIOCPicklerFastTests(cStringIOMixin, cPickleFastPicklerTests):
    1:     pass
       
    2: class BytesIOCPicklerFastTests(BytesIOMixin, cPickleFastPicklerTests):
    1:     pass
       
    2: class FileIOCPicklerFastTests(FileIOMixin, cPickleFastPicklerTests):
    1:     pass
       
       
    2: class cPicklePicklerUnpicklerObjectTests(AbstractPicklerUnpicklerObjectTests):
       
    1:     pickler_class = cPickle.Pickler
    1:     unpickler_class = cPickle.Unpickler
       
    2: class cPickleBigmemPickleTests(BigmemPickleTests):
       
    1:     def dumps(self, arg, proto=0, fast=0):
               # Ignore fast
>>>>>>         return cPickle.dumps(arg, proto)
       
    1:     def loads(self, buf):
               # Ignore fast
>>>>>>         return cPickle.loads(buf)
       
       
    2: class Node(object):
    1:     pass
       
    2: class cPickleDeepRecursive(unittest.TestCase):
    1:     def test_issue2702(self):
               # This should raise a RecursionLimit but in some
               # platforms (FreeBSD, win32) sometimes raises KeyError instead,
               # or just silently terminates the interpreter (=crashes).
>>>>>>         nodes = [Node() for i in range(500)]
>>>>>>         for n in nodes:
>>>>>>             n.connections = list(nodes)
>>>>>>             n.connections.remove(n)
>>>>>>         self.assertRaises((AttributeError, RuntimeError), cPickle.dumps, n)
       
    1:     def test_issue3179(self):
               # Safe test, because I broke this case when fixing the
               # behaviour for the previous test.
>>>>>>         res=[]
>>>>>>         for x in range(1,2000):
>>>>>>             res.append(dict(doc=x, similar=[]))
>>>>>>         cPickle.dumps(res)
       
       
    1: def test_main():
    1:     test_support.run_unittest(
    1:         cPickleTests,
    1:         cStringIOCUnpicklerTests,
    1:         BytesIOCUnpicklerTests,
    1:         FileIOCUnpicklerTests,
    1:         cStringIOCPicklerTests,
    1:         BytesIOCPicklerTests,
    1:         FileIOCPicklerTests,
    1:         cStringIOCPicklerListTests,
    1:         BytesIOCPicklerListTests,
    1:         FileIOCPicklerListTests,
    1:         cStringIOCPicklerFastTests,
    1:         BytesIOCPicklerFastTests,
    1:         FileIOCPicklerFastTests,
    1:         cPickleDeepRecursive,
    1:         cPicklePicklerUnpicklerObjectTests,
    1:         cPickleBigmemPickleTests,
           )
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
