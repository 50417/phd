    1: from ctypes import *
    1: from ctypes.test import need_symbol
    1: import unittest
       
       # IMPORTANT INFO:
       #
       # Consider this call:
       #    func.restype = c_char_p
       #    func(c_char_p("123"))
       # It returns
       #    "123"
       #
       # WHY IS THIS SO?
       #
       # argument tuple (c_char_p("123"), ) is destroyed after the function
       # func is called, but NOT before the result is actually built.
       #
       # If the arglist would be destroyed BEFORE the result has been built,
       # the c_char_p("123") object would already have a zero refcount,
       # and the pointer passed to (and returned by) the function would
       # probably point to deallocated space.
       #
       # In this case, there would have to be an additional reference to the argument...
       
    1: import _ctypes_test
    1: testdll = CDLL(_ctypes_test.__file__)
       
       # Return machine address `a` as a (possibly long) non-negative integer.
       # Starting with Python 2.5, id(anything) is always non-negative, and
       # the ctypes addressof() inherits that via PyLong_FromVoidPtr().
    1: def positive_address(a):
    2:     if a >= 0:
    2:         return a
           # View the bits in `a` as unsigned instead.
>>>>>>     import struct
>>>>>>     num_bits = struct.calcsize("P") * 8 # num bits in native machine address
>>>>>>     a += 1L << num_bits
>>>>>>     assert a >= 0
>>>>>>     return a
       
    1: def c_wbuffer(init):
    2:     n = len(init) + 1
    2:     return (c_wchar * n)(*init)
       
    2: class CharPointersTestCase(unittest.TestCase):
       
    1:     def setUp(self):
    7:         func = testdll._testfunc_p_p
    7:         func.restype = c_long
    7:         func.argtypes = None
       
    1:     def test_paramflags(self):
               # function returns c_void_p result,
               # and has a required parameter named 'input'
    1:         prototype = CFUNCTYPE(c_void_p, c_void_p)
    1:         func = prototype(("_testfunc_p_p", testdll),
    1:                          ((1, "input"),))
       
    1:         try:
    1:             func()
    1:         except TypeError, details:
    1:             self.assertEqual(str(details), "required argument 'input' missing")
               else:
>>>>>>             self.fail("TypeError not raised")
       
    1:         self.assertEqual(func(None), None)
    1:         self.assertEqual(func(input=None), None)
       
       
    1:     def test_int_pointer_arg(self):
    1:         func = testdll._testfunc_p_p
    1:         func.restype = c_long
    1:         self.assertEqual(0, func(0))
       
    1:         ci = c_int(0)
       
    1:         func.argtypes = POINTER(c_int),
    1:         self.assertEqual(positive_address(addressof(ci)),
    1:                              positive_address(func(byref(ci))))
       
    1:         func.argtypes = c_char_p,
    1:         self.assertRaises(ArgumentError, func, byref(ci))
       
    1:         func.argtypes = POINTER(c_short),
    1:         self.assertRaises(ArgumentError, func, byref(ci))
       
    1:         func.argtypes = POINTER(c_double),
    1:         self.assertRaises(ArgumentError, func, byref(ci))
       
    1:     def test_POINTER_c_char_arg(self):
    1:         func = testdll._testfunc_p_p
    1:         func.restype = c_char_p
    1:         func.argtypes = POINTER(c_char),
       
    1:         self.assertEqual(None, func(None))
    1:         self.assertEqual("123", func("123"))
    1:         self.assertEqual(None, func(c_char_p(None)))
    1:         self.assertEqual("123", func(c_char_p("123")))
       
    1:         self.assertEqual("123", func(c_buffer("123")))
    1:         ca = c_char("a")
    1:         self.assertEqual("a", func(pointer(ca))[0])
    1:         self.assertEqual("a", func(byref(ca))[0])
       
    1:     def test_c_char_p_arg(self):
    1:         func = testdll._testfunc_p_p
    1:         func.restype = c_char_p
    1:         func.argtypes = c_char_p,
       
    1:         self.assertEqual(None, func(None))
    1:         self.assertEqual("123", func("123"))
    1:         self.assertEqual(None, func(c_char_p(None)))
    1:         self.assertEqual("123", func(c_char_p("123")))
       
    1:         self.assertEqual("123", func(c_buffer("123")))
    1:         ca = c_char("a")
    1:         self.assertEqual("a", func(pointer(ca))[0])
    1:         self.assertEqual("a", func(byref(ca))[0])
       
    1:     def test_c_void_p_arg(self):
    1:         func = testdll._testfunc_p_p
    1:         func.restype = c_char_p
    1:         func.argtypes = c_void_p,
       
    1:         self.assertEqual(None, func(None))
    1:         self.assertEqual("123", func("123"))
    1:         self.assertEqual("123", func(c_char_p("123")))
    1:         self.assertEqual(None, func(c_char_p(None)))
       
    1:         self.assertEqual("123", func(c_buffer("123")))
    1:         ca = c_char("a")
    1:         self.assertEqual("a", func(pointer(ca))[0])
    1:         self.assertEqual("a", func(byref(ca))[0])
       
    1:         func(byref(c_int()))
    1:         func(pointer(c_int()))
    1:         func((c_int * 3)())
       
    1:     @need_symbol('c_wchar_p')
           def test_c_void_p_arg_with_c_wchar_p(self):
    1:         func = testdll._testfunc_p_p
    1:         func.restype = c_wchar_p
    1:         func.argtypes = c_void_p,
       
    1:         self.assertEqual(None, func(c_wchar_p(None)))
    1:         self.assertEqual(u"123", func(c_wchar_p(u"123")))
       
    1:     def test_instance(self):
    1:         func = testdll._testfunc_p_p
    1:         func.restype = c_void_p
       
    2:         class X:
    1:             _as_parameter_ = None
       
    1:         func.argtypes = c_void_p,
    1:         self.assertEqual(None, func(X()))
       
    1:         func.argtypes = None
    1:         self.assertEqual(None, func(X()))
       
    2: @need_symbol('c_wchar')
    1: class WCharPointersTestCase(unittest.TestCase):
       
    1:     def setUp(self):
    2:         func = testdll._testfunc_p_p
    2:         func.restype = c_int
    2:         func.argtypes = None
       
       
    1:     def test_POINTER_c_wchar_arg(self):
    1:         func = testdll._testfunc_p_p
    1:         func.restype = c_wchar_p
    1:         func.argtypes = POINTER(c_wchar),
       
    1:         self.assertEqual(None, func(None))
    1:         self.assertEqual(u"123", func(u"123"))
    1:         self.assertEqual(None, func(c_wchar_p(None)))
    1:         self.assertEqual(u"123", func(c_wchar_p(u"123")))
       
    1:         self.assertEqual(u"123", func(c_wbuffer(u"123")))
    1:         ca = c_wchar("a")
    1:         self.assertEqual(u"a", func(pointer(ca))[0])
    1:         self.assertEqual(u"a", func(byref(ca))[0])
       
    1:     def test_c_wchar_p_arg(self):
    1:         func = testdll._testfunc_p_p
    1:         func.restype = c_wchar_p
    1:         func.argtypes = c_wchar_p,
       
    1:         c_wchar_p.from_param(u"123")
       
    1:         self.assertEqual(None, func(None))
    1:         self.assertEqual("123", func(u"123"))
    1:         self.assertEqual(None, func(c_wchar_p(None)))
    1:         self.assertEqual("123", func(c_wchar_p("123")))
       
               # XXX Currently, these raise TypeErrors, although they shouldn't:
    1:         self.assertEqual("123", func(c_wbuffer("123")))
    1:         ca = c_wchar("a")
    1:         self.assertEqual("a", func(pointer(ca))[0])
    1:         self.assertEqual("a", func(byref(ca))[0])
       
    2: class ArrayTest(unittest.TestCase):
    1:     def test(self):
    1:         func = testdll._testfunc_ai8
    1:         func.restype = POINTER(c_int)
    1:         func.argtypes = c_int * 8,
       
    1:         func((c_int * 8)(1, 2, 3, 4, 5, 6, 7, 8))
       
               # This did crash before:
       
    1:         def func(): pass
    1:         CFUNCTYPE(None, c_int * 3)(func)
       
       ################################################################
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
