    1: """Unit tests for numbers.py."""
       
    1: import math
    1: import unittest
    1: from numbers import Complex, Real, Rational, Integral
    1: from test import test_support
       
    2: class TestNumbers(unittest.TestCase):
    1:     def test_int(self):
    1:         self.assertTrue(issubclass(int, Integral))
    1:         self.assertTrue(issubclass(int, Complex))
       
    1:         self.assertEqual(7, int(7).real)
    1:         self.assertEqual(0, int(7).imag)
    1:         self.assertEqual(7, int(7).conjugate())
    1:         self.assertEqual(7, int(7).numerator)
    1:         self.assertEqual(1, int(7).denominator)
       
    1:     def test_long(self):
    1:         self.assertTrue(issubclass(long, Integral))
    1:         self.assertTrue(issubclass(long, Complex))
       
    1:         self.assertEqual(7, long(7).real)
    1:         self.assertEqual(0, long(7).imag)
    1:         self.assertEqual(7, long(7).conjugate())
    1:         self.assertEqual(7, long(7).numerator)
    1:         self.assertEqual(1, long(7).denominator)
       
    1:     def test_float(self):
    1:         self.assertFalse(issubclass(float, Rational))
    1:         self.assertTrue(issubclass(float, Real))
       
    1:         self.assertEqual(7.3, float(7.3).real)
    1:         self.assertEqual(0, float(7.3).imag)
    1:         self.assertEqual(7.3, float(7.3).conjugate())
       
    1:     def test_complex(self):
    1:         self.assertFalse(issubclass(complex, Real))
    1:         self.assertTrue(issubclass(complex, Complex))
       
    1:         c1, c2 = complex(3, 2), complex(4,1)
               # XXX: This is not ideal, but see the comment in math_trunc().
    1:         self.assertRaises(AttributeError, math.trunc, c1)
    1:         self.assertRaises(TypeError, float, c1)
    1:         self.assertRaises(TypeError, int, c1)
       
    1: def test_main():
    1:     test_support.run_unittest(TestNumbers)
       
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
