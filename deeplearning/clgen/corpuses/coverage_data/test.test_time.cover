    1: from test import test_support
    1: import time
    1: import unittest
    1: import sys
       
       
    2: class TimeTestCase(unittest.TestCase):
       
    1:     def setUp(self):
   15:         self.t = time.time()
       
    1:     def test_data_attributes(self):
    1:         time.altzone
    1:         time.daylight
    1:         time.timezone
    1:         time.tzname
       
    1:     def test_clock(self):
    1:         time.clock()
       
    1:     def test_conversions(self):
    1:         self.assertTrue(time.ctime(self.t)
    1:                      == time.asctime(time.localtime(self.t)))
    1:         self.assertTrue(long(time.mktime(time.localtime(self.t)))
    1:                      == long(self.t))
       
    1:     def test_sleep(self):
    1:         time.sleep(1.2)
       
    1:     def test_strftime(self):
    1:         tt = time.gmtime(self.t)
    1:         for directive in ('a', 'A', 'b', 'B', 'c', 'd', 'H', 'I',
                                 'j', 'm', 'M', 'p', 'S',
   23:                           'U', 'w', 'W', 'x', 'X', 'y', 'Y', 'Z', '%'):
   22:             format = ' %' + directive
   22:             try:
   22:                 time.strftime(format, tt)
>>>>>>             except ValueError:
>>>>>>                 self.fail('conversion specifier: %r failed.' % format)
       
               # Issue #10762: Guard against invalid/non-supported format string
               # so that Python don't crash (Windows crashes when the format string
               # input to [w]strftime is not kosher.
    1:         if sys.platform.startswith('win'):
>>>>>>             with self.assertRaises(ValueError):
>>>>>>                 time.strftime('%f')
       
    1:     def test_strftime_bounds_checking(self):
               # Make sure that strftime() checks the bounds of the various parts
               #of the time tuple (0 is valid for *all* values).
       
               # Check year [1900, max(int)]
    1:         self.assertRaises(ValueError, time.strftime, '',
    1:                             (1899, 1, 1, 0, 0, 0, 0, 1, -1))
    1:         if time.accept2dyear:
    1:             self.assertRaises(ValueError, time.strftime, '',
    1:                                 (-1, 1, 1, 0, 0, 0, 0, 1, -1))
    1:             self.assertRaises(ValueError, time.strftime, '',
    1:                                 (100, 1, 1, 0, 0, 0, 0, 1, -1))
               # Check month [1, 12] + zero support
    1:         self.assertRaises(ValueError, time.strftime, '',
    1:                             (1900, -1, 1, 0, 0, 0, 0, 1, -1))
    1:         self.assertRaises(ValueError, time.strftime, '',
    1:                             (1900, 13, 1, 0, 0, 0, 0, 1, -1))
               # Check day of month [1, 31] + zero support
    1:         self.assertRaises(ValueError, time.strftime, '',
    1:                             (1900, 1, -1, 0, 0, 0, 0, 1, -1))
    1:         self.assertRaises(ValueError, time.strftime, '',
    1:                             (1900, 1, 32, 0, 0, 0, 0, 1, -1))
               # Check hour [0, 23]
    1:         self.assertRaises(ValueError, time.strftime, '',
    1:                             (1900, 1, 1, -1, 0, 0, 0, 1, -1))
    1:         self.assertRaises(ValueError, time.strftime, '',
    1:                             (1900, 1, 1, 24, 0, 0, 0, 1, -1))
               # Check minute [0, 59]
    1:         self.assertRaises(ValueError, time.strftime, '',
    1:                             (1900, 1, 1, 0, -1, 0, 0, 1, -1))
    1:         self.assertRaises(ValueError, time.strftime, '',
    1:                             (1900, 1, 1, 0, 60, 0, 0, 1, -1))
               # Check second [0, 61]
    1:         self.assertRaises(ValueError, time.strftime, '',
    1:                             (1900, 1, 1, 0, 0, -1, 0, 1, -1))
               # C99 only requires allowing for one leap second, but Python's docs say
               # allow two leap seconds (0..61)
    1:         self.assertRaises(ValueError, time.strftime, '',
    1:                             (1900, 1, 1, 0, 0, 62, 0, 1, -1))
               # No check for upper-bound day of week;
               #  value forced into range by a ``% 7`` calculation.
               # Start check at -2 since gettmarg() increments value before taking
               #  modulo.
    1:         self.assertRaises(ValueError, time.strftime, '',
    1:                             (1900, 1, 1, 0, 0, 0, -2, 1, -1))
               # Check day of the year [1, 366] + zero support
    1:         self.assertRaises(ValueError, time.strftime, '',
    1:                             (1900, 1, 1, 0, 0, 0, 0, -1, -1))
    1:         self.assertRaises(ValueError, time.strftime, '',
    1:                             (1900, 1, 1, 0, 0, 0, 0, 367, -1))
       
    1:     def test_default_values_for_zero(self):
               # Make sure that using all zeros uses the proper default values.
               # No test for daylight savings since strftime() does not change output
               # based on its value.
    1:         expected = "2000 01 01 00 00 00 1 001"
    1:         result = time.strftime("%Y %m %d %H %M %S %w %j", (0,)*9)
    1:         self.assertEqual(expected, result)
       
    1:     def test_strptime(self):
               # Should be able to go round-trip from strftime to strptime without
               # raising an exception.
    1:         tt = time.gmtime(self.t)
    1:         for directive in ('a', 'A', 'b', 'B', 'c', 'd', 'H', 'I',
                                 'j', 'm', 'M', 'p', 'S',
   23:                           'U', 'w', 'W', 'x', 'X', 'y', 'Y', 'Z', '%'):
   22:             format = '%' + directive
   22:             strf_output = time.strftime(format, tt)
   22:             try:
   22:                 time.strptime(strf_output, format)
>>>>>>             except ValueError:
>>>>>>                 self.fail("conversion specifier %r failed with '%s' input." %
>>>>>>                           (format, strf_output))
       
    1:     def test_asctime(self):
    1:         time.asctime(time.gmtime(self.t))
    1:         self.assertRaises(TypeError, time.asctime, 0)
    1:         self.assertRaises(TypeError, time.asctime, ())
               # XXX: Posix compiant asctime should refuse to convert
               # year > 9999, but Linux implementation does not.
               # self.assertRaises(ValueError, time.asctime,
               #                  (12345, 1, 0, 0, 0, 0, 0, 0, 0))
               # XXX: For now, just make sure we don't have a crash:
    1:         try:
    1:             time.asctime((12345, 1, 1, 0, 0, 0, 0, 1, 0))
>>>>>>         except ValueError:
>>>>>>             pass
       
    1:     @unittest.skipIf(not hasattr(time, "tzset"),
    1:         "time module has no attribute tzset")
           def test_tzset(self):
       
    1:         from os import environ
       
               # Epoch time of midnight Dec 25th 2002. Never DST in northern
               # hemisphere.
    1:         xmas2002 = 1040774400.0
       
               # These formats are correct for 2002, and possibly future years
               # This format is the 'standard' as documented at:
               # http://www.opengroup.org/onlinepubs/007904975/basedefs/xbd_chap08.html
               # They are also documented in the tzset(3) man page on most Unix
               # systems.
    1:         eastern = 'EST+05EDT,M4.1.0,M10.5.0'
    1:         victoria = 'AEST-10AEDT-11,M10.5.0,M3.5.0'
    1:         utc='UTC+0'
       
    1:         org_TZ = environ.get('TZ',None)
    1:         try:
                   # Make sure we can switch to UTC time and results are correct
                   # Note that unknown timezones default to UTC.
                   # Note that altzone is undefined in UTC, as there is no DST
    1:             environ['TZ'] = eastern
    1:             time.tzset()
    1:             environ['TZ'] = utc
    1:             time.tzset()
    1:             self.assertEqual(
    1:                 time.gmtime(xmas2002), time.localtime(xmas2002)
                       )
    1:             self.assertEqual(time.daylight, 0)
    1:             self.assertEqual(time.timezone, 0)
    1:             self.assertEqual(time.localtime(xmas2002).tm_isdst, 0)
       
                   # Make sure we can switch to US/Eastern
    1:             environ['TZ'] = eastern
    1:             time.tzset()
    1:             self.assertNotEqual(time.gmtime(xmas2002), time.localtime(xmas2002))
    1:             self.assertEqual(time.tzname, ('EST', 'EDT'))
    1:             self.assertEqual(len(time.tzname), 2)
    1:             self.assertEqual(time.daylight, 1)
    1:             self.assertEqual(time.timezone, 18000)
    1:             self.assertEqual(time.altzone, 14400)
    1:             self.assertEqual(time.localtime(xmas2002).tm_isdst, 0)
    1:             self.assertEqual(len(time.tzname), 2)
       
                   # Now go to the southern hemisphere.
    1:             environ['TZ'] = victoria
    1:             time.tzset()
    1:             self.assertNotEqual(time.gmtime(xmas2002), time.localtime(xmas2002))
       
                   # Issue #11886: Australian Eastern Standard Time (UTC+10) is called
                   # "EST" (as Eastern Standard Time, UTC-5) instead of "AEST" on some
                   # operating systems (e.g. FreeBSD), which is wrong. See for example
                   # this bug: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=93810
    1:             self.assertIn(time.tzname[0], ('AEST' 'EST'), time.tzname[0])
    1:             self.assertTrue(time.tzname[1] == 'AEDT', str(time.tzname[1]))
    1:             self.assertEqual(len(time.tzname), 2)
    1:             self.assertEqual(time.daylight, 1)
    1:             self.assertEqual(time.timezone, -36000)
    1:             self.assertEqual(time.altzone, -39600)
    1:             self.assertEqual(time.localtime(xmas2002).tm_isdst, 1)
       
               finally:
                   # Repair TZ environment variable in case any other tests
                   # rely on it.
    1:             if org_TZ is not None:
>>>>>>                 environ['TZ'] = org_TZ
    1:             elif environ.has_key('TZ'):
    1:                 del environ['TZ']
    1:             time.tzset()
       
    1:     def test_insane_timestamps(self):
               # It's possible that some platform maps time_t to double,
               # and that this test will fail there.  This test should
               # exempt such platforms (provided they return reasonable
               # results!).
    4:         for func in time.ctime, time.gmtime, time.localtime:
    9:             for unreasonable in -1e200, 1e200:
    6:                 self.assertRaises(ValueError, func, unreasonable)
       
    1:     def test_ctime_without_arg(self):
               # Not sure how to check the values, since the clock could tick
               # at any time.  Make sure these are at least accepted and
               # don't raise errors.
    1:         time.ctime()
    1:         time.ctime(None)
       
    1:     def test_gmtime_without_arg(self):
    1:         gt0 = time.gmtime()
    1:         gt1 = time.gmtime(None)
    1:         t0 = time.mktime(gt0)
    1:         t1 = time.mktime(gt1)
    1:         self.assertTrue(0 <= (t1-t0) < 0.2)
       
    1:     def test_localtime_without_arg(self):
    1:         lt0 = time.localtime()
    1:         lt1 = time.localtime(None)
    1:         t0 = time.mktime(lt0)
    1:         t1 = time.mktime(lt1)
    1:         self.assertTrue(0 <= (t1-t0) < 0.2)
       
    1:     def test_mktime(self):
               # Issue #1726687
    5:         for t in (-2, -1, 0, 1):
    4:             try:
    4:                 tt = time.localtime(t)
>>>>>>             except (OverflowError, ValueError):
>>>>>>                 pass
                   else:
    4:                 self.assertEqual(time.mktime(tt), t)
       
       
    1: def test_main():
    1:     test_support.run_unittest(TimeTestCase)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
