       #
       # test_codecencodings_kr.py
       #   Codec encoding tests for ROK encodings.
       #
       
    1: from test import test_support
    1: from test import multibytecodec_support
    1: import unittest
       
    2: class Test_CP949(multibytecodec_support.TestBase, unittest.TestCase):
    1:     encoding = 'cp949'
    1:     tstring = multibytecodec_support.load_teststring('cp949')
           codectests = (
               # invalid bytes
    1:         ("abc\x80\x80\xc1\xc4", "strict",  None),
    1:         ("abc\xc8", "strict",  None),
    1:         ("abc\x80\x80\xc1\xc4", "replace", u"abc\ufffd\uc894"),
    1:         ("abc\x80\x80\xc1\xc4\xc8", "replace", u"abc\ufffd\uc894\ufffd"),
    1:         ("abc\x80\x80\xc1\xc4", "ignore",  u"abc\uc894"),
           )
       
    2: class Test_EUCKR(multibytecodec_support.TestBase, unittest.TestCase):
    1:     encoding = 'euc_kr'
    1:     tstring = multibytecodec_support.load_teststring('euc_kr')
           codectests = (
               # invalid bytes
    1:         ("abc\x80\x80\xc1\xc4", "strict",  None),
    1:         ("abc\xc8", "strict",  None),
    1:         ("abc\x80\x80\xc1\xc4", "replace", u"abc\ufffd\uc894"),
    1:         ("abc\x80\x80\xc1\xc4\xc8", "replace", u"abc\ufffd\uc894\ufffd"),
    1:         ("abc\x80\x80\xc1\xc4", "ignore",  u"abc\uc894"),
       
               # composed make-up sequence errors
    1:         ("\xa4\xd4", "strict", None),
    1:         ("\xa4\xd4\xa4", "strict", None),
    1:         ("\xa4\xd4\xa4\xb6", "strict", None),
    1:         ("\xa4\xd4\xa4\xb6\xa4", "strict", None),
    1:         ("\xa4\xd4\xa4\xb6\xa4\xd0", "strict", None),
    1:         ("\xa4\xd4\xa4\xb6\xa4\xd0\xa4", "strict", None),
    1:         ("\xa4\xd4\xa4\xb6\xa4\xd0\xa4\xd4", "strict", u"\uc4d4"),
    1:         ("\xa4\xd4\xa4\xb6\xa4\xd0\xa4\xd4x", "strict", u"\uc4d4x"),
    1:         ("a\xa4\xd4\xa4\xb6\xa4", "replace", u"a\ufffd"),
    1:         ("\xa4\xd4\xa3\xb6\xa4\xd0\xa4\xd4", "strict", None),
    1:         ("\xa4\xd4\xa4\xb6\xa3\xd0\xa4\xd4", "strict", None),
    1:         ("\xa4\xd4\xa4\xb6\xa4\xd0\xa3\xd4", "strict", None),
    1:         ("\xa4\xd4\xa4\xff\xa4\xd0\xa4\xd4", "replace", u"\ufffd"),
    1:         ("\xa4\xd4\xa4\xb6\xa4\xff\xa4\xd4", "replace", u"\ufffd"),
    1:         ("\xa4\xd4\xa4\xb6\xa4\xd0\xa4\xff", "replace", u"\ufffd"),
    1:         ("\xc1\xc4", "strict", u"\uc894"),
           )
       
    2: class Test_JOHAB(multibytecodec_support.TestBase, unittest.TestCase):
    1:     encoding = 'johab'
    1:     tstring = multibytecodec_support.load_teststring('johab')
           codectests = (
               # invalid bytes
    1:         ("abc\x80\x80\xc1\xc4", "strict",  None),
    1:         ("abc\xc8", "strict",  None),
    1:         ("abc\x80\x80\xc1\xc4", "replace", u"abc\ufffd\ucd27"),
    1:         ("abc\x80\x80\xc1\xc4\xc8", "replace", u"abc\ufffd\ucd27\ufffd"),
    1:         ("abc\x80\x80\xc1\xc4", "ignore",  u"abc\ucd27"),
           )
       
    1: def test_main():
    1:     test_support.run_unittest(__name__)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
