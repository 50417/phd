    1: """ Fixer for imports of itertools.(imap|ifilter|izip|ifilterfalse) """
       
       # Local imports
    1: from lib2to3 import fixer_base
    1: from lib2to3.fixer_util import BlankLine, syms, token
       
       
    2: class FixItertoolsImports(fixer_base.BaseFix):
    1:     BM_compatible = True
           PATTERN = """
                     import_from< 'from' 'itertools' 'import' imports=any >
    1:               """ %(locals())
       
    1:     def transform(self, node, results):
   19:         imports = results['imports']
   19:         if imports.type == syms.import_as_name or not imports.children:
    7:             children = [imports]
               else:
   12:             children = imports.children
   59:         for child in children[::2]:
   41:             if child.type == token.NAME:
   34:                 member = child.value
   34:                 name_node = child
    7:             elif child.type == token.STAR:
                       # Just leave the import as is.
    1:                 return
                   else:
    6:                 assert child.type == syms.import_as_name
    6:                 name_node = child.children[0]
   40:             member_name = name_node.value
   40:             if member_name in (u'imap', u'izip', u'ifilter'):
   20:                 child.value = None
   20:                 child.remove()
   20:             elif member_name in (u'ifilterfalse', u'izip_longest'):
    6:                 node.changed()
    6:                 name_node.value = (u'filterfalse' if member_name[1] == u'f'
    3:                                    else u'zip_longest')
       
               # Make sure the import statement is still sane
   18:         children = imports.children[:] or [imports]
   18:         remove_comma = True
   66:         for child in children:
   48:             if remove_comma and child.type == token.COMMA:
   13:                 child.remove()
                   else:
   35:                 remove_comma ^= True
       
   24:         while children and children[-1].type == token.COMMA:
    6:             children.pop().remove()
       
               # If there are no imports left, just get rid of the entire statement
   18:         if (not (imports.children or getattr(imports, 'value', None)) or
   14:             imports.parent is None):
    5:             p = node.prefix
    5:             node = BlankLine()
    5:             node.prefix = p
    5:             return node
