    1: """Tests for distutils.core."""
       
    1: import StringIO
    1: import distutils.core
    1: import os
    1: import shutil
    1: import sys
    1: import test.test_support
    1: from test.test_support import captured_stdout, run_unittest
    1: import unittest
    1: from distutils.tests import support
    1: from distutils import log
       
       # setup script that uses __file__
       setup_using___file__ = """\
       
       __file__
       
       from distutils.core import setup
       setup()
    1: """
       
       setup_prints_cwd = """\
       
       import os
       print os.getcwd()
       
       from distutils.core import setup
       setup()
    1: """
       
       
    2: class CoreTestCase(support.EnvironGuard, unittest.TestCase):
       
    1:     def setUp(self):
    3:         super(CoreTestCase, self).setUp()
    3:         self.old_stdout = sys.stdout
    3:         self.cleanup_testfn()
    3:         self.old_argv = sys.argv, sys.argv[:]
    3:         self.addCleanup(log.set_threshold, log._global_log.threshold)
       
    1:     def tearDown(self):
    3:         sys.stdout = self.old_stdout
    3:         self.cleanup_testfn()
    3:         sys.argv = self.old_argv[0]
    3:         sys.argv[:] = self.old_argv[1]
    3:         super(CoreTestCase, self).tearDown()
       
    1:     def cleanup_testfn(self):
    6:         path = test.test_support.TESTFN
    6:         if os.path.isfile(path):
    1:             os.remove(path)
    5:         elif os.path.isdir(path):
    1:             shutil.rmtree(path)
       
    1:     def write_setup(self, text, path=test.test_support.TESTFN):
    2:         f = open(path, "w")
    2:         try:
    2:             f.write(text)
               finally:
    2:             f.close()
    2:         return path
       
    1:     def test_run_setup_provides_file(self):
               # Make sure the script can use __file__; if that's missing, the test
               # setup.py script will raise NameError.
    1:         distutils.core.run_setup(
    1:             self.write_setup(setup_using___file__))
       
    1:     def test_run_setup_uses_current_dir(self):
               # This tests that the setup script is run with the current directory
               # as its own current directory; this was temporarily broken by a
               # previous patch when TESTFN did not use the current directory.
    1:         sys.stdout = StringIO.StringIO()
    1:         cwd = os.getcwd()
       
               # Create a directory and write the setup.py file there:
    1:         os.mkdir(test.test_support.TESTFN)
    1:         setup_py = os.path.join(test.test_support.TESTFN, "setup.py")
    1:         distutils.core.run_setup(
    1:             self.write_setup(setup_prints_cwd, path=setup_py))
       
    1:         output = sys.stdout.getvalue()
    1:         if output.endswith("\n"):
    1:             output = output[:-1]
    1:         self.assertEqual(cwd, output)
       
    1:     def test_debug_mode(self):
               # this covers the code called when DEBUG is set
    1:         sys.argv = ['setup.py', '--name']
    1:         with captured_stdout() as stdout:
    1:             distutils.core.setup(name='bar')
    1:         stdout.seek(0)
    1:         self.assertEqual(stdout.read(), 'bar\n')
       
    1:         distutils.core.DEBUG = True
    1:         try:
    1:             with captured_stdout() as stdout:
    1:                 distutils.core.setup(name='bar')
               finally:
    1:             distutils.core.DEBUG = False
    1:         stdout.seek(0)
    1:         wanted = "options (after parsing config files):\n"
    1:         self.assertEqual(stdout.readlines()[0], wanted)
       
    1: def test_suite():
    1:     return unittest.makeSuite(CoreTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     run_unittest(test_suite())
