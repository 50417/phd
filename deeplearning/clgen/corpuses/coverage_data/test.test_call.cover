    1: import unittest
    1: from test import test_support
       
       # The test cases here cover several paths through the function calling
       # code.  They depend on the METH_XXX flag that is used to define a C
       # function, which can't be verified from Python.  If the METH_XXX decl
       # for a C function changes, these tests may not cover the right paths.
       
    2: class CFunctionCalls(unittest.TestCase):
       
    1:     def test_varargs0(self):
    1:         self.assertRaises(TypeError, {}.has_key)
       
    1:     def test_varargs1(self):
    1:         with test_support.check_py3k_warnings():
    1:             {}.has_key(0)
       
    1:     def test_varargs2(self):
    1:         self.assertRaises(TypeError, {}.has_key, 0, 1)
       
    1:     def test_varargs0_ext(self):
    1:         try:
    1:             {}.has_key(*())
    1:         except TypeError:
    1:             pass
       
    1:     def test_varargs1_ext(self):
    1:         with test_support.check_py3k_warnings():
    1:             {}.has_key(*(0,))
       
    1:     def test_varargs2_ext(self):
    1:         try:
    1:             with test_support.check_py3k_warnings():
    1:                 {}.has_key(*(1, 2))
    1:         except TypeError:
    1:             pass
               else:
>>>>>>             raise RuntimeError
       
    1:     def test_varargs0_kw(self):
    1:         self.assertRaises(TypeError, {}.has_key, x=2)
       
    1:     def test_varargs1_kw(self):
    1:         self.assertRaises(TypeError, {}.has_key, x=2)
       
    1:     def test_varargs2_kw(self):
    1:         self.assertRaises(TypeError, {}.has_key, x=2, y=2)
       
    1:     def test_oldargs0_0(self):
    1:         {}.keys()
       
    1:     def test_oldargs0_1(self):
    1:         self.assertRaises(TypeError, {}.keys, 0)
       
    1:     def test_oldargs0_2(self):
    1:         self.assertRaises(TypeError, {}.keys, 0, 1)
       
    1:     def test_oldargs0_0_ext(self):
    1:         {}.keys(*())
       
    1:     def test_oldargs0_1_ext(self):
    1:         try:
    1:             {}.keys(*(0,))
    1:         except TypeError:
    1:             pass
               else:
>>>>>>             raise RuntimeError
       
    1:     def test_oldargs0_2_ext(self):
    1:         try:
    1:             {}.keys(*(1, 2))
    1:         except TypeError:
    1:             pass
               else:
>>>>>>             raise RuntimeError
       
    1:     def test_oldargs0_0_kw(self):
    1:         try:
    1:             {}.keys(x=2)
    1:         except TypeError:
    1:             pass
               else:
>>>>>>             raise RuntimeError
       
    1:     def test_oldargs0_1_kw(self):
    1:         self.assertRaises(TypeError, {}.keys, x=2)
       
    1:     def test_oldargs0_2_kw(self):
    1:         self.assertRaises(TypeError, {}.keys, x=2, y=2)
       
    1:     def test_oldargs1_0(self):
    1:         self.assertRaises(TypeError, [].count)
       
    1:     def test_oldargs1_1(self):
    1:         [].count(1)
       
    1:     def test_oldargs1_2(self):
    1:         self.assertRaises(TypeError, [].count, 1, 2)
       
    1:     def test_oldargs1_0_ext(self):
    1:         try:
    1:             [].count(*())
    1:         except TypeError:
    1:             pass
               else:
>>>>>>             raise RuntimeError
       
    1:     def test_oldargs1_1_ext(self):
    1:         [].count(*(1,))
       
    1:     def test_oldargs1_2_ext(self):
    1:         try:
    1:             [].count(*(1, 2))
    1:         except TypeError:
    1:             pass
               else:
>>>>>>             raise RuntimeError
       
    1:     def test_oldargs1_0_kw(self):
    1:         self.assertRaises(TypeError, [].count, x=2)
       
    1:     def test_oldargs1_1_kw(self):
    1:         self.assertRaises(TypeError, [].count, {}, x=2)
       
    1:     def test_oldargs1_2_kw(self):
    1:         self.assertRaises(TypeError, [].count, x=2, y=2)
       
       
    1: def test_main():
    1:     test_support.run_unittest(CFunctionCalls)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
