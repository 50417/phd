       """
       Create and delete FILES_PER_THREAD temp files (via tempfile.TemporaryFile)
       in each of NUM_THREADS threads, recording the number of successes and
       failures.  A failure is a bug in tempfile, and may be due to:
       
       + Trying to create more than one tempfile with the same name.
       + Trying to delete a tempfile that doesn't still exist.
       + Something we've never seen before.
       
       By default, NUM_THREADS == 20 and FILES_PER_THREAD == 50.  This is enough to
       create about 150 failures per run under Win98SE in 2.0, and runs pretty
       quickly. Guido reports needing to boost FILES_PER_THREAD to 500 before
       provoking a 2.0 failure under Linux.
    1: """
       
    1: NUM_THREADS = 20
    1: FILES_PER_THREAD = 50
       
    1: import tempfile
       
    1: from test.test_support import start_threads, run_unittest, import_module
    1: threading = import_module('threading')
    1: import unittest
    1: import StringIO
    1: from traceback import print_exc
       
    1: startEvent = threading.Event()
       
    2: class TempFileGreedy(threading.Thread):
    1:     error_count = 0
    1:     ok_count = 0
       
    1:     def run(self):
   20:         self.errors = StringIO.StringIO()
   20:         startEvent.wait()
 1009:         for i in range(FILES_PER_THREAD):
  995:             try:
 1000:                 f = tempfile.TemporaryFile("w+b")
  995:                 f.close()
>>>>>>             except:
>>>>>>                 self.error_count += 1
>>>>>>                 print_exc(file=self.errors)
                   else:
 1000:                 self.ok_count += 1
       
       
    2: class ThreadedTempFileTest(unittest.TestCase):
    1:     def test_main(self):
   21:         threads = [TempFileGreedy() for i in range(NUM_THREADS)]
    1:         with start_threads(threads, startEvent.set):
    1:             pass
   22:         ok = sum(t.ok_count for t in threads)
    1:         errors = [str(t.getName()) + str(t.errors.getvalue())
   21:                   for t in threads if t.error_count]
       
    1:         msg = "Errors: errors %d ok %d\n%s" % (len(errors), ok,
    1:             '\n'.join(errors))
    1:         self.assertEqual(errors, [], msg)
    1:         self.assertEqual(ok, NUM_THREADS * FILES_PER_THREAD)
       
    1: def test_main():
    1:     run_unittest(ThreadedTempFileTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
