       """ Python 'utf-8-sig' Codec
       This work similar to UTF-8 with the following changes:
       
       * On encoding/writing a UTF-8 encoded BOM will be prepended/written as the
         first three bytes.
       
       * On decoding/reading if the first three bytes are a UTF-8 encoded BOM, these
         bytes will be skipped.
    1: """
    1: import codecs
       
       ### Codec APIs
       
    1: def encode(input, errors='strict'):
  672:     return (codecs.BOM_UTF8 + codecs.utf_8_encode(input, errors)[0], len(input))
       
    1: def decode(input, errors='strict'):
    3:     prefix = 0
    3:     if input[:3] == codecs.BOM_UTF8:
    2:         input = input[3:]
    2:         prefix = 3
    3:     (output, consumed) = codecs.utf_8_decode(input, errors, True)
    3:     return (output, consumed+prefix)
       
    2: class IncrementalEncoder(codecs.IncrementalEncoder):
    1:     def __init__(self, errors='strict'):
   10:         codecs.IncrementalEncoder.__init__(self, errors)
   10:         self.first = 1
       
    1:     def encode(self, input, final=False):
   12:         if self.first:
    8:             self.first = 0
    8:             return codecs.BOM_UTF8 + codecs.utf_8_encode(input, self.errors)[0]
               else:
    4:             return codecs.utf_8_encode(input, self.errors)[0]
       
    1:     def reset(self):
    2:         codecs.IncrementalEncoder.reset(self)
    2:         self.first = 1
       
    1:     def getstate(self):
>>>>>>         return self.first
       
    1:     def setstate(self, state):
    4:         self.first = state
       
    2: class IncrementalDecoder(codecs.BufferedIncrementalDecoder):
    1:     def __init__(self, errors='strict'):
    4:         codecs.BufferedIncrementalDecoder.__init__(self, errors)
    4:         self.first = True
       
    1:     def _buffer_decode(self, input, errors, final):
   67:         if self.first:
   10:             if len(input) < 3:
    6:                 if codecs.BOM_UTF8.startswith(input):
                           # not enough data to decide if this really is a BOM
                           # => try again on the next call
    6:                     return (u"", 0)
                       else:
>>>>>>                     self.first = None
                   else:
    4:                 self.first = None
    4:                 if input[:3] == codecs.BOM_UTF8:
    4:                     (output, consumed) = codecs.utf_8_decode(input[3:], errors, final)
    4:                     return (output, consumed+3)
   57:         return codecs.utf_8_decode(input, errors, final)
       
    1:     def reset(self):
    4:         codecs.BufferedIncrementalDecoder.reset(self)
    4:         self.first = True
       
    2: class StreamWriter(codecs.StreamWriter):
    1:     def reset(self):
>>>>>>         codecs.StreamWriter.reset(self)
>>>>>>         try:
>>>>>>             del self.encode
>>>>>>         except AttributeError:
>>>>>>             pass
       
    1:     def encode(self, input, errors='strict'):
    2:         self.encode = codecs.utf_8_encode
    2:         return encode(input, errors)
       
    2: class StreamReader(codecs.StreamReader):
    1:     def reset(self):
>>>>>>         codecs.StreamReader.reset(self)
>>>>>>         try:
>>>>>>             del self.decode
>>>>>>         except AttributeError:
>>>>>>             pass
       
    1:     def decode(self, input, errors='strict'):
  698:         if len(input) < 3:
    9:             if codecs.BOM_UTF8.startswith(input):
                       # not enough data to decide if this is a BOM
                       # => try again on the next call
    7:                 return (u"", 0)
  689:         elif input[:3] == codecs.BOM_UTF8:
  675:             self.decode = codecs.utf_8_decode
  675:             (output, consumed) = codecs.utf_8_decode(input[3:],errors)
  675:             return (output, consumed+3)
               # (else) no BOM present
   16:         self.decode = codecs.utf_8_decode
   16:         return codecs.utf_8_decode(input, errors)
       
       ### encodings module API
       
    1: def getregentry():
    1:     return codecs.CodecInfo(
    1:         name='utf-8-sig',
    1:         encode=encode,
    1:         decode=decode,
    1:         incrementalencoder=IncrementalEncoder,
    1:         incrementaldecoder=IncrementalDecoder,
    1:         streamreader=StreamReader,
    1:         streamwriter=StreamWriter,
           )
