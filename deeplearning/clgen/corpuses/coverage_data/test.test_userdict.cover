       # Check every path through every method of UserDict
       
    1: from test import test_support, mapping_tests
    1: import UserDict
    1: import warnings
       
    1: d0 = {}
    1: d1 = {"one": 1}
    1: d2 = {"one": 1, "two": 2}
    1: d3 = {"one": 1, "two": 3, "three": 5}
    1: d4 = {"one": None, "two": None}
    1: d5 = {"one": 1, "two": 1}
       
    2: class UserDictTest(mapping_tests.TestHashMappingProtocol):
    1:     type2test = UserDict.IterableUserDict
       
    1:     def test_all(self):
               # Test constructors
    1:         u = UserDict.UserDict()
    1:         u0 = UserDict.UserDict(d0)
    1:         u1 = UserDict.UserDict(d1)
    1:         u2 = UserDict.IterableUserDict(d2)
       
    1:         uu = UserDict.UserDict(u)
    1:         uu0 = UserDict.UserDict(u0)
    1:         uu1 = UserDict.UserDict(u1)
    1:         uu2 = UserDict.UserDict(u2)
       
               # keyword arg constructor
    1:         self.assertEqual(UserDict.UserDict(one=1, two=2), d2)
               # item sequence constructor
    1:         self.assertEqual(UserDict.UserDict([('one',1), ('two',2)]), d2)
    1:         with test_support.check_warnings((".*'dict'.*",
    1:                                           PendingDeprecationWarning)):
    1:             self.assertEqual(UserDict.UserDict(dict=[('one',1), ('two',2)]), d2)
               # both together
    1:         self.assertEqual(UserDict.UserDict([('one',1), ('two',2)], two=3, three=5), d3)
       
               # alternate constructor
    1:         self.assertEqual(UserDict.UserDict.fromkeys('one two'.split()), d4)
    1:         self.assertEqual(UserDict.UserDict().fromkeys('one two'.split()), d4)
    1:         self.assertEqual(UserDict.UserDict.fromkeys('one two'.split(), 1), d5)
    1:         self.assertEqual(UserDict.UserDict().fromkeys('one two'.split(), 1), d5)
    1:         self.assertTrue(u1.fromkeys('one two'.split()) is not u1)
    1:         self.assertIsInstance(u1.fromkeys('one two'.split()), UserDict.UserDict)
    1:         self.assertIsInstance(u2.fromkeys('one two'.split()), UserDict.IterableUserDict)
       
               # Test __repr__
    1:         self.assertEqual(str(u0), str(d0))
    1:         self.assertEqual(repr(u1), repr(d1))
    1:         self.assertEqual(repr(u2), repr(d2))
       
               # Test __cmp__ and __len__
    1:         all = [d0, d1, d2, u, u0, u1, u2, uu, uu0, uu1, uu2]
   12:         for a in all:
  132:             for b in all:
  121:                 self.assertEqual(cmp(a, b), cmp(len(a), len(b)))
       
               # Test __getitem__
    1:         self.assertEqual(u2["one"], 1)
    1:         self.assertRaises(KeyError, u1.__getitem__, "two")
       
               # Test __setitem__
    1:         u3 = UserDict.UserDict(u2)
    1:         u3["two"] = 2
    1:         u3["three"] = 3
       
               # Test __delitem__
    1:         del u3["three"]
    1:         self.assertRaises(KeyError, u3.__delitem__, "three")
       
               # Test clear
    1:         u3.clear()
    1:         self.assertEqual(u3, {})
       
               # Test copy()
    1:         u2a = u2.copy()
    1:         self.assertEqual(u2a, u2)
    1:         u2b = UserDict.UserDict(x=42, y=23)
    1:         u2c = u2b.copy() # making a copy of a UserDict is special cased
    1:         self.assertEqual(u2b, u2c)
       
    2:         class MyUserDict(UserDict.UserDict):
    1:             def display(self): print self
       
    1:         m2 = MyUserDict(u2)
    1:         m2a = m2.copy()
    1:         self.assertEqual(m2a, m2)
       
               # SF bug #476616 -- copy() of UserDict subclass shared data
    1:         m2['foo'] = 'bar'
    1:         self.assertNotEqual(m2a, m2)
       
               # Test keys, items, values
    1:         self.assertEqual(u2.keys(), d2.keys())
    1:         self.assertEqual(u2.items(), d2.items())
    1:         self.assertEqual(u2.values(), d2.values())
       
               # Test has_key and "in".
    3:         for i in u2.keys():
    2:             self.assertIn(i, u2)
    2:             self.assertEqual(i in u1, i in d1)
    2:             self.assertEqual(i in u0, i in d0)
    2:             with test_support.check_py3k_warnings():
    2:                 self.assertTrue(u2.has_key(i))
    2:                 self.assertEqual(u1.has_key(i), d1.has_key(i))
    2:                 self.assertEqual(u0.has_key(i), d0.has_key(i))
       
               # Test update
    1:         t = UserDict.UserDict()
    1:         t.update(u2)
    1:         self.assertEqual(t, u2)
    2:         class Items:
    1:             def items(self):
    1:                 return (("x", 42), ("y", 23))
    1:         t = UserDict.UserDict()
    1:         t.update(Items())
    1:         self.assertEqual(t, {"x": 42, "y": 23})
       
               # Test get
    3:         for i in u2.keys():
    2:             self.assertEqual(u2.get(i), u2[i])
    2:             self.assertEqual(u1.get(i), d1.get(i))
    2:             self.assertEqual(u0.get(i), d0.get(i))
       
               # Test "in" iteration.
   21:         for i in xrange(20):
   20:             u2[i] = str(i)
    1:         ikeys = []
   23:         for k in u2:
   22:             ikeys.append(k)
    1:         keys = u2.keys()
    1:         self.assertEqual(set(ikeys), set(keys))
       
               # Test setdefault
    1:         t = UserDict.UserDict()
    1:         self.assertEqual(t.setdefault("x", 42), 42)
    1:         self.assertTrue(t.has_key("x"))
    1:         self.assertEqual(t.setdefault("x", 23), 42)
       
               # Test pop
    1:         t = UserDict.UserDict(x=42)
    1:         self.assertEqual(t.pop("x"), 42)
    1:         self.assertRaises(KeyError, t.pop, "x")
    1:         self.assertEqual(t.pop("x", 1), 1)
    1:         t["x"] = 42
    1:         self.assertEqual(t.pop("x", 1), 42)
       
               # Test popitem
    1:         t = UserDict.UserDict(x=42)
    1:         self.assertEqual(t.popitem(), ("x", 42))
    1:         self.assertRaises(KeyError, t.popitem)
       
    1:     def test_init(self):
    4:         for kw in 'self', 'other', 'iterable':
    3:             self.assertEqual(list(UserDict.UserDict(**{kw: 42}).items()),
    3:                              [(kw, 42)])
    1:         self.assertEqual(list(UserDict.UserDict({}, dict=42).items()),
    1:                          [('dict', 42)])
    1:         self.assertEqual(list(UserDict.UserDict({}, dict=None).items()),
    1:                          [('dict', None)])
    1:         with test_support.check_warnings((".*'dict'.*",
    1:                                           PendingDeprecationWarning)):
    1:             self.assertEqual(list(UserDict.UserDict(dict={'a': 42}).items()),
    1:                              [('a', 42)])
    1:         self.assertRaises(TypeError, UserDict.UserDict, 42)
    1:         self.assertRaises(TypeError, UserDict.UserDict, (), ())
    1:         self.assertRaises(TypeError, UserDict.UserDict.__init__)
       
    1:     def test_update(self):
    4:         for kw in 'self', 'other', 'iterable':
    3:             d = UserDict.UserDict()
    3:             d.update(**{kw: 42})
    3:             self.assertEqual(list(d.items()), [(kw, 42)])
    1:         d = UserDict.UserDict()
    1:         with test_support.check_warnings((".*'dict'.*",
    1:                                           PendingDeprecationWarning)):
    1:             d.update(dict={'a': 42})
    1:         self.assertEqual(list(d.items()), [('a', 42)])
    1:         self.assertRaises(TypeError, UserDict.UserDict().update, 42)
    1:         self.assertRaises(TypeError, UserDict.UserDict().update, {}, {})
    1:         self.assertRaises(TypeError, UserDict.UserDict.update)
       
    1:     def test_missing(self):
               # Make sure UserDict doesn't have a __missing__ method
    1:         self.assertEqual(hasattr(UserDict, "__missing__"), False)
               # Test several cases:
               # (D) subclass defines __missing__ method returning a value
               # (E) subclass defines __missing__ method raising RuntimeError
               # (F) subclass sets __missing__ instance variable (no effect)
               # (G) subclass doesn't define __missing__ at all
    2:         class D(UserDict.UserDict):
    1:             def __missing__(self, key):
    1:                 return 42
    1:         d = D({1: 2, 3: 4})
    1:         self.assertEqual(d[1], 2)
    1:         self.assertEqual(d[3], 4)
    1:         self.assertNotIn(2, d)
    1:         self.assertNotIn(2, d.keys())
    1:         self.assertEqual(d[2], 42)
    2:         class E(UserDict.UserDict):
    1:             def __missing__(self, key):
    1:                 raise RuntimeError(key)
    1:         e = E()
    1:         try:
    1:             e[42]
    1:         except RuntimeError, err:
    1:             self.assertEqual(err.args, (42,))
               else:
>>>>>>             self.fail("e[42] didn't raise RuntimeError")
    2:         class F(UserDict.UserDict):
    1:             def __init__(self):
                       # An instance variable __missing__ should have no effect
    1:                 self.__missing__ = lambda key: None
    1:                 UserDict.UserDict.__init__(self)
    1:         f = F()
    1:         try:
    1:             f[42]
    1:         except KeyError, err:
    1:             self.assertEqual(err.args, (42,))
               else:
>>>>>>             self.fail("f[42] didn't raise KeyError")
    2:         class G(UserDict.UserDict):
    1:             pass
    1:         g = G()
    1:         try:
    1:             g[42]
    1:         except KeyError, err:
    1:             self.assertEqual(err.args, (42,))
               else:
>>>>>>             self.fail("g[42] didn't raise KeyError")
       
       ##########################
       # Test Dict Mixin
       
    2: class SeqDict(UserDict.DictMixin):
           """Dictionary lookalike implemented with lists.
       
           Used to test and demonstrate DictMixin
    1:     """
    1:     def __init__(self, other=None, **kwargs):
  138:         self.keylist = []
  138:         self.valuelist = []
  138:         if other is not None:
>>>>>>             for (key, value) in other:
>>>>>>                 self[key] = value
  140:         for (key, value) in kwargs.iteritems():
    2:             self[key] = value
    1:     def __getitem__(self, key):
20641:         try:
20641:             i = self.keylist.index(key)
   37:         except ValueError:
   37:             raise KeyError
20604:         return self.valuelist[i]
    1:     def __setitem__(self, key, value):
16488:         try:
16488:             i = self.keylist.index(key)
    8:             self.valuelist[i] = value
16480:         except ValueError:
16480:             self.keylist.append(key)
16480:             self.valuelist.append(value)
    1:     def __delitem__(self, key):
16403:         try:
16403:             i = self.keylist.index(key)
>>>>>>         except ValueError:
>>>>>>             raise KeyError
16403:         self.keylist.pop(i)
16403:         self.valuelist.pop(i)
    1:     def keys(self):
16534:         return list(self.keylist)
    1:     def copy(self):
   15:         d = self.__class__()
 4113:         for key, value in self.iteritems():
 4098:             d[key] = value
   15:         return d
    1:     @classmethod
    1:     def fromkeys(cls, keys, value=None):
   14:         d = cls()
   31:         for key in keys:
   19:             d[key] = value
   11:         return d
       
    2: class UserDictMixinTest(mapping_tests.TestMappingProtocol):
    1:     type2test = SeqDict
       
    1:     def test_all(self):
               ## Setup test and verify working of the test class
       
               # check init
    1:         s = SeqDict()
       
               # exercise setitem
    1:         s[10] = 'ten'
    1:         s[20] = 'twenty'
    1:         s[30] = 'thirty'
       
               # exercise delitem
    1:         del s[20]
               # check getitem and setitem
    1:         self.assertEqual(s[10], 'ten')
               # check keys() and delitem
    1:         self.assertEqual(s.keys(), [10, 30])
       
               ## Now, test the DictMixin methods one by one
               # has_key
    1:         self.assertTrue(s.has_key(10))
    1:         self.assertTrue(not s.has_key(20))
       
               # __contains__
    1:         self.assertIn(10, s)
    1:         self.assertNotIn(20, s)
       
               # __iter__
    3:         self.assertEqual([k for k in s], [10, 30])
       
               # __len__
    1:         self.assertEqual(len(s), 2)
       
               # iteritems
    1:         self.assertEqual(list(s.iteritems()), [(10,'ten'), (30, 'thirty')])
       
               # iterkeys
    1:         self.assertEqual(list(s.iterkeys()), [10, 30])
       
               # itervalues
    1:         self.assertEqual(list(s.itervalues()), ['ten', 'thirty'])
       
               # values
    1:         self.assertEqual(s.values(), ['ten', 'thirty'])
       
               # items
    1:         self.assertEqual(s.items(), [(10,'ten'), (30, 'thirty')])
       
               # get
    1:         self.assertEqual(s.get(10), 'ten')
    1:         self.assertEqual(s.get(15,'fifteen'), 'fifteen')
    1:         self.assertEqual(s.get(15), None)
       
               # setdefault
    1:         self.assertEqual(s.setdefault(40, 'forty'), 'forty')
    1:         self.assertEqual(s.setdefault(10, 'null'), 'ten')
    1:         del s[40]
       
               # pop
    1:         self.assertEqual(s.pop(10), 'ten')
    1:         self.assertNotIn(10, s)
    1:         s[10] = 'ten'
    1:         self.assertEqual(s.pop("x", 1), 1)
    1:         s["x"] = 42
    1:         self.assertEqual(s.pop("x", 1), 42)
       
               # popitem
    1:         k, v = s.popitem()
    1:         self.assertNotIn(k, s)
    1:         s[k] = v
       
               # clear
    1:         s.clear()
    1:         self.assertEqual(len(s), 0)
       
               # empty popitem
    1:         self.assertRaises(KeyError, s.popitem)
       
               # update
    1:         s.update({10: 'ten', 20:'twenty'})
    1:         self.assertEqual(s[10], 'ten')
    1:         self.assertEqual(s[20], 'twenty')
       
               # cmp
    1:         self.assertEqual(s, {10: 'ten', 20:'twenty'})
    1:         t = SeqDict()
    1:         t[20] = 'twenty'
    1:         t[10] = 'ten'
    1:         self.assertEqual(s, t)
       
    1: def test_main():
    1:     test_support.run_unittest(
    1:         UserDictTest,
    1:         UserDictMixinTest
           )
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
