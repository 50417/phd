    1: import unittest, sys
    1: from ctypes.test import need_symbol
       
    2: class SimpleTypesTestCase(unittest.TestCase):
       
    1:     def setUp(self):
    9:         import ctypes
    9:         try:
    9:             from _ctypes import set_conversion_mode
>>>>>>         except ImportError:
>>>>>>             pass
               else:
    9:             self.prev_conv_mode = set_conversion_mode("ascii", "strict")
       
    1:     def tearDown(self):
    9:         try:
    9:             from _ctypes import set_conversion_mode
>>>>>>         except ImportError:
>>>>>>             pass
               else:
    9:             set_conversion_mode(*self.prev_conv_mode)
       
       
    1:     def test_subclasses(self):
    1:         from ctypes import c_void_p, c_char_p
               # ctypes 0.9.5 and before did overwrite from_param in SimpleType_new
    2:         class CVOIDP(c_void_p):
    1:             def from_param(cls, value):
    1:                 return value * 2
    1:             from_param = classmethod(from_param)
       
    2:         class CCHARP(c_char_p):
    1:             def from_param(cls, value):
    1:                 return value * 4
    1:             from_param = classmethod(from_param)
       
    1:         self.assertEqual(CVOIDP.from_param("abc"), "abcabc")
    1:         self.assertEqual(CCHARP.from_param("abc"), "abcabcabcabc")
       
    1:     @need_symbol('c_wchar_p')
           def test_subclasses_c_wchar_p(self):
    1:         from ctypes import c_wchar_p
       
    2:         class CWCHARP(c_wchar_p):
    1:             def from_param(cls, value):
    1:                 return value * 3
    1:             from_param = classmethod(from_param)
       
    1:         self.assertEqual(CWCHARP.from_param("abc"), "abcabcabc")
       
           # XXX Replace by c_char_p tests
    1:     def test_cstrings(self):
    1:         from ctypes import c_char_p, byref
       
               # c_char_p.from_param on a Python String packs the string
               # into a cparam object
    1:         s = "123"
    1:         self.assertIs(c_char_p.from_param(s)._obj, s)
       
               # new in 0.9.1: convert (encode) unicode to ascii
    1:         self.assertEqual(c_char_p.from_param(u"123")._obj, "123")
    1:         self.assertRaises(UnicodeEncodeError, c_char_p.from_param, u"123\377")
       
    1:         self.assertRaises(TypeError, c_char_p.from_param, 42)
       
               # calling c_char_p.from_param with a c_char_p instance
               # returns the argument itself:
    1:         a = c_char_p("123")
    1:         self.assertIs(c_char_p.from_param(a), a)
       
    1:     @need_symbol('c_wchar_p')
           def test_cw_strings(self):
    1:         from ctypes import byref, c_wchar_p
    1:         s = u"123"
    1:         if sys.platform == "win32":
>>>>>>             self.assertTrue(c_wchar_p.from_param(s)._obj is s)
>>>>>>             self.assertRaises(TypeError, c_wchar_p.from_param, 42)
       
                   # new in 0.9.1: convert (decode) ascii to unicode
>>>>>>             self.assertEqual(c_wchar_p.from_param("123")._obj, u"123")
    1:         self.assertRaises(UnicodeDecodeError, c_wchar_p.from_param, "123\377")
       
    1:         pa = c_wchar_p.from_param(c_wchar_p(u"123"))
    1:         self.assertEqual(type(pa), c_wchar_p)
       
    1:     def test_int_pointers(self):
    1:         from ctypes import c_short, c_uint, c_int, c_long, POINTER, pointer
    1:         LPINT = POINTER(c_int)
       
       ##        p = pointer(c_int(42))
       ##        x = LPINT.from_param(p)
    1:         x = LPINT.from_param(pointer(c_int(42)))
    1:         self.assertEqual(x.contents.value, 42)
    1:         self.assertEqual(LPINT(c_int(42)).contents.value, 42)
       
    1:         self.assertEqual(LPINT.from_param(None), None)
       
    1:         if c_int != c_long:
    1:             self.assertRaises(TypeError, LPINT.from_param, pointer(c_long(42)))
    1:         self.assertRaises(TypeError, LPINT.from_param, pointer(c_uint(42)))
    1:         self.assertRaises(TypeError, LPINT.from_param, pointer(c_short(42)))
       
    1:     def test_byref_pointer(self):
               # The from_param class method of POINTER(typ) classes accepts what is
               # returned by byref(obj), it type(obj) == typ
    1:         from ctypes import c_short, c_uint, c_int, c_long, pointer, POINTER, byref
    1:         LPINT = POINTER(c_int)
       
    1:         LPINT.from_param(byref(c_int(42)))
       
    1:         self.assertRaises(TypeError, LPINT.from_param, byref(c_short(22)))
    1:         if c_int != c_long:
    1:             self.assertRaises(TypeError, LPINT.from_param, byref(c_long(22)))
    1:         self.assertRaises(TypeError, LPINT.from_param, byref(c_uint(22)))
       
    1:     def test_byref_pointerpointer(self):
               # See above
    1:         from ctypes import c_short, c_uint, c_int, c_long, pointer, POINTER, byref
       
    1:         LPLPINT = POINTER(POINTER(c_int))
    1:         LPLPINT.from_param(byref(pointer(c_int(42))))
       
    1:         self.assertRaises(TypeError, LPLPINT.from_param, byref(pointer(c_short(22))))
    1:         if c_int != c_long:
    1:             self.assertRaises(TypeError, LPLPINT.from_param, byref(pointer(c_long(22))))
    1:         self.assertRaises(TypeError, LPLPINT.from_param, byref(pointer(c_uint(22))))
       
    1:     def test_array_pointers(self):
    1:         from ctypes import c_short, c_uint, c_int, c_long, POINTER
    1:         INTARRAY = c_int * 3
    1:         ia = INTARRAY()
    1:         self.assertEqual(len(ia), 3)
    4:         self.assertEqual([ia[i] for i in range(3)], [0, 0, 0])
       
               # Pointers are only compatible with arrays containing items of
               # the same type!
    1:         LPINT = POINTER(c_int)
    1:         LPINT.from_param((c_int*3)())
    1:         self.assertRaises(TypeError, LPINT.from_param, c_short*3)
    1:         self.assertRaises(TypeError, LPINT.from_param, c_long*3)
    1:         self.assertRaises(TypeError, LPINT.from_param, c_uint*3)
       
    1:     def test_noctypes_argtype(self):
    1:         import _ctypes_test
    1:         from ctypes import CDLL, c_void_p, ArgumentError
       
    1:         func = CDLL(_ctypes_test.__file__)._testfunc_p_p
    1:         func.restype = c_void_p
               # TypeError: has no from_param method
    1:         self.assertRaises(TypeError, setattr, func, "argtypes", (object,))
       
    2:         class Adapter(object):
    1:             def from_param(cls, obj):
    2:                 return None
       
    1:         func.argtypes = (Adapter(),)
    1:         self.assertEqual(func(None), None)
    1:         self.assertEqual(func(object()), None)
       
    2:         class Adapter(object):
    1:             def from_param(cls, obj):
    2:                 return obj
       
    1:         func.argtypes = (Adapter(),)
               # don't know how to convert parameter 1
    1:         self.assertRaises(ArgumentError, func, object())
    1:         self.assertEqual(func(c_void_p(42)), 42)
       
    2:         class Adapter(object):
    1:             def from_param(cls, obj):
    1:                 raise ValueError(obj)
       
    1:         func.argtypes = (Adapter(),)
               # ArgumentError: argument 1: ValueError: 99
    1:         self.assertRaises(ArgumentError, func, 99)
       
       
       ################################################################
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
