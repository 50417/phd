    1: import unittest
       
    1: from unittest.test.support import LoggingResult
       
       
    2: class Test_TestSkipping(unittest.TestCase):
       
    1:     def test_skipping(self):
    2:         class Foo(unittest.TestCase):
    1:             def test_skip_me(self):
    1:                 self.skipTest("skip")
    1:         events = []
    1:         result = LoggingResult(events)
    1:         test = Foo("test_skip_me")
    1:         test.run(result)
    1:         self.assertEqual(events, ['startTest', 'addSkip', 'stopTest'])
    1:         self.assertEqual(result.skipped, [(test, "skip")])
       
               # Try letting setUp skip the test now.
    2:         class Foo(unittest.TestCase):
    1:             def setUp(self):
    1:                 self.skipTest("testing")
    1:             def test_nothing(self): pass
    1:         events = []
    1:         result = LoggingResult(events)
    1:         test = Foo("test_nothing")
    1:         test.run(result)
    1:         self.assertEqual(events, ['startTest', 'addSkip', 'stopTest'])
    1:         self.assertEqual(result.skipped, [(test, "testing")])
    1:         self.assertEqual(result.testsRun, 1)
       
    1:     def test_skipping_decorators(self):
    1:         op_table = ((unittest.skipUnless, False, True),
    1:                     (unittest.skipIf, True, False))
    3:         for deco, do_skip, dont_skip in op_table:
    4:             class Foo(unittest.TestCase):
    2:                 @deco(do_skip, "testing")
>>>>>>                 def test_skip(self): pass
       
    2:                 @deco(dont_skip, "testing")
    2:                 def test_dont_skip(self): pass
    2:             test_do_skip = Foo("test_skip")
    2:             test_dont_skip = Foo("test_dont_skip")
    2:             suite = unittest.TestSuite([test_do_skip, test_dont_skip])
    2:             events = []
    2:             result = LoggingResult(events)
    2:             suite.run(result)
    2:             self.assertEqual(len(result.skipped), 1)
    2:             expected = ['startTest', 'addSkip', 'stopTest',
    2:                         'startTest', 'addSuccess', 'stopTest']
    2:             self.assertEqual(events, expected)
    2:             self.assertEqual(result.testsRun, 2)
    2:             self.assertEqual(result.skipped, [(test_do_skip, "testing")])
    2:             self.assertTrue(result.wasSuccessful())
       
    1:     def test_skip_class(self):
    2:         @unittest.skip("testing")
    1:         class Foo(unittest.TestCase):
    1:             def test_1(self):
>>>>>>                 record.append(1)
    1:         record = []
    1:         result = unittest.TestResult()
    1:         test = Foo("test_1")
    1:         suite = unittest.TestSuite([test])
    1:         suite.run(result)
    1:         self.assertEqual(result.skipped, [(test, "testing")])
    1:         self.assertEqual(record, [])
       
    1:     def test_skip_non_unittest_class_old_style(self):
    2:         @unittest.skip("testing")
               class Mixin:
    1:             def test_1(self):
>>>>>>                 record.append(1)
    2:         class Foo(Mixin, unittest.TestCase):
    1:             pass
    1:         record = []
    1:         result = unittest.TestResult()
    1:         test = Foo("test_1")
    1:         suite = unittest.TestSuite([test])
    1:         suite.run(result)
    1:         self.assertEqual(result.skipped, [(test, "testing")])
    1:         self.assertEqual(record, [])
       
    1:     def test_skip_non_unittest_class_new_style(self):
    2:         @unittest.skip("testing")
    1:         class Mixin(object):
    1:             def test_1(self):
>>>>>>                 record.append(1)
    2:         class Foo(Mixin, unittest.TestCase):
    1:             pass
    1:         record = []
    1:         result = unittest.TestResult()
    1:         test = Foo("test_1")
    1:         suite = unittest.TestSuite([test])
    1:         suite.run(result)
    1:         self.assertEqual(result.skipped, [(test, "testing")])
    1:         self.assertEqual(record, [])
       
    1:     def test_expected_failure(self):
    2:         class Foo(unittest.TestCase):
    1:             @unittest.expectedFailure
                   def test_die(self):
    1:                 self.fail("help me!")
    1:         events = []
    1:         result = LoggingResult(events)
    1:         test = Foo("test_die")
    1:         test.run(result)
    1:         self.assertEqual(events,
    1:                          ['startTest', 'addExpectedFailure', 'stopTest'])
    1:         self.assertEqual(result.expectedFailures[0][0], test)
    1:         self.assertTrue(result.wasSuccessful())
       
    1:     def test_unexpected_success(self):
    2:         class Foo(unittest.TestCase):
    1:             @unittest.expectedFailure
                   def test_die(self):
    1:                 pass
    1:         events = []
    1:         result = LoggingResult(events)
    1:         test = Foo("test_die")
    1:         test.run(result)
    1:         self.assertEqual(events,
    1:                          ['startTest', 'addUnexpectedSuccess', 'stopTest'])
    1:         self.assertFalse(result.failures)
    1:         self.assertEqual(result.unexpectedSuccesses, [test])
    1:         self.assertTrue(result.wasSuccessful())
       
    1:     def test_skip_doesnt_run_setup(self):
    2:         class Foo(unittest.TestCase):
    1:             wasSetUp = False
    1:             wasTornDown = False
    1:             def setUp(self):
>>>>>>                 Foo.wasSetUp = True
    1:             def tornDown(self):
>>>>>>                 Foo.wasTornDown = True
    1:             @unittest.skip('testing')
                   def test_1(self):
>>>>>>                 pass
       
    1:         result = unittest.TestResult()
    1:         test = Foo("test_1")
    1:         suite = unittest.TestSuite([test])
    1:         suite.run(result)
    1:         self.assertEqual(result.skipped, [(test, "testing")])
    1:         self.assertFalse(Foo.wasSetUp)
    1:         self.assertFalse(Foo.wasTornDown)
       
    1:     def test_decorated_skip(self):
    1:         def decorator(func):
    1:             def inner(*a):
    1:                 return func(*a)
    1:             return inner
       
    2:         class Foo(unittest.TestCase):
    1:             @decorator
    1:             @unittest.skip('testing')
                   def test_1(self):
>>>>>>                 pass
       
    1:         result = unittest.TestResult()
    1:         test = Foo("test_1")
    1:         suite = unittest.TestSuite([test])
    1:         suite.run(result)
    1:         self.assertEqual(result.skipped, [(test, "testing")])
       
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
