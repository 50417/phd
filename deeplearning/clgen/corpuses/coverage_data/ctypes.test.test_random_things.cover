    1: from ctypes import *
    1: import unittest, sys
       
    1: def callback_func(arg):
    4:     42 // arg
    1:     raise ValueError(arg)
       
    2: @unittest.skipUnless(sys.platform == "win32", 'Windows-specific test')
    1: class call_function_TestCase(unittest.TestCase):
           # _ctypes.call_function is deprecated and private, but used by
           # Gary Bishp's readline module.  If we have it, we must test it as well.
       
    1:     def test(self):
>>>>>>         from _ctypes import call_function
>>>>>>         windll.kernel32.LoadLibraryA.restype = c_void_p
>>>>>>         windll.kernel32.GetProcAddress.argtypes = c_void_p, c_char_p
>>>>>>         windll.kernel32.GetProcAddress.restype = c_void_p
       
>>>>>>         hdll = windll.kernel32.LoadLibraryA("kernel32")
>>>>>>         funcaddr = windll.kernel32.GetProcAddress(hdll, "GetModuleHandleA")
       
>>>>>>         self.assertEqual(call_function(funcaddr, (None,)),
>>>>>>                              windll.kernel32.GetModuleHandleA(None))
       
    2: class CallbackTracbackTestCase(unittest.TestCase):
           # When an exception is raised in a ctypes callback function, the C
           # code prints a traceback.
           #
           # This test makes sure the exception types *and* the exception
           # value is printed correctly.
           #
           # Changed in 0.9.3: No longer is '(in callback)' prepended to the
           # error message - instead an additional frame for the C code is
           # created, then a full traceback printed.  When SystemExit is
           # raised in a callback function, the interpreter exits.
       
    1:     def capture_stderr(self, func, *args, **kw):
               # helper - call function 'func', and return the captured stderr
    4:         import StringIO
    4:         old_stderr = sys.stderr
    4:         logger = sys.stderr = StringIO.StringIO()
    4:         try:
    4:             func(*args, **kw)
               finally:
    4:             sys.stderr = old_stderr
    4:         return logger.getvalue()
       
    1:     def test_ValueError(self):
    1:         cb = CFUNCTYPE(c_int, c_int)(callback_func)
    1:         out = self.capture_stderr(cb, 42)
    1:         self.assertEqual(out.splitlines()[-1],
    1:                              "ValueError: 42")
       
    1:     def test_IntegerDivisionError(self):
    1:         cb = CFUNCTYPE(c_int, c_int)(callback_func)
    1:         out = self.capture_stderr(cb, 0)
    1:         self.assertEqual(out.splitlines()[-1][:19],
    1:                              "ZeroDivisionError: ")
       
    1:     def test_FloatDivisionError(self):
    1:         cb = CFUNCTYPE(c_int, c_double)(callback_func)
    1:         out = self.capture_stderr(cb, 0.0)
    1:         self.assertEqual(out.splitlines()[-1][:19],
    1:                              "ZeroDivisionError: ")
       
    1:     def test_TypeErrorDivisionError(self):
    1:         cb = CFUNCTYPE(c_int, c_char_p)(callback_func)
    1:         out = self.capture_stderr(cb, "spam")
    1:         self.assertEqual(out.splitlines()[-1],
    1:                              "TypeError: "
                                    "unsupported operand type(s) for //: 'int' and 'str'")
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
