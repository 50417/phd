    1: """A more or less complete user-defined wrapper around list objects."""
       
    1: import collections
       
    2: class UserList(collections.MutableSequence):
    1:     def __init__(self, initlist=None):
  929:         self.data = []
  929:         if initlist is not None:
                   # XXX should this accept an arbitrary sequence?
  899:             if type(initlist) == type(self.data):
  726:                 self.data[:] = initlist
  173:             elif isinstance(initlist, UserList):
    7:                 self.data[:] = initlist.data[:]
                   else:
  166:                 self.data = list(initlist)
   16:     def __repr__(self): return repr(self.data)
    1:     def __lt__(self, other): return self.data <  self.__cast(other)
    1:     def __le__(self, other): return self.data <= self.__cast(other)
  816:     def __eq__(self, other): return self.data == self.__cast(other)
    3:     def __ne__(self, other): return self.data != self.__cast(other)
    1:     def __gt__(self, other): return self.data >  self.__cast(other)
    1:     def __ge__(self, other): return self.data >= self.__cast(other)
    1:     def __cast(self, other):
  818:         if isinstance(other, UserList): return other.data
  402:         else: return other
    1:     def __cmp__(self, other):
    1:         return cmp(self.data, self.__cast(other))
    1:     __hash__ = None # Mutable sequence, so not hashable
   11:     def __contains__(self, item): return item in self.data
 1411:     def __len__(self): return len(self.data)
 9271:     def __getitem__(self, i): return self.data[i]
   30:     def __setitem__(self, i, item): self.data[i] = item
   13:     def __delitem__(self, i): del self.data[i]
    1:     def __getslice__(self, i, j):
  247:         i = max(i, 0); j = max(j, 0)
  247:         return self.__class__(self.data[i:j])
    1:     def __setslice__(self, i, j, other):
  137:         i = max(i, 0); j = max(j, 0)
  137:         if isinstance(other, UserList):
   67:             self.data[i:j] = other.data
   70:         elif isinstance(other, type(self.data)):
   67:             self.data[i:j] = other
               else:
    3:             self.data[i:j] = list(other)
    1:     def __delslice__(self, i, j):
   14:         i = max(i, 0); j = max(j, 0)
   14:         del self.data[i:j]
    1:     def __add__(self, other):
   17:         if isinstance(other, UserList):
   14:             return self.__class__(self.data + other.data)
    3:         elif isinstance(other, type(self.data)):
    2:             return self.__class__(self.data + other)
               else:
    1:             return self.__class__(self.data + list(other))
    1:     def __radd__(self, other):
    3:         if isinstance(other, UserList):
    1:             return self.__class__(other.data + self.data)
    2:         elif isinstance(other, type(self.data)):
    1:             return self.__class__(other + self.data)
               else:
    1:             return self.__class__(list(other) + self.data)
    1:     def __iadd__(self, other):
    7:         if isinstance(other, UserList):
    4:             self.data += other.data
    3:         elif isinstance(other, type(self.data)):
    1:             self.data += other
               else:
    2:             self.data += list(other)
    6:         return self
    1:     def __mul__(self, n):
   53:         return self.__class__(self.data*n)
    1:     __rmul__ = __mul__
    1:     def __imul__(self, n):
    3:         self.data *= n
    3:         return self
   44:     def append(self, item): self.data.append(item)
 1007:     def insert(self, i, item): self.data.insert(i, item)
    6:     def pop(self, i=-1): return self.data.pop(i)
   11:     def remove(self, item): self.data.remove(item)
    6:     def count(self, item): return self.data.count(item)
   24:     def index(self, item, *args): return self.data.index(item, *args)
    3:     def reverse(self): self.data.reverse()
   10:     def sort(self, *args, **kwds): self.data.sort(*args, **kwds)
    1:     def extend(self, other):
    6:         if isinstance(other, UserList):
    3:             self.data.extend(other.data)
               else:
    3:             self.data.extend(other)
