       """Test program for MimeWriter module.
       
       The test program was too big to comfortably fit in the MimeWriter
       class, so it's here in its own file.
       
       This should generate Barry's example, modulo some quotes and newlines.
       
    1: """
       
    1: import unittest, StringIO
    1: from test.test_support import run_unittest, import_module
       
    1: import_module("MimeWriter", deprecated=True)
    1: from MimeWriter import MimeWriter
       
       SELLER = '''\
       INTERFACE Seller-1;
       
       TYPE Seller = OBJECT
           DOCUMENTATION "A simple Seller interface to test ILU"
           METHODS
                   price():INTEGER,
           END;
    1: '''
       
       BUYER = '''\
       class Buyer:
           def __setup__(self, maxprice):
               self._maxprice = maxprice
       
           def __main__(self, kos):
               """Entry point upon arrival at a new KOS."""
               broker = kos.broker()
               # B4 == Barry's Big Bass Business :-)
               seller = broker.lookup('Seller_1.Seller', 'B4')
               if seller:
                   price = seller.price()
                   print 'Seller wants $', price, '... '
                   if price > self._maxprice:
                       print 'too much!'
                   else:
                       print "I'll take it!"
               else:
                   print 'no seller found here'
    1: '''                                     # Don't ask why this comment is here
       
       STATE = '''\
       # instantiate a buyer instance and put it in a magic place for the KOS
       # to find.
       __kp__ = Buyer()
       __kp__.__setup__(500)
    1: '''
       
       SIMPLE_METADATA = [
    1:         ("Interpreter", "python"),
    1:         ("Interpreter-Version", "1.3"),
    1:         ("Owner-Name", "Barry Warsaw"),
    1:         ("Owner-Rendezvous", "bwarsaw@cnri.reston.va.us"),
    1:         ("Home-KSS", "kss.cnri.reston.va.us"),
    1:         ("Identifier", "hdl://cnri.kss/my_first_knowbot"),
    1:         ("Launch-Date", "Mon Feb 12 16:39:03 EST 1996"),
               ]
       
       COMPLEX_METADATA = [
    1:         ("Metadata-Type", "complex"),
    1:         ("Metadata-Key", "connection"),
    1:         ("Access", "read-only"),
    1:         ("Connection-Description", "Barry's Big Bass Business"),
    1:         ("Connection-Id", "B4"),
    1:         ("Connection-Direction", "client"),
               ]
       
       EXTERNAL_METADATA = [
    1:         ("Metadata-Type", "complex"),
    1:         ("Metadata-Key", "generic-interface"),
    1:         ("Access", "read-only"),
    1:         ("Connection-Description", "Generic Interface for All Knowbots"),
    1:         ("Connection-Id", "generic-kp"),
    1:         ("Connection-Direction", "client"),
               ]
       
       
       OUTPUT = '''\
       From: bwarsaw@cnri.reston.va.us
       Date: Mon Feb 12 17:21:48 EST 1996
       To: kss-submit@cnri.reston.va.us
       MIME-Version: 1.0
       Content-Type: multipart/knowbot;
           boundary="801spam999";
           version="0.1"
       
       This is a multi-part message in MIME format.
       
       --801spam999
       Content-Type: multipart/knowbot-metadata;
           boundary="802spam999"
       
       
       --802spam999
       Content-Type: message/rfc822
       KP-Metadata-Type: simple
       KP-Access: read-only
       
       KPMD-Interpreter: python
       KPMD-Interpreter-Version: 1.3
       KPMD-Owner-Name: Barry Warsaw
       KPMD-Owner-Rendezvous: bwarsaw@cnri.reston.va.us
       KPMD-Home-KSS: kss.cnri.reston.va.us
       KPMD-Identifier: hdl://cnri.kss/my_first_knowbot
       KPMD-Launch-Date: Mon Feb 12 16:39:03 EST 1996
       
       --802spam999
       Content-Type: text/isl
       KP-Metadata-Type: complex
       KP-Metadata-Key: connection
       KP-Access: read-only
       KP-Connection-Description: Barry's Big Bass Business
       KP-Connection-Id: B4
       KP-Connection-Direction: client
       
       INTERFACE Seller-1;
       
       TYPE Seller = OBJECT
           DOCUMENTATION "A simple Seller interface to test ILU"
           METHODS
                   price():INTEGER,
           END;
       
       --802spam999
       Content-Type: message/external-body;
           access-type="URL";
           URL="hdl://cnri.kss/generic-knowbot"
       
       Content-Type: text/isl
       KP-Metadata-Type: complex
       KP-Metadata-Key: generic-interface
       KP-Access: read-only
       KP-Connection-Description: Generic Interface for All Knowbots
       KP-Connection-Id: generic-kp
       KP-Connection-Direction: client
       
       
       --802spam999--
       
       --801spam999
       Content-Type: multipart/knowbot-code;
           boundary="803spam999"
       
       
       --803spam999
       Content-Type: text/plain
       KP-Module-Name: BuyerKP
       
       class Buyer:
           def __setup__(self, maxprice):
               self._maxprice = maxprice
       
           def __main__(self, kos):
               """Entry point upon arrival at a new KOS."""
               broker = kos.broker()
               # B4 == Barry's Big Bass Business :-)
               seller = broker.lookup('Seller_1.Seller', 'B4')
               if seller:
                   price = seller.price()
                   print 'Seller wants $', price, '... '
                   if price > self._maxprice:
                       print 'too much!'
                   else:
                       print "I'll take it!"
               else:
                   print 'no seller found here'
       
       --803spam999--
       
       --801spam999
       Content-Type: multipart/knowbot-state;
           boundary="804spam999"
       KP-Main-Module: main
       
       
       --804spam999
       Content-Type: text/plain
       KP-Module-Name: main
       
       # instantiate a buyer instance and put it in a magic place for the KOS
       # to find.
       __kp__ = Buyer()
       __kp__.__setup__(500)
       
       --804spam999--
       
       --801spam999--
    1: '''
       
    2: class MimewriterTest(unittest.TestCase):
       
    1:     def test(self):
    1:         buf = StringIO.StringIO()
       
               # Toplevel headers
       
    1:         toplevel = MimeWriter(buf)
    1:         toplevel.addheader("From", "bwarsaw@cnri.reston.va.us")
    1:         toplevel.addheader("Date", "Mon Feb 12 17:21:48 EST 1996")
    1:         toplevel.addheader("To", "kss-submit@cnri.reston.va.us")
    1:         toplevel.addheader("MIME-Version", "1.0")
       
               # Toplevel body parts
       
    1:         f = toplevel.startmultipartbody("knowbot", "801spam999",
    1:                                         [("version", "0.1")], prefix=0)
    1:         f.write("This is a multi-part message in MIME format.\n")
       
               # First toplevel body part: metadata
       
    1:         md = toplevel.nextpart()
    1:         md.startmultipartbody("knowbot-metadata", "802spam999")
       
               # Metadata part 1
       
    1:         md1 = md.nextpart()
    1:         md1.addheader("KP-Metadata-Type", "simple")
    1:         md1.addheader("KP-Access", "read-only")
    1:         m = MimeWriter(md1.startbody("message/rfc822"))
    8:         for key, value in SIMPLE_METADATA:
    7:             m.addheader("KPMD-" + key, value)
    1:         m.flushheaders()
    1:         del md1
       
               # Metadata part 2
       
    1:         md2 = md.nextpart()
    7:         for key, value in COMPLEX_METADATA:
    6:             md2.addheader("KP-" + key, value)
    1:         f = md2.startbody("text/isl")
    1:         f.write(SELLER)
    1:         del md2
       
               # Metadata part 3
       
    1:         md3 = md.nextpart()
    1:         f = md3.startbody("message/external-body",
    1:                           [("access-type", "URL"),
    1:                            ("URL", "hdl://cnri.kss/generic-knowbot")])
    1:         m = MimeWriter(f)
    7:         for key, value in EXTERNAL_METADATA:
    6:             md3.addheader("KP-" + key, value)
    1:         md3.startbody("text/isl")
               # Phantom body doesn't need to be written
       
    1:         md.lastpart()
       
               # Second toplevel body part: code
       
    1:         code = toplevel.nextpart()
    1:         code.startmultipartbody("knowbot-code", "803spam999")
       
               # Code: buyer program source
       
    1:         buyer = code.nextpart()
    1:         buyer.addheader("KP-Module-Name", "BuyerKP")
    1:         f = buyer.startbody("text/plain")
    1:         f.write(BUYER)
       
    1:         code.lastpart()
       
               # Third toplevel body part: state
       
    1:         state = toplevel.nextpart()
    1:         state.addheader("KP-Main-Module", "main")
    1:         state.startmultipartbody("knowbot-state", "804spam999")
       
               # State: a bunch of assignments
       
    1:         st = state.nextpart()
    1:         st.addheader("KP-Module-Name", "main")
    1:         f = st.startbody("text/plain")
    1:         f.write(STATE)
       
    1:         state.lastpart()
       
               # End toplevel body parts
       
    1:         toplevel.lastpart()
       
    1:         self.assertEqual(buf.getvalue(), OUTPUT)
       
    1: def test_main():
    1:     run_unittest(MimewriterTest)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
