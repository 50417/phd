       """Utilities to support packages."""
       
       # NOTE: This module must remain compatible with Python 2.3, as it is shared
       # by setuptools for distribution with Python 2.3 and up.
       
>>>>>> import os
>>>>>> import sys
>>>>>> import imp
>>>>>> import os.path
>>>>>> from types import ModuleType
       
       __all__ = [
>>>>>>     'get_importer', 'iter_importers', 'get_loader', 'find_loader',
>>>>>>     'walk_packages', 'iter_modules', 'get_data',
>>>>>>     'ImpImporter', 'ImpLoader', 'read_code', 'extend_path',
       ]
       
>>>>>> def read_code(stream):
           # This helper is needed in order for the PEP 302 emulation to
           # correctly handle compiled files
   15:     import marshal
       
   15:     magic = stream.read(4)
   15:     if magic != imp.get_magic():
    1:         return None
       
   14:     stream.read(4) # Skip timestamp
   14:     return marshal.load(stream)
       
       
>>>>>> def simplegeneric(func):
           """Make a trivial single-dispatch generic function"""
>>>>>>     registry = {}
>>>>>>     def wrapper(*args, **kw):
    5:         ob = args[0]
    5:         try:
    5:             cls = ob.__class__
>>>>>>         except AttributeError:
>>>>>>             cls = type(ob)
    5:         try:
    5:             mro = cls.__mro__
    5:         except AttributeError:
    5:             try:
   10:                 class cls(cls, object):
    5:                     pass
    5:                 mro = cls.__mro__[1:]
>>>>>>             except TypeError:
>>>>>>                 mro = object,   # must be an ExtensionClass or some such  :(
   15:         for t in mro:
   10:             if t in registry:
>>>>>>                 return registry[t](*args, **kw)
               else:
    5:             return func(*args, **kw)
>>>>>>     try:
>>>>>>         wrapper.__name__ = func.__name__
>>>>>>     except (TypeError, AttributeError):
>>>>>>         pass    # Python 2.3 doesn't allow functions to be renamed
       
>>>>>>     def register(typ, func=None):
>>>>>>         if func is None:
>>>>>>             return lambda f: register(typ, f)
>>>>>>         registry[typ] = func
>>>>>>         return func
       
>>>>>>     wrapper.__dict__ = func.__dict__
>>>>>>     wrapper.__doc__ = func.__doc__
>>>>>>     wrapper.register = register
>>>>>>     return wrapper
       
       
>>>>>> def walk_packages(path=None, prefix='', onerror=None):
           """Yields (module_loader, name, ispkg) for all modules recursively
           on path, or, if path is None, all accessible modules.
       
           'path' should be either None or a list of paths to look for
           modules in.
       
           'prefix' is a string to output on the front of every module name
           on output.
       
           Note that this function must import all *packages* (NOT all
           modules!) on the given path, in order to access the __path__
           attribute to find submodules.
       
           'onerror' is a function which gets called with one argument (the
           name of the package which was being imported) if any exception
           occurs while trying to import a package.  If no onerror function is
           supplied, ImportErrors are caught and ignored, while all other
           exceptions are propagated, terminating the search.
       
           Examples:
       
           # list all modules python can access
           walk_packages()
       
           # list all submodules of ctypes
           walk_packages(ctypes.__path__, ctypes.__name__+'.')
           """
       
    4:     def seen(p, m={}):
>>>>>>         if p in m:
>>>>>>             return True
>>>>>>         m[p] = True
       
    6:     for importer, name, ispkg in iter_modules(path, prefix):
    2:         yield importer, name, ispkg
       
    2:         if ispkg:
    2:             try:
    2:                 __import__(name)
    2:             except ImportError:
    2:                 if onerror is not None:
    2:                     onerror(name)
>>>>>>             except Exception:
>>>>>>                 if onerror is not None:
>>>>>>                     onerror(name)
                       else:
>>>>>>                     raise
                   else:
>>>>>>                 path = getattr(sys.modules[name], '__path__', None) or []
       
                       # don't traverse path items we've seen before
>>>>>>                 path = [p for p in path if not seen(p)]
       
>>>>>>                 for item in walk_packages(path, name+'.', onerror):
>>>>>>                     yield item
       
       
>>>>>> def iter_modules(path=None, prefix=''):
           """Yields (module_loader, name, ispkg) for all submodules on path,
           or, if path is None, all top-level modules on sys.path.
       
           'path' should be either None or a list of paths to look for
           modules in.
       
           'prefix' is a string to output on the front of every module name
           on output.
           """
       
    5:     if path is None:
>>>>>>         importers = iter_importers()
           else:
    5:         importers = map(get_importer, path)
       
    5:     yielded = {}
   10:     for i in importers:
   11:         for name, ispkg in iter_importer_modules(i, prefix):
    6:             if name not in yielded:
    6:                 yielded[name] = 1
    6:                 yield i, name, ispkg
       
       
       #@simplegeneric
>>>>>> def iter_importer_modules(importer, prefix=''):
    5:     if not hasattr(importer, 'iter_modules'):
>>>>>>         return []
    5:     return importer.iter_modules(prefix)
       
>>>>>> iter_importer_modules = simplegeneric(iter_importer_modules)
       
       
>>>>>> class ImpImporter:
           """PEP 302 Importer that wraps Python's "classic" import algorithm
       
           ImpImporter(dirname) produces a PEP 302 importer that searches that
           directory.  ImpImporter(None) produces a PEP 302 importer that searches
           the current sys.path, plus any modules that are frozen or built-in.
       
           Note that ImpImporter does not currently support being used by placement
           on sys.meta_path.
           """
       
>>>>>>     def __init__(self, path=None):
49840:         self.path = path
       
>>>>>>     def find_module(self, fullname, path=None):
               # Note: we ignore 'path' argument since it is only used via meta_path
49837:         subname = fullname.split(".")[-1]
49837:         if subname != fullname and self.path is None:
>>>>>>             return None
49837:         if self.path is None:
    2:             path = None
               else:
49835:             path = [os.path.realpath(self.path)]
49837:         try:
49837:             file, filename, etc = imp.find_module(subname, path)
49786:         except ImportError:
49786:             return None
   51:         return ImpLoader(fullname, file, filename, etc)
       
>>>>>>     def iter_modules(self, prefix=''):
    5:         if self.path is None or not os.path.isdir(self.path):
>>>>>>             return
       
    5:         yielded = {}
    5:         import inspect
    5:         try:
    5:             filenames = os.listdir(self.path)
>>>>>>         except OSError:
                   # ignore unreadable directories like import does
>>>>>>             filenames = []
    5:         filenames.sort()  # handle packages before same-named modules
       
   24:         for fn in filenames:
   19:             modname = inspect.getmodulename(fn)
   19:             if modname=='__init__' or modname in yielded:
    4:                 continue
       
   13:             path = os.path.join(self.path, fn)
   13:             ispkg = False
       
   13:             if not modname and os.path.isdir(path) and '.' not in fn:
    4:                 modname = fn
    4:                 try:
    4:                     dircontents = os.listdir(path)
    2:                 except OSError:
                           # ignore unreadable directories like import does
    2:                     dircontents = []
    4:                 for fn in dircontents:
    2:                     subname = inspect.getmodulename(fn)
    2:                     if subname=='__init__':
    2:                         ispkg = True
    2:                         break
                       else:
    2:                     continue    # not a package
       
   11:             if modname and '.' not in modname:
    6:                 yielded[modname] = 1
    6:                 yield prefix + modname, ispkg
       
       
>>>>>> class ImpLoader:
           """PEP 302 Loader that wraps Python's "classic" import algorithm
           """
>>>>>>     code = source = None
       
>>>>>>     def __init__(self, fullname, file, filename, etc):
   51:         self.file = file
   51:         self.filename = filename
   51:         self.fullname = fullname
   51:         self.etc = etc
       
>>>>>>     def load_module(self, fullname):
    1:         self._reopen()
    1:         try:
    1:             mod = imp.load_module(fullname, self.file, self.filename, self.etc)
               finally:
    1:             if self.file:
>>>>>>                 self.file.close()
               # Note: we don't set __loader__ because we want the module to look
               # normal; i.e. this is just a wrapper for standard import machinery
    1:         return mod
       
>>>>>>     def get_data(self, pathname):
    5:         return open(pathname, "rb").read()
       
>>>>>>     def _reopen(self):
   32:         if self.file and self.file.closed:
>>>>>>             mod_type = self.etc[2]
>>>>>>             if mod_type==imp.PY_SOURCE:
>>>>>>                 self.file = open(self.filename, 'rU')
>>>>>>             elif mod_type in (imp.PY_COMPILED, imp.C_EXTENSION):
>>>>>>                 self.file = open(self.filename, 'rb')
       
>>>>>>     def _fix_name(self, fullname):
  125:         if fullname is None:
    4:             fullname = self.fullname
  121:         elif fullname != self.fullname:
>>>>>>             raise ImportError("Loader for module %s cannot handle "
>>>>>>                               "module %s" % (self.fullname, fullname))
  125:         return fullname
       
>>>>>>     def is_package(self, fullname):
   42:         fullname = self._fix_name(fullname)
   42:         return self.etc[2]==imp.PKG_DIRECTORY
       
>>>>>>     def get_code(self, fullname=None):
   31:         fullname = self._fix_name(fullname)
   31:         if self.code is None:
   31:             mod_type = self.etc[2]
   31:             if mod_type==imp.PY_SOURCE:
   15:                 source = self.get_source(fullname)
   15:                 self.code = compile(source, self.filename, 'exec')
   16:             elif mod_type==imp.PY_COMPILED:
   14:                 self._reopen()
   14:                 try:
   14:                     self.code = read_code(self.file)
                       finally:
   14:                     self.file.close()
    2:             elif mod_type==imp.PKG_DIRECTORY:
>>>>>>                 self.code = self._get_delegate().get_code()
   31:         return self.code
       
>>>>>>     def get_source(self, fullname=None):
   19:         fullname = self._fix_name(fullname)
   19:         if self.source is None:
   19:             mod_type = self.etc[2]
   19:             if mod_type==imp.PY_SOURCE:
   17:                 self._reopen()
   17:                 try:
   17:                     self.source = self.file.read()
                       finally:
   17:                     self.file.close()
    2:             elif mod_type==imp.PY_COMPILED:
>>>>>>                 if os.path.exists(self.filename[:-1]):
>>>>>>                     f = open(self.filename[:-1], 'rU')
>>>>>>                     self.source = f.read()
>>>>>>                     f.close()
    2:             elif mod_type==imp.PKG_DIRECTORY:
    2:                 self.source = self._get_delegate().get_source()
   19:         return self.source
       
       
>>>>>>     def _get_delegate(self):
    4:         return ImpImporter(self.filename).find_module('__init__')
       
>>>>>>     def get_filename(self, fullname=None):
   33:         fullname = self._fix_name(fullname)
   33:         mod_type = self.etc[2]
   33:         if self.etc[2]==imp.PKG_DIRECTORY:
    2:             return self._get_delegate().get_filename()
   31:         elif self.etc[2] in (imp.PY_SOURCE, imp.PY_COMPILED, imp.C_EXTENSION):
   31:             return self.filename
>>>>>>         return None
       
       
>>>>>> try:
>>>>>>     import zipimport
>>>>>>     from zipimport import zipimporter
       
>>>>>>     def iter_zipimport_modules(importer, prefix=''):
>>>>>>         dirlist = zipimport._zip_directory_cache[importer.archive].keys()
>>>>>>         dirlist.sort()
>>>>>>         _prefix = importer.prefix
>>>>>>         plen = len(_prefix)
>>>>>>         yielded = {}
>>>>>>         import inspect
>>>>>>         for fn in dirlist:
>>>>>>             if not fn.startswith(_prefix):
>>>>>>                 continue
       
>>>>>>             fn = fn[plen:].split(os.sep)
       
>>>>>>             if len(fn)==2 and fn[1].startswith('__init__.py'):
>>>>>>                 if fn[0] not in yielded:
>>>>>>                     yielded[fn[0]] = 1
>>>>>>                     yield fn[0], True
       
>>>>>>             if len(fn)!=1:
>>>>>>                 continue
       
>>>>>>             modname = inspect.getmodulename(fn[0])
>>>>>>             if modname=='__init__':
>>>>>>                 continue
       
>>>>>>             if modname and '.' not in modname and modname not in yielded:
>>>>>>                 yielded[modname] = 1
>>>>>>                 yield prefix + modname, False
       
>>>>>>     iter_importer_modules.register(zipimporter, iter_zipimport_modules)
       
>>>>>> except ImportError:
>>>>>>     pass
       
       
>>>>>> def get_importer(path_item):
           """Retrieve a PEP 302 importer for the given path item
       
           The returned importer is cached in sys.path_importer_cache
           if it was newly created by a path hook.
       
           If there is no importer, a wrapper around the basic import
           machinery is returned. This wrapper is never inserted into
           the importer cache (None is inserted instead).
       
           The cache (or part of it) can be cleared manually if a
           rescan of sys.path_hooks is necessary.
           """
50159:     try:
50159:         importer = sys.path_importer_cache[path_item]
   25:     except KeyError:
   49:         for path_hook in sys.path_hooks:
   25:             try:
   25:                 importer = path_hook(path_item)
    1:                 break
   24:             except ImportError:
   24:                 pass
               else:
   24:             importer = None
   25:         sys.path_importer_cache.setdefault(path_item, importer)
       
50159:     if importer is None:
49835:         try:
49835:             importer = ImpImporter(path_item)
>>>>>>         except ImportError:
>>>>>>             importer = None
50158:     return importer
       
       
>>>>>> def iter_importers(fullname=""):
           """Yield PEP 302 importers for the given module name
       
           If fullname contains a '.', the importers will be for the package
           containing fullname, otherwise they will be importers for sys.meta_path,
           sys.path, and Python's "classic" import machinery, in that order.  If
           the named module is in a package, that package is imported as a side
           effect of invoking this function.
       
           Non PEP 302 mechanisms (e.g. the Windows registry) used by the
           standard import machinery to find files in alternative locations
           are partially supported, but are searched AFTER sys.path. Normally,
           these locations are searched BEFORE sys.path, preventing sys.path
           entries from shadowing them.
       
           For this to cause a visible difference in behaviour, there must
           be a module or package name that is accessible via both sys.path
           and one of the non PEP 302 file system mechanisms. In this case,
           the emulation will find the former version, while the builtin
           import mechanism will find the latter.
       
           Items of the following types can be affected by this discrepancy:
               imp.C_EXTENSION, imp.PY_SOURCE, imp.PY_COMPILED, imp.PKG_DIRECTORY
           """
  371:     if fullname.startswith('.'):
    2:         raise ImportError("Relative module names not supported")
  369:     if '.' in fullname:
               # Get the containing package's __path__
   32:         pkg = '.'.join(fullname.split('.')[:-1])
   32:         if pkg not in sys.modules:
   13:             __import__(pkg)
   30:         path = getattr(sys.modules[pkg], '__path__', None) or []
           else:
  337:         for importer in sys.meta_path:
    2:             yield importer
  335:         path = sys.path
50158:     for item in path:
50154:         yield get_importer(item)
    4:     if '.' not in fullname:
    2:         yield ImpImporter()
       
>>>>>> def get_loader(module_or_name):
           """Get a PEP 302 "loader" object for module_or_name
       
           If the module or package is accessible via the normal import
           mechanism, a wrapper around the relevant part of that machinery
           is returned.  Returns None if the module cannot be found or imported.
           If the named module is not already imported, its containing package
           (if any) is imported, in order to establish the package __path__.
       
           This function uses iter_importers(), and is thus subject to the same
           limitations regarding platform-specific special import locations such
           as the Windows registry.
           """
  372:     if module_or_name in sys.modules:
   21:         module_or_name = sys.modules[module_or_name]
  372:     if isinstance(module_or_name, ModuleType):
   22:         module = module_or_name
   22:         loader = getattr(module, '__loader__', None)
   22:         if loader is not None:
    1:             return loader
   21:         fullname = module.__name__
           else:
  350:         fullname = module_or_name
  371:     return find_loader(fullname)
       
>>>>>> def find_loader(fullname):
           """Find a PEP 302 "loader" object for fullname
       
           If fullname contains dots, path must be the containing package's __path__.
           Returns None if the module cannot be found or imported. This function uses
           iter_importers(), and is thus subject to the same limitations regarding
           platform-specific special import locations such as the Windows registry.
           """
50164:     for importer in iter_importers(fullname):
50157:         loader = importer.find_module(fullname)
50157:         if loader is not None:
  364:             return loader
       
    2:     return None
       
       
>>>>>> def extend_path(path, name):
           """Extend a package's path.
       
           Intended use is to place the following code in a package's __init__.py:
       
               from pkgutil import extend_path
               __path__ = extend_path(__path__, __name__)
       
           This will add to the package's __path__ all subdirectories of
           directories on sys.path named after the package.  This is useful
           if one wants to distribute different parts of a single logical
           package as multiple directories.
       
           It also looks for *.pkg files beginning where * matches the name
           argument.  This feature is similar to *.pth files (see site.py),
           except that it doesn't special-case lines starting with 'import'.
           A *.pkg file is trusted at face value: apart from checking for
           duplicates, all entries found in a *.pkg file are added to the
           path, regardless of whether they are exist the filesystem.  (This
           is a feature.)
       
           If the input path is not a list (as is the case for frozen
           packages) it is returned unchanged.  The input path is not
           modified; an extended copy is returned.  Items are only appended
           to the copy at the end.
       
           It is assumed that sys.path is a sequence.  Items of sys.path that
           are not (unicode or 8-bit) strings referring to existing
           directories are ignored.  Unicode items of sys.path that cause
           errors when used as filenames may cause this function to raise an
           exception (in line with os.path.isdir() behavior).
           """
       
>>>>>>     if not isinstance(path, list):
               # This could happen e.g. when this is called from inside a
               # frozen package.  Return the path unchanged in that case.
>>>>>>         return path
       
>>>>>>     pname = os.path.join(*name.split('.')) # Reconstitute as relative path
           # Just in case os.extsep != '.'
>>>>>>     sname = os.extsep.join(name.split('.'))
>>>>>>     sname_pkg = sname + os.extsep + "pkg"
>>>>>>     init_py = "__init__" + os.extsep + "py"
       
>>>>>>     path = path[:] # Start with a copy of the existing path
       
>>>>>>     for dir in sys.path:
>>>>>>         if not isinstance(dir, basestring) or not os.path.isdir(dir):
>>>>>>             continue
>>>>>>         subdir = os.path.join(dir, pname)
               # XXX This may still add duplicate entries to path on
               # case-insensitive filesystems
>>>>>>         initfile = os.path.join(subdir, init_py)
>>>>>>         if subdir not in path and os.path.isfile(initfile):
>>>>>>             path.append(subdir)
               # XXX Is this the right thing for subpackages like zope.app?
               # It looks for a file named "zope.app.pkg"
>>>>>>         pkgfile = os.path.join(dir, sname_pkg)
>>>>>>         if os.path.isfile(pkgfile):
>>>>>>             try:
>>>>>>                 f = open(pkgfile)
>>>>>>             except IOError, msg:
>>>>>>                 sys.stderr.write("Can't open %s: %s\n" %
>>>>>>                                  (pkgfile, msg))
                   else:
>>>>>>                 for line in f:
>>>>>>                     line = line.rstrip('\n')
>>>>>>                     if not line or line.startswith('#'):
>>>>>>                         continue
>>>>>>                     path.append(line) # Don't check for existence!
>>>>>>                 f.close()
       
>>>>>>     return path
       
>>>>>> def get_data(package, resource):
           """Get a resource from a package.
       
           This is a wrapper round the PEP 302 loader get_data API. The package
           argument should be the name of a package, in standard module format
           (foo.bar). The resource argument should be in the form of a relative
           filename, using '/' as the path separator. The parent directory name '..'
           is not allowed, and nor is a rooted name (starting with a '/').
       
           The function returns a binary string, which is the contents of the
           specified resource.
       
           For packages located in the filesystem, which have already been imported,
           this is the rough equivalent of
       
               d = os.path.dirname(sys.modules[package].__file__)
               data = open(os.path.join(d, resource), 'rb').read()
       
           If the package cannot be located or loaded, or it uses a PEP 302 loader
           which does not support get_data(), then None is returned.
           """
       
    6:     loader = get_loader(package)
    6:     if loader is None or not hasattr(loader, 'get_data'):
>>>>>>         return None
    6:     mod = sys.modules.get(package) or loader.load_module(package)
    6:     if mod is None or not hasattr(mod, '__file__'):
>>>>>>         return None
       
           # Modify the resource name to be compatible with the loader.get_data
           # signature - an os.path format "filename" starting with the dirname of
           # the package's __file__
    6:     parts = resource.split('/')
    6:     parts.insert(0, os.path.dirname(mod.__file__))
    6:     resource_name = os.path.join(*parts)
    6:     return loader.get_data(resource_name)
