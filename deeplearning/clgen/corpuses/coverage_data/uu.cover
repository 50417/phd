       #! /usr/bin/env python
       
       # Copyright 1994 by Lance Ellinghouse
       # Cathedral City, California Republic, United States of America.
       #                        All Rights Reserved
       # Permission to use, copy, modify, and distribute this software and its
       # documentation for any purpose and without fee is hereby granted,
       # provided that the above copyright notice appear in all copies and that
       # both that copyright notice and this permission notice appear in
       # supporting documentation, and that the name of Lance Ellinghouse
       # not be used in advertising or publicity pertaining to distribution
       # of the software without specific, written prior permission.
       # LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO
       # THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
       # FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE
       # FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
       # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
       # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
       # OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
       #
       # Modified by Jack Jansen, CWI, July 1995:
       # - Use binascii module to do the actual line-by-line conversion
       #   between ascii and binary. This results in a 1000-fold speedup. The C
       #   version is still 5 times faster, though.
       # - Arguments more compliant with python standard
       
       """Implementation of the UUencode and UUdecode functions.
       
       encode(in_file, out_file [,name, mode])
       decode(in_file [, out_file, mode])
    1: """
       
    1: import binascii
    1: import os
    1: import sys
       
    1: __all__ = ["Error", "encode", "decode"]
       
    2: class Error(Exception):
    1:     pass
       
    1: def encode(in_file, out_file, name=None, mode=None):
           """Uuencode file"""
           #
           # If in_file is a pathname open it and change defaults
           #
    9:     opened_files = []
    9:     try:
    9:         if in_file == '-':
    1:             in_file = sys.stdin
    8:         elif isinstance(in_file, basestring):
    1:             if name is None:
>>>>>>                 name = os.path.basename(in_file)
    1:             if mode is None:
>>>>>>                 try:
>>>>>>                     mode = os.stat(in_file).st_mode
>>>>>>                 except AttributeError:
>>>>>>                     pass
    1:             in_file = open(in_file, 'rb')
    1:             opened_files.append(in_file)
               #
               # Open out_file if it is a pathname
               #
    9:         if out_file == '-':
    1:             out_file = sys.stdout
    8:         elif isinstance(out_file, basestring):
    1:             out_file = open(out_file, 'wb')
    1:             opened_files.append(out_file)
               #
               # Set defaults for name and mode
               #
    9:         if name is None:
    4:             name = '-'
    9:         if mode is None:
    5:             mode = 0666
               #
               # Write the data
               #
    9:         out_file.write('begin %o %s\n' % ((mode&0777),name))
    9:         data = in_file.read(45)
   27:         while len(data) > 0:
   18:             out_file.write(binascii.b2a_uu(data))
   18:             data = in_file.read(45)
    9:         out_file.write(' \nend\n')
           finally:
   11:         for f in opened_files:
    2:             f.close()
       
       
    1: def decode(in_file, out_file=None, mode=None, quiet=0):
           """Decode uuencoded file"""
           #
           # Open the input file, if needed.
           #
   30:     opened_files = []
   30:     if in_file == '-':
    1:         in_file = sys.stdin
   29:     elif isinstance(in_file, basestring):
    1:         in_file = open(in_file)
    1:         opened_files.append(in_file)
   30:     try:
               #
               # Read until a begin is encountered or we've exhausted the file
               #
   35:         while True:
   35:             hdr = in_file.readline()
   35:             if not hdr:
    4:                 raise Error('No valid begin line found in input file')
   31:             if not hdr.startswith('begin'):
    5:                 continue
   26:             hdrfields = hdr.split(' ', 2)
   26:             if len(hdrfields) == 3 and hdrfields[0] == 'begin':
   26:                 try:
   26:                     int(hdrfields[1], 8)
   26:                     break
>>>>>>                 except ValueError:
>>>>>>                     pass
   26:         if out_file is None:
    4:             out_file = hdrfields[2].rstrip()
    4:             if os.path.exists(out_file):
    1:                 raise Error('Cannot overwrite existing file: %s' % out_file)
   25:         if mode is None:
   25:             mode = int(hdrfields[1], 8)
               #
               # Open the output file
               #
   25:         if out_file == '-':
    1:             out_file = sys.stdout
   24:         elif isinstance(out_file, basestring):
    3:             fp = open(out_file, 'wb')
    3:             try:
    3:                 os.path.chmod(out_file, mode)
    3:             except AttributeError:
    3:                 pass
    3:             out_file = fp
    3:             opened_files.append(out_file)
               #
               # Main decoding loop
               #
   25:         s = in_file.readline()
   85:         while s and s.strip() != 'end':
   60:             try:
   60:                 data = binascii.a2b_uu(s)
    2:             except binascii.Error, v:
                       # Workaround for broken uuencoders by /Fredrik Lundh
    2:                 nbytes = (((ord(s[0])-32) & 63) * 4 + 5) // 3
    2:                 data = binascii.a2b_uu(s[:nbytes])
    2:                 if not quiet:
>>>>>>                     sys.stderr.write("Warning: %s\n" % v)
   60:             out_file.write(data)
   60:             s = in_file.readline()
   25:         if not s:
    1:             raise Error('Truncated input file')
           finally:
   34:         for f in opened_files:
    4:             f.close()
       
    1: def test():
           """uuencode/uudecode main program"""
       
>>>>>>     import optparse
>>>>>>     parser = optparse.OptionParser(usage='usage: %prog [-d] [-t] [input [output]]')
>>>>>>     parser.add_option('-d', '--decode', dest='decode', help='Decode (instead of encode)?', default=False, action='store_true')
>>>>>>     parser.add_option('-t', '--text', dest='text', help='data is text, encoded format unix-compatible text?', default=False, action='store_true')
       
>>>>>>     (options, args) = parser.parse_args()
>>>>>>     if len(args) > 2:
>>>>>>         parser.error('incorrect number of arguments')
>>>>>>         sys.exit(1)
       
>>>>>>     input = sys.stdin
>>>>>>     output = sys.stdout
>>>>>>     if len(args) > 0:
>>>>>>         input = args[0]
>>>>>>     if len(args) > 1:
>>>>>>         output = args[1]
       
>>>>>>     if options.decode:
>>>>>>         if options.text:
>>>>>>             if isinstance(output, basestring):
>>>>>>                 output = open(output, 'w')
                   else:
>>>>>>                 print sys.argv[0], ': cannot do -t to stdout'
>>>>>>                 sys.exit(1)
>>>>>>         decode(input, output)
           else:
>>>>>>         if options.text:
>>>>>>             if isinstance(input, basestring):
>>>>>>                 input = open(input, 'r')
                   else:
>>>>>>                 print sys.argv[0], ': cannot do -t from stdin'
>>>>>>                 sys.exit(1)
>>>>>>         encode(input, output)
       
    1: if __name__ == '__main__':
>>>>>>     test()
