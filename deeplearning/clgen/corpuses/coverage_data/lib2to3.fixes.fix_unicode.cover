       r"""Fixer for unicode.
       
       * Changes unicode to str and unichr to chr.
       
       * If "...\u..." is not unicode literal change it into "...\\u...".
       
       * Change u"..." into "...".
       
    1: """
       
    1: from ..pgen2 import token
    1: from .. import fixer_base
       
    1: _mapping = {u"unichr" : u"chr", u"unicode" : u"str"}
       
    2: class FixUnicode(fixer_base.BaseFix):
    1:     BM_compatible = True
    1:     PATTERN = "STRING | 'unicode' | 'unichr'"
       
    1:     def start_tree(self, tree, filename):
   31:         super(FixUnicode, self).start_tree(tree, filename)
   31:         self.unicode_literals = 'unicode_literals' in tree.future_features
       
    1:     def transform(self, node, results):
  257:         if node.type == token.NAME:
    4:             new = node.clone()
    4:             new.value = _mapping[node.value]
    4:             return new
  253:         elif node.type == token.STRING:
  253:             val = node.value
  253:             if not self.unicode_literals and val[0] in u'\'"' and u'\\' in val:
   17:                 val = ur'\\'.join([
   17:                     v.replace(u'\\u', ur'\\u').replace(u'\\U', ur'\\U')
   37:                     for v in val.split(ur'\\')
                       ])
  253:             if val[0] in u'uU':
   10:                 val = val[1:]
  253:             if val == node.value:
  242:                 return node
   11:             new = node.clone()
   11:             new.value = val
   11:             return new
