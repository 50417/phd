       # Tests universal newline support for both reading and parsing files.
    1: import unittest
    1: import os
    1: import sys
    1: from test import test_support
       
    1: if not hasattr(sys.stdin, 'newlines'):
>>>>>>     raise unittest.SkipTest, \
>>>>>>         "This Python does not have universal newline support"
       
    1: FATX = 'x' * (2**14)
       
       DATA_TEMPLATE = [
    1:     "line1=1",
           "line2='this is a very long line designed to go past the magic " +
               "hundred character limit that is inside fileobject.c and which " +
    1:         "is meant to speed up the common case, but we also want to test " +
    1:         "the uncommon case, naturally.'",
    1:     "def line3():pass",
    1:     "line4 = '%s'" % FATX,
           ]
       
    1: DATA_LF = "\n".join(DATA_TEMPLATE) + "\n"
    1: DATA_CR = "\r".join(DATA_TEMPLATE) + "\r"
    1: DATA_CRLF = "\r\n".join(DATA_TEMPLATE) + "\r\n"
       
       # Note that DATA_MIXED also tests the ability to recognize a lone \r
       # before end-of-file.
    1: DATA_MIXED = "\n".join(DATA_TEMPLATE) + "\r"
    5: DATA_SPLIT = [x + "\n" for x in DATA_TEMPLATE]
    1: del x
       
    2: class TestGenericUnivNewlines(unittest.TestCase):
           # use a class variable DATA to define the data to write to the file
           # and a class variable NEWLINE to set the expected newlines value
    1:     READMODE = 'U'
    1:     WRITEMODE = 'wb'
       
    1:     def setUp(self):
   26:         with open(test_support.TESTFN, self.WRITEMODE) as fp:
   26:             fp.write(self.DATA)
       
    1:     def tearDown(self):
   26:         try:
   26:             os.unlink(test_support.TESTFN)
>>>>>>         except:
>>>>>>             pass
       
    1:     def test_read(self):
    5:         with open(test_support.TESTFN, self.READMODE) as fp:
    5:             data = fp.read()
    5:         self.assertEqual(data, DATA_LF)
    5:         self.assertEqual(repr(fp.newlines), repr(self.NEWLINE))
       
    1:     def test_readlines(self):
    5:         with open(test_support.TESTFN, self.READMODE) as fp:
    5:             data = fp.readlines()
    5:         self.assertEqual(data, DATA_SPLIT)
    5:         self.assertEqual(repr(fp.newlines), repr(self.NEWLINE))
       
    1:     def test_readline(self):
    5:         with open(test_support.TESTFN, self.READMODE) as fp:
    5:             data = []
    5:             d = fp.readline()
   25:             while d:
   20:                 data.append(d)
   20:                 d = fp.readline()
    5:         self.assertEqual(data, DATA_SPLIT)
    5:         self.assertEqual(repr(fp.newlines), repr(self.NEWLINE))
       
    1:     def test_seek(self):
    5:         with open(test_support.TESTFN, self.READMODE) as fp:
    5:             fp.readline()
    5:             pos = fp.tell()
    5:             data = fp.readlines()
    5:             self.assertEqual(data, DATA_SPLIT[1:])
    5:             fp.seek(pos)
    5:             data = fp.readlines()
    5:         self.assertEqual(data, DATA_SPLIT[1:])
       
    1:     def test_execfile(self):
    5:         namespace = {}
    5:         with test_support.check_py3k_warnings():
    5:             execfile(test_support.TESTFN, namespace)
    5:         func = namespace['line3']
    5:         self.assertEqual(func.func_code.co_firstlineno, 3)
    5:         self.assertEqual(namespace['line4'], FATX)
       
       
    2: class TestNativeNewlines(TestGenericUnivNewlines):
    1:     NEWLINE = None
    1:     DATA = DATA_LF
    1:     READMODE = 'r'
    1:     WRITEMODE = 'w'
       
    2: class TestCRNewlines(TestGenericUnivNewlines):
    1:     NEWLINE = '\r'
    1:     DATA = DATA_CR
       
    2: class TestLFNewlines(TestGenericUnivNewlines):
    1:     NEWLINE = '\n'
    1:     DATA = DATA_LF
       
    2: class TestCRLFNewlines(TestGenericUnivNewlines):
    1:     NEWLINE = '\r\n'
    1:     DATA = DATA_CRLF
       
    1:     def test_tell(self):
    1:         with open(test_support.TESTFN, self.READMODE) as fp:
    1:             self.assertEqual(repr(fp.newlines), repr(None))
    1:             data = fp.readline()
    1:             pos = fp.tell()
    1:         self.assertEqual(repr(fp.newlines), repr(self.NEWLINE))
       
    2: class TestMixedNewlines(TestGenericUnivNewlines):
    1:     NEWLINE = ('\r', '\n')
    1:     DATA = DATA_MIXED
       
       
    1: def test_main():
    1:     test_support.run_unittest(
    1:         TestNativeNewlines,
    1:         TestCRNewlines,
    1:         TestLFNewlines,
    1:         TestCRLFNewlines,
    1:         TestMixedNewlines
            )
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
