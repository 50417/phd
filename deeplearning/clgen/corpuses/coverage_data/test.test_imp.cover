    1: import imp
    1: import unittest
    1: from test import test_support
       
    1: try:
    1:     import thread
>>>>>> except ImportError:
>>>>>>     thread = None
       
    2: @unittest.skipUnless(thread, 'threading not available')
    1: class LockTests(unittest.TestCase):
       
    1:     """Very basic test of import lock functions."""
       
    1:     def verify_lock_state(self, expected):
   52:         self.assertEqual(imp.lock_held(), expected,
   52:                              "expected imp.lock_held() to be %r" % expected)
    1:     def testLock(self):
    1:         LOOPS = 50
       
               # The import lock may already be held, e.g. if the test suite is run
               # via "import test.autotest".
    1:         lock_held_at_start = imp.lock_held()
    1:         self.verify_lock_state(lock_held_at_start)
       
   51:         for i in range(LOOPS):
   50:             imp.acquire_lock()
   50:             self.verify_lock_state(True)
       
   51:         for i in range(LOOPS):
   50:             imp.release_lock()
       
               # The original state should be restored now.
    1:         self.verify_lock_state(lock_held_at_start)
       
    1:         if not lock_held_at_start:
    1:             try:
    1:                 imp.release_lock()
    1:             except RuntimeError:
    1:                 pass
                   else:
>>>>>>                 self.fail("release_lock() without lock should raise "
                                   "RuntimeError")
       
    2: class ReloadTests(unittest.TestCase):
       
           """Very basic tests to make sure that imp.reload() operates just like
    1:     reload()."""
       
    1:     def test_source(self):
               # XXX (ncoghlan): It would be nice to use test_support.CleanImport
               # here, but that breaks because the os module registers some
               # handlers in copy_reg on import. Since CleanImport doesn't
               # revert that registration, the module is left in a broken
               # state after reversion. Reinitialising the module contents
               # and just reverting os.environ to its previous state is an OK
               # workaround
    1:         with test_support.EnvironmentVarGuard():
    1:             import os
    1:             imp.reload(os)
       
    1:     def test_extension(self):
    1:         with test_support.CleanImport('time'):
    1:             import time
    1:             imp.reload(time)
       
    1:     def test_builtin(self):
    1:         with test_support.CleanImport('marshal'):
    1:             import marshal
    1:             imp.reload(marshal)
       
       
    1: def test_main():
           tests = [
    1:         ReloadTests,
    1:         LockTests,
           ]
    1:     test_support.run_unittest(*tests)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
