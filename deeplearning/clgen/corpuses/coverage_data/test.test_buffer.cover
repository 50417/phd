       """Unit tests for buffer objects.
       
       For now, tests just new or changed functionality.
       
    1: """
       
    1: import copy
    1: import pickle
    1: import sys
    1: import unittest
    1: import warnings
    1: from test import test_support
       
    2: class BufferTests(unittest.TestCase):
       
    1:     def test_extended_getslice(self):
               # Test extended slicing by comparing with list slicing.
  258:         s = "".join(chr(c) for c in list(range(255, -1, -1)))
    1:         b = buffer(s)
    1:         indices = (0, None, 1, 3, 19, 300, -1, -2, -31, -300)
   11:         for start in indices:
  110:             for stop in indices:
                       # Skip step 0 (invalid)
 1000:                 for step in indices[1:]:
  900:                     self.assertEqual(b[start:stop:step],
  900:                                      s[start:stop:step])
       
    1:     def test_newbuffer_interface(self):
               # Test that the buffer object has the new buffer interface
               # as used by the memoryview object
  258:         s = "".join(chr(c) for c in list(range(255, -1, -1)))
    1:         b = buffer(s)
    1:         m = memoryview(b) # Should not raise an exception
    1:         self.assertEqual(m.tobytes(), s)
       
    1:     def test_large_buffer_size_and_offset(self):
    1:         data = bytearray('hola mundo')
    1:         buf = buffer(data, sys.maxsize, sys.maxsize)
    1:         self.assertEqual(buf[:4096], "")
       
    1:     def test_copy(self):
    1:         buf = buffer(b'abc')
    1:         with self.assertRaises(TypeError), warnings.catch_warnings():
    1:             warnings.filterwarnings('ignore', ".*buffer", DeprecationWarning)
    1:             copy.copy(buf)
       
    1:     @test_support.cpython_only
           def test_pickle(self):
    1:         buf = buffer(b'abc')
    3:         for proto in range(2):
    2:             with self.assertRaises(TypeError):
    2:                 pickle.dumps(buf, proto)
    1:         with test_support.check_py3k_warnings(
    1:                 (".*buffer", DeprecationWarning)):
    1:             pickle.dumps(buf, 2)
       
       
    1: def test_main():
    1:     with test_support.check_py3k_warnings(("buffer.. not supported",
    1:                                            DeprecationWarning)):
    1:         test_support.run_unittest(BufferTests)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
