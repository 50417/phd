       """distutils.command.build_clib
       
       Implements the Distutils 'build_clib' command, to build a C/C++ library
       that is included in the module distribution and needed by an extension
    1: module."""
       
    1: __revision__ = "$Id$"
       
       
       # XXX this module has *lots* of code ripped-off quite transparently from
       # build_ext.py -- not surprisingly really, as the work required to build
       # a static library from a collection of C source files is not really all
       # that different from what's required to build a shared object file from
       # a collection of C source files.  Nevertheless, I haven't done the
       # necessary refactoring to account for the overlap in code between the
       # two modules, mainly because a number of subtle details changed in the
       # cut 'n paste.  Sigh.
       
    1: import os
    1: from distutils.core import Command
    1: from distutils.errors import DistutilsSetupError
    1: from distutils.sysconfig import customize_compiler
    1: from distutils import log
       
    1: def show_compilers():
>>>>>>     from distutils.ccompiler import show_compilers
>>>>>>     show_compilers()
       
       
    2: class build_clib(Command):
       
    1:     description = "build C/C++ libraries used by Python extensions"
       
           user_options = [
               ('build-clib=', 'b',
    1:          "directory to build C/C++ libraries to"),
               ('build-temp=', 't',
    1:          "directory to put temporary build by-products"),
               ('debug', 'g',
    1:          "compile with debugging information"),
               ('force', 'f',
    1:          "forcibly build everything (ignore file timestamps)"),
               ('compiler=', 'c',
    1:          "specify the compiler type"),
               ]
       
    1:     boolean_options = ['debug', 'force']
       
           help_options = [
    1:         ('help-compiler', None,
    1:          "list available compilers", show_compilers),
               ]
       
    1:     def initialize_options(self):
    5:         self.build_clib = None
    5:         self.build_temp = None
       
               # List of libraries to build
    5:         self.libraries = None
       
               # Compilation options for all libraries
    5:         self.include_dirs = None
    5:         self.define = None
    5:         self.undef = None
    5:         self.debug = None
    5:         self.force = 0
    5:         self.compiler = None
       
       
    1:     def finalize_options(self):
               # This might be confusing: both build-clib and build-temp default
               # to build-temp as defined by the "build" command.  This is because
               # I think that C libraries are really just temporary build
               # by-products, at least from the point of view of building Python
               # extensions -- but I want to keep my options open.
    3:         self.set_undefined_options('build',
    3:                                    ('build_temp', 'build_clib'),
    3:                                    ('build_temp', 'build_temp'),
    3:                                    ('compiler', 'compiler'),
    3:                                    ('debug', 'debug'),
    3:                                    ('force', 'force'))
       
    3:         self.libraries = self.distribution.libraries
    3:         if self.libraries:
    1:             self.check_library_list(self.libraries)
       
    2:         if self.include_dirs is None:
    1:             self.include_dirs = self.distribution.include_dirs or []
    2:         if isinstance(self.include_dirs, str):
    1:             self.include_dirs = self.include_dirs.split(os.pathsep)
       
               # XXX same as for build_ext -- what about 'self.define' and
               # 'self.undef' ?
       
    1:     def run(self):
    1:         if not self.libraries:
>>>>>>             return
       
               # Yech -- this is cut 'n pasted from build_ext.py!
    1:         from distutils.ccompiler import new_compiler
    1:         self.compiler = new_compiler(compiler=self.compiler,
    1:                                      dry_run=self.dry_run,
    1:                                      force=self.force)
    1:         customize_compiler(self.compiler)
       
    1:         if self.include_dirs is not None:
>>>>>>             self.compiler.set_include_dirs(self.include_dirs)
    1:         if self.define is not None:
                   # 'define' option is a list of (name,value) tuples
>>>>>>             for (name,value) in self.define:
>>>>>>                 self.compiler.define_macro(name, value)
    1:         if self.undef is not None:
>>>>>>             for macro in self.undef:
>>>>>>                 self.compiler.undefine_macro(macro)
       
    1:         self.build_libraries(self.libraries)
       
       
    1:     def check_library_list(self, libraries):
               """Ensure that the list of libraries is valid.
       
               `library` is presumably provided as a command option 'libraries'.
               This method checks that it is a list of 2-tuples, where the tuples
               are (library_name, build_info_dict).
       
               Raise DistutilsSetupError if the structure is invalid anywhere;
               just returns otherwise.
               """
   12:         if not isinstance(libraries, list):
    2:             raise DistutilsSetupError, \
    2:                   "'libraries' option must be a list of tuples"
       
   19:         for lib in libraries:
   13:             if not isinstance(lib, tuple) and len(lib) != 2:
    1:                 raise DistutilsSetupError, \
    1:                       "each element of 'libraries' must a 2-tuple"
       
   12:             name, build_info = lib
       
   12:             if not isinstance(name, str):
    1:                 raise DistutilsSetupError, \
    1:                       "first element of each tuple in 'libraries' " + \
    1:                       "must be a string (the library name)"
   11:             if '/' in name or (os.sep != '/' and os.sep in name):
>>>>>>                 raise DistutilsSetupError, \
>>>>>>                       ("bad library name '%s': " +
>>>>>>                        "may not contain directory separators") % \
>>>>>>                       lib[0]
       
   11:             if not isinstance(build_info, dict):
    2:                 raise DistutilsSetupError, \
    2:                       "second element of each tuple in 'libraries' " + \
    2:                       "must be a dictionary (build info)"
       
    1:     def get_library_names(self):
               # Assume the library list is valid -- 'check_library_list()' is
               # called from 'finalize_options()', so it should be!
>>>>>>         if not self.libraries:
>>>>>>             return None
       
>>>>>>         lib_names = []
>>>>>>         for (lib_name, build_info) in self.libraries:
>>>>>>             lib_names.append(lib_name)
>>>>>>         return lib_names
       
       
    1:     def get_source_files(self):
    5:         self.check_library_list(self.libraries)
    5:         filenames = []
    9:         for (lib_name, build_info) in self.libraries:
    6:             sources = build_info.get('sources')
    6:             if sources is None or not isinstance(sources, (list, tuple)):
    2:                 raise DistutilsSetupError, \
    2:                       ("in 'libraries' option (library '%s'), "
                              "'sources' must be present and must be "
    2:                        "a list of source filenames") % lib_name
       
    4:             filenames.extend(sources)
    3:         return filenames
       
    1:     def build_libraries(self, libraries):
    7:         for (lib_name, build_info) in libraries:
    4:             sources = build_info.get('sources')
    4:             if sources is None or not isinstance(sources, (list, tuple)):
    1:                 raise DistutilsSetupError, \
                             ("in 'libraries' option (library '%s'), " +
    1:                        "'sources' must be present and must be " +
    1:                        "a list of source filenames") % lib_name
    3:             sources = list(sources)
       
    3:             log.info("building '%s' library", lib_name)
       
                   # First, compile the source code to object files in the library
                   # directory.  (This should probably change to putting object
                   # files in a temporary build directory.)
    3:             macros = build_info.get('macros')
    3:             include_dirs = build_info.get('include_dirs')
    3:             objects = self.compiler.compile(sources,
    3:                                             output_dir=self.build_temp,
    3:                                             macros=macros,
    3:                                             include_dirs=include_dirs,
    3:                                             debug=self.debug)
       
                   # Now "link" the object files together into a static library.
                   # (On Unix at least, this isn't really linking -- it just
                   # builds an archive.  Whatever.)
    3:             self.compiler.create_static_lib(objects, lib_name,
    3:                                             output_dir=self.build_clib,
    3:                                             debug=self.debug)
