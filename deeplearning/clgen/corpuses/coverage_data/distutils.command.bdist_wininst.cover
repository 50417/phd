       """distutils.command.bdist_wininst
       
       Implements the Distutils 'bdist_wininst' command: create a windows installer
    1: exe-program."""
       
    1: __revision__ = "$Id$"
       
    1: import sys
    1: import os
    1: import string
       
    1: from sysconfig import get_python_version
       
    1: from distutils.core import Command
    1: from distutils.dir_util import remove_tree
    1: from distutils.errors import DistutilsOptionError, DistutilsPlatformError
    1: from distutils import log
    1: from distutils.util import get_platform
       
    2: class bdist_wininst (Command):
       
    1:     description = "create an executable installer for MS Windows"
       
           user_options = [('bdist-dir=', None,
    1:                      "temporary directory for creating the distribution"),
    1:                     ('plat-name=', 'p',
    1:                      "platform name to embed in generated filenames "
    1:                      "(default: %s)" % get_platform()),
    1:                     ('keep-temp', 'k',
    1:                      "keep the pseudo-installation tree around after " +
    1:                      "creating the distribution archive"),
    1:                     ('target-version=', None,
    1:                      "require a specific python version" +
    1:                      " on the target system"),
                           ('no-target-compile', 'c',
    1:                      "do not compile .py to .pyc on the target system"),
                           ('no-target-optimize', 'o',
    1:                      "do not compile .py to .pyo (optimized)"
                            "on the target system"),
                           ('dist-dir=', 'd',
    1:                      "directory to put final built distributions in"),
                           ('bitmap=', 'b',
    1:                      "bitmap to use for the installer instead of python-powered logo"),
                           ('title=', 't',
    1:                      "title to display on the installer background instead of default"),
                           ('skip-build', None,
    1:                      "skip rebuilding everything (for testing/debugging)"),
                           ('install-script=', None,
    1:                      "basename of installation script to be run after"
                            "installation or before deinstallation"),
                           ('pre-install-script=', None,
    1:                      "Fully qualified filename of a script to be run before "
                            "any files are installed.  This script need not be in the "
                            "distribution"),
                           ('user-access-control=', None,
    1:                      "specify Vista's UAC handling - 'none'/default=no "
                            "handling, 'auto'=use UAC if target Python installed for "
                            "all users, 'force'=always use UAC"),
                          ]
       
    1:     boolean_options = ['keep-temp', 'no-target-compile', 'no-target-optimize',
    1:                        'skip-build']
       
    1:     def initialize_options (self):
    2:         self.bdist_dir = None
    2:         self.plat_name = None
    2:         self.keep_temp = 0
    2:         self.no_target_compile = 0
    2:         self.no_target_optimize = 0
    2:         self.target_version = None
    2:         self.dist_dir = None
    2:         self.bitmap = None
    2:         self.title = None
    2:         self.skip_build = None
    2:         self.install_script = None
    2:         self.pre_install_script = None
    2:         self.user_access_control = None
       
           # initialize_options()
       
       
    1:     def finalize_options (self):
    2:         self.set_undefined_options('bdist', ('skip_build', 'skip_build'))
       
    2:         if self.bdist_dir is None:
    2:             if self.skip_build and self.plat_name:
                       # If build is skipped and plat_name is overridden, bdist will
                       # not see the correct 'plat_name' - so set that up manually.
>>>>>>                 bdist = self.distribution.get_command_obj('bdist')
>>>>>>                 bdist.plat_name = self.plat_name
                       # next the command will be initialized using that name
    2:             bdist_base = self.get_finalized_command('bdist').bdist_base
    2:             self.bdist_dir = os.path.join(bdist_base, 'wininst')
       
    2:         if not self.target_version:
    2:             self.target_version = ""
       
    2:         if not self.skip_build and self.distribution.has_ext_modules():
>>>>>>             short_version = get_python_version()
>>>>>>             if self.target_version and self.target_version != short_version:
>>>>>>                 raise DistutilsOptionError, \
>>>>>>                       "target version can only be %s, or the '--skip-build'" \
>>>>>>                       " option must be specified" % (short_version,)
>>>>>>             self.target_version = short_version
       
    2:         self.set_undefined_options('bdist',
    2:                                    ('dist_dir', 'dist_dir'),
    2:                                    ('plat_name', 'plat_name'),
                                         )
       
    2:         if self.install_script:
>>>>>>             for script in self.distribution.scripts:
>>>>>>                 if self.install_script == os.path.basename(script):
>>>>>>                     break
                   else:
>>>>>>                 raise DistutilsOptionError, \
>>>>>>                       "install_script '%s' not found in scripts" % \
>>>>>>                       self.install_script
           # finalize_options()
       
       
    1:     def run (self):
>>>>>>         if (sys.platform != "win32" and
>>>>>>             (self.distribution.has_ext_modules() or
>>>>>>              self.distribution.has_c_libraries())):
>>>>>>             raise DistutilsPlatformError \
>>>>>>                   ("distribution contains extensions and/or C libraries; "
                          "must be compiled on a Windows 32 platform")
       
>>>>>>         if not self.skip_build:
>>>>>>             self.run_command('build')
       
>>>>>>         install = self.reinitialize_command('install', reinit_subcommands=1)
>>>>>>         install.root = self.bdist_dir
>>>>>>         install.skip_build = self.skip_build
>>>>>>         install.warn_dir = 0
>>>>>>         install.plat_name = self.plat_name
       
>>>>>>         install_lib = self.reinitialize_command('install_lib')
               # we do not want to include pyc or pyo files
>>>>>>         install_lib.compile = 0
>>>>>>         install_lib.optimize = 0
       
>>>>>>         if self.distribution.has_ext_modules():
                   # If we are building an installer for a Python version other
                   # than the one we are currently running, then we need to ensure
                   # our build_lib reflects the other Python version rather than ours.
                   # Note that for target_version!=sys.version, we must have skipped the
                   # build step, so there is no issue with enforcing the build of this
                   # version.
>>>>>>             target_version = self.target_version
>>>>>>             if not target_version:
>>>>>>                 assert self.skip_build, "Should have already checked this"
>>>>>>                 target_version = sys.version[0:3]
>>>>>>             plat_specifier = ".%s-%s" % (self.plat_name, target_version)
>>>>>>             build = self.get_finalized_command('build')
>>>>>>             build.build_lib = os.path.join(build.build_base,
>>>>>>                                            'lib' + plat_specifier)
       
               # Use a custom scheme for the zip-file, because we have to decide
               # at installation time which scheme to use.
>>>>>>         for key in ('purelib', 'platlib', 'headers', 'scripts', 'data'):
>>>>>>             value = string.upper(key)
>>>>>>             if key == 'headers':
>>>>>>                 value = value + '/Include/$dist_name'
>>>>>>             setattr(install,
>>>>>>                     'install_' + key,
>>>>>>                     value)
       
>>>>>>         log.info("installing to %s", self.bdist_dir)
>>>>>>         install.ensure_finalized()
       
               # avoid warning of 'install_lib' about installing
               # into a directory not in sys.path
>>>>>>         sys.path.insert(0, os.path.join(self.bdist_dir, 'PURELIB'))
       
>>>>>>         install.run()
       
>>>>>>         del sys.path[0]
       
               # And make an archive relative to the root of the
               # pseudo-installation tree.
>>>>>>         from tempfile import mktemp
>>>>>>         archive_basename = mktemp()
>>>>>>         fullname = self.distribution.get_fullname()
>>>>>>         arcname = self.make_archive(archive_basename, "zip",
>>>>>>                                     root_dir=self.bdist_dir)
               # create an exe containing the zip-file
>>>>>>         self.create_exe(arcname, fullname, self.bitmap)
>>>>>>         if self.distribution.has_ext_modules():
>>>>>>             pyversion = get_python_version()
               else:
>>>>>>             pyversion = 'any'
>>>>>>         self.distribution.dist_files.append(('bdist_wininst', pyversion,
>>>>>>                                              self.get_installer_filename(fullname)))
               # remove the zip-file again
>>>>>>         log.debug("removing temporary file '%s'", arcname)
>>>>>>         os.remove(arcname)
       
>>>>>>         if not self.keep_temp:
>>>>>>             remove_tree(self.bdist_dir, dry_run=self.dry_run)
       
           # run()
       
    1:     def get_inidata (self):
               # Return data describing the installation.
       
>>>>>>         lines = []
>>>>>>         metadata = self.distribution.metadata
       
               # Write the [metadata] section.
>>>>>>         lines.append("[metadata]")
       
               # 'info' will be displayed in the installer's dialog box,
               # describing the items to be installed.
>>>>>>         info = (metadata.long_description or '') + '\n'
       
               # Escape newline characters
>>>>>>         def escape(s):
>>>>>>             return string.replace(s, "\n", "\\n")
       
>>>>>>         for name in ["author", "author_email", "description", "maintainer",
>>>>>>                      "maintainer_email", "name", "url", "version"]:
>>>>>>             data = getattr(metadata, name, "")
>>>>>>             if data:
>>>>>>                 info = info + ("\n    %s: %s" % \
>>>>>>                                (string.capitalize(name), escape(data)))
>>>>>>                 lines.append("%s=%s" % (name, escape(data)))
       
               # The [setup] section contains entries controlling
               # the installer runtime.
>>>>>>         lines.append("\n[Setup]")
>>>>>>         if self.install_script:
>>>>>>             lines.append("install_script=%s" % self.install_script)
>>>>>>         lines.append("info=%s" % escape(info))
>>>>>>         lines.append("target_compile=%d" % (not self.no_target_compile))
>>>>>>         lines.append("target_optimize=%d" % (not self.no_target_optimize))
>>>>>>         if self.target_version:
>>>>>>             lines.append("target_version=%s" % self.target_version)
>>>>>>         if self.user_access_control:
>>>>>>             lines.append("user_access_control=%s" % self.user_access_control)
       
>>>>>>         title = self.title or self.distribution.get_fullname()
>>>>>>         lines.append("title=%s" % escape(title))
>>>>>>         import time
>>>>>>         import distutils
>>>>>>         build_info = "Built %s with distutils-%s" % \
>>>>>>                      (time.ctime(time.time()), distutils.__version__)
>>>>>>         lines.append("build_info=%s" % build_info)
>>>>>>         return string.join(lines, "\n")
       
           # get_inidata()
       
    1:     def create_exe (self, arcname, fullname, bitmap=None):
>>>>>>         import struct
       
>>>>>>         self.mkpath(self.dist_dir)
       
>>>>>>         cfgdata = self.get_inidata()
       
>>>>>>         installer_name = self.get_installer_filename(fullname)
>>>>>>         self.announce("creating %s" % installer_name)
       
>>>>>>         if bitmap:
>>>>>>             bitmapdata = open(bitmap, "rb").read()
>>>>>>             bitmaplen = len(bitmapdata)
               else:
>>>>>>             bitmaplen = 0
       
>>>>>>         file = open(installer_name, "wb")
>>>>>>         file.write(self.get_exe_bytes())
>>>>>>         if bitmap:
>>>>>>             file.write(bitmapdata)
       
               # Convert cfgdata from unicode to ascii, mbcs encoded
>>>>>>         try:
>>>>>>             unicode
>>>>>>         except NameError:
>>>>>>             pass
               else:
>>>>>>             if isinstance(cfgdata, unicode):
>>>>>>                 cfgdata = cfgdata.encode("mbcs")
       
               # Append the pre-install script
>>>>>>         cfgdata = cfgdata + "\0"
>>>>>>         if self.pre_install_script:
>>>>>>             script_data = open(self.pre_install_script, "r").read()
>>>>>>             cfgdata = cfgdata + script_data + "\n\0"
               else:
                   # empty pre-install script
>>>>>>             cfgdata = cfgdata + "\0"
>>>>>>         file.write(cfgdata)
       
               # The 'magic number' 0x1234567B is used to make sure that the
               # binary layout of 'cfgdata' is what the wininst.exe binary
               # expects.  If the layout changes, increment that number, make
               # the corresponding changes to the wininst.exe sources, and
               # recompile them.
>>>>>>         header = struct.pack("<iii",
>>>>>>                              0x1234567B,       # tag
>>>>>>                              len(cfgdata),     # length
>>>>>>                              bitmaplen,        # number of bytes in bitmap
                                    )
>>>>>>         file.write(header)
>>>>>>         file.write(open(arcname, "rb").read())
       
           # create_exe()
       
    1:     def get_installer_filename(self, fullname):
               # Factored out to allow overriding in subclasses
>>>>>>         if self.target_version:
                   # if we create an installer for a specific python version,
                   # it's better to include this in the name
>>>>>>             installer_name = os.path.join(self.dist_dir,
>>>>>>                                           "%s.%s-py%s.exe" %
>>>>>>                                            (fullname, self.plat_name, self.target_version))
               else:
>>>>>>             installer_name = os.path.join(self.dist_dir,
>>>>>>                                           "%s.%s.exe" % (fullname, self.plat_name))
>>>>>>         return installer_name
           # get_installer_filename()
       
    1:     def get_exe_bytes (self):
    1:         from distutils.msvccompiler import get_build_version
               # If a target-version other than the current version has been
               # specified, then using the MSVC version from *this* build is no good.
               # Without actually finding and executing the target version and parsing
               # its sys.version, we just hard-code our knowledge of old versions.
               # NOTE: Possible alternative is to allow "--target-version" to
               # specify a Python executable rather than a simple version string.
               # We can then execute this program to obtain any info we need, such
               # as the real sys.version string for the build.
    1:         cur_version = get_python_version()
    1:         if self.target_version and self.target_version != cur_version:
                   # If the target version is *later* than us, then we assume they
                   # use what we use
                   # string compares seem wrong, but are what sysconfig.py itself uses
>>>>>>             if self.target_version > cur_version:
>>>>>>                 bv = get_build_version()
                   else:
>>>>>>                 if self.target_version < "2.4":
>>>>>>                     bv = 6.0
                       else:
>>>>>>                     bv = 7.1
               else:
                   # for current version - use authoritative check.
    1:             bv = get_build_version()
       
               # wininst-x.y.exe is in the same directory as this file
    1:         directory = os.path.dirname(__file__)
               # we must use a wininst-x.y.exe built with the same C compiler
               # used for python.  XXX What about mingw, borland, and so on?
       
               # if plat_name starts with "win" but is not "win32"
               # we want to strip "win" and leave the rest (e.g. -amd64)
               # for all other cases, we don't want any suffix
    1:         if self.plat_name != 'win32' and self.plat_name[:3] == 'win':
>>>>>>             sfix = self.plat_name[3:]
               else:
    1:             sfix = ''
       
    1:         filename = os.path.join(directory, "wininst-%.1f%s.exe" % (bv, sfix))
    1:         f = open(filename, "rb")
    1:         try:
    1:             return f.read()
               finally:
    1:             f.close()
       # class bdist_wininst
