       """distutils.ccompiler
       
       Contains CCompiler, an abstract base class that defines the interface
    1: for the Distutils compiler abstraction model."""
       
    1: __revision__ = "$Id$"
       
    1: import sys
    1: import os
    1: import re
       
    1: from distutils.errors import (CompileError, LinkError, UnknownFileError,
                                     DistutilsPlatformError, DistutilsModuleError)
    1: from distutils.spawn import spawn
    1: from distutils.file_util import move_file
    1: from distutils.dir_util import mkpath
    1: from distutils.dep_util import newer_group
    1: from distutils.util import split_quoted, execute
    1: from distutils import log
       # following import is for backward compatibility
    1: from distutils.sysconfig import customize_compiler
       
    2: class CCompiler:
           """Abstract base class to define the interface that must be implemented
           by real compiler classes.  Also has some utility methods used by
           several compiler classes.
       
           The basic idea behind a compiler abstraction class is that each
           instance can be used for all the compile/link steps in building a
           single project.  Thus, attributes common to all of those compile and
           link steps -- include directories, macros to define, libraries to link
           against, etc. -- are attributes of the compiler instance.  To allow for
           variability in how individual files are treated, most of those
           attributes may be varied on a per-compilation or per-link basis.
    1:     """
       
           # 'compiler_type' is a class attribute that identifies this class.  It
           # keeps code that wants to know what kind of compiler it's dealing with
           # from having to import all possible compiler classes just to do an
           # 'isinstance'.  In concrete CCompiler subclasses, 'compiler_type'
           # should really, really be one of the keys of the 'compiler_class'
           # dictionary (see below -- used by the 'new_compiler()' factory
           # function) -- authors of new compiler interface classes are
           # responsible for updating 'compiler_class'!
    1:     compiler_type = None
       
           # XXX things not handled by this compiler abstraction model:
           #   * client can't provide additional options for a compiler,
           #     e.g. warning, optimization, debugging flags.  Perhaps this
           #     should be the domain of concrete compiler abstraction classes
           #     (UnixCCompiler, MSVCCompiler, etc.) -- or perhaps the base
           #     class should have methods for the common ones.
           #   * can't completely override the include or library searchg
           #     path, ie. no "cc -I -Idir1 -Idir2" or "cc -L -Ldir1 -Ldir2".
           #     I'm not sure how widely supported this is even by Unix
           #     compilers, much less on other platforms.  And I'm even less
           #     sure how useful it is; maybe for cross-compiling, but
           #     support for that is a ways off.  (And anyways, cross
           #     compilers probably have a dedicated binary with the
           #     right paths compiled in.  I hope.)
           #   * can't do really freaky things with the library list/library
           #     dirs, e.g. "-Ldir1 -lfoo -Ldir2 -lfoo" to link against
           #     different versions of libfoo.a in different locations.  I
           #     think this is useless without the ability to null out the
           #     library search path anyways.
       
       
           # Subclasses that rely on the standard filename generation methods
           # implemented below should override these; see the comment near
           # those methods ('object_filenames()' et. al.) for details:
    1:     src_extensions = None               # list of strings
    1:     obj_extension = None                # string
    1:     static_lib_extension = None
    1:     shared_lib_extension = None         # string
    1:     static_lib_format = None            # format string
    1:     shared_lib_format = None            # prob. same as static_lib_format
    1:     exe_extension = None                # string
       
           # Default language settings. language_map is used to detect a source
           # file or Extension target language, checking source filenames.
           # language_order is used to detect the language precedence, when deciding
           # what language to use when mixing source types. For example, if some
           # extension has two files with ".c" extension, and one with ".cpp", it
           # is still linked as c++.
    1:     language_map = {".c"   : "c",
    1:                     ".cc"  : "c++",
    1:                     ".cpp" : "c++",
    1:                     ".cxx" : "c++",
    1:                     ".m"   : "objc",
                          }
    1:     language_order = ["c++", "objc", "c"]
       
    1:     def __init__ (self, verbose=0, dry_run=0, force=0):
   14:         self.dry_run = dry_run
   14:         self.force = force
   14:         self.verbose = verbose
       
               # 'output_dir': a common output directory for object, library,
               # shared object, and shared library files
   14:         self.output_dir = None
       
               # 'macros': a list of macro definitions (or undefinitions).  A
               # macro definition is a 2-tuple (name, value), where the value is
               # either a string or None (no explicit value).  A macro
               # undefinition is a 1-tuple (name,).
   14:         self.macros = []
       
               # 'include_dirs': a list of directories to search for include files
   14:         self.include_dirs = []
       
               # 'libraries': a list of libraries to include in any link
               # (library names, not filenames: eg. "foo" not "libfoo.a")
   14:         self.libraries = []
       
               # 'library_dirs': a list of directories to search for libraries
   14:         self.library_dirs = []
       
               # 'runtime_library_dirs': a list of directories to search for
               # shared libraries/objects at runtime
   14:         self.runtime_library_dirs = []
       
               # 'objects': a list of object files (or similar, such as explicitly
               # named library files) to include on any link
   14:         self.objects = []
       
  118:         for key in self.executables.keys():
  104:             self.set_executable(key, self.executables[key])
       
    1:     def set_executables(self, **args):
               """Define the executables (and options for them) that will be run
               to perform the various stages of compilation.  The exact set of
               executables that may be specified here depends on the compiler
               class (via the 'executables' class attribute), but most will have:
                 compiler      the C/C++ compiler
                 linker_so     linker used to create shared objects and libraries
                 linker_exe    linker used to create binary executables
                 archiver      static library creator
       
               On platforms with a command-line (Unix, DOS/Windows), each of these
               is a string that will be split into executable name and (optional)
               list of arguments.  (Splitting the string is done similarly to how
               Unix shells operate: words are delimited by spaces, but quotes and
               backslashes can override this.  See
               'distutils.util.split_quoted()'.)
               """
       
               # Note that some CCompiler implementation classes will define class
               # attributes 'cpp', 'cc', etc. with hard-coded executable names;
               # this is appropriate when a compiler class is for exactly one
               # compiler/OS combination (eg. MSVCCompiler).  Other compiler
               # classes (UnixCCompiler, in particular) are driven by information
               # discovered at run-time, since there are many different ways to do
               # basically the same things with Unix C compilers.
       
   96:         for key in args.keys():
   84:             if key not in self.executables:
>>>>>>                 raise ValueError, \
>>>>>>                       "unknown executable '%s' for class %s" % \
>>>>>>                       (key, self.__class__.__name__)
   84:             self.set_executable(key, args[key])
       
    1:     def set_executable(self, key, value):
  188:         if isinstance(value, str):
   84:             setattr(self, key, split_quoted(value))
               else:
  104:             setattr(self, key, value)
       
    1:     def _find_macro(self, name):
>>>>>>         i = 0
>>>>>>         for defn in self.macros:
>>>>>>             if defn[0] == name:
>>>>>>                 return i
>>>>>>             i = i + 1
>>>>>>         return None
       
    1:     def _check_macro_definitions(self, definitions):
               """Ensures that every element of 'definitions' is a valid macro
               definition, ie. either (name,value) 2-tuple or a (name,) tuple.  Do
               nothing if all definitions are OK, raise TypeError otherwise.
               """
>>>>>>         for defn in definitions:
>>>>>>             if not (isinstance(defn, tuple) and
>>>>>>                     (len (defn) == 1 or
>>>>>>                      (len (defn) == 2 and
>>>>>>                       (isinstance(defn[1], str) or defn[1] is None))) and
>>>>>>                     isinstance(defn[0], str)):
>>>>>>                 raise TypeError, \
                             ("invalid macro definition '%s': " % defn) + \
>>>>>>                       "must be tuple (string,), (string, string), or " + \
>>>>>>                       "(string, None)"
       
       
           # -- Bookkeeping methods -------------------------------------------
       
    1:     def define_macro(self, name, value=None):
               """Define a preprocessor macro for all compilations driven by this
               compiler object.  The optional parameter 'value' should be a
               string; if it is not supplied, then the macro will be defined
               without an explicit value and the exact outcome depends on the
               compiler used (XXX true? does ANSI say anything about this?)
               """
               # Delete from the list of macro definitions/undefinitions if
               # already there (so that this one will take precedence).
>>>>>>         i = self._find_macro (name)
>>>>>>         if i is not None:
>>>>>>             del self.macros[i]
       
>>>>>>         defn = (name, value)
>>>>>>         self.macros.append (defn)
       
    1:     def undefine_macro(self, name):
               """Undefine a preprocessor macro for all compilations driven by
               this compiler object.  If the same macro is defined by
               'define_macro()' and undefined by 'undefine_macro()' the last call
               takes precedence (including multiple redefinitions or
               undefinitions).  If the macro is redefined/undefined on a
               per-compilation basis (ie. in the call to 'compile()'), then that
               takes precedence.
               """
               # Delete from the list of macro definitions/undefinitions if
               # already there (so that this one will take precedence).
>>>>>>         i = self._find_macro (name)
>>>>>>         if i is not None:
>>>>>>             del self.macros[i]
       
>>>>>>         undefn = (name,)
>>>>>>         self.macros.append (undefn)
       
    1:     def add_include_dir(self, dir):
               """Add 'dir' to the list of directories that will be searched for
               header files.  The compiler is instructed to search directories in
               the order in which they are supplied by successive calls to
               'add_include_dir()'.
               """
>>>>>>         self.include_dirs.append (dir)
       
    1:     def set_include_dirs(self, dirs):
               """Set the list of directories that will be searched to 'dirs' (a
               list of strings).  Overrides any preceding calls to
               'add_include_dir()'; subsequence calls to 'add_include_dir()' add
               to the list passed to 'set_include_dirs()'.  This does not affect
               any list of standard include directories that the compiler may
               search by default.
               """
    7:         self.include_dirs = dirs[:]
       
    1:     def add_library(self, libname):
               """Add 'libname' to the list of libraries that will be included in
               all links driven by this compiler object.  Note that 'libname'
               should *not* be the name of a file containing a library, but the
               name of the library itself: the actual filename will be inferred by
               the linker, the compiler, or the compiler class (depending on the
               platform).
       
               The linker will be instructed to link against libraries in the
               order they were supplied to 'add_library()' and/or
               'set_libraries()'.  It is perfectly valid to duplicate library
               names; the linker will be instructed to link against libraries as
               many times as they are mentioned.
               """
>>>>>>         self.libraries.append (libname)
       
    1:     def set_libraries(self, libnames):
               """Set the list of libraries to be included in all links driven by
               this compiler object to 'libnames' (a list of strings).  This does
               not affect any standard system libraries that the linker may
               include by default.
               """
    7:         self.libraries = libnames[:]
       
       
    1:     def add_library_dir(self, dir):
               """Add 'dir' to the list of directories that will be searched for
               libraries specified to 'add_library()' and 'set_libraries()'.  The
               linker will be instructed to search for libraries in the order they
               are supplied to 'add_library_dir()' and/or 'set_library_dirs()'.
               """
>>>>>>         self.library_dirs.append(dir)
       
    1:     def set_library_dirs(self, dirs):
               """Set the list of library search directories to 'dirs' (a list of
               strings).  This does not affect any standard library search path
               that the linker may search by default.
               """
    7:         self.library_dirs = dirs[:]
       
    1:     def add_runtime_library_dir(self, dir):
               """Add 'dir' to the list of directories that will be searched for
               shared libraries at runtime.
               """
>>>>>>         self.runtime_library_dirs.append(dir)
       
    1:     def set_runtime_library_dirs(self, dirs):
               """Set the list of directories to search for shared libraries at
               runtime to 'dirs' (a list of strings).  This does not affect any
               standard search path that the runtime linker may search by
               default.
               """
    7:         self.runtime_library_dirs = dirs[:]
       
    1:     def add_link_object(self, object):
               """Add 'object' to the list of object files (or analogues, such as
               explicitly named library files or the output of "resource
               compilers") to be included in every link driven by this compiler
               object.
               """
>>>>>>         self.objects.append(object)
       
    1:     def set_link_objects(self, objects):
               """Set the list of object files (or analogues) to be included in
               every link to 'objects'.  This does not affect any standard object
               files that the linker may include by default (such as system
               libraries).
               """
>>>>>>         self.objects = objects[:]
       
       
           # -- Private utility methods --------------------------------------
           # (here for the convenience of subclasses)
       
           # Helper method to prep compiler in subclass compile() methods
       
    1:     def _setup_compile(self, outdir, macros, incdirs, sources, depends,
                              extra):
               """Process arguments and decide which source files to compile."""
    8:         if outdir is None:
>>>>>>             outdir = self.output_dir
    8:         elif not isinstance(outdir, str):
>>>>>>             raise TypeError, "'output_dir' must be a string or None"
       
    8:         if macros is None:
    1:             macros = self.macros
    7:         elif isinstance(macros, list):
    7:             macros = macros + (self.macros or [])
               else:
>>>>>>             raise TypeError, "'macros' (if supplied) must be a list of tuples"
       
    8:         if incdirs is None:
    1:             incdirs = self.include_dirs
    7:         elif isinstance(incdirs, (list, tuple)):
    7:             incdirs = list(incdirs) + (self.include_dirs or [])
               else:
>>>>>>             raise TypeError, \
>>>>>>                   "'include_dirs' (if supplied) must be a list of strings"
       
    8:         if extra is None:
    1:             extra = []
       
               # Get the list of expected output (object) files
    8:         objects = self.object_filenames(sources,
    8:                                         strip_dir=0,
    8:                                         output_dir=outdir)
    8:         assert len(objects) == len(sources)
       
    8:         pp_opts = gen_preprocess_options(macros, incdirs)
       
    8:         build = {}
   16:         for i in range(len(sources)):
    8:             src = sources[i]
    8:             obj = objects[i]
    8:             ext = os.path.splitext(src)[1]
    8:             self.mkpath(os.path.dirname(obj))
    8:             build[obj] = (src, ext)
       
    8:         return macros, objects, extra, pp_opts, build
       
    1:     def _get_cc_args(self, pp_opts, debug, before):
               # works for unixccompiler, emxccompiler, cygwinccompiler
    8:         cc_args = pp_opts + ['-c']
    8:         if debug:
>>>>>>             cc_args[:0] = ['-g']
    8:         if before:
>>>>>>             cc_args[:0] = before
    8:         return cc_args
       
    1:     def _fix_compile_args(self, output_dir, macros, include_dirs):
               """Typecheck and fix-up some of the arguments to the 'compile()'
               method, and return fixed-up values.  Specifically: if 'output_dir'
               is None, replaces it with 'self.output_dir'; ensures that 'macros'
               is a list, and augments it with 'self.macros'; ensures that
               'include_dirs' is a list, and augments it with 'self.include_dirs'.
               Guarantees that the returned values are of the correct type,
               i.e. for 'output_dir' either string or None, and for 'macros' and
               'include_dirs' either list or None.
               """
    2:         if output_dir is None:
    2:             output_dir = self.output_dir
>>>>>>         elif not isinstance(output_dir, str):
>>>>>>             raise TypeError, "'output_dir' must be a string or None"
       
    2:         if macros is None:
    2:             macros = self.macros
>>>>>>         elif isinstance(macros, list):
>>>>>>             macros = macros + (self.macros or [])
               else:
>>>>>>             raise TypeError, "'macros' (if supplied) must be a list of tuples"
       
    2:         if include_dirs is None:
    2:             include_dirs = self.include_dirs
>>>>>>         elif isinstance(include_dirs, (list, tuple)):
>>>>>>             include_dirs = list (include_dirs) + (self.include_dirs or [])
               else:
>>>>>>             raise TypeError, \
>>>>>>                   "'include_dirs' (if supplied) must be a list of strings"
       
    2:         return output_dir, macros, include_dirs
       
    1:     def _fix_object_args(self, objects, output_dir):
               """Typecheck and fix up some arguments supplied to various methods.
               Specifically: ensure that 'objects' is a list; if output_dir is
               None, replace with self.output_dir.  Return fixed versions of
               'objects' and 'output_dir'.
               """
    3:         if not isinstance(objects, (list, tuple)):
>>>>>>             raise TypeError, \
>>>>>>                   "'objects' must be a list or tuple of strings"
    3:         objects = list (objects)
       
    3:         if output_dir is None:
    2:             output_dir = self.output_dir
    1:         elif not isinstance(output_dir, str):
>>>>>>             raise TypeError, "'output_dir' must be a string or None"
       
    3:         return (objects, output_dir)
       
    1:     def _fix_lib_args(self, libraries, library_dirs, runtime_library_dirs):
               """Typecheck and fix up some of the arguments supplied to the
               'link_*' methods.  Specifically: ensure that all arguments are
               lists, and augment them with their permanent versions
               (eg. 'self.libraries' augments 'libraries').  Return a tuple with
               fixed versions of all arguments.
               """
    2:         if libraries is None:
>>>>>>             libraries = self.libraries
    2:         elif isinstance(libraries, (list, tuple)):
    2:             libraries = list (libraries) + (self.libraries or [])
               else:
>>>>>>             raise TypeError, \
>>>>>>                   "'libraries' (if supplied) must be a list of strings"
       
    2:         if library_dirs is None:
>>>>>>             library_dirs = self.library_dirs
    2:         elif isinstance(library_dirs, (list, tuple)):
    2:             library_dirs = list (library_dirs) + (self.library_dirs or [])
               else:
>>>>>>             raise TypeError, \
>>>>>>                   "'library_dirs' (if supplied) must be a list of strings"
       
    2:         if runtime_library_dirs is None:
>>>>>>             runtime_library_dirs = self.runtime_library_dirs
    2:         elif isinstance(runtime_library_dirs, (list, tuple)):
    2:             runtime_library_dirs = (list (runtime_library_dirs) +
    2:                                     (self.runtime_library_dirs or []))
               else:
>>>>>>             raise TypeError, \
>>>>>>                   "'runtime_library_dirs' (if supplied) " + \
>>>>>>                   "must be a list of strings"
       
    2:         return (libraries, library_dirs, runtime_library_dirs)
       
    1:     def _need_link(self, objects, output_file):
               """Return true if we need to relink the files listed in 'objects'
               to recreate 'output_file'.
               """
    3:         if self.force:
>>>>>>             return 1
               else:
    3:             if self.dry_run:
>>>>>>                 newer = newer_group (objects, output_file, missing='newer')
                   else:
    3:                 newer = newer_group (objects, output_file)
    3:             return newer
       
    1:     def detect_language(self, sources):
               """Detect the language of a given file, or list of files. Uses
               language_map, and language_order to do the job.
               """
    2:         if not isinstance(sources, list):
>>>>>>             sources = [sources]
    2:         lang = None
    2:         index = len(self.language_order)
    4:         for source in sources:
    2:             base, ext = os.path.splitext(source)
    2:             extlang = self.language_map.get(ext)
    2:             try:
    2:                 extindex = self.language_order.index(extlang)
    2:                 if extindex < index:
    2:                     lang = extlang
    2:                     index = extindex
>>>>>>             except ValueError:
>>>>>>                 pass
    2:         return lang
       
           # -- Worker methods ------------------------------------------------
           # (must be implemented by subclasses)
       
    1:     def preprocess(self, source, output_file=None, macros=None,
    1:                    include_dirs=None, extra_preargs=None, extra_postargs=None):
               """Preprocess a single C/C++ source file, named in 'source'.
               Output will be written to file named 'output_file', or stdout if
               'output_file' not supplied.  'macros' is a list of macro
               definitions as for 'compile()', which will augment the macros set
               with 'define_macro()' and 'undefine_macro()'.  'include_dirs' is a
               list of directory names that will be added to the default list.
       
               Raises PreprocessError on failure.
               """
>>>>>>         pass
       
    1:     def compile(self, sources, output_dir=None, macros=None,
    1:                 include_dirs=None, debug=0, extra_preargs=None,
    1:                 extra_postargs=None, depends=None):
               """Compile one or more source files.
       
               'sources' must be a list of filenames, most likely C/C++
               files, but in reality anything that can be handled by a
               particular compiler and compiler class (eg. MSVCCompiler can
               handle resource files in 'sources').  Return a list of object
               filenames, one per source filename in 'sources'.  Depending on
               the implementation, not all source files will necessarily be
               compiled, but all corresponding object filenames will be
               returned.
       
               If 'output_dir' is given, object files will be put under it, while
               retaining their original path component.  That is, "foo/bar.c"
               normally compiles to "foo/bar.o" (for a Unix implementation); if
               'output_dir' is "build", then it would compile to
               "build/foo/bar.o".
       
               'macros', if given, must be a list of macro definitions.  A macro
               definition is either a (name, value) 2-tuple or a (name,) 1-tuple.
               The former defines a macro; if the value is None, the macro is
               defined without an explicit value.  The 1-tuple case undefines a
               macro.  Later definitions/redefinitions/ undefinitions take
               precedence.
       
               'include_dirs', if given, must be a list of strings, the
               directories to add to the default include file search path for this
               compilation only.
       
               'debug' is a boolean; if true, the compiler will be instructed to
               output debug symbols in (or alongside) the object file(s).
       
               'extra_preargs' and 'extra_postargs' are implementation- dependent.
               On platforms that have the notion of a command-line (e.g. Unix,
               DOS/Windows), they are most likely lists of strings: extra
               command-line arguments to prepand/append to the compiler command
               line.  On other platforms, consult the implementation class
               documentation.  In any event, they are intended as an escape hatch
               for those occasions when the abstract compiler framework doesn't
               cut the mustard.
       
               'depends', if given, is a list of filenames that all targets
               depend on.  If a source file is older than any file in
               depends, then the source file will be recompiled.  This
               supports dependency tracking, but only at a coarse
               granularity.
       
               Raises CompileError on failure.
               """
               # A concrete compiler class can either override this method
               # entirely or implement _compile().
       
               macros, objects, extra_postargs, pp_opts, build = \
    8:                 self._setup_compile(output_dir, macros, include_dirs, sources,
    8:                                     depends, extra_postargs)
    8:         cc_args = self._get_cc_args(pp_opts, debug, extra_preargs)
       
   11:         for obj in objects:
    8:             try:
    8:                 src, ext = build[obj]
>>>>>>             except KeyError:
>>>>>>                 continue
    8:             self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts)
       
               # Return *all* object filenames, not just the ones we just built.
    3:         return objects
       
    1:     def _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts):
               """Compile 'src' to product 'obj'."""
       
               # A concrete compiler class that does not override compile()
               # should implement _compile().
>>>>>>         pass
       
    1:     def create_static_lib(self, objects, output_libname, output_dir=None,
    1:                           debug=0, target_lang=None):
               """Link a bunch of stuff together to create a static library file.
               The "bunch of stuff" consists of the list of object files supplied
               as 'objects', the extra object files supplied to
               'add_link_object()' and/or 'set_link_objects()', the libraries
               supplied to 'add_library()' and/or 'set_libraries()', and the
               libraries supplied as 'libraries' (if any).
       
               'output_libname' should be a library name, not a filename; the
               filename will be inferred from the library name.  'output_dir' is
               the directory where the library file will be put.
       
               'debug' is a boolean; if true, debugging information will be
               included in the library (note that on most platforms, it is the
               compile step where this matters: the 'debug' flag is included here
               just for consistency).
       
               'target_lang' is the target language for which the given objects
               are being compiled. This allows specific linkage time treatment of
               certain languages.
       
               Raises LibError on failure.
               """
>>>>>>         pass
       
           # values for target_desc parameter in link()
    1:     SHARED_OBJECT = "shared_object"
    1:     SHARED_LIBRARY = "shared_library"
    1:     EXECUTABLE = "executable"
       
    1:     def link(self, target_desc, objects, output_filename, output_dir=None,
    1:              libraries=None, library_dirs=None, runtime_library_dirs=None,
    1:              export_symbols=None, debug=0, extra_preargs=None,
    1:              extra_postargs=None, build_temp=None, target_lang=None):
               """Link a bunch of stuff together to create an executable or
               shared library file.
       
               The "bunch of stuff" consists of the list of object files supplied
               as 'objects'.  'output_filename' should be a filename.  If
               'output_dir' is supplied, 'output_filename' is relative to it
               (i.e. 'output_filename' can provide directory components if
               needed).
       
               'libraries' is a list of libraries to link against.  These are
               library names, not filenames, since they're translated into
               filenames in a platform-specific way (eg. "foo" becomes "libfoo.a"
               on Unix and "foo.lib" on DOS/Windows).  However, they can include a
               directory component, which means the linker will look in that
               specific directory rather than searching all the normal locations.
       
               'library_dirs', if supplied, should be a list of directories to
               search for libraries that were specified as bare library names
               (ie. no directory component).  These are on top of the system
               default and those supplied to 'add_library_dir()' and/or
               'set_library_dirs()'.  'runtime_library_dirs' is a list of
               directories that will be embedded into the shared library and used
               to search for other shared libraries that *it* depends on at
               run-time.  (This may only be relevant on Unix.)
       
               'export_symbols' is a list of symbols that the shared library will
               export.  (This appears to be relevant only on Windows.)
       
               'debug' is as for 'compile()' and 'create_static_lib()', with the
               slight distinction that it actually matters on most platforms (as
               opposed to 'create_static_lib()', which includes a 'debug' flag
               mostly for form's sake).
       
               'extra_preargs' and 'extra_postargs' are as for 'compile()' (except
               of course that they supply command-line arguments for the
               particular linker being used).
       
               'target_lang' is the target language for which the given objects
               are being compiled. This allows specific linkage time treatment of
               certain languages.
       
               Raises LinkError on failure.
               """
>>>>>>         raise NotImplementedError
       
       
           # Old 'link_*()' methods, rewritten to use the new 'link()' method.
       
    1:     def link_shared_lib(self, objects, output_libname, output_dir=None,
    1:                         libraries=None, library_dirs=None,
    1:                         runtime_library_dirs=None, export_symbols=None,
    1:                         debug=0, extra_preargs=None, extra_postargs=None,
    1:                         build_temp=None, target_lang=None):
>>>>>>         self.link(CCompiler.SHARED_LIBRARY, objects,
>>>>>>                   self.library_filename(output_libname, lib_type='shared'),
>>>>>>                   output_dir,
>>>>>>                   libraries, library_dirs, runtime_library_dirs,
>>>>>>                   export_symbols, debug,
>>>>>>                   extra_preargs, extra_postargs, build_temp, target_lang)
       
       
    1:     def link_shared_object(self, objects, output_filename, output_dir=None,
    1:                            libraries=None, library_dirs=None,
    1:                            runtime_library_dirs=None, export_symbols=None,
    1:                            debug=0, extra_preargs=None, extra_postargs=None,
    1:                            build_temp=None, target_lang=None):
    2:         self.link(CCompiler.SHARED_OBJECT, objects,
    2:                   output_filename, output_dir,
    2:                   libraries, library_dirs, runtime_library_dirs,
    2:                   export_symbols, debug,
    2:                   extra_preargs, extra_postargs, build_temp, target_lang)
       
    1:     def link_executable(self, objects, output_progname, output_dir=None,
    1:                         libraries=None, library_dirs=None,
    1:                         runtime_library_dirs=None, debug=0, extra_preargs=None,
    1:                         extra_postargs=None, target_lang=None):
>>>>>>         self.link(CCompiler.EXECUTABLE, objects,
>>>>>>                   self.executable_filename(output_progname), output_dir,
>>>>>>                   libraries, library_dirs, runtime_library_dirs, None,
>>>>>>                   debug, extra_preargs, extra_postargs, None, target_lang)
       
       
           # -- Miscellaneous methods -----------------------------------------
           # These are all used by the 'gen_lib_options() function; there is
           # no appropriate default implementation so subclasses should
           # implement all of these.
       
    1:     def library_dir_option(self, dir):
               """Return the compiler option to add 'dir' to the list of
               directories searched for libraries.
               """
>>>>>>         raise NotImplementedError
       
    1:     def runtime_library_dir_option(self, dir):
               """Return the compiler option to add 'dir' to the list of
               directories searched for runtime libraries.
               """
>>>>>>         raise NotImplementedError
       
    1:     def library_option(self, lib):
               """Return the compiler option to add 'lib' to the list of libraries
               linked into the shared library or executable.
               """
>>>>>>         raise NotImplementedError
       
    1:     def has_function(self, funcname, includes=None, include_dirs=None,
    1:                      libraries=None, library_dirs=None):
               """Return a boolean indicating whether funcname is supported on
               the current platform.  The optional arguments can be used to
               augment the compilation environment.
               """
       
               # this can't be included at module scope because it tries to
               # import math which might not be available at that point - maybe
               # the necessary logic should just be inlined?
>>>>>>         import tempfile
>>>>>>         if includes is None:
>>>>>>             includes = []
>>>>>>         if include_dirs is None:
>>>>>>             include_dirs = []
>>>>>>         if libraries is None:
>>>>>>             libraries = []
>>>>>>         if library_dirs is None:
>>>>>>             library_dirs = []
>>>>>>         fd, fname = tempfile.mkstemp(".c", funcname, text=True)
>>>>>>         f = os.fdopen(fd, "w")
>>>>>>         try:
>>>>>>             for incl in includes:
>>>>>>                 f.write("""#include "%s"\n""" % incl)
>>>>>>             f.write("""\
       main (int argc, char **argv) {
           %s();
       }
>>>>>> """ % funcname)
               finally:
>>>>>>             f.close()
>>>>>>         try:
>>>>>>             objects = self.compile([fname], include_dirs=include_dirs)
>>>>>>         except CompileError:
>>>>>>             return False
       
>>>>>>         try:
>>>>>>             self.link_executable(objects, "a.out",
>>>>>>                                  libraries=libraries,
>>>>>>                                  library_dirs=library_dirs)
>>>>>>         except (LinkError, TypeError):
>>>>>>             return False
>>>>>>         return True
       
    1:     def find_library_file (self, dirs, lib, debug=0):
               """Search the specified list of directories for a static or shared
               library file 'lib' and return the full path to that file.  If
               'debug' true, look for a debugging version (if that makes sense on
               the current platform).  Return None if 'lib' wasn't found in any of
               the specified directories.
               """
>>>>>>         raise NotImplementedError
       
           # -- Filename generation methods -----------------------------------
       
           # The default implementation of the filename generating methods are
           # prejudiced towards the Unix/DOS/Windows view of the world:
           #   * object files are named by replacing the source file extension
           #     (eg. .c/.cpp -> .o/.obj)
           #   * library files (shared or static) are named by plugging the
           #     library name and extension into a format string, eg.
           #     "lib%s.%s" % (lib_name, ".a") for Unix static libraries
           #   * executables are named by appending an extension (possibly
           #     empty) to the program name: eg. progname + ".exe" for
           #     Windows
           #
           # To reduce redundant code, these methods expect to find
           # several attributes in the current object (presumably defined
           # as class attributes):
           #   * src_extensions -
           #     list of C/C++ source file extensions, eg. ['.c', '.cpp']
           #   * obj_extension -
           #     object file extension, eg. '.o' or '.obj'
           #   * static_lib_extension -
           #     extension for static library files, eg. '.a' or '.lib'
           #   * shared_lib_extension -
           #     extension for shared library/object files, eg. '.so', '.dll'
           #   * static_lib_format -
           #     format string for generating static library filenames,
           #     eg. 'lib%s.%s' or '%s.%s'
           #   * shared_lib_format
           #     format string for generating shared library filenames
           #     (probably same as static_lib_format, since the extension
           #     is one of the intended parameters to the format string)
           #   * exe_extension -
           #     extension for executable files, eg. '' or '.exe'
       
    1:     def object_filenames(self, source_filenames, strip_dir=0, output_dir=''):
    8:         if output_dir is None:
>>>>>>             output_dir = ''
    8:         obj_names = []
   16:         for src_name in source_filenames:
    8:             base, ext = os.path.splitext(src_name)
    8:             base = os.path.splitdrive(base)[1] # Chop off the drive
    8:             base = base[os.path.isabs(base):]  # If abs, chop off leading /
    8:             if ext not in self.src_extensions:
>>>>>>                 raise UnknownFileError, \
>>>>>>                       "unknown file type '%s' (from '%s')" % (ext, src_name)
    8:             if strip_dir:
>>>>>>                 base = os.path.basename(base)
    8:             obj_names.append(os.path.join(output_dir,
    8:                                           base + self.obj_extension))
    8:         return obj_names
       
    1:     def shared_object_filename(self, basename, strip_dir=0, output_dir=''):
>>>>>>         assert output_dir is not None
>>>>>>         if strip_dir:
>>>>>>             basename = os.path.basename (basename)
>>>>>>         return os.path.join(output_dir, basename + self.shared_lib_extension)
       
    1:     def executable_filename(self, basename, strip_dir=0, output_dir=''):
>>>>>>         assert output_dir is not None
>>>>>>         if strip_dir:
>>>>>>             basename = os.path.basename (basename)
>>>>>>         return os.path.join(output_dir, basename + (self.exe_extension or ''))
       
    1:     def library_filename(self, libname, lib_type='static',     # or 'shared'
    1:                          strip_dir=0, output_dir=''):
    1:         assert output_dir is not None
    1:         if lib_type not in ("static", "shared", "dylib", "xcode_stub"):
>>>>>>             raise ValueError, ("""'lib_type' must be "static", "shared", """
                                      """"dylib", or "xcode_stub".""")
    1:         fmt = getattr(self, lib_type + "_lib_format")
    1:         ext = getattr(self, lib_type + "_lib_extension")
       
    1:         dir, base = os.path.split (libname)
    1:         filename = fmt % (base, ext)
    1:         if strip_dir:
>>>>>>             dir = ''
       
    1:         return os.path.join(output_dir, dir, filename)
       
       
           # -- Utility methods -----------------------------------------------
       
    1:     def announce(self, msg, level=1):
>>>>>>         log.debug(msg)
       
    1:     def debug_print(self, msg):
    2:         from distutils.debug import DEBUG
    2:         if DEBUG:
    1:             print msg
       
    1:     def warn(self, msg):
>>>>>>         sys.stderr.write("warning: %s\n" % msg)
       
    1:     def execute(self, func, args, msg=None, level=1):
>>>>>>         execute(func, args, msg, self.dry_run)
       
    1:     def spawn(self, cmd):
   14:         spawn(cmd, dry_run=self.dry_run)
       
    1:     def move_file(self, src, dst):
>>>>>>         return move_file(src, dst, dry_run=self.dry_run)
       
    1:     def mkpath(self, name, mode=0777):
   13:         mkpath(name, mode, dry_run=self.dry_run)
       
       
       # class CCompiler
       
       
       # Map a sys.platform/os.name ('posix', 'nt') to the default compiler
       # type for that platform. Keys are interpreted as re match
       # patterns. Order is important; platform mappings are preferred over
       # OS names.
       _default_compilers = (
       
           # Platform string mappings
       
           # on a cygwin built python we can use gcc like an ordinary UNIXish
           # compiler
    1:     ('cygwin.*', 'unix'),
    1:     ('os2emx', 'emx'),
       
           # OS name mappings
    1:     ('posix', 'unix'),
    1:     ('nt', 'msvc'),
       
           )
       
    1: def get_default_compiler(osname=None, platform=None):
           """ Determine the default compiler to use for the given platform.
       
               osname should be one of the standard Python OS names (i.e. the
               ones returned by os.name) and platform the common value
               returned by sys.platform for the platform in question.
       
               The default values are os.name and sys.platform in case the
               parameters are not given.
       
           """
   11:     if osname is None:
    1:         osname = os.name
   11:     if platform is None:
   11:         platform = sys.platform
   33:     for pattern, compiler in _default_compilers:
   33:         if re.match(pattern, platform) is not None or \
   33:            re.match(pattern, osname) is not None:
   11:             return compiler
           # Default to Unix compiler
>>>>>>     return 'unix'
       
       # Map compiler types to (module_name, class_name) pairs -- ie. where to
       # find the code that implements an interface to this compiler.  (The module
       # is assumed to be in the 'distutils' package.)
    1: compiler_class = { 'unix':    ('unixccompiler', 'UnixCCompiler',
    1:                                "standard UNIX-style compiler"),
    1:                    'msvc':    ('msvccompiler', 'MSVCCompiler',
    1:                                "Microsoft Visual C++"),
    1:                    'cygwin':  ('cygwinccompiler', 'CygwinCCompiler',
    1:                                "Cygwin port of GNU C Compiler for Win32"),
    1:                    'mingw32': ('cygwinccompiler', 'Mingw32CCompiler',
    1:                                "Mingw32 port of GNU C Compiler for Win32"),
    1:                    'bcpp':    ('bcppcompiler', 'BCPPCompiler',
    1:                                "Borland C++ Compiler"),
    1:                    'emx':     ('emxccompiler', 'EMXCCompiler',
    1:                                "EMX port of GNU C Compiler for OS/2"),
                        }
       
    1: def show_compilers():
           """Print list of available compilers (used by the "--help-compiler"
           options to "build", "build_ext", "build_clib").
           """
           # XXX this "knows" that the compiler option it's describing is
           # "--compiler", which just happens to be the case for the three
           # commands that use it.
>>>>>>     from distutils.fancy_getopt import FancyGetopt
>>>>>>     compilers = []
>>>>>>     for compiler in compiler_class.keys():
>>>>>>         compilers.append(("compiler="+compiler, None,
>>>>>>                           compiler_class[compiler][2]))
>>>>>>     compilers.sort()
>>>>>>     pretty_printer = FancyGetopt(compilers)
>>>>>>     pretty_printer.print_help("List of available compilers:")
       
       
    1: def new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0):
           """Generate an instance of some CCompiler subclass for the supplied
           platform/compiler combination.  'plat' defaults to 'os.name'
           (eg. 'posix', 'nt'), and 'compiler' defaults to the default compiler
           for that platform.  Currently only 'posix' and 'nt' are supported, and
           the default compilers are "traditional Unix interface" (UnixCCompiler
           class) and Visual C++ (MSVCCompiler class).  Note that it's perfectly
           possible to ask for a Unix compiler object under Windows, and a
           Microsoft compiler object under Unix -- if you supply a value for
           'compiler', 'plat' is ignored.
           """
   10:     if plat is None:
   10:         plat = os.name
       
   10:     try:
   10:         if compiler is None:
   10:             compiler = get_default_compiler(plat)
       
   10:         (module_name, class_name, long_description) = compiler_class[compiler]
>>>>>>     except KeyError:
>>>>>>         msg = "don't know how to compile C/C++ code on platform '%s'" % plat
>>>>>>         if compiler is not None:
>>>>>>             msg = msg + " with '%s' compiler" % compiler
>>>>>>         raise DistutilsPlatformError, msg
       
   10:     try:
   10:         module_name = "distutils." + module_name
   10:         __import__ (module_name)
   10:         module = sys.modules[module_name]
   10:         klass = vars(module)[class_name]
>>>>>>     except ImportError:
>>>>>>         raise DistutilsModuleError, \
>>>>>>               "can't compile C/C++ code: unable to load module '%s'" % \
>>>>>>               module_name
>>>>>>     except KeyError:
>>>>>>         raise DistutilsModuleError, \
>>>>>>               ("can't compile C/C++ code: unable to find class '%s' " +
>>>>>>                "in module '%s'") % (class_name, module_name)
       
           # XXX The None is necessary to preserve backwards compatibility
           # with classes that expect verbose to be the first positional
           # argument.
   10:     return klass(None, dry_run, force)
       
       
    1: def gen_preprocess_options(macros, include_dirs):
           """Generate C pre-processor options (-D, -U, -I) as used by at least
           two types of compilers: the typical Unix compiler and Visual C++.
           'macros' is the usual thing, a list of 1- or 2-tuples, where (name,)
           means undefine (-U) macro 'name', and (name,value) means define (-D)
           macro 'name' to 'value'.  'include_dirs' is just a list of directory
           names to be added to the header file search path (-I).  Returns a list
           of command-line options suitable for either Unix compilers or Visual
           C++.
           """
           # XXX it would be nice (mainly aesthetic, and so we don't generate
           # stupid-looking command lines) to go over 'macros' and eliminate
           # redundant definitions/undefinitions (ie. ensure that only the
           # latest mention of a particular macro winds up on the command
           # line).  I don't think it's essential, though, since most (all?)
           # Unix C compilers only pay attention to the latest -D or -U
           # mention of a macro on their command line.  Similar situation for
           # 'include_dirs'.  I'm punting on both for now.  Anyways, weeding out
           # redundancies like this should probably be the province of
           # CCompiler, since the data structures used are inherited from it
           # and therefore common to all CCompiler classes.
       
   10:     pp_opts = []
   10:     for macro in macros:
       
>>>>>>         if not (isinstance(macro, tuple) and
>>>>>>                 1 <= len (macro) <= 2):
>>>>>>             raise TypeError, \
>>>>>>                   ("bad macro definition '%s': " +
>>>>>>                    "each element of 'macros' list must be a 1- or 2-tuple") % \
>>>>>>                   macro
       
>>>>>>         if len (macro) == 1:        # undefine this macro
>>>>>>             pp_opts.append ("-U%s" % macro[0])
>>>>>>         elif len (macro) == 2:
>>>>>>             if macro[1] is None:    # define with no explicit value
>>>>>>                 pp_opts.append ("-D%s" % macro[0])
                   else:
                       # XXX *don't* need to be clever about quoting the
                       # macro value here, because we're going to avoid the
                       # shell at all costs when we spawn the command!
>>>>>>                 pp_opts.append ("-D%s=%s" % macro)
       
   17:     for dir in include_dirs:
    7:         pp_opts.append ("-I%s" % dir)
       
   10:     return pp_opts
       
       
    1: def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):
           """Generate linker options for searching library directories and
           linking with specific libraries.
       
           'libraries' and 'library_dirs' are, respectively, lists of library names
           (not filenames!) and search directories.  Returns a list of command-line
           options suitable for use with some compiler (depending on the two format
           strings passed in).
           """
    3:     lib_opts = []
       
    5:     for dir in library_dirs:
    2:         lib_opts.append(compiler.library_dir_option(dir))
       
    4:     for dir in runtime_library_dirs:
    1:         opt = compiler.runtime_library_dir_option(dir)
    1:         if isinstance(opt, list):
    1:             lib_opts.extend(opt)
               else:
>>>>>>             lib_opts.append(opt)
       
           # XXX it's important that we *not* remove redundant library mentions!
           # sometimes you really do have to say "-lfoo -lbar -lfoo" in order to
           # resolve all symbols.  I just hope we never have to say "-lfoo obj.o
           # -lbar" to get things to work -- that's certainly a possibility, but a
           # pretty nasty way to arrange your C code.
       
    5:     for lib in libraries:
    2:         lib_dir, lib_name = os.path.split(lib)
    2:         if lib_dir != '':
    1:             lib_file = compiler.find_library_file([lib_dir], lib_name)
    1:             if lib_file is not None:
    1:                 lib_opts.append(lib_file)
                   else:
>>>>>>                 compiler.warn("no library file corresponding to "
>>>>>>                               "'%s' found (skipping)" % lib)
               else:
    1:             lib_opts.append(compiler.library_option(lib))
       
    3:     return lib_opts
