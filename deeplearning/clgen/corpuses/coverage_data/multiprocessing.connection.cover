       #
       # A higher level module for using sockets (or Windows named pipes)
       #
       # multiprocessing/connection.py
       #
       # Copyright (c) 2006-2008, R Oudkerk
       # All rights reserved.
       #
       # Redistribution and use in source and binary forms, with or without
       # modification, are permitted provided that the following conditions
       # are met:
       #
       # 1. Redistributions of source code must retain the above copyright
       #    notice, this list of conditions and the following disclaimer.
       # 2. Redistributions in binary form must reproduce the above copyright
       #    notice, this list of conditions and the following disclaimer in the
       #    documentation and/or other materials provided with the distribution.
       # 3. Neither the name of author nor the names of any contributors may be
       #    used to endorse or promote products derived from this software
       #    without specific prior written permission.
       #
       # THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
       # ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
       # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
       # ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
       # FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
       # DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
       # OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
       # HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
       # LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
       # OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
       # SUCH DAMAGE.
       #
       
    1: __all__ = [ 'Client', 'Listener', 'Pipe' ]
       
    1: import os
    1: import sys
    1: import socket
    1: import errno
    1: import time
    1: import tempfile
    1: import itertools
       
    1: import _multiprocessing
    1: from multiprocessing import current_process, AuthenticationError
    1: from multiprocessing.util import get_temp_dir, Finalize, sub_debug, debug
    1: from multiprocessing.forking import duplicate, close
       
       
       #
       #
       #
       
    1: BUFSIZE = 8192
       # A very generous timeout when it comes to local connections...
    1: CONNECTION_TIMEOUT = 20.
       
    1: _mmap_counter = itertools.count()
       
    1: default_family = 'AF_INET'
    1: families = ['AF_INET']
       
    1: if hasattr(socket, 'AF_UNIX'):
    1:     default_family = 'AF_UNIX'
    1:     families += ['AF_UNIX']
       
    1: if sys.platform == 'win32':
>>>>>>     default_family = 'AF_PIPE'
>>>>>>     families += ['AF_PIPE']
       
       
    1: def _init_timeout(timeout=CONNECTION_TIMEOUT):
  220:     return time.time() + timeout
       
    1: def _check_timeout(t):
>>>>>>     return time.time() > t
       
       #
       #
       #
       
    1: def arbitrary_address(family):
           '''
           Return an arbitrary free address for the given family
           '''
    4:     if family == 'AF_INET':
    2:         return ('localhost', 0)
    2:     elif family == 'AF_UNIX':
    2:         return tempfile.mktemp(prefix='listener-', dir=get_temp_dir())
>>>>>>     elif family == 'AF_PIPE':
>>>>>>         return tempfile.mktemp(prefix=r'\\.\pipe\pyc-%d-%d-' %
>>>>>>                                (os.getpid(), _mmap_counter.next()), dir="")
           else:
>>>>>>         raise ValueError('unrecognized family')
       
       
    1: def address_type(address):
           '''
           Return the types of the address
       
           This can be 'AF_INET', 'AF_UNIX', or 'AF_PIPE'
           '''
  443:     if type(address) == tuple:
   63:         return 'AF_INET'
  380:     elif type(address) is str and address.startswith('\\\\'):
>>>>>>         return 'AF_PIPE'
  380:     elif type(address) is str:
  380:         return 'AF_UNIX'
           else:
>>>>>>         raise ValueError('address type of %r unrecognized' % address)
       
       #
       # Public functions
       #
       
    2: class Listener(object):
           '''
           Returns a listener object.
       
           This is a wrapper for a bound socket which is 'listening' for
           connections, or for a Windows named pipe.
    1:     '''
    1:     def __init__(self, address=None, family=None, backlog=1, authkey=None):
    7:         family = family or (address and address_type(address)) \
    1:                  or default_family
    7:         address = address or arbitrary_address(family)
       
    7:         if family == 'AF_PIPE':
>>>>>>             self._listener = PipeListener(address, backlog)
               else:
    7:             self._listener = SocketListener(address, family, backlog)
       
    7:         if authkey is not None and not isinstance(authkey, bytes):
>>>>>>             raise TypeError, 'authkey should be a byte string'
       
    7:         self._authkey = authkey
       
    1:     def accept(self):
               '''
               Accept a connection on the bound socket or named pipe of `self`.
       
               Returns a `Connection` object.
               '''
    4:         c = self._listener.accept()
    4:         if self._authkey:
>>>>>>             deliver_challenge(c, self._authkey)
>>>>>>             answer_challenge(c, self._authkey)
    4:         return c
       
    1:     def close(self):
               '''
               Close the bound socket or named pipe of `self`.
               '''
    7:         return self._listener.close()
       
    8:     address = property(lambda self: self._listener._address)
    1:     last_accepted = property(lambda self: self._listener._last_accepted)
       
       
    1: def Client(address, family=None, authkey=None):
           '''
           Returns a connection to the address of a `Listener`
           '''
  220:     family = family or address_type(address)
  220:     if family == 'AF_PIPE':
>>>>>>         c = PipeClient(address)
           else:
  220:         c = SocketClient(address)
       
  220:     if authkey is not None and not isinstance(authkey, bytes):
>>>>>>         raise TypeError, 'authkey should be a byte string'
       
  220:     if authkey is not None:
  219:         answer_challenge(c, authkey)
  219:         deliver_challenge(c, authkey)
       
  220:     return c
       
       
    1: if sys.platform != 'win32':
       
    1:     def Pipe(duplex=True):
               '''
               Returns pair of connection objects at either end of a pipe
               '''
   70:         if duplex:
   10:             s1, s2 = socket.socketpair()
   10:             s1.setblocking(True)
   10:             s2.setblocking(True)
   10:             c1 = _multiprocessing.Connection(os.dup(s1.fileno()))
   10:             c2 = _multiprocessing.Connection(os.dup(s2.fileno()))
   10:             s1.close()
   10:             s2.close()
               else:
   60:             fd1, fd2 = os.pipe()
   60:             c1 = _multiprocessing.Connection(fd1, writable=False)
   60:             c2 = _multiprocessing.Connection(fd2, readable=False)
       
   70:         return c1, c2
       
       else:
>>>>>>     from _multiprocessing import win32
       
>>>>>>     def Pipe(duplex=True):
               '''
               Returns pair of connection objects at either end of a pipe
               '''
>>>>>>         address = arbitrary_address('AF_PIPE')
>>>>>>         if duplex:
>>>>>>             openmode = win32.PIPE_ACCESS_DUPLEX
>>>>>>             access = win32.GENERIC_READ | win32.GENERIC_WRITE
>>>>>>             obsize, ibsize = BUFSIZE, BUFSIZE
               else:
>>>>>>             openmode = win32.PIPE_ACCESS_INBOUND
>>>>>>             access = win32.GENERIC_WRITE
>>>>>>             obsize, ibsize = 0, BUFSIZE
       
>>>>>>         h1 = win32.CreateNamedPipe(
>>>>>>             address, openmode,
>>>>>>             win32.PIPE_TYPE_MESSAGE | win32.PIPE_READMODE_MESSAGE |
>>>>>>             win32.PIPE_WAIT,
>>>>>>             1, obsize, ibsize, win32.NMPWAIT_WAIT_FOREVER, win32.NULL
                   )
>>>>>>         h2 = win32.CreateFile(
>>>>>>             address, access, 0, win32.NULL, win32.OPEN_EXISTING, 0, win32.NULL
                   )
>>>>>>         win32.SetNamedPipeHandleState(
>>>>>>             h2, win32.PIPE_READMODE_MESSAGE, None, None
                   )
       
>>>>>>         try:
>>>>>>             win32.ConnectNamedPipe(h1, win32.NULL)
>>>>>>         except WindowsError, e:
>>>>>>             if e.args[0] != win32.ERROR_PIPE_CONNECTED:
>>>>>>                 raise
       
>>>>>>         c1 = _multiprocessing.PipeConnection(h1, writable=duplex)
>>>>>>         c2 = _multiprocessing.PipeConnection(h2, readable=duplex)
       
>>>>>>         return c1, c2
       
       #
       # Definitions for connections based on sockets
       #
       
    2: class SocketListener(object):
           '''
           Representation of a socket which is bound to an address and listening
    1:     '''
    1:     def __init__(self, address, family, backlog=1):
    7:         self._socket = socket.socket(getattr(socket, family))
    7:         try:
    7:             self._socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    7:             self._socket.setblocking(True)
    7:             self._socket.bind(address)
    7:             self._socket.listen(backlog)
    7:             self._address = self._socket.getsockname()
>>>>>>         except socket.error:
>>>>>>             self._socket.close()
>>>>>>             raise
    7:         self._family = family
    7:         self._last_accepted = None
       
    7:         if family == 'AF_UNIX':
    2:             self._unlink = Finalize(
    2:                 self, os.unlink, args=(address,), exitpriority=0
                       )
               else:
    5:             self._unlink = None
       
    1:     def accept(self):
    4:         while True:
    4:             try:
    4:                 s, self._last_accepted = self._socket.accept()
>>>>>>             except socket.error as e:
>>>>>>                 if e.args[0] != errno.EINTR:
>>>>>>                     raise
                   else:
    4:                 break
    4:         s.setblocking(True)
    4:         fd = duplicate(s.fileno())
    4:         conn = _multiprocessing.Connection(fd)
    4:         s.close()
    4:         return conn
       
    1:     def close(self):
    7:         try:
    7:             self._socket.close()
               finally:
    7:             unlink = self._unlink
    7:             if unlink is not None:
    2:                 self._unlink = None
    2:                 unlink()
       
       
    1: def SocketClient(address):
           '''
           Return a connection object connected to the socket given by `address`
           '''
  220:     family = getattr(socket, address_type(address))
  220:     t = _init_timeout()
       
  220:     while 1:
  220:         s = socket.socket(family)
  220:         s.setblocking(True)
  220:         try:
  220:             s.connect(address)
>>>>>>         except socket.error, e:
>>>>>>             s.close()
>>>>>>             if e.args[0] != errno.ECONNREFUSED or _check_timeout(t):
>>>>>>                 debug('failed to connect to address %s', address)
>>>>>>                 raise
>>>>>>             time.sleep(0.01)
               else:
  220:             break
           else:
>>>>>>         raise
       
  220:     fd = duplicate(s.fileno())
  220:     conn = _multiprocessing.Connection(fd)
  220:     s.close()
  220:     return conn
       
       #
       # Definitions for connections based on named pipes
       #
       
    1: if sys.platform == 'win32':
       
>>>>>>     class PipeListener(object):
               '''
               Representation of a named pipe
               '''
>>>>>>         def __init__(self, address, backlog=None):
>>>>>>             self._address = address
>>>>>>             handle = win32.CreateNamedPipe(
>>>>>>                 address, win32.PIPE_ACCESS_DUPLEX,
>>>>>>                 win32.PIPE_TYPE_MESSAGE | win32.PIPE_READMODE_MESSAGE |
>>>>>>                 win32.PIPE_WAIT,
>>>>>>                 win32.PIPE_UNLIMITED_INSTANCES, BUFSIZE, BUFSIZE,
>>>>>>                 win32.NMPWAIT_WAIT_FOREVER, win32.NULL
                       )
>>>>>>             self._handle_queue = [handle]
>>>>>>             self._last_accepted = None
       
>>>>>>             sub_debug('listener created with address=%r', self._address)
       
>>>>>>             self.close = Finalize(
>>>>>>                 self, PipeListener._finalize_pipe_listener,
>>>>>>                 args=(self._handle_queue, self._address), exitpriority=0
                       )
       
>>>>>>         def accept(self):
>>>>>>             newhandle = win32.CreateNamedPipe(
>>>>>>                 self._address, win32.PIPE_ACCESS_DUPLEX,
>>>>>>                 win32.PIPE_TYPE_MESSAGE | win32.PIPE_READMODE_MESSAGE |
>>>>>>                 win32.PIPE_WAIT,
>>>>>>                 win32.PIPE_UNLIMITED_INSTANCES, BUFSIZE, BUFSIZE,
>>>>>>                 win32.NMPWAIT_WAIT_FOREVER, win32.NULL
                       )
>>>>>>             self._handle_queue.append(newhandle)
>>>>>>             handle = self._handle_queue.pop(0)
>>>>>>             try:
>>>>>>                 win32.ConnectNamedPipe(handle, win32.NULL)
>>>>>>             except WindowsError, e:
                       # ERROR_NO_DATA can occur if a client has already connected,
                       # written data and then disconnected -- see Issue 14725.
>>>>>>                 if e.args[0] not in (win32.ERROR_PIPE_CONNECTED,
>>>>>>                                      win32.ERROR_NO_DATA):
>>>>>>                     raise
>>>>>>             return _multiprocessing.PipeConnection(handle)
       
>>>>>>         @staticmethod
               def _finalize_pipe_listener(queue, address):
>>>>>>             sub_debug('closing listener with address=%r', address)
>>>>>>             for handle in queue:
>>>>>>                 close(handle)
       
>>>>>>     def PipeClient(address):
               '''
               Return a connection object connected to the pipe given by `address`
               '''
>>>>>>         t = _init_timeout()
>>>>>>         while 1:
>>>>>>             try:
>>>>>>                 win32.WaitNamedPipe(address, 1000)
>>>>>>                 h = win32.CreateFile(
>>>>>>                     address, win32.GENERIC_READ | win32.GENERIC_WRITE,
>>>>>>                     0, win32.NULL, win32.OPEN_EXISTING, 0, win32.NULL
                           )
>>>>>>             except WindowsError, e:
>>>>>>                 if e.args[0] not in (win32.ERROR_SEM_TIMEOUT,
>>>>>>                                      win32.ERROR_PIPE_BUSY) or _check_timeout(t):
>>>>>>                     raise
                   else:
>>>>>>                 break
               else:
>>>>>>             raise
       
>>>>>>         win32.SetNamedPipeHandleState(
>>>>>>             h, win32.PIPE_READMODE_MESSAGE, None, None
                   )
>>>>>>         return _multiprocessing.PipeConnection(h)
       
       #
       # Authentication stuff
       #
       
    1: MESSAGE_LENGTH = 20
       
    1: CHALLENGE = b'#CHALLENGE#'
    1: WELCOME = b'#WELCOME#'
    1: FAILURE = b'#FAILURE#'
       
    1: def deliver_challenge(connection, authkey):
  220:     import hmac
  220:     assert isinstance(authkey, bytes)
  220:     message = os.urandom(MESSAGE_LENGTH)
  220:     connection.send_bytes(CHALLENGE + message)
  220:     digest = hmac.new(authkey, message).digest()
  220:     response = connection.recv_bytes(256)        # reject large message
  220:     if response == digest:
  219:         connection.send_bytes(WELCOME)
           else:
    1:         connection.send_bytes(FAILURE)
    1:         raise AuthenticationError('digest received was wrong')
       
    1: def answer_challenge(connection, authkey):
  220:     import hmac
  220:     assert isinstance(authkey, bytes)
  220:     message = connection.recv_bytes(256)         # reject large message
  220:     assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message
  220:     message = message[len(CHALLENGE):]
  220:     digest = hmac.new(authkey, message).digest()
  220:     connection.send_bytes(digest)
  220:     response = connection.recv_bytes(256)        # reject large message
  220:     if response != WELCOME:
    1:         raise AuthenticationError('digest sent was rejected')
       
       #
       # Support for using xmlrpclib for serialization
       #
       
    2: class ConnectionWrapper(object):
    1:     def __init__(self, conn, dumps, loads):
   30:         self._conn = conn
   30:         self._dumps = dumps
   30:         self._loads = loads
  180:         for attr in ('fileno', 'close', 'poll', 'recv_bytes', 'send_bytes'):
  150:             obj = getattr(conn, attr)
  150:             setattr(self, attr, obj)
    1:     def send(self, obj):
   36:         s = self._dumps(obj)
   35:         self._conn.send_bytes(s)
    1:     def recv(self):
   35:         s = self._conn.recv_bytes()
   35:         return self._loads(s)
       
    1: def _xml_dumps(obj):
   36:     return xmlrpclib.dumps((obj,), None, None, None, 1)
       
    1: def _xml_loads(s):
   35:     (obj,), method = xmlrpclib.loads(s)
   35:     return obj
       
    2: class XmlListener(Listener):
    1:     def accept(self):
               global xmlrpclib
>>>>>>         import xmlrpclib
>>>>>>         obj = Listener.accept(self)
>>>>>>         return ConnectionWrapper(obj, _xml_dumps, _xml_loads)
       
    1: def XmlClient(*args, **kwds):
           global xmlrpclib
   30:     import xmlrpclib
   30:     return ConnectionWrapper(Client(*args, **kwds), _xml_dumps, _xml_loads)
