       """HMAC (Keyed-Hashing for Message Authentication) Python module.
       
       Implements the HMAC algorithm as described by RFC 2104.
    1: """
       
    1: import warnings as _warnings
       
    1: from operator import _compare_digest as compare_digest
       
       
  257: trans_5C = "".join ([chr (x ^ 0x5C) for x in xrange(256)])
  257: trans_36 = "".join ([chr (x ^ 0x36) for x in xrange(256)])
       
       # The size of the digests returned by HMAC depends on the underlying
       # hashing module used.  Use digest_size from the instance of HMAC instead.
    1: digest_size = None
       
       # A unique object passed by HMAC.copy() to the HMAC constructor, in order
       # that the latter return very quickly.  HMAC("") in contrast is quite
       # expensive.
    1: _secret_backdoor_key = []
       
    2: class HMAC:
           """RFC 2104 HMAC class.  Also complies with RFC 4231.
       
           This supports the API for Cryptographic Hash Functions (PEP 247).
    1:     """
    1:     blocksize = 64  # 512-bit HMAC; can be changed in subclasses.
       
    1:     def __init__(self, key, msg = None, digestmod = None):
               """Create a new HMAC object.
       
               key:       key for the keyed hash object.
               msg:       Initial input for the hash, if provided.
               digestmod: A module supporting PEP 247.  *OR*
                          A hashlib constructor returning a new hash object.
                          Defaults to hashlib.md5.
               """
       
  498:         if key is _secret_backdoor_key: # cheap
    5:             return
       
  493:         if digestmod is None:
  459:             import hashlib
  459:             digestmod = hashlib.md5
       
  493:         if hasattr(digestmod, '__call__'):
  493:             self.digest_cons = digestmod
               else:
>>>>>>             self.digest_cons = lambda d='': digestmod.new(d)
       
  493:         self.outer = self.digest_cons()
  493:         self.inner = self.digest_cons()
  493:         self.digest_size = self.inner.digest_size
       
  493:         if hasattr(self.inner, 'block_size'):
  492:             blocksize = self.inner.block_size
  492:             if blocksize < 16:
                       # Very low blocksize, most likely a legacy value like
                       # Lib/sha.py and Lib/md5.py have.
    1:                 _warnings.warn('block_size of %d seems too small; using our '
    1:                                'default of %d.' % (blocksize, self.blocksize),
    1:                                RuntimeWarning, 2)
>>>>>>                 blocksize = self.blocksize
               else:
    1:             _warnings.warn('No block_size attribute on given digest object; '
    1:                            'Assuming %d.' % (self.blocksize),
    1:                            RuntimeWarning, 2)
>>>>>>             blocksize = self.blocksize
       
  491:         if len(key) > blocksize:
   12:             key = self.digest_cons(key).digest()
       
  491:         key = key + chr(0) * (blocksize - len(key))
  491:         self.outer.update(key.translate(trans_5C))
  491:         self.inner.update(key.translate(trans_36))
  491:         if msg is not None:
  483:             self.update(msg)
       
       ##    def clear(self):
       ##        raise NotImplementedError, "clear() method not available in HMAC."
       
    1:     def update(self, msg):
               """Update this hashing object with the string msg.
               """
  487:         self.inner.update(msg)
       
    1:     def copy(self):
               """Return a separate copy of this hashing object.
       
               An update to this copy won't affect the original object.
               """
    5:         other = self.__class__(_secret_backdoor_key)
    5:         other.digest_cons = self.digest_cons
    5:         other.digest_size = self.digest_size
    5:         other.inner = self.inner.copy()
    5:         other.outer = self.outer.copy()
    5:         return other
       
    1:     def _current(self):
               """Return a hash object for the current state.
       
               To be used only internally with digest() and hexdigest().
               """
  493:         h = self.outer.copy()
  493:         h.update(self.inner.digest())
  493:         return h
       
    1:     def digest(self):
               """Return the hash value of this hashing object.
       
               This returns a string containing 8-bit data.  The object is
               not altered in any way by this function; you can continue
               updating the object after calling this function.
               """
  448:         h = self._current()
  448:         return h.digest()
       
    1:     def hexdigest(self):
               """Like digest(), but returns a string of hexadecimal digits instead.
               """
   45:         h = self._current()
   45:         return h.hexdigest()
       
    1: def new(key, msg = None, digestmod = None):
           """Create a new hashing object and return it.
       
           key: The starting key for the hash.
           msg: if available, will immediately be hashed into the object's starting
           state.
       
           You can now feed arbitrary strings into the object using its update()
           method, and can ask for the hash value at any time by calling its digest()
           method.
           """
  444:     return HMAC(key, msg, digestmod)
