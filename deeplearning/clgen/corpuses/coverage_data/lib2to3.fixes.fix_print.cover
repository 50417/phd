       # Copyright 2006 Google, Inc. All Rights Reserved.
       # Licensed to PSF under a Contributor Agreement.
       
       """Fixer for print.
       
       Change:
           'print'          into 'print()'
           'print ...'      into 'print(...)'
           'print ... ,'    into 'print(..., end=" ")'
           'print >>x, ...' into 'print(..., file=x)'
       
       No changes are applied if print_function is imported from __future__
       
    1: """
       
       # Local imports
    1: from .. import patcomp
    1: from .. import pytree
    1: from ..pgen2 import token
    1: from .. import fixer_base
    1: from ..fixer_util import Name, Call, Comma, String, is_tuple
       
       
    1: parend_expr = patcomp.compile_pattern(
    1:               """atom< '(' [atom|STRING|NAME] ')' >"""
                     )
       
       
    2: class FixPrint(fixer_base.BaseFix):
       
    1:     BM_compatible = True
       
           PATTERN = """
                     simple_stmt< any* bare='print' any* > | print_stmt
    1:               """
       
    1:     def transform(self, node, results):
   56:         assert results
       
   56:         bare_print = results.get("bare")
       
   56:         if bare_print:
                   # Special-case print all by itself
    4:             bare_print.replace(Call(Name(u"print"), [],
    4:                                prefix=bare_print.prefix))
    4:             return
   52:         assert node.children[0] == Name(u"print")
   52:         args = node.children[1:]
   52:         if len(args) == 1 and parend_expr.match(args[0]):
                   # We don't want to keep sticking parens around an
                   # already-parenthesised expression.
    4:             return
       
   48:         sep = end = file = None
   48:         if args and args[-1] == Comma():
   10:             args = args[:-1]
   10:             end = " "
   48:         if args and args[0] == pytree.Leaf(token.RIGHTSHIFT, u">>"):
   16:             assert len(args) >= 2
   16:             file = args[1].clone()
   16:             args = args[3:] # Strip a possible comma after the file expression
               # Now synthesize a print(args, sep=..., end=..., file=...) node.
  145:         l_args = [arg.clone() for arg in args]
   48:         if l_args:
   45:             l_args[0].prefix = u""
   48:         if sep is not None or end is not None or file is not None:
   21:             if sep is not None:
>>>>>>                 self.add_kwarg(l_args, u"sep", String(repr(sep)))
   21:             if end is not None:
   10:                 self.add_kwarg(l_args, u"end", String(repr(end)))
   21:             if file is not None:
   16:                 self.add_kwarg(l_args, u"file", file)
   48:         n_stmt = Call(Name(u"print"), l_args)
   48:         n_stmt.prefix = node.prefix
   48:         return n_stmt
       
    1:     def add_kwarg(self, l_nodes, s_kwd, n_expr):
               # XXX All this prefix-setting may lose comments (though rarely)
   26:         n_expr.prefix = u""
   26:         n_argument = pytree.Node(self.syms.argument,
   26:                                  (Name(s_kwd),
   26:                                   pytree.Leaf(token.EQUAL, u"="),
   26:                                   n_expr))
   26:         if l_nodes:
   23:             l_nodes.append(Comma())
   23:             n_argument.prefix = u" "
   26:         l_nodes.append(n_argument)
