    1: """Tests for distutils.command.build."""
    1: import unittest
    1: import os
    1: import sys
    1: from test.test_support import run_unittest
       
    1: from distutils.command.build import build
    1: from distutils.tests import support
    1: from sysconfig import get_platform
       
    2: class BuildTestCase(support.TempdirManager,
    1:                     support.LoggingSilencer,
    1:                     unittest.TestCase):
       
    1:     def test_finalize_options(self):
    1:         pkg_dir, dist = self.create_dist()
    1:         cmd = build(dist)
    1:         cmd.finalize_options()
       
               # if not specified, plat_name gets the current platform
    1:         self.assertEqual(cmd.plat_name, get_platform())
       
               # build_purelib is build + lib
    1:         wanted = os.path.join(cmd.build_base, 'lib')
    1:         self.assertEqual(cmd.build_purelib, wanted)
       
               # build_platlib is 'build/lib.platform-x.x[-pydebug]'
               # examples:
               #   build/lib.macosx-10.3-i386-2.7
    1:         plat_spec = '.%s-%s' % (cmd.plat_name, sys.version[0:3])
    1:         if hasattr(sys, 'gettotalrefcount'):
>>>>>>             self.assertTrue(cmd.build_platlib.endswith('-pydebug'))
>>>>>>             plat_spec += '-pydebug'
    1:         wanted = os.path.join(cmd.build_base, 'lib' + plat_spec)
    1:         self.assertEqual(cmd.build_platlib, wanted)
       
               # by default, build_lib = build_purelib
    1:         self.assertEqual(cmd.build_lib, cmd.build_purelib)
       
               # build_temp is build/temp.<plat>
    1:         wanted = os.path.join(cmd.build_base, 'temp' + plat_spec)
    1:         self.assertEqual(cmd.build_temp, wanted)
       
               # build_scripts is build/scripts-x.x
    1:         wanted = os.path.join(cmd.build_base, 'scripts-' +  sys.version[0:3])
    1:         self.assertEqual(cmd.build_scripts, wanted)
       
               # executable is os.path.normpath(sys.executable)
    1:         self.assertEqual(cmd.executable, os.path.normpath(sys.executable))
       
    1: def test_suite():
    1:     return unittest.makeSuite(BuildTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     run_unittest(test_suite())
