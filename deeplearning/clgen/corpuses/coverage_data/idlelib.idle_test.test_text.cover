       # Test mock_tk.Text class against tkinter.Text class by running same tests with both.
    1: import unittest
    1: from test.test_support import requires
       
    1: from _tkinter import TclError
       
    2: class TextTest(object):
       
    1:     hw = 'hello\nworld'  # usual initial insert after initialization
    1:     hwn = hw+'\n'  # \n present at initialization, before insert
       
    1:     Text = None
    1:     def setUp(self):
   11:         self.text = self.Text()
       
    1:     def test_init(self):
    1:         self.assertEqual(self.text.get('1.0'), '\n')
    1:         self.assertEqual(self.text.get('end'), '')
       
    1:     def test_index_empty(self):
    1:         index = self.text.index
       
    1:         for dex in (-1.0, 0.3, '1.-1', '1.0', '1.0 lineend', '1.end', '1.33',
    9:                 'insert'):
    8:             self.assertEqual(index(dex), '1.0')
       
    5:         for dex in 'end', 2.0, '2.1', '33.44':
    4:             self.assertEqual(index(dex), '2.0')
       
    1:     def test_index_data(self):
    1:         index = self.text.index
    1:         self.text.insert('1.0', self.hw)
       
    5:         for dex in -1.0, 0.3, '1.-1', '1.0':
    4:             self.assertEqual(index(dex), '1.0')
       
    4:         for dex in '1.0 lineend', '1.end', '1.33':
    3:             self.assertEqual(index(dex), '1.5')
       
    3:         for dex in 'end',  '33.44':
    2:             self.assertEqual(index(dex), '3.0')
       
    1:     def test_get(self):
    1:         get = self.text.get
    1:         Equal = self.assertEqual
    1:         self.text.insert('1.0', self.hw)
       
    1:         Equal(get('end'), '')
    1:         Equal(get('end', 'end'), '')
    1:         Equal(get('1.0'), 'h')
    1:         Equal(get('1.0', '1.1'), 'h')
    1:         Equal(get('1.0', '1.3'), 'hel')
    1:         Equal(get('1.1', '1.3'), 'el')
    1:         Equal(get('1.0', '1.0 lineend'), 'hello')
    1:         Equal(get('1.0', '1.10'), 'hello')
    1:         Equal(get('1.0 lineend'), '\n')
    1:         Equal(get('1.1', '2.3'), 'ello\nwor')
    1:         Equal(get('1.0', '2.5'), self.hw)
    1:         Equal(get('1.0', 'end'), self.hwn)
    1:         Equal(get('0.0', '5.0'), self.hwn)
       
    1:     def test_insert(self):
    1:         insert = self.text.insert
    1:         get = self.text.get
    1:         Equal = self.assertEqual
       
    1:         insert('1.0', self.hw)
    1:         Equal(get('1.0', 'end'), self.hwn)
       
    1:         insert('1.0', '')  # nothing
    1:         Equal(get('1.0', 'end'), self.hwn)
       
    1:         insert('1.0', '*')
    1:         Equal(get('1.0', 'end'), '*hello\nworld\n')
       
    1:         insert('1.0 lineend', '*')
    1:         Equal(get('1.0', 'end'), '*hello*\nworld\n')
       
    1:         insert('2.3', '*')
    1:         Equal(get('1.0', 'end'), '*hello*\nwor*ld\n')
       
    1:         insert('end', 'x')
    1:         Equal(get('1.0', 'end'), '*hello*\nwor*ldx\n')
       
    1:         insert('1.4', 'x\n')
    1:         Equal(get('1.0', 'end'), '*helx\nlo*\nwor*ldx\n')
       
    1:     def test_no_delete(self):
               # if index1 == 'insert' or 'end' or >= end, there is no deletion
    1:         delete = self.text.delete
    1:         get = self.text.get
    1:         Equal = self.assertEqual
    1:         self.text.insert('1.0', self.hw)
       
    1:         delete('insert')
    1:         Equal(get('1.0', 'end'), self.hwn)
       
    1:         delete('end')
    1:         Equal(get('1.0', 'end'), self.hwn)
       
    1:         delete('insert', 'end')
    1:         Equal(get('1.0', 'end'), self.hwn)
       
    1:         delete('insert', '5.5')
    1:         Equal(get('1.0', 'end'), self.hwn)
       
    1:         delete('1.4', '1.0')
    1:         Equal(get('1.0', 'end'), self.hwn)
       
    1:         delete('1.4', '1.4')
    1:         Equal(get('1.0', 'end'), self.hwn)
       
    1:     def test_delete_char(self):
    1:         delete = self.text.delete
    1:         get = self.text.get
    1:         Equal = self.assertEqual
    1:         self.text.insert('1.0', self.hw)
       
    1:         delete('1.0')
    1:         Equal(get('1.0', '1.end'), 'ello')
       
    1:         delete('1.0', '1.1')
    1:         Equal(get('1.0', '1.end'), 'llo')
       
               # delete \n and combine 2 lines into 1
    1:         delete('1.end')
    1:         Equal(get('1.0', '1.end'), 'lloworld')
       
    1:         self.text.insert('1.3', '\n')
    1:         delete('1.10')
    1:         Equal(get('1.0', '1.end'), 'lloworld')
       
    1:         self.text.insert('1.3', '\n')
    1:         delete('1.3', '2.0')
    1:         Equal(get('1.0', '1.end'), 'lloworld')
       
    1:     def test_delete_slice(self):
    1:         delete = self.text.delete
    1:         get = self.text.get
    1:         Equal = self.assertEqual
    1:         self.text.insert('1.0', self.hw)
       
    1:         delete('1.0', '1.0 lineend')
    1:         Equal(get('1.0', 'end'), '\nworld\n')
       
    1:         delete('1.0', 'end')
    1:         Equal(get('1.0', 'end'), '\n')
       
    1:         self.text.insert('1.0', self.hw)
    1:         delete('1.0', '2.0')
    1:         Equal(get('1.0', 'end'), 'world\n')
       
    1:         delete('1.0', 'end')
    1:         Equal(get('1.0', 'end'), '\n')
       
    1:         self.text.insert('1.0', self.hw)
    1:         delete('1.2', '2.3')
    1:         Equal(get('1.0', 'end'), 'held\n')
       
    1:     def test_multiple_lines(self):  # insert and delete
    1:         self.text.insert('1.0', 'hello')
       
    1:         self.text.insert('1.3', '1\n2\n3\n4\n5')
    1:         self.assertEqual(self.text.get('1.0', 'end'), 'hel1\n2\n3\n4\n5lo\n')
       
    1:         self.text.delete('1.3', '5.1')
    1:         self.assertEqual(self.text.get('1.0', 'end'), 'hello\n')
       
    1:     def test_compare(self):
    1:         compare = self.text.compare
    1:         Equal = self.assertEqual
               # need data so indexes not squished to 1,0
    1:         self.text.insert('1.0', 'First\nSecond\nThird\n')
       
    1:         self.assertRaises(TclError, compare, '2.2', 'op', '2.2')
       
    1:         for op, less1, less0, equal, greater0, greater1 in (
    1:                 ('<', True, True, False, False, False),
    1:                 ('<=', True, True, True, False, False),
    1:                 ('>', False, False, False, True, True),
    1:                 ('>=', False, False, True, True, True),
    1:                 ('==', False, False, True, False, False),
    7:                 ('!=', True, True, False, True, True),
                       ):
    6:             Equal(compare('1.1', op, '2.2'), less1, op)
    6:             Equal(compare('2.1', op, '2.2'), less0, op)
    6:             Equal(compare('2.2', op, '2.2'), equal, op)
    6:             Equal(compare('2.3', op, '2.2'), greater0, op)
    6:             Equal(compare('3.3', op, '2.2'), greater1, op)
       
       
    2: class MockTextTest(TextTest, unittest.TestCase):
       
    1:     @classmethod
           def setUpClass(cls):
    1:         from idlelib.idle_test.mock_tk import Text
    1:         cls.Text = Text
       
    1:     def test_decode(self):
               # test endflags (-1, 0) not tested by test_index (which uses +1)
    1:         decode = self.text._decode
    1:         Equal = self.assertEqual
    1:         self.text.insert('1.0', self.hw)
       
    1:         Equal(decode('end', -1), (2, 5))
    1:         Equal(decode('3.1', -1), (2, 5))
    1:         Equal(decode('end',  0), (2, 6))
    1:         Equal(decode('3.1', 0), (2, 6))
       
       
    2: class TkTextTest(TextTest, unittest.TestCase):
       
    1:     @classmethod
           def setUpClass(cls):
    1:         requires('gui')
>>>>>>         from Tkinter import Tk, Text
>>>>>>         cls.Text = Text
>>>>>>         cls.root = Tk()
       
    1:     @classmethod
           def tearDownClass(cls):
>>>>>>         cls.root.destroy()
>>>>>>         del cls.root
       
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main(verbosity=2, exit=False)
