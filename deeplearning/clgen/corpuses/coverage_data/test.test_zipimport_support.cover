       # This test module covers support in various parts of the standard library
       # for working with modules located inside zipfiles
       # The tests are centralised in this fashion to make it easy to drop them
       # if a platform doesn't support zipimport
    1: import test.test_support
    1: import os
    1: import os.path
    1: import sys
    1: import textwrap
    1: import zipfile
    1: import zipimport
    1: import doctest
    1: import inspect
    1: import linecache
    1: import pdb
    1: import warnings
    1: from test.script_helper import (spawn_python, kill_python, run_python,
                                       temp_dir, make_script, make_zip_script)
       
    1: verbose = test.test_support.verbose
       
       # Library modules covered by this test set
       #  pdb (Issue 4201)
       #  inspect (Issue 4223)
       #  doctest (Issue 4197)
       
       # Other test modules with zipimport related tests
       #  test_zipimport (of course!)
       #  test_cmd_line_script (covers the zipimport support in runpy)
       
       # Retrieve some helpers from other test cases
    1: from test import (test_doctest, sample_doctest, sample_doctest_no_doctests,
                         sample_doctest_no_docstrings)
    1: from test.test_importhooks import ImportHooksBaseTestCase
       
       
    1: def _run_object_doctest(obj, module):
           # Direct doctest output (normally just errors) to real stdout; doctest
           # output shouldn't be compared by regrtest.
   27:     save_stdout = sys.stdout
   27:     sys.stdout = test.test_support.get_original_stdout()
   27:     try:
   27:         finder = doctest.DocTestFinder(verbose=verbose, recurse=False)
   27:         runner = doctest.DocTestRunner(verbose=verbose)
               # Use the object's fully qualified name if it has one
               # Otherwise, use the module's name
   27:         try:
   27:             name = "%s.%s" % (obj.__module__, obj.__name__)
    1:         except AttributeError:
    1:             name = module.__name__
   53:         for example in finder.find(obj, name, module):
   27:             runner.run(example)
   26:         f, t = runner.failures, runner.tries
   26:         if f:
>>>>>>             raise test.test_support.TestFailed("%d of %d doctests failed" % (f, t))
           finally:
   26:         sys.stdout = save_stdout
   26:     if verbose:
>>>>>>         print 'doctest (%s) ... %d tests with zero failures' % (module.__name__, t)
   26:     return f, t
       
       
       
    2: class ZipSupportTests(ImportHooksBaseTestCase):
           # We use the ImportHooksBaseTestCase to restore
           # the state of the import related information
           # in the sys module after each test
           # We also clear the linecache and zipimport cache
           # just to avoid any bogus errors due to name reuse in the tests
    1:     def setUp(self):
    1:         linecache.clearcache()
    1:         zipimport._zip_directory_cache.clear()
    1:         ImportHooksBaseTestCase.setUp(self)
       
       
    1:     def test_inspect_getsource_issue4223(self):
>>>>>>         test_src = "def foo(): pass\n"
>>>>>>         with temp_dir() as d:
>>>>>>             init_name = make_script(d, '__init__', test_src)
>>>>>>             name_in_zip = os.path.join('zip_pkg',
>>>>>>                                        os.path.basename(init_name))
>>>>>>             zip_name, run_name = make_zip_script(d, 'test_zip',
>>>>>>                                                 init_name, name_in_zip)
>>>>>>             os.remove(init_name)
>>>>>>             sys.path.insert(0, zip_name)
>>>>>>             import zip_pkg
>>>>>>             self.assertEqual(inspect.getsource(zip_pkg.foo), test_src)
       
    1:     def test_doctest_issue4197(self):
               # To avoid having to keep two copies of the doctest module's
               # unit tests in sync, this test works by taking the source of
               # test_doctest itself, rewriting it a bit to cope with a new
               # location, and then throwing it in a zip file to make sure
               # everything still works correctly
    1:         test_src = inspect.getsource(test_doctest)
    1:         test_src = test_src.replace(
    1:                          "from test import test_doctest",
    1:                          "import test_zipped_doctest as test_doctest")
    1:         test_src = test_src.replace("test.test_doctest",
    1:                                     "test_zipped_doctest")
    1:         test_src = test_src.replace("test.sample_doctest",
    1:                                     "sample_zipped_doctest")
               # The sample doctest files rewritten to include in the zipped version.
    1:         sample_sources = {}
    1:         for mod in [sample_doctest, sample_doctest_no_doctests,
    4:                     sample_doctest_no_docstrings]:
    3:             src = inspect.getsource(mod)
    3:             src = src.replace("test.test_doctest", "test_zipped_doctest")
                   # Rewrite the module name so that, for example,
                   # "test.sample_doctest" becomes "sample_zipped_doctest".
    3:             mod_name = mod.__name__.split(".")[-1]
    3:             mod_name = mod_name.replace("sample_", "sample_zipped_")
    3:             sample_sources[mod_name] = src
       
    1:         with temp_dir() as d:
    1:             script_name = make_script(d, 'test_zipped_doctest',
    1:                                             test_src)
    1:             zip_name, run_name = make_zip_script(d, 'test_zip',
    1:                                                 script_name)
    1:             z = zipfile.ZipFile(zip_name, 'a')
    4:             for mod_name, src in sample_sources.items():
    3:                 z.writestr(mod_name + ".py", src)
    1:             z.close()
    1:             if verbose:
>>>>>>                 zip_file = zipfile.ZipFile(zip_name, 'r')
>>>>>>                 print 'Contents of %r:' % zip_name
>>>>>>                 zip_file.printdir()
>>>>>>                 zip_file.close()
    1:             os.remove(script_name)
    1:             sys.path.insert(0, zip_name)
    1:             import test_zipped_doctest
                   # Some of the doc tests depend on the colocated text files
                   # which aren't available to the zipped version (the doctest
                   # module currently requires real filenames for non-embedded
                   # tests). So we're forced to be selective about which tests
                   # to run.
                   # doctest could really use some APIs which take a text
                   # string or a file object instead of a filename...
                   known_good_tests = [
    1:                 test_zipped_doctest.SampleClass,
    1:                 test_zipped_doctest.SampleClass.NestedClass,
    1:                 test_zipped_doctest.SampleClass.NestedClass.__init__,
    1:                 test_zipped_doctest.SampleClass.__init__,
    1:                 test_zipped_doctest.SampleClass.a_classmethod,
    1:                 test_zipped_doctest.SampleClass.a_property,
    1:                 test_zipped_doctest.SampleClass.a_staticmethod,
    1:                 test_zipped_doctest.SampleClass.double,
    1:                 test_zipped_doctest.SampleClass.get,
    1:                 test_zipped_doctest.SampleNewStyleClass,
    1:                 test_zipped_doctest.SampleNewStyleClass.__init__,
    1:                 test_zipped_doctest.SampleNewStyleClass.double,
    1:                 test_zipped_doctest.SampleNewStyleClass.get,
    1:                 test_zipped_doctest.old_test1,
    1:                 test_zipped_doctest.old_test2,
    1:                 test_zipped_doctest.old_test3,
    1:                 test_zipped_doctest.old_test4,
    1:                 test_zipped_doctest.sample_func,
    1:                 test_zipped_doctest.test_DocTest,
    1:                 test_zipped_doctest.test_DocTestParser,
    1:                 test_zipped_doctest.test_DocTestRunner.basics,
    1:                 test_zipped_doctest.test_DocTestRunner.exceptions,
    1:                 test_zipped_doctest.test_DocTestRunner.option_directives,
    1:                 test_zipped_doctest.test_DocTestRunner.optionflags,
    1:                 test_zipped_doctest.test_DocTestRunner.verbose_flag,
    1:                 test_zipped_doctest.test_Example,
    1:                 test_zipped_doctest.test_debug,
    1:                 test_zipped_doctest.test_pdb_set_trace,
    1:                 test_zipped_doctest.test_pdb_set_trace_nested,
    1:                 test_zipped_doctest.test_testsource,
    1:                 test_zipped_doctest.test_trailing_space_in_test,
    1:                 test_zipped_doctest.test_DocTestSuite,
    1:                 test_zipped_doctest.test_DocTestFinder,
                   ]
                   # These remaining tests are the ones which need access
                   # to the data files, so we don't run them
                   fail_due_to_missing_data_files = [
    1:                 test_zipped_doctest.test_DocFileSuite,
    1:                 test_zipped_doctest.test_testfile,
    1:                 test_zipped_doctest.test_unittest_reportflags,
                   ]
                   # Needed for test_DocTestParser and test_debug
    1:             deprecations = []
                   if __debug__:
                       # Ignore all warnings about the use of class Tester in this module.
    1:                 deprecations.append(("class Tester is deprecated", DeprecationWarning))
    1:             if sys.py3kwarning:
>>>>>>                 deprecations += [
>>>>>>                     ("backquote not supported", SyntaxWarning),
>>>>>>                     ("execfile.. not supported", DeprecationWarning)]
    1:             with test.test_support.check_warnings(*deprecations):
   27:                 for obj in known_good_tests:
   27:                     _run_object_doctest(obj, test_zipped_doctest)
       
    1:     def test_doctest_main_issue4197(self):
>>>>>>         test_src = textwrap.dedent("""\
                           class Test:
                               ">>> 'line 2'"
                               pass
       
                           import doctest
                           doctest.testmod()
>>>>>>                     """)
>>>>>>         pattern = 'File "%s", line 2, in %s'
>>>>>>         with temp_dir() as d:
>>>>>>             script_name = make_script(d, 'script', test_src)
>>>>>>             exit_code, data = run_python(script_name)
>>>>>>             expected = pattern % (script_name, "__main__.Test")
>>>>>>             if verbose:
>>>>>>                 print "Expected line", expected
>>>>>>                 print "Got stdout:"
>>>>>>                 print data
>>>>>>             self.assertIn(expected, data)
>>>>>>             zip_name, run_name = make_zip_script(d, "test_zip",
>>>>>>                                                 script_name, '__main__.py')
>>>>>>             exit_code, data = run_python(zip_name)
>>>>>>             expected = pattern % (run_name, "__main__.Test")
>>>>>>             if verbose:
>>>>>>                 print "Expected line", expected
>>>>>>                 print "Got stdout:"
>>>>>>                 print data
>>>>>>             self.assertIn(expected, data)
       
    1:     def test_pdb_issue4201(self):
>>>>>>         test_src = textwrap.dedent("""\
                           def f():
                               pass
       
                           import pdb
                           pdb.runcall(f)
>>>>>>                     """)
>>>>>>         with temp_dir() as d:
>>>>>>             script_name = make_script(d, 'script', test_src)
>>>>>>             p = spawn_python(script_name)
>>>>>>             p.stdin.write('l\n')
>>>>>>             data = kill_python(p)
>>>>>>             self.assertIn(script_name, data)
>>>>>>             zip_name, run_name = make_zip_script(d, "test_zip",
>>>>>>                                                 script_name, '__main__.py')
>>>>>>             p = spawn_python(zip_name)
>>>>>>             p.stdin.write('l\n')
>>>>>>             data = kill_python(p)
>>>>>>             self.assertIn(run_name, data)
       
       
    1: def test_main():
    1:     test.test_support.run_unittest(ZipSupportTests)
>>>>>>     test.test_support.reap_children()
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
