    1: import unittest
    1: import math
    1: import sys
    1: from test import test_support
       # Skip this test if the _testcapi module isn't available.
    1: test_support.import_module('_testcapi')
    1: from _testcapi import getargs_keywords
    1: import warnings
       
       """
       > How about the following counterproposal. This also changes some of
       > the other format codes to be a little more regular.
       >
       > Code C type Range check
       >
       > b unsigned char 0..UCHAR_MAX
       > h signed short SHRT_MIN..SHRT_MAX
       > B unsigned char none **
       > H unsigned short none **
       > k * unsigned long none
       > I * unsigned int 0..UINT_MAX
       
       
       > i int INT_MIN..INT_MAX
       > l long LONG_MIN..LONG_MAX
       
       > K * unsigned long long none
       > L long long LLONG_MIN..LLONG_MAX
       
       > Notes:
       >
       > * New format codes.
       >
       > ** Changed from previous "range-and-a-half" to "none"; the
       > range-and-a-half checking wasn't particularly useful.
       
       Plus a C API or two, e.g. PyInt_AsLongMask() ->
       unsigned long and PyInt_AsLongLongMask() -> unsigned
       long long (if that exists).
       """
       
    1: LARGE = 0x7FFFFFFF
    1: VERY_LARGE = 0xFF0000121212121212121242L
       
    1: from _testcapi import UCHAR_MAX, USHRT_MAX, UINT_MAX, ULONG_MAX, INT_MAX, \
            INT_MIN, LONG_MIN, LONG_MAX, PY_SSIZE_T_MIN, PY_SSIZE_T_MAX, \
            SHRT_MIN, SHRT_MAX, FLT_MIN, FLT_MAX, DBL_MIN, DBL_MAX
       
    1: DBL_MAX_EXP = sys.float_info.max_exp
    1: INF = float('inf')
    1: NAN = float('nan')
       
    1: try:
    1:     from _testcapi import getargs_L, getargs_K
>>>>>> except ImportError:
>>>>>>     _PY_LONG_LONG_available = False
       else:
    1:     _PY_LONG_LONG_available = True
       
       # fake, they are not defined in Python's header files
    1: LLONG_MAX = 2**63-1
    1: LLONG_MIN = -2**63
    1: ULLONG_MAX = 2**64-1
       
    2: class Long:
    1:     def __int__(self):
    9:         return 99L
       
    2: class Int:
    1:     def __int__(self):
    9:         return 99
       
       
    2: class Float:
    1:     def __float__(self):
>>>>>>         return 4.25
       
    2: class FloatSubclass(float):
    1:     pass
       
    2: class FloatSubclass2(float):
    1:     def __float__(self):
>>>>>>         return 4.25
       
    2: class BadFloat:
    1:     def __float__(self):
>>>>>>         return 687
       
    2: class BadFloat2:
    1:     def __float__(self):
>>>>>>         return FloatSubclass(4.25)
       
    2: class BadFloat3(float):
    1:     def __float__(self):
>>>>>>         return FloatSubclass(4.25)
       
       
    2: class Complex:
    1:     def __complex__(self):
>>>>>>         return 4.25+0.5j
       
    2: class ComplexSubclass(complex):
    1:     pass
       
    2: class ComplexSubclass2(complex):
    1:     def __complex__(self):
>>>>>>         return 4.25+0.5j
       
    2: class BadComplex:
    1:     def __complex__(self):
>>>>>>         return 1.25
       
    2: class BadComplex2:
    1:     def __complex__(self):
>>>>>>         return ComplexSubclass(4.25+0.5j)
       
    2: class BadComplex3(complex):
    1:     def __complex__(self):
>>>>>>         return ComplexSubclass(4.25+0.5j)
       
       
    2: class TupleSubclass(tuple):
    1:     pass
       
    2: class DictSubclass(dict):
    1:     pass
       
    2: class Unsigned_TestCase(unittest.TestCase):
    1:     def test_b(self):
    1:         from _testcapi import getargs_b
               # b returns 'unsigned char', and does range checking (0 ... UCHAR_MAX)
    1:         self.assertRaises(TypeError, getargs_b, 3.14)
    1:         self.assertEqual(99, getargs_b(Long()))
    1:         self.assertEqual(99, getargs_b(Int()))
       
    1:         self.assertRaises(OverflowError, getargs_b, -1)
    1:         self.assertEqual(0, getargs_b(0))
    1:         self.assertEqual(UCHAR_MAX, getargs_b(UCHAR_MAX))
    1:         self.assertRaises(OverflowError, getargs_b, UCHAR_MAX + 1)
       
    1:         self.assertEqual(42, getargs_b(42))
    1:         self.assertEqual(42, getargs_b(42L))
    1:         self.assertRaises(OverflowError, getargs_b, VERY_LARGE)
       
    1:     def test_B(self):
    1:         from _testcapi import getargs_B
               # B returns 'unsigned char', no range checking
    1:         self.assertRaises(TypeError, getargs_B, 3.14)
    1:         self.assertEqual(99, getargs_B(Long()))
    1:         self.assertEqual(99, getargs_B(Int()))
       
    1:         self.assertEqual(UCHAR_MAX, getargs_B(-1))
    1:         self.assertEqual(UCHAR_MAX, getargs_B(-1L))
    1:         self.assertEqual(0, getargs_B(0))
    1:         self.assertEqual(UCHAR_MAX, getargs_B(UCHAR_MAX))
    1:         self.assertEqual(0, getargs_B(UCHAR_MAX+1))
       
    1:         self.assertEqual(42, getargs_B(42))
    1:         self.assertEqual(42, getargs_B(42L))
    1:         self.assertEqual(UCHAR_MAX & VERY_LARGE, getargs_B(VERY_LARGE))
       
    1:     def test_H(self):
    1:         from _testcapi import getargs_H
               # H returns 'unsigned short', no range checking
    1:         self.assertRaises(TypeError, getargs_H, 3.14)
    1:         self.assertEqual(99, getargs_H(Long()))
    1:         self.assertEqual(99, getargs_H(Int()))
       
    1:         self.assertEqual(USHRT_MAX, getargs_H(-1))
    1:         self.assertEqual(0, getargs_H(0))
    1:         self.assertEqual(USHRT_MAX, getargs_H(USHRT_MAX))
    1:         self.assertEqual(0, getargs_H(USHRT_MAX+1))
       
    1:         self.assertEqual(42, getargs_H(42))
    1:         self.assertEqual(42, getargs_H(42L))
       
    1:         self.assertEqual(VERY_LARGE & USHRT_MAX, getargs_H(VERY_LARGE))
       
    1:     def test_I(self):
    1:         from _testcapi import getargs_I
               # I returns 'unsigned int', no range checking
    1:         self.assertRaises(TypeError, getargs_I, 3.14)
    1:         self.assertEqual(99, getargs_I(Long()))
    1:         self.assertEqual(99, getargs_I(Int()))
       
    1:         self.assertEqual(UINT_MAX, getargs_I(-1))
    1:         self.assertEqual(0, getargs_I(0))
    1:         self.assertEqual(UINT_MAX, getargs_I(UINT_MAX))
    1:         self.assertEqual(0, getargs_I(UINT_MAX+1))
       
    1:         self.assertEqual(42, getargs_I(42))
    1:         self.assertEqual(42, getargs_I(42L))
       
    1:         self.assertEqual(VERY_LARGE & UINT_MAX, getargs_I(VERY_LARGE))
       
    1:     def test_k(self):
    1:         from _testcapi import getargs_k
               # k returns 'unsigned long', no range checking
               # it does not accept float, or instances with __int__
    1:         self.assertRaises(TypeError, getargs_k, 3.14)
    1:         self.assertRaises(TypeError, getargs_k, Long())
    1:         self.assertRaises(TypeError, getargs_k, Int())
       
    1:         self.assertEqual(ULONG_MAX, getargs_k(-1))
    1:         self.assertEqual(0, getargs_k(0))
    1:         self.assertEqual(ULONG_MAX, getargs_k(ULONG_MAX))
    1:         self.assertEqual(0, getargs_k(ULONG_MAX+1))
       
    1:         self.assertEqual(42, getargs_k(42))
    1:         self.assertEqual(42, getargs_k(42L))
       
    1:         self.assertEqual(VERY_LARGE & ULONG_MAX, getargs_k(VERY_LARGE))
       
    2: class Signed_TestCase(unittest.TestCase):
    1:     def test_h(self):
    1:         from _testcapi import getargs_h
               # h returns 'short', and does range checking (SHRT_MIN ... SHRT_MAX)
    1:         self.assertRaises(TypeError, getargs_h, 3.14)
    1:         self.assertEqual(99, getargs_h(Long()))
    1:         self.assertEqual(99, getargs_h(Int()))
       
    1:         self.assertRaises(OverflowError, getargs_h, SHRT_MIN-1)
    1:         self.assertEqual(SHRT_MIN, getargs_h(SHRT_MIN))
    1:         self.assertEqual(SHRT_MAX, getargs_h(SHRT_MAX))
    1:         self.assertRaises(OverflowError, getargs_h, SHRT_MAX+1)
       
    1:         self.assertEqual(42, getargs_h(42))
    1:         self.assertEqual(42, getargs_h(42L))
    1:         self.assertRaises(OverflowError, getargs_h, VERY_LARGE)
       
    1:     def test_i(self):
    1:         from _testcapi import getargs_i
               # i returns 'int', and does range checking (INT_MIN ... INT_MAX)
    1:         self.assertRaises(TypeError, getargs_i, 3.14)
    1:         self.assertEqual(99, getargs_i(Long()))
    1:         self.assertEqual(99, getargs_i(Int()))
       
    1:         self.assertRaises(OverflowError, getargs_i, INT_MIN-1)
    1:         self.assertEqual(INT_MIN, getargs_i(INT_MIN))
    1:         self.assertEqual(INT_MAX, getargs_i(INT_MAX))
    1:         self.assertRaises(OverflowError, getargs_i, INT_MAX+1)
       
    1:         self.assertEqual(42, getargs_i(42))
    1:         self.assertEqual(42, getargs_i(42L))
    1:         self.assertRaises(OverflowError, getargs_i, VERY_LARGE)
       
    1:     def test_l(self):
    1:         from _testcapi import getargs_l
               # l returns 'long', and does range checking (LONG_MIN ... LONG_MAX)
    1:         self.assertRaises(TypeError, getargs_l, 3.14)
    1:         self.assertEqual(99, getargs_l(Long()))
    1:         self.assertEqual(99, getargs_l(Int()))
       
    1:         self.assertRaises(OverflowError, getargs_l, LONG_MIN-1)
    1:         self.assertEqual(LONG_MIN, getargs_l(LONG_MIN))
    1:         self.assertEqual(LONG_MAX, getargs_l(LONG_MAX))
    1:         self.assertRaises(OverflowError, getargs_l, LONG_MAX+1)
       
    1:         self.assertEqual(42, getargs_l(42))
    1:         self.assertEqual(42, getargs_l(42L))
    1:         self.assertRaises(OverflowError, getargs_l, VERY_LARGE)
       
    1:     def test_n(self):
    1:         from _testcapi import getargs_n
               # n returns 'Py_ssize_t', and does range checking
               # (PY_SSIZE_T_MIN ... PY_SSIZE_T_MAX)
    1:         self.assertRaises(TypeError, getargs_n, 3.14)
    1:         self.assertEqual(99, getargs_n(Long()))
    1:         self.assertEqual(99, getargs_n(Int()))
       
    1:         self.assertRaises(OverflowError, getargs_n, PY_SSIZE_T_MIN-1)
    1:         self.assertEqual(PY_SSIZE_T_MIN, getargs_n(PY_SSIZE_T_MIN))
    1:         self.assertEqual(PY_SSIZE_T_MAX, getargs_n(PY_SSIZE_T_MAX))
    1:         self.assertRaises(OverflowError, getargs_n, PY_SSIZE_T_MAX+1)
       
    1:         self.assertEqual(42, getargs_n(42))
    1:         self.assertEqual(42, getargs_n(42L))
    1:         self.assertRaises(OverflowError, getargs_n, VERY_LARGE)
       
       
    2: @unittest.skipUnless(_PY_LONG_LONG_available, 'PY_LONG_LONG not available')
    1: class LongLong_TestCase(unittest.TestCase):
    1:     def test_L(self):
    1:         from _testcapi import getargs_L
               # L returns 'long long', and does range checking (LLONG_MIN
               # ... LLONG_MAX)
    1:         with warnings.catch_warnings():
    1:             warnings.filterwarnings(
    1:                 "ignore",
    1:                 category=DeprecationWarning,
    1:                 message=".*integer argument expected, got float",
    1:                 module=__name__)
    1:             self.assertEqual(3, getargs_L(3.14))
    1:         with warnings.catch_warnings():
    1:             warnings.filterwarnings(
    1:                 "error",
    1:                 category=DeprecationWarning,
    1:                 message=".*integer argument expected, got float",
    1:                 module="unittest")
    1:             self.assertRaises(DeprecationWarning, getargs_L, 3.14)
       
    1:         self.assertRaises(TypeError, getargs_L, "Hello")
    1:         self.assertEqual(99, getargs_L(Long()))
    1:         self.assertEqual(99, getargs_L(Int()))
       
    1:         self.assertRaises(OverflowError, getargs_L, LLONG_MIN-1)
    1:         self.assertEqual(LLONG_MIN, getargs_L(LLONG_MIN))
    1:         self.assertEqual(LLONG_MAX, getargs_L(LLONG_MAX))
    1:         self.assertRaises(OverflowError, getargs_L, LLONG_MAX+1)
       
    1:         self.assertEqual(42, getargs_L(42))
    1:         self.assertEqual(42, getargs_L(42L))
    1:         self.assertRaises(OverflowError, getargs_L, VERY_LARGE)
       
    1:     def test_K(self):
    1:         from _testcapi import getargs_K
               # K return 'unsigned long long', no range checking
    1:         self.assertRaises(TypeError, getargs_K, 3.14)
    1:         self.assertRaises(TypeError, getargs_K, Long())
    1:         self.assertRaises(TypeError, getargs_K, Int())
    1:         self.assertEqual(ULLONG_MAX, getargs_K(ULLONG_MAX))
    1:         self.assertEqual(0, getargs_K(0))
    1:         self.assertEqual(0, getargs_K(ULLONG_MAX+1))
       
    1:         self.assertEqual(42, getargs_K(42))
    1:         self.assertEqual(42, getargs_K(42L))
       
    1:         self.assertEqual(VERY_LARGE & ULLONG_MAX, getargs_K(VERY_LARGE))
       
       
    2: class Float_TestCase(unittest.TestCase):
    1:     def assertEqualWithSign(self, actual, expected):
>>>>>>         self.assertEqual(actual, expected)
>>>>>>         self.assertEqual(math.copysign(1, actual), math.copysign(1, expected))
       
    1:     def test_f(self):
>>>>>>         from _testcapi import getargs_f
>>>>>>         self.assertEqual(getargs_f(4.25), 4.25)
>>>>>>         self.assertEqual(getargs_f(4), 4.0)
>>>>>>         self.assertRaises(TypeError, getargs_f, 4.25+0j)
>>>>>>         self.assertEqual(getargs_f(Float()), 4.25)
>>>>>>         self.assertEqual(getargs_f(FloatSubclass(7.5)), 7.5)
>>>>>>         self.assertEqual(getargs_f(FloatSubclass2(7.5)), 7.5)
>>>>>>         self.assertRaises(TypeError, getargs_f, BadFloat())
>>>>>>         self.assertEqual(getargs_f(BadFloat2()), 4.25)
>>>>>>         self.assertEqual(getargs_f(BadFloat3(7.5)), 7.5)
       
>>>>>>         for x in (FLT_MIN, -FLT_MIN, FLT_MAX, -FLT_MAX, INF, -INF):
>>>>>>             self.assertEqual(getargs_f(x), x)
>>>>>>         if FLT_MAX < DBL_MAX:
>>>>>>             self.assertEqual(getargs_f(DBL_MAX), INF)
>>>>>>             self.assertEqual(getargs_f(-DBL_MAX), -INF)
>>>>>>         if FLT_MIN > DBL_MIN:
>>>>>>             self.assertEqualWithSign(getargs_f(DBL_MIN), 0.0)
>>>>>>             self.assertEqualWithSign(getargs_f(-DBL_MIN), -0.0)
>>>>>>         self.assertEqualWithSign(getargs_f(0.0), 0.0)
>>>>>>         self.assertEqualWithSign(getargs_f(-0.0), -0.0)
>>>>>>         r = getargs_f(NAN)
>>>>>>         self.assertNotEqual(r, r)
       
    1:     def test_d(self):
>>>>>>         from _testcapi import getargs_d
>>>>>>         self.assertEqual(getargs_d(4.25), 4.25)
>>>>>>         self.assertEqual(getargs_d(4), 4.0)
>>>>>>         self.assertRaises(TypeError, getargs_d, 4.25+0j)
>>>>>>         self.assertEqual(getargs_d(Float()), 4.25)
>>>>>>         self.assertEqual(getargs_d(FloatSubclass(7.5)), 7.5)
>>>>>>         self.assertEqual(getargs_d(FloatSubclass2(7.5)), 7.5)
>>>>>>         self.assertRaises(TypeError, getargs_d, BadFloat())
>>>>>>         self.assertEqual(getargs_d(BadFloat2()), 4.25)
>>>>>>         self.assertEqual(getargs_d(BadFloat3(7.5)), 7.5)
       
>>>>>>         for x in (DBL_MIN, -DBL_MIN, DBL_MAX, -DBL_MAX, INF, -INF):
>>>>>>             self.assertEqual(getargs_d(x), x)
>>>>>>         self.assertRaises(OverflowError, getargs_d, 1<<DBL_MAX_EXP)
>>>>>>         self.assertRaises(OverflowError, getargs_d, -1<<DBL_MAX_EXP)
>>>>>>         self.assertEqualWithSign(getargs_d(0.0), 0.0)
>>>>>>         self.assertEqualWithSign(getargs_d(-0.0), -0.0)
>>>>>>         r = getargs_d(NAN)
>>>>>>         self.assertNotEqual(r, r)
       
    1:     def test_D(self):
>>>>>>         from _testcapi import getargs_D
>>>>>>         self.assertEqual(getargs_D(4.25+0.5j), 4.25+0.5j)
>>>>>>         self.assertEqual(getargs_D(4.25), 4.25+0j)
>>>>>>         self.assertEqual(getargs_D(4), 4.0+0j)
>>>>>>         self.assertEqual(getargs_D(Complex()), 4.25+0.5j)
>>>>>>         self.assertEqual(getargs_D(ComplexSubclass(7.5+0.25j)), 7.5+0.25j)
>>>>>>         self.assertEqual(getargs_D(ComplexSubclass2(7.5+0.25j)), 7.5+0.25j)
>>>>>>         self.assertRaises(TypeError, getargs_D, BadComplex())
>>>>>>         self.assertEqual(getargs_D(BadComplex2()), 4.25+0.5j)
>>>>>>         self.assertEqual(getargs_D(BadComplex3(7.5+0.25j)), 7.5+0.25j)
       
>>>>>>         for x in (DBL_MIN, -DBL_MIN, DBL_MAX, -DBL_MAX, INF, -INF):
>>>>>>             c = complex(x, 1.0)
>>>>>>             self.assertEqual(getargs_D(c), c)
>>>>>>             c = complex(1.0, x)
>>>>>>             self.assertEqual(getargs_D(c), c)
>>>>>>         self.assertEqualWithSign(getargs_D(complex(0.0, 1.0)).real, 0.0)
>>>>>>         self.assertEqualWithSign(getargs_D(complex(-0.0, 1.0)).real, -0.0)
>>>>>>         self.assertEqualWithSign(getargs_D(complex(1.0, 0.0)).imag, 0.0)
>>>>>>         self.assertEqualWithSign(getargs_D(complex(1.0, -0.0)).imag, -0.0)
       
       
    2: class Tuple_TestCase(unittest.TestCase):
    1:     def test_args(self):
    1:         from _testcapi import get_args
       
    1:         ret = get_args(1, 2)
    1:         self.assertEqual(ret, (1, 2))
    1:         self.assertIs(type(ret), tuple)
       
    1:         ret = get_args(1, *(2, 3))
    1:         self.assertEqual(ret, (1, 2, 3))
    1:         self.assertIs(type(ret), tuple)
       
    1:         ret = get_args(*[1, 2])
    1:         self.assertEqual(ret, (1, 2))
    1:         self.assertIs(type(ret), tuple)
       
    1:         ret = get_args(*TupleSubclass([1, 2]))
    1:         self.assertEqual(ret, (1, 2))
    1:         self.assertIsInstance(ret, tuple)
       
    1:         ret = get_args()
    1:         self.assertIn(ret, ((), None))
    1:         self.assertIn(type(ret), (tuple, type(None)))
       
    1:         ret = get_args(*())
    1:         self.assertIn(ret, ((), None))
    1:         self.assertIn(type(ret), (tuple, type(None)))
       
    1:     def test_tuple(self):
    1:         from _testcapi import getargs_tuple
       
    1:         ret = getargs_tuple(1, (2, 3))
    1:         self.assertEqual(ret, (1,2,3))
       
               # make sure invalid tuple arguments are handled correctly
    2:         class seq:
    1:             def __len__(self):
    1:                 return 2
    1:             def __getitem__(self, n):
    1:                 raise ValueError
    1:         self.assertRaises(TypeError, getargs_tuple, 1, seq())
       
    2: class Keywords_TestCase(unittest.TestCase):
    1:     def test_kwargs(self):
    1:         from _testcapi import get_kwargs
       
    1:         ret = get_kwargs(a=1, b=2)
    1:         self.assertEqual(ret, {'a': 1, 'b': 2})
    1:         self.assertIs(type(ret), dict)
       
    1:         ret = get_kwargs(a=1, **{'b': 2, 'c': 3})
    1:         self.assertEqual(ret, {'a': 1, 'b': 2, 'c': 3})
    1:         self.assertIs(type(ret), dict)
       
    1:         ret = get_kwargs(**DictSubclass({'a': 1, 'b': 2}))
    1:         self.assertEqual(ret, {'a': 1, 'b': 2})
    1:         self.assertIsInstance(ret, dict)
       
    1:         ret = get_kwargs()
    1:         self.assertIn(ret, ({}, None))
    1:         self.assertIn(type(ret), (dict, type(None)))
       
    1:         ret = get_kwargs(**{})
    1:         self.assertIn(ret, ({}, None))
    1:         self.assertIn(type(ret), (dict, type(None)))
       
    1:     def test_positional_args(self):
               # using all positional args
    1:         self.assertEqual(
    1:             getargs_keywords((1,2), 3, (4,(5,6)), (7,8,9), 10),
    1:             (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
                   )
    1:     def test_mixed_args(self):
               # positional and keyword args
    1:         self.assertEqual(
    1:             getargs_keywords((1,2), 3, (4,(5,6)), arg4=(7,8,9), arg5=10),
    1:             (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
                   )
    1:     def test_keyword_args(self):
               # all keywords
    1:         self.assertEqual(
    1:             getargs_keywords(arg1=(1,2), arg2=3, arg3=(4,(5,6)), arg4=(7,8,9), arg5=10),
    1:             (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
                   )
    1:     def test_optional_args(self):
               # missing optional keyword args, skipping tuples
    1:         self.assertEqual(
    1:             getargs_keywords(arg1=(1,2), arg2=3, arg5=10),
    1:             (1, 2, 3, -1, -1, -1, -1, -1, -1, 10)
                   )
    1:     def test_required_args(self):
               # required arg missing
    1:         try:
    1:             getargs_keywords(arg1=(1,2))
    1:         except TypeError, err:
    1:             self.assertEqual(str(err), "Required argument 'arg2' (pos 2) not found")
               else:
>>>>>>             self.fail('TypeError should have been raised')
    1:     def test_too_many_args(self):
    1:         try:
    1:             getargs_keywords((1,2),3,(4,(5,6)),(7,8,9),10,111)
    1:         except TypeError, err:
    1:             self.assertEqual(str(err), "function takes at most 5 arguments (6 given)")
               else:
>>>>>>             self.fail('TypeError should have been raised')
    1:     def test_invalid_keyword(self):
               # extraneous keyword arg
    1:         try:
    1:             getargs_keywords((1,2),3,arg5=10,arg666=666)
    1:         except TypeError, err:
    1:             self.assertEqual(str(err), "'arg666' is an invalid keyword argument for this function")
               else:
>>>>>>             self.fail('TypeError should have been raised')
       
       
    2: class Bytes_TestCase(unittest.TestCase):
    1:     def test_c(self):
    1:         from _testcapi import getargs_c
    1:         self.assertRaises(TypeError, getargs_c, 'abc')  # len > 1
    1:         self.assertEqual(getargs_c('a'), 97)
    1:         if test_support.have_unicode:
    1:             self.assertRaises(TypeError, getargs_c, u's')
    1:         self.assertRaises(TypeError, getargs_c, bytearray('a'))
    1:         self.assertRaises(TypeError, getargs_c, memoryview('a'))
    1:         with test_support.check_py3k_warnings():
    1:             self.assertRaises(TypeError, getargs_c, buffer('a'))
    1:         self.assertRaises(TypeError, getargs_c, 97)
    1:         self.assertRaises(TypeError, getargs_c, None)
       
    1:     def test_w(self):
    1:         from _testcapi import getargs_w
    1:         self.assertRaises(TypeError, getargs_w, 'abc', 3)
    1:         self.assertRaises(TypeError, getargs_w, u'abc', 3)
    1:         self.assertRaises(TypeError, getargs_w, bytearray('bytes'), 3)
    1:         self.assertRaises(TypeError, getargs_w, memoryview('bytes'), 3)
    1:         self.assertRaises(TypeError, getargs_w,
    1:                           memoryview(bytearray('bytes')), 3)
    1:         with test_support.check_py3k_warnings():
    1:             self.assertRaises(TypeError, getargs_w, buffer('bytes'), 3)
    1:             self.assertRaises(TypeError, getargs_w,
    1:                               buffer(bytearray('bytes')), 3)
    1:         self.assertRaises(TypeError, getargs_w, None, 0)
       
    1:     def test_w_hash(self):
    1:         from _testcapi import getargs_w_hash
    1:         self.assertRaises(TypeError, getargs_w_hash, 'abc')
    1:         self.assertRaises(TypeError, getargs_w_hash, u'abc')
    1:         self.assertRaises(TypeError, getargs_w_hash, bytearray('bytes'))
    1:         self.assertRaises(TypeError, getargs_w_hash, memoryview('bytes'))
    1:         self.assertRaises(TypeError, getargs_w_hash,
    1:                           memoryview(bytearray('bytes')))
    1:         with test_support.check_py3k_warnings():
    1:             self.assertRaises(TypeError, getargs_w_hash, buffer('bytes'))
    1:             self.assertRaises(TypeError, getargs_w_hash,
    1:                               buffer(bytearray('bytes')))
    1:         self.assertRaises(TypeError, getargs_w_hash, None)
       
    1:     def test_w_star(self):
               # getargs_w_star() modifies first and last byte
    1:         from _testcapi import getargs_w_star
    1:         self.assertRaises(TypeError, getargs_w_star, 'abc')
    1:         self.assertRaises(TypeError, getargs_w_star, u'abc')
    1:         self.assertRaises(TypeError, getargs_w_star, memoryview('bytes'))
    1:         buf = bytearray('bytearray')
    1:         self.assertEqual(getargs_w_star(buf), '[ytearra]')
    1:         self.assertEqual(buf, bytearray('[ytearra]'))
    1:         buf = bytearray(b'memoryview')
    1:         self.assertEqual(getargs_w_star(memoryview(buf)), '[emoryvie]')
    1:         self.assertEqual(buf, bytearray('[emoryvie]'))
    1:         with test_support.check_py3k_warnings():
    1:             self.assertRaises(TypeError, getargs_w_star, buffer('buffer'))
    1:             self.assertRaises(TypeError, getargs_w_star,
    1:                               buffer(bytearray('buffer')))
    1:         self.assertRaises(TypeError, getargs_w_star, None)
       
       
    2: class String_TestCase(unittest.TestCase):
    1:     def test_s(self):
    1:         from _testcapi import getargs_s
    1:         self.assertEqual(getargs_s('abc\xe9'), 'abc\xe9')
    1:         self.assertEqual(getargs_s(u'abc'), 'abc')
    1:         self.assertRaises(TypeError, getargs_s, 'nul:\0')
    1:         self.assertRaises(TypeError, getargs_s, u'nul:\0')
    1:         self.assertRaises(TypeError, getargs_s, bytearray('bytearray'))
    1:         self.assertRaises(TypeError, getargs_s, memoryview('memoryview'))
    1:         with test_support.check_py3k_warnings():
    1:             self.assertRaises(TypeError, getargs_s, buffer('buffer'))
    1:         self.assertRaises(TypeError, getargs_s, None)
       
    1:     def test_s_star(self):
    1:         from _testcapi import getargs_s_star
    1:         self.assertEqual(getargs_s_star('abc\xe9'), 'abc\xe9')
    1:         self.assertEqual(getargs_s_star(u'abc'), 'abc')
    1:         self.assertEqual(getargs_s_star('nul:\0'), 'nul:\0')
    1:         self.assertEqual(getargs_s_star(u'nul:\0'), 'nul:\0')
    1:         self.assertEqual(getargs_s_star(bytearray('abc\xe9')), 'abc\xe9')
    1:         self.assertEqual(getargs_s_star(memoryview('abc\xe9')), 'abc\xe9')
    1:         with test_support.check_py3k_warnings():
    1:             self.assertEqual(getargs_s_star(buffer('abc\xe9')), 'abc\xe9')
    1:             self.assertEqual(getargs_s_star(buffer(u'abc\xe9')),
    1:                              str(buffer(u'abc\xe9')))
    1:         self.assertRaises(TypeError, getargs_s_star, None)
       
    1:     def test_s_hash(self):
    1:         from _testcapi import getargs_s_hash
    1:         self.assertEqual(getargs_s_hash('abc\xe9'), 'abc\xe9')
    1:         self.assertEqual(getargs_s_hash(u'abc'), 'abc')
    1:         self.assertEqual(getargs_s_hash('nul:\0'), 'nul:\0')
    1:         self.assertEqual(getargs_s_hash(u'nul:\0'), 'nul:\0')
    1:         self.assertRaises(TypeError, getargs_s_hash, bytearray('bytearray'))
    1:         self.assertRaises(TypeError, getargs_s_hash, memoryview('memoryview'))
    1:         with test_support.check_py3k_warnings():
    1:             self.assertEqual(getargs_s_hash(buffer('abc\xe9')), 'abc\xe9')
    1:             self.assertEqual(getargs_s_hash(buffer(u'abc\xe9')),
    1:                              str(buffer(u'abc\xe9')))
    1:         self.assertRaises(TypeError, getargs_s_hash, None)
       
    1:     def test_t_hash(self):
    1:         from _testcapi import getargs_t_hash
    1:         self.assertEqual(getargs_t_hash('abc\xe9'), 'abc\xe9')
    1:         self.assertEqual(getargs_t_hash(u'abc'), 'abc')
    1:         self.assertEqual(getargs_t_hash('nul:\0'), 'nul:\0')
    1:         self.assertEqual(getargs_t_hash(u'nul:\0'), 'nul:\0')
    1:         self.assertRaises(TypeError, getargs_t_hash, bytearray('bytearray'))
    1:         self.assertRaises(TypeError, getargs_t_hash, memoryview('memoryview'))
    1:         with test_support.check_py3k_warnings():
    1:             self.assertEqual(getargs_t_hash(buffer('abc\xe9')), 'abc\xe9')
    1:             self.assertEqual(getargs_t_hash(buffer(u'abc')), 'abc')
    1:         self.assertRaises(TypeError, getargs_t_hash, None)
       
    1:     def test_z(self):
    1:         from _testcapi import getargs_z
    1:         self.assertEqual(getargs_z('abc\xe9'), 'abc\xe9')
    1:         self.assertEqual(getargs_z(u'abc'), 'abc')
    1:         self.assertRaises(TypeError, getargs_z, 'nul:\0')
    1:         self.assertRaises(TypeError, getargs_z, u'nul:\0')
    1:         self.assertRaises(TypeError, getargs_z, bytearray('bytearray'))
    1:         self.assertRaises(TypeError, getargs_z, memoryview('memoryview'))
    1:         with test_support.check_py3k_warnings():
    1:             self.assertRaises(TypeError, getargs_z, buffer('buffer'))
    1:         self.assertIsNone(getargs_z(None))
       
    1:     def test_z_star(self):
    1:         from _testcapi import getargs_z_star
    1:         self.assertEqual(getargs_z_star('abc\xe9'), 'abc\xe9')
    1:         self.assertEqual(getargs_z_star(u'abc'), 'abc')
    1:         self.assertEqual(getargs_z_star('nul:\0'), 'nul:\0')
    1:         self.assertEqual(getargs_z_star(u'nul:\0'), 'nul:\0')
    1:         self.assertEqual(getargs_z_star(bytearray('abc\xe9')), 'abc\xe9')
    1:         self.assertEqual(getargs_z_star(memoryview('abc\xe9')), 'abc\xe9')
    1:         with test_support.check_py3k_warnings():
    1:             self.assertEqual(getargs_z_star(buffer('abc\xe9')), 'abc\xe9')
    1:             self.assertEqual(getargs_z_star(buffer(u'abc\xe9')),
    1:                              str(buffer(u'abc\xe9')))
    1:         self.assertIsNone(getargs_z_star(None))
       
    1:     def test_z_hash(self):
    1:         from _testcapi import getargs_z_hash
    1:         self.assertEqual(getargs_z_hash('abc\xe9'), 'abc\xe9')
    1:         self.assertEqual(getargs_z_hash(u'abc'), 'abc')
    1:         self.assertEqual(getargs_z_hash('nul:\0'), 'nul:\0')
    1:         self.assertEqual(getargs_z_hash(u'nul:\0'), 'nul:\0')
    1:         self.assertRaises(TypeError, getargs_z_hash, bytearray('bytearray'))
    1:         self.assertRaises(TypeError, getargs_z_hash, memoryview('memoryview'))
    1:         with test_support.check_py3k_warnings():
    1:             self.assertEqual(getargs_z_hash(buffer('abc\xe9')), 'abc\xe9')
    1:             self.assertEqual(getargs_z_hash(buffer(u'abc\xe9')),
    1:                              str(buffer(u'abc\xe9')))
    1:         self.assertIsNone(getargs_z_hash(None))
       
       
    2: @test_support.requires_unicode
    1: class Unicode_TestCase(unittest.TestCase):
    1:     def test_es(self):
    1:         from _testcapi import getargs_es
    1:         self.assertEqual(getargs_es('abc'), 'abc')
    1:         self.assertEqual(getargs_es(u'abc'), 'abc')
    1:         self.assertEqual(getargs_es('abc', 'ascii'), 'abc')
    1:         self.assertEqual(getargs_es(u'abc\xe9', 'latin1'), 'abc\xe9')
    1:         self.assertRaises(UnicodeEncodeError, getargs_es, u'abc\xe9', 'ascii')
    1:         self.assertRaises(LookupError, getargs_es, u'abc', 'spam')
    1:         self.assertRaises(TypeError, getargs_es,
    1:                           bytearray('bytearray'), 'latin1')
    1:         self.assertRaises(TypeError, getargs_es,
    1:                           memoryview('memoryview'), 'latin1')
    1:         with test_support.check_py3k_warnings():
    1:             self.assertEqual(getargs_es(buffer('abc'), 'ascii'), 'abc')
    1:             self.assertEqual(getargs_es(buffer(u'abc'), 'ascii'), 'abc')
    1:         self.assertRaises(TypeError, getargs_es, None, 'latin1')
    1:         self.assertRaises(TypeError, getargs_es, 'nul:\0', 'latin1')
    1:         self.assertRaises(TypeError, getargs_es, u'nul:\0', 'latin1')
       
    1:     def test_et(self):
    1:         from _testcapi import getargs_et
    1:         self.assertEqual(getargs_et('abc\xe9'), 'abc\xe9')
    1:         self.assertEqual(getargs_et(u'abc'), 'abc')
    1:         self.assertEqual(getargs_et('abc', 'ascii'), 'abc')
    1:         self.assertEqual(getargs_et('abc\xe9', 'ascii'), 'abc\xe9')
    1:         self.assertEqual(getargs_et(u'abc\xe9', 'latin1'), 'abc\xe9')
    1:         self.assertRaises(UnicodeEncodeError, getargs_et, u'abc\xe9', 'ascii')
    1:         self.assertRaises(LookupError, getargs_et, u'abc', 'spam')
    1:         self.assertRaises(TypeError, getargs_et,
    1:                           bytearray('bytearray'), 'latin1')
    1:         self.assertRaises(TypeError, getargs_et,
    1:                           memoryview('memoryview'), 'latin1')
    1:         with test_support.check_py3k_warnings():
    1:             self.assertEqual(getargs_et(buffer('abc'), 'ascii'), 'abc')
    1:             self.assertEqual(getargs_et(buffer(u'abc'), 'ascii'), 'abc')
    1:         self.assertRaises(TypeError, getargs_et, None, 'latin1')
    1:         self.assertRaises(TypeError, getargs_et, 'nul:\0', 'latin1')
    1:         self.assertRaises(TypeError, getargs_et, u'nul:\0', 'latin1')
       
    1:     def test_es_hash(self):
    1:         from _testcapi import getargs_es_hash
    1:         self.assertEqual(getargs_es_hash('abc'), 'abc')
    1:         self.assertEqual(getargs_es_hash(u'abc'), 'abc')
    1:         self.assertEqual(getargs_es_hash(u'abc\xe9', 'latin1'), 'abc\xe9')
    1:         self.assertRaises(UnicodeEncodeError, getargs_es_hash, u'abc\xe9', 'ascii')
    1:         self.assertRaises(LookupError, getargs_es_hash, u'abc', 'spam')
    1:         self.assertRaises(TypeError, getargs_es_hash,
    1:                           bytearray('bytearray'), 'latin1')
    1:         self.assertRaises(TypeError, getargs_es_hash,
    1:                           memoryview('memoryview'), 'latin1')
    1:         with test_support.check_py3k_warnings():
    1:             self.assertEqual(getargs_es_hash(buffer('abc'), 'ascii'), 'abc')
    1:             self.assertEqual(getargs_es_hash(buffer(u'abc'), 'ascii'), 'abc')
    1:         self.assertRaises(TypeError, getargs_es_hash, None, 'latin1')
    1:         self.assertEqual(getargs_es_hash('nul:\0', 'latin1'), 'nul:\0')
    1:         self.assertEqual(getargs_es_hash(u'nul:\0', 'latin1'), 'nul:\0')
       
    1:         buf = bytearray('x'*8)
    1:         self.assertEqual(getargs_es_hash(u'abc\xe9', 'latin1', buf), 'abc\xe9')
    1:         self.assertEqual(buf, bytearray('abc\xe9\x00xxx'))
    1:         buf = bytearray('x'*5)
    1:         self.assertEqual(getargs_es_hash(u'abc\xe9', 'latin1', buf), 'abc\xe9')
    1:         self.assertEqual(buf, bytearray('abc\xe9\x00'))
    1:         buf = bytearray('x'*4)
    1:         self.assertRaises(TypeError, getargs_es_hash, u'abc\xe9', 'latin1', buf)
    1:         self.assertEqual(buf, bytearray('x'*4))
    1:         buf = bytearray()
    1:         self.assertRaises(TypeError, getargs_es_hash, u'abc\xe9', 'latin1', buf)
       
    1:     def test_et_hash(self):
    1:         from _testcapi import getargs_et_hash
    1:         self.assertEqual(getargs_et_hash('abc\xe9'), 'abc\xe9')
    1:         self.assertEqual(getargs_et_hash(u'abc'), 'abc')
    1:         self.assertEqual(getargs_et_hash('abc\xe9', 'ascii'), 'abc\xe9')
    1:         self.assertEqual(getargs_et_hash(u'abc\xe9', 'latin1'), 'abc\xe9')
    1:         self.assertRaises(UnicodeEncodeError, getargs_et_hash,
    1:                           u'abc\xe9', 'ascii')
    1:         self.assertRaises(LookupError, getargs_et_hash, u'abc', 'spam')
    1:         self.assertRaises(TypeError, getargs_et_hash,
    1:                           bytearray('bytearray'), 'latin1')
    1:         self.assertRaises(TypeError, getargs_et_hash,
    1:                           memoryview('memoryview'), 'latin1')
    1:         with test_support.check_py3k_warnings():
    1:             self.assertEqual(getargs_et_hash(buffer('abc'), 'ascii'), 'abc')
    1:             self.assertEqual(getargs_et_hash(buffer(u'abc'), 'ascii'), 'abc')
    1:         self.assertRaises(TypeError, getargs_et_hash, None, 'latin1')
    1:         self.assertEqual(getargs_et_hash('nul:\0', 'latin1'), 'nul:\0')
    1:         self.assertEqual(getargs_et_hash(u'nul:\0', 'latin1'), 'nul:\0')
       
    1:         buf = bytearray('x'*8)
    1:         self.assertEqual(getargs_et_hash(u'abc\xe9', 'latin1', buf), 'abc\xe9')
    1:         self.assertEqual(buf, bytearray('abc\xe9\x00xxx'))
    1:         buf = bytearray('x'*5)
    1:         self.assertEqual(getargs_et_hash(u'abc\xe9', 'latin1', buf), 'abc\xe9')
    1:         self.assertEqual(buf, bytearray('abc\xe9\x00'))
    1:         buf = bytearray('x'*4)
    1:         self.assertRaises(TypeError, getargs_et_hash, u'abc\xe9', 'latin1', buf)
    1:         self.assertEqual(buf, bytearray('x'*4))
    1:         buf = bytearray()
    1:         self.assertRaises(TypeError, getargs_et_hash, u'abc\xe9', 'latin1', buf)
       
    1:     def test_u(self):
    1:         from _testcapi import getargs_u
    1:         self.assertEqual(getargs_u(u'abc\xe9'), u'abc\xe9')
    1:         self.assertRaises(TypeError, getargs_u, u'nul:\0')
    1:         self.assertRaises(TypeError, getargs_u, 'bytes')
    1:         self.assertRaises(TypeError, getargs_u, bytearray('bytearray'))
    1:         self.assertRaises(TypeError, getargs_u, memoryview('memoryview'))
    1:         with test_support.check_py3k_warnings():
    1:             self.assertRaises(TypeError, getargs_u, buffer('buffer'))
    1:         self.assertRaises(TypeError, getargs_u, None)
       
    1:     def test_u_hash(self):
    1:         from _testcapi import getargs_u_hash
    1:         self.assertEqual(getargs_u_hash(u'abc\xe9'), u'abc\xe9')
    1:         self.assertEqual(getargs_u_hash(u'nul:\0'), u'nul:\0')
    1:         self.assertRaises(TypeError, getargs_u_hash, 'bytes')
    1:         self.assertRaises(TypeError, getargs_u_hash, bytearray('bytearray'))
    1:         self.assertRaises(TypeError, getargs_u_hash, memoryview('memoryview'))
    1:         with test_support.check_py3k_warnings():
    1:             self.assertRaises(TypeError, getargs_u_hash, buffer('buffer'))
    1:         self.assertRaises(TypeError, getargs_u_hash, None)
       
       
    1: def test_main():
    1:     tests = [Signed_TestCase, Unsigned_TestCase, LongLong_TestCase,
    1:              Tuple_TestCase, Keywords_TestCase,
    1:              Bytes_TestCase, String_TestCase, Unicode_TestCase]
    1:     test_support.run_unittest(*tests)
       
    2: class Object_TestCase(unittest.TestCase):
    1:     def test_S(self):
>>>>>>         from _testcapi import getargs_S
>>>>>>         obj = 'str'
>>>>>>         self.assertIs(getargs_S(obj), obj)
>>>>>>         self.assertRaises(TypeError, getargs_S, bytearray('bytearray'))
>>>>>>         if test_support.have_unicode:
>>>>>>             self.assertRaises(TypeError, getargs_S, u'unicode')
>>>>>>         self.assertRaises(TypeError, getargs_S, None)
>>>>>>         self.assertRaises(TypeError, getargs_S, memoryview(obj))
>>>>>>         self.assertRaises(TypeError, getargs_S, buffer(obj))
       
    1:     def test_Y(self):
>>>>>>         from _testcapi import getargs_Y
>>>>>>         obj = bytearray('bytearray')
>>>>>>         self.assertIs(getargs_Y(obj), obj)
>>>>>>         self.assertRaises(TypeError, getargs_Y, 'str')
>>>>>>         if test_support.have_unicode:
>>>>>>             self.assertRaises(TypeError, getargs_Y, u'unicode')
>>>>>>         self.assertRaises(TypeError, getargs_Y, None)
>>>>>>         self.assertRaises(TypeError, getargs_Y, memoryview(obj))
>>>>>>         self.assertRaises(TypeError, getargs_Y, buffer(obj))
       
    1:     @test_support.requires_unicode
           def test_U(self):
>>>>>>         from _testcapi import getargs_U
>>>>>>         obj = u'unicode'
>>>>>>         self.assertIs(getargs_U(obj), obj)
>>>>>>         self.assertRaises(TypeError, getargs_U, 'str')
>>>>>>         self.assertRaises(TypeError, getargs_U, bytearray('bytearray'))
>>>>>>         self.assertRaises(TypeError, getargs_U, None)
>>>>>>         self.assertRaises(TypeError, getargs_U, memoryview(obj))
>>>>>>         self.assertRaises(TypeError, getargs_U, buffer(obj))
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
