       """Suite Finder Basics: Commonly-used Finder commands and object classes
       Level 1, version 1
       
       Generated from /System/Library/CoreServices/Finder.app
       AETE/AEUT resource version 0/144, language 0, script 0
    1: """
       
    1: import aetools
    1: import MacOS
       
    1: _code = 'fndr'
       
    2: class Finder_Basics_Events:
       
    1:     def copy(self, _no_object=None, _attributes={}, **_arguments):
               """copy: (NOT AVAILABLE YET) Copy the selected items to the clipboard (the Finder must be the front application)
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'misc'
>>>>>>         _subcode = 'copy'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_sort = {
    1:         'by' : 'by  ',
           }
       
    1:     def sort(self, _object, _attributes={}, **_arguments):
               """sort: (NOT AVAILABLE YET) Return the specified object(s) in a sorted list
               Required argument: a list of finder objects to sort
               Keyword argument by: the property to sort the items by (name, index, date, etc.)
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: the sorted items in their new order
               """
>>>>>>         _code = 'DATA'
>>>>>>         _subcode = 'SORT'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_sort)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
       
    2: class application(aetools.ComponentItem):
    1:     """application - The Finder """
    1:     want = 'capp'
    2: class _Prop_Finder_preferences(aetools.NProperty):
    1:     """Finder preferences - (NOT AVAILABLE YET) Various preferences that apply to the Finder as a whole """
    1:     which = 'pfrp'
    1:     want = 'cprf'
    1: Finder_preferences = _Prop_Finder_preferences()
    2: class _Prop_clipboard(aetools.NProperty):
    1:     """clipboard - (NOT AVAILABLE YET) the Finder\xd5s clipboard window """
    1:     which = 'pcli'
    1:     want = 'obj '
    1: clipboard = _Prop_clipboard()
    2: class _Prop_desktop(aetools.NProperty):
    1:     """desktop - the desktop """
    1:     which = 'desk'
    1:     want = 'cdsk'
    1: desktop = _Prop_desktop()
    2: class _Prop_frontmost(aetools.NProperty):
    1:     """frontmost - Is the Finder the frontmost process? """
    1:     which = 'pisf'
    1:     want = 'bool'
    1: frontmost = _Prop_frontmost()
    2: class _Prop_home(aetools.NProperty):
    1:     """home - the home directory """
    1:     which = 'home'
    1:     want = 'cfol'
    1: home = _Prop_home()
    2: class _Prop_insertion_location(aetools.NProperty):
    1:     """insertion location - the container in which a new folder would appear if \xd2New Folder\xd3 was selected """
    1:     which = 'pins'
    1:     want = 'obj '
    1: insertion_location = _Prop_insertion_location()
    2: class _Prop_name(aetools.NProperty):
    1:     """name - the Finder\xd5s name """
    1:     which = 'pnam'
    1:     want = 'itxt'
    1: name = _Prop_name()
    2: class _Prop_product_version(aetools.NProperty):
    1:     """product version - the version of the System software running on this computer """
    1:     which = 'ver2'
    1:     want = 'utxt'
    1: product_version = _Prop_product_version()
    2: class _Prop_selection(aetools.NProperty):
    1:     """selection - the selection in the frontmost Finder window """
    1:     which = 'sele'
    1:     want = 'obj '
    1: selection = _Prop_selection()
    2: class _Prop_startup_disk(aetools.NProperty):
    1:     """startup disk - the startup disk """
    1:     which = 'sdsk'
    1:     want = 'cdis'
    1: startup_disk = _Prop_startup_disk()
    2: class _Prop_trash(aetools.NProperty):
    1:     """trash - the trash """
    1:     which = 'trsh'
    1:     want = 'ctrs'
    1: trash = _Prop_trash()
    2: class _Prop_version(aetools.NProperty):
    1:     """version - the version of the Finder """
    1:     which = 'vers'
    1:     want = 'utxt'
    1: version = _Prop_version()
    2: class _Prop_visible(aetools.NProperty):
    1:     """visible - Is the Finder\xd5s layer visible? """
    1:     which = 'pvis'
    1:     want = 'bool'
    1: visible = _Prop_visible()
       #        element 'alia' as ['indx', 'name']
       #        element 'appf' as ['indx', 'name', 'ID  ']
       #        element 'brow' as ['indx', 'ID  ']
       #        element 'cdis' as ['indx', 'name', 'ID  ']
       #        element 'cfol' as ['indx', 'name', 'ID  ']
       #        element 'clpf' as ['indx', 'name']
       #        element 'cobj' as ['indx', 'rele', 'name', 'rang', 'test']
       #        element 'ctnr' as ['indx', 'name']
       #        element 'cwin' as ['indx', 'name']
       #        element 'docf' as ['indx', 'name']
       #        element 'file' as ['indx', 'name']
       #        element 'inlf' as ['indx', 'name']
       #        element 'lwnd' as ['indx', 'name']
       #        element 'pack' as ['indx', 'name']
    1: application._superclassnames = []
    1: import Files
    1: import Window_classes
    1: import Containers_and_folders
    1: import Finder_items
    1: application._privpropdict = {
    1:     'Finder_preferences' : _Prop_Finder_preferences,
    1:     'clipboard' : _Prop_clipboard,
    1:     'desktop' : _Prop_desktop,
    1:     'frontmost' : _Prop_frontmost,
    1:     'home' : _Prop_home,
    1:     'insertion_location' : _Prop_insertion_location,
    1:     'name' : _Prop_name,
    1:     'product_version' : _Prop_product_version,
    1:     'selection' : _Prop_selection,
    1:     'startup_disk' : _Prop_startup_disk,
    1:     'trash' : _Prop_trash,
    1:     'version' : _Prop_version,
    1:     'visible' : _Prop_visible,
       }
    1: application._privelemdict = {
    1:     'Finder_window' : Window_classes.Finder_window,
    1:     'alias_file' : Files.alias_file,
    1:     'application_file' : Files.application_file,
    1:     'clipping' : Files.clipping,
    1:     'clipping_window' : Window_classes.clipping_window,
    1:     'container' : Containers_and_folders.container,
    1:     'disk' : Containers_and_folders.disk,
    1:     'document_file' : Files.document_file,
    1:     'file' : Files.file,
    1:     'folder' : Containers_and_folders.folder,
    1:     'internet_location_file' : Files.internet_location_file,
    1:     'item' : Finder_items.item,
    1:     'package' : Files.package,
    1:     'window' : Window_classes.window,
       }
       
       #
       # Indices of types declared in this module
       #
    1: _classdeclarations = {
    1:     'capp' : application,
       }
       
    1: _propdeclarations = {
    1:     'desk' : _Prop_desktop,
    1:     'home' : _Prop_home,
    1:     'pcli' : _Prop_clipboard,
    1:     'pfrp' : _Prop_Finder_preferences,
    1:     'pins' : _Prop_insertion_location,
    1:     'pisf' : _Prop_frontmost,
    1:     'pnam' : _Prop_name,
    1:     'pvis' : _Prop_visible,
    1:     'sdsk' : _Prop_startup_disk,
    1:     'sele' : _Prop_selection,
    1:     'trsh' : _Prop_trash,
    1:     'ver2' : _Prop_product_version,
    1:     'vers' : _Prop_version,
       }
       
    1: _compdeclarations = {
       }
       
    1: _enumdeclarations = {
       }
