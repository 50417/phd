    1: import unittest, sys
       
    1: from ctypes import *
    1: import _ctypes_test
       
    1: ctype_types = [c_byte, c_ubyte, c_short, c_ushort, c_int, c_uint,
    1:                  c_long, c_ulong, c_longlong, c_ulonglong, c_double, c_float]
    1: python_types = [int, int, int, int, int, long,
    1:                 int, long, long, long, float, float]
       
    2: class PointersTestCase(unittest.TestCase):
       
    1:     def test_pointer_crash(self):
       
    2:         class A(POINTER(c_ulong)):
    1:             pass
       
    1:         POINTER(c_ulong)(c_ulong(22))
               # Pointer can't set contents: has no _type_
    1:         self.assertRaises(TypeError, A, c_ulong(33))
       
    1:     def test_pass_pointers(self):
    1:         dll = CDLL(_ctypes_test.__file__)
    1:         func = dll._testfunc_p_p
    1:         func.restype = c_long
       
    1:         i = c_int(12345678)
       ##        func.argtypes = (POINTER(c_int),)
    1:         address = func(byref(i))
    1:         self.assertEqual(c_int.from_address(address).value, 12345678)
       
    1:         func.restype = POINTER(c_int)
    1:         res = func(pointer(i))
    1:         self.assertEqual(res.contents.value, 12345678)
    1:         self.assertEqual(res[0], 12345678)
       
    1:     def test_change_pointers(self):
    1:         dll = CDLL(_ctypes_test.__file__)
    1:         func = dll._testfunc_p_p
       
    1:         i = c_int(87654)
    1:         func.restype = POINTER(c_int)
    1:         func.argtypes = (POINTER(c_int),)
       
    1:         res = func(pointer(i))
    1:         self.assertEqual(res[0], 87654)
    1:         self.assertEqual(res.contents.value, 87654)
       
               # C code: *res = 54345
    1:         res[0] = 54345
    1:         self.assertEqual(i.value, 54345)
       
               # C code:
               #   int x = 12321;
               #   res = &x
    1:         x = c_int(12321)
    1:         res.contents = x
    1:         self.assertEqual(i.value, 54345)
       
    1:         x.value = -99
    1:         self.assertEqual(res.contents.value, -99)
       
    1:     def test_callbacks_with_pointers(self):
               # a function type receiving a pointer
    1:         PROTOTYPE = CFUNCTYPE(c_int, POINTER(c_int))
       
    1:         self.result = []
       
    1:         def func(arg):
   22:             for i in range(10):
       ##                print arg[i],
   20:                 self.result.append(arg[i])
       ##            print
    2:             return 0
    1:         callback = PROTOTYPE(func)
       
    1:         dll = CDLL(_ctypes_test.__file__)
               # This function expects a function pointer,
               # and calls this with an integer pointer as parameter.
               # The int pointer points to a table containing the numbers 1..10
    1:         doit = dll._testfunc_callback_with_pointer
       
       ##        i = c_int(42)
       ##        callback(byref(i))
       ##        self.assertEqual(i.value, 84)
       
    1:         doit(callback)
       ##        print self.result
    1:         doit(callback)
       ##        print self.result
       
    1:     def test_basics(self):
    1:         from operator import delitem
   13:         for ct, pt in zip(ctype_types, python_types):
   12:             i = ct(42)
   12:             p = pointer(i)
       ##            print type(p.contents), ct
   12:             self.assertIs(type(p.contents), ct)
                   # p.contents is the same as p[0]
       ##            print p.contents
       ##            self.assertEqual(p.contents, 42)
       ##            self.assertEqual(p[0], 42)
       
   12:             self.assertRaises(TypeError, delitem, p, 0)
       
    1:     def test_from_address(self):
    1:         from array import array
    1:         a = array('i', [100, 200, 300, 400, 500])
    1:         addr = a.buffer_info()[0]
       
    1:         p = POINTER(POINTER(c_int))
       ##        print dir(p)
       ##        print p.from_address
       ##        print p.from_address(addr)[0][0]
       
    1:     def test_other(self):
    2:         class Table(Structure):
    1:             _fields_ = [("a", c_int),
    1:                         ("b", c_int),
    1:                         ("c", c_int)]
       
    1:         pt = pointer(Table(1, 2, 3))
       
    1:         self.assertEqual(pt.contents.a, 1)
    1:         self.assertEqual(pt.contents.b, 2)
    1:         self.assertEqual(pt.contents.c, 3)
       
    1:         pt.contents.c = 33
       
    1:         from ctypes import _pointer_type_cache
    1:         del _pointer_type_cache[Table]
       
    1:     def test_basic(self):
    1:         p = pointer(c_int(42))
               # Although a pointer can be indexed, it has no length
    1:         self.assertRaises(TypeError, len, p)
    1:         self.assertEqual(p[0], 42)
    1:         self.assertEqual(p[0:1], [42])
    1:         self.assertEqual(p.contents.value, 42)
       
    1:     def test_charpp(self):
               """Test that a character pointer-to-pointer is correctly passed"""
    1:         dll = CDLL(_ctypes_test.__file__)
    1:         func = dll._testfunc_c_p_p
    1:         func.restype = c_char_p
    1:         argv = (c_char_p * 2)()
    1:         argc = c_int( 2 )
    1:         argv[0] = 'hello'
    1:         argv[1] = 'world'
    1:         result = func( byref(argc), argv )
    1:         assert result == 'world', result
       
    1:     def test_bug_1467852(self):
               # http://sourceforge.net/tracker/?func=detail&atid=532154&aid=1467852&group_id=71702
    1:         x = c_int(5)
    1:         dummy = []
32001:         for i in range(32000):
32000:             dummy.append(c_int(i))
    1:         y = c_int(6)
    1:         p = pointer(x)
    1:         pp = pointer(p)
    1:         q = pointer(y)
    1:         pp[0] = q         # <==
    1:         self.assertEqual(p[0], 6)
    1:     def test_c_void_p(self):
               # http://sourceforge.net/tracker/?func=detail&aid=1518190&group_id=5470&atid=105470
    1:         if sizeof(c_void_p) == 4:
>>>>>>             self.assertEqual(c_void_p(0xFFFFFFFFL).value,
>>>>>>                                  c_void_p(-1).value)
>>>>>>             self.assertEqual(c_void_p(0xFFFFFFFFFFFFFFFFL).value,
>>>>>>                                  c_void_p(-1).value)
    1:         elif sizeof(c_void_p) == 8:
    1:             self.assertEqual(c_void_p(0xFFFFFFFFL).value,
    1:                                  0xFFFFFFFFL)
    1:             self.assertEqual(c_void_p(0xFFFFFFFFFFFFFFFFL).value,
    1:                                  c_void_p(-1).value)
    1:             self.assertEqual(c_void_p(0xFFFFFFFFFFFFFFFFFFFFFFFFL).value,
    1:                                  c_void_p(-1).value)
       
    1:         self.assertRaises(TypeError, c_void_p, 3.14) # make sure floats are NOT accepted
    1:         self.assertRaises(TypeError, c_void_p, object()) # nor other objects
       
    1:     def test_pointers_bool(self):
               # NULL pointers have a boolean False value, non-NULL pointers True.
    1:         self.assertEqual(bool(POINTER(c_int)()), False)
    1:         self.assertEqual(bool(pointer(c_int())), True)
       
    1:         self.assertEqual(bool(CFUNCTYPE(None)(0)), False)
    1:         self.assertEqual(bool(CFUNCTYPE(None)(42)), True)
       
               # COM methods are boolean True:
    1:         if sys.platform == "win32":
>>>>>>             mth = WINFUNCTYPE(None)(42, "name", (), None)
>>>>>>             self.assertEqual(bool(mth), True)
       
    1:     def test_pointer_type_name(self):
    1:         LargeNamedType = type('T' * 2 ** 25, (Structure,), {})
    1:         self.assertTrue(POINTER(LargeNamedType))
       
               # to not leak references, we must clean _pointer_type_cache
    1:         from ctypes import _pointer_type_cache
    1:         del _pointer_type_cache[LargeNamedType]
       
    1:     def test_pointer_type_str_name(self):
    1:         large_string = 'T' * 2 ** 25
    1:         P = POINTER(large_string)
    1:         self.assertTrue(P)
       
               # to not leak references, we must clean _pointer_type_cache
    1:         from ctypes import _pointer_type_cache
    1:         del _pointer_type_cache[id(P)]
       
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
