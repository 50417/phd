    1: import imp
    1: import os
    1: import py_compile
    1: import shutil
    1: import tempfile
    1: import unittest
       
    1: from test import test_support as support
       
    2: class PyCompileTests(unittest.TestCase):
       
    1:     def setUp(self):
    3:         self.directory = tempfile.mkdtemp()
    3:         self.source_path = os.path.join(self.directory, '_test.py')
    3:         self.pyc_path = self.source_path + 'c'
    3:         self.cwd_drive = os.path.splitdrive(os.getcwd())[0]
               # In these tests we compute relative paths.  When using Windows, the
               # current working directory path and the 'self.source_path' might be
               # on different drives.  Therefore we need to switch to the drive where
               # the temporary source file lives.
    3:         drive = os.path.splitdrive(self.source_path)[0]
    3:         if drive:
>>>>>>             os.chdir(drive)
       
    3:         with open(self.source_path, 'w') as file:
    3:             file.write('x = 123\n')
       
    1:     def tearDown(self):
    3:         shutil.rmtree(self.directory)
    3:         if self.cwd_drive:
>>>>>>             os.chdir(self.cwd_drive)
       
    1:     def test_absolute_path(self):
    1:         py_compile.compile(self.source_path, self.pyc_path)
    1:         self.assertTrue(os.path.exists(self.pyc_path))
       
    1:     def test_cwd(self):
    1:         with support.change_cwd(self.directory):
    1:             py_compile.compile(os.path.basename(self.source_path),
    1:                                os.path.basename(self.pyc_path))
    1:         self.assertTrue(os.path.exists(self.pyc_path))
       
    1:     def test_relative_path(self):
    1:         py_compile.compile(os.path.relpath(self.source_path),
    1:                            os.path.relpath(self.pyc_path))
    1:         self.assertTrue(os.path.exists(self.pyc_path))
       
    1: def test_main():
    1:     support.run_unittest(PyCompileTests)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
