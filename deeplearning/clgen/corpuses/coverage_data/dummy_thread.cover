       """Drop-in replacement for the thread module.
       
       Meant to be used as a brain-dead substitute so that threaded code does
       not need to be rewritten for when the thread module is not present.
       
       Suggested usage is::
       
           try:
               import thread
           except ImportError:
               import dummy_thread as thread
       
    1: """
       # Exports only things specified by thread documentation;
       # skipping obsolete synonyms allocate(), start_new(), exit_thread().
    1: __all__ = ['error', 'start_new_thread', 'exit', 'get_ident', 'allocate_lock',
    1:            'interrupt_main', 'LockType']
       
    1: import traceback as _traceback
       
    2: class error(Exception):
    1:     """Dummy implementation of thread.error."""
       
    1:     def __init__(self, *args):
    1:         self.args = args
       
    1: def start_new_thread(function, args, kwargs={}):
           """Dummy implementation of thread.start_new_thread().
       
           Compatibility is maintained by making sure that ``args`` is a
           tuple and ``kwargs`` is a dictionary.  If an exception is raised
           and it is SystemExit (which can be done by thread.exit()) it is
           caught and nothing is done; all other exceptions are printed out
           by using traceback.print_exc().
       
           If the executed function calls interrupt_main the KeyboardInterrupt will be
           raised when the function returns.
       
           """
   20:     if type(args) != type(tuple()):
>>>>>>         raise TypeError("2nd arg must be a tuple")
   20:     if type(kwargs) != type(dict()):
>>>>>>         raise TypeError("3rd arg must be a dict")
           global _main
   20:     _main = False
   20:     try:
   20:         function(*args, **kwargs)
>>>>>>     except SystemExit:
>>>>>>         pass
>>>>>>     except:
>>>>>>         _traceback.print_exc()
   20:     _main = True
           global _interrupt
   20:     if _interrupt:
    1:         _interrupt = False
    1:         raise KeyboardInterrupt
       
    1: def exit():
           """Dummy implementation of thread.exit()."""
    1:     raise SystemExit
       
    1: def get_ident():
           """Dummy implementation of thread.get_ident().
       
           Since this module should only be used when threadmodule is not
           available, it is safe to assume that the current process is the
           only thread.  Thus a constant can be safely returned.
           """
  109:     return -1
       
    1: def allocate_lock():
           """Dummy implementation of thread.allocate_lock()."""
   54:     return LockType()
       
    1: def stack_size(size=None):
           """Dummy implementation of thread.stack_size()."""
>>>>>>     if size is not None:
>>>>>>         raise error("setting thread stack size not supported")
>>>>>>     return 0
       
    2: class LockType(object):
           """Class implementing dummy implementation of thread.LockType.
       
           Compatibility is maintained by maintaining self.locked_status
           which is a boolean that stores the state of the lock.  Pickling of
           the lock, though, should not be done since if the thread module is
           then used with an unpickled ``lock()`` from here problems could
           occur from this class not having atomic methods.
       
    1:     """
       
    1:     def __init__(self):
   54:         self.locked_status = False
       
    1:     def acquire(self, waitflag=None):
               """Dummy implementation of acquire().
       
               For blocking calls, self.locked_status is automatically set to
               True and returned appropriately based on value of
               ``waitflag``.  If it is non-blocking, then the value is
               actually checked and not set if it is already acquired.  This
               is all done so that threading.Condition's assert statements
               aren't triggered and throw a little fit.
       
               """
  182:         if waitflag is None or waitflag:
  138:             self.locked_status = True
  138:             return True
               else:
   44:             if not self.locked_status:
    2:                 self.locked_status = True
    2:                 return True
                   else:
   42:                 return False
       
    1:     __enter__ = acquire
       
    1:     def __exit__(self, typ, val, tb):
   92:         self.release()
       
    1:     def release(self):
               """Release the dummy lock."""
               # XXX Perhaps shouldn't actually bother to test?  Could lead
               #     to problems for complex, threaded code.
  135:         if not self.locked_status:
    1:             raise error
  134:         self.locked_status = False
  134:         return True
       
    1:     def locked(self):
    3:         return self.locked_status
       
       # Used to signal that interrupt_main was called in a "thread"
    1: _interrupt = False
       # True when not executing in a "thread"
    1: _main = True
       
    1: def interrupt_main():
           """Set _interrupt flag to True to have start_new_thread raise
           KeyboardInterrupt upon exiting."""
    2:     if _main:
    1:         raise KeyboardInterrupt
           else:
               global _interrupt
    1:         _interrupt = True
