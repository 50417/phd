    1: from ctypes import *
    1: from ctypes.test import need_symbol
    1: import unittest
    1: import os
       
    1: import ctypes
    1: import _ctypes_test
       
    2: class BITS(Structure):
    1:     _fields_ = [("A", c_int, 1),
    1:                 ("B", c_int, 2),
    1:                 ("C", c_int, 3),
    1:                 ("D", c_int, 4),
    1:                 ("E", c_int, 5),
    1:                 ("F", c_int, 6),
    1:                 ("G", c_int, 7),
    1:                 ("H", c_int, 8),
    1:                 ("I", c_int, 9),
       
    1:                 ("M", c_short, 1),
    1:                 ("N", c_short, 2),
    1:                 ("O", c_short, 3),
    1:                 ("P", c_short, 4),
    1:                 ("Q", c_short, 5),
    1:                 ("R", c_short, 6),
    1:                 ("S", c_short, 7)]
       
    1: func = CDLL(_ctypes_test.__file__).unpack_bitfields
    1: func.argtypes = POINTER(BITS), c_char
       
       ##for n in "ABCDEFGHIMNOPQRS":
       ##    print n, hex(getattr(BITS, n).size), getattr(BITS, n).offset
       
    2: class C_Test(unittest.TestCase):
       
    1:     def test_ints(self):
  513:         for i in range(512):
 5120:             for name in "ABCDEFGHI":
 4608:                 b = BITS()
 4608:                 setattr(b, name, i)
 4608:                 self.assertEqual((name, i, getattr(b, name)), (name, i, func(byref(b), name)))
       
    1:     def test_shorts(self):
  257:         for i in range(256):
 2048:             for name in "MNOPQRS":
 1792:                 b = BITS()
 1792:                 setattr(b, name, i)
 1792:                 self.assertEqual((name, i, getattr(b, name)), (name, i, func(byref(b), name)))
       
    1: signed_int_types = (c_byte, c_short, c_int, c_long, c_longlong)
    1: unsigned_int_types = (c_ubyte, c_ushort, c_uint, c_ulong, c_ulonglong)
    1: int_types = unsigned_int_types + signed_int_types
       
    2: class BitFieldTest(unittest.TestCase):
       
    1:     def test_longlong(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_longlong, 1),
    1:                         ("b", c_longlong, 62),
    1:                         ("c", c_longlong, 1)]
       
    1:         self.assertEqual(sizeof(X), sizeof(c_longlong))
    1:         x = X()
    1:         x.a, x.b, x.c = -1, 7, -1
    1:         self.assertEqual((x.a, x.b, x.c), (-1, 7, -1))
       
    1:     def test_ulonglong(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_ulonglong, 1),
    1:                         ("b", c_ulonglong, 62),
    1:                         ("c", c_ulonglong, 1)]
       
    1:         self.assertEqual(sizeof(X), sizeof(c_longlong))
    1:         x = X()
    1:         self.assertEqual((x.a, x.b, x.c), (0, 0, 0))
    1:         x.a, x.b, x.c = 7, 7, 7
    1:         self.assertEqual((x.a, x.b, x.c), (1, 7, 1))
       
    1:     def test_signed(self):
    6:         for c_typ in signed_int_types:
   10:             class X(Structure):
    5:                 _fields_ = [("dummy", c_typ),
    5:                             ("a", c_typ, 3),
    5:                             ("b", c_typ, 3),
    5:                             ("c", c_typ, 1)]
    5:             self.assertEqual(sizeof(X), sizeof(c_typ)*2)
       
    5:             x = X()
    5:             self.assertEqual((c_typ, x.a, x.b, x.c), (c_typ, 0, 0, 0))
    5:             x.a = -1
    5:             self.assertEqual((c_typ, x.a, x.b, x.c), (c_typ, -1, 0, 0))
    5:             x.a, x.b = 0, -1
    5:             self.assertEqual((c_typ, x.a, x.b, x.c), (c_typ, 0, -1, 0))
       
       
    1:     def test_unsigned(self):
    6:         for c_typ in unsigned_int_types:
   10:             class X(Structure):
    5:                 _fields_ = [("a", c_typ, 3),
    5:                             ("b", c_typ, 3),
    5:                             ("c", c_typ, 1)]
    5:             self.assertEqual(sizeof(X), sizeof(c_typ))
       
    5:             x = X()
    5:             self.assertEqual((c_typ, x.a, x.b, x.c), (c_typ, 0, 0, 0))
    5:             x.a = -1
    5:             self.assertEqual((c_typ, x.a, x.b, x.c), (c_typ, 7, 0, 0))
    5:             x.a, x.b = 0, -1
    5:             self.assertEqual((c_typ, x.a, x.b, x.c), (c_typ, 0, 7, 0))
       
       
    1:     def fail_fields(self, *fields):
   36:         return self.get_except(type(Structure), "X", (),
   36:                                {"_fields_": fields})
       
    1:     def test_nonint_types(self):
               # bit fields are not allowed on non-integer types.
    1:         result = self.fail_fields(("a", c_char_p, 1))
    1:         self.assertEqual(result, (TypeError, 'bit fields not allowed for type c_char_p'))
       
    1:         result = self.fail_fields(("a", c_void_p, 1))
    1:         self.assertEqual(result, (TypeError, 'bit fields not allowed for type c_void_p'))
       
    1:         if c_int != c_long:
    1:             result = self.fail_fields(("a", POINTER(c_int), 1))
    1:             self.assertEqual(result, (TypeError, 'bit fields not allowed for type LP_c_int'))
       
    1:         result = self.fail_fields(("a", c_char, 1))
    1:         self.assertEqual(result, (TypeError, 'bit fields not allowed for type c_char'))
       
    2:         class Dummy(Structure):
    1:             _fields_ = []
       
    1:         result = self.fail_fields(("a", Dummy, 1))
    1:         self.assertEqual(result, (TypeError, 'bit fields not allowed for type Dummy'))
       
    1:     @need_symbol('c_wchar')
           def test_c_wchar(self):
    1:         result = self.fail_fields(("a", c_wchar, 1))
    1:         self.assertEqual(result,
    1:                 (TypeError, 'bit fields not allowed for type c_wchar'))
       
    1:     def test_single_bitfield_size(self):
   11:         for c_typ in int_types:
   10:             result = self.fail_fields(("a", c_typ, -1))
   10:             self.assertEqual(result, (ValueError, 'number of bits invalid for bit field'))
       
   10:             result = self.fail_fields(("a", c_typ, 0))
   10:             self.assertEqual(result, (ValueError, 'number of bits invalid for bit field'))
       
   20:             class X(Structure):
   10:                 _fields_ = [("a", c_typ, 1)]
   10:             self.assertEqual(sizeof(X), sizeof(c_typ))
       
   20:             class X(Structure):
   10:                 _fields_ = [("a", c_typ, sizeof(c_typ)*8)]
   10:             self.assertEqual(sizeof(X), sizeof(c_typ))
       
   10:             result = self.fail_fields(("a", c_typ, sizeof(c_typ)*8 + 1))
   10:             self.assertEqual(result, (ValueError, 'number of bits invalid for bit field'))
       
    1:     def test_multi_bitfields_size(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_short, 1),
    1:                         ("b", c_short, 14),
    1:                         ("c", c_short, 1)]
    1:         self.assertEqual(sizeof(X), sizeof(c_short))
       
    2:         class X(Structure):
    1:             _fields_ = [("a", c_short, 1),
    1:                         ("a1", c_short),
    1:                         ("b", c_short, 14),
    1:                         ("c", c_short, 1)]
    1:         self.assertEqual(sizeof(X), sizeof(c_short)*3)
    1:         self.assertEqual(X.a.offset, 0)
    1:         self.assertEqual(X.a1.offset, sizeof(c_short))
    1:         self.assertEqual(X.b.offset, sizeof(c_short)*2)
    1:         self.assertEqual(X.c.offset, sizeof(c_short)*2)
       
    2:         class X(Structure):
    1:             _fields_ = [("a", c_short, 3),
    1:                         ("b", c_short, 14),
    1:                         ("c", c_short, 14)]
    1:         self.assertEqual(sizeof(X), sizeof(c_short)*3)
    1:         self.assertEqual(X.a.offset, sizeof(c_short)*0)
    1:         self.assertEqual(X.b.offset, sizeof(c_short)*1)
    1:         self.assertEqual(X.c.offset, sizeof(c_short)*2)
       
       
    1:     def get_except(self, func, *args, **kw):
   36:         try:
   36:             func(*args, **kw)
   36:         except Exception, detail:
   36:             return detail.__class__, str(detail)
       
    1:     def test_mixed_1(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_byte, 4),
    1:                         ("b", c_int, 4)]
    1:         if os.name in ("nt", "ce"):
>>>>>>             self.assertEqual(sizeof(X), sizeof(c_int)*2)
               else:
    1:             self.assertEqual(sizeof(X), sizeof(c_int))
       
    1:     def test_mixed_2(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_byte, 4),
    1:                         ("b", c_int, 32)]
    1:         self.assertEqual(sizeof(X), alignment(c_int)+sizeof(c_int))
       
    1:     def test_mixed_3(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_byte, 4),
    1:                         ("b", c_ubyte, 4)]
    1:         self.assertEqual(sizeof(X), sizeof(c_byte))
       
    1:     def test_mixed_4(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_short, 4),
    1:                         ("b", c_short, 4),
    1:                         ("c", c_int, 24),
    1:                         ("d", c_short, 4),
    1:                         ("e", c_short, 4),
    1:                         ("f", c_int, 24)]
               # MSVC does NOT combine c_short and c_int into one field, GCC
               # does (unless GCC is run with '-mms-bitfields' which
               # produces code compatible with MSVC).
    1:         if os.name in ("nt", "ce"):
>>>>>>             self.assertEqual(sizeof(X), sizeof(c_int) * 4)
               else:
    1:             self.assertEqual(sizeof(X), sizeof(c_int) * 2)
       
    1:     def test_anon_bitfields(self):
               # anonymous bit-fields gave a strange error message
    2:         class X(Structure):
    1:             _fields_ = [("a", c_byte, 4),
    1:                         ("b", c_ubyte, 4)]
    2:         class Y(Structure):
    1:             _anonymous_ = ["_"]
    1:             _fields_ = [("_", X)]
       
    1:     @need_symbol('c_uint32')
           def test_uint32(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_uint32, 32)]
    1:         x = X()
    1:         x.a = 10
    1:         self.assertEqual(x.a, 10)
    1:         x.a = 0xFDCBA987
    1:         self.assertEqual(x.a, 0xFDCBA987)
       
    1:     @need_symbol('c_uint64')
           def test_uint64(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_uint64, 64)]
    1:         x = X()
    1:         x.a = 10
    1:         self.assertEqual(x.a, 10)
    1:         x.a = 0xFEDCBA9876543211
    1:         self.assertEqual(x.a, 0xFEDCBA9876543211)
       
    1:     @need_symbol('c_uint32')
           def test_uint32_swap_little_endian(self):
               # Issue #23319
    2:         class Little(LittleEndianStructure):
    1:             _fields_ = [("a", c_uint32, 24),
    1:                         ("b", c_uint32, 4),
    1:                         ("c", c_uint32, 4)]
    1:         b = bytearray(4)
    1:         x = Little.from_buffer(b)
    1:         x.a = 0xabcdef
    1:         x.b = 1
    1:         x.c = 2
    1:         self.assertEqual(b, b'\xef\xcd\xab\x21')
       
    1:     @need_symbol('c_uint32')
           def test_uint32_swap_big_endian(self):
               # Issue #23319
    2:         class Big(BigEndianStructure):
    1:             _fields_ = [("a", c_uint32, 24),
    1:                         ("b", c_uint32, 4),
    1:                         ("c", c_uint32, 4)]
    1:         b = bytearray(4)
    1:         x = Big.from_buffer(b)
    1:         x.a = 0xabcdef
    1:         x.b = 1
    1:         x.c = 2
    1:         self.assertEqual(b, b'\xab\xcd\xef\x12')
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
