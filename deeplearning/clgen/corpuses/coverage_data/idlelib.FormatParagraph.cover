       """Extension to format a paragraph or selection to a max width.
       
       Does basic, standard text formatting, and also understands Python
       comment blocks. Thus, for editing Python source code, this
       extension is really only suitable for reformatting these comment
       blocks or triple-quoted strings.
       
       Known problems with comment reformatting:
       * If there is a selection marked, and the first line of the
         selection is not complete, the block will probably not be detected
         as comments, and will have the normal "text formatting" rules
         applied.
       * If a comment block has leading whitespace that mixes tabs and
         spaces, they will not be considered part of the same block.
       * Fancy comments, like this bulleted list, aren't handled :-)
    1: """
       
    1: import re
    1: from idlelib.configHandler import idleConf
       
    2: class FormatParagraph:
       
           menudefs = [
    1:         ('format', [   # /s/edit/format   dscherer@cmu.edu
    1:             ('Format Paragraph', '<<format-paragraph>>'),
                ])
           ]
       
    1:     def __init__(self, editwin):
    1:         self.editwin = editwin
       
    1:     def close(self):
    1:         self.editwin = None
       
    1:     def format_paragraph_event(self, event, limit=None):
               """Formats paragraph to a max width specified in idleConf.
       
               If text is selected, format_paragraph_event will start breaking lines
               at the max width, starting from the beginning selection.
       
               If no text is selected, format_paragraph_event uses the current
               cursor location to determine the paragraph (lines of text surrounded
               by blank lines) and formats it.
       
               The length limit parameter is for testing with a known value.
               """
>>>>>>         if limit is None:
                   # The default length limit is that defined by pep8
>>>>>>             limit = idleConf.GetOption(
>>>>>>                 'extensions', 'FormatParagraph', 'max-width',
>>>>>>                 type='int', default=72)
>>>>>>         text = self.editwin.text
>>>>>>         first, last = self.editwin.get_selection_indices()
>>>>>>         if first and last:
>>>>>>             data = text.get(first, last)
>>>>>>             comment_header = get_comment_header(data)
               else:
                   first, last, comment_header, data = \
>>>>>>                     find_paragraph(text, text.index("insert"))
>>>>>>         if comment_header:
>>>>>>             newdata = reformat_comment(data, limit, comment_header)
               else:
>>>>>>             newdata = reformat_paragraph(data, limit)
>>>>>>         text.tag_remove("sel", "1.0", "end")
       
>>>>>>         if newdata != data:
>>>>>>             text.mark_set("insert", first)
>>>>>>             text.undo_block_start()
>>>>>>             text.delete(first, last)
>>>>>>             text.insert(first, newdata)
>>>>>>             text.undo_block_stop()
               else:
>>>>>>             text.mark_set("insert", last)
>>>>>>         text.see("insert")
>>>>>>         return "break"
       
    1: def find_paragraph(text, mark):
           """Returns the start/stop indices enclosing the paragraph that mark is in.
       
           Also returns the comment format string, if any, and paragraph of text
           between the start/stop indices.
           """
   99:     lineno, col = map(int, mark.split("."))
   99:     line = text.get("%d.0" % lineno, "%d.end" % lineno)
       
           # Look for start of next paragraph if the index passed in is a blank line
  132:     while text.compare("%d.0" % lineno, "<", "end") and is_all_white(line):
   33:         lineno = lineno + 1
   33:         line = text.get("%d.0" % lineno, "%d.end" % lineno)
   99:     first_lineno = lineno
   99:     comment_header = get_comment_header(line)
   99:     comment_header_len = len(comment_header)
       
           # Once start line found, search for end of paragraph (a blank line)
  252:     while get_comment_header(line)==comment_header and \
  180:               not is_all_white(line[comment_header_len:]):
  153:         lineno = lineno + 1
  153:         line = text.get("%d.0" % lineno, "%d.end" % lineno)
   99:     last = "%d.0" % lineno
       
           # Search back to beginning of paragraph (first blank line before)
   99:     lineno = first_lineno - 1
   99:     line = text.get("%d.0" % lineno, "%d.end" % lineno)
  135:     while lineno > 0 and \
  120:               get_comment_header(line)==comment_header and \
   54:               not is_all_white(line[comment_header_len:]):
   36:         lineno = lineno - 1
   36:         line = text.get("%d.0" % lineno, "%d.end" % lineno)
   99:     first = "%d.0" % (lineno+1)
       
   99:     return first, last, comment_header, text.get(first, last)
       
       # This should perhaps be replaced with textwrap.wrap
    1: def reformat_paragraph(data, limit):
           """Return data reformatted to specified width (limit)."""
   14:     lines = data.split("\n")
   14:     i = 0
   14:     n = len(lines)
   20:     while i < n and is_all_white(lines[i]):
    6:         i = i+1
   14:     if i >= n:
    1:         return data
   13:     indent1 = get_indent(lines[i])
   13:     if i+1 < n and not is_all_white(lines[i+1]):
>>>>>>         indent2 = get_indent(lines[i+1])
           else:
   13:         indent2 = indent1
   13:     new = lines[:i]
   13:     partial = indent1
   26:     while i < n and not is_all_white(lines[i]):
               # XXX Should take double space after period (etc.) into account
   13:         words = re.split("(\s+)", lines[i])
   90:         for j in range(0, len(words), 2):
   77:             word = words[j]
   77:             if not word:
    1:                 continue # Can happen when line ends in whitespace
   76:             if len((partial + word).expandtabs()) > limit and \
   14:                    partial != indent1:
   14:                 new.append(partial.rstrip())
   14:                 partial = indent2
   76:             partial = partial + word + " "
   76:             if j+1 < len(words) and words[j+1] != " ":
    1:                 partial = partial + " "
   13:         i = i+1
   13:     new.append(partial.rstrip())
           # XXX Should reformat remaining paragraphs as well
   13:     new.extend(lines[i:])
   13:     return "\n".join(new)
       
    1: def reformat_comment(data, limit, comment_header):
           """Return data reformatted to specified width with comment header."""
       
           # Remove header from the comment lines
    2:     lc = len(comment_header)
    6:     data = "\n".join(line[lc:] for line in data.split("\n"))
           # Reformat to maxformatwidth chars or a 20 char width,
           # whichever is greater.
    2:     format_width = max(limit - len(comment_header), 20)
    2:     newdata = reformat_paragraph(data, format_width)
           # re-split and re-insert the comment header.
    2:     newdata = newdata.split("\n")
           # If the block ends in a \n, we dont want the comment prefix
           # inserted after it. (Im not sure it makes sense to reformat a
           # comment block that is not made of complete lines, but whatever!)
           # Can't think of a clean solution, so we hack away
    2:     block_suffix = ""
    2:     if not newdata[-1]:
>>>>>>         block_suffix = "\n"
>>>>>>         newdata = newdata[:-1]
    8:     return '\n'.join(comment_header+line for line in newdata) + block_suffix
       
    1: def is_all_white(line):
           """Return True if line is empty or all whitespace."""
       
  401:     return re.match(r"^\s*$", line) is not None
       
    1: def get_indent(line):
           """Return the initial space or tab indent of line."""
   17:     return re.match(r"^([ \t]*)", line).group()
       
    1: def get_comment_header(line):
           """Return string with leading whitespace and '#' from line or ''.
       
           A null return indicates that the line is not a comment line. A non-
           null return, such as '    #', will be used to find the other lines of
           a comment block with the same  indent.
           """
  476:     m = re.match(r"^([ \t]*#*)", line)
  476:     if m is None: return ""
  476:     return m.group(1)
       
    1: if __name__ == "__main__":
>>>>>>     import unittest
>>>>>>     unittest.main('idlelib.idle_test.test_formatparagraph',
>>>>>>             verbosity=2, exit=False)
