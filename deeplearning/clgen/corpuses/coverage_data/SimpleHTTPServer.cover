       """Simple HTTP Server.
       
       This module builds on BaseHTTPServer by implementing the standard GET
       and HEAD requests in a fairly straightforward manner.
       
    1: """
       
       
    1: __version__ = "0.6"
       
    1: __all__ = ["SimpleHTTPRequestHandler"]
       
    1: import os
    1: import posixpath
    1: import BaseHTTPServer
    1: import urllib
    1: import urlparse
    1: import cgi
    1: import sys
    1: import shutil
    1: import mimetypes
    1: try:
    1:     from cStringIO import StringIO
>>>>>> except ImportError:
>>>>>>     from StringIO import StringIO
       
       
    2: class SimpleHTTPRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
       
           """Simple HTTP request handler with GET and HEAD commands.
       
           This serves files from the current directory and any of its
           subdirectories.  The MIME type for files is determined by
           calling the .guess_type() method.
       
           The GET and HEAD requests are identical except that the HEAD
           request omits the actual contents of the file.
       
    1:     """
       
    1:     server_version = "SimpleHTTP/" + __version__
       
    1:     def do_GET(self):
               """Serve a GET request."""
   29:         f = self.send_head()
   29:         if f:
    8:             try:
    8:                 self.copyfile(f, self.wfile)
                   finally:
    8:                 f.close()
       
    1:     def do_HEAD(self):
               """Serve a HEAD request."""
    1:         f = self.send_head()
    1:         if f:
    1:             f.close()
       
    1:     def send_head(self):
               """Common code for GET and HEAD commands.
       
               This sends the response code and MIME headers.
       
               Return value is either a file object (which has to be copied
               to the outputfile by the caller unless the command was HEAD,
               and must be closed by the caller under all circumstances), or
               None, in which case the caller has nothing further to do.
       
               """
   20:         path = self.translate_path(self.path)
   20:         f = None
   20:         if os.path.isdir(path):
   10:             parts = urlparse.urlsplit(self.path)
   10:             if not parts.path.endswith('/'):
                       # redirect browser - doing basically what apache does
    4:                 self.send_response(301)
    4:                 new_parts = (parts[0], parts[1], parts[2] + '/',
    4:                              parts[3], parts[4])
    4:                 new_url = urlparse.urlunsplit(new_parts)
    4:                 self.send_header("Location", new_url)
    4:                 self.end_headers()
    4:                 return None
   16:             for index in "index.html", "index.htm":
   11:                 index = os.path.join(path, index)
   11:                 if os.path.exists(index):
    1:                     path = index
    1:                     break
                   else:
    5:                 return self.list_directory(path)
   11:         ctype = self.guess_type(path)
   11:         try:
                   # Always read in binary mode. Opening files in text mode may cause
                   # newline translations, making the actual size of the content
                   # transmitted *less* than the content-length!
   11:             f = open(path, 'rb')
    6:         except IOError:
    6:             self.send_error(404, "File not found")
    6:             return None
    5:         try:
    5:             self.send_response(200)
    5:             self.send_header("Content-type", ctype)
    5:             fs = os.fstat(f.fileno())
    5:             self.send_header("Content-Length", str(fs[6]))
    5:             self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
    5:             self.end_headers()
    5:             return f
>>>>>>         except:
>>>>>>             f.close()
>>>>>>             raise
       
    1:     def list_directory(self, path):
               """Helper to produce a directory listing (absent index.html).
       
               Return value is either a file object, or None (indicating an
               error).  In either case, the headers are sent, making the
               interface the same as for send_head().
       
               """
    5:         try:
    5:             list = os.listdir(path)
    1:         except os.error:
    1:             self.send_error(404, "No permission to list directory")
    1:             return None
    8:         list.sort(key=lambda a: a.lower())
    4:         f = StringIO()
    4:         displaypath = cgi.escape(urllib.unquote(self.path))
    4:         f.write('<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">')
    4:         f.write("<html>\n<title>Directory listing for %s</title>\n" % displaypath)
    4:         f.write("<body>\n<h2>Directory listing for %s</h2>\n" % displaypath)
    4:         f.write("<hr>\n<ul>\n")
    8:         for name in list:
    4:             fullname = os.path.join(path, name)
    4:             displayname = linkname = name
                   # Append / for directories or @ for symbolic links
    4:             if os.path.isdir(fullname):
>>>>>>                 displayname = name + "/"
>>>>>>                 linkname = name + "/"
    4:             if os.path.islink(fullname):
>>>>>>                 displayname = name + "@"
                       # Note: a link to a directory displays with @ and links with /
    4:             f.write('<li><a href="%s">%s</a>\n'
    4:                     % (urllib.quote(linkname), cgi.escape(displayname)))
    4:         f.write("</ul>\n<hr>\n</body>\n</html>\n")
    4:         length = f.tell()
    4:         f.seek(0)
    4:         self.send_response(200)
    4:         encoding = sys.getfilesystemencoding()
    4:         self.send_header("Content-type", "text/html; charset=%s" % encoding)
    4:         self.send_header("Content-Length", str(length))
    4:         self.end_headers()
    4:         return f
       
    1:     def translate_path(self, path):
               """Translate a /-separated PATH to the local filename syntax.
       
               Components that mean special things to the local file system
               (e.g. drive or directory names) are ignored.  (XXX They should
               probably be diagnosed.)
       
               """
               # abandon query parameters
   53:         path = path.split('?',1)[0]
   53:         path = path.split('#',1)[0]
               # Don't forget explicit trailing slash when normalizing. Issue17324
   53:         trailing_slash = path.rstrip().endswith('/')
   53:         path = posixpath.normpath(urllib.unquote(path))
   53:         words = path.split('/')
   53:         words = filter(None, words)
   53:         path = os.getcwd()
  129:         for word in words:
   76:             if os.path.dirname(word) or word in (os.curdir, os.pardir):
                       # Ignore components that are not a simple file/directory name
    9:                 continue
   63:             path = os.path.join(path, word)
   53:         if trailing_slash:
    9:             path += '/'
   53:         return path
       
    1:     def copyfile(self, source, outputfile):
               """Copy all data between two file objects.
       
               The SOURCE argument is a file object open for reading
               (or anything with a read() method) and the DESTINATION
               argument is a file object open for writing (or
               anything with a write() method).
       
               The only reason for overriding this would be to change
               the block size or perhaps to replace newlines by CRLF
               -- note however that this the default server uses this
               to copy binary data as well.
       
               """
    8:         shutil.copyfileobj(source, outputfile)
       
    1:     def guess_type(self, path):
               """Guess the type of a file.
       
               Argument is a PATH (a filename).
       
               Return value is a string of the form type/subtype,
               usable for a MIME Content-type header.
       
               The default implementation looks the file's extension
               up in the table self.extensions_map, using application/octet-stream
               as a default; however it would be permissible (if
               slow) to look inside the data to make a better guess.
       
               """
       
   11:         base, ext = posixpath.splitext(path)
   11:         if ext in self.extensions_map:
   10:             return self.extensions_map[ext]
    1:         ext = ext.lower()
    1:         if ext in self.extensions_map:
>>>>>>             return self.extensions_map[ext]
               else:
    1:             return self.extensions_map['']
       
    1:     if not mimetypes.inited:
    1:         mimetypes.init() # try to read system mime.types
    1:     extensions_map = mimetypes.types_map.copy()
    1:     extensions_map.update({
    1:         '': 'application/octet-stream', # Default
    1:         '.py': 'text/plain',
    1:         '.c': 'text/plain',
    1:         '.h': 'text/plain',
               })
       
       
    1: def test(HandlerClass = SimpleHTTPRequestHandler,
    1:          ServerClass = BaseHTTPServer.HTTPServer):
>>>>>>     BaseHTTPServer.test(HandlerClass, ServerClass)
       
       
    1: if __name__ == '__main__':
>>>>>>     test()
