       """Suite Legacy suite: Operations formerly handled by the Finder, but now automatically delegated to other applications
       Level 1, version 1
       
       Generated from /System/Library/CoreServices/Finder.app
       AETE/AEUT resource version 0/144, language 0, script 0
    1: """
       
    1: import aetools
    1: import MacOS
       
    1: _code = 'fleg'
       
    2: class Legacy_suite_Events:
       
    1:     def restart(self, _no_object=None, _attributes={}, **_arguments):
               """restart: Restart the computer
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'fndr'
>>>>>>         _subcode = 'rest'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def shut_down(self, _no_object=None, _attributes={}, **_arguments):
               """shut down: Shut Down the computer
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'fndr'
>>>>>>         _subcode = 'shut'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def sleep(self, _no_object=None, _attributes={}, **_arguments):
               """sleep: Put the computer to sleep
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'fndr'
>>>>>>         _subcode = 'slep'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
       
    2: class application(aetools.ComponentItem):
    1:     """application - The Finder """
    1:     want = 'capp'
    2: class _Prop_desktop_picture(aetools.NProperty):
    1:     """desktop picture - the desktop picture of the main monitor """
    1:     which = 'dpic'
    1:     want = 'file'
    1: desktop_picture = _Prop_desktop_picture()
       
    2: class application_process(aetools.ComponentItem):
    1:     """application process - A process launched from an application file """
    1:     want = 'pcap'
    2: class _Prop__3c_Inheritance_3e_(aetools.NProperty):
    1:     """<Inheritance> - inherits some of its properties from the process class """
    1:     which = 'c@#^'
    1:     want = 'prcs'
    2: class _Prop_application_file(aetools.NProperty):
    1:     """application file - the application file from which this process was launched """
    1:     which = 'appf'
    1:     want = 'appf'
       
    1: application_processes = application_process
       
    2: class desk_accessory_process(aetools.ComponentItem):
    1:     """desk accessory process - A process launched from a desk accessory file """
    1:     want = 'pcda'
    2: class _Prop_desk_accessory_file(aetools.NProperty):
    1:     """desk accessory file - the desk accessory file from which this process was launched """
    1:     which = 'dafi'
    1:     want = 'obj '
       
    1: desk_accessory_processes = desk_accessory_process
       
    2: class process(aetools.ComponentItem):
    1:     """process - A process running on this computer """
    1:     want = 'prcs'
    2: class _Prop_accepts_high_level_events(aetools.NProperty):
    1:     """accepts high level events - Is the process high-level event aware (accepts open application, open document, print document, and quit)? """
    1:     which = 'isab'
    1:     want = 'bool'
    2: class _Prop_accepts_remote_events(aetools.NProperty):
    1:     """accepts remote events - Does the process accept remote events? """
    1:     which = 'revt'
    1:     want = 'bool'
    2: class _Prop_creator_type(aetools.NProperty):
    1:     """creator type - the OSType of the creator of the process (the signature) """
    1:     which = 'fcrt'
    1:     want = 'type'
    2: class _Prop_file(aetools.NProperty):
    1:     """file - the file from which the process was launched """
    1:     which = 'file'
    1:     want = 'obj '
    2: class _Prop_file_type(aetools.NProperty):
    1:     """file type - the OSType of the file type of the process """
    1:     which = 'asty'
    1:     want = 'type'
    2: class _Prop_frontmost(aetools.NProperty):
    1:     """frontmost - Is the process the frontmost process? """
    1:     which = 'pisf'
    1:     want = 'bool'
    2: class _Prop_has_scripting_terminology(aetools.NProperty):
    1:     """has scripting terminology - Does the process have a scripting terminology, i.e., can it be scripted? """
    1:     which = 'hscr'
    1:     want = 'bool'
    2: class _Prop_name(aetools.NProperty):
    1:     """name - the name of the process """
    1:     which = 'pnam'
    1:     want = 'itxt'
    2: class _Prop_partition_space_used(aetools.NProperty):
    1:     """partition space used - the number of bytes currently used in the process' partition """
    1:     which = 'pusd'
    1:     want = 'long'
    2: class _Prop_total_partition_size(aetools.NProperty):
    1:     """total partition size - the size of the partition with which the process was launched """
    1:     which = 'appt'
    1:     want = 'long'
    2: class _Prop_visible(aetools.NProperty):
    1:     """visible - Is the process' layer visible? """
    1:     which = 'pvis'
    1:     want = 'bool'
       
    1: processes = process
    1: application._superclassnames = []
    1: application._privpropdict = {
    1:     'desktop_picture' : _Prop_desktop_picture,
       }
    1: application._privelemdict = {
       }
    1: application_process._superclassnames = ['process']
    1: application_process._privpropdict = {
    1:     '_3c_Inheritance_3e_' : _Prop__3c_Inheritance_3e_,
    1:     'application_file' : _Prop_application_file,
       }
    1: application_process._privelemdict = {
       }
    1: desk_accessory_process._superclassnames = ['process']
    1: desk_accessory_process._privpropdict = {
    1:     '_3c_Inheritance_3e_' : _Prop__3c_Inheritance_3e_,
    1:     'desk_accessory_file' : _Prop_desk_accessory_file,
       }
    1: desk_accessory_process._privelemdict = {
       }
    1: process._superclassnames = []
    1: process._privpropdict = {
    1:     'accepts_high_level_events' : _Prop_accepts_high_level_events,
    1:     'accepts_remote_events' : _Prop_accepts_remote_events,
    1:     'creator_type' : _Prop_creator_type,
    1:     'file' : _Prop_file,
    1:     'file_type' : _Prop_file_type,
    1:     'frontmost' : _Prop_frontmost,
    1:     'has_scripting_terminology' : _Prop_has_scripting_terminology,
    1:     'name' : _Prop_name,
    1:     'partition_space_used' : _Prop_partition_space_used,
    1:     'total_partition_size' : _Prop_total_partition_size,
    1:     'visible' : _Prop_visible,
       }
    1: process._privelemdict = {
       }
       
       #
       # Indices of types declared in this module
       #
    1: _classdeclarations = {
    1:     'capp' : application,
    1:     'pcap' : application_process,
    1:     'pcda' : desk_accessory_process,
    1:     'prcs' : process,
       }
       
    1: _propdeclarations = {
    1:     'appf' : _Prop_application_file,
    1:     'appt' : _Prop_total_partition_size,
    1:     'asty' : _Prop_file_type,
    1:     'c@#^' : _Prop__3c_Inheritance_3e_,
    1:     'dafi' : _Prop_desk_accessory_file,
    1:     'dpic' : _Prop_desktop_picture,
    1:     'fcrt' : _Prop_creator_type,
    1:     'file' : _Prop_file,
    1:     'hscr' : _Prop_has_scripting_terminology,
    1:     'isab' : _Prop_accepts_high_level_events,
    1:     'pisf' : _Prop_frontmost,
    1:     'pnam' : _Prop_name,
    1:     'pusd' : _Prop_partition_space_used,
    1:     'pvis' : _Prop_visible,
    1:     'revt' : _Prop_accepts_remote_events,
       }
       
    1: _compdeclarations = {
       }
       
    1: _enumdeclarations = {
       }
