       """distutils.dir_util
       
    2: Utility functions for manipulating directories and directory trees."""
       
    2: __revision__ = "$Id$"
       
    2: import os
    2: import errno
    2: from distutils.errors import DistutilsFileError, DistutilsInternalError
    2: from distutils import log
       
       # cache for by mkpath() -- in addition to cheapening redundant calls,
       # eliminates redundant "creating /foo/bar/baz" messages in dry-run mode
    2: _path_created = {}
       
       # I don't use os.makedirs because a) it's new to Python 1.5.2, and
       # b) it blows up if the directory already exists (I want to silently
       # succeed in that case).
    2: def mkpath(name, mode=0777, verbose=1, dry_run=0):
           """Create a directory and any missing ancestor directories.
       
           If the directory already exists (or if 'name' is the empty string, which
           means the current directory, which of course exists), then do nothing.
           Raise DistutilsFileError if unable to create some directory along the way
           (eg. some sub-path exists, but is a file rather than a directory).
           If 'verbose' is true, print a one-line summary of each mkdir to stdout.
           Return the list of directories actually created.
           """
       
           global _path_created
       
           # Detect a common bug -- name is None
  191:     if not isinstance(name, basestring):
>>>>>>         raise DistutilsInternalError, \
>>>>>>               "mkpath: 'name' must be a string (got %r)" % (name,)
       
           # XXX what's the better way to handle verbosity? print as we create
           # each directory in the path (the current behaviour), or only announce
           # the creation of the whole path? (quite easy to do the latter since
           # we're not using a recursive algorithm)
       
  191:     name = os.path.normpath(name)
  191:     created_dirs = []
  191:     if os.path.isdir(name) or name == '':
  102:         return created_dirs
   89:     if _path_created.get(os.path.abspath(name)):
>>>>>>         return created_dirs
       
   89:     (head, tail) = os.path.split(name)
   89:     tails = [tail]                      # stack of lone dirs to create
       
  169:     while head and tail and not os.path.isdir(head):
   80:         (head, tail) = os.path.split(head)
   80:         tails.insert(0, tail)          # push next higher dir onto stack
       
           # now 'head' contains the deepest directory that already exists
           # (that is, the child of 'head' in 'name' is the highest directory
           # that does *not* exist)
  258:     for d in tails:
               #print "head = %s, d = %s: " % (head, d),
  169:         head = os.path.join(head, d)
  169:         abs_head = os.path.abspath(head)
       
  169:         if _path_created.get(abs_head):
>>>>>>             continue
       
  169:         if verbose >= 1:
  159:             log.info("creating %s", head)
       
  169:         if not dry_run:
  169:             try:
  169:                 os.mkdir(head, mode)
>>>>>>             except OSError, exc:
>>>>>>                 if not (exc.errno == errno.EEXIST and os.path.isdir(head)):
>>>>>>                     raise DistutilsFileError(
>>>>>>                           "could not create '%s': %s" % (head, exc.args[-1]))
  169:             created_dirs.append(head)
       
  169:         _path_created[abs_head] = 1
   89:     return created_dirs
       
    2: def create_tree(base_dir, files, mode=0777, verbose=1, dry_run=0):
           """Create all the empty directories under 'base_dir' needed to put 'files'
           there.
       
           'base_dir' is just the name of a directory which doesn't necessarily
           exist yet; 'files' is a list of filenames to be interpreted relative to
           'base_dir'.  'base_dir' + the directory portion of every file in 'files'
           will be created if it doesn't already exist.  'mode', 'verbose' and
           'dry_run' flags are as for 'mkpath()'.
           """
           # First get the list of directories to create
   16:     need_dir = {}
   71:     for file in files:
   55:         need_dir[os.path.join(base_dir, os.path.dirname(file))] = 1
   16:     need_dirs = need_dir.keys()
   16:     need_dirs.sort()
       
           # Now create them
   47:     for dir in need_dirs:
   31:         mkpath(dir, mode, verbose=verbose, dry_run=dry_run)
       
    2: def copy_tree(src, dst, preserve_mode=1, preserve_times=1,
    2:               preserve_symlinks=0, update=0, verbose=1, dry_run=0):
           """Copy an entire directory tree 'src' to a new location 'dst'.
       
           Both 'src' and 'dst' must be directory names.  If 'src' is not a
           directory, raise DistutilsFileError.  If 'dst' does not exist, it is
           created with 'mkpath()'.  The end result of the copy is that every
           file in 'src' is copied to 'dst', and directories under 'src' are
           recursively copied to 'dst'.  Return the list of files that were
           copied or might have been copied, using their output name.  The
           return value is unaffected by 'update' or 'dry_run': it is simply
           the list of all files under 'src', with the names changed to be
           under 'dst'.
       
           'preserve_mode' and 'preserve_times' are the same as for
           'copy_file'; note that they only apply to regular files, not to
           directories.  If 'preserve_symlinks' is true, symlinks will be
           copied as symlinks (on platforms that support them!); otherwise
           (the default), the destination of the symlink will be copied.
           'update' and 'verbose' are the same as for 'copy_file'.
           """
    9:     from distutils.file_util import copy_file
       
    9:     if not dry_run and not os.path.isdir(src):
>>>>>>         raise DistutilsFileError, \
>>>>>>               "cannot copy tree '%s': not a directory" % src
    9:     try:
    9:         names = os.listdir(src)
>>>>>>     except os.error, (errno, errstr):
>>>>>>         if dry_run:
>>>>>>             names = []
               else:
>>>>>>             raise DistutilsFileError, \
>>>>>>                   "error listing files in '%s': %s" % (src, errstr)
       
    9:     if not dry_run:
    9:         mkpath(dst, verbose=verbose)
       
    9:     outputs = []
       
   20:     for n in names:
   11:         src_name = os.path.join(src, n)
   11:         dst_name = os.path.join(dst, n)
       
   11:         if n.startswith('.nfs'):
                   # skip NFS rename files
    1:             continue
       
   10:         if preserve_symlinks and os.path.islink(src_name):
>>>>>>             link_dest = os.readlink(src_name)
>>>>>>             if verbose >= 1:
>>>>>>                 log.info("linking %s -> %s", dst_name, link_dest)
>>>>>>             if not dry_run:
>>>>>>                 os.symlink(link_dest, dst_name)
>>>>>>             outputs.append(dst_name)
       
   10:         elif os.path.isdir(src_name):
>>>>>>             outputs.extend(
>>>>>>                 copy_tree(src_name, dst_name, preserve_mode,
>>>>>>                           preserve_times, preserve_symlinks, update,
>>>>>>                           verbose=verbose, dry_run=dry_run))
               else:
   10:             copy_file(src_name, dst_name, preserve_mode,
   10:                       preserve_times, update, verbose=verbose,
   10:                       dry_run=dry_run)
   10:             outputs.append(dst_name)
       
    9:     return outputs
       
    2: def _build_cmdtuple(path, cmdtuples):
           """Helper for remove_tree()."""
  264:     for f in os.listdir(path):
  185:         real_f = os.path.join(path,f)
  185:         if os.path.isdir(real_f) and not os.path.islink(real_f):
   43:             _build_cmdtuple(real_f, cmdtuples)
               else:
  142:             cmdtuples.append((os.remove, real_f))
   79:     cmdtuples.append((os.rmdir, path))
       
    2: def remove_tree(directory, verbose=1, dry_run=0):
           """Recursively remove an entire directory tree.
       
           Any errors are ignored (apart from being reported to stdout if 'verbose'
           is true).
           """
           global _path_created
       
   36:     if verbose >= 1:
   28:         log.info("removing '%s' (and everything under it)", directory)
   36:     if dry_run:
>>>>>>         return
   36:     cmdtuples = []
   36:     _build_cmdtuple(directory, cmdtuples)
  257:     for cmd in cmdtuples:
  221:         try:
  221:             cmd[0](cmd[1])
                   # remove dir from cache if it's already there
  221:             abspath = os.path.abspath(cmd[1])
  221:             if abspath in _path_created:
   74:                 del _path_created[abspath]
>>>>>>         except (IOError, OSError), exc:
>>>>>>             log.warn("error removing %s: %s", directory, exc)
       
    2: def ensure_relative(path):
           """Take the full path 'path', and make it a relative path.
       
           This is useful to make 'path' the second argument to os.path.join().
           """
    2:     drive, path = os.path.splitdrive(path)
    2:     if path[0:1] == os.sep:
    1:         path = drive + path[1:]
    2:     return path
