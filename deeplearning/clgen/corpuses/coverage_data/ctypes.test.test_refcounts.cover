    1: import unittest
    1: import ctypes
    1: import gc
       
    1: MyCallback = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int)
    1: OtherCallback = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_ulonglong)
       
    1: import _ctypes_test
    1: dll = ctypes.CDLL(_ctypes_test.__file__)
       
    2: class RefcountTestCase(unittest.TestCase):
       
    1:     def test_1(self):
    1:         from sys import getrefcount as grc
       
    1:         f = dll._testfunc_callback_i_if
    1:         f.restype = ctypes.c_int
    1:         f.argtypes = [ctypes.c_int, MyCallback]
       
    1:         def callback(value):
                   #print "called back with", value
>>>>>>             return value
       
    1:         self.assertEqual(grc(callback), 2)
>>>>>>         cb = MyCallback(callback)
       
>>>>>>         self.assertGreater(grc(callback), 2)
>>>>>>         result = f(-10, cb)
>>>>>>         self.assertEqual(result, -18)
>>>>>>         cb = None
       
>>>>>>         gc.collect()
       
>>>>>>         self.assertEqual(grc(callback), 2)
       
       
    1:     def test_refcount(self):
    1:         from sys import getrefcount as grc
    1:         def func(*args):
>>>>>>             pass
               # this is the standard refcount for func
    1:         self.assertEqual(grc(func), 2)
       
               # the CFuncPtr instance holds at least one refcount on func:
>>>>>>         f = OtherCallback(func)
>>>>>>         self.assertGreater(grc(func), 2)
       
               # and may release it again
>>>>>>         del f
>>>>>>         self.assertGreaterEqual(grc(func), 2)
       
               # but now it must be gone
>>>>>>         gc.collect()
>>>>>>         self.assertEqual(grc(func), 2)
       
>>>>>>         class X(ctypes.Structure):
>>>>>>             _fields_ = [("a", OtherCallback)]
>>>>>>         x = X()
>>>>>>         x.a = OtherCallback(func)
       
               # the CFuncPtr instance holds at least one refcount on func:
>>>>>>         self.assertGreater(grc(func), 2)
       
               # and may release it again
>>>>>>         del x
>>>>>>         self.assertGreaterEqual(grc(func), 2)
       
               # and now it must be gone again
>>>>>>         gc.collect()
>>>>>>         self.assertEqual(grc(func), 2)
       
>>>>>>         f = OtherCallback(func)
       
               # the CFuncPtr instance holds at least one refcount on func:
>>>>>>         self.assertGreater(grc(func), 2)
       
               # create a cycle
>>>>>>         f.cycle = f
       
>>>>>>         del f
>>>>>>         gc.collect()
>>>>>>         self.assertEqual(grc(func), 2)
       
    2: class AnotherLeak(unittest.TestCase):
    1:     def test_callback(self):
    1:         import sys
       
    1:         proto = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_int)
    1:         def func(a, b):
    1:             return a * b * 2
    1:         f = proto(func)
       
    1:         a = sys.getrefcount(ctypes.c_int)
    1:         f(1, 2)
    1:         self.assertEqual(sys.getrefcount(ctypes.c_int), a)
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
