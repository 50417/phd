    1: import sys
    1: from test import test_support, list_tests
       
    2: class ListTest(list_tests.CommonTest):
    1:     type2test = list
       
    1:     def test_basic(self):
    1:         self.assertEqual(list([]), [])
    1:         l0_3 = [0, 1, 2, 3]
    1:         l0_3_bis = list(l0_3)
    1:         self.assertEqual(l0_3, l0_3_bis)
    1:         self.assertTrue(l0_3 is not l0_3_bis)
    1:         self.assertEqual(list(()), [])
    1:         self.assertEqual(list((0, 1, 2, 3)), [0, 1, 2, 3])
    1:         self.assertEqual(list(''), [])
    1:         self.assertEqual(list('spam'), ['s', 'p', 'a', 'm'])
       
    1:         if sys.maxsize == 0x7fffffff:
                   # This test can currently only work on 32-bit machines.
                   # XXX If/when PySequence_Length() returns a ssize_t, it should be
                   # XXX re-enabled.
                   # Verify clearing of bug #556025.
                   # This assumes that the max data size (sys.maxint) == max
                   # address size this also assumes that the address size is at
                   # least 4 bytes with 8 byte addresses, the bug is not well
                   # tested
                   #
                   # Note: This test is expected to SEGV under Cygwin 1.3.12 or
                   # earlier due to a newlib bug.  See the following mailing list
                   # thread for the details:
       
                   #     http://sources.redhat.com/ml/newlib/2002/msg00369.html
>>>>>>             self.assertRaises(MemoryError, list, xrange(sys.maxint // 2))
       
               # This code used to segfault in Py2.4a3
    1:         x = []
    2:         x.extend(-y for y in x)
    1:         self.assertEqual(x, [])
       
    1:     def test_truth(self):
    1:         super(ListTest, self).test_truth()
    1:         self.assertTrue(not [])
    1:         self.assertTrue([42])
       
    1:     def test_identity(self):
    1:         self.assertTrue([] is not [])
       
    1:     def test_len(self):
    1:         super(ListTest, self).test_len()
    1:         self.assertEqual(len([]), 0)
    1:         self.assertEqual(len([0]), 1)
    1:         self.assertEqual(len([0, 1, 2]), 3)
       
    1:     def test_overflow(self):
    1:         lst = [4, 5, 6, 7]
    1:         n = int((sys.maxsize*2+2) // len(lst))
    2:         def mul(a, b): return a * b
    2:         def imul(a, b): a *= b
    1:         self.assertRaises((MemoryError, OverflowError), mul, lst, n)
    1:         self.assertRaises((MemoryError, OverflowError), imul, lst, n)
       
    1: def test_main(verbose=None):
    1:     test_support.run_unittest(ListTest)
       
           # verify reference counting
    1:     import sys
    1:     if verbose and hasattr(sys, "gettotalrefcount"):
>>>>>>         import gc
>>>>>>         counts = [None] * 5
>>>>>>         for i in xrange(len(counts)):
>>>>>>             test_support.run_unittest(ListTest)
>>>>>>             gc.collect()
>>>>>>             counts[i] = sys.gettotalrefcount()
>>>>>>         print counts
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main(verbose=True)
