       
    2: def flatten(tup):
>>>>>>     elts = []
>>>>>>     for elt in tup:
>>>>>>         if isinstance(elt, tuple):
>>>>>>             elts = elts + flatten(elt)
               else:
>>>>>>             elts.append(elt)
>>>>>>     return elts
       
    4: class Set:
    2:     def __init__(self):
   81:         self.elts = {}
    2:     def __len__(self):
>>>>>>         return len(self.elts)
    2:     def __contains__(self, elt):
>>>>>>         return elt in self.elts
    2:     def add(self, elt):
  158:         self.elts[elt] = elt
    2:     def elements(self):
   57:         return self.elts.keys()
    2:     def has_elt(self, elt):
    1:         return elt in self.elts
    2:     def remove(self, elt):
    1:         del self.elts[elt]
    2:     def copy(self):
>>>>>>         c = Set()
>>>>>>         c.elts.update(self.elts)
>>>>>>         return c
       
    4: class Stack:
    2:     def __init__(self):
   66:         self.stack = []
   66:         self.pop = self.stack.pop
    2:     def __len__(self):
>>>>>>         return len(self.stack)
    2:     def push(self, elt):
   37:         self.stack.append(elt)
    2:     def top(self):
>>>>>>         return self.stack[-1]
    2:     def __getitem__(self, index): # needed by visitContinue()
>>>>>>         return self.stack[index]
       
    2: MANGLE_LEN = 256 # magic constant from compile.c
       
    2: def mangle(name, klass):
    2:     if not name.startswith('__'):
>>>>>>         return name
    2:     if len(name) + 2 >= MANGLE_LEN:
>>>>>>         return name
    2:     if name.endswith('__'):
    2:         return name
>>>>>>     try:
>>>>>>         i = 0
>>>>>>         while klass[i] == '_':
>>>>>>             i = i + 1
>>>>>>     except IndexError:
>>>>>>         return name
>>>>>>     klass = klass[i:]
       
>>>>>>     tlen = len(klass) + len(name)
>>>>>>     if tlen > MANGLE_LEN:
>>>>>>         klass = klass[:MANGLE_LEN-tlen]
       
>>>>>>     return "_%s%s" % (klass, name)
       
    2: def set_filename(filename, tree):
           """Set the filename attribute to filename on every node in tree"""
   24:     worklist = [tree]
  315:     while worklist:
  291:         node = worklist.pop(0)
  291:         node.filename = filename
  291:         worklist.extend(node.getChildNodes())
