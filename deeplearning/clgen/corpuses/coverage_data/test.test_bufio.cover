    1: import unittest
    1: from test import test_support as support
       
    1: import io # C implementation.
    1: import _pyio as pyio # Python implementation.
       
       # Simple test to ensure that optimizations in the IO library deliver the
       # expected results.  For best testing, run this under a debug-build Python too
       # (to exercise asserts in the C code).
       
    1: lengths = list(range(1, 257)) + [512, 1000, 1024, 2048, 4096, 8192, 10000,
    1:                                  16384, 32768, 65536, 1000000]
       
    2: class BufferSizeTest(unittest.TestCase):
    1:     def try_one(self, s):
               # Write s + "\n" + s to file, then open it and ensure that successive
               # .readline()s deliver what we wrote.
       
               # Ensure we can open TESTFN for writing.
 4806:         support.unlink(support.TESTFN)
       
               # Since C doesn't guarantee we can write/read arbitrary bytes in text
               # files, use binary mode.
 4806:         f = self.open(support.TESTFN, "wb")
 4806:         try:
                   # write once with \n and once without
 4806:             f.write(s)
 4806:             f.write(b"\n")
 4806:             f.write(s)
 4806:             f.close()
 4806:             f = open(support.TESTFN, "rb")
 4806:             line = f.readline()
 4806:             self.assertEqual(line, s + b"\n")
 4806:             line = f.readline()
 4806:             self.assertEqual(line, s)
 4806:             line = f.readline()
 4806:             self.assertFalse(line) # Must be at EOF
 4806:             f.close()
               finally:
 4806:             support.unlink(support.TESTFN)
       
    1:     def drive_one(self, pattern):
 1608:         for length in lengths:
                   # Repeat string 'pattern' as often as needed to reach total length
                   # 'length'.  Then call try_one with that string, a string one larger
                   # than that, and a string one smaller than that.  Try this with all
                   # small sizes and various powers of 2, so we exercise all likely
                   # stdio buffer sizes, and "off by one" errors on both sides.
 1602:             q, r = divmod(length, len(pattern))
 1602:             teststring = pattern * q + pattern[:r]
 1602:             self.assertEqual(len(teststring), length)
 1602:             self.try_one(teststring)
 1602:             self.try_one(teststring + b"x")
 1602:             self.try_one(teststring[:-1])
       
    1:     def test_primepat(self):
               # A pattern with prime length, to avoid simple relationships with
               # stdio buffer sizes.
    3:         self.drive_one(b"1234567890\00\01\02\03\04\05\06")
       
    1:     def test_nullpat(self):
    3:         self.drive_one(bytes(1000))
       
       
    2: class CBufferSizeTest(BufferSizeTest):
    1:     open = io.open
       
    2: class PyBufferSizeTest(BufferSizeTest):
    1:     open = staticmethod(pyio.open)
       
    2: class BuiltinBufferSizeTest(BufferSizeTest):
    1:     open = open
       
       
    1: def test_main():
    1:     support.run_unittest(CBufferSizeTest, PyBufferSizeTest, BuiltinBufferSizeTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
