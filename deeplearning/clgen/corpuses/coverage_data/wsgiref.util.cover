    1: """Miscellaneous WSGI-related Utilities"""
       
    1: import posixpath
       
       __all__ = [
    1:     'FileWrapper', 'guess_scheme', 'application_uri', 'request_uri',
    1:     'shift_path_info', 'setup_testing_defaults',
       ]
       
       
    2: class FileWrapper:
    1:     """Wrapper to convert file-like objects to iterables"""
       
    1:     def __init__(self, filelike, blksize=8192):
    3:         self.filelike = filelike
    3:         self.blksize = blksize
    3:         if hasattr(filelike,'close'):
    3:             self.close = filelike.close
       
    1:     def __getitem__(self,key):
    3:         data = self.filelike.read(self.blksize)
    3:         if data:
    2:             return data
    1:         raise IndexError
       
    1:     def __iter__(self):
    2:         return self
       
    1:     def next(self):
    6:         data = self.filelike.read(self.blksize)
    6:         if data:
    4:             return data
    2:         raise StopIteration
       
    1: def guess_scheme(environ):
           """Return a guess for whether 'wsgi.url_scheme' should be 'http' or 'https'
           """
  147:     if environ.get("HTTPS") in ('yes','on','1'):
   10:         return 'https'
           else:
  137:         return 'http'
       
    1: def application_uri(environ):
           """Return the application's base URI (no PATH_INFO or QUERY_STRING)"""
   18:     url = environ['wsgi.url_scheme']+'://'
   18:     from urllib import quote
       
   18:     if environ.get('HTTP_HOST'):
   17:         url += environ['HTTP_HOST']
           else:
    1:         url += environ['SERVER_NAME']
       
    1:         if environ['wsgi.url_scheme'] == 'https':
>>>>>>             if environ['SERVER_PORT'] != '443':
>>>>>>                 url += ':' + environ['SERVER_PORT']
               else:
    1:             if environ['SERVER_PORT'] != '80':
    1:                 url += ':' + environ['SERVER_PORT']
       
   18:     url += quote(environ.get('SCRIPT_NAME') or '/')
   18:     return url
       
    1: def request_uri(environ, include_query=1):
           """Return the full request URI, optionally including the query string"""
   10:     url = application_uri(environ)
   10:     from urllib import quote
   10:     path_info = quote(environ.get('PATH_INFO',''),safe='/;=,')
   10:     if not environ.get('SCRIPT_NAME'):
    1:         url += path_info[1:]
           else:
    9:         url += path_info
   10:     if include_query and environ.get('QUERY_STRING'):
    2:         url += '?' + environ['QUERY_STRING']
   10:     return url
       
    1: def shift_path_info(environ):
           """Shift a name from PATH_INFO to SCRIPT_NAME, returning it
       
           If there are no remaining path segments in PATH_INFO, return None.
           Note: 'environ' is modified in-place; use a copy if you need to keep
           the original PATH_INFO or SCRIPT_NAME.
       
           Note: when PATH_INFO is just a '/', this returns '' and appends a trailing
           '/' to SCRIPT_NAME, even though empty path segments are normally ignored,
           and SCRIPT_NAME doesn't normally end in a '/'.  This is intentional
           behavior, to ensure that an application can tell the difference between
           '/x' and '/x/' when traversing to objects.
           """
   16:     path_info = environ.get('PATH_INFO','')
   16:     if not path_info:
    1:         return None
       
   15:     path_parts = path_info.split('/')
   39:     path_parts[1:-1] = [p for p in path_parts[1:-1] if p and p != '.']
   15:     name = path_parts[1]
   15:     del path_parts[1]
       
   15:     script_name = environ.get('SCRIPT_NAME','')
   15:     script_name = posixpath.normpath(script_name+'/'+name)
   15:     if script_name.endswith('/'):
    2:         script_name = script_name[:-1]
   15:     if not name and not script_name.endswith('/'):
    3:         script_name += '/'
       
   15:     environ['SCRIPT_NAME'] = script_name
   15:     environ['PATH_INFO']   = '/'.join(path_parts)
       
           # Special case: '/.' on PATH_INFO doesn't get stripped,
           # because we don't strip the last element of PATH_INFO
           # if there's only one path part left.  Instead of fixing this
           # above, we fix it here so that PATH_INFO gets normalized to
           # an empty string in the environ.
   15:     if name=='.':
    1:         name = None
   15:     return name
       
    1: def setup_testing_defaults(environ):
           """Update 'environ' with trivial defaults for testing purposes
       
           This adds various parameters required for WSGI, including HTTP_HOST,
           SERVER_NAME, SERVER_PORT, REQUEST_METHOD, SCRIPT_NAME, PATH_INFO,
           and all of the wsgi.* variables.  It only supplies default values,
           and does not replace any existing settings for these variables.
       
           This routine is intended to make it easier for unit tests of WSGI
           servers and applications to set up dummy environments.  It should *not*
           be used by actual WSGI servers or applications, since the data is fake!
           """
       
  104:     environ.setdefault('SERVER_NAME','127.0.0.1')
  104:     environ.setdefault('SERVER_PROTOCOL','HTTP/1.0')
       
  104:     environ.setdefault('HTTP_HOST',environ['SERVER_NAME'])
  104:     environ.setdefault('REQUEST_METHOD','GET')
       
  104:     if 'SCRIPT_NAME' not in environ and 'PATH_INFO' not in environ:
   75:         environ.setdefault('SCRIPT_NAME','')
   75:         environ.setdefault('PATH_INFO','/')
       
  104:     environ.setdefault('wsgi.version', (1,0))
  104:     environ.setdefault('wsgi.run_once', 0)
  104:     environ.setdefault('wsgi.multithread', 0)
  104:     environ.setdefault('wsgi.multiprocess', 0)
       
  104:     from StringIO import StringIO
  104:     environ.setdefault('wsgi.input', StringIO(""))
  104:     environ.setdefault('wsgi.errors', StringIO())
  104:     environ.setdefault('wsgi.url_scheme',guess_scheme(environ))
       
  104:     if environ['wsgi.url_scheme']=='http':
   97:         environ.setdefault('SERVER_PORT', '80')
    7:     elif environ['wsgi.url_scheme']=='https':
    6:         environ.setdefault('SERVER_PORT', '443')
       
       
       
    1: _hoppish = {
    1:     'connection':1, 'keep-alive':1, 'proxy-authenticate':1,
    1:     'proxy-authorization':1, 'te':1, 'trailers':1, 'transfer-encoding':1,
    1:     'upgrade':1
       }.__contains__
       
    1: def is_hop_by_hop(header_name):
           """Return true if 'header_name' is an HTTP/1.1 "Hop-by-Hop" header"""
   68:     return _hoppish(header_name.lower())
