       """Python abstract syntax node definitions
       
       This file is automatically generated by Tools/compiler/astgen.py
    2: """
    2: from compiler.consts import CO_VARARGS, CO_VARKEYWORDS
       
    2: def flatten(seq):
  876:     l = []
 2176:     for elt in seq:
 1300:         t = type(elt)
 1300:         if t is tuple or t is list:
  262:             for elt2 in flatten(elt):
  177:                 l.append(elt2)
               else:
 1215:             l.append(elt)
  876:     return l
       
    2: def flatten_nodes(seq):
 2000:     return [n for n in flatten(seq) if isinstance(n, Node)]
       
    2: nodes = {}
       
    4: class Node:
    2:     """Abstract base class for ast nodes."""
    2:     def getChildren(self):
>>>>>>         pass # implemented by subclasses
    2:     def __iter__(self):
>>>>>>         for n in self.getChildren():
>>>>>>             yield n
    2:     def asList(self): # for backwards compatibility
>>>>>>         return self.getChildren()
    2:     def getChildNodes(self):
>>>>>>         pass # implemented by subclasses
       
    4: class EmptyNode(Node):
    2:     pass
       
    4: class Expression(Node):
           # Expression is an artificial node class to support "eval"
    2:     nodes["expression"] = "Expression"
    2:     def __init__(self, node):
    9:         self.node = node
       
    2:     def getChildren(self):
>>>>>>         return self.node,
       
    2:     def getChildNodes(self):
   18:         return self.node,
       
    2:     def __repr__(self):
>>>>>>         return "Expression(%s)" % (repr(self.node))
       
    4: class Add(Node):
    2:     def __init__(self, leftright, lineno=None):
    6:         self.left = leftright[0]
    6:         self.right = leftright[1]
    6:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.left, self.right
       
    2:     def getChildNodes(self):
   12:         return self.left, self.right
       
    2:     def __repr__(self):
>>>>>>         return "Add((%s, %s))" % (repr(self.left), repr(self.right))
       
    4: class And(Node):
    2:     def __init__(self, nodes, lineno=None):
    1:         self.nodes = nodes
    1:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return tuple(flatten(self.nodes))
       
    2:     def getChildNodes(self):
    1:         nodelist = []
    1:         nodelist.extend(flatten_nodes(self.nodes))
    1:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "And(%s)" % (repr(self.nodes),)
       
    4: class AssAttr(Node):
    2:     def __init__(self, expr, attrname, flags, lineno=None):
    2:         self.expr = expr
    2:         self.attrname = attrname
    2:         self.flags = flags
    2:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.expr, self.attrname, self.flags
       
    2:     def getChildNodes(self):
    2:         return self.expr,
       
    2:     def __repr__(self):
>>>>>>         return "AssAttr(%s, %s, %s)" % (repr(self.expr), repr(self.attrname), repr(self.flags))
       
    4: class AssList(Node):
    2:     def __init__(self, nodes, lineno=None):
    1:         self.nodes = nodes
    1:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return tuple(flatten(self.nodes))
       
    2:     def getChildNodes(self):
    1:         nodelist = []
    1:         nodelist.extend(flatten_nodes(self.nodes))
    1:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "AssList(%s)" % (repr(self.nodes),)
       
    4: class AssName(Node):
    2:     def __init__(self, name, flags, lineno=None):
  108:         self.name = name
  108:         self.flags = flags
  108:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.name, self.flags
       
    2:     def getChildNodes(self):
  123:         return ()
       
    2:     def __repr__(self):
>>>>>>         return "AssName(%s, %s)" % (repr(self.name), repr(self.flags))
       
    4: class AssTuple(Node):
    2:     def __init__(self, nodes, lineno=None):
   12:         self.nodes = nodes
   12:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return tuple(flatten(self.nodes))
       
    2:     def getChildNodes(self):
   21:         nodelist = []
   21:         nodelist.extend(flatten_nodes(self.nodes))
   21:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "AssTuple(%s)" % (repr(self.nodes),)
       
    4: class Assert(Node):
    2:     def __init__(self, test, fail, lineno=None):
>>>>>>         self.test = test
>>>>>>         self.fail = fail
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.test)
>>>>>>         children.append(self.fail)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
>>>>>>         nodelist = []
>>>>>>         nodelist.append(self.test)
>>>>>>         if self.fail is not None:
>>>>>>             nodelist.append(self.fail)
>>>>>>         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Assert(%s, %s)" % (repr(self.test), repr(self.fail))
       
    4: class Assign(Node):
    2:     def __init__(self, nodes, expr, lineno=None):
   78:         self.nodes = nodes
   78:         self.expr = expr
   78:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.extend(flatten(self.nodes))
>>>>>>         children.append(self.expr)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
   94:         nodelist = []
   94:         nodelist.extend(flatten_nodes(self.nodes))
   94:         nodelist.append(self.expr)
   94:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Assign(%s, %s)" % (repr(self.nodes), repr(self.expr))
       
    4: class AugAssign(Node):
    2:     def __init__(self, node, op, expr, lineno=None):
    2:         self.node = node
    2:         self.op = op
    2:         self.expr = expr
    2:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.node, self.op, self.expr
       
    2:     def getChildNodes(self):
    2:         return self.node, self.expr
       
    2:     def __repr__(self):
>>>>>>         return "AugAssign(%s, %s, %s)" % (repr(self.node), repr(self.op), repr(self.expr))
       
    4: class Backquote(Node):
    2:     def __init__(self, expr, lineno=None):
>>>>>>         self.expr = expr
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.expr,
       
    2:     def getChildNodes(self):
>>>>>>         return self.expr,
       
    2:     def __repr__(self):
>>>>>>         return "Backquote(%s)" % (repr(self.expr),)
       
    4: class Bitand(Node):
    2:     def __init__(self, nodes, lineno=None):
>>>>>>         self.nodes = nodes
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return tuple(flatten(self.nodes))
       
    2:     def getChildNodes(self):
>>>>>>         nodelist = []
>>>>>>         nodelist.extend(flatten_nodes(self.nodes))
>>>>>>         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Bitand(%s)" % (repr(self.nodes),)
       
    4: class Bitor(Node):
    2:     def __init__(self, nodes, lineno=None):
>>>>>>         self.nodes = nodes
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return tuple(flatten(self.nodes))
       
    2:     def getChildNodes(self):
>>>>>>         nodelist = []
>>>>>>         nodelist.extend(flatten_nodes(self.nodes))
>>>>>>         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Bitor(%s)" % (repr(self.nodes),)
       
    4: class Bitxor(Node):
    2:     def __init__(self, nodes, lineno=None):
>>>>>>         self.nodes = nodes
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return tuple(flatten(self.nodes))
       
    2:     def getChildNodes(self):
>>>>>>         nodelist = []
>>>>>>         nodelist.extend(flatten_nodes(self.nodes))
>>>>>>         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Bitxor(%s)" % (repr(self.nodes),)
       
    4: class Break(Node):
    2:     def __init__(self, lineno=None):
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return ()
       
    2:     def getChildNodes(self):
>>>>>>         return ()
       
    2:     def __repr__(self):
>>>>>>         return "Break()"
       
    4: class CallFunc(Node):
    2:     def __init__(self, node, args, star_args = None, dstar_args = None, lineno=None):
  130:         self.node = node
  130:         self.args = args
  130:         self.star_args = star_args
  130:         self.dstar_args = dstar_args
  130:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.node)
>>>>>>         children.extend(flatten(self.args))
>>>>>>         children.append(self.star_args)
>>>>>>         children.append(self.dstar_args)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
  190:         nodelist = []
  190:         nodelist.append(self.node)
  190:         nodelist.extend(flatten_nodes(self.args))
  190:         if self.star_args is not None:
    5:             nodelist.append(self.star_args)
  190:         if self.dstar_args is not None:
>>>>>>             nodelist.append(self.dstar_args)
  190:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "CallFunc(%s, %s, %s, %s)" % (repr(self.node), repr(self.args), repr(self.star_args), repr(self.dstar_args))
       
    4: class Class(Node):
    2:     def __init__(self, name, bases, doc, code, decorators = None, lineno=None):
    5:         self.name = name
    5:         self.bases = bases
    5:         self.doc = doc
    5:         self.code = code
    5:         self.decorators = decorators
    5:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.name)
>>>>>>         children.extend(flatten(self.bases))
>>>>>>         children.append(self.doc)
>>>>>>         children.append(self.code)
>>>>>>         children.append(self.decorators)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
    7:         nodelist = []
    7:         nodelist.extend(flatten_nodes(self.bases))
    7:         nodelist.append(self.code)
    7:         if self.decorators is not None:
>>>>>>             nodelist.append(self.decorators)
    7:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Class(%s, %s, %s, %s, %s)" % (repr(self.name), repr(self.bases), repr(self.doc), repr(self.code), repr(self.decorators))
       
    4: class Compare(Node):
    2:     def __init__(self, expr, ops, lineno=None):
   13:         self.expr = expr
   13:         self.ops = ops
   13:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.expr)
>>>>>>         children.extend(flatten(self.ops))
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
   27:         nodelist = []
   27:         nodelist.append(self.expr)
   27:         nodelist.extend(flatten_nodes(self.ops))
   27:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Compare(%s, %s)" % (repr(self.expr), repr(self.ops))
       
    4: class Const(Node):
    2:     def __init__(self, value, lineno=None):
  281:         self.value = value
  281:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.value,
       
    2:     def getChildNodes(self):
  437:         return ()
       
    2:     def __repr__(self):
>>>>>>         return "Const(%s)" % (repr(self.value),)
       
    4: class Continue(Node):
    2:     def __init__(self, lineno=None):
    2:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return ()
       
    2:     def getChildNodes(self):
    2:         return ()
       
    2:     def __repr__(self):
>>>>>>         return "Continue()"
       
    4: class Decorators(Node):
    2:     def __init__(self, nodes, lineno=None):
>>>>>>         self.nodes = nodes
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return tuple(flatten(self.nodes))
       
    2:     def getChildNodes(self):
>>>>>>         nodelist = []
>>>>>>         nodelist.extend(flatten_nodes(self.nodes))
>>>>>>         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Decorators(%s)" % (repr(self.nodes),)
       
    4: class Dict(Node):
    2:     def __init__(self, items, lineno=None):
   20:         self.items = items
   20:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return tuple(flatten(self.items))
       
    2:     def getChildNodes(self):
   24:         nodelist = []
   24:         nodelist.extend(flatten_nodes(self.items))
   24:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Dict(%s)" % (repr(self.items),)
       
    4: class Discard(Node):
    2:     def __init__(self, expr, lineno=None):
   56:         self.expr = expr
   56:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.expr,
       
    2:     def getChildNodes(self):
   70:         return self.expr,
       
    2:     def __repr__(self):
>>>>>>         return "Discard(%s)" % (repr(self.expr),)
       
    4: class Div(Node):
    2:     def __init__(self, leftright, lineno=None):
>>>>>>         self.left = leftright[0]
>>>>>>         self.right = leftright[1]
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.left, self.right
       
    2:     def getChildNodes(self):
>>>>>>         return self.left, self.right
       
    2:     def __repr__(self):
>>>>>>         return "Div((%s, %s))" % (repr(self.left), repr(self.right))
       
    4: class Ellipsis(Node):
    2:     def __init__(self, lineno=None):
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return ()
       
    2:     def getChildNodes(self):
>>>>>>         return ()
       
    2:     def __repr__(self):
>>>>>>         return "Ellipsis()"
       
    4: class Exec(Node):
    2:     def __init__(self, expr, locals, globals, lineno=None):
    9:         self.expr = expr
    9:         self.locals = locals
    9:         self.globals = globals
    9:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.expr)
>>>>>>         children.append(self.locals)
>>>>>>         children.append(self.globals)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
    9:         nodelist = []
    9:         nodelist.append(self.expr)
    9:         if self.locals is not None:
    9:             nodelist.append(self.locals)
    9:         if self.globals is not None:
    1:             nodelist.append(self.globals)
    9:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Exec(%s, %s, %s)" % (repr(self.expr), repr(self.locals), repr(self.globals))
       
    4: class FloorDiv(Node):
    2:     def __init__(self, leftright, lineno=None):
    1:         self.left = leftright[0]
    1:         self.right = leftright[1]
    1:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.left, self.right
       
    2:     def getChildNodes(self):
    5:         return self.left, self.right
       
    2:     def __repr__(self):
>>>>>>         return "FloorDiv((%s, %s))" % (repr(self.left), repr(self.right))
       
    4: class For(Node):
    2:     def __init__(self, assign, list, body, else_, lineno=None):
    3:         self.assign = assign
    3:         self.list = list
    3:         self.body = body
    3:         self.else_ = else_
    3:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.assign)
>>>>>>         children.append(self.list)
>>>>>>         children.append(self.body)
>>>>>>         children.append(self.else_)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
    3:         nodelist = []
    3:         nodelist.append(self.assign)
    3:         nodelist.append(self.list)
    3:         nodelist.append(self.body)
    3:         if self.else_ is not None:
>>>>>>             nodelist.append(self.else_)
    3:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "For(%s, %s, %s, %s)" % (repr(self.assign), repr(self.list), repr(self.body), repr(self.else_))
       
    4: class From(Node):
    2:     def __init__(self, modname, names, level, lineno=None):
    8:         self.modname = modname
    8:         self.names = names
    8:         self.level = level
    8:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.modname, self.names, self.level
       
    2:     def getChildNodes(self):
   12:         return ()
       
    2:     def __repr__(self):
>>>>>>         return "From(%s, %s, %s)" % (repr(self.modname), repr(self.names), repr(self.level))
       
    4: class Function(Node):
    2:     def __init__(self, decorators, name, argnames, defaults, flags, doc, code, lineno=None):
   38:         self.decorators = decorators
   38:         self.name = name
   38:         self.argnames = argnames
   38:         self.defaults = defaults
   38:         self.flags = flags
   38:         self.doc = doc
   38:         self.code = code
   38:         self.lineno = lineno
   38:         self.varargs = self.kwargs = None
   38:         if flags & CO_VARARGS:
    3:             self.varargs = 1
   38:         if flags & CO_VARKEYWORDS:
    1:             self.kwargs = 1
       
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.decorators)
>>>>>>         children.append(self.name)
>>>>>>         children.append(self.argnames)
>>>>>>         children.extend(flatten(self.defaults))
>>>>>>         children.append(self.flags)
>>>>>>         children.append(self.doc)
>>>>>>         children.append(self.code)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
   52:         nodelist = []
   52:         if self.decorators is not None:
>>>>>>             nodelist.append(self.decorators)
   52:         nodelist.extend(flatten_nodes(self.defaults))
   52:         nodelist.append(self.code)
   52:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Function(%s, %s, %s, %s, %s, %s, %s)" % (repr(self.decorators), repr(self.name), repr(self.argnames), repr(self.defaults), repr(self.flags), repr(self.doc), repr(self.code))
       
    4: class GenExpr(Node):
    2:     def __init__(self, code, lineno=None):
    1:         self.code = code
    1:         self.lineno = lineno
    1:         self.argnames = ['.0']
    1:         self.varargs = self.kwargs = None
       
       
    2:     def getChildren(self):
>>>>>>         return self.code,
       
    2:     def getChildNodes(self):
    2:         return self.code,
       
    2:     def __repr__(self):
>>>>>>         return "GenExpr(%s)" % (repr(self.code),)
       
    4: class GenExprFor(Node):
    2:     def __init__(self, assign, iter, ifs, lineno=None):
    2:         self.assign = assign
    2:         self.iter = iter
    2:         self.ifs = ifs
    2:         self.lineno = lineno
    2:         self.is_outmost = False
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.assign)
>>>>>>         children.append(self.iter)
>>>>>>         children.extend(flatten(self.ifs))
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
    6:         nodelist = []
    6:         nodelist.append(self.assign)
    6:         nodelist.append(self.iter)
    6:         nodelist.extend(flatten_nodes(self.ifs))
    6:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "GenExprFor(%s, %s, %s)" % (repr(self.assign), repr(self.iter), repr(self.ifs))
       
    4: class GenExprIf(Node):
    2:     def __init__(self, test, lineno=None):
    2:         self.test = test
    2:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.test,
       
    2:     def getChildNodes(self):
    6:         return self.test,
       
    2:     def __repr__(self):
>>>>>>         return "GenExprIf(%s)" % (repr(self.test),)
       
    4: class GenExprInner(Node):
    2:     def __init__(self, expr, quals, lineno=None):
    1:         self.expr = expr
    1:         self.quals = quals
    1:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.expr)
>>>>>>         children.extend(flatten(self.quals))
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
    3:         nodelist = []
    3:         nodelist.append(self.expr)
    3:         nodelist.extend(flatten_nodes(self.quals))
    3:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "GenExprInner(%s, %s)" % (repr(self.expr), repr(self.quals))
       
    4: class Getattr(Node):
    2:     def __init__(self, expr, attrname, lineno=None):
  123:         self.expr = expr
  123:         self.attrname = attrname
  123:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.expr, self.attrname
       
    2:     def getChildNodes(self):
  123:         return self.expr,
       
    2:     def __repr__(self):
>>>>>>         return "Getattr(%s, %s)" % (repr(self.expr), repr(self.attrname))
       
    4: class Global(Node):
    2:     def __init__(self, names, lineno=None):
    2:         self.names = names
    2:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.names,
       
    2:     def getChildNodes(self):
    4:         return ()
       
    2:     def __repr__(self):
>>>>>>         return "Global(%s)" % (repr(self.names),)
       
    4: class If(Node):
    2:     def __init__(self, tests, else_, lineno=None):
    9:         self.tests = tests
    9:         self.else_ = else_
    9:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.extend(flatten(self.tests))
>>>>>>         children.append(self.else_)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
    9:         nodelist = []
    9:         nodelist.extend(flatten_nodes(self.tests))
    9:         if self.else_ is not None:
    2:             nodelist.append(self.else_)
    9:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "If(%s, %s)" % (repr(self.tests), repr(self.else_))
       
    4: class IfExp(Node):
    2:     def __init__(self, test, then, else_, lineno=None):
>>>>>>         self.test = test
>>>>>>         self.then = then
>>>>>>         self.else_ = else_
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.test, self.then, self.else_
       
    2:     def getChildNodes(self):
>>>>>>         return self.test, self.then, self.else_
       
    2:     def __repr__(self):
>>>>>>         return "IfExp(%s, %s, %s)" % (repr(self.test), repr(self.then), repr(self.else_))
       
    4: class Import(Node):
    2:     def __init__(self, names, lineno=None):
    2:         self.names = names
    2:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.names,
       
    2:     def getChildNodes(self):
    2:         return ()
       
    2:     def __repr__(self):
>>>>>>         return "Import(%s)" % (repr(self.names),)
       
    4: class Invert(Node):
    2:     def __init__(self, expr, lineno=None):
>>>>>>         self.expr = expr
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.expr,
       
    2:     def getChildNodes(self):
>>>>>>         return self.expr,
       
    2:     def __repr__(self):
>>>>>>         return "Invert(%s)" % (repr(self.expr),)
       
    4: class Keyword(Node):
    2:     def __init__(self, name, expr, lineno=None):
    7:         self.name = name
    7:         self.expr = expr
    7:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.name, self.expr
       
    2:     def getChildNodes(self):
   26:         return self.expr,
       
    2:     def __repr__(self):
>>>>>>         return "Keyword(%s, %s)" % (repr(self.name), repr(self.expr))
       
    4: class Lambda(Node):
    2:     def __init__(self, argnames, defaults, flags, code, lineno=None):
>>>>>>         self.argnames = argnames
>>>>>>         self.defaults = defaults
>>>>>>         self.flags = flags
>>>>>>         self.code = code
>>>>>>         self.lineno = lineno
>>>>>>         self.varargs = self.kwargs = None
>>>>>>         if flags & CO_VARARGS:
>>>>>>             self.varargs = 1
>>>>>>         if flags & CO_VARKEYWORDS:
>>>>>>             self.kwargs = 1
       
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.argnames)
>>>>>>         children.extend(flatten(self.defaults))
>>>>>>         children.append(self.flags)
>>>>>>         children.append(self.code)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
>>>>>>         nodelist = []
>>>>>>         nodelist.extend(flatten_nodes(self.defaults))
>>>>>>         nodelist.append(self.code)
>>>>>>         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Lambda(%s, %s, %s, %s)" % (repr(self.argnames), repr(self.defaults), repr(self.flags), repr(self.code))
       
    4: class LeftShift(Node):
    2:     def __init__(self, leftright, lineno=None):
>>>>>>         self.left = leftright[0]
>>>>>>         self.right = leftright[1]
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.left, self.right
       
    2:     def getChildNodes(self):
>>>>>>         return self.left, self.right
       
    2:     def __repr__(self):
>>>>>>         return "LeftShift((%s, %s))" % (repr(self.left), repr(self.right))
       
    4: class List(Node):
    2:     def __init__(self, nodes, lineno=None):
   10:         self.nodes = nodes
   10:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return tuple(flatten(self.nodes))
       
    2:     def getChildNodes(self):
   10:         nodelist = []
   10:         nodelist.extend(flatten_nodes(self.nodes))
   10:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "List(%s)" % (repr(self.nodes),)
       
    4: class ListComp(Node):
    2:     def __init__(self, expr, quals, lineno=None):
    1:         self.expr = expr
    1:         self.quals = quals
    1:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.expr)
>>>>>>         children.extend(flatten(self.quals))
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
    1:         nodelist = []
    1:         nodelist.append(self.expr)
    1:         nodelist.extend(flatten_nodes(self.quals))
    1:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "ListComp(%s, %s)" % (repr(self.expr), repr(self.quals))
       
    4: class ListCompFor(Node):
    2:     def __init__(self, assign, list, ifs, lineno=None):
    9:         self.assign = assign
    9:         self.list = list
    9:         self.ifs = ifs
    9:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.assign)
>>>>>>         children.append(self.list)
>>>>>>         children.extend(flatten(self.ifs))
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
   21:         nodelist = []
   21:         nodelist.append(self.assign)
   21:         nodelist.append(self.list)
   21:         nodelist.extend(flatten_nodes(self.ifs))
   21:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "ListCompFor(%s, %s, %s)" % (repr(self.assign), repr(self.list), repr(self.ifs))
       
    4: class ListCompIf(Node):
    2:     def __init__(self, test, lineno=None):
    4:         self.test = test
    4:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.test,
       
    2:     def getChildNodes(self):
   12:         return self.test,
       
    2:     def __repr__(self):
>>>>>>         return "ListCompIf(%s)" % (repr(self.test),)
       
    4: class SetComp(Node):
    2:     def __init__(self, expr, quals, lineno=None):
    3:         self.expr = expr
    3:         self.quals = quals
    3:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.expr)
>>>>>>         children.extend(flatten(self.quals))
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
    7:         nodelist = []
    7:         nodelist.append(self.expr)
    7:         nodelist.extend(flatten_nodes(self.quals))
    7:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "SetComp(%s, %s)" % (repr(self.expr), repr(self.quals))
       
    4: class DictComp(Node):
    2:     def __init__(self, key, value, quals, lineno=None):
    3:         self.key = key
    3:         self.value = value
    3:         self.quals = quals
    3:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.key)
>>>>>>         children.append(self.value)
>>>>>>         children.extend(flatten(self.quals))
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
    7:         nodelist = []
    7:         nodelist.append(self.key)
    7:         nodelist.append(self.value)
    7:         nodelist.extend(flatten_nodes(self.quals))
    7:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "DictComp(%s, %s, %s)" % (repr(self.key), repr(self.value), repr(self.quals))
       
    4: class Mod(Node):
    2:     def __init__(self, leftright, lineno=None):
    3:         self.left = leftright[0]
    3:         self.right = leftright[1]
    3:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.left, self.right
       
    2:     def getChildNodes(self):
    3:         return self.left, self.right
       
    2:     def __repr__(self):
>>>>>>         return "Mod((%s, %s))" % (repr(self.left), repr(self.right))
       
    4: class Module(Node):
    2:     def __init__(self, doc, node, lineno=None):
   19:         self.doc = doc
   19:         self.node = node
   19:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.doc, self.node
       
    2:     def getChildNodes(self):
   46:         return self.node,
       
    2:     def __repr__(self):
>>>>>>         return "Module(%s, %s)" % (repr(self.doc), repr(self.node))
       
    4: class Mul(Node):
    2:     def __init__(self, leftright, lineno=None):
    2:         self.left = leftright[0]
    2:         self.right = leftright[1]
    2:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.left, self.right
       
    2:     def getChildNodes(self):
    4:         return self.left, self.right
       
    2:     def __repr__(self):
>>>>>>         return "Mul((%s, %s))" % (repr(self.left), repr(self.right))
       
    4: class Name(Node):
    2:     def __init__(self, name, lineno=None):
  279:         self.name = name
  279:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.name,
       
    2:     def getChildNodes(self):
  342:         return ()
       
    2:     def __repr__(self):
>>>>>>         return "Name(%s)" % (repr(self.name),)
       
    4: class Not(Node):
    2:     def __init__(self, expr, lineno=None):
    3:         self.expr = expr
    3:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.expr,
       
    2:     def getChildNodes(self):
    3:         return self.expr,
       
    2:     def __repr__(self):
>>>>>>         return "Not(%s)" % (repr(self.expr),)
       
    4: class Or(Node):
    2:     def __init__(self, nodes, lineno=None):
    1:         self.nodes = nodes
    1:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return tuple(flatten(self.nodes))
       
    2:     def getChildNodes(self):
    1:         nodelist = []
    1:         nodelist.extend(flatten_nodes(self.nodes))
    1:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Or(%s)" % (repr(self.nodes),)
       
    4: class Pass(Node):
    2:     def __init__(self, lineno=None):
    5:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return ()
       
    2:     def getChildNodes(self):
    9:         return ()
       
    2:     def __repr__(self):
>>>>>>         return "Pass()"
       
    4: class Power(Node):
    2:     def __init__(self, leftright, lineno=None):
>>>>>>         self.left = leftright[0]
>>>>>>         self.right = leftright[1]
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.left, self.right
       
    2:     def getChildNodes(self):
>>>>>>         return self.left, self.right
       
    2:     def __repr__(self):
>>>>>>         return "Power((%s, %s))" % (repr(self.left), repr(self.right))
       
    4: class Print(Node):
    2:     def __init__(self, nodes, dest, lineno=None):
>>>>>>         self.nodes = nodes
>>>>>>         self.dest = dest
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.extend(flatten(self.nodes))
>>>>>>         children.append(self.dest)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
>>>>>>         nodelist = []
>>>>>>         nodelist.extend(flatten_nodes(self.nodes))
>>>>>>         if self.dest is not None:
>>>>>>             nodelist.append(self.dest)
>>>>>>         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Print(%s, %s)" % (repr(self.nodes), repr(self.dest))
       
    4: class Printnl(Node):
    2:     def __init__(self, nodes, dest, lineno=None):
    4:         self.nodes = nodes
    4:         self.dest = dest
    4:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.extend(flatten(self.nodes))
>>>>>>         children.append(self.dest)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
    4:         nodelist = []
    4:         nodelist.extend(flatten_nodes(self.nodes))
    4:         if self.dest is not None:
    1:             nodelist.append(self.dest)
    4:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Printnl(%s, %s)" % (repr(self.nodes), repr(self.dest))
       
    4: class Raise(Node):
    2:     def __init__(self, expr1, expr2, expr3, lineno=None):
    2:         self.expr1 = expr1
    2:         self.expr2 = expr2
    2:         self.expr3 = expr3
    2:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.expr1)
>>>>>>         children.append(self.expr2)
>>>>>>         children.append(self.expr3)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
    2:         nodelist = []
    2:         if self.expr1 is not None:
>>>>>>             nodelist.append(self.expr1)
    2:         if self.expr2 is not None:
>>>>>>             nodelist.append(self.expr2)
    2:         if self.expr3 is not None:
>>>>>>             nodelist.append(self.expr3)
    2:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Raise(%s, %s, %s)" % (repr(self.expr1), repr(self.expr2), repr(self.expr3))
       
    4: class Return(Node):
    2:     def __init__(self, value, lineno=None):
    6:         self.value = value
    6:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.value,
       
    2:     def getChildNodes(self):
   26:         return self.value,
       
    2:     def __repr__(self):
>>>>>>         return "Return(%s)" % (repr(self.value),)
       
    4: class RightShift(Node):
    2:     def __init__(self, leftright, lineno=None):
>>>>>>         self.left = leftright[0]
>>>>>>         self.right = leftright[1]
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.left, self.right
       
    2:     def getChildNodes(self):
>>>>>>         return self.left, self.right
       
    2:     def __repr__(self):
>>>>>>         return "RightShift((%s, %s))" % (repr(self.left), repr(self.right))
       
    4: class Set(Node):
    2:     def __init__(self, nodes, lineno=None):
    7:         self.nodes = nodes
    7:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return tuple(flatten(self.nodes))
       
    2:     def getChildNodes(self):
   11:         nodelist = []
   11:         nodelist.extend(flatten_nodes(self.nodes))
   11:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Set(%s)" % (repr(self.nodes),)
       
    4: class Slice(Node):
    2:     def __init__(self, expr, flags, lower, upper, lineno=None):
    2:         self.expr = expr
    2:         self.flags = flags
    2:         self.lower = lower
    2:         self.upper = upper
    2:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.expr)
>>>>>>         children.append(self.flags)
>>>>>>         children.append(self.lower)
>>>>>>         children.append(self.upper)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
    2:         nodelist = []
    2:         nodelist.append(self.expr)
    2:         if self.lower is not None:
    1:             nodelist.append(self.lower)
    2:         if self.upper is not None:
    2:             nodelist.append(self.upper)
    2:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Slice(%s, %s, %s, %s)" % (repr(self.expr), repr(self.flags), repr(self.lower), repr(self.upper))
       
    4: class Sliceobj(Node):
    2:     def __init__(self, nodes, lineno=None):
>>>>>>         self.nodes = nodes
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return tuple(flatten(self.nodes))
       
    2:     def getChildNodes(self):
>>>>>>         nodelist = []
>>>>>>         nodelist.extend(flatten_nodes(self.nodes))
>>>>>>         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Sliceobj(%s)" % (repr(self.nodes),)
       
    4: class Stmt(Node):
    2:     def __init__(self, nodes, lineno=None):
  506:         self.nodes = nodes
  506:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return tuple(flatten(self.nodes))
       
    2:     def getChildNodes(self):
  235:         nodelist = []
  235:         nodelist.extend(flatten_nodes(self.nodes))
  235:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Stmt(%s)" % (repr(self.nodes),)
       
    4: class Sub(Node):
    2:     def __init__(self, leftright, lineno=None):
>>>>>>         self.left = leftright[0]
>>>>>>         self.right = leftright[1]
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.left, self.right
       
    2:     def getChildNodes(self):
>>>>>>         return self.left, self.right
       
    2:     def __repr__(self):
>>>>>>         return "Sub((%s, %s))" % (repr(self.left), repr(self.right))
       
    4: class Subscript(Node):
    2:     def __init__(self, expr, flags, subs, lineno=None):
    3:         self.expr = expr
    3:         self.flags = flags
    3:         self.subs = subs
    3:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.expr)
>>>>>>         children.append(self.flags)
>>>>>>         children.extend(flatten(self.subs))
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
    3:         nodelist = []
    3:         nodelist.append(self.expr)
    3:         nodelist.extend(flatten_nodes(self.subs))
    3:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Subscript(%s, %s, %s)" % (repr(self.expr), repr(self.flags), repr(self.subs))
       
    4: class TryExcept(Node):
    2:     def __init__(self, body, handlers, else_, lineno=None):
    5:         self.body = body
    5:         self.handlers = handlers
    5:         self.else_ = else_
    5:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.body)
>>>>>>         children.extend(flatten(self.handlers))
>>>>>>         children.append(self.else_)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
    9:         nodelist = []
    9:         nodelist.append(self.body)
    9:         nodelist.extend(flatten_nodes(self.handlers))
    9:         if self.else_ is not None:
    1:             nodelist.append(self.else_)
    9:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "TryExcept(%s, %s, %s)" % (repr(self.body), repr(self.handlers), repr(self.else_))
       
    4: class TryFinally(Node):
    2:     def __init__(self, body, final, lineno=None):
    2:         self.body = body
    2:         self.final = final
    2:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.body, self.final
       
    2:     def getChildNodes(self):
    6:         return self.body, self.final
       
    2:     def __repr__(self):
>>>>>>         return "TryFinally(%s, %s)" % (repr(self.body), repr(self.final))
       
    4: class Tuple(Node):
    2:     def __init__(self, nodes, lineno=None):
   32:         self.nodes = nodes
   32:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return tuple(flatten(self.nodes))
       
    2:     def getChildNodes(self):
   45:         nodelist = []
   45:         nodelist.extend(flatten_nodes(self.nodes))
   45:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "Tuple(%s)" % (repr(self.nodes),)
       
    4: class UnaryAdd(Node):
    2:     def __init__(self, expr, lineno=None):
>>>>>>         self.expr = expr
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.expr,
       
    2:     def getChildNodes(self):
>>>>>>         return self.expr,
       
    2:     def __repr__(self):
>>>>>>         return "UnaryAdd(%s)" % (repr(self.expr),)
       
    4: class UnarySub(Node):
    2:     def __init__(self, expr, lineno=None):
    1:         self.expr = expr
    1:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.expr,
       
    2:     def getChildNodes(self):
    1:         return self.expr,
       
    2:     def __repr__(self):
>>>>>>         return "UnarySub(%s)" % (repr(self.expr),)
       
    4: class While(Node):
    2:     def __init__(self, test, body, else_, lineno=None):
>>>>>>         self.test = test
>>>>>>         self.body = body
>>>>>>         self.else_ = else_
>>>>>>         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.test)
>>>>>>         children.append(self.body)
>>>>>>         children.append(self.else_)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
>>>>>>         nodelist = []
>>>>>>         nodelist.append(self.test)
>>>>>>         nodelist.append(self.body)
>>>>>>         if self.else_ is not None:
>>>>>>             nodelist.append(self.else_)
>>>>>>         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "While(%s, %s, %s)" % (repr(self.test), repr(self.body), repr(self.else_))
       
    4: class With(Node):
    2:     def __init__(self, expr, vars, body, lineno=None):
    4:         self.expr = expr
    4:         self.vars = vars
    4:         self.body = body
    4:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         children = []
>>>>>>         children.append(self.expr)
>>>>>>         children.append(self.vars)
>>>>>>         children.append(self.body)
>>>>>>         return tuple(children)
       
    2:     def getChildNodes(self):
   20:         nodelist = []
   20:         nodelist.append(self.expr)
   20:         if self.vars is not None:
   15:             nodelist.append(self.vars)
   20:         nodelist.append(self.body)
   20:         return tuple(nodelist)
       
    2:     def __repr__(self):
>>>>>>         return "With(%s, %s, %s)" % (repr(self.expr), repr(self.vars), repr(self.body))
       
    4: class Yield(Node):
    2:     def __init__(self, value, lineno=None):
    1:         self.value = value
    1:         self.lineno = lineno
       
    2:     def getChildren(self):
>>>>>>         return self.value,
       
    2:     def getChildNodes(self):
    4:         return self.value,
       
    2:     def __repr__(self):
>>>>>>         return "Yield(%s)" % (repr(self.value),)
       
  178: for name, obj in globals().items():
  176:     if isinstance(obj, type) and issubclass(obj, Node):
>>>>>>         nodes[name.lower()] = obj
