    1: import unittest
    1: import string
    1: from string import Template
    1: from test import test_support, string_tests
    1: from UserList import UserList
       
    2: class StringTest(
    1:     string_tests.CommonTest,
    1:     string_tests.MixinStrStringUserStringTest
           ):
       
    1:     type2test = str
       
    1:     def checkequal(self, result, object, methodname, *args):
  443:         realresult = getattr(string, methodname)(object, *args)
  443:         self.assertEqual(
  443:             result,
  443:             realresult
               )
       
    1:     def checkraises(self, exc, obj, methodname, *args):
   47:         with self.assertRaises(exc) as cm:
   47:             getattr(string, methodname)(obj, *args)
   47:         self.assertNotEqual(cm.exception.args[0], '')
       
    1:     def checkcall(self, object, methodname, *args):
>>>>>>         getattr(string, methodname)(object, *args)
       
    1:     def test_join(self):
               # These are the same checks as in string_test.ObjectTest.test_join
               # but the argument order ist different
    1:         self.checkequal('a b c d', ['a', 'b', 'c', 'd'], 'join', ' ')
    1:         self.checkequal('abcd', ('a', 'b', 'c', 'd'), 'join', '')
    1:         self.checkequal('w x y z', string_tests.Sequence(), 'join', ' ')
    1:         self.checkequal('abc', ('abc',), 'join', 'a')
    1:         self.checkequal('z', UserList(['z']), 'join', 'a')
    1:         if test_support.have_unicode:
    1:             self.checkequal(unicode('a.b.c'), ['a', 'b', 'c'], 'join', unicode('.'))
    1:             self.checkequal(unicode('a.b.c'), [unicode('a'), 'b', 'c'], 'join', '.')
    1:             self.checkequal(unicode('a.b.c'), ['a', unicode('b'), 'c'], 'join', '.')
    1:             self.checkequal(unicode('a.b.c'), ['a', 'b', unicode('c')], 'join', '.')
    1:             self.checkraises(TypeError, ['a', unicode('b'), 3], 'join', '.')
    4:         for i in [5, 25, 125]:
    3:             self.checkequal(
    3:                 ((('a' * i) + '-') * i)[:-1],
    3:                 ['a' * i] * i, 'join', '-')
    3:             self.checkequal(
    3:                 ((('a' * i) + '-') * i)[:-1],
    3:                 ('a' * i,) * i, 'join', '-')
       
    1:         self.checkraises(TypeError, string_tests.BadSeq1(), 'join', ' ')
    1:         self.checkequal('a b c', string_tests.BadSeq2(), 'join', ' ')
    1:         try:
    1:             def f():
    1:                 yield 4 + ""
    1:             self.fixtype(' ').join(f())
    1:         except TypeError, e:
    1:             if '+' not in str(e):
>>>>>>                 self.fail('join() ate exception message')
               else:
>>>>>>             self.fail('exception not raised')
       
       
    2: class ModuleTest(unittest.TestCase):
       
    1:     def test_attrs(self):
    1:         string.whitespace
    1:         string.lowercase
    1:         string.uppercase
    1:         string.letters
    1:         string.digits
    1:         string.hexdigits
    1:         string.octdigits
    1:         string.punctuation
    1:         string.printable
       
    1:     def test_atoi(self):
    1:         self.assertEqual(string.atoi(" 1 "), 1)
    1:         self.assertRaises(ValueError, string.atoi, " 1x")
    1:         self.assertRaises(ValueError, string.atoi, " x1 ")
       
    1:     def test_atol(self):
    1:         self.assertEqual(string.atol("  1  "), 1L)
    1:         self.assertRaises(ValueError, string.atol, "  1x ")
    1:         self.assertRaises(ValueError, string.atol, "  x1 ")
       
    1:     def test_atof(self):
    1:         self.assertAlmostEqual(string.atof("  1  "), 1.0)
    1:         self.assertRaises(ValueError, string.atof, "  1x ")
    1:         self.assertRaises(ValueError, string.atof, "  x1 ")
       
    1:     def test_maketrans(self):
    1:         transtable = '\000\001\002\003\004\005\006\007\010\011\012\013\014\015\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037 !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`xyzdefghijklmnopqrstuvwxyz{|}~
       
    1:         self.assertEqual(string.maketrans('abc', 'xyz'), transtable)
    1:         self.assertRaises(ValueError, string.maketrans, 'abc', 'xyzq')
       
    1:     def test_capwords(self):
    1:         self.assertEqual(string.capwords('abc def ghi'), 'Abc Def Ghi')
    1:         self.assertEqual(string.capwords('abc\tdef\nghi'), 'Abc Def Ghi')
    1:         self.assertEqual(string.capwords('abc\t   def  \nghi'), 'Abc Def Ghi')
    1:         self.assertEqual(string.capwords('ABC DEF GHI'), 'Abc Def Ghi')
    1:         self.assertEqual(string.capwords('ABC-DEF-GHI', '-'), 'Abc-Def-Ghi')
    1:         self.assertEqual(string.capwords('ABC-def DEF-ghi GHI'), 'Abc-def Def-ghi Ghi')
    1:         self.assertEqual(string.capwords('   aBc  DeF   '), 'Abc Def')
    1:         self.assertEqual(string.capwords('\taBc\tDeF\t'), 'Abc Def')
    1:         self.assertEqual(string.capwords('\taBc\tDeF\t', '\t'), '\tAbc\tDef\t')
       
    1:     def test_formatter(self):
    1:         fmt = string.Formatter()
    1:         self.assertEqual(fmt.format("foo"), "foo")
       
    1:         self.assertEqual(fmt.format("foo{0}", "bar"), "foobar")
    1:         self.assertEqual(fmt.format("foo{1}{0}-{1}", "bar", 6), "foo6bar-6")
    1:         self.assertEqual(fmt.format("-{arg!r}-", arg='test'), "-'test'-")
       
               # override get_value ############################################
    2:         class NamespaceFormatter(string.Formatter):
    1:             def __init__(self, namespace={}):
    1:                 string.Formatter.__init__(self)
    1:                 self.namespace = namespace
       
    1:             def get_value(self, key, args, kwds):
    1:                 if isinstance(key, str):
    1:                     try:
                               # Check explicitly passed arguments first
    1:                         return kwds[key]
    1:                     except KeyError:
    1:                         return self.namespace[key]
                       else:
>>>>>>                     string.Formatter.get_value(key, args, kwds)
       
    1:         fmt = NamespaceFormatter({'greeting':'hello'})
    1:         self.assertEqual(fmt.format("{greeting}, world!"), 'hello, world!')
       
       
               # override format_field #########################################
    2:         class CallFormatter(string.Formatter):
    1:             def format_field(self, value, format_spec):
    1:                 return format(value(), format_spec)
       
    1:         fmt = CallFormatter()
    2:         self.assertEqual(fmt.format('*{0}*', lambda : 'result'), '*result*')
       
       
               # override convert_field ########################################
    2:         class XFormatter(string.Formatter):
    1:             def convert_field(self, value, conversion):
    2:                 if conversion == 'x':
    1:                     return None
    1:                 return super(XFormatter, self).convert_field(value, conversion)
       
    1:         fmt = XFormatter()
    1:         self.assertEqual(fmt.format("{0!r}:{0!x}", 'foo', 'foo'), "'foo':None")
       
       
               # override parse ################################################
    2:         class BarFormatter(string.Formatter):
                   # returns an iterable that contains tuples of the form:
                   # (literal_text, field_name, format_spec, conversion)
    1:             def parse(self, format_string):
    6:                 for field in format_string.split('|'):
    4:                     if field[0] == '+':
                               # it's markup
    1:                         field_name, _, format_spec = field[1:].partition(':')
    1:                         yield '', field_name, format_spec, None
                           else:
    3:                         yield field, None, None, None
       
    1:         fmt = BarFormatter()
    1:         self.assertEqual(fmt.format('*|+0:^10s|*', 'foo'), '*   foo    *')
       
               # test all parameters used
    2:         class CheckAllUsedFormatter(string.Formatter):
    1:             def check_unused_args(self, used_args, args, kwargs):
                       # Track which arguments actually got used
    7:                 unused_args = set(kwargs.keys())
    7:                 unused_args.update(range(0, len(args)))
       
   19:                 for arg in used_args:
   12:                     unused_args.remove(arg)
       
    7:                 if unused_args:
    4:                     raise ValueError("unused arguments")
       
    1:         fmt = CheckAllUsedFormatter()
    1:         self.assertEqual(fmt.format("{0}", 10), "10")
    1:         self.assertEqual(fmt.format("{0}{i}", 10, i=100), "10100")
    1:         self.assertEqual(fmt.format("{0}{i}{1}", 10, 20, i=100), "1010020")
    1:         self.assertRaises(ValueError, fmt.format, "{0}{i}{1}", 10, 20, i=100, j=0)
    1:         self.assertRaises(ValueError, fmt.format, "{0}", 10, 20)
    1:         self.assertRaises(ValueError, fmt.format, "{0}", 10, 20, i=100)
    1:         self.assertRaises(ValueError, fmt.format, "{i}", 10, 20, i=100)
       
               # Alternate formatting is not supported
    1:         self.assertRaises(ValueError, format, '', '#')
    1:         self.assertRaises(ValueError, format, '', '#20')
       
    1:     def test_format_keyword_arguments(self):
    1:         fmt = string.Formatter()
    1:         self.assertEqual(fmt.format("-{arg}-", arg='test'), '-test-')
    1:         self.assertRaises(KeyError, fmt.format, "-{arg}-")
    1:         self.assertEqual(fmt.format("-{self}-", self='test'), '-test-')
    1:         self.assertRaises(KeyError, fmt.format, "-{self}-")
    1:         self.assertEqual(fmt.format("-{format_string}-", format_string='test'),
    1:                          '-test-')
    1:         self.assertRaises(KeyError, fmt.format, "-{format_string}-")
    1:         self.assertEqual(fmt.format(arg='test', format_string="-{arg}-"),
    1:                          '-test-')
       
    2: class BytesAliasTest(unittest.TestCase):
       
    1:     def test_builtin(self):
    1:         self.assertTrue(str is bytes)
       
    1:     def test_syntax(self):
    1:         self.assertEqual(b"spam", "spam")
    1:         self.assertEqual(br"egg\foo", "egg\\foo")
    1:         self.assertTrue(type(b""), str)
    1:         self.assertTrue(type(br""), str)
       
       
       # Template tests (formerly housed in test_pep292.py)
       
    2: class Bag:
    1:     pass
       
    2: class Mapping:
    1:     def __getitem__(self, name):
    4:         obj = self
   14:         for part in name.split('.'):
   10:             try:
   10:                 obj = getattr(obj, part)
>>>>>>             except AttributeError:
>>>>>>                 raise KeyError(name)
    4:         return obj
       
       
    2: class TestTemplate(unittest.TestCase):
    1:     def test_regular_templates(self):
    1:         s = Template('$who likes to eat a bag of $what worth $$100')
    1:         self.assertEqual(s.substitute(dict(who='tim', what='ham')),
    1:                          'tim likes to eat a bag of ham worth $100')
    1:         self.assertRaises(KeyError, s.substitute, dict(who='tim'))
    1:         self.assertRaises(TypeError, Template.substitute)
       
    1:     def test_regular_templates_with_braces(self):
    1:         s = Template('$who likes ${what} for ${meal}')
    1:         d = dict(who='tim', what='ham', meal='dinner')
    1:         self.assertEqual(s.substitute(d), 'tim likes ham for dinner')
    1:         self.assertRaises(KeyError, s.substitute,
    1:                           dict(who='tim', what='ham'))
       
    1:     def test_escapes(self):
    1:         eq = self.assertEqual
    1:         s = Template('$who likes to eat a bag of $$what worth $$100')
    1:         eq(s.substitute(dict(who='tim', what='ham')),
    1:            'tim likes to eat a bag of $what worth $100')
    1:         s = Template('$who likes $$')
    1:         eq(s.substitute(dict(who='tim', what='ham')), 'tim likes $')
       
    1:     def test_percents(self):
    1:         eq = self.assertEqual
    1:         s = Template('%(foo)s $foo ${foo}')
    1:         d = dict(foo='baz')
    1:         eq(s.substitute(d), '%(foo)s baz baz')
    1:         eq(s.safe_substitute(d), '%(foo)s baz baz')
       
    1:     def test_stringification(self):
    1:         eq = self.assertEqual
    1:         s = Template('tim has eaten $count bags of ham today')
    1:         d = dict(count=7)
    1:         eq(s.substitute(d), 'tim has eaten 7 bags of ham today')
    1:         eq(s.safe_substitute(d), 'tim has eaten 7 bags of ham today')
    1:         s = Template('tim has eaten ${count} bags of ham today')
    1:         eq(s.substitute(d), 'tim has eaten 7 bags of ham today')
       
    1:     def test_tupleargs(self):
    1:         eq = self.assertEqual
    1:         s = Template('$who ate ${meal}')
    1:         d = dict(who=('tim', 'fred'), meal=('ham', 'kung pao'))
    1:         eq(s.substitute(d), "('tim', 'fred') ate ('ham', 'kung pao')")
    1:         eq(s.safe_substitute(d), "('tim', 'fred') ate ('ham', 'kung pao')")
       
    1:     def test_SafeTemplate(self):
    1:         eq = self.assertEqual
    1:         s = Template('$who likes ${what} for ${meal}')
    1:         eq(s.safe_substitute(dict(who='tim')), 'tim likes ${what} for ${meal}')
    1:         eq(s.safe_substitute(dict(what='ham')), '$who likes ham for ${meal}')
    1:         eq(s.safe_substitute(dict(what='ham', meal='dinner')),
    1:            '$who likes ham for dinner')
    1:         eq(s.safe_substitute(dict(who='tim', what='ham')),
    1:            'tim likes ham for ${meal}')
    1:         eq(s.safe_substitute(dict(who='tim', what='ham', meal='dinner')),
    1:            'tim likes ham for dinner')
       
    1:     def test_invalid_placeholders(self):
    1:         raises = self.assertRaises
    1:         s = Template('$who likes $')
    1:         raises(ValueError, s.substitute, dict(who='tim'))
    1:         s = Template('$who likes ${what)')
    1:         raises(ValueError, s.substitute, dict(who='tim'))
    1:         s = Template('$who likes $100')
    1:         raises(ValueError, s.substitute, dict(who='tim'))
       
    1:     def test_idpattern_override(self):
    2:         class PathPattern(Template):
    1:             idpattern = r'[_a-z][._a-z0-9]*'
    1:         m = Mapping()
    1:         m.bag = Bag()
    1:         m.bag.foo = Bag()
    1:         m.bag.foo.who = 'tim'
    1:         m.bag.what = 'ham'
    1:         s = PathPattern('$bag.foo.who likes to eat a bag of $bag.what')
    1:         self.assertEqual(s.substitute(m), 'tim likes to eat a bag of ham')
       
    1:     def test_pattern_override(self):
    2:         class MyPattern(Template):
                   pattern = r"""
                   (?P<escaped>@{2})                   |
                   @(?P<named>[_a-z][._a-z0-9]*)       |
                   @{(?P<braced>[_a-z][._a-z0-9]*)}    |
                   (?P<invalid>@)
    1:             """
    1:         m = Mapping()
    1:         m.bag = Bag()
    1:         m.bag.foo = Bag()
    1:         m.bag.foo.who = 'tim'
    1:         m.bag.what = 'ham'
    1:         s = MyPattern('@bag.foo.who likes to eat a bag of @bag.what')
    1:         self.assertEqual(s.substitute(m), 'tim likes to eat a bag of ham')
       
    2:         class BadPattern(Template):
                   pattern = r"""
                   (?P<badname>.*)                     |
                   (?P<escaped>@{2})                   |
                   @(?P<named>[_a-z][._a-z0-9]*)       |
                   @{(?P<braced>[_a-z][._a-z0-9]*)}    |
                   (?P<invalid>@)                      |
    1:             """
    1:         s = BadPattern('@bag.foo.who likes to eat a bag of @bag.what')
    1:         self.assertRaises(ValueError, s.substitute, {})
    1:         self.assertRaises(ValueError, s.safe_substitute, {})
       
    1:     def test_braced_override(self):
    2:         class MyTemplate(Template):
                   pattern = r"""
                   \$(?:
                     (?P<escaped>$)                     |
                     (?P<named>[_a-z][_a-z0-9]*)        |
                     @@(?P<braced>[_a-z][_a-z0-9]*)@@   |
                     (?P<invalid>)                      |
                  )
    1:            """
       
    1:         tmpl = 'PyCon in $@@location@@'
    1:         t = MyTemplate(tmpl)
    1:         self.assertRaises(KeyError, t.substitute, {})
    1:         val = t.substitute({'location': 'Cleveland'})
    1:         self.assertEqual(val, 'PyCon in Cleveland')
       
    1:     def test_braced_override_safe(self):
    2:         class MyTemplate(Template):
                   pattern = r"""
                   \$(?:
                     (?P<escaped>$)                     |
                     (?P<named>[_a-z][_a-z0-9]*)        |
                     @@(?P<braced>[_a-z][_a-z0-9]*)@@   |
                     (?P<invalid>)                      |
                  )
    1:            """
       
    1:         tmpl = 'PyCon in $@@location@@'
    1:         t = MyTemplate(tmpl)
    1:         self.assertEqual(t.safe_substitute(), tmpl)
    1:         val = t.safe_substitute({'location': 'Cleveland'})
    1:         self.assertEqual(val, 'PyCon in Cleveland')
       
    1:     def test_unicode_values(self):
    1:         s = Template('$who likes $what')
    1:         d = dict(who=u't\xffm', what=u'f\xfe\fed')
    1:         self.assertEqual(s.substitute(d), u't\xffm likes f\xfe\x0ced')
       
    1:     def test_keyword_arguments(self):
    1:         eq = self.assertEqual
    1:         s = Template('$who likes $what')
    1:         eq(s.substitute(who='tim', what='ham'), 'tim likes ham')
    1:         eq(s.substitute(dict(who='tim'), what='ham'), 'tim likes ham')
    1:         eq(s.substitute(dict(who='fred', what='kung pao'),
    1:                         who='tim', what='ham'),
    1:            'tim likes ham')
    1:         s = Template('the mapping is $mapping')
    1:         eq(s.substitute(dict(foo='none'), mapping='bozo'),
    1:            'the mapping is bozo')
    1:         eq(s.substitute(dict(mapping='one'), mapping='two'),
    1:            'the mapping is two')
       
    1:         s = Template('the self is $self')
    1:         eq(s.substitute(self='bozo'), 'the self is bozo')
       
    1:     def test_keyword_arguments_safe(self):
    1:         eq = self.assertEqual
    1:         raises = self.assertRaises
    1:         s = Template('$who likes $what')
    1:         eq(s.safe_substitute(who='tim', what='ham'), 'tim likes ham')
    1:         eq(s.safe_substitute(dict(who='tim'), what='ham'), 'tim likes ham')
    1:         eq(s.safe_substitute(dict(who='fred', what='kung pao'),
    1:                         who='tim', what='ham'),
    1:            'tim likes ham')
    1:         s = Template('the mapping is $mapping')
    1:         eq(s.safe_substitute(dict(foo='none'), mapping='bozo'),
    1:            'the mapping is bozo')
    1:         eq(s.safe_substitute(dict(mapping='one'), mapping='two'),
    1:            'the mapping is two')
    1:         d = dict(mapping='one')
    1:         raises(TypeError, s.substitute, d, {})
    1:         raises(TypeError, s.safe_substitute, d, {})
       
    1:         s = Template('the self is $self')
    1:         eq(s.safe_substitute(self='bozo'), 'the self is bozo')
       
    1:     def test_delimiter_override(self):
    1:         eq = self.assertEqual
    1:         raises = self.assertRaises
    2:         class AmpersandTemplate(Template):
    1:             delimiter = '&'
    1:         s = AmpersandTemplate('this &gift is for &{who} &&')
    1:         eq(s.substitute(gift='bud', who='you'), 'this bud is for you &')
    1:         raises(KeyError, s.substitute)
    1:         eq(s.safe_substitute(gift='bud', who='you'), 'this bud is for you &')
    1:         eq(s.safe_substitute(), 'this &gift is for &{who} &')
    1:         s = AmpersandTemplate('this &gift is for &{who} &')
    1:         raises(ValueError, s.substitute, dict(gift='bud', who='you'))
    1:         eq(s.safe_substitute(), 'this &gift is for &{who} &')
       
    2:         class PieDelims(Template):
    1:             delimiter = '@'
    1:         s = PieDelims('@who likes to eat a bag of @{what} worth $100')
    1:         self.assertEqual(s.substitute(dict(who='tim', what='ham')),
    1:                          'tim likes to eat a bag of ham worth $100')
       
       
    1: def test_main():
    1:     test_support.run_unittest(StringTest, ModuleTest, BytesAliasTest, TestTemplate)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
