    1: from ctypes import *
    1: import unittest
       
    2: class X(Structure):
    1:     _fields_ = [("a", c_int),
    1:                 ("b", c_int)]
    1:     new_was_called = False
       
    1:     def __new__(cls):
    1:         result = super(X, cls).__new__(cls)
    1:         result.new_was_called = True
    1:         return result
       
    1:     def __init__(self):
    1:         self.a = 9
    1:         self.b = 12
       
    2: class Y(Structure):
    1:     _fields_ = [("x", X)]
       
       
    2: class InitTest(unittest.TestCase):
    1:     def test_get(self):
               # make sure the only accessing a nested structure
               # doesn't call the structure's __new__ and __init__
    1:         y = Y()
    1:         self.assertEqual((y.x.a, y.x.b), (0, 0))
    1:         self.assertEqual(y.x.new_was_called, False)
       
               # But explicitly creating an X structure calls __new__ and __init__, of course.
    1:         x = X()
    1:         self.assertEqual((x.a, x.b), (9, 12))
    1:         self.assertEqual(x.new_was_called, True)
       
    1:         y.x = x
    1:         self.assertEqual((y.x.a, y.x.b), (9, 12))
    1:         self.assertEqual(y.x.new_was_called, False)
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
