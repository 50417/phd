       ####
       # Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu>
       #
       #                All Rights Reserved
       #
       # Permission to use, copy, modify, and distribute this software
       # and its documentation for any purpose and without fee is hereby
       # granted, provided that the above copyright notice appear in all
       # copies and that both that copyright notice and this permission
       # notice appear in supporting documentation, and that the name of
       # Timothy O'Malley  not be used in advertising or publicity
       # pertaining to distribution of the software without specific, written
       # prior permission.
       #
       # Timothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
       # SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
       # AND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR
       # ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
       # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
       # WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
       # ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
       # PERFORMANCE OF THIS SOFTWARE.
       #
       ####
       #
       # Id: Cookie.py,v 2.29 2000/08/23 05:28:49 timo Exp
       #   by Timothy O'Malley <timo@alum.mit.edu>
       #
       #  Cookie.py is a Python module for the handling of HTTP
       #  cookies as a Python dictionary.  See RFC 2109 for more
       #  information on cookies.
       #
       #  The original idea to treat Cookies as a dictionary came from
       #  Dave Mitchell (davem@magnet.com) in 1995, when he released the
       #  first version of nscookie.py.
       #
       ####
       
       r"""
       Here's a sample session to show how to use this module.
       At the moment, this is the only documentation.
       
       The Basics
       ----------
       
       Importing is easy..
       
          >>> import Cookie
       
       Most of the time you start by creating a cookie.  Cookies come in
       three flavors, each with slightly different encoding semantics, but
       more on that later.
       
          >>> C = Cookie.SimpleCookie()
          >>> C = Cookie.SerialCookie()
          >>> C = Cookie.SmartCookie()
       
       [Note: Long-time users of Cookie.py will remember using
       Cookie.Cookie() to create a Cookie object.  Although deprecated, it
       is still supported by the code.  See the Backward Compatibility notes
       for more information.]
       
       Once you've created your Cookie, you can add values just as if it were
       a dictionary.
       
          >>> C = Cookie.SmartCookie()
          >>> C["fig"] = "newton"
          >>> C["sugar"] = "wafer"
          >>> C.output()
          'Set-Cookie: fig=newton\r\nSet-Cookie: sugar=wafer'
       
       Notice that the printable representation of a Cookie is the
       appropriate format for a Set-Cookie: header.  This is the
       default behavior.  You can change the header and printed
       attributes by using the .output() function
       
          >>> C = Cookie.SmartCookie()
          >>> C["rocky"] = "road"
          >>> C["rocky"]["path"] = "/cookie"
          >>> print C.output(header="Cookie:")
          Cookie: rocky=road; Path=/cookie
          >>> print C.output(attrs=[], header="Cookie:")
          Cookie: rocky=road
       
       The load() method of a Cookie extracts cookies from a string.  In a
       CGI script, you would use this method to extract the cookies from the
       HTTP_COOKIE environment variable.
       
          >>> C = Cookie.SmartCookie()
          >>> C.load("chips=ahoy; vienna=finger")
          >>> C.output()
          'Set-Cookie: chips=ahoy\r\nSet-Cookie: vienna=finger'
       
       The load() method is darn-tootin smart about identifying cookies
       within a string.  Escaped quotation marks, nested semicolons, and other
       such trickeries do not confuse it.
       
          >>> C = Cookie.SmartCookie()
          >>> C.load('keebler="E=everybody; L=\\"Loves\\"; fudge=\\012;";')
          >>> print C
          Set-Cookie: keebler="E=everybody; L=\"Loves\"; fudge=\012;"
       
       Each element of the Cookie also supports all of the RFC 2109
       Cookie attributes.  Here's an example which sets the Path
       attribute.
       
          >>> C = Cookie.SmartCookie()
          >>> C["oreo"] = "doublestuff"
          >>> C["oreo"]["path"] = "/"
          >>> print C
          Set-Cookie: oreo=doublestuff; Path=/
       
       Each dictionary element has a 'value' attribute, which gives you
       back the value associated with the key.
       
          >>> C = Cookie.SmartCookie()
          >>> C["twix"] = "none for you"
          >>> C["twix"].value
          'none for you'
       
       
       A Bit More Advanced
       -------------------
       
       As mentioned before, there are three different flavors of Cookie
       objects, each with different encoding/decoding semantics.  This
       section briefly discusses the differences.
       
       SimpleCookie
       
       The SimpleCookie expects that all values should be standard strings.
       Just to be sure, SimpleCookie invokes the str() builtin to convert
       the value to a string, when the values are set dictionary-style.
       
          >>> C = Cookie.SimpleCookie()
          >>> C["number"] = 7
          >>> C["string"] = "seven"
          >>> C["number"].value
          '7'
          >>> C["string"].value
          'seven'
          >>> C.output()
          'Set-Cookie: number=7\r\nSet-Cookie: string=seven'
       
       
       SerialCookie
       
       The SerialCookie expects that all values should be serialized using
       cPickle (or pickle, if cPickle isn't available).  As a result of
       serializing, SerialCookie can save almost any Python object to a
       value, and recover the exact same object when the cookie has been
       returned.  (SerialCookie can yield some strange-looking cookie
       values, however.)
       
          >>> C = Cookie.SerialCookie()
          >>> C["number"] = 7
          >>> C["string"] = "seven"
          >>> C["number"].value
          7
          >>> C["string"].value
          'seven'
          >>> C.output()
          'Set-Cookie: number="I7\\012."\r\nSet-Cookie: string="S\'seven\'\\012p1\\012."'
       
       Be warned, however, if SerialCookie cannot de-serialize a value (because
       it isn't a valid pickle'd object), IT WILL RAISE AN EXCEPTION.
       
       
       SmartCookie
       
       The SmartCookie combines aspects of each of the other two flavors.
       When setting a value in a dictionary-fashion, the SmartCookie will
       serialize (ala cPickle) the value *if and only if* it isn't a
       Python string.  String objects are *not* serialized.  Similarly,
       when the load() method parses out values, it attempts to de-serialize
       the value.  If it fails, then it fallsback to treating the value
       as a string.
       
          >>> C = Cookie.SmartCookie()
          >>> C["number"] = 7
          >>> C["string"] = "seven"
          >>> C["number"].value
          7
          >>> C["string"].value
          'seven'
          >>> C.output()
          'Set-Cookie: number="I7\\012."\r\nSet-Cookie: string=seven'
       
       
       Backwards Compatibility
       -----------------------
       
       In order to keep compatibility with earlier versions of Cookie.py,
       it is still possible to use Cookie.Cookie() to create a Cookie.  In
       fact, this simply returns a SmartCookie.
       
          >>> C = Cookie.Cookie()
          >>> print C.__class__.__name__
          SmartCookie
       
       
       Finis.
    1: """  #"
       #     ^
       #     |----helps out font-lock
       
       #
       # Import our required modules
       #
    1: import string
       
    1: try:
    1:     from cPickle import dumps, loads
>>>>>> except ImportError:
>>>>>>     from pickle import dumps, loads
       
    1: import re, warnings
       
    1: __all__ = ["CookieError","BaseCookie","SimpleCookie","SerialCookie",
    1:            "SmartCookie","Cookie"]
       
    1: _nulljoin = ''.join
    1: _semispacejoin = '; '.join
    1: _spacejoin = ' '.join
       
       #
       # Define an exception visible to External modules
       #
    2: class CookieError(Exception):
    1:     pass
       
       
       # These quoting routines conform to the RFC2109 specification, which in
       # turn references the character definitions from RFC2068.  They provide
       # a two-way quoting algorithm.  Any non-text character is translated
       # into a 4 character sequence: a forward-slash followed by the
       # three-digit octal equivalent of the character.  Any '\' or '"' is
       # quoted with a preceding '\' slash.
       #
       # These are taken from RFC2068 and RFC2109.
       #       _LegalChars       is the list of chars which don't require "'s
       #       _Translator       hash-table for fast quoting
       #
    1: _LegalChars       = string.ascii_letters + string.digits + "!#$%&'*+-.^_`|~"
    1: _Translator       = {
    1:     '\000' : '\\000',  '\001' : '\\001',  '\002' : '\\002',
    1:     '\003' : '\\003',  '\004' : '\\004',  '\005' : '\\005',
    1:     '\006' : '\\006',  '\007' : '\\007',  '\010' : '\\010',
    1:     '\011' : '\\011',  '\012' : '\\012',  '\013' : '\\013',
    1:     '\014' : '\\014',  '\015' : '\\015',  '\016' : '\\016',
    1:     '\017' : '\\017',  '\020' : '\\020',  '\021' : '\\021',
    1:     '\022' : '\\022',  '\023' : '\\023',  '\024' : '\\024',
    1:     '\025' : '\\025',  '\026' : '\\026',  '\027' : '\\027',
    1:     '\030' : '\\030',  '\031' : '\\031',  '\032' : '\\032',
    1:     '\033' : '\\033',  '\034' : '\\034',  '\035' : '\\035',
    1:     '\036' : '\\036',  '\037' : '\\037',
       
           # Because of the way browsers really handle cookies (as opposed
           # to what the RFC says) we also encode , and ;
       
    1:     ',' : '\\054', ';' : '\\073',
       
    1:     '"' : '\\"',       '\\' : '\\\\',
       
    1:     '\177' : '\\177',  '\200' : '\\200',  '\201' : '\\201',
    1:     '\202' : '\\202',  '\203' : '\\203',  '\204' : '\\204',
    1:     '\205' : '\\205',  '\206' : '\\206',  '\207' : '\\207',
    1:     '\210' : '\\210',  '\211' : '\\211',  '\212' : '\\212',
    1:     '\213' : '\\213',  '\214' : '\\214',  '\215' : '\\215',
    1:     '\216' : '\\216',  '\217' : '\\217',  '\220' : '\\220',
    1:     '\221' : '\\221',  '\222' : '\\222',  '\223' : '\\223',
    1:     '\224' : '\\224',  '\225' : '\\225',  '\226' : '\\226',
    1:     '\227' : '\\227',  '\230' : '\\230',  '\231' : '\\231',
    1:     '\232' : '\\232',  '\233' : '\\233',  '\234' : '\\234',
    1:     '\235' : '\\235',  '\236' : '\\236',  '\237' : '\\237',
    1:     '\240' : '\\240',  '\241' : '\\241',  '\242' : '\\242',
    1:     '\243' : '\\243',  '\244' : '\\244',  '\245' : '\\245',
    1:     '\246' : '\\246',  '\247' : '\\247',  '\250' : '\\250',
    1:     '\251' : '\\251',  '\252' : '\\252',  '\253' : '\\253',
    1:     '\254' : '\\254',  '\255' : '\\255',  '\256' : '\\256',
    1:     '\257' : '\\257',  '\260' : '\\260',  '\261' : '\\261',
    1:     '\262' : '\\262',  '\263' : '\\263',  '\264' : '\\264',
    1:     '\265' : '\\265',  '\266' : '\\266',  '\267' : '\\267',
    1:     '\270' : '\\270',  '\271' : '\\271',  '\272' : '\\272',
    1:     '\273' : '\\273',  '\274' : '\\274',  '\275' : '\\275',
    1:     '\276' : '\\276',  '\277' : '\\277',  '\300' : '\\300',
    1:     '\301' : '\\301',  '\302' : '\\302',  '\303' : '\\303',
    1:     '\304' : '\\304',  '\305' : '\\305',  '\306' : '\\306',
    1:     '\307' : '\\307',  '\310' : '\\310',  '\311' : '\\311',
    1:     '\312' : '\\312',  '\313' : '\\313',  '\314' : '\\314',
    1:     '\315' : '\\315',  '\316' : '\\316',  '\317' : '\\317',
    1:     '\320' : '\\320',  '\321' : '\\321',  '\322' : '\\322',
    1:     '\323' : '\\323',  '\324' : '\\324',  '\325' : '\\325',
    1:     '\326' : '\\326',  '\327' : '\\327',  '\330' : '\\330',
    1:     '\331' : '\\331',  '\332' : '\\332',  '\333' : '\\333',
    1:     '\334' : '\\334',  '\335' : '\\335',  '\336' : '\\336',
    1:     '\337' : '\\337',  '\340' : '\\340',  '\341' : '\\341',
    1:     '\342' : '\\342',  '\343' : '\\343',  '\344' : '\\344',
    1:     '\345' : '\\345',  '\346' : '\\346',  '\347' : '\\347',
    1:     '\350' : '\\350',  '\351' : '\\351',  '\352' : '\\352',
    1:     '\353' : '\\353',  '\354' : '\\354',  '\355' : '\\355',
    1:     '\356' : '\\356',  '\357' : '\\357',  '\360' : '\\360',
    1:     '\361' : '\\361',  '\362' : '\\362',  '\363' : '\\363',
    1:     '\364' : '\\364',  '\365' : '\\365',  '\366' : '\\366',
    1:     '\367' : '\\367',  '\370' : '\\370',  '\371' : '\\371',
    1:     '\372' : '\\372',  '\373' : '\\373',  '\374' : '\\374',
    1:     '\375' : '\\375',  '\376' : '\\376',  '\377' : '\\377'
           }
       
  258: _idmap = ''.join(chr(x) for x in xrange(256))
       
    1: def _quote(str, LegalChars=_LegalChars,
    1:            idmap=_idmap, translate=string.translate):
           #
           # If the string does not need to be double-quoted,
           # then just return the string.  Otherwise, surround
           # the string in doublequotes and precede quote (with a \)
           # special characters.
           #
   12:     if "" == translate(str, idmap, LegalChars):
    7:         return str
           else:
    5:         return '"' + _nulljoin( map(_Translator.get, str, str) ) + '"'
       # end _quote
       
       
    1: _OctalPatt = re.compile(r"\\[0-3][0-7][0-7]")
    1: _QuotePatt = re.compile(r"[\\].")
       
    1: def _unquote(str):
           # If there aren't any doublequotes,
           # then there can't be any special characters.  See RFC 2109.
   38:     if  len(str) < 2:
    6:         return str
   32:     if str[0] != '"' or str[-1] != '"':
   22:         return str
       
           # We have to assume that we must decode this string.
           # Down to work.
       
           # Remove the "s
   10:     str = str[1:-1]
       
           # Check for special sequences.  Examples:
           #    \012 --> \n
           #    \"   --> "
           #
   10:     i = 0
   10:     n = len(str)
   10:     res = []
   16:     while 0 <= i < n:
   16:         Omatch = _OctalPatt.search(str, i)
   16:         Qmatch = _QuotePatt.search(str, i)
   16:         if not Omatch and not Qmatch:              # Neither matched
   10:             res.append(str[i:])
   10:             break
               # else:
    6:         j = k = -1
    6:         if Omatch: j = Omatch.start(0)
    6:         if Qmatch: k = Qmatch.start(0)
    6:         if Qmatch and ( not Omatch or k < j ):     # QuotePatt matched
    4:             res.append(str[i:k])
    4:             res.append(str[k+1])
    4:             i = k+2
               else:                                      # OctalPatt matched
    2:             res.append(str[i:j])
    2:             res.append( chr( int(str[j+1:j+4], 8) ) )
    2:             i = j+4
   10:     return _nulljoin(res)
       # end _unquote
       
       # The _getdate() routine is used to set the expiration time in
       # the cookie's HTTP header.      By default, _getdate() returns the
       # current time in the appropriate "expires" format for a
       # Set-Cookie header.     The one optional argument is an offset from
       # now, in seconds.      For example, an offset of -3600 means "one hour ago".
       # The offset may be a floating point number.
       #
       
    1: _weekdayname = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
       
    1: _monthname = [None,
    1:               'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
    1:               'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
       
    1: def _getdate(future=0, weekdayname=_weekdayname, monthname=_monthname):
>>>>>>     from time import gmtime, time
>>>>>>     now = time()
>>>>>>     year, month, day, hh, mm, ss, wd, y, z = gmtime(now + future)
>>>>>>     return "%s, %02d %3s %4d %02d:%02d:%02d GMT" % \
>>>>>>            (weekdayname[wd], day, monthname[month], year, hh, mm, ss)
       
       
       #
       # A class to hold ONE key,value pair.
       # In a cookie, each such pair may have several attributes.
       #       so this class is used to keep the attributes associated
       #       with the appropriate key,value pair.
       # This class also includes a coded_value attribute, which
       #       is used to hold the network representation of the
       #       value.  This is most useful when Python objects are
       #       pickled for network transit.
       #
       
    2: class Morsel(dict):
           # RFC 2109 lists these attributes as reserved:
           #   path       comment         domain
           #   max-age    secure      version
           #
           # For historical reasons, these attributes are also reserved:
           #   expires
           #
           # This is an extension from Microsoft:
           #   httponly
           #
           # This dictionary provides a mapping from the lowercase
           # variant on the left to the appropriate traditional
           # formatting on the right.
    1:     _reserved = { "expires" : "expires",
    1:                    "path"        : "Path",
    1:                    "comment" : "Comment",
    1:                    "domain"      : "Domain",
    1:                    "max-age" : "Max-Age",
    1:                    "secure"      : "secure",
    1:                    "httponly"  : "httponly",
    1:                    "version" : "Version",
                          }
       
    1:     _flags = {'secure', 'httponly'}
       
    1:     def __init__(self):
               # Set defaults
   36:         self.key = self.value = self.coded_value = None
       
               # Set default attributes
  324:         for K in self._reserved:
  288:             dict.__setitem__(self, K, "")
           # end __init__
       
    1:     def __setitem__(self, K, V):
   29:         K = K.lower()
   29:         if not K in self._reserved:
>>>>>>             raise CookieError("Invalid Attribute %s" % K)
   29:         dict.__setitem__(self, K, V)
           # end __setitem__
       
    1:     def isReservedKey(self, K):
>>>>>>         return K.lower() in self._reserved
           # end isReservedKey
       
           def set(self, key, val, coded_val,
    1:             LegalChars=_LegalChars,
    1:             idmap=_idmap, translate=string.translate):
               # First we verify that the key isn't a reserved word
               # Second we make sure it only contains legal characters
   36:         if key.lower() in self._reserved:
>>>>>>             raise CookieError("Attempt to set a reserved key: %s" % key)
   36:         if "" != translate(key, idmap, LegalChars):
>>>>>>             raise CookieError("Illegal key value: %s" % key)
       
               # It's a good key, so save it.
   36:         self.key                 = key
   36:         self.value               = val
   36:         self.coded_value         = coded_val
           # end set
       
    1:     def output(self, attrs=None, header = "Set-Cookie:"):
   33:         return "%s %s" % ( header, self.OutputString(attrs) )
       
    1:     __str__ = output
       
    1:     def __repr__(self):
>>>>>>         return '<%s: %s=%s>' % (self.__class__.__name__,
>>>>>>                                 self.key, repr(self.value) )
       
    1:     def js_output(self, attrs=None):
               # Print javascript
               return """
               <script type="text/javascript">
               <!-- begin hiding
               document.cookie = \"%s\";
               // end hiding -->
               </script>
    2:         """ % ( self.OutputString(attrs).replace('"',r'\"'), )
           # end js_output()
       
    1:     def OutputString(self, attrs=None):
               # Build up our result
               #
   35:         result = []
   35:         RA = result.append
       
               # First, the key=value pair
   35:         RA("%s=%s" % (self.key, self.coded_value))
       
               # Now add any defined attributes
   35:         if attrs is None:
   31:             attrs = self._reserved
   35:         items = self.items()
   35:         items.sort()
  315:         for K,V in items:
  280:             if V == "": continue
   21:             if K not in attrs: continue
   18:             if K == "expires" and type(V) == type(1):
>>>>>>                 RA("%s=%s" % (self._reserved[K], _getdate(V)))
   18:             elif K == "max-age" and type(V) == type(1):
>>>>>>                 RA("%s=%d" % (self._reserved[K], V))
   18:             elif K == "secure":
    2:                 RA(str(self._reserved[K]))
   16:             elif K == "httponly":
    1:                 RA(str(self._reserved[K]))
                   else:
   15:                 RA("%s=%s" % (self._reserved[K], V))
       
               # Return the result
   35:         return _semispacejoin(result)
           # end OutputString
       # end Morsel class
       
       
       
       #
       # Pattern for finding cookie
       #
       # This used to be strict parsing based on the RFC2109 and RFC2068
       # specifications.  I have since discovered that MSIE 3.0x doesn't
       # follow the character rules outlined in those specs.  As a
       # result, the parsing rules here are less strict.
       #
       
    1: _LegalKeyChars  = r"\w\d!#%&'~_`><@,:/\$\*\+\-\.\^\|\)\(\?\}\{\="
    1: _LegalValueChars = _LegalKeyChars + r"\[\]"
    1: _CookiePattern = re.compile(
           r"(?x)"                       # This is a Verbose pattern
           r"\s*"                        # Optional whitespace at start of cookie
           r"(?P<key>"                   # Start of group 'key'
           "["+ _LegalKeyChars +"]+?"     # Any word of at least one letter, nongreedy
           r")"                          # End of group 'key'
           r"("                          # Optional group: there may not be a value.
           r"\s*=\s*"                    # Equal Sign
           r"(?P<val>"                   # Start of group 'val'
           r'"(?:[^\\"]|\\.)*"'            # Any doublequoted string
           r"|"                            # or
           r"\w{3},\s[\s\w\d-]{9,11}\s[\d:]{8}\sGMT" # Special case for "expires" attr
           r"|"                            # or
    1:     "["+ _LegalValueChars +"]*"        # Any word or empty string
           r")"                          # End of group 'val'
           r")?"                         # End of optional value group
           r"\s*"                        # Any number of spaces.
           r"(\s+|;|$)"                  # Ending either at space, semicolon, or EOS.
           )
       
       
       # At long last, here is the cookie class.
       #   Using this class is almost just like using a dictionary.
       # See this module's docstring for example usage.
       #
    2: class BaseCookie(dict):
           # A container class for a set of Morsels
           #
       
    1:     def value_decode(self, val):
               """real_value, coded_value = value_decode(STRING)
               Called prior to setting a cookie's value from the network
               representation.  The VALUE is the value read from HTTP
               header.
               Override this function to modify the behavior of cookies.
               """
>>>>>>         return val, val
           # end value_encode
       
    1:     def value_encode(self, val):
               """real_value, coded_value = value_encode(VALUE)
               Called prior to setting a cookie's value from the dictionary
               representation.  The VALUE is the value being assigned.
               Override this function to modify the behavior of cookies.
               """
>>>>>>         strval = str(val)
>>>>>>         return strval, strval
           # end value_encode
       
    1:     def __init__(self, input=None):
   30:         if input: self.load(input)
           # end __init__
       
    1:     def __set(self, key, real_value, coded_value):
               """Private method for setting a cookie's value"""
   36:         M = self.get(key, Morsel())
   36:         M.set(key, real_value, coded_value)
   36:         dict.__setitem__(self, key, M)
           # end __set
       
    1:     def __setitem__(self, key, value):
               """Dictionary style assignment."""
   13:         if isinstance(value, Morsel):
                   # allow assignment of constructed Morsels (e.g. for pickling)
    1:             dict.__setitem__(self, key, value)
               else:
   12:             rval, cval = self.value_encode(value)
   12:             self.__set(key, rval, cval)
           # end __setitem__
       
    1:     def output(self, attrs=None, header="Set-Cookie:", sep="\015\012"):
               """Return a string suitable for HTTP."""
   26:         result = []
   26:         items = self.items()
   26:         items.sort()
   59:         for K,V in items:
   33:             result.append( V.output(attrs, header) )
   26:         return sep.join(result)
           # end output
       
    1:     __str__ = output
       
    1:     def __repr__(self):
    4:         L = []
    4:         items = self.items()
    4:         items.sort()
   12:         for K,V in items:
    8:             L.append( '%s=%s' % (K,repr(V.value) ) )
    4:         return '<%s: %s>' % (self.__class__.__name__, _spacejoin(L))
       
    1:     def js_output(self, attrs=None):
               """Return a string suitable for JavaScript."""
    2:         result = []
    2:         items = self.items()
    2:         items.sort()
    4:         for K,V in items:
    2:             result.append( V.js_output(attrs) )
    2:         return _nulljoin(result)
           # end js_output
       
    1:     def load(self, rawdata):
               """Load cookies from a string (presumably HTTP_COOKIE) or
               from a dictionary.  Loading cookies from a dictionary 'd'
               is equivalent to calling:
                   map(Cookie.__setitem__, d.keys(), d.values())
               """
   21:         if type(rawdata) == type(""):
   21:             self.__ParseString(rawdata)
               else:
                   # self.update() wouldn't call our custom __setitem__
>>>>>>             for k, v in rawdata.items():
>>>>>>                 self[k] = v
   21:         return
           # end load()
       
    1:     def __ParseString(self, str, patt=_CookiePattern):
   21:         i = 0            # Our starting point
   21:         n = len(str)     # Length of string
   21:         M = None         # current morsel
       
   64:         while 0 <= i < n:
                   # Start looking for a cookie
   47:             match = patt.match(str, i)
   47:             if not match: break          # No more cookies
       
   43:             K,V = match.group("key"), match.group("val")
   43:             i = match.end(0)
       
                   # Parse the key, value in case it's metainfo
   43:             if K[0] == "$":
                       # We ignore attributes which pertain to the cookie
                       # mechanism as a whole.  See RFC 2109.
                       # (Does anyone care?)
>>>>>>                 if M:
>>>>>>                     M[ K[1:] ] = V
   43:             elif K.lower() in Morsel._reserved:
   18:                 if M:
   18:                     if V is None:
    4:                         if K.lower() in Morsel._flags:
    3:                             M[K] = True
                           else:
   14:                         M[K] = _unquote(V)
   25:             elif V is not None:
   24:                 rval, cval = self.value_decode(V)
   24:                 self.__set(K, rval, cval)
   24:                 M = self[K]
           # end __ParseString
       # end BaseCookie class
       
    2: class SimpleCookie(BaseCookie):
           """SimpleCookie
           SimpleCookie supports strings as cookie values.  When setting
           the value using the dictionary assignment notation, SimpleCookie
           calls the builtin str() to convert the value to a string.  Values
           received from HTTP are kept as strings.
    1:     """
    1:     def value_decode(self, val):
   21:         return _unquote( val ), val
    1:     def value_encode(self, val):
    3:         strval = str(val)
    3:         return strval, _quote( strval )
       # end SimpleCookie
       
    2: class SerialCookie(BaseCookie):
           """SerialCookie
           SerialCookie supports arbitrary objects as cookie values. All
           values are serialized (using cPickle) before being sent to the
           client.  All incoming values are assumed to be valid Pickle
           representations.  IF AN INCOMING VALUE IS NOT IN A VALID PICKLE
           FORMAT, THEN AN EXCEPTION WILL BE RAISED.
       
           Note: Large cookie values add overhead because they must be
           retransmitted on every HTTP transaction.
       
           Note: HTTP has a 2k limit on the size of a cookie.  This class
           does not check for this limit, so be careful!!!
    1:     """
    1:     def __init__(self, input=None):
    2:         warnings.warn("SerialCookie class is insecure; do not use it",
    2:                       DeprecationWarning)
    2:         BaseCookie.__init__(self, input)
           # end __init__
    1:     def value_decode(self, val):
               # This could raise an exception!
>>>>>>         return loads( _unquote(val) ), val
    1:     def value_encode(self, val):
    2:         return val, _quote( dumps(val) )
       # end SerialCookie
       
    2: class SmartCookie(BaseCookie):
           """SmartCookie
           SmartCookie supports arbitrary objects as cookie values.  If the
           object is a string, then it is quoted.  If the object is not a
           string, however, then SmartCookie will use cPickle to serialize
           the object into a string representation.
       
           Note: Large cookie values add overhead because they must be
           retransmitted on every HTTP transaction.
       
           Note: HTTP has a 2k limit on the size of a cookie.  This class
           does not check for this limit, so be careful!!!
    1:     """
    1:     def __init__(self, input=None):
    9:         warnings.warn("Cookie/SmartCookie class is insecure; do not use it",
    9:                       DeprecationWarning)
    9:         BaseCookie.__init__(self, input)
           # end __init__
    1:     def value_decode(self, val):
    3:         strval = _unquote(val)
    3:         try:
    3:             return loads(strval), val
    3:         except:
    3:             return strval, val
    1:     def value_encode(self, val):
    7:         if type(val) == type(""):
    6:             return val, _quote(val)
               else:
    1:             return val, _quote( dumps(val) )
       # end SmartCookie
       
       
       ###########################################################
       # Backwards Compatibility:  Don't break any existing code!
       
       # We provide Cookie() as an alias for SmartCookie()
    1: Cookie = SmartCookie
       
       #
       ###########################################################
       
    1: def _test():
>>>>>>     import doctest, Cookie
>>>>>>     return doctest.testmod(Cookie)
       
    1: if __name__ == "__main__":
>>>>>>     _test()
       
       
       #Local Variables:
       #tab-width: 4
       #end:
