       """A bottom-up tree matching algorithm implementation meant to speed
       up 2to3's matching process. After the tree patterns are reduced to
       their rarest linear path, a linear Aho-Corasick automaton is
       created. The linear automaton traverses the linear paths from the
       leaves to the root of the AST and returns a set of nodes for further
    1: matching. This reduces significantly the number of candidate nodes."""
       
    1: __author__ = "George Boutsioukis <gboutsioukis@gmail.com>"
       
    1: import logging
    1: import itertools
    1: from collections import defaultdict
       
    1: from . import pytree
    1: from .btm_utils import reduce_tree
       
    2: class BMNode(object):
    1:     """Class for a node of the Aho-Corasick automaton used in matching"""
    1:     count = itertools.count()
    1:     def __init__(self):
10266:         self.transition_table = {}
10266:         self.fixers = []
10266:         self.id = next(BMNode.count)
10266:         self.content = ''
       
    2: class BottomMatcher(object):
           """The main matcher class. After instantiating the patterns should
    1:     be added using the add_fixer method"""
       
    1:     def __init__(self):
  482:         self.match = set()
  482:         self.root = BMNode()
  482:         self.nodes = [self.root]
  482:         self.fixers = []
  482:         self.logger = logging.getLogger("RefactoringTool")
       
    1:     def add_fixer(self, fixer):
               """Reduces a fixer's pattern tree to a linear path and adds it
               to the matcher(a common Aho-Corasick automaton). The fixer is
               appended on the matching states and called when they are
               reached"""
  789:         self.fixers.append(fixer)
  789:         tree = reduce_tree(fixer.pattern_tree)
  789:         linear = tree.get_linear_subpattern()
  789:         match_nodes = self.add(linear, start=self.root)
 5699:         for match_node in match_nodes:
 4910:             match_node.fixers.append(fixer)
       
    1:     def add(self, pattern, start):
               "Recursively adds a linear pattern to the AC automaton"
               #print("adding pattern", pattern, "to", start)
17025:         if not pattern:
                   #print("empty pattern")
 4056:             return [start]
12969:         if isinstance(pattern[0], tuple):
                   #alternatives
                   #print("alternatives")
  695:             match_nodes = []
 5511:             for alternative in pattern[0]:
                       #add all alternatives, and add the rest of the pattern
                       #to each end node
 4816:                 end_nodes = self.add(alternative, start=start)
12059:                 for end in end_nodes:
 7243:                     match_nodes.extend(self.add(pattern[1:], end))
  695:             return match_nodes
               else:
                   #single token
                   #not last
12274:             if pattern[0] not in start.transition_table:
                       #transition did not exist, create new
 9784:                 next_node = BMNode()
 9784:                 start.transition_table[pattern[0]] = next_node
                   else:
                       #transition exists already, follow
 2490:                 next_node = start.transition_table[pattern[0]]
       
12274:             if pattern[1:]:
 4177:                 end_nodes = self.add(pattern[1:], start=next_node)
                   else:
 8097:                 end_nodes = [next_node]
12274:             return end_nodes
       
    1:     def run(self, leaves):
               """The main interface with the bottom matcher. The tree is
               traversed from the bottom using the constructed
               automaton. Nodes are only checked once as the tree is
               retraversed. When the automaton fails, we give it one more
               shot(in case the above tree matches as a whole with the
               rejected leaf), then we break for the next leaf. There is the
               special case of multiple arguments(see code comments) where we
               recheck the nodes
       
               Args:
                  The leaves of the AST tree to be matched
       
               Returns:
                  A dictionary of node matches with fixers as the keys
               """
 2649:         current_ac_node = self.root
 2649:         results = defaultdict(list)
33942:         for leaf in leaves:
31293:             current_ast_node = leaf
55379:             while current_ast_node:
52982:                 current_ast_node.was_checked = True
127774:                 for child in current_ast_node.children:
                           # multiple statements, recheck
74985:                     if isinstance(child, pytree.Leaf) and child.value == u";":
  193:                         current_ast_node.was_checked = False
  193:                         break
52982:                 if current_ast_node.type == 1:
                           #name
12609:                     node_token = current_ast_node.value
                       else:
40373:                     node_token = current_ast_node.type
       
52982:                 if node_token in current_ac_node.transition_table:
                           #token matches
10120:                     current_ac_node = current_ac_node.transition_table[node_token]
18370:                     for fixer in current_ac_node.fixers:
 8250:                         if not fixer in results:
 2474:                             results[fixer] = []
 8250:                         results[fixer].append(current_ast_node)
       
                       else:
                           #matching failed, reset automaton
42862:                     current_ac_node = self.root
42862:                     if (current_ast_node.parent is not None
40707:                         and current_ast_node.parent.was_checked):
                               #the rest of the tree upwards has been checked, next leaf
28896:                         break
       
                           #recheck the rejected node once from the root
13966:                     if node_token in current_ac_node.transition_table:
                               #token matches
   52:                         current_ac_node = current_ac_node.transition_table[node_token]
  104:                         for fixer in current_ac_node.fixers:
   52:                             if not fixer in results.keys():
   30:                                 results[fixer] = []
   52:                             results[fixer].append(current_ast_node)
       
24086:                 current_ast_node = current_ast_node.parent
 2649:         return results
       
    1:     def print_ac(self):
               "Prints a graphviz diagram of the BM automaton(for debugging)"
>>>>>>         print("digraph g{")
>>>>>>         def print_node(node):
>>>>>>             for subnode_key in node.transition_table.keys():
>>>>>>                 subnode = node.transition_table[subnode_key]
>>>>>>                 print("%d -> %d [label=%s] //%s" %
>>>>>>                       (node.id, subnode.id, type_repr(subnode_key), str(subnode.fixers)))
>>>>>>                 if subnode_key == 1:
>>>>>>                     print(subnode.content)
>>>>>>                 print_node(subnode)
>>>>>>         print_node(self.root)
>>>>>>         print("}")
       
       # taken from pytree.py for debugging; only used by print_ac
    1: _type_reprs = {}
    1: def type_repr(type_num):
           global _type_reprs
>>>>>>     if not _type_reprs:
>>>>>>         from .pygram import python_symbols
               # printing tokens is possible but not as useful
               # from .pgen2 import token // token.__dict__.items():
>>>>>>         for name, val in python_symbols.__dict__.items():
>>>>>>             if type(val) == int: _type_reprs[val] = name
>>>>>>     return _type_reprs.setdefault(type_num, type_num)
