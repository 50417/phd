    1: import unittest, test.test_support
    1: import colorsys
       
    1: def frange(start, stop, step):
  602:     while start <= stop:
  516:         yield start
  516:         start += step
       
    2: class ColorsysTest(unittest.TestCase):
       
    1:     def assertTripleEqual(self, tr1, tr2):
  468:         self.assertEqual(len(tr1), 3)
  468:         self.assertEqual(len(tr2), 3)
  468:         self.assertAlmostEqual(tr1[0], tr2[0])
  468:         self.assertAlmostEqual(tr1[1], tr2[1])
  468:         self.assertAlmostEqual(tr1[2], tr2[2])
       
    1:     def test_hsv_roundtrip(self):
    7:         for r in frange(0.0, 1.0, 0.2):
   42:             for g in frange(0.0, 1.0, 0.2):
  252:                 for b in frange(0.0, 1.0, 0.2):
  216:                     rgb = (r, g, b)
  216:                     self.assertTripleEqual(
  216:                         rgb,
  216:                         colorsys.hsv_to_rgb(*colorsys.rgb_to_hsv(*rgb))
                           )
       
    1:     def test_hsv_values(self):
               values = [
                   # rgb, hsv
    1:             ((0.0, 0.0, 0.0), (  0  , 0.0, 0.0)), # black
    1:             ((0.0, 0.0, 1.0), (4./6., 1.0, 1.0)), # blue
    1:             ((0.0, 1.0, 0.0), (2./6., 1.0, 1.0)), # green
    1:             ((0.0, 1.0, 1.0), (3./6., 1.0, 1.0)), # cyan
    1:             ((1.0, 0.0, 0.0), (  0  , 1.0, 1.0)), # red
    1:             ((1.0, 0.0, 1.0), (5./6., 1.0, 1.0)), # purple
    1:             ((1.0, 1.0, 0.0), (1./6., 1.0, 1.0)), # yellow
    1:             ((1.0, 1.0, 1.0), (  0  , 0.0, 1.0)), # white
    1:             ((0.5, 0.5, 0.5), (  0  , 0.0, 0.5)), # grey
               ]
   10:         for (rgb, hsv) in values:
    9:             self.assertTripleEqual(hsv, colorsys.rgb_to_hsv(*rgb))
    9:             self.assertTripleEqual(rgb, colorsys.hsv_to_rgb(*hsv))
       
    1:     def test_hls_roundtrip(self):
    7:         for r in frange(0.0, 1.0, 0.2):
   42:             for g in frange(0.0, 1.0, 0.2):
  252:                 for b in frange(0.0, 1.0, 0.2):
  216:                     rgb = (r, g, b)
  216:                     self.assertTripleEqual(
  216:                         rgb,
  216:                         colorsys.hls_to_rgb(*colorsys.rgb_to_hls(*rgb))
                           )
       
    1:     def test_hls_values(self):
               values = [
                   # rgb, hls
    1:             ((0.0, 0.0, 0.0), (  0  , 0.0, 0.0)), # black
    1:             ((0.0, 0.0, 1.0), (4./6., 0.5, 1.0)), # blue
    1:             ((0.0, 1.0, 0.0), (2./6., 0.5, 1.0)), # green
    1:             ((0.0, 1.0, 1.0), (3./6., 0.5, 1.0)), # cyan
    1:             ((1.0, 0.0, 0.0), (  0  , 0.5, 1.0)), # red
    1:             ((1.0, 0.0, 1.0), (5./6., 0.5, 1.0)), # purple
    1:             ((1.0, 1.0, 0.0), (1./6., 0.5, 1.0)), # yellow
    1:             ((1.0, 1.0, 1.0), (  0  , 1.0, 0.0)), # white
    1:             ((0.5, 0.5, 0.5), (  0  , 0.5, 0.0)), # grey
               ]
   10:         for (rgb, hls) in values:
    9:             self.assertTripleEqual(hls, colorsys.rgb_to_hls(*rgb))
    9:             self.assertTripleEqual(rgb, colorsys.hls_to_rgb(*hls))
       
    1: def test_main():
    1:     test.test_support.run_unittest(ColorsysTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
