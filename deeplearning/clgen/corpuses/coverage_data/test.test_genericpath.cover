       """
       Tests common to genericpath, macpath, ntpath and posixpath
    1: """
       
    1: import unittest
    1: from test import test_support
    1: import os
    1: import genericpath
    1: import sys
       
       
    1: def safe_rmdir(dirname):
    8:     try:
    8:         os.rmdir(dirname)
    8:     except OSError:
    8:         pass
       
       
    2: class GenericTest(unittest.TestCase):
           # The path module to be tested
    1:     pathmodule = genericpath
    1:     common_attributes = ['commonprefix', 'getsize', 'getatime', 'getctime',
    1:                          'getmtime', 'exists', 'isdir', 'isfile']
    1:     attributes = []
       
    1:     def test_no_argument(self):
  117:         for attr in self.common_attributes + self.attributes:
  113:             with self.assertRaises(TypeError):
  113:                 getattr(self.pathmodule, attr)()
>>>>>>                 raise self.fail("{}.{}() did not raise a TypeError"
>>>>>>                                 .format(self.pathmodule.__name__, attr))
       
    1:     def test_commonprefix(self):
    4:         commonprefix = self.pathmodule.commonprefix
    4:         self.assertEqual(
    4:             commonprefix([]),
    4:             ""
               )
    4:         self.assertEqual(
    4:             commonprefix(["/home/swenson/spam", "/home/swen/spam"]),
    4:             "/home/swen"
               )
    4:         self.assertEqual(
    4:             commonprefix(["/home/swen/spam", "/home/swen/eggs"]),
    4:             "/home/swen/"
               )
    4:         self.assertEqual(
    4:             commonprefix(["/home/swen/spam", "/home/swen/spam"]),
    4:             "/home/swen/spam"
               )
    4:         self.assertEqual(
    4:             commonprefix(["home:swenson:spam", "home:swen:spam"]),
    4:             "home:swen"
               )
    4:         self.assertEqual(
    4:             commonprefix([":home:swen:spam", ":home:swen:eggs"]),
    4:             ":home:swen:"
               )
    4:         self.assertEqual(
    4:             commonprefix([":home:swen:spam", ":home:swen:spam"]),
    4:             ":home:swen:spam"
               )
       
    4:         testlist = ['', 'abc', 'Xbcd', 'Xb', 'XY', 'abcd',
    4:                     'aXc', 'abd', 'ab', 'aX', 'abcX']
   48:         for s1 in testlist:
  528:             for s2 in testlist:
  484:                 p = commonprefix([s1, s2])
  484:                 self.assertTrue(s1.startswith(p))
  484:                 self.assertTrue(s2.startswith(p))
  484:                 if s1 != s2:
  440:                     n = len(p)
  440:                     self.assertNotEqual(s1[n:n+1], s2[n:n+1])
       
    1:     def test_getsize(self):
    4:         f = open(test_support.TESTFN, "wb")
    4:         try:
    4:             f.write("foo")
    4:             f.close()
    4:             self.assertEqual(self.pathmodule.getsize(test_support.TESTFN), 3)
               finally:
    4:             if not f.closed:
>>>>>>                 f.close()
    4:             test_support.unlink(test_support.TESTFN)
       
    1:     def test_time(self):
    4:         f = open(test_support.TESTFN, "wb")
    4:         try:
    4:             f.write("foo")
    4:             f.close()
    4:             f = open(test_support.TESTFN, "ab")
    4:             f.write("bar")
    4:             f.close()
    4:             f = open(test_support.TESTFN, "rb")
    4:             d = f.read()
    4:             f.close()
    4:             self.assertEqual(d, "foobar")
       
    4:             self.assertLessEqual(
    4:                 self.pathmodule.getctime(test_support.TESTFN),
    4:                 self.pathmodule.getmtime(test_support.TESTFN)
                   )
               finally:
    4:             if not f.closed:
>>>>>>                 f.close()
    4:             test_support.unlink(test_support.TESTFN)
       
    1:     def test_exists(self):
    4:         self.assertIs(self.pathmodule.exists(test_support.TESTFN), False)
    4:         f = open(test_support.TESTFN, "wb")
    4:         try:
    4:             f.write("foo")
    4:             f.close()
    4:             self.assertIs(self.pathmodule.exists(test_support.TESTFN), True)
    4:             if not self.pathmodule == genericpath:
    3:                 self.assertIs(self.pathmodule.lexists(test_support.TESTFN),
    3:                               True)
               finally:
    4:             if not f.close():
    4:                 f.close()
    4:             test_support.unlink(test_support.TESTFN)
       
    1:     def test_isdir(self):
    4:         self.assertIs(self.pathmodule.isdir(test_support.TESTFN), False)
    4:         f = open(test_support.TESTFN, "wb")
    4:         try:
    4:             f.write("foo")
    4:             f.close()
    4:             self.assertIs(self.pathmodule.isdir(test_support.TESTFN), False)
    4:             os.remove(test_support.TESTFN)
    4:             os.mkdir(test_support.TESTFN)
    4:             self.assertIs(self.pathmodule.isdir(test_support.TESTFN), True)
    4:             os.rmdir(test_support.TESTFN)
               finally:
    4:             if not f.close():
    4:                 f.close()
    4:             test_support.unlink(test_support.TESTFN)
    4:             safe_rmdir(test_support.TESTFN)
       
    1:     def test_isfile(self):
    4:         self.assertIs(self.pathmodule.isfile(test_support.TESTFN), False)
    4:         f = open(test_support.TESTFN, "wb")
    4:         try:
    4:             f.write("foo")
    4:             f.close()
    4:             self.assertIs(self.pathmodule.isfile(test_support.TESTFN), True)
    4:             os.remove(test_support.TESTFN)
    4:             os.mkdir(test_support.TESTFN)
    4:             self.assertIs(self.pathmodule.isfile(test_support.TESTFN), False)
    4:             os.rmdir(test_support.TESTFN)
               finally:
    4:             if not f.close():
    4:                 f.close()
    4:             test_support.unlink(test_support.TESTFN)
    4:             safe_rmdir(test_support.TESTFN)
       
       
       # Following TestCase is not supposed to be run from test_genericpath.
       # It is inherited by other test modules (macpath, ntpath, posixpath).
       
    2: class CommonTest(GenericTest):
           # The path module to be tested
    1:     pathmodule = None
    1:     common_attributes = GenericTest.common_attributes + [
               # Properties
    1:         'curdir', 'pardir', 'extsep', 'sep',
    1:         'pathsep', 'defpath', 'altsep', 'devnull',
               # Methods
    1:         'normcase', 'splitdrive', 'expandvars', 'normpath', 'abspath',
    1:         'join', 'split', 'splitext', 'isabs', 'basename', 'dirname',
    1:         'lexists', 'islink', 'ismount', 'expanduser', 'normpath', 'realpath',
           ]
       
    1:     def test_normcase(self):
               # Check that normcase() is idempotent
    3:         p = "FoO/./BaR"
    3:         p = self.pathmodule.normcase(p)
    3:         self.assertEqual(p, self.pathmodule.normcase(p))
       
    1:     def test_splitdrive(self):
               # splitdrive for non-NT paths
    3:         splitdrive = self.pathmodule.splitdrive
    3:         self.assertEqual(splitdrive("/foo/bar"), ("", "/foo/bar"))
    3:         self.assertEqual(splitdrive("foo:bar"), ("", "foo:bar"))
    3:         self.assertEqual(splitdrive(":foo:bar"), ("", ":foo:bar"))
       
    1:     def test_expandvars(self):
    3:         if self.pathmodule.__name__ == 'macpath':
    1:             self.skipTest('macpath.expandvars is a stub')
    2:         expandvars = self.pathmodule.expandvars
    2:         with test_support.EnvironmentVarGuard() as env:
    2:             env.clear()
    2:             env["foo"] = "bar"
    2:             env["{foo"] = "baz1"
    2:             env["{foo}"] = "baz2"
    2:             self.assertEqual(expandvars("foo"), "foo")
    2:             self.assertEqual(expandvars("$foo bar"), "bar bar")
    2:             self.assertEqual(expandvars("${foo}bar"), "barbar")
    2:             self.assertEqual(expandvars("$[foo]bar"), "$[foo]bar")
    2:             self.assertEqual(expandvars("$bar bar"), "$bar bar")
    2:             self.assertEqual(expandvars("$?bar"), "$?bar")
    2:             self.assertEqual(expandvars("$foo}bar"), "bar}bar")
    2:             self.assertEqual(expandvars("${foo"), "${foo")
    2:             self.assertEqual(expandvars("${{foo}}"), "baz1}")
    2:             self.assertEqual(expandvars("$foo$foo"), "barbar")
    2:             self.assertEqual(expandvars("$bar$bar"), "$bar$bar")
       
    1:     @unittest.skipUnless(test_support.FS_NONASCII, 'need test_support.FS_NONASCII')
           def test_expandvars_nonascii(self):
    3:         if self.pathmodule.__name__ == 'macpath':
    1:             self.skipTest('macpath.expandvars is a stub')
    2:         expandvars = self.pathmodule.expandvars
    2:         def check(value, expected):
   24:             self.assertEqual(expandvars(value), expected)
    2:         encoding = sys.getfilesystemencoding()
    2:         with test_support.EnvironmentVarGuard() as env:
    2:             env.clear()
    2:             unonascii = test_support.FS_NONASCII
    2:             snonascii = unonascii.encode(encoding)
    2:             env['spam'] = snonascii
    2:             env[snonascii] = 'ham' + snonascii
    2:             check(snonascii, snonascii)
    2:             check('$spam bar', '%s bar' % snonascii)
    2:             check('${spam}bar', '%sbar' % snonascii)
    2:             check('${%s}bar' % snonascii, 'ham%sbar' % snonascii)
    2:             check('$bar%s bar' % snonascii, '$bar%s bar' % snonascii)
    2:             check('$spam}bar', '%s}bar' % snonascii)
       
    2:             check(unonascii, unonascii)
    2:             check(u'$spam bar', u'%s bar' % unonascii)
    2:             check(u'${spam}bar', u'%sbar' % unonascii)
    2:             check(u'${%s}bar' % unonascii, u'ham%sbar' % unonascii)
    2:             check(u'$bar%s bar' % unonascii, u'$bar%s bar' % unonascii)
    2:             check(u'$spam}bar', u'%s}bar' % unonascii)
       
    1:     def test_abspath(self):
    3:         self.assertIn("foo", self.pathmodule.abspath("foo"))
       
               # Abspath returns bytes when the arg is bytes
   18:         for path in ('', 'foo', 'f\xf2\xf2', '/foo', 'C:\\'):
   15:             self.assertIsInstance(self.pathmodule.abspath(path), str)
       
    1:     def test_realpath(self):
    3:         self.assertIn("foo", self.pathmodule.realpath("foo"))
       
    1:     @test_support.requires_unicode
           def test_normpath_issue5827(self):
               # Make sure normpath preserves unicode
   18:         for path in (u'', u'.', u'/', u'\\', u'///foo/.//bar//'):
   15:             self.assertIsInstance(self.pathmodule.normpath(path), unicode)
       
    1:     @test_support.requires_unicode
           def test_abspath_issue3426(self):
               # Check that abspath returns unicode when the arg is unicode
               # with both ASCII and non-ASCII cwds.
    3:         abspath = self.pathmodule.abspath
   18:         for path in (u'', u'fuu', u'f\xf9\xf9', u'/fuu', u'U:\\'):
   15:             self.assertIsInstance(abspath(path), unicode)
       
    3:         unicwd = u'\xe7w\xf0'
    3:         try:
    3:             fsencoding = test_support.TESTFN_ENCODING or "ascii"
    3:             unicwd.encode(fsencoding)
>>>>>>         except (AttributeError, UnicodeEncodeError):
                   # FS encoding is probably ASCII
>>>>>>             pass
               else:
    3:             with test_support.temp_cwd(unicwd):
   18:                 for path in (u'', u'fuu', u'f\xf9\xf9', u'/fuu', u'U:\\'):
   15:                     self.assertIsInstance(abspath(path), unicode)
       
    1:     @unittest.skipIf(sys.platform == 'darwin',
    1:         "Mac OS X denies the creation of a directory with an invalid utf8 name")
           def test_nonascii_abspath(self):
               # Test non-ASCII, non-UTF8 bytes in the path.
>>>>>>         with test_support.temp_cwd('\xe7w\xf0'):
>>>>>>             self.test_abspath()
       
       
    1: def test_main():
    1:     test_support.run_unittest(GenericTest)
       
       
    1: if __name__=="__main__":
>>>>>>     test_main()
