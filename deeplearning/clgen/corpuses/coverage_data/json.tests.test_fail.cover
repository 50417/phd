    1: from json.tests import PyTest, CTest
       
       # 2007-10-05
       JSONDOCS = [
           # http://json.org/JSON_checker/test/fail1.json
    1:     '"A JSON payload should be an object or array, not a string."',
           # http://json.org/JSON_checker/test/fail2.json
    1:     '["Unclosed array"',
           # http://json.org/JSON_checker/test/fail3.json
    1:     '{unquoted_key: "keys must be quoted"}',
           # http://json.org/JSON_checker/test/fail4.json
    1:     '["extra comma",]',
           # http://json.org/JSON_checker/test/fail5.json
    1:     '["double extra comma",,]',
           # http://json.org/JSON_checker/test/fail6.json
    1:     '[   , "<-- missing value"]',
           # http://json.org/JSON_checker/test/fail7.json
    1:     '["Comma after the close"],',
           # http://json.org/JSON_checker/test/fail8.json
    1:     '["Extra close"]]',
           # http://json.org/JSON_checker/test/fail9.json
    1:     '{"Extra comma": true,}',
           # http://json.org/JSON_checker/test/fail10.json
    1:     '{"Extra value after close": true} "misplaced quoted value"',
           # http://json.org/JSON_checker/test/fail11.json
    1:     '{"Illegal expression": 1 + 2}',
           # http://json.org/JSON_checker/test/fail12.json
    1:     '{"Illegal invocation": alert()}',
           # http://json.org/JSON_checker/test/fail13.json
    1:     '{"Numbers cannot have leading zeroes": 013}',
           # http://json.org/JSON_checker/test/fail14.json
    1:     '{"Numbers cannot be hex": 0x14}',
           # http://json.org/JSON_checker/test/fail15.json
    1:     '["Illegal backslash escape: \\x15"]',
           # http://json.org/JSON_checker/test/fail16.json
    1:     '[\\naked]',
           # http://json.org/JSON_checker/test/fail17.json
    1:     '["Illegal backslash escape: \\017"]',
           # http://json.org/JSON_checker/test/fail18.json
    1:     '[[[[[[[[[[[[[[[[[[[["Too deep"]]]]]]]]]]]]]]]]]]]]',
           # http://json.org/JSON_checker/test/fail19.json
    1:     '{"Missing colon" null}',
           # http://json.org/JSON_checker/test/fail20.json
    1:     '{"Double colon":: null}',
           # http://json.org/JSON_checker/test/fail21.json
    1:     '{"Comma instead of colon", null}',
           # http://json.org/JSON_checker/test/fail22.json
    1:     '["Colon instead of comma": false]',
           # http://json.org/JSON_checker/test/fail23.json
    1:     '["Bad value", truth]',
           # http://json.org/JSON_checker/test/fail24.json
    1:     "['single quote']",
           # http://json.org/JSON_checker/test/fail25.json
    1:     '["\ttab\tcharacter\tin\tstring\t"]',
           # http://json.org/JSON_checker/test/fail26.json
    1:     '["tab\\   character\\   in\\  string\\  "]',
           # http://json.org/JSON_checker/test/fail27.json
    1:     '["line\nbreak"]',
           # http://json.org/JSON_checker/test/fail28.json
    1:     '["line\\\nbreak"]',
           # http://json.org/JSON_checker/test/fail29.json
    1:     '[0e]',
           # http://json.org/JSON_checker/test/fail30.json
    1:     '[0e+]',
           # http://json.org/JSON_checker/test/fail31.json
    1:     '[0e+-1]',
           # http://json.org/JSON_checker/test/fail32.json
    1:     '{"Comma instead if closing brace": true,',
           # http://json.org/JSON_checker/test/fail33.json
    1:     '["mismatch"}',
           # http://code.google.com/p/simplejson/issues/detail?id=3
    1:     u'["A\u001FZ control characters in string"]',
       ]
       
    1: SKIPS = {
    1:     1: "why not have a string payload?",
    1:     18: "spec doesn't specify any nesting limitations",
       }
       
    2: class TestFail(object):
    1:     def test_failures(self):
>>>>>>         for idx, doc in enumerate(JSONDOCS):
>>>>>>             idx = idx + 1
>>>>>>             if idx in SKIPS:
>>>>>>                 self.loads(doc)
>>>>>>                 continue
>>>>>>             try:
>>>>>>                 self.loads(doc)
>>>>>>             except ValueError:
>>>>>>                 pass
                   else:
>>>>>>                 self.fail("Expected failure for fail{0}.json: {1!r}".format(idx, doc))
       
    1:     def test_non_string_keys_dict(self):
>>>>>>         data = {'a' : 1, (1, 2) : 2}
       
               #This is for c encoder
>>>>>>         self.assertRaises(TypeError, self.dumps, data)
       
               #This is for python encoder
>>>>>>         self.assertRaises(TypeError, self.dumps, data, indent=True)
       
       
    2: class TestPyFail(TestFail, PyTest): pass
    2: class TestCFail(TestFail, CTest): pass
