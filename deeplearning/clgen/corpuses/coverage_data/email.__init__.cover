       # Copyright (C) 2001-2006 Python Software Foundation
       # Author: Barry Warsaw
       # Contact: email-sig@python.org
       
    1: """A package for parsing, handling, and generating email messages."""
       
    1: __version__ = '4.0.3'
       
       __all__ = [
           # Old names
    1:     'base64MIME',
    1:     'Charset',
    1:     'Encoders',
    1:     'Errors',
    1:     'Generator',
    1:     'Header',
    1:     'Iterators',
    1:     'Message',
    1:     'MIMEAudio',
    1:     'MIMEBase',
    1:     'MIMEImage',
    1:     'MIMEMessage',
    1:     'MIMEMultipart',
    1:     'MIMENonMultipart',
    1:     'MIMEText',
    1:     'Parser',
    1:     'quopriMIME',
    1:     'Utils',
    1:     'message_from_string',
    1:     'message_from_file',
           # new names
    1:     'base64mime',
    1:     'charset',
    1:     'encoders',
    1:     'errors',
    1:     'generator',
    1:     'header',
    1:     'iterators',
    1:     'message',
    1:     'mime',
    1:     'parser',
    1:     'quoprimime',
    1:     'utils',
           ]
       
       
       
       # Some convenience routines.  Don't import Parser and Message as side-effects
       # of importing email since those cascadingly import most of the rest of the
       # email package.
    1: def message_from_string(s, *args, **kws):
           """Parse a string into a Message object model.
       
           Optional _class and strict are passed to the Parser constructor.
           """
  667:     from email.parser import Parser
  667:     return Parser(*args, **kws).parsestr(s)
       
       
    1: def message_from_file(fp, *args, **kws):
           """Read a file and parse its contents into a Message object model.
       
           Optional _class and strict are passed to the Parser constructor.
           """
  350:     from email.parser import Parser
  350:     return Parser(*args, **kws).parse(fp)
       
       
       
       # Lazy loading to provide name mapping from new-style names (PEP 8 compatible
       # email 4.0 module names), to old-style names (email 3.0 module names).
    1: import sys
       
    2: class LazyImporter(object):
    1:     def __init__(self, module_name):
   19:         self.__name__ = 'email.' + module_name
       
    1:     def __getattr__(self, name):
 7440:         __import__(self.__name__)
 7440:         mod = sys.modules[self.__name__]
 7440:         self.__dict__.update(mod.__dict__)
 7440:         return getattr(mod, name)
       
       
       _LOWERNAMES = [
           # email.<old name> -> email.<new name is lowercased old name>
    1:     'Charset',
    1:     'Encoders',
    1:     'Errors',
    1:     'FeedParser',
    1:     'Generator',
    1:     'Header',
    1:     'Iterators',
    1:     'Message',
    1:     'Parser',
    1:     'Utils',
    1:     'base64MIME',
    1:     'quopriMIME',
           ]
       
       _MIMENAMES = [
           # email.MIME<old name> -> email.mime.<new name is lowercased old name>
    1:     'Audio',
    1:     'Base',
    1:     'Image',
    1:     'Message',
    1:     'Multipart',
    1:     'NonMultipart',
    1:     'Text',
           ]
       
   13: for _name in _LOWERNAMES:
   12:     importer = LazyImporter(_name.lower())
   12:     sys.modules['email.' + _name] = importer
   12:     setattr(sys.modules['email'], _name, importer)
       
       
    1: import email.mime
    8: for _name in _MIMENAMES:
    7:     importer = LazyImporter('mime.' + _name.lower())
    7:     sys.modules['email.MIME' + _name] = importer
    7:     setattr(sys.modules['email'], 'MIME' + _name, importer)
    7:     setattr(sys.modules['email.mime'], _name, importer)
