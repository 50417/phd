       """ Python 'zlib_codec' Codec - zlib compression encoding
       
           Unlike most of the other codecs which target Unicode, this codec
           will return Python string objects for both encode and decode.
       
           Written by Marc-Andre Lemburg (mal@lemburg.com).
       
    1: """
    1: import codecs
    1: import zlib # this codec needs the optional zlib module !
       
       ### Codec APIs
       
    1: def zlib_encode(input,errors='strict'):
       
           """ Encodes the object input and returns a tuple (output
               object, length consumed).
       
               errors defines the error handling to apply. It defaults to
               'strict' handling which is the only currently supported
               error handling for this codec.
       
           """
    4:     assert errors == 'strict'
    4:     output = zlib.compress(input)
    4:     return (output, len(input))
       
    1: def zlib_decode(input,errors='strict'):
       
           """ Decodes the object input and returns a tuple (output
               object, length consumed).
       
               input must be an object which provides the bf_getreadbuf
               buffer slot. Python strings, buffer objects and memory
               mapped files are examples of objects providing this slot.
       
               errors defines the error handling to apply. It defaults to
               'strict' handling which is the only currently supported
               error handling for this codec.
       
           """
    5:     assert errors == 'strict'
    5:     output = zlib.decompress(input)
    4:     return (output, len(input))
       
    2: class Codec(codecs.Codec):
       
    1:     def encode(self, input, errors='strict'):
>>>>>>         return zlib_encode(input, errors)
    1:     def decode(self, input, errors='strict'):
>>>>>>         return zlib_decode(input, errors)
       
    2: class IncrementalEncoder(codecs.IncrementalEncoder):
    1:     def __init__(self, errors='strict'):
    4:         assert errors == 'strict'
    4:         self.errors = errors
    4:         self.compressobj = zlib.compressobj()
       
    1:     def encode(self, input, final=False):
   22:         if final:
    4:             c = self.compressobj.compress(input)
    4:             return c + self.compressobj.flush()
               else:
   18:             return self.compressobj.compress(input)
       
    1:     def reset(self):
>>>>>>         self.compressobj = zlib.compressobj()
       
    2: class IncrementalDecoder(codecs.IncrementalDecoder):
    1:     def __init__(self, errors='strict'):
    4:         assert errors == 'strict'
    4:         self.errors = errors
    4:         self.decompressobj = zlib.decompressobj()
       
    1:     def decode(self, input, final=False):
   35:         if final:
    4:             c = self.decompressobj.decompress(input)
    4:             return c + self.decompressobj.flush()
               else:
   31:             return self.decompressobj.decompress(input)
       
    1:     def reset(self):
>>>>>>         self.decompressobj = zlib.decompressobj()
       
    2: class StreamWriter(Codec,codecs.StreamWriter):
    1:     pass
       
    2: class StreamReader(Codec,codecs.StreamReader):
    1:     pass
       
       ### encodings module API
       
    1: def getregentry():
    2:     return codecs.CodecInfo(
    2:         name='zlib',
    2:         encode=zlib_encode,
    2:         decode=zlib_decode,
    2:         incrementalencoder=IncrementalEncoder,
    2:         incrementaldecoder=IncrementalDecoder,
    2:         streamreader=StreamReader,
    2:         streamwriter=StreamWriter,
    2:         _is_text_encoding=False,
           )
