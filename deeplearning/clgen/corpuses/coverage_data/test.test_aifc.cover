    1: from test.test_support import (findfile, TESTFN, unlink, captured_stdout,
                                      run_unittest)
    1: import unittest
    1: from test import audiotests
    1: import os
    1: import io
    1: import sys
    1: import struct
    1: import aifc
       
       
    2: class AifcTest(audiotests.AudioWriteTests,
    1:                audiotests.AudioTestsWithSourceFile):
    1:     module = aifc
    1:     close_fd = True
    1:     test_unseekable_read = None
       
       
    2: class AifcPCM8Test(AifcTest, unittest.TestCase):
    1:     sndfilename = 'pluck-pcm8.aiff'
    1:     sndfilenframes = 3307
    1:     nchannels = 2
    1:     sampwidth = 1
    1:     framerate = 11025
    1:     nframes = 48
    1:     comptype = 'NONE'
    1:     compname = 'not compressed'
    1:     frames = audiotests.fromhex("""\
             02FF 4B00 3104 8008 CB06 4803 BF01 03FE B8FA B4F3 29EB 1AE6 \
             EDE4 C6E2 0EE0 EFE0 57E2 FBE8 13EF D8F7 97FB F5FC 08FB DFFB \
             11FA 3EFB BCFC 66FF CF04 4309 C10E 5112 EE17 8216 7F14 8012 \
             490E 520D EF0F CE0F E40C 630A 080A 2B0B 510E 8B11 B60E 440A \
    1:       """)
       
       
    2: class AifcPCM16Test(AifcTest, unittest.TestCase):
    1:     sndfilename = 'pluck-pcm16.aiff'
    1:     sndfilenframes = 3307
    1:     nchannels = 2
    1:     sampwidth = 2
    1:     framerate = 11025
    1:     nframes = 48
    1:     comptype = 'NONE'
    1:     compname = 'not compressed'
    1:     frames = audiotests.fromhex("""\
             022EFFEA 4B5D00F6 311804EA 80E10840 CBE106B1 48A903F5 BFE601B2 036CFE7B \
             B858FA3E B4B1F34F 299AEBCA 1A5DE6DA EDFAE491 C628E275 0E09E0B5 EF2AE029 \
             5758E271 FB35E83F 1376EF86 D82BF727 9790FB76 F5FAFC0F 0867FB9C DF30FB43 \
             117EFA36 3EE5FB5B BC79FCB1 66D9FF5D CF150412 431D097C C1BA0EC8 512112A1 \
             EEE21753 82071665 7FFF1443 8004128F 49A20EAF 52BB0DBA EFB40F60 CE3C0FBF \
             E4B30CEC 63430A5C 08C80A20 2BBB0B08 514A0E43 8BCF1139 B6F60EEB 44120A5E \
    1:       """)
       
       
    2: class AifcPCM24Test(AifcTest, unittest.TestCase):
    1:     sndfilename = 'pluck-pcm24.aiff'
    1:     sndfilenframes = 3307
    1:     nchannels = 2
    1:     sampwidth = 3
    1:     framerate = 11025
    1:     nframes = 48
    1:     comptype = 'NONE'
    1:     compname = 'not compressed'
    1:     frames = audiotests.fromhex("""\
             022D65FFEB9D 4B5A0F00FA54 3113C304EE2B 80DCD6084303 \
             CBDEC006B261 48A99803F2F8 BFE82401B07D 036BFBFE7B5D \
             B85756FA3EC9 B4B055F3502B 299830EBCB62 1A5CA7E6D99A \
             EDFA3EE491BD C625EBE27884 0E05A9E0B6CF EF2929E02922 \
             5758D8E27067 FB3557E83E16 1377BFEF8402 D82C5BF7272A \
             978F16FB7745 F5F865FC1013 086635FB9C4E DF30FCFB40EE \
             117FE0FA3438 3EE6B8FB5AC3 BC77A3FCB2F4 66D6DAFF5F32 \
             CF13B9041275 431D69097A8C C1BB600EC74E 5120B912A2BA \
             EEDF641754C0 8207001664B7 7FFFFF14453F 8000001294E6 \
             499C1B0EB3B2 52B73E0DBCA0 EFB2B20F5FD8 CE3CDB0FBE12 \
             E4B49C0CEA2D 6344A80A5A7C 08C8FE0A1FFE 2BB9860B0A0E \
             51486F0E44E1 8BCC64113B05 B6F4EC0EEB36 4413170A5B48 \
    1:       """)
       
       
    2: class AifcPCM32Test(AifcTest, unittest.TestCase):
    1:     sndfilename = 'pluck-pcm32.aiff'
    1:     sndfilenframes = 3307
    1:     nchannels = 2
    1:     sampwidth = 4
    1:     framerate = 11025
    1:     nframes = 48
    1:     comptype = 'NONE'
    1:     compname = 'not compressed'
    1:     frames = audiotests.fromhex("""\
             022D65BCFFEB9D92 4B5A0F8000FA549C 3113C34004EE2BC0 80DCD680084303E0 \
             CBDEC0C006B26140 48A9980003F2F8FC BFE8248001B07D92 036BFB60FE7B5D34 \
             B8575600FA3EC920 B4B05500F3502BC0 29983000EBCB6240 1A5CA7A0E6D99A60 \
             EDFA3E80E491BD40 C625EB80E27884A0 0E05A9A0E0B6CFE0 EF292940E0292280 \
             5758D800E2706700 FB3557D8E83E1640 1377BF00EF840280 D82C5B80F7272A80 \
             978F1600FB774560 F5F86510FC101364 086635A0FB9C4E20 DF30FC40FB40EE28 \
             117FE0A0FA3438B0 3EE6B840FB5AC3F0 BC77A380FCB2F454 66D6DA80FF5F32B4 \
             CF13B980041275B0 431D6980097A8C00 C1BB60000EC74E00 5120B98012A2BAA0 \
             EEDF64C01754C060 820700001664B780 7FFFFFFF14453F40 800000001294E6E0 \
             499C1B000EB3B270 52B73E000DBCA020 EFB2B2E00F5FD880 CE3CDB400FBE1270 \
             E4B49CC00CEA2D90 6344A8800A5A7CA0 08C8FE800A1FFEE0 2BB986C00B0A0E00 \
             51486F800E44E190 8BCC6480113B0580 B6F4EC000EEB3630 441317800A5B48A0 \
    1:       """)
       
       
    2: class AifcULAWTest(AifcTest, unittest.TestCase):
    1:     sndfilename = 'pluck-ulaw.aifc'
    1:     sndfilenframes = 3307
    1:     nchannels = 2
    1:     sampwidth = 2
    1:     framerate = 11025
    1:     nframes = 48
    1:     comptype = 'ulaw'
    1:     compname = ''
    1:     frames = audiotests.fromhex("""\
             022CFFE8 497C0104 307C04DC 8284083C CB84069C 497C03DC BE8401AC 036CFE74 \
             B684FA24 B684F344 2A7CEC04 19FCE704 EE04E504 C584E204 0E3CE104 EF04DF84 \
             557CE204 FB24E804 12FCEF04 D784F744 9684FB64 F5C4FC24 083CFBA4 DF84FB24 \
             11FCFA24 3E7CFB64 BA84FCB4 657CFF5C CF84041C 417C093C C1840EBC 517C12FC \
             EF0416FC 828415FC 7D7C13FC 828412FC 497C0EBC 517C0DBC F0040F3C CD840FFC \
             E5040CBC 617C0A3C 08BC0A3C 2C7C0B3C 517C0E3C 8A8410FC B6840EBC 457C0A3C \
    1:       """)
    1:     if sys.byteorder != 'big':
    1:         frames = audiotests.byteswap2(frames)
       
       
    2: class AifcMiscTest(audiotests.AudioTests, unittest.TestCase):
    1:     def test_skipunknown(self):
               #Issue 2245
               #This file contains chunk types aifc doesn't recognize.
    1:         self.f = aifc.open(findfile('Sine-1000Hz-300ms.aif'))
       
    1:     def test_close_opened_files_on_error(self):
    1:         non_aifc_file = findfile('pluck-pcm8.wav', subdir='audiodata')
       
    2:         class Aifc(aifc.Aifc_read):
    1:             def __init__(self):
    1:                 pass
       
    1:         a = Aifc()
    1:         with self.assertRaises(aifc.Error):
    1:             aifc.Aifc_read.__init__(a, non_aifc_file)
    1:         self.assertTrue(a._file.closed)
       
    1:     def test_write_markers_values(self):
    1:         fout = aifc.open(io.BytesIO(), 'wb')
    1:         self.assertEqual(fout.getmarkers(), None)
    1:         fout.setmark(1, 0, 'foo1')
    1:         fout.setmark(1, 1, 'foo2')
    1:         self.assertEqual(fout.getmark(1), (1, 1, 'foo2'))
    1:         self.assertEqual(fout.getmarkers(), [(1, 1, 'foo2')])
    1:         fout.initfp(None)
       
    1:     def test_read_markers(self):
    1:         fout = self.fout = aifc.open(TESTFN, 'wb')
    1:         fout.aiff()
    1:         fout.setparams((1, 1, 1, 1, 'NONE', ''))
    1:         fout.setmark(1, 0, 'odd')
    1:         fout.setmark(2, 0, 'even')
    1:         fout.writeframes('\x00')
    1:         fout.close()
    1:         f = self.f = aifc.open(TESTFN, 'rb')
    1:         self.assertEqual(f.getmarkers(), [(1, 0, 'odd'), (2, 0, 'even')])
    1:         self.assertEqual(f.getmark(1), (1, 0, 'odd'))
    1:         self.assertEqual(f.getmark(2), (2, 0, 'even'))
    1:         self.assertRaises(aifc.Error, f.getmark, 3)
       
       
    2: class AIFCLowLevelTest(unittest.TestCase):
       
    1:     def test_read_written(self):
    1:         def read_written(self, what):
   25:             f = io.BytesIO()
   25:             getattr(aifc, '_write_' + what)(f, x)
   25:             f.seek(0)
   25:             return getattr(aifc, '_read_' + what)(f)
    5:         for x in (-1, 0, 0.1, 1):
    4:             self.assertEqual(read_written(x, 'float'), x)
    3:         for x in (float('NaN'), float('Inf')):
    2:             self.assertEqual(read_written(x, 'float'), aifc._HUGE_VAL)
    4:         for x in ('', 'foo', 'a' * 255):
    3:             self.assertEqual(read_written(x, 'string'), x)
    6:         for x in (-0x7FFFFFFF, -1, 0, 1, 0x7FFFFFFF):
    5:             self.assertEqual(read_written(x, 'long'), x)
    4:         for x in (0, 1, 0xFFFFFFFF):
    3:             self.assertEqual(read_written(x, 'ulong'), x)
    6:         for x in (-0x7FFF, -1, 0, 1, 0x7FFF):
    5:             self.assertEqual(read_written(x, 'short'), x)
    4:         for x in (0, 1, 0xFFFF):
    3:             self.assertEqual(read_written(x, 'ushort'), x)
       
    1:     def test_read_raises(self):
    1:         f = io.BytesIO('\x00')
    1:         self.assertRaises(EOFError, aifc._read_ulong, f)
    1:         self.assertRaises(EOFError, aifc._read_long, f)
    1:         self.assertRaises(EOFError, aifc._read_ushort, f)
    1:         self.assertRaises(EOFError, aifc._read_short, f)
       
    1:     def test_write_long_string_raises(self):
    1:         f = io.BytesIO()
    1:         with self.assertRaises(ValueError):
    1:             aifc._write_string(f, 'too long' * 255)
       
    1:     def test_wrong_open_mode(self):
    1:         with self.assertRaises(aifc.Error):
    1:             aifc.open(TESTFN, 'wrong_mode')
       
    1:     def test_read_wrong_form(self):
    1:         b1 = io.BytesIO('WRNG' + struct.pack('>L', 0))
    1:         b2 = io.BytesIO('FORM' + struct.pack('>L', 4) + 'WRNG')
    1:         self.assertRaises(aifc.Error, aifc.open, b1)
    1:         self.assertRaises(aifc.Error, aifc.open, b2)
       
    1:     def test_read_no_comm_chunk(self):
    1:         b = io.BytesIO('FORM' + struct.pack('>L', 4) + 'AIFF')
    1:         self.assertRaises(aifc.Error, aifc.open, b)
       
    1:     def test_read_wrong_compression_type(self):
    1:         b = 'FORM' + struct.pack('>L', 4) + 'AIFC'
    1:         b += 'COMM' + struct.pack('>LhlhhLL', 23, 0, 0, 0, 0, 0, 0)
    1:         b += 'WRNG' + struct.pack('B', 0)
    1:         self.assertRaises(aifc.Error, aifc.open, io.BytesIO(b))
       
    1:     def test_read_wrong_marks(self):
    1:         b = 'FORM' + struct.pack('>L', 4) + 'AIFF'
    1:         b += 'COMM' + struct.pack('>LhlhhLL', 18, 0, 0, 0, 0, 0, 0)
    1:         b += 'SSND' + struct.pack('>L', 8) + '\x00' * 8
    1:         b += 'MARK' + struct.pack('>LhB', 3, 1, 1)
    1:         with captured_stdout() as s:
    1:             f = aifc.open(io.BytesIO(b))
    1:         self.assertEqual(s.getvalue(), 'Warning: MARK chunk contains '
                                              'only 0 markers instead of 1\n')
    1:         self.assertEqual(f.getmarkers(), None)
       
    1:     def test_read_comm_kludge_compname_even(self):
    1:         b = 'FORM' + struct.pack('>L', 4) + 'AIFC'
    1:         b += 'COMM' + struct.pack('>LhlhhLL', 18, 0, 0, 0, 0, 0, 0)
    1:         b += 'NONE' + struct.pack('B', 4) + 'even' + '\x00'
    1:         b += 'SSND' + struct.pack('>L', 8) + '\x00' * 8
    1:         with captured_stdout() as s:
    1:             f = aifc.open(io.BytesIO(b))
    1:         self.assertEqual(s.getvalue(), 'Warning: bad COMM chunk size\n')
    1:         self.assertEqual(f.getcompname(), 'even')
       
    1:     def test_read_comm_kludge_compname_odd(self):
    1:         b = 'FORM' + struct.pack('>L', 4) + 'AIFC'
    1:         b += 'COMM' + struct.pack('>LhlhhLL', 18, 0, 0, 0, 0, 0, 0)
    1:         b += 'NONE' + struct.pack('B', 3) + 'odd'
    1:         b += 'SSND' + struct.pack('>L', 8) + '\x00' * 8
    1:         with captured_stdout() as s:
    1:             f = aifc.open(io.BytesIO(b))
    1:         self.assertEqual(s.getvalue(), 'Warning: bad COMM chunk size\n')
    1:         self.assertEqual(f.getcompname(), 'odd')
       
    1:     def test_write_params_raises(self):
    1:         fout = aifc.open(io.BytesIO(), 'wb')
    1:         wrong_params = (0, 0, 0, 0, 'WRNG', '')
    1:         self.assertRaises(aifc.Error, fout.setparams, wrong_params)
    1:         self.assertRaises(aifc.Error, fout.getparams)
    1:         self.assertRaises(aifc.Error, fout.setnchannels, 0)
    1:         self.assertRaises(aifc.Error, fout.getnchannels)
    1:         self.assertRaises(aifc.Error, fout.setsampwidth, 0)
    1:         self.assertRaises(aifc.Error, fout.getsampwidth)
    1:         self.assertRaises(aifc.Error, fout.setframerate, 0)
    1:         self.assertRaises(aifc.Error, fout.getframerate)
    1:         self.assertRaises(aifc.Error, fout.setcomptype, 'WRNG', '')
    1:         fout.aiff()
    1:         fout.setnchannels(1)
    1:         fout.setsampwidth(1)
    1:         fout.setframerate(1)
    1:         fout.setnframes(1)
    1:         fout.writeframes('\x00')
    1:         self.assertRaises(aifc.Error, fout.setparams, (1, 1, 1, 1, 1, 1))
    1:         self.assertRaises(aifc.Error, fout.setnchannels, 1)
    1:         self.assertRaises(aifc.Error, fout.setsampwidth, 1)
    1:         self.assertRaises(aifc.Error, fout.setframerate, 1)
    1:         self.assertRaises(aifc.Error, fout.setnframes, 1)
    1:         self.assertRaises(aifc.Error, fout.setcomptype, 'NONE', '')
    1:         self.assertRaises(aifc.Error, fout.aiff)
    1:         self.assertRaises(aifc.Error, fout.aifc)
       
    1:     def test_write_params_singles(self):
    1:         fout = aifc.open(io.BytesIO(), 'wb')
    1:         fout.aifc()
    1:         fout.setnchannels(1)
    1:         fout.setsampwidth(2)
    1:         fout.setframerate(3)
    1:         fout.setnframes(4)
    1:         fout.setcomptype('NONE', 'name')
    1:         self.assertEqual(fout.getnchannels(), 1)
    1:         self.assertEqual(fout.getsampwidth(), 2)
    1:         self.assertEqual(fout.getframerate(), 3)
    1:         self.assertEqual(fout.getnframes(), 0)
    1:         self.assertEqual(fout.tell(), 0)
    1:         self.assertEqual(fout.getcomptype(), 'NONE')
    1:         self.assertEqual(fout.getcompname(), 'name')
    1:         fout.writeframes('\x00' * 4 * fout.getsampwidth() * fout.getnchannels())
    1:         self.assertEqual(fout.getnframes(), 4)
    1:         self.assertEqual(fout.tell(), 4)
       
    1:     def test_write_params_bunch(self):
    1:         fout = aifc.open(io.BytesIO(), 'wb')
    1:         fout.aifc()
    1:         p = (1, 2, 3, 4, 'NONE', 'name')
    1:         fout.setparams(p)
    1:         self.assertEqual(fout.getparams(), p)
    1:         fout.initfp(None)
       
    1:     def test_write_header_raises(self):
    1:         fout = aifc.open(io.BytesIO(), 'wb')
    1:         self.assertRaises(aifc.Error, fout.close)
    1:         fout = aifc.open(io.BytesIO(), 'wb')
    1:         fout.setnchannels(1)
    1:         self.assertRaises(aifc.Error, fout.close)
    1:         fout = aifc.open(io.BytesIO(), 'wb')
    1:         fout.setnchannels(1)
    1:         fout.setsampwidth(1)
    1:         self.assertRaises(aifc.Error, fout.close)
       
    1:     def test_write_header_comptype_raises(self):
    6:         for comptype in ('ULAW', 'ulaw', 'ALAW', 'alaw', 'G722'):
    5:             fout = aifc.open(io.BytesIO(), 'wb')
    5:             fout.setsampwidth(1)
    5:             fout.setcomptype(comptype, '')
    5:             self.assertRaises(aifc.Error, fout.close)
    5:             fout.initfp(None)
       
    1:     def test_write_markers_raises(self):
    1:         fout = aifc.open(io.BytesIO(), 'wb')
    1:         self.assertRaises(aifc.Error, fout.setmark, 0, 0, '')
    1:         self.assertRaises(aifc.Error, fout.setmark, 1, -1, '')
    1:         self.assertRaises(aifc.Error, fout.setmark, 1, 0, None)
    1:         self.assertRaises(aifc.Error, fout.getmark, 1)
    1:         fout.initfp(None)
       
    1:     def test_write_aiff_by_extension(self):
    1:         sampwidth = 2
    1:         filename = TESTFN + '.aiff'
    1:         self.addCleanup(unlink, filename)
       
    1:         fout = self.fout = aifc.open(filename, 'wb')
    1:         fout.setparams((1, sampwidth, 1, 1, 'ULAW', ''))
    1:         frames = '\x00' * fout.getnchannels() * sampwidth
    1:         fout.writeframes(frames)
    1:         fout.close()
       
    1:         f = self.f = aifc.open(filename, 'rb')
    1:         self.assertEqual(f.getcomptype(), 'NONE')
    1:         f.close()
       
       
    1: def test_main():
    1:     run_unittest(AifcPCM8Test, AifcPCM16Test, AifcPCM16Test, AifcPCM24Test,
    1:                  AifcPCM32Test, AifcULAWTest,
    1:                  AifcMiscTest, AIFCLowLevelTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
