       # Copyright (C) 2002-2006 Python Software Foundation
       # Author: Ben Gertzfield
       # Contact: email-sig@python.org
       
       """Base64 content transfer encoding per RFCs 2045-2047.
       
       This module handles the content transfer encoding method defined in RFC 2045
       to encode arbitrary 8-bit data using the three 8-bit bytes in four 7-bit
       characters encoding known as Base64.
       
       It is used in the MIME standards for email to attach images, audio, and text
       using some 8-bit character sets to messages.
       
       This module provides an interface to encode and decode both headers and bodies
       with Base64 encoding.
       
       RFC 2045 defines a method for including character set information in an
       `encoded-word' in a header.  This method is commonly used for 8-bit real names
       in To:, From:, Cc:, etc. fields, as well as Subject: lines.
       
       This module does not do the line wrapping or end-of-line character conversion
       necessary for proper internationalized headers; it only does dumb encoding and
       decoding.  To deal with the various line wrapping issues, use the email.header
       module.
    1: """
       
       __all__ = [
    1:     'base64_len',
    1:     'body_decode',
    1:     'body_encode',
    1:     'decode',
    1:     'decodestring',
    1:     'encode',
    1:     'encodestring',
    1:     'header_encode',
           ]
       
       
    1: from binascii import b2a_base64, a2b_base64
    1: from email.utils import fix_eols
       
    1: CRLF = '\r\n'
    1: NL = '\n'
    1: EMPTYSTRING = ''
       
       # See also Charset.py
    1: MISC_LEN = 7
       
       
       
       # Helpers
    1: def base64_len(s):
           """Return the length of s when it is encoded with base64."""
  753:     groups_of_3, leftover = divmod(len(s), 3)
           # 4 bytes out for each 3 bytes (or nonzero fraction thereof) in.
           # Thanks, Tim!
  753:     n = groups_of_3 * 4
  753:     if leftover:
  332:         n += 4
  753:     return n
       
       
       
    1: def header_encode(header, charset='iso-8859-1', keep_eols=False,
    1:                   maxlinelen=76, eol=NL):
           """Encode a single header line with Base64 encoding in a given charset.
       
           Defined in RFC 2045, this Base64 encoding is identical to normal Base64
           encoding, except that each line must be intelligently wrapped (respecting
           the Base64 encoding), and subsequent lines must start with a space.
       
           charset names the character set to use to encode the header.  It defaults
           to iso-8859-1.
       
           End-of-line characters (\\r, \\n, \\r\\n) will be automatically converted
           to the canonical email line separator \\r\\n unless the keep_eols
           parameter is True (the default is False).
       
           Each line of the header will be terminated in the value of eol, which
           defaults to "\\n".  Set this to "\\r\\n" if you are using the result of
           this function directly in email.
       
           The resulting string will be in the form:
       
           "=?charset?b?WW/5ciBtYXp66XLrIHf8eiBhIGhhbXBzdGHuciBBIFlv+XIgbWF6euly?=\\n
             =?charset?b?6yB3/HogYSBoYW1wc3Rh7nIgQkMgWW/5ciBtYXp66XLrIHf8eiBhIGhh?="
       
           with each line wrapped at, at most, maxlinelen characters (defaults to 76
           characters).
           """
           # Return empty headers unchanged
   98:     if not header:
>>>>>>         return header
       
   98:     if not keep_eols:
   95:         header = fix_eols(header)
       
           # Base64 encode each line, in encoded chunks no greater than maxlinelen in
           # length, after the RFC chrome is added in.
   98:     base64ed = []
   98:     max_encoded = maxlinelen - len(charset) - MISC_LEN
   98:     max_unencoded = max_encoded * 3 // 4
       
  226:     for i in range(0, len(header), max_unencoded):
  128:         base64ed.append(b2a_base64(header[i:i+max_unencoded]))
       
           # Now add the RFC chrome to each encoded chunk
   98:     lines = []
  226:     for line in base64ed:
               # Ignore the last character of each line if it is a newline
  128:         if line.endswith(NL):
  128:             line = line[:-1]
               # Add the chrome
  128:         lines.append('=?%s?b?%s?=' % (charset, line))
           # Glue the lines together and return it.  BAW: should we be able to
           # specify the leading whitespace in the joiner?
   98:     joiner = eol + ' '
   98:     return joiner.join(lines)
       
       
       
    1: def encode(s, binary=True, maxlinelen=76, eol=NL):
           """Encode a string with base64.
       
           Each line will be wrapped at, at most, maxlinelen characters (defaults to
           76 characters).
       
           If binary is False, end-of-line characters will be converted to the
           canonical email end-of-line sequence \\r\\n.  Otherwise they will be left
           verbatim (this is the default).
       
           Each line of encoded text will end with eol, which defaults to "\\n".  Set
           this to "\\r\\n" if you will be using the result of this function directly
           in an email.
           """
   32:     if not s:
    3:         return s
       
   29:     if not binary:
    3:         s = fix_eols(s)
       
   29:     encvec = []
   29:     max_unencoded = maxlinelen * 3 // 4
   76:     for i in range(0, len(s), max_unencoded):
               # BAW: should encode() inherit b2a_base64()'s dubious behavior in
               # adding a newline to the encoded string?
   47:         enc = b2a_base64(s[i:i + max_unencoded])
   47:         if enc.endswith(NL) and eol != NL:
   19:             enc = enc[:-1] + eol
   47:         encvec.append(enc)
   29:     return EMPTYSTRING.join(encvec)
       
       
       # For convenience and backwards compatibility w/ standard base64 module
    1: body_encode = encode
    1: encodestring = encode
       
       
       
    1: def decode(s, convert_eols=None):
           """Decode a raw base64 string.
       
           If convert_eols is set to a string value, all canonical email linefeeds,
           e.g. "\\r\\n", in the decoded text will be converted to the value of
           convert_eols.  os.linesep is a good choice for convert_eols if you are
           decoding a text attachment.
       
           This function does not parse a full MIME header value encoded with
           base64 (like =?iso-8859-1?b?bmloISBuaWgh?=) -- please use the high
           level email.header class for that functionality.
           """
   73:     if not s:
    3:         return s
       
   70:     dec = a2b_base64(s)
   67:     if convert_eols:
    6:         return dec.replace(CRLF, convert_eols)
   61:     return dec
       
       
       # For convenience and backwards compatibility w/ standard base64 module
    1: body_decode = decode
    1: decodestring = decode
