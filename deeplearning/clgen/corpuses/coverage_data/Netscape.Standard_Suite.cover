       """Suite Standard Suite: Common terms for most applications
       Level 1, version 1
       
       Generated from /Volumes/Sap/Applications (Mac OS 9)/Netscape Communicator\xe2\x84\xa2 Folder/Netscape Communicator\xe2\x84\xa2
       AETE/AEUT resource version 1/0, language 0, script 0
    1: """
       
    1: import aetools
    1: import MacOS
       
    1: _code = 'CoRe'
       
    1: from StdSuites.Standard_Suite import *
    2: class Standard_Suite_Events(Standard_Suite_Events):
       
    1:     def close(self, _object, _attributes={}, **_arguments):
               """close: Close an object
               Required argument: the objects to close
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'clos'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def data_size(self, _object, _attributes={}, **_arguments):
               """data size: Return the size in bytes of an object
               Required argument: the object whose data size is to be returned
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: the size of the object in bytes
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'dsiz'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def get(self, _object, _attributes={}, **_arguments):
               """get: Get the data for an object
               Required argument: the object whose data is to be returned
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: The data from the object
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'getd'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_set = {
    1:         'to' : 'data',
           }
       
    1:     def set(self, _object, _attributes={}, **_arguments):
               """set: Set an object\xd5s data
               Required argument: the object to change
               Keyword argument to: the new value
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'setd'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_set)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
       
    2: class application(aetools.ComponentItem):
    1:     """application - An application program """
    1:     want = 'capp'
    2: class _Prop_alert_application(aetools.NProperty):
    1:     """alert application - Most of the alerts will be sent to this application using yet unspecified AE interface. We need a few alert boxes: alert, confirm and notify. Any ideas on how to design this event? mailto:atotic@netscape.com. I\xd5d like to conform to the standard. """
    1:     which = 'ALAP'
    1:     want = 'type'
    1: alert_application = _Prop_alert_application()
    2: class _Prop_kiosk_mode(aetools.NProperty):
    1:     """kiosk mode - Kiosk mode leaves very few menus enabled """
    1:     which = 'KOSK'
    1:     want = 'long'
    1: kiosk_mode = _Prop_kiosk_mode()
       #        element 'cwin' as ['indx', 'name', 'ID  ']
       
    2: class window(aetools.ComponentItem):
    1:     """window - A Window """
    1:     want = 'cwin'
    2: class _Prop_URL(aetools.NProperty):
    1:     """URL - Current URL """
    1:     which = 'curl'
    1:     want = 'TEXT'
    2: class _Prop_bounds(aetools.NProperty):
    1:     """bounds - the boundary rectangle for the window """
    1:     which = 'pbnd'
    1:     want = 'qdrt'
    2: class _Prop_busy(aetools.NProperty):
    1:     """busy - Is window loading something right now. 2, window is busy and will reject load requests. 1, window is busy, but will interrupt outstanding loads """
    1:     which = 'busy'
    1:     want = 'long'
    2: class _Prop_closeable(aetools.NProperty):
    1:     """closeable - Does the window have a close box? """
    1:     which = 'hclb'
    1:     want = 'bool'
    2: class _Prop_floating(aetools.NProperty):
    1:     """floating - Does the window float? """
    1:     which = 'isfl'
    1:     want = 'bool'
    2: class _Prop_index(aetools.NProperty):
    1:     """index - the number of the window """
    1:     which = 'pidx'
    1:     want = 'long'
    2: class _Prop_modal(aetools.NProperty):
    1:     """modal - Is the window modal? """
    1:     which = 'pmod'
    1:     want = 'bool'
    2: class _Prop_name(aetools.NProperty):
    1:     """name - the title of the window """
    1:     which = 'pnam'
    1:     want = 'itxt'
    2: class _Prop_position(aetools.NProperty):
    1:     """position - upper left coordinates of window """
    1:     which = 'ppos'
    1:     want = 'QDpt'
    2: class _Prop_resizable(aetools.NProperty):
    1:     """resizable - Is the window resizable? """
    1:     which = 'prsz'
    1:     want = 'bool'
    2: class _Prop_titled(aetools.NProperty):
    1:     """titled - Does the window have a title bar? """
    1:     which = 'ptit'
    1:     want = 'bool'
    2: class _Prop_unique_ID(aetools.NProperty):
    1:     """unique ID - Window\xd5s unique ID (a bridge between WWW! suite window id\xd5s and standard AE windows) """
    1:     which = 'wiid'
    1:     want = 'long'
    2: class _Prop_visible(aetools.NProperty):
    1:     """visible - is the window visible? """
    1:     which = 'pvis'
    1:     want = 'bool'
    2: class _Prop_zoomable(aetools.NProperty):
    1:     """zoomable - Is the window zoomable? """
    1:     which = 'iszm'
    1:     want = 'bool'
    2: class _Prop_zoomed(aetools.NProperty):
    1:     """zoomed - Is the window zoomed? """
    1:     which = 'pzum'
    1:     want = 'bool'
    1: application._superclassnames = []
    1: application._privpropdict = {
    1:     'alert_application' : _Prop_alert_application,
    1:     'kiosk_mode' : _Prop_kiosk_mode,
       }
    1: application._privelemdict = {
    1:     'window' : window,
       }
    1: window._superclassnames = []
    1: window._privpropdict = {
    1:     'URL' : _Prop_URL,
    1:     'bounds' : _Prop_bounds,
    1:     'busy' : _Prop_busy,
    1:     'closeable' : _Prop_closeable,
    1:     'floating' : _Prop_floating,
    1:     'index' : _Prop_index,
    1:     'modal' : _Prop_modal,
    1:     'name' : _Prop_name,
    1:     'position' : _Prop_position,
    1:     'resizable' : _Prop_resizable,
    1:     'titled' : _Prop_titled,
    1:     'unique_ID' : _Prop_unique_ID,
    1:     'visible' : _Prop_visible,
    1:     'zoomable' : _Prop_zoomable,
    1:     'zoomed' : _Prop_zoomed,
       }
    1: window._privelemdict = {
       }
       
       #
       # Indices of types declared in this module
       #
    1: _classdeclarations = {
    1:     'capp' : application,
    1:     'cwin' : window,
       }
       
    1: _propdeclarations = {
    1:     'ALAP' : _Prop_alert_application,
    1:     'KOSK' : _Prop_kiosk_mode,
    1:     'busy' : _Prop_busy,
    1:     'curl' : _Prop_URL,
    1:     'hclb' : _Prop_closeable,
    1:     'isfl' : _Prop_floating,
    1:     'iszm' : _Prop_zoomable,
    1:     'pbnd' : _Prop_bounds,
    1:     'pidx' : _Prop_index,
    1:     'pmod' : _Prop_modal,
    1:     'pnam' : _Prop_name,
    1:     'ppos' : _Prop_position,
    1:     'prsz' : _Prop_resizable,
    1:     'ptit' : _Prop_titled,
    1:     'pvis' : _Prop_visible,
    1:     'pzum' : _Prop_zoomed,
    1:     'wiid' : _Prop_unique_ID,
       }
       
    1: _compdeclarations = {
       }
       
    1: _enumdeclarations = {
       }
