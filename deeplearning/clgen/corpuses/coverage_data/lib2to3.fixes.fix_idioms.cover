       """Adjust some old Python 2 idioms to their modern counterparts.
       
       * Change some type comparisons to isinstance() calls:
           type(x) == T -> isinstance(x, T)
           type(x) is T -> isinstance(x, T)
           type(x) != T -> not isinstance(x, T)
           type(x) is not T -> not isinstance(x, T)
       
       * Change "while 1:" into "while True:".
       
       * Change both
       
           v = list(EXPR)
           v.sort()
           foo(v)
       
       and the more general
       
           v = EXPR
           v.sort()
           foo(v)
       
       into
       
           v = sorted(EXPR)
           foo(v)
    1: """
       # Author: Jacques Frechet, Collin Winter
       
       # Local imports
    1: from .. import fixer_base
    1: from ..fixer_util import Call, Comma, Name, Node, BlankLine, syms
       
    1: CMP = "(n='!=' | '==' | 'is' | n=comp_op< 'is' 'not' >)"
    1: TYPE = "power< 'type' trailer< '(' x=any ')' > >"
       
    2: class FixIdioms(fixer_base.BaseFix):
    1:     explicit = True # The user must ask for this fixer
       
           PATTERN = r"""
               isinstance=comparison< %s %s T=any >
               |
               isinstance=comparison< T=any %s %s >
               |
               while_stmt< 'while' while='1' ':' any+ >
               |
               sorted=any<
                   any*
                   simple_stmt<
                     expr_stmt< id1=any '='
                                power< list='list' trailer< '(' (not arglist<any+>) any ')' > >
                     >
                     '\n'
                   >
                   sort=
                   simple_stmt<
                     power< id2=any
                            trailer< '.' 'sort' > trailer< '(' ')' >
                     >
                     '\n'
                   >
                   next=any*
               >
               |
               sorted=any<
                   any*
                   simple_stmt< expr_stmt< id1=any '=' expr=any > '\n' >
                   sort=
                   simple_stmt<
                     power< id2=any
                            trailer< '.' 'sort' > trailer< '(' ')' >
                     >
                     '\n'
                   >
                   next=any*
               >
    1:     """ % (TYPE, CMP, CMP, TYPE)
       
    1:     def match(self, node):
 1095:         r = super(FixIdioms, self).match(node)
               # If we've matched one of the sort/sorted subpatterns above, we
               # want to reject matches where the initial assignment and the
               # subsequent .sort() call involve different identifiers.
 1095:         if r and "sorted" in r:
   16:             if r["id1"] == r["id2"]:
   15:                 return r
    1:             return None
 1079:         return r
       
    1:     def transform(self, node, results):
   42:         if "isinstance" in results:
   24:             return self.transform_isinstance(node, results)
   18:         elif "while" in results:
    3:             return self.transform_while(node, results)
   15:         elif "sorted" in results:
   15:             return self.transform_sort(node, results)
               else:
>>>>>>             raise RuntimeError("Invalid match")
       
    1:     def transform_isinstance(self, node, results):
   24:         x = results["x"].clone() # The thing inside of type()
   24:         T = results["T"].clone() # The type being compared against
   24:         x.prefix = u""
   24:         T.prefix = u" "
   24:         test = Call(Name(u"isinstance"), [x, Comma(), T])
   24:         if "n" in results:
   12:             test.prefix = u" "
   12:             test = Node(syms.not_test, [Name(u"not"), test])
   24:         test.prefix = node.prefix
   24:         return test
       
    1:     def transform_while(self, node, results):
    3:         one = results["while"]
    3:         one.replace(Name(u"True", prefix=one.prefix))
       
    1:     def transform_sort(self, node, results):
   15:         sort_stmt = results["sort"]
   15:         next_stmt = results["next"]
   15:         list_call = results.get("list")
   15:         simple_expr = results.get("expr")
       
   15:         if list_call:
    8:             list_call.replace(Name(u"sorted", prefix=list_call.prefix))
    7:         elif simple_expr:
    7:             new = simple_expr.clone()
    7:             new.prefix = u""
    7:             simple_expr.replace(Call(Name(u"sorted"), [new],
    7:                                      prefix=simple_expr.prefix))
               else:
>>>>>>             raise RuntimeError("should not have reached here")
   15:         sort_stmt.remove()
       
   15:         btwn = sort_stmt.prefix
               # Keep any prefix lines between the sort_stmt and the list_call and
               # shove them right after the sorted() call.
   15:         if u"\n" in btwn:
    4:             if next_stmt:
                       # The new prefix should be everything from the sort_stmt's
                       # prefix up to the last newline, then the old prefix after a new
                       # line.
    4:                 prefix_lines = (btwn.rpartition(u"\n")[0], next_stmt[0].prefix)
    4:                 next_stmt[0].prefix = u"\n".join(prefix_lines)
                   else:
>>>>>>                 assert list_call.parent
>>>>>>                 assert list_call.next_sibling is None
                       # Put a blank line after list_call and set its prefix.
>>>>>>                 end_line = BlankLine()
>>>>>>                 list_call.parent.append_child(end_line)
>>>>>>                 assert list_call.next_sibling is end_line
                       # The new prefix should be everything up to the first new line
                       # of sort_stmt's prefix.
>>>>>>                 end_line.prefix = btwn.rpartition(u"\n")[0]
