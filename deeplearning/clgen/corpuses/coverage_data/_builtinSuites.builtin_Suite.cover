       """Suite builtin_Suite: Every application supports open, reopen, print, run, and quit
       Level 1, version 1
    1: """
       
    1: import aetools
    1: import MacOS
       
    1: _code = 'aevt'
       
    2: class builtin_Suite_Events:
       
    1:     def open(self, _object, _attributes={}, **_arguments):
               """open: Open the specified object(s)
               Required argument: list of objects to open
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'aevt'
>>>>>>         _subcode = 'odoc'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                         _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def run(self, _no_object=None, _attributes={}, **_arguments):
               """run: Run an application.      Most applications will open an empty, untitled window.
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'aevt'
>>>>>>         _subcode = 'oapp'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                         _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def reopen(self, _no_object=None, _attributes={}, **_arguments):
               """reopen: Reactivate a running application.  Some applications will open a new untitled window if no window is open.
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'aevt'
>>>>>>         _subcode = 'rapp'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                         _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def _print(self, _object, _attributes={}, **_arguments):
               """print: Print the specified object(s)
               Required argument: list of objects to print
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'aevt'
>>>>>>         _subcode = 'pdoc'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                         _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_quit = {
    1:             'saving' : 'savo',
           }
       
    1:     def quit(self, _no_object=None, _attributes={}, **_arguments):
               """quit: Quit an application
               Keyword argument saving: specifies whether to save currently open documents
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'aevt'
>>>>>>         _subcode = 'quit'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_quit)
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
>>>>>>         aetools.enumsubst(_arguments, 'savo', _Enum_savo)
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                         _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_close = {
    1:             'saving' : 'savo',
    1:             'saving_in' : 'kfil',
           }
       
    1: _Enum_savo = {
    1:         'yes' : 'yes ', # Save objects now
    1:         'no' : 'no      ',      # Do not save objects
    1:         'ask' : 'ask ', # Ask the user whether to save
       }
       
       #
       # Indices of types declared in this module
       #
    1: _classdeclarations = {
       }
       
    1: _propdeclarations = {
       }
       
    1: _compdeclarations = {
       }
       
    1: _enumdeclarations = {
    1:         'savo' : _Enum_savo,
       }
