    1: import test.test_support, unittest
       
    2: class PowTest(unittest.TestCase):
       
    1:     def powtest(self, type):
    3:         if type != float:
 4002:             for i in range(-1000, 1000):
 4000:                 self.assertEqual(pow(type(i), 0), 1)
 4000:                 self.assertEqual(pow(type(i), 1), type(i))
 4000:                 self.assertEqual(pow(type(0), 1), type(0))
 4000:                 self.assertEqual(pow(type(1), 1), type(1))
       
  402:             for i in range(-100, 100):
  400:                 self.assertEqual(pow(type(i), 3), i*i*i)
       
    2:             pow2 = 1
   64:             for i in range(0,31):
   62:                 self.assertEqual(pow(2, i), pow2)
   62:                 if i != 30 : pow2 = pow2*2
       
    6:             for othertype in int, long:
   80:                 for i in range(-10, 0) + range(1, 10):
   76:                     ii = type(i)
  836:                     for j in range(1, 11):
  760:                         jj = -othertype(j)
  760:                         pow(ii, jj)
       
   12:         for othertype in int, long, float:
  900:             for i in range(1, 100):
  891:                 zero = type(0)
  891:                 exp = -othertype(i/10.0)
  891:                 if exp == 0:
   54:                     continue
  837:                 self.assertRaises(ZeroDivisionError, pow, zero, exp)
       
    3:         il, ih = -20, 20
    3:         jl, jh = -5,   5
    3:         kl, kh = -10, 10
    3:         asseq = self.assertEqual
    3:         if type == float:
    1:             il = 1
    1:             asseq = self.assertAlmostEqual
    2:         elif type == int:
    1:             jl = 0
    1:         elif type == long:
    1:             jl, jh = 0, 15
  105:         for i in range(il, ih+1):
 1224:             for j in range(jl, jh+1):
24684:                 for k in range(kl, kh+1):
23562:                     if k != 0:
22440:                         if type == float or j < 0:
 4400:                             self.assertRaises(TypeError, pow, type(i), j, k)
 4400:                             continue
18040:                         asseq(
18040:                             pow(type(i),j,k),
18040:                             pow(type(i),j)% type(k)
                               )
       
    1:     def test_powint(self):
    1:         self.powtest(int)
       
    1:     def test_powlong(self):
    1:         self.powtest(long)
       
    1:     def test_powfloat(self):
    1:         self.powtest(float)
       
    1:     def test_other(self):
               # Other tests-- not very systematic
    1:         self.assertEqual(pow(3,3) % 8, pow(3,3,8))
    1:         self.assertEqual(pow(3,3) % -8, pow(3,3,-8))
    1:         self.assertEqual(pow(3,2) % -2, pow(3,2,-2))
    1:         self.assertEqual(pow(-3,3) % 8, pow(-3,3,8))
    1:         self.assertEqual(pow(-3,3) % -8, pow(-3,3,-8))
    1:         self.assertEqual(pow(5,2) % -8, pow(5,2,-8))
       
    1:         self.assertEqual(pow(3L,3L) % 8, pow(3L,3L,8))
    1:         self.assertEqual(pow(3L,3L) % -8, pow(3L,3L,-8))
    1:         self.assertEqual(pow(3L,2) % -2, pow(3L,2,-2))
    1:         self.assertEqual(pow(-3L,3L) % 8, pow(-3L,3L,8))
    1:         self.assertEqual(pow(-3L,3L) % -8, pow(-3L,3L,-8))
    1:         self.assertEqual(pow(5L,2) % -8, pow(5L,2,-8))
       
   22:         for i in range(-10, 11):
  147:             for j in range(0, 6):
 2394:                 for k in range(-7, 11):
 2268:                     if j >= 0 and k != 0:
 2142:                         self.assertEqual(
 2142:                             pow(i,j) % k,
 2142:                             pow(i,j,k)
                               )
 2268:                     if j >= 0 and k != 0:
 2142:                         self.assertEqual(
 2142:                             pow(long(i),j) % k,
 2142:                             pow(long(i),j,k)
                               )
       
    1:     def test_bug643260(self):
    2:         class TestRpow:
    1:             def __rpow__(self, other):
    1:                 return None
    1:         None ** TestRpow() # Won't fail when __rpow__ invoked.  SF bug #643260.
       
    1:     def test_bug705231(self):
               # -1.0 raised to an integer should never blow up.  It did if the
               # platform pow() was buggy, and Python didn't worm around it.
    1:         eq = self.assertEqual
    1:         a = -1.0
               # The next two tests can still fail if the platform floor()
               # function doesn't treat all large inputs as integers
               # test_math should also fail if that is happening
    1:         eq(pow(a, 1.23e167), 1.0)
    1:         eq(pow(a, -1.23e167), 1.0)
   22:         for b in range(-10, 11):
   21:             eq(pow(a, float(b)), b & 1 and -1.0 or 1.0)
  101:         for n in range(0, 100):
  100:             fiveto = float(5 ** n)
                   # For small n, fiveto will be odd.  Eventually we run out of
                   # mantissa bits, though, and thereafer fiveto will be even.
  100:             expected = fiveto % 2.0 and -1.0 or 1.0
  100:             eq(pow(a, fiveto), expected)
  100:             eq(pow(a, -fiveto), expected)
    1:         eq(expected, 1.0)   # else we didn't push fiveto to evenness
       
    1: def test_main():
    1:     test.test_support.run_unittest(PowTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
