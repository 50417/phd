       # Copyright (C) 2003 Python Software Foundation
       
    1: import unittest
    1: import os
    1: import sys
    1: from test import test_support
       
    1: MacOS = test_support.import_module('MacOS')
       #The following modules should exist if MacOS exists.
    1: import Carbon.File
    1: import macostools
       
    1: TESTFN2 = test_support.TESTFN + '2'
       
    1: requires_32bit = unittest.skipUnless(sys.maxint < 2**32, '32-bit only test')
       
    2: class TestMacostools(unittest.TestCase):
       
    1:     def setUp(self):
    1:         fp = open(test_support.TESTFN, 'w')
    1:         fp.write('hello world\n')
    1:         fp.close()
    1:         rfp = MacOS.openrf(test_support.TESTFN, '*wb')
    1:         rfp.write('goodbye world\n')
    1:         rfp.close()
       
    1:     def tearDown(self):
    1:         test_support.unlink(test_support.TESTFN)
    1:         test_support.unlink(TESTFN2)
       
    1:     def compareData(self):
>>>>>>         fp = open(test_support.TESTFN, 'r')
>>>>>>         data1 = fp.read()
>>>>>>         fp.close()
>>>>>>         fp = open(TESTFN2, 'r')
>>>>>>         data2 = fp.read()
>>>>>>         fp.close()
>>>>>>         if data1 != data2:
>>>>>>             return 'Data forks differ'
>>>>>>         rfp = MacOS.openrf(test_support.TESTFN, '*rb')
>>>>>>         data1 = rfp.read(1000)
>>>>>>         rfp.close()
>>>>>>         rfp = MacOS.openrf(TESTFN2, '*rb')
>>>>>>         data2 = rfp.read(1000)
>>>>>>         rfp.close()
>>>>>>         if data1 != data2:
>>>>>>             return 'Resource forks differ'
>>>>>>         return ''
       
    1:     def test_touched(self):
               # This really only tests that nothing unforeseen happens.
    1:         with test_support.check_warnings(('macostools.touched*',
    1:                                           DeprecationWarning), quiet=True):
    1:             macostools.touched(test_support.TESTFN)
       
    1:     @requires_32bit
           def test_copy(self):
>>>>>>         test_support.unlink(TESTFN2)
>>>>>>         macostools.copy(test_support.TESTFN, TESTFN2)
>>>>>>         self.assertEqual(self.compareData(), '')
       
    1:     @requires_32bit
           def test_mkalias(self):
>>>>>>         test_support.unlink(TESTFN2)
>>>>>>         macostools.mkalias(test_support.TESTFN, TESTFN2)
>>>>>>         fss, _, _ = Carbon.File.ResolveAliasFile(TESTFN2, 0)
>>>>>>         self.assertEqual(fss.as_pathname(), os.path.realpath(test_support.TESTFN))
       
    1:     @requires_32bit
           # If the directory doesn't exist, then chances are this is a new
           # install of Python so don't create it since the user might end up
           # running ``sudo make install`` and creating the directory here won't
           # leave it with the proper permissions.
    1:     @unittest.skipUnless(os.path.exists(sys.prefix),
    1:                          "%r doesn't exist" % sys.prefix)
           def test_mkalias_relative(self):
>>>>>>         test_support.unlink(TESTFN2)
       
>>>>>>         macostools.mkalias(test_support.TESTFN, TESTFN2, sys.prefix)
>>>>>>         fss, _, _ = Carbon.File.ResolveAliasFile(TESTFN2, 0)
>>>>>>         self.assertEqual(fss.as_pathname(), os.path.realpath(test_support.TESTFN))
       
       
    1: def test_main():
           # Skip on wide unicode
    1:     if len(u'\0'.encode('unicode-internal')) == 4:
>>>>>>         raise unittest.SkipTest("test_macostools is broken in USC4")
    1:     test_support.run_unittest(TestMacostools)
       
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
