    1: """Base classes for server/gateway implementations"""
       
    1: from types import StringType
    1: from util import FileWrapper, guess_scheme, is_hop_by_hop
    1: from headers import Headers
       
    1: import sys, os, time
       
    1: __all__ = ['BaseHandler', 'SimpleHandler', 'BaseCGIHandler', 'CGIHandler']
       
    1: try:
    1:     dict
>>>>>> except NameError:
>>>>>>     def dict(items):
>>>>>>         d = {}
>>>>>>         for k,v in items:
>>>>>>             d[k] = v
>>>>>>         return d
       
       # Uncomment for 2.2 compatibility.
       #try:
       #    True
       #    False
       #except NameError:
       #    True = not None
       #    False = not True
       
       
       # Weekday and month names for HTTP date/time formatting; always English!
    1: _weekdayname = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
    1: _monthname = [None, # Dummy so we can use 1-based month numbers
    1:               "Jan", "Feb", "Mar", "Apr", "May", "Jun",
    1:               "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
       
    1: def format_date_time(timestamp):
    9:     year, month, day, hh, mm, ss, wd, y, z = time.gmtime(timestamp)
    9:     return "%s, %02d %3s %4d %02d:%02d:%02d GMT" % (
    9:         _weekdayname[wd], day, _monthname[month], year, hh, mm, ss
           )
       
       
    2: class BaseHandler:
    1:     """Manage the invocation of a WSGI application"""
       
           # Configuration parameters; can override per-subclass or per-instance
    1:     wsgi_version = (1,0)
    1:     wsgi_multithread = True
    1:     wsgi_multiprocess = True
    1:     wsgi_run_once = False
       
    1:     origin_server = True    # We are transmitting direct to client
    1:     http_version  = "1.0"   # Version that should be used for response
    1:     server_software = None  # String name of server software, if any
       
           # os_environ is used to supply configuration from the OS environment:
           # by default it's a copy of 'os.environ' as of import time, but you can
           # override this in e.g. your __init__ method.
    1:     os_environ = dict(os.environ.items())
       
           # Collaborator classes
    1:     wsgi_file_wrapper = FileWrapper     # set to None to disable
    1:     headers_class = Headers             # must be a Headers-like class
       
           # Error handling (also per-subclass or per-instance)
    1:     traceback_limit = None  # Print entire traceback to self.get_stderr()
    1:     error_status = "500 Internal Server Error"
    1:     error_headers = [('Content-Type','text/plain')]
    1:     error_body = "A server error occurred.  Please contact the administrator."
       
           # State variables (don't mess with these)
    1:     status = result = None
    1:     headers_sent = False
    1:     headers = None
    1:     bytes_sent = 0
       
    1:     def run(self, application):
               """Invoke the application"""
               # Note to self: don't move the close()!  Asynchronous servers shouldn't
               # call close() from finish_response(), so if you close() anywhere but
               # the double-error branch here, you'll break asynchronous servers by
               # prematurely closing.  Async servers must return from 'run()' without
               # closing if there might still be output to iterate over.
   34:         try:
   34:             self.setup_environ()
   34:             self.result = application(self.environ, self.start_response)
   31:             self.finish_response()
    4:         except:
    4:             try:
    4:                 self.handle_error()
>>>>>>             except:
                       # If we get an error handling an error, just give up already!
>>>>>>                 self.close()
>>>>>>                 raise   # ...and let the actual server figure it out.
       
       
    1:     def setup_environ(self):
               """Set up the environment for one request"""
       
   38:         env = self.environ = self.os_environ.copy()
   38:         self.add_cgi_vars()
       
   38:         env['wsgi.input']        = self.get_stdin()
   38:         env['wsgi.errors']       = self.get_stderr()
   38:         env['wsgi.version']      = self.wsgi_version
   38:         env['wsgi.run_once']     = self.wsgi_run_once
   38:         env['wsgi.url_scheme']   = self.get_scheme()
   38:         env['wsgi.multithread']  = self.wsgi_multithread
   38:         env['wsgi.multiprocess'] = self.wsgi_multiprocess
       
   38:         if self.wsgi_file_wrapper is not None:
   38:             env['wsgi.file_wrapper'] = self.wsgi_file_wrapper
       
   38:         if self.origin_server and self.server_software:
    9:             env.setdefault('SERVER_SOFTWARE',self.server_software)
       
       
    1:     def finish_response(self):
               """Send any iterable data, then close self and the iterable
       
               Subclasses intended for use in asynchronous servers will
               want to redefine this method, such that it sets up callbacks
               in the event loop to iterate over the data, and to call
               'self.close()' once the response is finished.
               """
   34:         try:
   34:             if not self.result_is_file() or not self.sendfile():
   41:                 for data in self.result:
    7:                     self.write(data)
   33:                 self.finish_content()
               finally:
   34:             self.close()
       
       
    1:     def get_scheme(self):
               """Return the URL scheme being used"""
   38:         return guess_scheme(self.environ)
       
       
    1:     def set_content_length(self):
               """Compute Content-Length or switch to chunked encoding if possible"""
    9:         try:
    9:             blocks = len(self.result)
    4:         except (TypeError,AttributeError,NotImplementedError):
    4:             pass
               else:
    5:             if blocks==1:
    5:                 self.headers['Content-Length'] = str(self.bytes_sent)
    5:                 return
               # XXX Try for chunked encoding if origin server and client is 1.1
       
       
    1:     def cleanup_headers(self):
               """Make any necessary header changes or defaults
       
               Subclasses can extend this to add other defaults.
               """
   35:         if 'Content-Length' not in self.headers:
    9:             self.set_content_length()
       
    1:     def start_response(self, status, headers,exc_info=None):
               """'start_response()' callable as specified by PEP 333"""
       
   35:         if exc_info:
    3:             try:
    3:                 if self.headers_sent:
                           # Re-raise original exception if headers sent
>>>>>>                     raise exc_info[0], exc_info[1], exc_info[2]
                   finally:
    3:                 exc_info = None        # avoid dangling circular ref
   32:         elif self.headers is not None:
>>>>>>             raise AssertionError("Headers already set!")
       
   35:         assert type(status) is StringType,"Status must be a string"
   35:         assert len(status)>=4,"Status must be at least 4 characters"
   35:         assert int(status[:3]),"Status message must begin w/3-digit code"
   35:         assert status[3]==" ", "Status message must have a space after code"
               if __debug__:
   43:             for name,val in headers:
    8:                 assert type(name) is StringType,"Header names must be strings"
    8:                 assert type(val) is StringType,"Header values must be strings"
    8:                 assert not is_hop_by_hop(name),"Hop-by-hop headers not allowed"
   35:         self.status = status
   35:         self.headers = self.headers_class(headers)
   35:         return self.write
       
       
    1:     def send_preamble(self):
               """Transmit version/status/date/server, via self._write()"""
   31:         if self.origin_server:
   11:             if self.client_is_modern():
   11:                 self._write('HTTP/%s %s\r\n' % (self.http_version,self.status))
   11:                 if 'Date' not in self.headers:
    9:                     self._write(
    9:                         'Date: %s\r\n' % format_date_time(time.time())
                           )
   11:                 if self.server_software and 'Server' not in self.headers:
    7:                     self._write('Server: %s\r\n' % self.server_software)
               else:
   20:             self._write('Status: %s\r\n' % self.status)
       
    1:     def write(self, data):
               """'write()' callable as specified by PEP 333"""
       
   10:         assert type(data) is StringType,"write() argument must be string"
       
   10:         if not self.status:
>>>>>>             raise AssertionError("write() before start_response()")
       
   10:         elif not self.headers_sent:
                   # Before the first output, send the stored headers
    9:             self.bytes_sent = len(data)    # make sure we know content-length
    9:             self.send_headers()
               else:
    1:             self.bytes_sent += len(data)
       
               # XXX check Content-Length and truncate if too many bytes written?
   10:         self._write(data)
   10:         self._flush()
       
       
    1:     def sendfile(self):
               """Platform-specific file transmission
       
               Override this method in subclasses to support platform-specific
               file transmission.  It is only called if the application's
               return iterable ('self.result') is an instance of
               'self.wsgi_file_wrapper'.
       
               This method should return a true value if it was able to actually
               transmit the wrapped file-like object using a platform-specific
               approach.  It should return a false value if normal iteration
               should be used instead.  An exception can be raised to indicate
               that transmission was attempted, but failed.
       
               NOTE: this method should call 'self.send_headers()' if
               'self.headers_sent' is false and it is going to attempt direct
               transmission of the file.
               """
>>>>>>         return False   # No platform-specific transmission by default
       
       
    1:     def finish_content(self):
               """Ensure headers and content have both been sent"""
   33:         if not self.headers_sent:
                   # Only zero Content-Length if not set by the application (so
                   # that HEAD requests can be satisfied properly, see #3839)
   26:             self.headers.setdefault('Content-Length', "0")
   26:             self.send_headers()
               else:
   33:             pass # XXX check if content-length was too short?
       
    1:     def close(self):
               """Close the iterable (if needed) and reset all instance vars
       
               Subclasses may want to also drop the client connection.
               """
   34:         try:
   34:             if hasattr(self.result,'close'):
    2:                 self.result.close()
               finally:
   34:             self.result = self.headers = self.status = self.environ = None
   34:             self.bytes_sent = 0; self.headers_sent = False
       
       
    1:     def send_headers(self):
               """Transmit headers to the client, via self._write()"""
   35:         self.cleanup_headers()
   35:         self.headers_sent = True
   35:         if not self.origin_server or self.client_is_modern():
   31:             self.send_preamble()
   31:             self._write(str(self.headers))
       
       
    1:     def result_is_file(self):
               """True if 'self.result' is an instance of 'self.wsgi_file_wrapper'"""
   34:         wrapper = self.wsgi_file_wrapper
   34:         return wrapper is not None and isinstance(self.result,wrapper)
       
       
    1:     def client_is_modern(self):
               """True if client can accept status and headers"""
   26:         return self.environ['SERVER_PROTOCOL'].upper() != 'HTTP/0.9'
       
       
    1:     def log_exception(self,exc_info):
               """Log the 'exc_info' tuple in the server log
       
               Subclasses may override to retarget the output or change its format.
               """
    4:         try:
    4:             from traceback import print_exception
    4:             stderr = self.get_stderr()
    4:             print_exception(
    4:                 exc_info[0], exc_info[1], exc_info[2],
    4:                 self.traceback_limit, stderr
                   )
    4:             stderr.flush()
               finally:
    4:             exc_info = None
       
    1:     def handle_error(self):
               """Log current error, and send error output to client if possible"""
    4:         self.log_exception(sys.exc_info())
    4:         if not self.headers_sent:
    3:             self.result = self.error_output(self.environ, self.start_response)
    3:             self.finish_response()
               # XXX else: attempt advanced recovery techniques for HTML or text?
       
    1:     def error_output(self, environ, start_response):
               """WSGI mini-app to create error output
       
               By default, this just uses the 'error_status', 'error_headers',
               and 'error_body' attributes to generate an output page.  It can
               be overridden in a subclass to dynamically generate diagnostics,
               choose an appropriate message for the user's preferred language, etc.
       
               Note, however, that it's not recommended from a security perspective to
               spit out diagnostics to any old user; ideally, you should have to do
               something special to enable diagnostic output, which is why we don't
               include any here!
               """
    3:         start_response(self.error_status,self.error_headers[:],sys.exc_info())
    3:         return [self.error_body]
       
       
           # Pure abstract methods; *must* be overridden in subclasses
       
    1:     def _write(self,data):
               """Override in subclass to buffer data for send to client
       
               It's okay if this method actually transmits the data; BaseHandler
               just separates write and flush operations for greater efficiency
               when the underlying system actually has such a distinction.
               """
    1:         raise NotImplementedError
       
    1:     def _flush(self):
               """Override in subclass to force sending of recent '_write()' calls
       
               It's okay if this method is a no-op (i.e., if '_write()' actually
               sends the data.
               """
    1:         raise NotImplementedError
       
    1:     def get_stdin(self):
               """Override in subclass to return suitable 'wsgi.input'"""
    1:         raise NotImplementedError
       
    1:     def get_stderr(self):
               """Override in subclass to return suitable 'wsgi.errors'"""
    1:         raise NotImplementedError
       
    1:     def add_cgi_vars(self):
               """Override in subclass to insert CGI variables in 'self.environ'"""
    1:         raise NotImplementedError
       
       
    2: class SimpleHandler(BaseHandler):
           """Handler that's just initialized with streams, environment, etc.
       
           This handler subclass is intended for synchronous HTTP/1.0 origin servers,
           and handles sending the entire response output, given the correct inputs.
       
           Usage::
       
               handler = SimpleHandler(
                   inp,out,err,env, multithread=False, multiprocess=True
               )
    1:         handler.run(app)"""
       
           def __init__(self,stdin,stdout,stderr,environ,
    1:         multithread=True, multiprocess=False
           ):
   38:         self.stdin = stdin
   38:         self.stdout = stdout
   38:         self.stderr = stderr
   38:         self.base_env = environ
   38:         self.wsgi_multithread = multithread
   38:         self.wsgi_multiprocess = multiprocess
       
    1:     def get_stdin(self):
   38:         return self.stdin
       
    1:     def get_stderr(self):
   42:         return self.stderr
       
    1:     def add_cgi_vars(self):
   38:         self.environ.update(self.base_env)
       
    1:     def _write(self,data):
   30:         self.stdout.write(data)
   30:         self._write = self.stdout.write
       
    1:     def _flush(self):
    8:         self.stdout.flush()
    8:         self._flush = self.stdout.flush
       
       
    2: class BaseCGIHandler(SimpleHandler):
       
           """CGI-like systems using input/output/error streams and environ mapping
       
           Usage::
       
               handler = BaseCGIHandler(inp,out,err,env)
               handler.run(app)
       
           This handler class is useful for gateway protocols like ReadyExec and
           FastCGI, that have usable input/output/error streams and an environment
           mapping.  It's also the base class for CGIHandler, which just uses
           sys.stdin, os.environ, and so on.
       
           The constructor also takes keyword arguments 'multithread' and
           'multiprocess' (defaulting to 'True' and 'False' respectively) to control
           the configuration sent to the application.  It sets 'origin_server' to
           False (to enable CGI-like output), and assumes that 'wsgi.run_once' is
           False.
    1:     """
       
    1:     origin_server = False
       
       
    2: class CGIHandler(BaseCGIHandler):
       
           """CGI-based invocation via sys.stdin/stdout/stderr and os.environ
       
           Usage::
       
               CGIHandler().run(app)
       
           The difference between this class and BaseCGIHandler is that it always
           uses 'wsgi.run_once' of 'True', 'wsgi.multithread' of 'False', and
           'wsgi.multiprocess' of 'True'.  It does not take any initialization
           parameters, but always uses 'sys.stdin', 'os.environ', and friends.
       
           If you need to override any of these parameters, use BaseCGIHandler
           instead.
    1:     """
       
    1:     wsgi_run_once = True
           # Do not allow os.environ to leak between requests in Google App Engine
           # and other multi-run CGI use cases.  This is not easily testable.
           # See http://bugs.python.org/issue7250
    1:     os_environ = {}
       
    1:     def __init__(self):
>>>>>>         BaseCGIHandler.__init__(
>>>>>>             self, sys.stdin, sys.stdout, sys.stderr, dict(os.environ.items()),
>>>>>>             multithread=False, multiprocess=True
               )
