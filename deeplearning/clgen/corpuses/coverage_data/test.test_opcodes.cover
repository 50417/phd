       # Python test set -- part 2, opcodes
       
    1: from test.test_support import run_unittest, check_py3k_warnings
    1: import unittest
       
    2: class OpcodeTest(unittest.TestCase):
       
    1:     def test_try_inside_for_loop(self):
    1:         n = 0
   11:         for i in range(10):
   10:             n = n+i
   10:             try: 1 // 0
   10:             except NameError: pass
   10:             except ZeroDivisionError: pass
>>>>>>             except TypeError: pass
   10:             try: pass
>>>>>>             except: pass
   10:             try: pass
   10:             finally: pass
   10:             n = n+i
    1:         if n != 90:
>>>>>>             self.fail('try inside for')
       
    1:     def test_raise_class_exceptions(self):
       
    2:         class AClass: pass
    2:         class BClass(AClass): pass
    2:         class CClass: pass
    2:         class DClass(AClass):
    1:             def __init__(self, ignore):
    1:                 pass
       
    1:         try: raise AClass()
    1:         except: pass
       
    1:         try: raise AClass()
    1:         except AClass: pass
       
    1:         try: raise BClass()
    1:         except AClass: pass
       
    1:         try: raise BClass()
    1:         except CClass: self.fail()
    1:         except: pass
       
    1:         a = AClass()
    1:         b = BClass()
       
    1:         try: raise AClass, b
    1:         except BClass, v:
    1:             self.assertEqual(v, b)
>>>>>>         else: self.fail("no exception")
       
    1:         try: raise b
    1:         except AClass, v:
    1:             self.assertEqual(v, b)
               else:
>>>>>>             self.fail("no exception")
       
               # not enough arguments
    1:         try:  raise BClass, a
    1:         except TypeError: pass
>>>>>>         else: self.fail("no exception")
       
    1:         try:  raise DClass, a
    1:         except DClass, v:
    1:             self.assertIsInstance(v, DClass)
               else:
>>>>>>             self.fail("no exception")
       
    1:     def test_compare_function_objects(self):
       
    1:         f = eval('lambda: None')
    1:         g = eval('lambda: None')
    1:         self.assertNotEqual(f, g)
       
    1:         f = eval('lambda a: a')
    1:         g = eval('lambda a: a')
    1:         self.assertNotEqual(f, g)
       
    1:         f = eval('lambda a=1: a')
    1:         g = eval('lambda a=1: a')
    1:         self.assertNotEqual(f, g)
       
    1:         f = eval('lambda: 0')
    1:         g = eval('lambda: 1')
    1:         self.assertNotEqual(f, g)
       
    1:         f = eval('lambda: None')
    1:         g = eval('lambda a: None')
    1:         self.assertNotEqual(f, g)
       
    1:         f = eval('lambda a: None')
    1:         g = eval('lambda b: None')
    1:         self.assertNotEqual(f, g)
       
    1:         f = eval('lambda a: None')
    1:         g = eval('lambda a=None: None')
    1:         self.assertNotEqual(f, g)
       
    1:         f = eval('lambda a=0: None')
    1:         g = eval('lambda a=1: None')
    1:         self.assertNotEqual(f, g)
       
    1:     def test_modulo_of_string_subclasses(self):
    2:         class MyString(str):
    1:             def __mod__(self, value):
    1:                 return 42
    1:         self.assertEqual(MyString() % 3, 42)
       
       
    1: def test_main():
    1:     with check_py3k_warnings(("exceptions must derive from BaseException",
    1:                               DeprecationWarning),
    1:                              ("catching classes that don't inherit "
                                     "from BaseException is not allowed",
    1:                               DeprecationWarning)):
    1:         run_unittest(OpcodeTest)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
