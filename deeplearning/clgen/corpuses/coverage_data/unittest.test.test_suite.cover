    1: import unittest
       
    1: import sys
    1: from unittest.test.support import LoggingResult, TestEquality
       
       
       ### Support code for Test_TestSuite
       ################################################################
       
    2: class Test(object):
    2:     class Foo(unittest.TestCase):
    1:         def test_1(self): pass
    1:         def test_2(self): pass
    1:         def test_3(self): pass
    1:         def runTest(self): pass
       
    1: def _mk_TestSuite(*names):
   26:     return unittest.TestSuite(Test.Foo(n) for n in names)
       
       ################################################################
       
       
    2: class Test_TestSuite(unittest.TestCase, TestEquality):
       
           ### Set up attributes needed by inherited tests
           ################################################################
       
           # Used by TestEquality.test_eq
    1:     eq_pairs = [(unittest.TestSuite(), unittest.TestSuite()),
    1:                 (unittest.TestSuite(), unittest.TestSuite([])),
    1:                (_mk_TestSuite('test_1'), _mk_TestSuite('test_1'))]
       
           # Used by TestEquality.test_ne
    1:     ne_pairs = [(unittest.TestSuite(), _mk_TestSuite('test_1')),
    1:                 (unittest.TestSuite([]), _mk_TestSuite('test_1')),
    1:                 (_mk_TestSuite('test_1', 'test_2'), _mk_TestSuite('test_1', 'test_3')),
    1:                 (_mk_TestSuite('test_1'), _mk_TestSuite('test_2'))]
       
           ################################################################
           ### /Set up attributes needed by inherited tests
       
           ### Tests for TestSuite.__init__
           ################################################################
       
           # "class TestSuite([tests])"
           #
           # The tests iterable should be optional
    1:     def test_init__tests_optional(self):
    1:         suite = unittest.TestSuite()
       
    1:         self.assertEqual(suite.countTestCases(), 0)
       
           # "class TestSuite([tests])"
           # ...
           # "If tests is given, it must be an iterable of individual test cases
           # or other test suites that will be used to build the suite initially"
           #
           # TestSuite should deal with empty tests iterables by allowing the
           # creation of an empty suite
    1:     def test_init__empty_tests(self):
    1:         suite = unittest.TestSuite([])
       
    1:         self.assertEqual(suite.countTestCases(), 0)
       
           # "class TestSuite([tests])"
           # ...
           # "If tests is given, it must be an iterable of individual test cases
           # or other test suites that will be used to build the suite initially"
           #
           # TestSuite should allow any iterable to provide tests
    1:     def test_init__tests_from_any_iterable(self):
    1:         def tests():
    1:             yield unittest.FunctionTestCase(lambda: None)
    1:             yield unittest.FunctionTestCase(lambda: None)
       
    1:         suite_1 = unittest.TestSuite(tests())
    1:         self.assertEqual(suite_1.countTestCases(), 2)
       
    1:         suite_2 = unittest.TestSuite(suite_1)
    1:         self.assertEqual(suite_2.countTestCases(), 2)
       
    1:         suite_3 = unittest.TestSuite(set(suite_1))
    1:         self.assertEqual(suite_3.countTestCases(), 2)
       
           # "class TestSuite([tests])"
           # ...
           # "If tests is given, it must be an iterable of individual test cases
           # or other test suites that will be used to build the suite initially"
           #
           # Does TestSuite() also allow other TestSuite() instances to be present
           # in the tests iterable?
    1:     def test_init__TestSuite_instances_in_tests(self):
    1:         def tests():
    1:             ftc = unittest.FunctionTestCase(lambda: None)
    1:             yield unittest.TestSuite([ftc])
    1:             yield unittest.FunctionTestCase(lambda: None)
       
    1:         suite = unittest.TestSuite(tests())
    1:         self.assertEqual(suite.countTestCases(), 2)
       
           ################################################################
           ### /Tests for TestSuite.__init__
       
           # Container types should support the iter protocol
    1:     def test_iter(self):
    1:         test1 = unittest.FunctionTestCase(lambda: None)
    1:         test2 = unittest.FunctionTestCase(lambda: None)
    1:         suite = unittest.TestSuite((test1, test2))
       
    1:         self.assertEqual(list(suite), [test1, test2])
       
           # "Return the number of tests represented by the this test object.
           # ...this method is also implemented by the TestSuite class, which can
           # return larger [greater than 1] values"
           #
           # Presumably an empty TestSuite returns 0?
    1:     def test_countTestCases_zero_simple(self):
    1:         suite = unittest.TestSuite()
       
    1:         self.assertEqual(suite.countTestCases(), 0)
       
           # "Return the number of tests represented by the this test object.
           # ...this method is also implemented by the TestSuite class, which can
           # return larger [greater than 1] values"
           #
           # Presumably an empty TestSuite (even if it contains other empty
           # TestSuite instances) returns 0?
    1:     def test_countTestCases_zero_nested(self):
    2:         class Test1(unittest.TestCase):
    1:             def test(self):
>>>>>>                 pass
       
    1:         suite = unittest.TestSuite([unittest.TestSuite()])
       
    1:         self.assertEqual(suite.countTestCases(), 0)
       
           # "Return the number of tests represented by the this test object.
           # ...this method is also implemented by the TestSuite class, which can
           # return larger [greater than 1] values"
    1:     def test_countTestCases_simple(self):
    1:         test1 = unittest.FunctionTestCase(lambda: None)
    1:         test2 = unittest.FunctionTestCase(lambda: None)
    1:         suite = unittest.TestSuite((test1, test2))
       
    1:         self.assertEqual(suite.countTestCases(), 2)
       
           # "Return the number of tests represented by the this test object.
           # ...this method is also implemented by the TestSuite class, which can
           # return larger [greater than 1] values"
           #
           # Make sure this holds for nested TestSuite instances, too
    1:     def test_countTestCases_nested(self):
    2:         class Test1(unittest.TestCase):
    1:             def test1(self): pass
    1:             def test2(self): pass
       
    1:         test2 = unittest.FunctionTestCase(lambda: None)
    1:         test3 = unittest.FunctionTestCase(lambda: None)
    1:         child = unittest.TestSuite((Test1('test2'), test2))
    1:         parent = unittest.TestSuite((test3, child, Test1('test1')))
       
    1:         self.assertEqual(parent.countTestCases(), 4)
       
           # "Run the tests associated with this suite, collecting the result into
           # the test result object passed as result."
           #
           # And if there are no tests? What then?
    1:     def test_run__empty_suite(self):
    1:         events = []
    1:         result = LoggingResult(events)
       
    1:         suite = unittest.TestSuite()
       
    1:         suite.run(result)
       
    1:         self.assertEqual(events, [])
       
           # "Note that unlike TestCase.run(), TestSuite.run() requires the
           # "result object to be passed in."
    1:     def test_run__requires_result(self):
    1:         suite = unittest.TestSuite()
       
    1:         try:
    1:             suite.run()
    1:         except TypeError:
    1:             pass
               else:
>>>>>>             self.fail("Failed to raise TypeError")
       
           # "Run the tests associated with this suite, collecting the result into
           # the test result object passed as result."
    1:     def test_run(self):
    1:         events = []
    1:         result = LoggingResult(events)
       
    2:         class LoggingCase(unittest.TestCase):
    1:             def run(self, result):
    2:                 events.append('run %s' % self._testMethodName)
       
    1:             def test1(self): pass
    1:             def test2(self): pass
       
    1:         tests = [LoggingCase('test1'), LoggingCase('test2')]
       
    1:         unittest.TestSuite(tests).run(result)
       
    1:         self.assertEqual(events, ['run test1', 'run test2'])
       
           # "Add a TestCase ... to the suite"
    1:     def test_addTest__TestCase(self):
    2:         class Foo(unittest.TestCase):
    1:             def test(self): pass
       
    1:         test = Foo('test')
    1:         suite = unittest.TestSuite()
       
    1:         suite.addTest(test)
       
    1:         self.assertEqual(suite.countTestCases(), 1)
    1:         self.assertEqual(list(suite), [test])
       
           # "Add a ... TestSuite to the suite"
    1:     def test_addTest__TestSuite(self):
    2:         class Foo(unittest.TestCase):
    1:             def test(self): pass
       
    1:         suite_2 = unittest.TestSuite([Foo('test')])
       
    1:         suite = unittest.TestSuite()
    1:         suite.addTest(suite_2)
       
    1:         self.assertEqual(suite.countTestCases(), 1)
    1:         self.assertEqual(list(suite), [suite_2])
       
           # "Add all the tests from an iterable of TestCase and TestSuite
           # instances to this test suite."
           #
           # "This is equivalent to iterating over tests, calling addTest() for
           # each element"
    1:     def test_addTests(self):
    2:         class Foo(unittest.TestCase):
    1:             def test_1(self): pass
    1:             def test_2(self): pass
       
    1:         test_1 = Foo('test_1')
    1:         test_2 = Foo('test_2')
    1:         inner_suite = unittest.TestSuite([test_2])
       
    1:         def gen():
    3:             yield test_1
    3:             yield test_2
    3:             yield inner_suite
       
    1:         suite_1 = unittest.TestSuite()
    1:         suite_1.addTests(gen())
       
    1:         self.assertEqual(list(suite_1), list(gen()))
       
               # "This is equivalent to iterating over tests, calling addTest() for
               # each element"
    1:         suite_2 = unittest.TestSuite()
    4:         for t in gen():
    3:             suite_2.addTest(t)
       
    1:         self.assertEqual(suite_1, suite_2)
       
           # "Add all the tests from an iterable of TestCase and TestSuite
           # instances to this test suite."
           #
           # What happens if it doesn't get an iterable?
    1:     def test_addTest__noniterable(self):
    1:         suite = unittest.TestSuite()
       
    1:         try:
    1:             suite.addTests(5)
    1:         except TypeError:
    1:             pass
               else:
>>>>>>             self.fail("Failed to raise TypeError")
       
    1:     def test_addTest__noncallable(self):
    1:         suite = unittest.TestSuite()
    1:         self.assertRaises(TypeError, suite.addTest, 5)
       
    1:     def test_addTest__casesuiteclass(self):
    1:         suite = unittest.TestSuite()
    1:         self.assertRaises(TypeError, suite.addTest, Test_TestSuite)
    1:         self.assertRaises(TypeError, suite.addTest, unittest.TestSuite)
       
    1:     def test_addTests__string(self):
    1:         suite = unittest.TestSuite()
    1:         self.assertRaises(TypeError, suite.addTests, "foo")
       
    1:     def test_function_in_suite(self):
    1:         def f(_):
    1:             pass
    1:         suite = unittest.TestSuite()
    1:         suite.addTest(f)
       
               # when the bug is fixed this line will not crash
    1:         suite.run(unittest.TestResult())
       
       
       
    1:     def test_basetestsuite(self):
    2:         class Test(unittest.TestCase):
    1:             wasSetUp = False
    1:             wasTornDown = False
    1:             @classmethod
                   def setUpClass(cls):
>>>>>>                 cls.wasSetUp = True
    1:             @classmethod
                   def tearDownClass(cls):
>>>>>>                 cls.wasTornDown = True
    1:             def testPass(self):
    1:                 pass
    1:             def testFail(self):
    1:                 fail
    2:         class Module(object):
    1:             wasSetUp = False
    1:             wasTornDown = False
    1:             @staticmethod
                   def setUpModule():
>>>>>>                 Module.wasSetUp = True
    1:             @staticmethod
                   def tearDownModule():
>>>>>>                 Module.wasTornDown = True
       
    1:         Test.__module__ = 'Module'
    1:         sys.modules['Module'] = Module
    1:         self.addCleanup(sys.modules.pop, 'Module')
       
    1:         suite = unittest.BaseTestSuite()
    1:         suite.addTests([Test('testPass'), Test('testFail')])
    1:         self.assertEqual(suite.countTestCases(), 2)
       
    1:         result = unittest.TestResult()
    1:         suite.run(result)
    1:         self.assertFalse(Module.wasSetUp)
    1:         self.assertFalse(Module.wasTornDown)
    1:         self.assertFalse(Test.wasSetUp)
    1:         self.assertFalse(Test.wasTornDown)
    1:         self.assertEqual(len(result.errors), 1)
    1:         self.assertEqual(len(result.failures), 0)
    1:         self.assertEqual(result.testsRun, 2)
       
       
    1:     def test_overriding_call(self):
    2:         class MySuite(unittest.TestSuite):
    1:             called = False
    1:             def __call__(self, *args, **kw):
    1:                 self.called = True
    1:                 unittest.TestSuite.__call__(self, *args, **kw)
       
    1:         suite = MySuite()
    1:         result = unittest.TestResult()
    1:         wrapper = unittest.TestSuite()
    1:         wrapper.addTest(suite)
    1:         wrapper(result)
    1:         self.assertTrue(suite.called)
       
               # reusing results should be permitted even if abominable
    1:         self.assertFalse(result._testRunEntered)
       
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
