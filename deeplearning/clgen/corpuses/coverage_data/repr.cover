    1: """Redo the builtin repr() (representation) but with limits on most sizes."""
       
    1: __all__ = ["Repr","repr"]
       
    1: import __builtin__
    1: from itertools import islice
       
    2: class Repr:
       
    1:     def __init__(self):
    6:         self.maxlevel = 6
    6:         self.maxtuple = 6
    6:         self.maxlist = 6
    6:         self.maxarray = 5
    6:         self.maxdict = 4
    6:         self.maxset = 6
    6:         self.maxfrozenset = 6
    6:         self.maxdeque = 6
    6:         self.maxstring = 30
    6:         self.maxlong = 40
    6:         self.maxother = 20
       
    1:     def repr(self, x):
  103:         return self.repr1(x, self.maxlevel)
       
    1:     def repr1(self, x, level):
  241:         typename = type(x).__name__
  241:         if ' ' in typename:
>>>>>>             parts = typename.split()
>>>>>>             typename = '_'.join(parts)
  241:         if hasattr(self, 'repr_' + typename):
  123:             return getattr(self, 'repr_' + typename)(x, level)
               else:
  118:             s = __builtin__.repr(x)
  118:             if len(s) > self.maxother:
    2:                 i = max(0, (self.maxother-3)//2)
    2:                 j = max(0, self.maxother-3-i)
    2:                 s = s[:i] + '...' + s[len(s)-j:]
  118:             return s
       
    1:     def _repr_iterable(self, x, level, left, right, maxiter, trail=''):
   99:         n = len(x)
   99:         if level <= 0 and n:
    5:             s = '...'
               else:
   94:             newlevel = level - 1
   94:             repr1 = self.repr1
  254:             pieces = [repr1(elem, newlevel) for elem in islice(x, maxiter)]
   94:             if n > maxiter:  pieces.append('...')
   94:             s = ', '.join(pieces)
   94:             if n == 1 and trail:  right = trail + right
   99:         return '%s%s%s' % (left, s, right)
       
    1:     def repr_tuple(self, x, level):
   47:         return self._repr_iterable(x, level, '(', ')', self.maxtuple, ',')
       
    1:     def repr_list(self, x, level):
   32:         return self._repr_iterable(x, level, '[', ']', self.maxlist)
       
    1:     def repr_array(self, x, level):
    7:         header = "array('%s', [" % x.typecode
    7:         return self._repr_iterable(x, level, header, '])', self.maxarray)
       
    1:     def repr_set(self, x, level):
    6:         x = _possibly_sorted(x)
    6:         return self._repr_iterable(x, level, 'set([', '])', self.maxset)
       
    1:     def repr_frozenset(self, x, level):
    6:         x = _possibly_sorted(x)
    6:         return self._repr_iterable(x, level, 'frozenset([', '])',
    6:                                    self.maxfrozenset)
       
    1:     def repr_deque(self, x, level):
    1:         return self._repr_iterable(x, level, 'deque([', '])', self.maxdeque)
       
    1:     def repr_dict(self, x, level):
    7:         n = len(x)
    7:         if n == 0: return '{}'
    5:         if level <= 0: return '{...}'
    5:         newlevel = level - 1
    5:         repr1 = self.repr1
    5:         pieces = []
   17:         for key in islice(_possibly_sorted(x), self.maxdict):
   12:             keyrepr = repr1(key, newlevel)
   12:             valrepr = repr1(x[key], newlevel)
   12:             pieces.append('%s: %s' % (keyrepr, valrepr))
    5:         if n > self.maxdict: pieces.append('...')
    5:         s = ', '.join(pieces)
    5:         return '{%s}' % (s,)
       
    1:     def repr_str(self, x, level):
   13:         s = __builtin__.repr(x[:self.maxstring])
   13:         if len(s) > self.maxstring:
    2:             i = max(0, (self.maxstring-3)//2)
    2:             j = max(0, self.maxstring-3-i)
    2:             s = __builtin__.repr(x[:i] + x[len(x)-j:])
    2:             s = s[:i] + '...' + s[len(s)-j:]
   13:         return s
       
    1:     def repr_long(self, x, level):
    2:         s = __builtin__.repr(x) # XXX Hope this isn't too slow...
    2:         if len(s) > self.maxlong:
    1:             i = max(0, (self.maxlong-3)//2)
    1:             j = max(0, self.maxlong-3-i)
    1:             s = s[:i] + '...' + s[len(s)-j:]
    2:         return s
       
    1:     def repr_instance(self, x, level):
    3:         try:
    3:             s = __builtin__.repr(x)
                   # Bugs in x.__repr__() can cause arbitrary
                   # exceptions -- then make up something
    1:         except Exception:
    1:             return '<%s instance at %x>' % (x.__class__.__name__, id(x))
    2:         if len(s) > self.maxstring:
    1:             i = max(0, (self.maxstring-3)//2)
    1:             j = max(0, self.maxstring-3-i)
    1:             s = s[:i] + '...' + s[len(s)-j:]
    2:         return s
       
       
    1: def _possibly_sorted(x):
           # Since not all sequences of items can be sorted and comparison
           # functions may raise arbitrary exceptions, return an unsorted
           # sequence in that case.
   17:     try:
   17:         return sorted(x)
    3:     except Exception:
    3:         return list(x)
       
    1: aRepr = Repr()
    1: repr = aRepr.repr
