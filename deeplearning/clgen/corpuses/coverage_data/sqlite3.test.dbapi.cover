       #-*- coding: ISO-8859-1 -*-
       # pysqlite2/test/dbapi.py: tests for DB-API compliance
       #
       # Copyright (C) 2004-2010 Gerhard Häring <gh@ghaering.de>
       #
       # This file is part of pysqlite.
       #
       # This software is provided 'as-is', without any express or implied
       # warranty.  In no event will the authors be held liable for any damages
       # arising from the use of this software.
       #
       # Permission is granted to anyone to use this software for any purpose,
       # including commercial applications, and to alter it and redistribute it
       # freely, subject to the following restrictions:
       #
       # 1. The origin of this software must not be misrepresented; you must not
       #    claim that you wrote the original software. If you use this software
       #    in a product, an acknowledgment in the product documentation would be
       #    appreciated but is not required.
       # 2. Altered source versions must be plainly marked as such, and must not be
       #    misrepresented as being the original software.
       # 3. This notice may not be removed or altered from any source distribution.
       
    1: import unittest
    1: import sys
    1: import sqlite3 as sqlite
    1: from test import test_support
    1: try:
    1:     import threading
>>>>>> except ImportError:
>>>>>>     threading = None
       
    2: class ModuleTests(unittest.TestCase):
    1:     def CheckAPILevel(self):
    1:         self.assertEqual(sqlite.apilevel, "2.0",
    1:                          "apilevel is %s, should be 2.0" % sqlite.apilevel)
       
    1:     def CheckThreadSafety(self):
    1:         self.assertEqual(sqlite.threadsafety, 1,
    1:                          "threadsafety is %d, should be 1" % sqlite.threadsafety)
       
    1:     def CheckParamStyle(self):
    1:         self.assertEqual(sqlite.paramstyle, "qmark",
    1:                          "paramstyle is '%s', should be 'qmark'" %
    1:                          sqlite.paramstyle)
       
    1:     def CheckWarning(self):
    1:         self.assertTrue(issubclass(sqlite.Warning, StandardError),
    1:                         "Warning is not a subclass of StandardError")
       
    1:     def CheckError(self):
    1:         self.assertTrue(issubclass(sqlite.Error, StandardError),
    1:                         "Error is not a subclass of StandardError")
       
    1:     def CheckInterfaceError(self):
    1:         self.assertTrue(issubclass(sqlite.InterfaceError, sqlite.Error),
    1:                         "InterfaceError is not a subclass of Error")
       
    1:     def CheckDatabaseError(self):
    1:         self.assertTrue(issubclass(sqlite.DatabaseError, sqlite.Error),
    1:                         "DatabaseError is not a subclass of Error")
       
    1:     def CheckDataError(self):
    1:         self.assertTrue(issubclass(sqlite.DataError, sqlite.DatabaseError),
    1:                         "DataError is not a subclass of DatabaseError")
       
    1:     def CheckOperationalError(self):
    1:         self.assertTrue(issubclass(sqlite.OperationalError, sqlite.DatabaseError),
    1:                         "OperationalError is not a subclass of DatabaseError")
       
    1:     def CheckIntegrityError(self):
    1:         self.assertTrue(issubclass(sqlite.IntegrityError, sqlite.DatabaseError),
    1:                         "IntegrityError is not a subclass of DatabaseError")
       
    1:     def CheckInternalError(self):
    1:         self.assertTrue(issubclass(sqlite.InternalError, sqlite.DatabaseError),
    1:                         "InternalError is not a subclass of DatabaseError")
       
    1:     def CheckProgrammingError(self):
    1:         self.assertTrue(issubclass(sqlite.ProgrammingError, sqlite.DatabaseError),
    1:                         "ProgrammingError is not a subclass of DatabaseError")
       
    1:     def CheckNotSupportedError(self):
    1:         self.assertTrue(issubclass(sqlite.NotSupportedError,
    1:                                    sqlite.DatabaseError),
    1:                         "NotSupportedError is not a subclass of DatabaseError")
       
    2: class ConnectionTests(unittest.TestCase):
    1:     def setUp(self):
    8:         self.cx = sqlite.connect(":memory:")
    8:         cu = self.cx.cursor()
    8:         cu.execute("create table test(id integer primary key, name text)")
    8:         cu.execute("insert into test(name) values (?)", ("foo",))
       
    1:     def tearDown(self):
    8:         self.cx.close()
       
    1:     def CheckCommit(self):
    1:         self.cx.commit()
       
    1:     def CheckCommitAfterNoChanges(self):
               """
               A commit should also work when no changes were made to the database.
               """
    1:         self.cx.commit()
    1:         self.cx.commit()
       
    1:     def CheckRollback(self):
    1:         self.cx.rollback()
       
    1:     def CheckRollbackAfterNoChanges(self):
               """
               A rollback should also work when no changes were made to the database.
               """
    1:         self.cx.rollback()
    1:         self.cx.rollback()
       
    1:     def CheckCursor(self):
    1:         cu = self.cx.cursor()
       
    1:     def CheckFailedOpen(self):
    1:         YOU_CANNOT_OPEN_THIS = "/foo/bar/bla/23534/mydb.db"
    1:         try:
    1:             con = sqlite.connect(YOU_CANNOT_OPEN_THIS)
    1:         except sqlite.OperationalError:
    1:             return
>>>>>>         self.fail("should have raised an OperationalError")
       
    1:     def CheckClose(self):
    1:         self.cx.close()
       
    1:     def CheckExceptions(self):
               # Optional DB-API extension.
    1:         self.assertEqual(self.cx.Warning, sqlite.Warning)
    1:         self.assertEqual(self.cx.Error, sqlite.Error)
    1:         self.assertEqual(self.cx.InterfaceError, sqlite.InterfaceError)
    1:         self.assertEqual(self.cx.DatabaseError, sqlite.DatabaseError)
    1:         self.assertEqual(self.cx.DataError, sqlite.DataError)
    1:         self.assertEqual(self.cx.OperationalError, sqlite.OperationalError)
    1:         self.assertEqual(self.cx.IntegrityError, sqlite.IntegrityError)
    1:         self.assertEqual(self.cx.InternalError, sqlite.InternalError)
    1:         self.assertEqual(self.cx.ProgrammingError, sqlite.ProgrammingError)
    1:         self.assertEqual(self.cx.NotSupportedError, sqlite.NotSupportedError)
       
    2: class CursorTests(unittest.TestCase):
    1:     def setUp(self):
   44:         self.cx = sqlite.connect(":memory:")
   44:         self.cu = self.cx.cursor()
   44:         self.cu.execute("create table test(id integer primary key, name text, income number)")
   44:         self.cu.execute("insert into test(name) values (?)", ("foo",))
       
    1:     def tearDown(self):
   44:         self.cu.close()
   44:         self.cx.close()
       
    1:     def CheckExecuteNoArgs(self):
    1:         self.cu.execute("delete from test")
       
    1:     def CheckExecuteIllegalSql(self):
    1:         try:
    1:             self.cu.execute("select asdf")
>>>>>>             self.fail("should have raised an OperationalError")
    1:         except sqlite.OperationalError:
    1:             return
>>>>>>         except:
>>>>>>             self.fail("raised wrong exception")
       
    1:     def CheckExecuteTooMuchSql(self):
    1:         try:
    1:             self.cu.execute("select 5+4; select 4+5")
>>>>>>             self.fail("should have raised a Warning")
    1:         except sqlite.Warning:
    1:             return
>>>>>>         except:
>>>>>>             self.fail("raised wrong exception")
       
    1:     def CheckExecuteTooMuchSql2(self):
    1:         self.cu.execute("select 5+4; -- foo bar")
       
    1:     def CheckExecuteTooMuchSql3(self):
    1:         self.cu.execute("""
                   select 5+4;
       
                   /*
                   foo
                   */
    1:             """)
       
    1:     def CheckExecuteWrongSqlArg(self):
    1:         try:
    1:             self.cu.execute(42)
>>>>>>             self.fail("should have raised a ValueError")
    1:         except ValueError:
    1:             return
>>>>>>         except:
>>>>>>             self.fail("raised wrong exception.")
       
    1:     def CheckExecuteArgInt(self):
    1:         self.cu.execute("insert into test(id) values (?)", (42,))
       
    1:     def CheckExecuteArgFloat(self):
    1:         self.cu.execute("insert into test(income) values (?)", (2500.32,))
       
    1:     def CheckExecuteArgString(self):
    1:         self.cu.execute("insert into test(name) values (?)", ("Hugo",))
       
    1:     def CheckExecuteArgStringWithZeroByte(self):
    1:         self.cu.execute("insert into test(name) values (?)", ("Hu\x00go",))
       
    1:         self.cu.execute("select name from test where id=?", (self.cu.lastrowid,))
    1:         row = self.cu.fetchone()
    1:         self.assertEqual(row[0], "Hu\x00go")
       
    1:     def CheckExecuteWrongNoOfArgs1(self):
               # too many parameters
    1:         try:
    1:             self.cu.execute("insert into test(id) values (?)", (17, "Egon"))
>>>>>>             self.fail("should have raised ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
       
    1:     def CheckExecuteWrongNoOfArgs2(self):
               # too little parameters
    1:         try:
    1:             self.cu.execute("insert into test(id) values (?)")
>>>>>>             self.fail("should have raised ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
       
    1:     def CheckExecuteWrongNoOfArgs3(self):
               # no parameters, parameters are needed
    1:         try:
    1:             self.cu.execute("insert into test(id) values (?)")
>>>>>>             self.fail("should have raised ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
       
    1:     def CheckExecuteParamList(self):
    1:         self.cu.execute("insert into test(name) values ('foo')")
    1:         self.cu.execute("select name from test where name=?", ["foo"])
    1:         row = self.cu.fetchone()
    1:         self.assertEqual(row[0], "foo")
       
    1:     def CheckExecuteParamSequence(self):
    2:         class L(object):
    1:             def __len__(self):
    1:                 return 1
    1:             def __getitem__(self, x):
    1:                 assert x == 0
    1:                 return "foo"
       
    1:         self.cu.execute("insert into test(name) values ('foo')")
    1:         self.cu.execute("select name from test where name=?", L())
    1:         row = self.cu.fetchone()
    1:         self.assertEqual(row[0], "foo")
       
    1:     def CheckExecuteDictMapping(self):
    1:         self.cu.execute("insert into test(name) values ('foo')")
    1:         self.cu.execute("select name from test where name=:name", {"name": "foo"})
    1:         row = self.cu.fetchone()
    1:         self.assertEqual(row[0], "foo")
       
    1:     def CheckExecuteDictMapping_Mapping(self):
               # Test only works with Python 2.5 or later
    1:         if sys.version_info < (2, 5, 0):
>>>>>>             return
       
    2:         class D(dict):
    1:             def __missing__(self, key):
    1:                 return "foo"
       
    1:         self.cu.execute("insert into test(name) values ('foo')")
    1:         self.cu.execute("select name from test where name=:name", D())
    1:         row = self.cu.fetchone()
    1:         self.assertEqual(row[0], "foo")
       
    1:     def CheckExecuteDictMappingTooLittleArgs(self):
    1:         self.cu.execute("insert into test(name) values ('foo')")
    1:         try:
    1:             self.cu.execute("select name from test where name=:name and id=:id", {"name": "foo"})
>>>>>>             self.fail("should have raised ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
       
    1:     def CheckExecuteDictMappingNoArgs(self):
    1:         self.cu.execute("insert into test(name) values ('foo')")
    1:         try:
    1:             self.cu.execute("select name from test where name=:name")
>>>>>>             self.fail("should have raised ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
       
    1:     def CheckExecuteDictMappingUnnamed(self):
    1:         self.cu.execute("insert into test(name) values ('foo')")
    1:         try:
    1:             self.cu.execute("select name from test where name=?", {"name": "foo"})
>>>>>>             self.fail("should have raised ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
       
    1:     def CheckClose(self):
    1:         self.cu.close()
       
    1:     def CheckRowcountExecute(self):
    1:         self.cu.execute("delete from test")
    1:         self.cu.execute("insert into test(name) values ('foo')")
    1:         self.cu.execute("insert into test(name) values ('foo')")
    1:         self.cu.execute("update test set name='bar'")
    1:         self.assertEqual(self.cu.rowcount, 2)
       
    1:     def CheckRowcountSelect(self):
               """
               pysqlite does not know the rowcount of SELECT statements, because we
               don't fetch all rows after executing the select statement. The rowcount
               has thus to be -1.
               """
    1:         self.cu.execute("select 5 union select 6")
    1:         self.assertEqual(self.cu.rowcount, -1)
       
    1:     def CheckRowcountExecutemany(self):
    1:         self.cu.execute("delete from test")
    1:         self.cu.executemany("insert into test(name) values (?)", [(1,), (2,), (3,)])
    1:         self.assertEqual(self.cu.rowcount, 3)
       
    1:     def CheckTotalChanges(self):
    1:         self.cu.execute("insert into test(name) values ('foo')")
    1:         self.cu.execute("insert into test(name) values ('foo')")
    1:         if self.cx.total_changes < 2:
>>>>>>             self.fail("total changes reported wrong value")
       
           # Checks for executemany:
           # Sequences are required by the DB-API, iterators
           # enhancements in pysqlite.
       
    1:     def CheckExecuteManySequence(self):
   11:         self.cu.executemany("insert into test(income) values (?)", [(x,) for x in range(100, 110)])
       
    1:     def CheckExecuteManyIterator(self):
    2:         class MyIter:
    1:             def __init__(self):
    1:                 self.value = 5
       
    1:             def next(self):
    6:                 if self.value == 10:
    1:                     raise StopIteration
                       else:
    5:                     self.value += 1
    5:                     return (self.value,)
       
    1:         self.cu.executemany("insert into test(income) values (?)", MyIter())
       
    1:     def CheckExecuteManyGenerator(self):
    1:         def mygen():
    6:             for i in range(5):
    5:                 yield (i,)
       
    1:         self.cu.executemany("insert into test(income) values (?)", mygen())
       
    1:     def CheckExecuteManyWrongSqlArg(self):
    1:         try:
    1:             self.cu.executemany(42, [(3,)])
>>>>>>             self.fail("should have raised a ValueError")
    1:         except ValueError:
    1:             return
>>>>>>         except:
>>>>>>             self.fail("raised wrong exception.")
       
    1:     def CheckExecuteManySelect(self):
    1:         try:
    1:             self.cu.executemany("select ?", [(3,)])
>>>>>>             self.fail("should have raised a ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             return
>>>>>>         except:
>>>>>>             self.fail("raised wrong exception.")
       
    1:     def CheckExecuteManyNotIterable(self):
    1:         try:
    1:             self.cu.executemany("insert into test(income) values (?)", 42)
>>>>>>             self.fail("should have raised a TypeError")
    1:         except TypeError:
    1:             return
>>>>>>         except Exception, e:
>>>>>>             print "raised", e.__class__
>>>>>>             self.fail("raised wrong exception.")
       
    1:     def CheckFetchIter(self):
               # Optional DB-API extension.
    1:         self.cu.execute("delete from test")
    1:         self.cu.execute("insert into test(id) values (?)", (5,))
    1:         self.cu.execute("insert into test(id) values (?)", (6,))
    1:         self.cu.execute("select id from test order by id")
    1:         lst = []
    3:         for row in self.cu:
    2:             lst.append(row[0])
    1:         self.assertEqual(lst[0], 5)
    1:         self.assertEqual(lst[1], 6)
       
    1:     def CheckFetchone(self):
    1:         self.cu.execute("select name from test")
    1:         row = self.cu.fetchone()
    1:         self.assertEqual(row[0], "foo")
    1:         row = self.cu.fetchone()
    1:         self.assertEqual(row, None)
       
    1:     def CheckFetchoneNoStatement(self):
    1:         cur = self.cx.cursor()
    1:         row = cur.fetchone()
    1:         self.assertEqual(row, None)
       
    1:     def CheckArraySize(self):
               # must default ot 1
    1:         self.assertEqual(self.cu.arraysize, 1)
       
               # now set to 2
    1:         self.cu.arraysize = 2
       
               # now make the query return 3 rows
    1:         self.cu.execute("delete from test")
    1:         self.cu.execute("insert into test(name) values ('A')")
    1:         self.cu.execute("insert into test(name) values ('B')")
    1:         self.cu.execute("insert into test(name) values ('C')")
    1:         self.cu.execute("select name from test")
    1:         res = self.cu.fetchmany()
       
    1:         self.assertEqual(len(res), 2)
       
    1:     def CheckFetchmany(self):
    1:         self.cu.execute("select name from test")
    1:         res = self.cu.fetchmany(100)
    1:         self.assertEqual(len(res), 1)
    1:         res = self.cu.fetchmany(100)
    1:         self.assertEqual(res, [])
       
    1:     def CheckFetchmanyKwArg(self):
               """Checks if fetchmany works with keyword arguments"""
    1:         self.cu.execute("select name from test")
    1:         res = self.cu.fetchmany(size=100)
    1:         self.assertEqual(len(res), 1)
       
    1:     def CheckFetchall(self):
    1:         self.cu.execute("select name from test")
    1:         res = self.cu.fetchall()
    1:         self.assertEqual(len(res), 1)
    1:         res = self.cu.fetchall()
    1:         self.assertEqual(res, [])
       
    1:     def CheckSetinputsizes(self):
    1:         self.cu.setinputsizes([3, 4, 5])
       
    1:     def CheckSetoutputsize(self):
    1:         self.cu.setoutputsize(5, 0)
       
    1:     def CheckSetoutputsizeNoColumn(self):
    1:         self.cu.setoutputsize(42)
       
    1:     def CheckCursorConnection(self):
               # Optional DB-API extension.
    1:         self.assertEqual(self.cu.connection, self.cx)
       
    1:     def CheckWrongCursorCallable(self):
    1:         try:
    1:             def f(): pass
    1:             cur = self.cx.cursor(f)
>>>>>>             self.fail("should have raised a TypeError")
    1:         except TypeError:
    1:             return
>>>>>>         self.fail("should have raised a ValueError")
       
    1:     def CheckCursorWrongClass(self):
    2:         class Foo: pass
    1:         foo = Foo()
    1:         try:
    1:             cur = sqlite.Cursor(foo)
>>>>>>             self.fail("should have raised a ValueError")
    1:         except TypeError:
    1:             pass
       
    2: @unittest.skipUnless(threading, 'This test requires threading.')
    1: class ThreadTests(unittest.TestCase):
    1:     def setUp(self):
    8:         self.con = sqlite.connect(":memory:")
    8:         self.cur = self.con.cursor()
    8:         self.cur.execute("create table test(id integer primary key, name text, bin binary, ratio number, ts timestamp)")
       
    1:     def tearDown(self):
    8:         self.cur.close()
    8:         self.con.close()
       
    1:     def CheckConCursor(self):
    1:         def run(con, errors):
    1:             try:
    1:                 cur = con.cursor()
>>>>>>                 errors.append("did not raise ProgrammingError")
>>>>>>                 return
    1:             except sqlite.ProgrammingError:
    1:                 return
>>>>>>             except:
>>>>>>                 errors.append("raised wrong exception")
       
    1:         errors = []
    1:         t = threading.Thread(target=run, kwargs={"con": self.con, "errors": errors})
    1:         t.start()
    1:         t.join()
    1:         if len(errors) > 0:
>>>>>>             self.fail("\n".join(errors))
       
    1:     def CheckConCommit(self):
    1:         def run(con, errors):
    1:             try:
    1:                 con.commit()
>>>>>>                 errors.append("did not raise ProgrammingError")
>>>>>>                 return
    1:             except sqlite.ProgrammingError:
    1:                 return
>>>>>>             except:
>>>>>>                 errors.append("raised wrong exception")
       
    1:         errors = []
    1:         t = threading.Thread(target=run, kwargs={"con": self.con, "errors": errors})
    1:         t.start()
    1:         t.join()
    1:         if len(errors) > 0:
>>>>>>             self.fail("\n".join(errors))
       
    1:     def CheckConRollback(self):
    1:         def run(con, errors):
    1:             try:
    1:                 con.rollback()
>>>>>>                 errors.append("did not raise ProgrammingError")
>>>>>>                 return
    1:             except sqlite.ProgrammingError:
    1:                 return
>>>>>>             except:
>>>>>>                 errors.append("raised wrong exception")
       
    1:         errors = []
    1:         t = threading.Thread(target=run, kwargs={"con": self.con, "errors": errors})
    1:         t.start()
    1:         t.join()
    1:         if len(errors) > 0:
>>>>>>             self.fail("\n".join(errors))
       
    1:     def CheckConClose(self):
    1:         def run(con, errors):
    1:             try:
    1:                 con.close()
>>>>>>                 errors.append("did not raise ProgrammingError")
>>>>>>                 return
    1:             except sqlite.ProgrammingError:
    1:                 return
>>>>>>             except:
>>>>>>                 errors.append("raised wrong exception")
       
    1:         errors = []
    1:         t = threading.Thread(target=run, kwargs={"con": self.con, "errors": errors})
    1:         t.start()
    1:         t.join()
    1:         if len(errors) > 0:
>>>>>>             self.fail("\n".join(errors))
       
    1:     def CheckCurImplicitBegin(self):
    1:         def run(cur, errors):
    1:             try:
    1:                 cur.execute("insert into test(name) values ('a')")
>>>>>>                 errors.append("did not raise ProgrammingError")
>>>>>>                 return
    1:             except sqlite.ProgrammingError:
    1:                 return
>>>>>>             except:
>>>>>>                 errors.append("raised wrong exception")
       
    1:         errors = []
    1:         t = threading.Thread(target=run, kwargs={"cur": self.cur, "errors": errors})
    1:         t.start()
    1:         t.join()
    1:         if len(errors) > 0:
>>>>>>             self.fail("\n".join(errors))
       
    1:     def CheckCurClose(self):
    1:         def run(cur, errors):
    1:             try:
    1:                 cur.close()
>>>>>>                 errors.append("did not raise ProgrammingError")
>>>>>>                 return
    1:             except sqlite.ProgrammingError:
    1:                 return
>>>>>>             except:
>>>>>>                 errors.append("raised wrong exception")
       
    1:         errors = []
    1:         t = threading.Thread(target=run, kwargs={"cur": self.cur, "errors": errors})
    1:         t.start()
    1:         t.join()
    1:         if len(errors) > 0:
>>>>>>             self.fail("\n".join(errors))
       
    1:     def CheckCurExecute(self):
    1:         def run(cur, errors):
    1:             try:
    1:                 cur.execute("select name from test")
>>>>>>                 errors.append("did not raise ProgrammingError")
>>>>>>                 return
    1:             except sqlite.ProgrammingError:
    1:                 return
>>>>>>             except:
>>>>>>                 errors.append("raised wrong exception")
       
    1:         errors = []
    1:         self.cur.execute("insert into test(name) values ('a')")
    1:         t = threading.Thread(target=run, kwargs={"cur": self.cur, "errors": errors})
    1:         t.start()
    1:         t.join()
    1:         if len(errors) > 0:
>>>>>>             self.fail("\n".join(errors))
       
    1:     def CheckCurIterNext(self):
    1:         def run(cur, errors):
    1:             try:
    1:                 row = cur.fetchone()
>>>>>>                 errors.append("did not raise ProgrammingError")
>>>>>>                 return
    1:             except sqlite.ProgrammingError:
    1:                 return
>>>>>>             except:
>>>>>>                 errors.append("raised wrong exception")
       
    1:         errors = []
    1:         self.cur.execute("insert into test(name) values ('a')")
    1:         self.cur.execute("select name from test")
    1:         t = threading.Thread(target=run, kwargs={"cur": self.cur, "errors": errors})
    1:         t.start()
    1:         t.join()
    1:         if len(errors) > 0:
>>>>>>             self.fail("\n".join(errors))
       
    2: class ConstructorTests(unittest.TestCase):
    1:     def CheckDate(self):
    1:         d = sqlite.Date(2004, 10, 28)
       
    1:     def CheckTime(self):
    1:         t = sqlite.Time(12, 39, 35)
       
    1:     def CheckTimestamp(self):
    1:         ts = sqlite.Timestamp(2004, 10, 28, 12, 39, 35)
       
    1:     def CheckDateFromTicks(self):
    1:         d = sqlite.DateFromTicks(42)
       
    1:     def CheckTimeFromTicks(self):
    1:         t = sqlite.TimeFromTicks(42)
       
    1:     def CheckTimestampFromTicks(self):
    1:         ts = sqlite.TimestampFromTicks(42)
       
    1:     def CheckBinary(self):
    1:         with test_support.check_py3k_warnings():
    1:             b = sqlite.Binary(chr(0) + "'")
       
    2: class ExtensionTests(unittest.TestCase):
    1:     def CheckScriptStringSql(self):
    1:         con = sqlite.connect(":memory:")
    1:         cur = con.cursor()
    1:         cur.executescript("""
                   -- bla bla
                   /* a stupid comment */
                   create table a(i);
                   insert into a(i) values (5);
    1:             """)
    1:         cur.execute("select i from a")
    1:         res = cur.fetchone()[0]
    1:         self.assertEqual(res, 5)
       
    1:     def CheckScriptStringUnicode(self):
    1:         con = sqlite.connect(":memory:")
    1:         cur = con.cursor()
    1:         cur.executescript(u"""
                   create table a(i);
                   insert into a(i) values (5);
                   select i from a;
                   delete from a;
                   insert into a(i) values (6);
    1:             """)
    1:         cur.execute("select i from a")
    1:         res = cur.fetchone()[0]
    1:         self.assertEqual(res, 6)
       
    1:     def CheckScriptSyntaxError(self):
    1:         con = sqlite.connect(":memory:")
    1:         cur = con.cursor()
    1:         raised = False
    1:         try:
    1:             cur.executescript("create table test(x); asdf; create table test2(x)")
    1:         except sqlite.OperationalError:
    1:             raised = True
    1:         self.assertEqual(raised, True, "should have raised an exception")
       
    1:     def CheckScriptErrorNormal(self):
    1:         con = sqlite.connect(":memory:")
    1:         cur = con.cursor()
    1:         raised = False
    1:         try:
    1:             cur.executescript("create table test(sadfsadfdsa); select foo from hurz;")
    1:         except sqlite.OperationalError:
    1:             raised = True
    1:         self.assertEqual(raised, True, "should have raised an exception")
       
    1:     def CheckConnectionExecute(self):
    1:         con = sqlite.connect(":memory:")
    1:         result = con.execute("select 5").fetchone()[0]
    1:         self.assertEqual(result, 5, "Basic test of Connection.execute")
       
    1:     def CheckConnectionExecutemany(self):
    1:         con = sqlite.connect(":memory:")
    1:         con.execute("create table test(foo)")
    1:         con.executemany("insert into test(foo) values (?)", [(3,), (4,)])
    1:         result = con.execute("select foo from test order by foo").fetchall()
    1:         self.assertEqual(result[0][0], 3, "Basic test of Connection.executemany")
    1:         self.assertEqual(result[1][0], 4, "Basic test of Connection.executemany")
       
    1:     def CheckConnectionExecutescript(self):
    1:         con = sqlite.connect(":memory:")
    1:         con.executescript("create table test(foo); insert into test(foo) values (5);")
    1:         result = con.execute("select foo from test").fetchone()[0]
    1:         self.assertEqual(result, 5, "Basic test of Connection.executescript")
       
    2: class ClosedConTests(unittest.TestCase):
    1:     def setUp(self):
    9:         pass
       
    1:     def tearDown(self):
    9:         pass
       
    1:     def CheckClosedConCursor(self):
    1:         con = sqlite.connect(":memory:")
    1:         con.close()
    1:         try:
    1:             cur = con.cursor()
>>>>>>             self.fail("Should have raised a ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
>>>>>>         except:
>>>>>>             self.fail("Should have raised a ProgrammingError")
       
    1:     def CheckClosedConCommit(self):
    1:         con = sqlite.connect(":memory:")
    1:         con.close()
    1:         try:
    1:             con.commit()
>>>>>>             self.fail("Should have raised a ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
>>>>>>         except:
>>>>>>             self.fail("Should have raised a ProgrammingError")
       
    1:     def CheckClosedConRollback(self):
    1:         con = sqlite.connect(":memory:")
    1:         con.close()
    1:         try:
    1:             con.rollback()
>>>>>>             self.fail("Should have raised a ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
>>>>>>         except:
>>>>>>             self.fail("Should have raised a ProgrammingError")
       
    1:     def CheckClosedCurExecute(self):
    1:         con = sqlite.connect(":memory:")
    1:         cur = con.cursor()
    1:         con.close()
    1:         try:
    1:             cur.execute("select 4")
>>>>>>             self.fail("Should have raised a ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
>>>>>>         except:
>>>>>>             self.fail("Should have raised a ProgrammingError")
       
    1:     def CheckClosedCreateFunction(self):
    1:         con = sqlite.connect(":memory:")
    1:         con.close()
    1:         def f(x): return 17
    1:         try:
    1:             con.create_function("foo", 1, f)
>>>>>>             self.fail("Should have raised a ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
>>>>>>         except:
>>>>>>             self.fail("Should have raised a ProgrammingError")
       
    1:     def CheckClosedCreateAggregate(self):
    1:         con = sqlite.connect(":memory:")
    1:         con.close()
    2:         class Agg:
    1:             def __init__(self):
>>>>>>                 pass
    1:             def step(self, x):
>>>>>>                 pass
    1:             def finalize(self):
>>>>>>                 return 17
    1:         try:
    1:             con.create_aggregate("foo", 1, Agg)
>>>>>>             self.fail("Should have raised a ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
>>>>>>         except:
>>>>>>             self.fail("Should have raised a ProgrammingError")
       
    1:     def CheckClosedSetAuthorizer(self):
    1:         con = sqlite.connect(":memory:")
    1:         con.close()
    1:         def authorizer(*args):
>>>>>>             return sqlite.DENY
    1:         try:
    1:             con.set_authorizer(authorizer)
>>>>>>             self.fail("Should have raised a ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
>>>>>>         except:
>>>>>>             self.fail("Should have raised a ProgrammingError")
       
    1:     def CheckClosedSetProgressCallback(self):
    1:         con = sqlite.connect(":memory:")
    1:         con.close()
    1:         def progress(): pass
    1:         try:
    1:             con.set_progress_handler(progress, 100)
>>>>>>             self.fail("Should have raised a ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
>>>>>>         except:
>>>>>>             self.fail("Should have raised a ProgrammingError")
       
    1:     def CheckClosedCall(self):
    1:         con = sqlite.connect(":memory:")
    1:         con.close()
    1:         try:
    1:             con()
>>>>>>             self.fail("Should have raised a ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
>>>>>>         except:
>>>>>>             self.fail("Should have raised a ProgrammingError")
       
    2: class ClosedCurTests(unittest.TestCase):
    1:     def setUp(self):
    1:         pass
       
    1:     def tearDown(self):
    1:         pass
       
    1:     def CheckClosed(self):
    1:         con = sqlite.connect(":memory:")
    1:         cur = con.cursor()
    1:         cur.close()
       
    7:         for method_name in ("execute", "executemany", "executescript", "fetchall", "fetchmany", "fetchone"):
    6:             if method_name in ("execute", "executescript"):
    2:                 params = ("select 4 union select 5",)
    4:             elif method_name == "executemany":
    1:                 params = ("insert into foo(bar) values (?)", [(3,), (4,)])
                   else:
    3:                 params = []
       
    6:             try:
    6:                 method = getattr(cur, method_name)
       
    6:                 method(*params)
>>>>>>                 self.fail("Should have raised a ProgrammingError: method " + method_name)
    6:             except sqlite.ProgrammingError:
    6:                 pass
>>>>>>             except:
>>>>>>                 self.fail("Should have raised a ProgrammingError: " + method_name)
       
    1: def suite():
    1:     module_suite = unittest.makeSuite(ModuleTests, "Check")
    1:     connection_suite = unittest.makeSuite(ConnectionTests, "Check")
    1:     cursor_suite = unittest.makeSuite(CursorTests, "Check")
    1:     thread_suite = unittest.makeSuite(ThreadTests, "Check")
    1:     constructor_suite = unittest.makeSuite(ConstructorTests, "Check")
    1:     ext_suite = unittest.makeSuite(ExtensionTests, "Check")
    1:     closed_con_suite = unittest.makeSuite(ClosedConTests, "Check")
    1:     closed_cur_suite = unittest.makeSuite(ClosedCurTests, "Check")
    1:     return unittest.TestSuite((module_suite, connection_suite, cursor_suite, thread_suite, constructor_suite, ext_suite, closed_con_suite, closed_cur_suite))
       
    1: def test():
>>>>>>     runner = unittest.TextTestRunner()
>>>>>>     runner.run(suite())
       
    1: if __name__ == "__main__":
>>>>>>     test()
