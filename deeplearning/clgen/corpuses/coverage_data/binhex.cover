       """Macintosh binhex compression/decompression.
       
       easy interface:
       binhex(inputfilename, outputfilename)
       hexbin(inputfilename, outputfilename)
    1: """
       
       #
       # Jack Jansen, CWI, August 1995.
       #
       # The module is supposed to be as compatible as possible. Especially the
       # easy interface should work "as expected" on any platform.
       # XXXX Note: currently, textfiles appear in mac-form on all platforms.
       # We seem to lack a simple character-translate in python.
       # (we should probably use ISO-Latin-1 on all but the mac platform).
       # XXXX The simple routines are too simple: they expect to hold the complete
       # files in-core. Should be fixed.
       # XXXX It would be nice to handle AppleDouble format on unix
       # (for servers serving macs).
       # XXXX I don't understand what happens when you get 0x90 times the same byte on
       # input. The resulting code (xx 90 90) would appear to be interpreted as an
       # escaped *value* of 0x90. All coders I've seen appear to ignore this nicety...
       #
    1: import sys
    1: import os
    1: import struct
    1: import binascii
       
    1: __all__ = ["binhex","hexbin","Error"]
       
    2: class Error(Exception):
    1:     pass
       
       # States (what have we written)
    1: _DID_HEADER = 0
    1: _DID_DATA = 1
       
       # Various constants
    1: REASONABLY_LARGE=32768  # Minimal amount we pass the rle-coder
    1: LINELEN=64
    1: RUNCHAR=chr(0x90)   # run-length introducer
       
       #
       # This code is no longer byte-order dependent
       
       #
       # Workarounds for non-mac machines.
    1: try:
    1:     from Carbon.File import FSSpec, FInfo
>>>>>>     from MacOS import openrf
       
>>>>>>     def getfileinfo(name):
>>>>>>         finfo = FSSpec(name).FSpGetFInfo()
>>>>>>         dir, file = os.path.split(name)
               # XXX Get resource/data sizes
>>>>>>         fp = open(name, 'rb')
>>>>>>         fp.seek(0, 2)
>>>>>>         dlen = fp.tell()
>>>>>>         fp = openrf(name, '*rb')
>>>>>>         fp.seek(0, 2)
>>>>>>         rlen = fp.tell()
>>>>>>         return file, finfo, dlen, rlen
       
>>>>>>     def openrsrc(name, *mode):
>>>>>>         if not mode:
>>>>>>             mode = '*rb'
               else:
>>>>>>             mode = '*' + mode[0]
>>>>>>         return openrf(name, mode)
       
    1: except ImportError:
           #
           # Glue code for non-macintosh usage
           #
       
    2:     class FInfo:
    1:         def __init__(self):
    2:             self.Type = '????'
    2:             self.Creator = '????'
    2:             self.Flags = 0
       
    1:     def getfileinfo(name):
    1:         finfo = FInfo()
               # Quick check for textfile
    1:         fp = open(name)
    1:         data = open(name).read(256)
   16:         for c in data:
   15:             if not c.isspace() and (c<' ' or ord(c) > 0x7f):
>>>>>>                 break
               else:
    1:             finfo.Type = 'TEXT'
    1:         fp.seek(0, 2)
    1:         dsize = fp.tell()
    1:         fp.close()
    1:         dir, file = os.path.split(name)
    1:         file = file.replace(':', '-', 1)
    1:         return file, finfo, dsize, 0
       
    2:     class openrsrc:
    1:         def __init__(self, *args):
    1:             pass
       
    1:         def read(self, *args):
    1:             return ''
       
    1:         def write(self, *args):
>>>>>>             pass
       
    1:         def close(self):
    1:             pass
       
    2: class _Hqxcoderengine:
    1:     """Write data to the coder in 3-byte chunks"""
       
    1:     def __init__(self, ofp):
    1:         self.ofp = ofp
    1:         self.data = ''
    1:         self.hqxdata = ''
    1:         self.linelen = LINELEN-1
       
    1:     def write(self, data):
    1:         self.data = self.data + data
    1:         datalen = len(self.data)
    1:         todo = (datalen//3)*3
    1:         data = self.data[:todo]
    1:         self.data = self.data[todo:]
    1:         if not data:
>>>>>>             return
    1:         self.hqxdata = self.hqxdata + binascii.b2a_hqx(data)
    1:         self._flush(0)
       
    1:     def _flush(self, force):
    2:         first = 0
    3:         while first <= len(self.hqxdata)-self.linelen:
    1:             last = first + self.linelen
    1:             self.ofp.write(self.hqxdata[first:last]+'\n')
    1:             self.linelen = LINELEN
    1:             first = last
    2:         self.hqxdata = self.hqxdata[first:]
    2:         if force:
    1:             self.ofp.write(self.hqxdata + ':\n')
       
    1:     def close(self):
    1:         if self.data:
                   self.hqxdata = \
    1:                  self.hqxdata + binascii.b2a_hqx(self.data)
    1:         self._flush(1)
    1:         self.ofp.close()
    1:         del self.ofp
       
    2: class _Rlecoderengine:
    1:     """Write data to the RLE-coder in suitably large chunks"""
       
    1:     def __init__(self, ofp):
    1:         self.ofp = ofp
    1:         self.data = ''
       
    1:     def write(self, data):
    5:         self.data = self.data + data
    5:         if len(self.data) < REASONABLY_LARGE:
    5:             return
>>>>>>         rledata = binascii.rlecode_hqx(self.data)
>>>>>>         self.ofp.write(rledata)
>>>>>>         self.data = ''
       
    1:     def close(self):
    1:         if self.data:
    1:             rledata = binascii.rlecode_hqx(self.data)
    1:             self.ofp.write(rledata)
    1:         self.ofp.close()
    1:         del self.ofp
       
    2: class BinHex:
    1:     def __init__(self, name_finfo_dlen_rlen, ofp):
    1:         name, finfo, dlen, rlen = name_finfo_dlen_rlen
    1:         if type(ofp) == type(''):
    1:             ofname = ofp
    1:             ofp = open(ofname, 'w')
    1:         ofp.write('(This file must be converted with BinHex 4.0)\n\n:')
    1:         hqxer = _Hqxcoderengine(ofp)
    1:         self.ofp = _Rlecoderengine(hqxer)
    1:         self.crc = 0
    1:         if finfo is None:
>>>>>>             finfo = FInfo()
    1:         self.dlen = dlen
    1:         self.rlen = rlen
    1:         self._writeinfo(name, finfo)
    1:         self.state = _DID_HEADER
       
    1:     def _writeinfo(self, name, finfo):
    1:         nl = len(name)
    1:         if nl > 63:
>>>>>>             raise Error, 'Filename too long'
    1:         d = chr(nl) + name + '\0'
    1:         d2 = finfo.Type + finfo.Creator
       
               # Force all structs to be packed with big-endian
    1:         d3 = struct.pack('>h', finfo.Flags)
    1:         d4 = struct.pack('>ii', self.dlen, self.rlen)
    1:         info = d + d2 + d3 + d4
    1:         self._write(info)
    1:         self._writecrc()
       
    1:     def _write(self, data):
    2:         self.crc = binascii.crc_hqx(data, self.crc)
    2:         self.ofp.write(data)
       
    1:     def _writecrc(self):
               # XXXX Should this be here??
               # self.crc = binascii.crc_hqx('\0\0', self.crc)
    3:         if self.crc < 0:
>>>>>>             fmt = '>h'
               else:
    3:             fmt = '>H'
    3:         self.ofp.write(struct.pack(fmt, self.crc))
    3:         self.crc = 0
       
    1:     def write(self, data):
    1:         if self.state != _DID_HEADER:
>>>>>>             raise Error, 'Writing data at the wrong time'
    1:         self.dlen = self.dlen - len(data)
    1:         self._write(data)
       
    1:     def close_data(self):
    1:         if self.dlen != 0:
>>>>>>             raise Error, 'Incorrect data size, diff=%r' % (self.rlen,)
    1:         self._writecrc()
    1:         self.state = _DID_DATA
       
    1:     def write_rsrc(self, data):
>>>>>>         if self.state < _DID_DATA:
>>>>>>             self.close_data()
>>>>>>         if self.state != _DID_DATA:
>>>>>>             raise Error, 'Writing resource data at the wrong time'
>>>>>>         self.rlen = self.rlen - len(data)
>>>>>>         self._write(data)
       
    1:     def close(self):
    1:         if self.state is None:
>>>>>>             return
    1:         try:
    1:             if self.state < _DID_DATA:
>>>>>>                 self.close_data()
    1:             if self.state != _DID_DATA:
>>>>>>                 raise Error, 'Close at the wrong time'
    1:             if self.rlen != 0:
>>>>>>                 raise Error, \
>>>>>>                     "Incorrect resource-datasize, diff=%r" % (self.rlen,)
    1:             self._writecrc()
               finally:
    1:             self.state = None
    1:             ofp = self.ofp
    1:             del self.ofp
    1:             ofp.close()
       
    1: def binhex(inp, out):
           """(infilename, outfilename) - Create binhex-encoded copy of a file"""
    1:     finfo = getfileinfo(inp)
    1:     ofp = BinHex(finfo, out)
       
    1:     ifp = open(inp, 'rb')
           # XXXX Do textfile translation on non-mac systems
    1:     while 1:
    2:         d = ifp.read(128000)
    2:         if not d: break
    1:         ofp.write(d)
    1:     ofp.close_data()
    1:     ifp.close()
       
    1:     ifp = openrsrc(inp, 'rb')
    1:     while 1:
    1:         d = ifp.read(128000)
    1:         if not d: break
>>>>>>         ofp.write_rsrc(d)
    1:     ofp.close()
    1:     ifp.close()
       
    2: class _Hqxdecoderengine:
    1:     """Read data via the decoder in 4-byte chunks"""
       
    1:     def __init__(self, ifp):
    1:         self.ifp = ifp
    1:         self.eof = 0
       
    1:     def read(self, totalwtd):
               """Read at least wtd bytes (or until EOF)"""
    4:         decdata = ''
    4:         wtd = totalwtd
               #
               # The loop here is convoluted, since we don't really now how
               # much to decode: there may be newlines in the incoming data.
    8:         while wtd > 0:
    5:             if self.eof: return decdata
    4:             wtd = ((wtd+2)//3)*4
    4:             data = self.ifp.read(wtd)
                   #
                   # Next problem: there may not be a complete number of
                   # bytes in what we pass to a2b. Solve by yet another
                   # loop.
                   #
    4:             while 1:
    5:                 try:
                           decdatacur, self.eof = \
    5:                             binascii.a2b_hqx(data)
    4:                     break
    1:                 except binascii.Incomplete:
    1:                     pass
    1:                 newdata = self.ifp.read(1)
    1:                 if not newdata:
>>>>>>                     raise Error, \
>>>>>>                           'Premature EOF on binhex file'
    1:                 data = data + newdata
    4:             decdata = decdata + decdatacur
    4:             wtd = totalwtd - len(decdata)
    4:             if not decdata and not self.eof:
>>>>>>                 raise Error, 'Premature EOF on binhex file'
    3:         return decdata
       
    1:     def close(self):
    1:         self.ifp.close()
       
    2: class _Rledecoderengine:
    1:     """Read data via the RLE-coder"""
       
    1:     def __init__(self, ifp):
    1:         self.ifp = ifp
    1:         self.pre_buffer = ''
    1:         self.post_buffer = ''
    1:         self.eof = 0
       
    1:     def read(self, wtd):
    8:         if wtd > len(self.post_buffer):
    4:             self._fill(wtd-len(self.post_buffer))
    8:         rv = self.post_buffer[:wtd]
    8:         self.post_buffer = self.post_buffer[wtd:]
    8:         return rv
       
    1:     def _fill(self, wtd):
    4:         self.pre_buffer = self.pre_buffer + self.ifp.read(wtd+4)
    4:         if self.ifp.eof:
    1:             self.post_buffer = self.post_buffer + \
    1:                 binascii.rledecode_hqx(self.pre_buffer)
    1:             self.pre_buffer = ''
    1:             return
       
               #
               # Obfuscated code ahead. We have to take care that we don't
               # end up with an orphaned RUNCHAR later on. So, we keep a couple
               # of bytes in the buffer, depending on what the end of
               # the buffer looks like:
               # '\220\0\220' - Keep 3 bytes: repeated \220 (escaped as \220\0)
               # '?\220' - Keep 2 bytes: repeated something-else
               # '\220\0' - Escaped \220: Keep 2 bytes.
               # '?\220?' - Complete repeat sequence: decode all
               # otherwise: keep 1 byte.
               #
    3:         mark = len(self.pre_buffer)
    3:         if self.pre_buffer[-3:] == RUNCHAR + '\0' + RUNCHAR:
>>>>>>             mark = mark - 3
    3:         elif self.pre_buffer[-1] == RUNCHAR:
    1:             mark = mark - 2
    2:         elif self.pre_buffer[-2:] == RUNCHAR + '\0':
>>>>>>             mark = mark - 2
    2:         elif self.pre_buffer[-2] == RUNCHAR:
>>>>>>             pass # Decode all
               else:
    2:             mark = mark - 1
       
    3:         self.post_buffer = self.post_buffer + \
    3:             binascii.rledecode_hqx(self.pre_buffer[:mark])
    3:         self.pre_buffer = self.pre_buffer[mark:]
       
    1:     def close(self):
    1:         self.ifp.close()
       
    2: class HexBin:
    1:     def __init__(self, ifp):
    1:         if type(ifp) == type(''):
    1:             ifp = open(ifp)
               #
               # Find initial colon.
               #
    1:         while 1:
    3:             ch = ifp.read(1)
    3:             if not ch:
>>>>>>                 raise Error, "No binhex data found"
                   # Cater for \r\n terminated lines (which show up as \n\r, hence
                   # all lines start with \r)
    3:             if ch == '\r':
>>>>>>                 continue
    3:             if ch == ':':
    1:                 break
    2:             if ch != '\n':
    1:                 dummy = ifp.readline()
       
    1:         hqxifp = _Hqxdecoderengine(ifp)
    1:         self.ifp = _Rledecoderengine(hqxifp)
    1:         self.crc = 0
    1:         self._readheader()
       
    1:     def _read(self, len):
    5:         data = self.ifp.read(len)
    5:         self.crc = binascii.crc_hqx(data, self.crc)
    5:         return data
       
    1:     def _checkcrc(self):
    3:         filecrc = struct.unpack('>h', self.ifp.read(2))[0] & 0xffff
               #self.crc = binascii.crc_hqx('\0\0', self.crc)
               # XXXX Is this needed??
    3:         self.crc = self.crc & 0xffff
    3:         if filecrc != self.crc:
>>>>>>             raise Error, 'CRC error, computed %x, read %x' \
>>>>>>                   %(self.crc, filecrc)
    3:         self.crc = 0
       
    1:     def _readheader(self):
    1:         len = self._read(1)
    1:         fname = self._read(ord(len))
    1:         rest = self._read(1+4+4+2+4+4)
    1:         self._checkcrc()
       
    1:         type = rest[1:5]
    1:         creator = rest[5:9]
    1:         flags = struct.unpack('>h', rest[9:11])[0]
    1:         self.dlen = struct.unpack('>l', rest[11:15])[0]
    1:         self.rlen = struct.unpack('>l', rest[15:19])[0]
       
    1:         self.FName = fname
    1:         self.FInfo = FInfo()
    1:         self.FInfo.Creator = creator
    1:         self.FInfo.Type = type
    1:         self.FInfo.Flags = flags
       
    1:         self.state = _DID_HEADER
       
    1:     def read(self, *n):
    2:         if self.state != _DID_HEADER:
>>>>>>             raise Error, 'Read data at wrong time'
    2:         if n:
    2:             n = n[0]
    2:             n = min(n, self.dlen)
               else:
>>>>>>             n = self.dlen
    2:         rv = ''
    3:         while len(rv) < n:
    1:             rv = rv + self._read(n-len(rv))
    2:         self.dlen = self.dlen - n
    2:         return rv
       
    1:     def close_data(self):
    1:         if self.state != _DID_HEADER:
>>>>>>             raise Error, 'close_data at wrong time'
    1:         if self.dlen:
>>>>>>             dummy = self._read(self.dlen)
    1:         self._checkcrc()
    1:         self.state = _DID_DATA
       
    1:     def read_rsrc(self, *n):
    1:         if self.state == _DID_HEADER:
>>>>>>             self.close_data()
    1:         if self.state != _DID_DATA:
>>>>>>             raise Error, 'Read resource data at wrong time'
    1:         if n:
    1:             n = n[0]
    1:             n = min(n, self.rlen)
               else:
>>>>>>             n = self.rlen
    1:         self.rlen = self.rlen - n
    1:         return self._read(n)
       
    1:     def close(self):
    1:         if self.state is None:
>>>>>>             return
    1:         try:
    1:             if self.rlen:
>>>>>>                 dummy = self.read_rsrc(self.rlen)
    1:             self._checkcrc()
               finally:
    1:             self.state = None
    1:             self.ifp.close()
       
    1: def hexbin(inp, out):
           """(infilename, outfilename) - Decode binhexed file"""
    1:     ifp = HexBin(inp)
    1:     finfo = ifp.FInfo
    1:     if not out:
>>>>>>         out = ifp.FName
       
    1:     ofp = open(out, 'wb')
           # XXXX Do translation on non-mac systems
    1:     while 1:
    2:         d = ifp.read(128000)
    2:         if not d: break
    1:         ofp.write(d)
    1:     ofp.close()
    1:     ifp.close_data()
       
    1:     d = ifp.read_rsrc(128000)
    1:     if d:
>>>>>>         ofp = openrsrc(out, 'wb')
>>>>>>         ofp.write(d)
>>>>>>         while 1:
>>>>>>             d = ifp.read_rsrc(128000)
>>>>>>             if not d: break
>>>>>>             ofp.write(d)
>>>>>>         ofp.close()
       
    1:     ifp.close()
       
    1: def _test():
>>>>>>     fname = sys.argv[1]
>>>>>>     binhex(fname, fname+'.hqx')
>>>>>>     hexbin(fname+'.hqx', fname+'.viahqx')
           #hexbin(fname, fname+'.unpacked')
>>>>>>     sys.exit(1)
       
    1: if __name__ == '__main__':
>>>>>>     _test()
