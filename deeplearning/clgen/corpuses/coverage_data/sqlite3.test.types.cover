       #-*- coding: ISO-8859-1 -*-
       # pysqlite2/test/types.py: tests for type conversion and detection
       #
       # Copyright (C) 2005-2007 Gerhard Häring <gh@ghaering.de>
       #
       # This file is part of pysqlite.
       #
       # This software is provided 'as-is', without any express or implied
       # warranty.  In no event will the authors be held liable for any damages
       # arising from the use of this software.
       #
       # Permission is granted to anyone to use this software for any purpose,
       # including commercial applications, and to alter it and redistribute it
       # freely, subject to the following restrictions:
       #
       # 1. The origin of this software must not be misrepresented; you must not
       #    claim that you wrote the original software. If you use this software
       #    in a product, an acknowledgment in the product documentation would be
       #    appreciated but is not required.
       # 2. Altered source versions must be plainly marked as such, and must not be
       #    misrepresented as being the original software.
       # 3. This notice may not be removed or altered from any source distribution.
       
    1: import datetime
    1: import unittest
    1: import sqlite3 as sqlite
    1: from test import test_support
    1: try:
    1:     import zlib
>>>>>> except ImportError:
>>>>>>     zlib = None
       
       
    2: class SqliteTypeTests(unittest.TestCase):
    1:     def setUp(self):
    9:         self.con = sqlite.connect(":memory:")
    9:         self.cur = self.con.cursor()
    9:         self.cur.execute("create table test(i integer, s varchar, f number, b blob)")
       
    1:     def tearDown(self):
    9:         self.cur.close()
    9:         self.con.close()
       
    1:     def CheckString(self):
    1:         self.cur.execute("insert into test(s) values (?)", (u"Österreich",))
    1:         self.cur.execute("select s from test")
    1:         row = self.cur.fetchone()
    1:         self.assertEqual(row[0], u"Österreich")
       
    1:     def CheckSmallInt(self):
    1:         self.cur.execute("insert into test(i) values (?)", (42,))
    1:         self.cur.execute("select i from test")
    1:         row = self.cur.fetchone()
    1:         self.assertEqual(row[0], 42)
       
    1:     def CheckLargeInt(self):
    1:         num = 2**40
    1:         self.cur.execute("insert into test(i) values (?)", (num,))
    1:         self.cur.execute("select i from test")
    1:         row = self.cur.fetchone()
    1:         self.assertEqual(row[0], num)
       
    1:     def CheckFloat(self):
    1:         val = 3.14
    1:         self.cur.execute("insert into test(f) values (?)", (val,))
    1:         self.cur.execute("select f from test")
    1:         row = self.cur.fetchone()
    1:         self.assertEqual(row[0], val)
       
    1:     def CheckBlob(self):
    1:         with test_support.check_py3k_warnings():
    1:             val = buffer("Guglhupf")
    1:         self.cur.execute("insert into test(b) values (?)", (val,))
    1:         self.cur.execute("select b from test")
    1:         row = self.cur.fetchone()
    1:         self.assertEqual(row[0], val)
       
    1:     def CheckUnicodeExecute(self):
    1:         self.cur.execute(u"select 'Österreich'")
    1:         row = self.cur.fetchone()
    1:         self.assertEqual(row[0], u"Österreich")
       
    1:     def CheckNonUtf8_Default(self):
    1:         try:
    1:             self.cur.execute("select ?", (chr(150),))
>>>>>>             self.fail("should have raised a ProgrammingError")
    1:         except sqlite.ProgrammingError:
    1:             pass
       
    1:     def CheckNonUtf8_TextFactoryString(self):
    1:         orig_text_factory = self.con.text_factory
    1:         try:
    1:             self.con.text_factory = str
    1:             self.cur.execute("select ?", (chr(150),))
               finally:
    1:             self.con.text_factory = orig_text_factory
       
    1:     def CheckNonUtf8_TextFactoryOptimizedUnicode(self):
    1:         orig_text_factory = self.con.text_factory
    1:         try:
    1:             try:
    1:                 self.con.text_factory = sqlite.OptimizedUnicode
    1:                 self.cur.execute("select ?", (chr(150),))
>>>>>>                 self.fail("should have raised a ProgrammingError")
    1:             except sqlite.ProgrammingError:
    1:                 pass
               finally:
    1:             self.con.text_factory = orig_text_factory
       
    2: class DeclTypesTests(unittest.TestCase):
    2:     class Foo:
    1:         def __init__(self, _val):
    2:             self.val = _val
       
    1:         def __cmp__(self, other):
    1:             if not isinstance(other, DeclTypesTests.Foo):
>>>>>>                 raise ValueError
    1:             if self.val == other.val:
    1:                 return 0
                   else:
>>>>>>                 return 1
       
    1:         def __conform__(self, protocol):
    1:             if protocol is sqlite.PrepareProtocol:
    1:                 return self.val
                   else:
>>>>>>                 return None
       
    1:         def __str__(self):
>>>>>>             return "<%s>" % self.val
       
    1:     def setUp(self):
   12:         self.con = sqlite.connect(":memory:", detect_types=sqlite.PARSE_DECLTYPES)
   12:         self.cur = self.con.cursor()
   12:         self.cur.execute("create table test(i int, s str, f float, b bool, u unicode, foo foo, bin blob, n1 number, n2 number(5))")
       
               # override float, make them always return the same number
   13:         sqlite.converters["FLOAT"] = lambda x: 47.2
       
               # and implement two custom ones
   14:         sqlite.converters["BOOL"] = lambda x: bool(int(x))
   12:         sqlite.converters["FOO"] = DeclTypesTests.Foo
   12:         sqlite.converters["WRONG"] = lambda x: "WRONG"
   12:         sqlite.converters["NUMBER"] = float
       
    1:     def tearDown(self):
   12:         del sqlite.converters["FLOAT"]
   12:         del sqlite.converters["BOOL"]
   12:         del sqlite.converters["FOO"]
   12:         del sqlite.converters["NUMBER"]
   12:         self.cur.close()
   12:         self.con.close()
       
    1:     def CheckString(self):
               # default
    1:         self.cur.execute("insert into test(s) values (?)", ("foo",))
    1:         self.cur.execute('select s as "s [WRONG]" from test')
    1:         row = self.cur.fetchone()
    1:         self.assertEqual(row[0], "foo")
       
    1:     def CheckSmallInt(self):
               # default
    1:         self.cur.execute("insert into test(i) values (?)", (42,))
    1:         self.cur.execute("select i from test")
    1:         row = self.cur.fetchone()
    1:         self.assertEqual(row[0], 42)
       
    1:     def CheckLargeInt(self):
               # default
    1:         num = 2**40
    1:         self.cur.execute("insert into test(i) values (?)", (num,))
    1:         self.cur.execute("select i from test")
    1:         row = self.cur.fetchone()
    1:         self.assertEqual(row[0], num)
       
    1:     def CheckFloat(self):
               # custom
    1:         val = 3.14
    1:         self.cur.execute("insert into test(f) values (?)", (val,))
    1:         self.cur.execute("select f from test")
    1:         row = self.cur.fetchone()
    1:         self.assertEqual(row[0], 47.2)
       
    1:     def CheckBool(self):
               # custom
    1:         self.cur.execute("insert into test(b) values (?)", (False,))
    1:         self.cur.execute("select b from test")
    1:         row = self.cur.fetchone()
    1:         self.assertEqual(row[0], False)
       
    1:         self.cur.execute("delete from test")
    1:         self.cur.execute("insert into test(b) values (?)", (True,))
    1:         self.cur.execute("select b from test")
    1:         row = self.cur.fetchone()
    1:         self.assertEqual(row[0], True)
       
    1:     def CheckUnicode(self):
               # default
    1:         val = u"\xd6sterreich"
    1:         self.cur.execute("insert into test(u) values (?)", (val,))
    1:         self.cur.execute("select u from test")
    1:         row = self.cur.fetchone()
    1:         self.assertEqual(row[0], val)
       
    1:     def CheckFoo(self):
    1:         val = DeclTypesTests.Foo("bla")
    1:         self.cur.execute("insert into test(foo) values (?)", (val,))
    1:         self.cur.execute("select foo from test")
    1:         row = self.cur.fetchone()
    1:         self.assertEqual(row[0], val)
       
    1:     def CheckUnsupportedSeq(self):
    2:         class Bar: pass
    1:         val = Bar()
    1:         try:
    1:             self.cur.execute("insert into test(f) values (?)", (val,))
>>>>>>             self.fail("should have raised an InterfaceError")
    1:         except sqlite.InterfaceError:
    1:             pass
>>>>>>         except:
>>>>>>             self.fail("should have raised an InterfaceError")
       
    1:     def CheckUnsupportedDict(self):
    2:         class Bar: pass
    1:         val = Bar()
    1:         try:
    1:             self.cur.execute("insert into test(f) values (:val)", {"val": val})
>>>>>>             self.fail("should have raised an InterfaceError")
    1:         except sqlite.InterfaceError:
    1:             pass
>>>>>>         except:
>>>>>>             self.fail("should have raised an InterfaceError")
       
    1:     def CheckBlob(self):
               # default
    1:         with test_support.check_py3k_warnings():
    1:             val = buffer("Guglhupf")
    1:         self.cur.execute("insert into test(bin) values (?)", (val,))
    1:         self.cur.execute("select bin from test")
    1:         row = self.cur.fetchone()
    1:         self.assertEqual(row[0], val)
       
    1:     def CheckNumber1(self):
    1:         self.cur.execute("insert into test(n1) values (5)")
    1:         value = self.cur.execute("select n1 from test").fetchone()[0]
               # if the converter is not used, it's an int instead of a float
    1:         self.assertEqual(type(value), float)
       
    1:     def CheckNumber2(self):
               """Checks whether converter names are cut off at '(' characters"""
    1:         self.cur.execute("insert into test(n2) values (5)")
    1:         value = self.cur.execute("select n2 from test").fetchone()[0]
               # if the converter is not used, it's an int instead of a float
    1:         self.assertEqual(type(value), float)
       
    2: class ColNamesTests(unittest.TestCase):
    1:     def setUp(self):
    5:         self.con = sqlite.connect(":memory:", detect_types=sqlite.PARSE_COLNAMES)
    5:         self.cur = self.con.cursor()
    5:         self.cur.execute("create table test(x foo)")
       
    5:         sqlite.converters["FOO"] = lambda x: "[%s]" % x
    6:         sqlite.converters["BAR"] = lambda x: "<%s>" % x
    5:         sqlite.converters["EXC"] = lambda x: 5 // 0
    6:         sqlite.converters["B1B1"] = lambda x: "MARKER"
       
    1:     def tearDown(self):
    5:         del sqlite.converters["FOO"]
    5:         del sqlite.converters["BAR"]
    5:         del sqlite.converters["EXC"]
    5:         del sqlite.converters["B1B1"]
    5:         self.cur.close()
    5:         self.con.close()
       
    1:     def CheckDeclTypeNotUsed(self):
               """
               Assures that the declared type is not used when PARSE_DECLTYPES
               is not set.
               """
    1:         self.cur.execute("insert into test(x) values (?)", ("xxx",))
    1:         self.cur.execute("select x from test")
    1:         val = self.cur.fetchone()[0]
    1:         self.assertEqual(val, "xxx")
       
    1:     def CheckNone(self):
    1:         self.cur.execute("insert into test(x) values (?)", (None,))
    1:         self.cur.execute("select x from test")
    1:         val = self.cur.fetchone()[0]
    1:         self.assertEqual(val, None)
       
    1:     def CheckColName(self):
    1:         self.cur.execute("insert into test(x) values (?)", ("xxx",))
    1:         self.cur.execute('select x as "x [bar]" from test')
    1:         val = self.cur.fetchone()[0]
    1:         self.assertEqual(val, "<xxx>")
       
               # Check if the stripping of colnames works. Everything after the first
               # whitespace should be stripped.
    1:         self.assertEqual(self.cur.description[0][0], "x")
       
    1:     def CheckCaseInConverterName(self):
    1:         self.cur.execute("""select 'other' as "x [b1b1]\"""")
    1:         val = self.cur.fetchone()[0]
    1:         self.assertEqual(val, "MARKER")
       
    1:     def CheckCursorDescriptionNoRow(self):
               """
               cursor.description should at least provide the column name(s), even if
               no row returned.
               """
    1:         self.cur.execute("select * from test where 0 = 1")
    1:         self.assertEqual(self.cur.description[0][0], "x")
       
    2: class ObjectAdaptationTests(unittest.TestCase):
    1:     def cast(obj):
    1:         return float(obj)
    1:     cast = staticmethod(cast)
       
    1:     def setUp(self):
    1:         self.con = sqlite.connect(":memory:")
    1:         try:
    1:             del sqlite.adapters[int]
    1:         except:
    1:             pass
    1:         sqlite.register_adapter(int, ObjectAdaptationTests.cast)
    1:         self.cur = self.con.cursor()
       
    1:     def tearDown(self):
    1:         del sqlite.adapters[(int, sqlite.PrepareProtocol)]
    1:         self.cur.close()
    1:         self.con.close()
       
    1:     def CheckCasterIsUsed(self):
    1:         self.cur.execute("select ?", (4,))
    1:         val = self.cur.fetchone()[0]
    1:         self.assertEqual(type(val), float)
       
    2: @unittest.skipUnless(zlib, "requires zlib")
    1: class BinaryConverterTests(unittest.TestCase):
    1:     def convert(s):
    1:         return zlib.decompress(s)
    1:     convert = staticmethod(convert)
       
    1:     def setUp(self):
    1:         self.con = sqlite.connect(":memory:", detect_types=sqlite.PARSE_COLNAMES)
    1:         sqlite.register_converter("bin", BinaryConverterTests.convert)
       
    1:     def tearDown(self):
    1:         self.con.close()
       
    1:     def CheckBinaryInputForConverter(self):
    1:         testdata = "abcdefg" * 10
    1:         with test_support.check_py3k_warnings():
    1:             result = self.con.execute('select ? as "x [bin]"', (buffer(zlib.compress(testdata)),)).fetchone()[0]
    1:         self.assertEqual(testdata, result)
       
    2: class DateTimeTests(unittest.TestCase):
    1:     def setUp(self):
    5:         self.con = sqlite.connect(":memory:", detect_types=sqlite.PARSE_DECLTYPES)
    5:         self.cur = self.con.cursor()
    5:         self.cur.execute("create table test(d date, ts timestamp)")
       
    1:     def tearDown(self):
    5:         self.cur.close()
    5:         self.con.close()
       
    1:     def CheckSqliteDate(self):
    1:         d = sqlite.Date(2004, 2, 14)
    1:         self.cur.execute("insert into test(d) values (?)", (d,))
    1:         self.cur.execute("select d from test")
    1:         d2 = self.cur.fetchone()[0]
    1:         self.assertEqual(d, d2)
       
    1:     def CheckSqliteTimestamp(self):
    1:         ts = sqlite.Timestamp(2004, 2, 14, 7, 15, 0)
    1:         self.cur.execute("insert into test(ts) values (?)", (ts,))
    1:         self.cur.execute("select ts from test")
    1:         ts2 = self.cur.fetchone()[0]
    1:         self.assertEqual(ts, ts2)
       
    1:     def CheckSqlTimestamp(self):
               # The date functions are only available in SQLite version 3.1 or later
    1:         if sqlite.sqlite_version_info < (3, 1):
>>>>>>             return
       
    1:         now = datetime.datetime.utcnow()
    1:         self.cur.execute("insert into test(ts) values (current_timestamp)")
    1:         self.cur.execute("select ts from test")
    1:         ts = self.cur.fetchone()[0]
    1:         self.assertEqual(type(ts), datetime.datetime)
    1:         self.assertEqual(ts.year, now.year)
       
    1:     def CheckDateTimeSubSeconds(self):
    1:         ts = sqlite.Timestamp(2004, 2, 14, 7, 15, 0, 500000)
    1:         self.cur.execute("insert into test(ts) values (?)", (ts,))
    1:         self.cur.execute("select ts from test")
    1:         ts2 = self.cur.fetchone()[0]
    1:         self.assertEqual(ts, ts2)
       
    1:     def CheckDateTimeSubSecondsFloatingPoint(self):
    1:         ts = sqlite.Timestamp(2004, 2, 14, 7, 15, 0, 510241)
    1:         self.cur.execute("insert into test(ts) values (?)", (ts,))
    1:         self.cur.execute("select ts from test")
    1:         ts2 = self.cur.fetchone()[0]
    1:         self.assertEqual(ts, ts2)
       
    1: def suite():
    1:     sqlite_type_suite = unittest.makeSuite(SqliteTypeTests, "Check")
    1:     decltypes_type_suite = unittest.makeSuite(DeclTypesTests, "Check")
    1:     colnames_type_suite = unittest.makeSuite(ColNamesTests, "Check")
    1:     adaptation_suite = unittest.makeSuite(ObjectAdaptationTests, "Check")
    1:     bin_suite = unittest.makeSuite(BinaryConverterTests, "Check")
    1:     date_suite = unittest.makeSuite(DateTimeTests, "Check")
    1:     return unittest.TestSuite((sqlite_type_suite, decltypes_type_suite, colnames_type_suite, adaptation_suite, bin_suite, date_suite))
       
    1: def test():
>>>>>>     runner = unittest.TextTestRunner()
>>>>>>     runner.run(suite())
       
    1: if __name__ == "__main__":
>>>>>>     test()
