       #! /usr/bin/env python
       
       """Python interface for the 'lsprof' profiler.
          Compatible with the 'profile' module.
    1: """
       
    1: __all__ = ["run", "runctx", "help", "Profile"]
       
    1: import _lsprof
       
       # ____________________________________________________________
       # Simple interface
       
    1: def run(statement, filename=None, sort=-1):
           """Run statement under profiler optionally saving results in filename
       
           This function takes a single argument that can be passed to the
           "exec" statement, and an optional file name.  In all cases this
           routine attempts to "exec" its first argument and gather profiling
           statistics from the execution. If no file name is present, then this
           function automatically prints a simple profiling report, sorted by the
           standard name string (file/line/function-name) that is presented in
           each line.
           """
>>>>>>     prof = Profile()
>>>>>>     result = None
>>>>>>     try:
>>>>>>         try:
>>>>>>             prof = prof.run(statement)
>>>>>>         except SystemExit:
>>>>>>             pass
           finally:
>>>>>>         if filename is not None:
>>>>>>             prof.dump_stats(filename)
               else:
>>>>>>             result = prof.print_stats(sort)
>>>>>>     return result
       
    1: def runctx(statement, globals, locals, filename=None, sort=-1):
           """Run statement under profiler, supplying your own globals and locals,
           optionally saving results in filename.
       
           statement and filename have the same semantics as profile.run
           """
>>>>>>     prof = Profile()
>>>>>>     result = None
>>>>>>     try:
>>>>>>         try:
>>>>>>             prof = prof.runctx(statement, globals, locals)
>>>>>>         except SystemExit:
>>>>>>             pass
           finally:
>>>>>>         if filename is not None:
>>>>>>             prof.dump_stats(filename)
               else:
>>>>>>             result = prof.print_stats(sort)
>>>>>>     return result
       
       # Backwards compatibility.
    1: def help():
>>>>>>     print "Documentation for the profile/cProfile modules can be found "
>>>>>>     print "in the Python Library Reference, section 'The Python Profiler'."
       
       # ____________________________________________________________
       
    2: class Profile(_lsprof.Profiler):
           """Profile(custom_timer=None, time_unit=None, subcalls=True, builtins=True)
       
           Builds a profiler object using the specified timer function.
           The default timer is a fast built-in one based on real time.
           For custom timer functions returning integers, time_unit can
           be a float specifying a scale (i.e. how long each integer unit
           is, in seconds).
    1:     """
       
           # Most of the functionality is in the base class.
           # This subclass only adds convenient and backward-compatible methods.
       
    1:     def print_stats(self, sort=-1):
>>>>>>         import pstats
>>>>>>         pstats.Stats(self).strip_dirs().sort_stats(sort).print_stats()
       
    1:     def dump_stats(self, file):
>>>>>>         import marshal
>>>>>>         f = open(file, 'wb')
>>>>>>         self.create_stats()
>>>>>>         marshal.dump(self.stats, f)
>>>>>>         f.close()
       
    1:     def create_stats(self):
    7:         self.disable()
    7:         self.snapshot_stats()
       
    1:     def snapshot_stats(self):
    7:         entries = self.getstats()
    7:         self.stats = {}
    7:         callersdicts = {}
               # call information
   64:         for entry in entries:
   57:             func = label(entry.code)
   57:             nc = entry.callcount         # ncalls column of pstats (before '/')
   57:             cc = nc - entry.reccallcount # ncalls column of pstats (after '/')
   57:             tt = entry.inlinetime        # tottime column of pstats
   57:             ct = entry.totaltime         # cumtime column of pstats
   57:             callers = {}
   57:             callersdicts[id(entry.code)] = callers
   57:             self.stats[func] = cc, nc, tt, ct, callers
               # subcall information
   64:         for entry in entries:
   57:             if entry.calls:
   31:                 func = label(entry.code)
   89:                 for subentry in entry.calls:
   58:                     try:
   58:                         callers = callersdicts[id(subentry.code)]
>>>>>>                     except KeyError:
>>>>>>                         continue
   58:                     nc = subentry.callcount
   58:                     cc = nc - subentry.reccallcount
   58:                     tt = subentry.inlinetime
   58:                     ct = subentry.totaltime
   58:                     if func in callers:
>>>>>>                         prev = callers[func]
>>>>>>                         nc += prev[0]
>>>>>>                         cc += prev[1]
>>>>>>                         tt += prev[2]
>>>>>>                         ct += prev[3]
   58:                     callers[func] = nc, cc, tt, ct
       
           # The following two methods can be called by clients to use
           # a profiler to profile a statement, given as a string.
       
    1:     def run(self, cmd):
>>>>>>         import __main__
>>>>>>         dict = __main__.__dict__
>>>>>>         return self.runctx(cmd, dict, dict)
       
    1:     def runctx(self, cmd, globals, locals):
    5:         self.enable()
    5:         try:
    5:             exec cmd in globals, locals
               finally:
    5:             self.disable()
    5:         return self
       
           # This method is more useful to profile a single function call.
    1:     def runcall(self, func, *args, **kw):
>>>>>>         self.enable()
>>>>>>         try:
>>>>>>             return func(*args, **kw)
               finally:
>>>>>>             self.disable()
       
       # ____________________________________________________________
       
    1: def label(code):
   88:     if isinstance(code, str):
   26:         return ('~', 0, code)    # built-in functions ('~' sorts at the end)
           else:
   62:         return (code.co_filename, code.co_firstlineno, code.co_name)
       
       # ____________________________________________________________
       
    1: def main():
>>>>>>     import os, sys
>>>>>>     from optparse import OptionParser
>>>>>>     usage = "cProfile.py [-o output_file_path] [-s sort] scriptfile [arg] ..."
>>>>>>     parser = OptionParser(usage=usage)
>>>>>>     parser.allow_interspersed_args = False
>>>>>>     parser.add_option('-o', '--outfile', dest="outfile",
>>>>>>         help="Save stats to <outfile>", default=None)
>>>>>>     parser.add_option('-s', '--sort', dest="sort",
>>>>>>         help="Sort order when printing to stdout, based on pstats.Stats class",
>>>>>>         default=-1)
       
>>>>>>     if not sys.argv[1:]:
>>>>>>         parser.print_usage()
>>>>>>         sys.exit(2)
       
>>>>>>     (options, args) = parser.parse_args()
>>>>>>     sys.argv[:] = args
       
>>>>>>     if len(args) > 0:
>>>>>>         progname = args[0]
>>>>>>         sys.path.insert(0, os.path.dirname(progname))
>>>>>>         with open(progname, 'rb') as fp:
>>>>>>             code = compile(fp.read(), progname, 'exec')
>>>>>>         globs = {
>>>>>>             '__file__': progname,
>>>>>>             '__name__': '__main__',
>>>>>>             '__package__': None,
               }
>>>>>>         runctx(code, globs, None, options.outfile, options.sort)
           else:
>>>>>>         parser.print_usage()
>>>>>>     return parser
       
       # When invoked as main program, invoke the profiler on a script
    1: if __name__ == '__main__':
>>>>>>     main()
