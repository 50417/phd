    1: """Test cases for the fnmatch module."""
       
    1: from test import test_support
    1: import unittest
    1: import os
       
    1: from fnmatch import (fnmatch, fnmatchcase, translate, filter,
                            _MAXCACHE, _cache, _purge)
       
       
    2: class FnmatchTestCase(unittest.TestCase):
       
    1:     def tearDown(self):
    7:         _purge()
       
    1:     def check_match(self, filename, pattern, should_match=True, fn=fnmatch):
   46:         if should_match:
   33:             self.assertTrue(fn(filename, pattern),
   33:                          "expected %r to match pattern %r"
   33:                          % (filename, pattern))
               else:
   13:             self.assertFalse(fn(filename, pattern),
   13:                          "expected %r not to match pattern %r"
   13:                          % (filename, pattern))
       
    1:     def test_fnmatch(self):
    1:         check = self.check_match
    1:         check('abc', 'abc')
    1:         check('abc', '?*?')
    1:         check('abc', '???*')
    1:         check('abc', '*???')
    1:         check('abc', '???')
    1:         check('abc', '*')
    1:         check('abc', 'ab[cd]')
    1:         check('abc', 'ab[!de]')
    1:         check('abc', 'ab[de]', False)
    1:         check('a', '??', False)
    1:         check('a', 'b', False)
       
               # these test that '\' is handled correctly in character sets;
               # see SF bug #409651
    1:         check('\\', r'[\]')
    1:         check('a', r'[!\]')
    1:         check('\\', r'[!\]', False)
       
               # test that filenames with newlines in them are handled correctly.
               # http://bugs.python.org/issue6665
    1:         check('foo\nbar', 'foo*')
    1:         check('foo\nbar\n', 'foo*')
    1:         check('\nfoo', 'foo*', False)
    1:         check('\n', '*')
       
    1:     def test_mix_unicode_str(self):
    1:         check = self.check_match
    1:         check('test', u'*')
    1:         check(u'test', '*')
    1:         check('test', u'*', fn=fnmatchcase)
    1:         check(u'test', '*', fn=fnmatchcase)
    1:         with test_support.check_warnings(("", UnicodeWarning), quiet=True):
    1:             check('test\xff', u'*\xff')
    1:             check(u'test\xff', '*\xff')
    1:             check('test\xff', u'*\xff', fn=fnmatchcase)
    1:             check(u'test\xff', '*\xff', fn=fnmatchcase)
       
    1:     def test_fnmatchcase(self):
    1:         check = self.check_match
    1:         check('abc', 'abc', True, fnmatchcase)
    1:         check('AbC', 'abc', False, fnmatchcase)
    1:         check('abc', 'AbC', False, fnmatchcase)
    1:         check('AbC', 'AbC', True, fnmatchcase)
       
    1:         check('usr/bin', 'usr/bin', True, fnmatchcase)
    1:         check('usr\\bin', 'usr/bin', False, fnmatchcase)
    1:         check('usr/bin', 'usr\\bin', False, fnmatchcase)
    1:         check('usr\\bin', 'usr\\bin', True, fnmatchcase)
       
    1:     def test_cache_clearing(self):
               # check that caches do not grow too large
               # http://bugs.python.org/issue7846
       
               # string pattern cache
  102:         for i in range(_MAXCACHE + 1):
  101:             fnmatch('foo', '?' * i)
       
    1:         self.assertLessEqual(len(_cache), _MAXCACHE)
       
    1:     @test_support.requires_unicode
           def test_unicode(self):
    1:         with test_support.check_warnings(("", UnicodeWarning), quiet=True):
    1:             self.check_match(u'test', u'te*')
    1:             self.check_match(u'test\xff', u'te*\xff')
    1:             self.check_match(u'test'+unichr(0x20ac), u'te*'+unichr(0x20ac))
    1:             self.check_match(u'foo\nbar', u'foo*')
       
    1:     def test_case(self):
    1:         ignorecase = os.path.normcase('ABC') == os.path.normcase('abc')
    1:         check = self.check_match
    1:         check('abc', 'abc')
    1:         check('AbC', 'abc', ignorecase)
    1:         check('abc', 'AbC', ignorecase)
    1:         check('AbC', 'AbC')
       
    1:     def test_sep(self):
    1:         normsep = os.path.normcase('\\') == os.path.normcase('/')
    1:         check = self.check_match
    1:         check('usr/bin', 'usr/bin')
    1:         check('usr\\bin', 'usr/bin', normsep)
    1:         check('usr/bin', 'usr\\bin', normsep)
    1:         check('usr\\bin', 'usr\\bin')
       
       
    2: class TranslateTestCase(unittest.TestCase):
       
    1:     def test_translate(self):
    1:         self.assertEqual(translate('*'), r'.*\Z(?ms)')
    1:         self.assertEqual(translate('?'), r'.\Z(?ms)')
    1:         self.assertEqual(translate('a?b*'), r'a.b.*\Z(?ms)')
    1:         self.assertEqual(translate('[abc]'), r'[abc]\Z(?ms)')
    1:         self.assertEqual(translate('[]]'), r'[]]\Z(?ms)')
    1:         self.assertEqual(translate('[!x]'), r'[^x]\Z(?ms)')
    1:         self.assertEqual(translate('[^x]'), r'[\^x]\Z(?ms)')
    1:         self.assertEqual(translate('[x'), r'\[x\Z(?ms)')
       
       
    2: class FilterTestCase(unittest.TestCase):
       
    1:     def test_filter(self):
    1:         self.assertEqual(filter(['Python', 'Ruby', 'Perl', 'Tcl'], 'P*'),
    1:                          ['Python', 'Perl'])
    1:         self.assertEqual(filter([u'Python', u'Ruby', u'Perl', u'Tcl'], u'P*'),
    1:                          [u'Python', u'Perl'])
    1:         with test_support.check_warnings(("", UnicodeWarning), quiet=True):
    1:             self.assertEqual(filter([u'test\xff'], u'*\xff'), [u'test\xff'])
       
    1:     @test_support.requires_unicode
           def test_mix_bytes_str(self):
    1:         with test_support.check_warnings(("", UnicodeWarning), quiet=True):
    1:             self.assertEqual(filter(['test'], u'*'), ['test'])
    1:             self.assertEqual(filter([u'test'], '*'), [u'test'])
    1:             self.assertEqual(filter(['test\xff'], u'*'), ['test\xff'])
    1:             self.assertEqual(filter([u'test\xff'], '*'), [u'test\xff'])
    1:             self.assertEqual(filter(['test\xff'], u'*\xff'), ['test\xff'])
    1:             self.assertEqual(filter([u'test\xff'], '*\xff'), [u'test\xff'])
       
    1:     def test_case(self):
    1:         ignorecase = os.path.normcase('P') == os.path.normcase('p')
    1:         self.assertEqual(filter(['Test.py', 'Test.rb', 'Test.PL'], '*.p*'),
    1:                          ['Test.py', 'Test.PL'] if ignorecase else ['Test.py'])
    1:         self.assertEqual(filter(['Test.py', 'Test.rb', 'Test.PL'], '*.P*'),
    1:                          ['Test.py', 'Test.PL'] if ignorecase else ['Test.PL'])
       
    1:     def test_sep(self):
    1:         normsep = os.path.normcase('\\') == os.path.normcase('/')
    1:         self.assertEqual(filter(['usr/bin', 'usr', 'usr\\lib'], 'usr/*'),
    1:                          ['usr/bin', 'usr\\lib'] if normsep else ['usr/bin'])
    1:         self.assertEqual(filter(['usr/bin', 'usr', 'usr\\lib'], 'usr\\*'),
    1:                          ['usr/bin', 'usr\\lib'] if normsep else ['usr\\lib'])
       
       
    1: def test_main():
    1:     test_support.run_unittest(FnmatchTestCase, TranslateTestCase, FilterTestCase)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
