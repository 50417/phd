       #!/usr/bin/env python
       """ Python Character Mapping Codec for ROT13.
       
           See http://ucsub.colorado.edu/~kominek/rot13/ for details.
       
           Written by Marc-Andre Lemburg (mal@lemburg.com).
       
    1: """#"
       
    1: import codecs
       
       ### Codec APIs
       
    2: class Codec(codecs.Codec):
       
    1:     def encode(self,input,errors='strict'):
   11:         return codecs.charmap_encode(input,errors,encoding_map)
       
    1:     def decode(self,input,errors='strict'):
   37:         return codecs.charmap_decode(input,errors,decoding_map)
       
    2: class IncrementalEncoder(codecs.IncrementalEncoder):
    1:     def encode(self, input, final=False):
   34:         return codecs.charmap_encode(input,self.errors,encoding_map)[0]
       
    2: class IncrementalDecoder(codecs.IncrementalDecoder):
    1:     def decode(self, input, final=False):
   34:         return codecs.charmap_decode(input,self.errors,decoding_map)[0]
       
    2: class StreamWriter(Codec,codecs.StreamWriter):
    1:     pass
       
    2: class StreamReader(Codec,codecs.StreamReader):
    1:     pass
       
       ### encodings module API
       
    1: def getregentry():
    2:     return codecs.CodecInfo(
    2:         name='rot-13',
    2:         encode=Codec().encode,
    2:         decode=Codec().decode,
    2:         incrementalencoder=IncrementalEncoder,
    2:         incrementaldecoder=IncrementalDecoder,
    2:         streamwriter=StreamWriter,
    2:         streamreader=StreamReader,
    2:         _is_text_encoding=False,
           )
       
       ### Decoding Map
       
    1: decoding_map = codecs.make_identity_dict(range(256))
    1: decoding_map.update({
    1:    0x0041: 0x004e,
    1:    0x0042: 0x004f,
    1:    0x0043: 0x0050,
    1:    0x0044: 0x0051,
    1:    0x0045: 0x0052,
    1:    0x0046: 0x0053,
    1:    0x0047: 0x0054,
    1:    0x0048: 0x0055,
    1:    0x0049: 0x0056,
    1:    0x004a: 0x0057,
    1:    0x004b: 0x0058,
    1:    0x004c: 0x0059,
    1:    0x004d: 0x005a,
    1:    0x004e: 0x0041,
    1:    0x004f: 0x0042,
    1:    0x0050: 0x0043,
    1:    0x0051: 0x0044,
    1:    0x0052: 0x0045,
    1:    0x0053: 0x0046,
    1:    0x0054: 0x0047,
    1:    0x0055: 0x0048,
    1:    0x0056: 0x0049,
    1:    0x0057: 0x004a,
    1:    0x0058: 0x004b,
    1:    0x0059: 0x004c,
    1:    0x005a: 0x004d,
    1:    0x0061: 0x006e,
    1:    0x0062: 0x006f,
    1:    0x0063: 0x0070,
    1:    0x0064: 0x0071,
    1:    0x0065: 0x0072,
    1:    0x0066: 0x0073,
    1:    0x0067: 0x0074,
    1:    0x0068: 0x0075,
    1:    0x0069: 0x0076,
    1:    0x006a: 0x0077,
    1:    0x006b: 0x0078,
    1:    0x006c: 0x0079,
    1:    0x006d: 0x007a,
    1:    0x006e: 0x0061,
    1:    0x006f: 0x0062,
    1:    0x0070: 0x0063,
    1:    0x0071: 0x0064,
    1:    0x0072: 0x0065,
    1:    0x0073: 0x0066,
    1:    0x0074: 0x0067,
    1:    0x0075: 0x0068,
    1:    0x0076: 0x0069,
    1:    0x0077: 0x006a,
    1:    0x0078: 0x006b,
    1:    0x0079: 0x006c,
    1:    0x007a: 0x006d,
       })
       
       ### Encoding Map
       
    1: encoding_map = codecs.make_encoding_map(decoding_map)
       
       ### Filter API
       
    1: def rot13(infile, outfile):
>>>>>>     outfile.write(infile.read().encode('rot-13'))
       
    1: if __name__ == '__main__':
>>>>>>     import sys
>>>>>>     rot13(sys.stdin, sys.stdout)
