       # Copyright 2007 Google, Inc. All Rights Reserved.
       # Licensed to PSF under a Contributor Agreement.
       
    1: """Unit tests for abc.py."""
       
    1: import unittest, weakref
    1: from test import test_support
       
    1: import abc
    1: from inspect import isabstract
       
       
    2: class TestABC(unittest.TestCase):
       
    1:     def test_abstractmethod_basics(self):
    1:         @abc.abstractmethod
>>>>>>         def foo(self): pass
    1:         self.assertTrue(foo.__isabstractmethod__)
    1:         def bar(self): pass
    1:         self.assertFalse(hasattr(bar, "__isabstractmethod__"))
       
    1:     def test_abstractproperty_basics(self):
    1:         @abc.abstractproperty
>>>>>>         def foo(self): pass
    1:         self.assertTrue(foo.__isabstractmethod__)
    1:         def bar(self): pass
    1:         self.assertFalse(hasattr(bar, "__isabstractmethod__"))
       
    2:         class C:
    1:             __metaclass__ = abc.ABCMeta
    1:             @abc.abstractproperty
    1:             def foo(self): return 3
    2:         class D(C):
    1:             @property
    1:             def foo(self): return super(D, self).foo
    1:         self.assertEqual(D().foo, 3)
       
    1:     def test_abstractmethod_integration(self):
    3:         for abstractthing in [abc.abstractmethod, abc.abstractproperty]:
    4:             class C:
    2:                 __metaclass__ = abc.ABCMeta
    2:                 @abstractthing
>>>>>>                 def foo(self): pass  # abstract
    2:                 def bar(self): pass  # concrete
    2:             self.assertEqual(C.__abstractmethods__, set(["foo"]))
    2:             self.assertRaises(TypeError, C)  # because foo is abstract
    2:             self.assertTrue(isabstract(C))
    4:             class D(C):
    2:                 def bar(self): pass  # concrete override of concrete
    2:             self.assertEqual(D.__abstractmethods__, set(["foo"]))
    2:             self.assertRaises(TypeError, D)  # because foo is still abstract
    2:             self.assertTrue(isabstract(D))
    4:             class E(D):
    2:                 def foo(self): pass
    2:             self.assertEqual(E.__abstractmethods__, set())
    2:             E()  # now foo is concrete, too
    2:             self.assertFalse(isabstract(E))
    4:             class F(E):
    2:                 @abstractthing
>>>>>>                 def bar(self): pass  # abstract override of concrete
    2:             self.assertEqual(F.__abstractmethods__, set(["bar"]))
    2:             self.assertRaises(TypeError, F)  # because bar is abstract now
    2:             self.assertTrue(isabstract(F))
       
    1:     def test_subclass_oldstyle_class(self):
    2:         class A:
    1:             __metaclass__ = abc.ABCMeta
    2:         class OldstyleClass:
    1:             pass
    1:         self.assertFalse(issubclass(OldstyleClass, A))
    1:         self.assertFalse(issubclass(A, OldstyleClass))
       
    1:     def test_isinstance_class(self):
    2:         class A:
    1:             __metaclass__ = abc.ABCMeta
    2:         class OldstyleClass:
    1:             pass
    1:         self.assertFalse(isinstance(OldstyleClass, A))
    1:         self.assertTrue(isinstance(OldstyleClass, type(OldstyleClass)))
    1:         self.assertFalse(isinstance(A, OldstyleClass))
               # This raises a recursion depth error, but is low-priority:
               # self.assertTrue(isinstance(A, abc.ABCMeta))
       
    1:     def test_registration_basics(self):
    2:         class A:
    1:             __metaclass__ = abc.ABCMeta
    2:         class B(object):
    1:             pass
    1:         b = B()
    1:         self.assertFalse(issubclass(B, A))
    1:         self.assertFalse(issubclass(B, (A,)))
    1:         self.assertNotIsInstance(b, A)
    1:         self.assertNotIsInstance(b, (A,))
    1:         A.register(B)
    1:         self.assertTrue(issubclass(B, A))
    1:         self.assertTrue(issubclass(B, (A,)))
    1:         self.assertIsInstance(b, A)
    1:         self.assertIsInstance(b, (A,))
    2:         class C(B):
    1:             pass
    1:         c = C()
    1:         self.assertTrue(issubclass(C, A))
    1:         self.assertTrue(issubclass(C, (A,)))
    1:         self.assertIsInstance(c, A)
    1:         self.assertIsInstance(c, (A,))
       
    1:     def test_isinstance_invalidation(self):
    2:         class A:
    1:             __metaclass__ = abc.ABCMeta
    2:         class B(object):
    1:             pass
    1:         b = B()
    1:         self.assertFalse(isinstance(b, A))
    1:         self.assertFalse(isinstance(b, (A,)))
    1:         A.register(B)
    1:         self.assertTrue(isinstance(b, A))
    1:         self.assertTrue(isinstance(b, (A,)))
       
    1:     def test_registration_builtins(self):
    2:         class A:
    1:             __metaclass__ = abc.ABCMeta
    1:         A.register(int)
    1:         self.assertIsInstance(42, A)
    1:         self.assertIsInstance(42, (A,))
    1:         self.assertTrue(issubclass(int, A))
    1:         self.assertTrue(issubclass(int, (A,)))
    2:         class B(A):
    1:             pass
    1:         B.register(basestring)
    1:         self.assertIsInstance("", A)
    1:         self.assertIsInstance("", (A,))
    1:         self.assertTrue(issubclass(str, A))
    1:         self.assertTrue(issubclass(str, (A,)))
       
    1:     def test_registration_edge_cases(self):
    2:         class A:
    1:             __metaclass__ = abc.ABCMeta
    1:         A.register(A)  # should pass silently
    2:         class A1(A):
    1:             pass
    1:         self.assertRaises(RuntimeError, A1.register, A)  # cycles not allowed
    2:         class B(object):
    1:             pass
    1:         A1.register(B)  # ok
    1:         A1.register(B)  # should pass silently
    2:         class C(A):
    1:             pass
    1:         A.register(C)  # should pass silently
    1:         self.assertRaises(RuntimeError, C.register, A)  # cycles not allowed
    1:         C.register(B)  # ok
       
    1:     def test_register_non_class(self):
    2:         class A(object):
    1:             __metaclass__ = abc.ABCMeta
    1:         self.assertRaisesRegexp(TypeError, "Can only register classes",
    1:                                 A.register, 4)
       
    1:     def test_registration_transitiveness(self):
    2:         class A:
    1:             __metaclass__ = abc.ABCMeta
    1:         self.assertTrue(issubclass(A, A))
    1:         self.assertTrue(issubclass(A, (A,)))
    2:         class B:
    1:             __metaclass__ = abc.ABCMeta
    1:         self.assertFalse(issubclass(A, B))
    1:         self.assertFalse(issubclass(A, (B,)))
    1:         self.assertFalse(issubclass(B, A))
    1:         self.assertFalse(issubclass(B, (A,)))
    2:         class C:
    1:             __metaclass__ = abc.ABCMeta
    1:         A.register(B)
    2:         class B1(B):
    1:             pass
    1:         self.assertTrue(issubclass(B1, A))
    1:         self.assertTrue(issubclass(B1, (A,)))
    2:         class C1(C):
    1:             pass
    1:         B1.register(C1)
    1:         self.assertFalse(issubclass(C, B))
    1:         self.assertFalse(issubclass(C, (B,)))
    1:         self.assertFalse(issubclass(C, B1))
    1:         self.assertFalse(issubclass(C, (B1,)))
    1:         self.assertTrue(issubclass(C1, A))
    1:         self.assertTrue(issubclass(C1, (A,)))
    1:         self.assertTrue(issubclass(C1, B))
    1:         self.assertTrue(issubclass(C1, (B,)))
    1:         self.assertTrue(issubclass(C1, B1))
    1:         self.assertTrue(issubclass(C1, (B1,)))
    1:         C1.register(int)
    2:         class MyInt(int):
    1:             pass
    1:         self.assertTrue(issubclass(MyInt, A))
    1:         self.assertTrue(issubclass(MyInt, (A,)))
    1:         self.assertIsInstance(42, A)
    1:         self.assertIsInstance(42, (A,))
       
    1:     def test_all_new_methods_are_called(self):
    2:         class A:
    1:             __metaclass__ = abc.ABCMeta
    2:         class B(object):
    1:             counter = 0
    1:             def __new__(cls):
    1:                 B.counter += 1
    1:                 return super(B, cls).__new__(cls)
    2:         class C(A, B):
    1:             pass
    1:         self.assertEqual(B.counter, 0)
    1:         C()
    1:         self.assertEqual(B.counter, 1)
       
    1:     def test_cache_leak(self):
               # See issue #2521.
    2:         class A(object):
    1:             __metaclass__ = abc.ABCMeta
    1:             @abc.abstractmethod
                   def f(self):
    1:                 pass
    2:         class C(A):
    1:             def f(self):
    1:                 A.f(self)
    1:         r = weakref.ref(C)
               # Trigger cache.
    1:         C().f()
    1:         del C
    1:         test_support.gc_collect()
    1:         self.assertEqual(r(), None)
       
    1: def test_main():
    1:     test_support.run_unittest(TestABC)
       
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
