       """Faux ``threading`` version using ``dummy_thread`` instead of ``thread``.
       
       The module ``_dummy_threading`` is added to ``sys.modules`` in order
       to not have ``threading`` considered imported.  Had ``threading`` been
       directly imported it would have made all subsequent imports succeed
       regardless of whether ``thread`` was available which is not desired.
       
    1: """
    1: from sys import modules as sys_modules
       
    1: import dummy_thread
       
       # Declaring now so as to not have to nest ``try``s to get proper clean-up.
    1: holding_thread = False
    1: holding_threading = False
    1: holding__threading_local = False
       
    1: try:
           # Could have checked if ``thread`` was not in sys.modules and gone
           # a different route, but decided to mirror technique used with
           # ``threading`` below.
    1:     if 'thread' in sys_modules:
    1:         held_thread = sys_modules['thread']
    1:         holding_thread = True
           # Must have some module named ``thread`` that implements its API
           # in order to initially import ``threading``.
    1:     sys_modules['thread'] = sys_modules['dummy_thread']
       
    1:     if 'threading' in sys_modules:
               # If ``threading`` is already imported, might as well prevent
               # trying to import it more than needed by saving it if it is
               # already imported before deleting it.
    1:         held_threading = sys_modules['threading']
    1:         holding_threading = True
    1:         del sys_modules['threading']
       
    1:     if '_threading_local' in sys_modules:
               # If ``_threading_local`` is already imported, might as well prevent
               # trying to import it more than needed by saving it if it is
               # already imported before deleting it.
    1:         held__threading_local = sys_modules['_threading_local']
    1:         holding__threading_local = True
    1:         del sys_modules['_threading_local']
       
    1:     import threading
           # Need a copy of the code kept somewhere...
    1:     sys_modules['_dummy_threading'] = sys_modules['threading']
    1:     del sys_modules['threading']
    1:     sys_modules['_dummy__threading_local'] = sys_modules['_threading_local']
    1:     del sys_modules['_threading_local']
    1:     from _dummy_threading import *
    1:     from _dummy_threading import __all__
       
       finally:
           # Put back ``threading`` if we overwrote earlier
       
    1:     if holding_threading:
    1:         sys_modules['threading'] = held_threading
    1:         del held_threading
    1:     del holding_threading
       
           # Put back ``_threading_local`` if we overwrote earlier
       
    1:     if holding__threading_local:
    1:         sys_modules['_threading_local'] = held__threading_local
    1:         del held__threading_local
    1:     del holding__threading_local
       
           # Put back ``thread`` if we overwrote, else del the entry we made
    1:     if holding_thread:
    1:         sys_modules['thread'] = held_thread
    1:         del held_thread
           else:
>>>>>>         del sys_modules['thread']
    1:     del holding_thread
       
    1:     del dummy_thread
    1:     del sys_modules
