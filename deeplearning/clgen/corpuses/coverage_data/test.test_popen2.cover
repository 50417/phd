    1: """Test script for popen2.py"""
       
    1: import warnings
    1: warnings.filterwarnings("ignore", ".*popen2 module is deprecated.*",
    1:                         DeprecationWarning)
    1: warnings.filterwarnings("ignore", "os\.popen. is deprecated.*",
    1:                         DeprecationWarning)
       
    1: import os
    1: import sys
    1: import unittest
    1: import popen2
       
    1: from test.test_support import run_unittest, reap_children
       
    1: if sys.platform[:4] == 'beos' or sys.platform[:6] == 'atheos':
           #  Locks get messed up or something.  Generally we're supposed
           #  to avoid mixing "posix" fork & exec with native threads, and
           #  they may be right about that after all.
>>>>>>     raise unittest.SkipTest("popen2() doesn't work on " + sys.platform)
       
       # if we don't have os.popen, check that
       # we have os.fork.  if not, skip the test
       # (by raising an ImportError)
    1: try:
    1:     from os import popen
    1:     del popen
>>>>>> except ImportError:
>>>>>>     from os import fork
>>>>>>     del fork
       
    2: class Popen2Test(unittest.TestCase):
    1:     cmd = "cat"
    1:     if os.name == "nt":
>>>>>>         cmd = "more"
    1:     teststr = "ab cd\n"
           # "more" doesn't act the same way across Windows flavors,
           # sometimes adding an extra newline at the start or the
           # end.  So we strip whitespace off both ends for comparison.
    1:     expected = teststr.strip()
       
    1:     def setUp(self):
    5:         popen2._cleanup()
               # When the test runs, there shouldn't be any open pipes
    5:         self.assertFalse(popen2._active, "Active pipes when test starts" +
    5:             repr([c.cmd for c in popen2._active]))
       
    1:     def tearDown(self):
    7:         for inst in popen2._active:
    2:             inst.wait()
    5:         popen2._cleanup()
    5:         self.assertFalse(popen2._active, "popen2._active not empty")
               # The os.popen*() API delegates to the subprocess module (on Unix)
    5:         import subprocess
    8:         for inst in subprocess._active:
    3:             inst.wait()
    5:         subprocess._cleanup()
    5:         self.assertFalse(subprocess._active, "subprocess._active not empty")
    5:         reap_children()
       
    1:     def validate_output(self, teststr, expected_out, r, w, e=None):
    9:         w.write(teststr)
    9:         w.close()
    9:         got = r.read()
    9:         self.assertEqual(expected_out, got.strip(), "wrote %r read %r" %
    9:                          (teststr, got))
       
    9:         if e is not None:
    4:             got = e.read()
    4:             self.assertFalse(got, "unexpected %r on stderr" % got)
       
    1:     def test_popen2(self):
    1:         r, w = popen2.popen2(self.cmd)
    1:         self.validate_output(self.teststr, self.expected, r, w)
       
    1:     def test_popen3(self):
    1:         if os.name == 'posix':
    1:             r, w, e = popen2.popen3([self.cmd])
    1:             self.validate_output(self.teststr, self.expected, r, w, e)
       
    1:         r, w, e = popen2.popen3(self.cmd)
    1:         self.validate_output(self.teststr, self.expected, r, w, e)
       
    1:     def test_os_popen2(self):
               # same test as test_popen2(), but using the os.popen*() API
    1:         if os.name == 'posix':
    1:             w, r = os.popen2([self.cmd])
    1:             self.validate_output(self.teststr, self.expected, r, w)
       
    1:             w, r = os.popen2(["echo", self.teststr])
    1:             got = r.read()
    1:             self.assertEqual(got, self.teststr + "\n")
       
    1:         w, r = os.popen2(self.cmd)
    1:         self.validate_output(self.teststr, self.expected, r, w)
       
    1:     def test_os_popen3(self):
               # same test as test_popen3(), but using the os.popen*() API
    1:         if os.name == 'posix':
    1:             w, r, e = os.popen3([self.cmd])
    1:             self.validate_output(self.teststr, self.expected, r, w, e)
       
    1:             w, r, e = os.popen3(["echo", self.teststr])
    1:             got = r.read()
    1:             self.assertEqual(got, self.teststr + "\n")
    1:             got = e.read()
    1:             self.assertFalse(got, "unexpected %r on stderr" % got)
       
    1:         w, r, e = os.popen3(self.cmd)
    1:         self.validate_output(self.teststr, self.expected, r, w, e)
       
    1:     def test_os_popen4(self):
    1:         if os.name == 'posix':
    1:             w, r = os.popen4([self.cmd])
    1:             self.validate_output(self.teststr, self.expected, r, w)
       
    1:             w, r = os.popen4(["echo", self.teststr])
    1:             got = r.read()
    1:             self.assertEqual(got, self.teststr + "\n")
       
    1:         w, r = os.popen4(self.cmd)
    1:         self.validate_output(self.teststr, self.expected, r, w)
       
       
    1: def test_main():
    1:     run_unittest(Popen2Test)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
