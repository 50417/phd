    2: """Different kinds of SAX Exceptions"""
    2: import sys
    2: if sys.platform[:4] == "java":
>>>>>>     from java.lang import Exception
    2: del sys
       
       # ===== SAXEXCEPTION =====
       
    4: class SAXException(Exception):
           """Encapsulate an XML error or warning. This class can contain
           basic error or warning information from either the XML parser or
           the application: you can subclass it to provide additional
           functionality, or to add localization. Note that although you will
           receive a SAXException as the argument to the handlers in the
           ErrorHandler interface, you are not actually required to raise
           the exception; instead, you can simply read the information in
    2:     it."""
       
    2:     def __init__(self, msg, exception=None):
               """Creates an exception. The message is required, but the exception
               is optional."""
   12:         self._msg = msg
   12:         self._exception = exception
   12:         Exception.__init__(self, msg)
       
    2:     def getMessage(self):
               "Return a message for this exception."
>>>>>>         return self._msg
       
    2:     def getException(self):
               "Return the embedded exception, or None if there was none."
>>>>>>         return self._exception
       
    2:     def __str__(self):
               "Create a string representation of the exception."
>>>>>>         return self._msg
       
    2:     def __getitem__(self, ix):
               """Avoids weird error messages if someone does exception[ix] by
               mistake, since Exception has __getitem__ defined."""
>>>>>>         raise AttributeError("__getitem__")
       
       
       # ===== SAXPARSEEXCEPTION =====
       
    4: class SAXParseException(SAXException):
           """Encapsulate an XML parse error or warning.
       
           This exception will include information for locating the error in
           the original XML document. Note that although the application will
           receive a SAXParseException as the argument to the handlers in the
           ErrorHandler interface, the application is not actually required
           to raise the exception; instead, it can simply read the
           information in it and take a different action.
       
           Since this exception is a subclass of SAXException, it inherits
    2:     the ability to wrap another exception."""
       
    2:     def __init__(self, msg, exception, locator):
               "Creates the exception. The exception parameter is allowed to be None."
   12:         SAXException.__init__(self, msg, exception)
   12:         self._locator = locator
       
               # We need to cache this stuff at construction time.
               # If this exception is raised, the objects through which we must
               # traverse to get this information may be deleted by the time
               # it gets caught.
   12:         self._systemId = self._locator.getSystemId()
   12:         self._colnum = self._locator.getColumnNumber()
   12:         self._linenum = self._locator.getLineNumber()
       
    2:     def getColumnNumber(self):
               """The column number of the end of the text where the exception
               occurred."""
    4:         return self._colnum
       
    2:     def getLineNumber(self):
               "The line number of the end of the text where the exception occurred."
    4:         return self._linenum
       
    2:     def getPublicId(self):
               "Get the public identifier of the entity where the exception occurred."
>>>>>>         return self._locator.getPublicId()
       
    2:     def getSystemId(self):
               "Get the system identifier of the entity where the exception occurred."
    5:         return self._systemId
       
    2:     def __str__(self):
               "Create a string representation of the exception."
    4:         sysid = self.getSystemId()
    4:         if sysid is None:
>>>>>>             sysid = "<unknown>"
    4:         linenum = self.getLineNumber()
    4:         if linenum is None:
    2:             linenum = "?"
    4:         colnum = self.getColumnNumber()
    4:         if colnum is None:
    2:             colnum = "?"
    4:         return "%s:%s:%s: %s" % (sysid, linenum, colnum, self._msg)
       
       
       # ===== SAXNOTRECOGNIZEDEXCEPTION =====
       
    4: class SAXNotRecognizedException(SAXException):
           """Exception class for an unrecognized identifier.
       
           An XMLReader will raise this exception when it is confronted with an
           unrecognized feature or property. SAX applications and extensions may
    2:     use this class for similar purposes."""
       
       
       # ===== SAXNOTSUPPORTEDEXCEPTION =====
       
    4: class SAXNotSupportedException(SAXException):
           """Exception class for an unsupported operation.
       
           An XMLReader will raise this exception when a service it cannot
           perform is requested (specifically setting a state or value). SAX
           applications and extensions may use this class for similar
    2:     purposes."""
       
       # ===== SAXNOTSUPPORTEDEXCEPTION =====
       
    4: class SAXReaderNotAvailable(SAXNotSupportedException):
           """Exception class for a missing driver.
       
           An XMLReader module (driver) should raise this exception when it
           is first imported, e.g. when a support module cannot be imported.
           It also may be raised during parsing, e.g. if executing an external
    2:     program is not permitted."""
