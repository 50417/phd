       # -*- coding: iso-8859-1 -*-
       
    1: from test import test_support
    1: import marshal
    1: import sys
    1: import unittest
    1: import os
       
    1: try:
    1:     import _testcapi
>>>>>> except ImportError:
>>>>>>     _testcapi = None
       
    2: class IntTestCase(unittest.TestCase):
    1:     def test_ints(self):
               # Test the full range of Python ints.
    1:         n = sys.maxint
   64:         while n:
  189:             for expected in (-n, n):
  126:                 s = marshal.dumps(expected)
  126:                 got = marshal.loads(s)
  126:                 self.assertEqual(expected, got)
  126:                 marshal.dump(expected, file(test_support.TESTFN, "wb"))
  126:                 got = marshal.load(file(test_support.TESTFN, "rb"))
  126:                 self.assertEqual(expected, got)
   63:             n = n >> 1
    1:         os.unlink(test_support.TESTFN)
       
    1:     def test_int64(self):
               # Simulate int marshaling on a 64-bit box.  This is most interesting if
               # we're running the test on a 32-bit box, of course.
       
    1:         def to_little_endian_string(value, nbytes):
  254:             bytes = []
 2286:             for i in range(nbytes):
 2032:                 bytes.append(chr(value & 0xff))
 2032:                 value >>= 8
  254:             return ''.join(bytes)
       
    1:         maxint64 = (1L << 63) - 1
    1:         minint64 = -maxint64-1
       
    5:         for base in maxint64, minint64, -maxint64, -(minint64 >> 1):
  258:             while base:
  254:                 s = 'I' + to_little_endian_string(base, 8)
  254:                 got = marshal.loads(s)
  254:                 self.assertEqual(base, got)
  254:                 if base == -1:  # a fixed-point for shifting right 1
    2:                     base = 0
                       else:
  252:                     base >>= 1
       
    1:     def test_bool(self):
    3:         for b in (True, False):
    2:             new = marshal.loads(marshal.dumps(b))
    2:             self.assertEqual(b, new)
    2:             self.assertEqual(type(b), type(new))
    2:             marshal.dump(b, file(test_support.TESTFN, "wb"))
    2:             new = marshal.load(file(test_support.TESTFN, "rb"))
    2:             self.assertEqual(b, new)
    2:             self.assertEqual(type(b), type(new))
       
    2: class FloatTestCase(unittest.TestCase):
    1:     def test_floats(self):
               # Test a few floats
    1:         small = 1e-25
    1:         n = sys.maxint * 3.7e250
  142:         while n > small:
  423:             for expected in (-n, n):
  282:                 f = float(expected)
  282:                 s = marshal.dumps(f)
  282:                 got = marshal.loads(s)
  282:                 self.assertEqual(f, got)
  282:                 marshal.dump(f, file(test_support.TESTFN, "wb"))
  282:                 got = marshal.load(file(test_support.TESTFN, "rb"))
  282:                 self.assertEqual(f, got)
  141:             n /= 123.4567
       
    1:         f = 0.0
    1:         s = marshal.dumps(f, 2)
    1:         got = marshal.loads(s)
    1:         self.assertEqual(f, got)
               # and with version <= 1 (floats marshalled differently then)
    1:         s = marshal.dumps(f, 1)
    1:         got = marshal.loads(s)
    1:         self.assertEqual(f, got)
       
    1:         n = sys.maxint * 3.7e-250
  100:         while n < small:
  297:             for expected in (-n, n):
  198:                 f = float(expected)
       
  198:                 s = marshal.dumps(f)
  198:                 got = marshal.loads(s)
  198:                 self.assertEqual(f, got)
       
  198:                 s = marshal.dumps(f, 1)
  198:                 got = marshal.loads(s)
  198:                 self.assertEqual(f, got)
       
  198:                 marshal.dump(f, file(test_support.TESTFN, "wb"))
  198:                 got = marshal.load(file(test_support.TESTFN, "rb"))
  198:                 self.assertEqual(f, got)
       
  198:                 marshal.dump(f, file(test_support.TESTFN, "wb"), 1)
  198:                 got = marshal.load(file(test_support.TESTFN, "rb"))
  198:                 self.assertEqual(f, got)
   99:             n *= 123.4567
    1:         os.unlink(test_support.TESTFN)
       
    2: class StringTestCase(unittest.TestCase):
    1:     def test_unicode(self):
    5:         for s in [u"", u"Andrè Previn", u"abc", u" "*10000]:
    4:             new = marshal.loads(marshal.dumps(s))
    4:             self.assertEqual(s, new)
    4:             self.assertEqual(type(s), type(new))
    4:             marshal.dump(s, file(test_support.TESTFN, "wb"))
    4:             new = marshal.load(file(test_support.TESTFN, "rb"))
    4:             self.assertEqual(s, new)
    4:             self.assertEqual(type(s), type(new))
    1:         os.unlink(test_support.TESTFN)
       
    1:     def test_string(self):
    5:         for s in ["", "Andrè Previn", "abc", " "*10000]:
    4:             new = marshal.loads(marshal.dumps(s))
    4:             self.assertEqual(s, new)
    4:             self.assertEqual(type(s), type(new))
    4:             marshal.dump(s, file(test_support.TESTFN, "wb"))
    4:             new = marshal.load(file(test_support.TESTFN, "rb"))
    4:             self.assertEqual(s, new)
    4:             self.assertEqual(type(s), type(new))
    1:         os.unlink(test_support.TESTFN)
       
    1:     def test_buffer(self):
    5:         for s in ["", "Andrè Previn", "abc", " "*10000]:
    4:             with test_support.check_py3k_warnings(("buffer.. not supported",
    4:                                                      DeprecationWarning)):
    4:                 b = buffer(s)
    4:             new = marshal.loads(marshal.dumps(b))
    4:             self.assertEqual(s, new)
    4:             marshal.dump(b, file(test_support.TESTFN, "wb"))
    4:             new = marshal.load(file(test_support.TESTFN, "rb"))
    4:             self.assertEqual(s, new)
    1:         os.unlink(test_support.TESTFN)
       
    2: class ExceptionTestCase(unittest.TestCase):
    1:     def test_exceptions(self):
    1:         new = marshal.loads(marshal.dumps(StopIteration))
    1:         self.assertEqual(StopIteration, new)
       
    2: class CodeTestCase(unittest.TestCase):
    1:     def test_code(self):
    1:         co = ExceptionTestCase.test_exceptions.func_code
    1:         new = marshal.loads(marshal.dumps(co))
    1:         self.assertEqual(co, new)
       
    2: class ContainerTestCase(unittest.TestCase):
    1:     d = {'astring': 'foo@bar.baz.spam',
    1:          'afloat': 7283.43,
    1:          'anint': 2**20,
    1:          'ashortlong': 2L,
    1:          'alist': ['.zyx.41'],
    1:          'atuple': ('.zyx.41',)*10,
    1:          'aboolean': False,
    1:          'aunicode': u"Andrè Previn"
                }
    1:     def test_dict(self):
    1:         new = marshal.loads(marshal.dumps(self.d))
    1:         self.assertEqual(self.d, new)
    1:         marshal.dump(self.d, file(test_support.TESTFN, "wb"))
    1:         new = marshal.load(file(test_support.TESTFN, "rb"))
    1:         self.assertEqual(self.d, new)
    1:         os.unlink(test_support.TESTFN)
       
    1:     def test_list(self):
    1:         lst = self.d.items()
    1:         new = marshal.loads(marshal.dumps(lst))
    1:         self.assertEqual(lst, new)
    1:         marshal.dump(lst, file(test_support.TESTFN, "wb"))
    1:         new = marshal.load(file(test_support.TESTFN, "rb"))
    1:         self.assertEqual(lst, new)
    1:         os.unlink(test_support.TESTFN)
       
    1:     def test_tuple(self):
    1:         t = tuple(self.d.keys())
    1:         new = marshal.loads(marshal.dumps(t))
    1:         self.assertEqual(t, new)
    1:         marshal.dump(t, file(test_support.TESTFN, "wb"))
    1:         new = marshal.load(file(test_support.TESTFN, "rb"))
    1:         self.assertEqual(t, new)
    1:         os.unlink(test_support.TESTFN)
       
    1:     def test_sets(self):
    3:         for constructor in (set, frozenset):
    2:             t = constructor(self.d.keys())
    2:             new = marshal.loads(marshal.dumps(t))
    2:             self.assertEqual(t, new)
    2:             self.assertTrue(isinstance(new, constructor))
    2:             self.assertNotEqual(id(t), id(new))
    2:             marshal.dump(t, file(test_support.TESTFN, "wb"))
    2:             new = marshal.load(file(test_support.TESTFN, "rb"))
    2:             self.assertEqual(t, new)
    2:             os.unlink(test_support.TESTFN)
       
    2: class BugsTestCase(unittest.TestCase):
    1:     def test_bug_5888452(self):
               # Simple-minded check for SF 588452: Debug build crashes
    1:         marshal.dumps([128] * 1000)
       
    1:     def test_patch_873224(self):
    1:         self.assertRaises(Exception, marshal.loads, '0')
    1:         self.assertRaises(Exception, marshal.loads, 'f')
    1:         self.assertRaises(Exception, marshal.loads, marshal.dumps(5L)[:-1])
       
    1:     def test_version_argument(self):
               # Python 2.4.0 crashes for any call to marshal.dumps(x, y)
    1:         self.assertEqual(marshal.loads(marshal.dumps(5, 0)), 5)
    1:         self.assertEqual(marshal.loads(marshal.dumps(5, 1)), 5)
       
    1:     def test_fuzz(self):
               # simple test that it's at least not *totally* trivial to
               # crash from bad marshal data
  513:         for c in [chr(i) for i in range(256)]:
  256:             try:
  256:                 marshal.loads(c)
  249:             except Exception:
  249:                 pass
       
    1:     def test_loads_recursion(self):
    1:         s = 'c' + ('X' * 4*4) + '{' * 2**20
    1:         self.assertRaises(ValueError, marshal.loads, s)
       
    1:     def test_recursion_limit(self):
               # Create a deeply nested structure.
    1:         head = last = []
               # The max stack depth should match the value in Python/marshal.c.
    1:         if os.name == 'nt' and hasattr(sys, 'gettotalrefcount'):
>>>>>>             MAX_MARSHAL_STACK_DEPTH = 1000
               else:
    1:             MAX_MARSHAL_STACK_DEPTH = 2000
 1999:         for i in range(MAX_MARSHAL_STACK_DEPTH - 2):
 1998:             last.append([0])
 1998:             last = last[-1]
       
               # Verify we don't blow out the stack with dumps/load.
    1:         data = marshal.dumps(head)
    1:         new_head = marshal.loads(data)
               # Don't use == to compare objects, it can exceed the recursion limit.
    1:         self.assertEqual(len(new_head), len(head))
    1:         self.assertEqual(len(new_head[0]), len(head[0]))
    1:         self.assertEqual(len(new_head[-1]), len(head[-1]))
       
    1:         last.append([0])
    1:         self.assertRaises(ValueError, marshal.dumps, head)
       
    1:     def test_exact_type_match(self):
               # Former bug:
               #   >>> class Int(int): pass
               #   >>> type(loads(dumps(Int())))
               #   <type 'int'>
   10:         for typ in (int, long, float, complex, tuple, list, dict, set, frozenset):
                   # Note: str and unicode subclasses are not tested because they get handled
                   # by marshal's routines for objects supporting the buffer API.
    9:             subtyp = type('subtyp', (typ,), {})
    9:             self.assertRaises(ValueError, marshal.dumps, subtyp())
       
           # Issue #1792 introduced a change in how marshal increases the size of its
           # internal buffer; this test ensures that the new code is exercised.
    1:     def test_large_marshal(self):
    1:         size = int(1e6)
    1:         testString = 'abc' * size
    1:         marshal.dumps(testString)
       
    1:     def test_invalid_longs(self):
               # Issue #7019: marshal.loads shouldn't produce unnormalized PyLongs
    1:         invalid_string = 'l\x02\x00\x00\x00\x00\x00\x00\x00'
    1:         self.assertRaises(ValueError, marshal.loads, invalid_string)
       
    1: LARGE_SIZE = 2**31
    1: character_size = 4 if sys.maxunicode > 0xFFFF else 2
    1: pointer_size = 8 if sys.maxsize > 0xFFFFFFFF else 4
       
    2: @unittest.skipIf(LARGE_SIZE > sys.maxsize, "test cannot run on 32-bit systems")
    1: class LargeValuesTestCase(unittest.TestCase):
    1:     def check_unmarshallable(self, data):
>>>>>>         f = open(test_support.TESTFN, 'wb')
>>>>>>         self.addCleanup(test_support.unlink, test_support.TESTFN)
>>>>>>         with f:
>>>>>>             self.assertRaises(ValueError, marshal.dump, data, f)
       
    1:     @test_support.precisionbigmemtest(size=LARGE_SIZE, memuse=1, dry_run=False)
           def test_string(self, size):
>>>>>>         self.check_unmarshallable('x' * size)
       
    1:     @test_support.precisionbigmemtest(size=LARGE_SIZE,
    1:             memuse=character_size + 2, dry_run=False)
           def test_unicode(self, size):
>>>>>>         self.check_unmarshallable(u'x' * size)
       
    1:     @test_support.precisionbigmemtest(size=LARGE_SIZE,
    1:             memuse=pointer_size, dry_run=False)
           def test_tuple(self, size):
>>>>>>         self.check_unmarshallable((None,) * size)
       
    1:     @test_support.precisionbigmemtest(size=LARGE_SIZE,
    1:             memuse=pointer_size, dry_run=False)
           def test_list(self, size):
>>>>>>         self.check_unmarshallable([None] * size)
       
    1:     @test_support.precisionbigmemtest(size=LARGE_SIZE,
    1:             memuse=pointer_size*12 + sys.getsizeof(LARGE_SIZE-1),
    1:             dry_run=False)
           def test_set(self, size):
>>>>>>         self.check_unmarshallable(set(range(size)))
       
    1:     @test_support.precisionbigmemtest(size=LARGE_SIZE,
    1:             memuse=pointer_size*12 + sys.getsizeof(LARGE_SIZE-1),
    1:             dry_run=False)
           def test_frozenset(self, size):
>>>>>>         self.check_unmarshallable(frozenset(range(size)))
       
    1:     @test_support.precisionbigmemtest(size=LARGE_SIZE, memuse=1, dry_run=False)
           def test_bytearray(self, size):
>>>>>>         self.check_unmarshallable(bytearray(size))
       
       
    2: @test_support.cpython_only
    1: @unittest.skipUnless(_testcapi, 'requires _testcapi')
    1: class CAPI_TestCase(unittest.TestCase):
       
    1:     def test_write_long_to_file(self):
    4:         for v in range(marshal.version + 1):
    3:             _testcapi.pymarshal_write_long_to_file(0x12345678, test_support.TESTFN, v)
    3:             with open(test_support.TESTFN, 'rb') as f:
    3:                 data = f.read()
    3:             test_support.unlink(test_support.TESTFN)
    3:             self.assertEqual(data, b'\x78\x56\x34\x12')
       
    1:     def test_write_object_to_file(self):
    1:         obj = ('\u20ac', b'abc', 123, 45.6, 7+8j, 'long line '*1000)
    4:         for v in range(marshal.version + 1):
    3:             _testcapi.pymarshal_write_object_to_file(obj, test_support.TESTFN, v)
    3:             with open(test_support.TESTFN, 'rb') as f:
    3:                 data = f.read()
    3:             test_support.unlink(test_support.TESTFN)
    3:             self.assertEqual(marshal.loads(data), obj)
       
    1:     def test_read_short_from_file(self):
    1:         with open(test_support.TESTFN, 'wb') as f:
    1:             f.write(b'\x34\x12xxxx')
    1:         r, p = _testcapi.pymarshal_read_short_from_file(test_support.TESTFN)
    1:         test_support.unlink(test_support.TESTFN)
    1:         self.assertEqual(r, 0x1234)
    1:         self.assertEqual(p, 2)
       
    1:     def test_read_long_from_file(self):
    1:         with open(test_support.TESTFN, 'wb') as f:
    1:             f.write(b'\x78\x56\x34\x12xxxx')
    1:         r, p = _testcapi.pymarshal_read_long_from_file(test_support.TESTFN)
    1:         test_support.unlink(test_support.TESTFN)
    1:         self.assertEqual(r, 0x12345678)
    1:         self.assertEqual(p, 4)
       
    1:     def test_read_last_object_from_file(self):
    1:         obj = ('\u20ac', b'abc', 123, 45.6, 7+8j)
    4:         for v in range(marshal.version + 1):
    3:             data = marshal.dumps(obj, v)
    3:             with open(test_support.TESTFN, 'wb') as f:
    3:                 f.write(data + b'xxxx')
    3:             r, p = _testcapi.pymarshal_read_last_object_from_file(test_support.TESTFN)
    3:             test_support.unlink(test_support.TESTFN)
    3:             self.assertEqual(r, obj)
       
    1:     def test_read_object_from_file(self):
    1:         obj = ('\u20ac', b'abc', 123, 45.6, 7+8j)
    4:         for v in range(marshal.version + 1):
    3:             data = marshal.dumps(obj, v)
    3:             with open(test_support.TESTFN, 'wb') as f:
    3:                 f.write(data + b'xxxx')
    3:             r, p = _testcapi.pymarshal_read_object_from_file(test_support.TESTFN)
    3:             test_support.unlink(test_support.TESTFN)
    3:             self.assertEqual(r, obj)
    3:             self.assertEqual(p, len(data))
       
       
    1: def test_main():
    1:     test_support.run_unittest(IntTestCase,
    1:                               FloatTestCase,
    1:                               StringTestCase,
    1:                               CodeTestCase,
    1:                               ContainerTestCase,
    1:                               ExceptionTestCase,
    1:                               BugsTestCase,
    1:                               LargeValuesTestCase,
    1:                               CAPI_TestCase,
                                    )
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
