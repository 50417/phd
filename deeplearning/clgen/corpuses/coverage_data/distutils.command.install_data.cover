       """distutils.command.install_data
       
       Implements the Distutils 'install_data' command, for installing
    1: platform-independent data files."""
       
       # contributed by Bastian Kleineidam
       
    1: __revision__ = "$Id$"
       
    1: import os
    1: from distutils.core import Command
    1: from distutils.util import change_root, convert_path
       
    2: class install_data(Command):
       
    1:     description = "install data files"
       
           user_options = [
               ('install-dir=', 'd',
    1:          "base directory for installing data files "
                "(default: installation base dir)"),
               ('root=', None,
    1:          "install everything relative to this alternate root directory"),
    1:         ('force', 'f', "force installation (overwrite existing files)"),
               ]
       
    1:     boolean_options = ['force']
       
    1:     def initialize_options(self):
    1:         self.install_dir = None
    1:         self.outfiles = []
    1:         self.root = None
    1:         self.force = 0
    1:         self.data_files = self.distribution.data_files
    1:         self.warn_dir = 1
       
    1:     def finalize_options(self):
    1:         self.set_undefined_options('install',
    1:                                    ('install_data', 'install_dir'),
    1:                                    ('root', 'root'),
    1:                                    ('force', 'force'),
                                         )
       
    1:     def run(self):
    3:         self.mkpath(self.install_dir)
   11:         for f in self.data_files:
    8:             if isinstance(f, str):
                       # it's a simple file, so copy it
    3:                 f = convert_path(f)
    3:                 if self.warn_dir:
    3:                     self.warn("setup script did not provide a directory for "
                                     "'%s' -- installing right in '%s'" %
    3:                               (f, self.install_dir))
    3:                 (out, _) = self.copy_file(f, self.install_dir)
    3:                 self.outfiles.append(out)
                   else:
                       # it's a tuple with path to install to and a list of files
    5:                 dir = convert_path(f[0])
    5:                 if not os.path.isabs(dir):
    1:                     dir = os.path.join(self.install_dir, dir)
    4:                 elif self.root:
    2:                     dir = change_root(self.root, dir)
    5:                 self.mkpath(dir)
       
    5:                 if f[1] == []:
                           # If there are no files listed, the user must be
                           # trying to create an empty directory, so add the
                           # directory to the list of output files.
    1:                     self.outfiles.append(dir)
                       else:
                           # Copy files, adding them to the list of output files.
    8:                     for data in f[1]:
    4:                         data = convert_path(data)
    4:                         (out, _) = self.copy_file(data, dir)
    4:                         self.outfiles.append(out)
       
    1:     def get_inputs(self):
    1:         return self.data_files or []
       
    1:     def get_outputs(self):
    3:         return self.outfiles
