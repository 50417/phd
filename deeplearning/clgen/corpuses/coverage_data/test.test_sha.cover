       # Testing sha module (NIST's Secure Hash Algorithm)
       
       # use the three examples from Federal Information Processing Standards
       # Publication 180-1, Secure Hash Standard,  1995 April 17
       # http://www.itl.nist.gov/div897/pubs/fip180-1.htm
       
    1: import warnings
    1: warnings.filterwarnings("ignore", "the sha module is deprecated.*",
    1:                         DeprecationWarning)
       
    1: import sha
    1: import unittest
    1: from test import test_support
       
       
    2: class SHATestCase(unittest.TestCase):
    1:     def check(self, data, digest):
               # Check digest matches the expected value
    4:         obj = sha.new(data)
    4:         computed = obj.hexdigest()
    4:         self.assertTrue(computed == digest)
       
               # Verify that the value doesn't change between two consecutive
               # digest operations.
    4:         computed_again = obj.hexdigest()
    4:         self.assertTrue(computed == computed_again)
       
               # Check hexdigest() output matches digest()'s output
    4:         digest = obj.digest()
    4:         hexd = ""
   84:         for c in digest:
   80:             hexd += '%02x' % ord(c)
    4:         self.assertTrue(computed == hexd)
       
    1:     def test_case_1(self):
    1:         self.check("abc",
    1:                    "a9993e364706816aba3e25717850c26c9cd0d89d")
       
    1:     def test_case_2(self):
    1:         self.check("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
    1:                    "84983e441c3bd26ebaae4aa1f95129e5e54670f1")
       
    1:     def test_case_3(self):
    1:         self.check("a" * 1000000,
    1:                    "34aa973cd4c4daa4f61eeb2bdbad27316534016f")
       
    1:     def test_case_4(self):
    1:         self.check(chr(0xAA) * 80,
    1:                    '4ca0ef38f1794b28a8f8ee110ee79d48ce13be25')
       
    1: def test_main():
    1:     test_support.run_unittest(SHATestCase)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
