       """
       Very minimal unittests for parts of the readline module.
    1: """
    1: import os
    1: import unittest
    1: from test.test_support import run_unittest, import_module
    1: from test.script_helper import assert_python_ok
       
       # Skip tests if there is no readline module
    1: readline = import_module('readline')
       
    2: class TestHistoryManipulation (unittest.TestCase):
           """These tests were added to check that the libedit emulation on OSX and
           the "real" readline have the same interface for history manipulation.
           That's why the tests cover only a small subset of the interface.
    1:     """
       
    1:     @unittest.skipUnless(hasattr(readline, "clear_history"),
    1:                          "The history update test cannot be run because the "
                                "clear_history method is not available.")
           def testHistoryUpdates(self):
    1:         readline.clear_history()
       
    1:         readline.add_history("first line")
    1:         readline.add_history("second line")
       
    1:         self.assertEqual(readline.get_history_item(0), None)
    1:         self.assertEqual(readline.get_history_item(1), "first line")
    1:         self.assertEqual(readline.get_history_item(2), "second line")
       
    1:         readline.replace_history_item(0, "replaced line")
    1:         self.assertEqual(readline.get_history_item(0), None)
    1:         self.assertEqual(readline.get_history_item(1), "replaced line")
    1:         self.assertEqual(readline.get_history_item(2), "second line")
       
    1:         self.assertEqual(readline.get_current_history_length(), 2)
       
    1:         readline.remove_history_item(0)
    1:         self.assertEqual(readline.get_history_item(0), None)
    1:         self.assertEqual(readline.get_history_item(1), "second line")
       
    1:         self.assertEqual(readline.get_current_history_length(), 1)
       
       
    2: class TestReadline(unittest.TestCase):
       
    1:     @unittest.skipIf(readline._READLINE_VERSION < 0x0601
    1:                      and "libedit" not in readline.__doc__,
    1:                      "not supported in this library version")
           def test_init(self):
               # Issue #19884: Ensure that the ANSI sequence "\033[1034h" is not
               # written into stdout when the readline module is imported and stdout
               # is redirected to a pipe.
    1:         rc, stdout, stderr = assert_python_ok('-c', 'import readline',
    1:                                               TERM='xterm-256color')
    1:         self.assertEqual(stdout, b'')
       
       
    1: def test_main():
    1:     run_unittest(TestHistoryManipulation, TestReadline)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
