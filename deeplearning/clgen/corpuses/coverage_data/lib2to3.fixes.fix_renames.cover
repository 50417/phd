       """Fix incompatible renames
       
       Fixes:
         * sys.maxint -> sys.maxsize
    1: """
       # Author: Christian Heimes
       # based on Collin Winter's fix_import
       
       # Local imports
    1: from .. import fixer_base
    1: from ..fixer_util import Name, attr_chain
       
    1: MAPPING = {"sys":  {"maxint" : "maxsize"},
                 }
    1: LOOKUP = {}
       
    1: def alternates(members):
>>>>>>     return "(" + "|".join(map(repr, members)) + ")"
       
       
    1: def build_pattern():
           #bare = set()
    2:     for module, replace in MAPPING.items():
    2:         for old_attr, new_attr in replace.items():
    1:             LOOKUP[(module, old_attr)] = new_attr
                   #bare.add(module)
                   #bare.add(old_attr)
                   #yield """
                   #      import_name< 'import' (module=%r
                   #          | dotted_as_names< any* module=%r any* >) >
                   #      """ % (module, module)
                   yield """
                         import_from< 'from' module_name=%r 'import'
                             ( attr_name=%r | import_as_name< attr_name=%r 'as' any >) >
    1:                   """ % (module, old_attr, old_attr)
                   yield """
                         power< module_name=%r trailer< '.' attr_name=%r > any* >
    1:                   """ % (module, old_attr)
           #yield """bare_name=%s""" % alternates(bare)
       
       
    2: class FixRenames(fixer_base.BaseFix):
    1:     BM_compatible = True
    1:     PATTERN = "|".join(build_pattern())
       
    1:     order = "pre" # Pre-order tree traversal
       
           # Don't match the node if it's within another match
    1:     def match(self, node):
   12:         match = super(FixRenames, self).match
   12:         results = match(node)
   12:         if results:
   23:             if any(match(obj) for obj in attr_chain(node, "parent")):
>>>>>>                 return False
    4:             return results
    8:         return False
       
           #def start_tree(self, tree, filename):
           #    super(FixRenames, self).start_tree(tree, filename)
           #    self.replace = {}
       
    1:     def transform(self, node, results):
    4:         mod_name = results.get("module_name")
    4:         attr_name = results.get("attr_name")
               #bare_name = results.get("bare_name")
               #import_mod = results.get("module")
       
    4:         if mod_name and attr_name:
    4:             new_attr = unicode(LOOKUP[(mod_name.value, attr_name.value)])
    4:             attr_name.replace(Name(new_attr, prefix=attr_name.prefix))
