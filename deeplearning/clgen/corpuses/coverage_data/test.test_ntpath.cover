       # coding: utf-8
    1: import ntpath
    1: import os
    1: import sys
    1: from test.test_support import TestFailed
    1: from test import test_support, test_genericpath
    1: import unittest
       
    1: def tester0(fn, wantResult):
  207:     gotResult = eval(fn)
  207:     if wantResult != gotResult:
>>>>>>         raise TestFailed, "%s should return: %r but returned: %r" \
>>>>>>               %(fn, wantResult, gotResult)
       
    1: def tester(fn, wantResult):
  187:     fn = fn.replace("\\", "\\\\")
  187:     tester0(fn, wantResult)
       
       
    2: class TestNtpath(unittest.TestCase):
    1:     def test_splitext(self):
    1:         tester('ntpath.splitext("foo.ext")', ('foo', '.ext'))
    1:         tester('ntpath.splitext("/foo/foo.ext")', ('/foo/foo', '.ext'))
    1:         tester('ntpath.splitext(".ext")', ('.ext', ''))
    1:         tester('ntpath.splitext("\\foo.ext\\foo")', ('\\foo.ext\\foo', ''))
    1:         tester('ntpath.splitext("foo.ext\\")', ('foo.ext\\', ''))
    1:         tester('ntpath.splitext("")', ('', ''))
    1:         tester('ntpath.splitext("foo.bar.ext")', ('foo.bar', '.ext'))
    1:         tester('ntpath.splitext("xx/foo.bar.ext")', ('xx/foo.bar', '.ext'))
    1:         tester('ntpath.splitext("xx\\foo.bar.ext")', ('xx\\foo.bar', '.ext'))
    1:         tester('ntpath.splitext("c:a/b\\c.d")', ('c:a/b\\c', '.d'))
       
    1:     def test_splitdrive(self):
    1:         tester('ntpath.splitdrive("c:\\foo\\bar")',
    1:                ('c:', '\\foo\\bar'))
    1:         tester('ntpath.splitdrive("c:/foo/bar")',
    1:                ('c:', '/foo/bar'))
    1:         tester('ntpath.splitdrive("\\\\conky\\mountpoint\\foo\\bar")',
    1:                ('\\\\conky\\mountpoint', '\\foo\\bar'))
    1:         tester('ntpath.splitdrive("//conky/mountpoint/foo/bar")',
    1:                ('//conky/mountpoint', '/foo/bar'))
    1:         tester('ntpath.splitdrive("\\\\\\conky\\mountpoint\\foo\\bar")',
    1:             ('', '\\\\\\conky\\mountpoint\\foo\\bar'))
    1:         tester('ntpath.splitdrive("///conky/mountpoint/foo/bar")',
    1:             ('', '///conky/mountpoint/foo/bar'))
    1:         tester('ntpath.splitdrive("\\\\conky\\\\mountpoint\\foo\\bar")',
    1:                ('', '\\\\conky\\\\mountpoint\\foo\\bar'))
    1:         tester('ntpath.splitdrive("//conky//mountpoint/foo/bar")',
    1:                ('', '//conky//mountpoint/foo/bar'))
               # Issue #19911: UNC part containing U+0130
    1:         self.assertEqual(ntpath.splitdrive(u'//conky/MOUNTPOİNT/foo/bar'),
    1:                          (u'//conky/MOUNTPOİNT', '/foo/bar'))
    1:         self.assertEqual(ntpath.splitdrive("//"), ("", "//"))
       
    1:     def test_splitunc(self):
    1:         tester('ntpath.splitunc("c:\\foo\\bar")',
    1:                ('', 'c:\\foo\\bar'))
    1:         tester('ntpath.splitunc("c:/foo/bar")',
    1:                ('', 'c:/foo/bar'))
    1:         tester('ntpath.splitunc("\\\\conky\\mountpoint\\foo\\bar")',
    1:                ('\\\\conky\\mountpoint', '\\foo\\bar'))
    1:         tester('ntpath.splitunc("//conky/mountpoint/foo/bar")',
    1:                ('//conky/mountpoint', '/foo/bar'))
    1:         tester('ntpath.splitunc("\\\\\\conky\\mountpoint\\foo\\bar")',
    1:                ('', '\\\\\\conky\\mountpoint\\foo\\bar'))
    1:         tester('ntpath.splitunc("///conky/mountpoint/foo/bar")',
    1:                ('', '///conky/mountpoint/foo/bar'))
    1:         tester('ntpath.splitunc("\\\\conky\\\\mountpoint\\foo\\bar")',
    1:                ('', '\\\\conky\\\\mountpoint\\foo\\bar'))
    1:         tester('ntpath.splitunc("//conky//mountpoint/foo/bar")',
    1:                ('', '//conky//mountpoint/foo/bar'))
    1:         if test_support.have_unicode:
    1:             self.assertEqual(ntpath.splitunc(u'//conky/MOUNTPO%cNT/foo/bar' % 0x0130),
    1:                              (u'//conky/MOUNTPO%cNT' % 0x0130, u'/foo/bar'))
       
    1:     def test_split(self):
    1:         tester('ntpath.split("c:\\foo\\bar")', ('c:\\foo', 'bar'))
    1:         tester('ntpath.split("\\\\conky\\mountpoint\\foo\\bar")',
    1:                ('\\\\conky\\mountpoint\\foo', 'bar'))
       
    1:         tester('ntpath.split("c:\\")', ('c:\\', ''))
    1:         tester('ntpath.split("\\\\conky\\mountpoint\\")',
    1:                ('\\\\conky\\mountpoint\\', ''))
       
    1:         tester('ntpath.split("c:/")', ('c:/', ''))
    1:         tester('ntpath.split("//conky/mountpoint/")', ('//conky/mountpoint/', ''))
       
    1:     def test_isabs(self):
    1:         tester('ntpath.isabs("c:\\")', 1)
    1:         tester('ntpath.isabs("\\\\conky\\mountpoint\\")', 1)
    1:         tester('ntpath.isabs("\\foo")', 1)
    1:         tester('ntpath.isabs("\\foo\\bar")', 1)
       
    1:     def test_commonprefix(self):
    1:         tester('ntpath.commonprefix(["/home/swenson/spam", "/home/swen/spam"])',
    1:                "/home/swen")
    1:         tester('ntpath.commonprefix(["\\home\\swen\\spam", "\\home\\swen\\eggs"])',
    1:                "\\home\\swen\\")
    1:         tester('ntpath.commonprefix(["/home/swen/spam", "/home/swen/spam"])',
    1:                "/home/swen/spam")
       
    1:     def test_join(self):
    1:         tester('ntpath.join("")', '')
    1:         tester('ntpath.join("", "", "")', '')
    1:         tester('ntpath.join("a")', 'a')
    1:         tester('ntpath.join("/a")', '/a')
    1:         tester('ntpath.join("\\a")', '\\a')
    1:         tester('ntpath.join("a:")', 'a:')
    1:         tester('ntpath.join("a:", "\\b")', 'a:\\b')
    1:         tester('ntpath.join("a", "\\b")', '\\b')
    1:         tester('ntpath.join("a", "b", "c")', 'a\\b\\c')
    1:         tester('ntpath.join("a\\", "b", "c")', 'a\\b\\c')
    1:         tester('ntpath.join("a", "b\\", "c")', 'a\\b\\c')
    1:         tester('ntpath.join("a", "b", "\\c")', '\\c')
    1:         tester('ntpath.join("d:\\", "\\pleep")', 'd:\\pleep')
    1:         tester('ntpath.join("d:\\", "a", "b")', 'd:\\a\\b')
       
    1:         tester("ntpath.join('', 'a')", 'a')
    1:         tester("ntpath.join('', '', '', '', 'a')", 'a')
    1:         tester("ntpath.join('a', '')", 'a\\')
    1:         tester("ntpath.join('a', '', '', '', '')", 'a\\')
    1:         tester("ntpath.join('a\\', '')", 'a\\')
    1:         tester("ntpath.join('a\\', '', '', '', '')", 'a\\')
    1:         tester("ntpath.join('a/', '')", 'a/')
       
    1:         tester("ntpath.join('a/b', 'x/y')", 'a/b\\x/y')
    1:         tester("ntpath.join('/a/b', 'x/y')", '/a/b\\x/y')
    1:         tester("ntpath.join('/a/b/', 'x/y')", '/a/b/x/y')
    1:         tester("ntpath.join('c:', 'x/y')", 'c:x/y')
    1:         tester("ntpath.join('c:a/b', 'x/y')", 'c:a/b\\x/y')
    1:         tester("ntpath.join('c:a/b/', 'x/y')", 'c:a/b/x/y')
    1:         tester("ntpath.join('c:/', 'x/y')", 'c:/x/y')
    1:         tester("ntpath.join('c:/a/b', 'x/y')", 'c:/a/b\\x/y')
    1:         tester("ntpath.join('c:/a/b/', 'x/y')", 'c:/a/b/x/y')
    1:         tester("ntpath.join('//computer/share', 'x/y')", '//computer/share\\x/y')
    1:         tester("ntpath.join('//computer/share/', 'x/y')", '//computer/share/x/y')
    1:         tester("ntpath.join('//computer/share/a/b', 'x/y')", '//computer/share/a/b\\x/y')
       
    1:         tester("ntpath.join('a/b', '/x/y')", '/x/y')
    1:         tester("ntpath.join('/a/b', '/x/y')", '/x/y')
    1:         tester("ntpath.join('c:', '/x/y')", 'c:/x/y')
    1:         tester("ntpath.join('c:a/b', '/x/y')", 'c:/x/y')
    1:         tester("ntpath.join('c:/', '/x/y')", 'c:/x/y')
    1:         tester("ntpath.join('c:/a/b', '/x/y')", 'c:/x/y')
    1:         tester("ntpath.join('//computer/share', '/x/y')", '//computer/share/x/y')
    1:         tester("ntpath.join('//computer/share/', '/x/y')", '//computer/share/x/y')
    1:         tester("ntpath.join('//computer/share/a', '/x/y')", '//computer/share/x/y')
       
    1:         tester("ntpath.join('c:', 'C:x/y')", 'C:x/y')
    1:         tester("ntpath.join('c:a/b', 'C:x/y')", 'C:a/b\\x/y')
    1:         tester("ntpath.join('c:/', 'C:x/y')", 'C:/x/y')
    1:         tester("ntpath.join('c:/a/b', 'C:x/y')", 'C:/a/b\\x/y')
       
    8:         for x in ('', 'a/b', '/a/b', 'c:', 'c:a/b', 'c:/', 'c:/a/b'):
   35:             for y in ('d:', 'd:x/y', 'd:/', 'd:/x/y'):
   28:                 tester("ntpath.join(%r, %r)" % (x, y), y)
       
    1:     def test_normpath(self):
    1:         tester("ntpath.normpath('A//////././//.//B')", r'A\B')
    1:         tester("ntpath.normpath('A/./B')", r'A\B')
    1:         tester("ntpath.normpath('A/foo/../B')", r'A\B')
    1:         tester("ntpath.normpath('C:A//B')", r'C:A\B')
    1:         tester("ntpath.normpath('D:A/./B')", r'D:A\B')
    1:         tester("ntpath.normpath('e:A/foo/../B')", r'e:A\B')
       
    1:         tester("ntpath.normpath('C:///A//B')", r'C:\A\B')
    1:         tester("ntpath.normpath('D:///A/./B')", r'D:\A\B')
    1:         tester("ntpath.normpath('e:///A/foo/../B')", r'e:\A\B')
       
    1:         tester("ntpath.normpath('..')", r'..')
    1:         tester("ntpath.normpath('.')", r'.')
    1:         tester("ntpath.normpath('')", r'.')
    1:         tester("ntpath.normpath('/')", '\\')
    1:         tester("ntpath.normpath('c:/')", 'c:\\')
    1:         tester("ntpath.normpath('/../.././..')", '\\')
    1:         tester("ntpath.normpath('c:/../../..')", 'c:\\')
    1:         tester("ntpath.normpath('../.././..')", r'..\..\..')
    1:         tester("ntpath.normpath('K:../.././..')", r'K:..\..\..')
    1:         tester("ntpath.normpath('C:////a/b')", r'C:\a\b')
    1:         tester("ntpath.normpath('//machine/share//a/b')", r'\\machine\share\a\b')
       
    1:         tester("ntpath.normpath('\\\\.\\NUL')", r'\\.\NUL')
    1:         tester("ntpath.normpath('\\\\?\\D:/XY\\Z')", r'\\?\D:/XY\Z')
       
    1:     def test_expandvars(self):
    1:         with test_support.EnvironmentVarGuard() as env:
    1:             env.clear()
    1:             env["foo"] = "bar"
    1:             env["{foo"] = "baz1"
    1:             env["{foo}"] = "baz2"
    1:             tester('ntpath.expandvars("foo")', "foo")
    1:             tester('ntpath.expandvars("$foo bar")', "bar bar")
    1:             tester('ntpath.expandvars("${foo}bar")', "barbar")
    1:             tester('ntpath.expandvars("$[foo]bar")', "$[foo]bar")
    1:             tester('ntpath.expandvars("$bar bar")', "$bar bar")
    1:             tester('ntpath.expandvars("$?bar")', "$?bar")
    1:             tester('ntpath.expandvars("$foo}bar")', "bar}bar")
    1:             tester('ntpath.expandvars("${foo")', "${foo")
    1:             tester('ntpath.expandvars("${{foo}}")', "baz1}")
    1:             tester('ntpath.expandvars("$foo$foo")', "barbar")
    1:             tester('ntpath.expandvars("$bar$bar")', "$bar$bar")
    1:             tester('ntpath.expandvars("%foo% bar")', "bar bar")
    1:             tester('ntpath.expandvars("%foo%bar")', "barbar")
    1:             tester('ntpath.expandvars("%foo%%foo%")', "barbar")
    1:             tester('ntpath.expandvars("%%foo%%foo%foo%")', "%foo%foobar")
    1:             tester('ntpath.expandvars("%?bar%")', "%?bar%")
    1:             tester('ntpath.expandvars("%foo%%bar")', "bar%bar")
    1:             tester('ntpath.expandvars("\'%foo%\'%bar")', "\'%foo%\'%bar")
    1:             tester('ntpath.expandvars("bar\'%foo%")', "bar\'%foo%")
       
    1:     @unittest.skipUnless(test_support.FS_NONASCII, 'need test_support.FS_NONASCII')
           def test_expandvars_nonascii(self):
    1:         encoding = sys.getfilesystemencoding()
    1:         def check(value, expected):
   10:             tester0("ntpath.expandvars(%r)" % value, expected)
   10:             tester0("ntpath.expandvars(%r)" % value.decode(encoding),
   10:                     expected.decode(encoding))
    1:         with test_support.EnvironmentVarGuard() as env:
    1:             env.clear()
    1:             unonascii = test_support.FS_NONASCII
    1:             snonascii = unonascii.encode(encoding)
    1:             env['spam'] = snonascii
    1:             env[snonascii] = 'ham' + snonascii
    1:             check('$spam bar', '%s bar' % snonascii)
    1:             check('$%s bar' % snonascii, '$%s bar' % snonascii)
    1:             check('${spam}bar', '%sbar' % snonascii)
    1:             check('${%s}bar' % snonascii, 'ham%sbar' % snonascii)
    1:             check('$spam}bar', '%s}bar' % snonascii)
    1:             check('$%s}bar' % snonascii, '$%s}bar' % snonascii)
    1:             check('%spam% bar', '%s bar' % snonascii)
    1:             check('%{}% bar'.format(snonascii), 'ham%s bar' % snonascii)
    1:             check('%spam%bar', '%sbar' % snonascii)
    1:             check('%{}%bar'.format(snonascii), 'ham%sbar' % snonascii)
       
    1:     def test_expanduser(self):
    1:         tester('ntpath.expanduser("test")', 'test')
       
    1:         with test_support.EnvironmentVarGuard() as env:
    1:             env.clear()
    1:             tester('ntpath.expanduser("~test")', '~test')
       
    1:             env['HOMEPATH'] = 'eric\\idle'
    1:             env['HOMEDRIVE'] = 'C:\\'
    1:             tester('ntpath.expanduser("~test")', 'C:\\eric\\test')
    1:             tester('ntpath.expanduser("~")', 'C:\\eric\\idle')
       
    1:             del env['HOMEDRIVE']
    1:             tester('ntpath.expanduser("~test")', 'eric\\test')
    1:             tester('ntpath.expanduser("~")', 'eric\\idle')
       
    1:             env.clear()
    1:             env['USERPROFILE'] = 'C:\\eric\\idle'
    1:             tester('ntpath.expanduser("~test")', 'C:\\eric\\test')
    1:             tester('ntpath.expanduser("~")', 'C:\\eric\\idle')
       
    1:             env.clear()
    1:             env['HOME'] = 'C:\\idle\\eric'
    1:             tester('ntpath.expanduser("~test")', 'C:\\idle\\test')
    1:             tester('ntpath.expanduser("~")', 'C:\\idle\\eric')
       
    1:             tester('ntpath.expanduser("~test\\foo\\bar")',
    1:                    'C:\\idle\\test\\foo\\bar')
    1:             tester('ntpath.expanduser("~test/foo/bar")',
    1:                    'C:\\idle\\test/foo/bar')
    1:             tester('ntpath.expanduser("~\\foo\\bar")',
    1:                    'C:\\idle\\eric\\foo\\bar')
    1:             tester('ntpath.expanduser("~/foo/bar")',
    1:                    'C:\\idle\\eric/foo/bar')
       
    1:     def test_abspath(self):
               # ntpath.abspath() can only be used on a system with the "nt" module
               # (reasonably), so we protect this test with "import nt".  This allows
               # the rest of the tests for the ntpath module to be run to completion
               # on any platform, since most of the module is intended to be usable
               # from any platform.
               # XXX this needs more tests
    1:         try:
    1:             import nt
    1:         except ImportError:
                   # check that the function is there even if we are not on Windows
    1:             ntpath.abspath
               else:
>>>>>>             tester('ntpath.abspath("C:\\")', "C:\\")
       
    1:     def test_relpath(self):
    1:         tester('ntpath.relpath("a")', 'a')
    1:         tester('ntpath.relpath(os.path.abspath("a"))', 'a')
    1:         tester('ntpath.relpath("a/b")', 'a\\b')
    1:         tester('ntpath.relpath("../a/b")', '..\\a\\b')
    1:         with test_support.temp_cwd(test_support.TESTFN) as cwd_dir:
    1:             currentdir = os.path.basename(cwd_dir)
    1:             tester('ntpath.relpath("a", "../b")', '..\\'+currentdir+'\\a')
    1:             tester('ntpath.relpath("a/b", "../c")', '..\\'+currentdir+'\\a\\b')
    1:         tester('ntpath.relpath("a", "b/c")', '..\\..\\a')
    1:         tester('ntpath.relpath("//conky/mountpoint/a", "//conky/mountpoint/b/c")', '..\\..\\a')
    1:         tester('ntpath.relpath("a", "a")', '.')
    1:         tester('ntpath.relpath("/foo/bar/bat", "/x/y/z")', '..\\..\\..\\foo\\bar\\bat')
    1:         tester('ntpath.relpath("/foo/bar/bat", "/foo/bar")', 'bat')
    1:         tester('ntpath.relpath("/foo/bar/bat", "/")', 'foo\\bar\\bat')
    1:         tester('ntpath.relpath("/", "/foo/bar/bat")', '..\\..\\..')
    1:         tester('ntpath.relpath("/foo/bar/bat", "/x")', '..\\foo\\bar\\bat')
    1:         tester('ntpath.relpath("/x", "/foo/bar/bat")', '..\\..\\..\\x')
    1:         tester('ntpath.relpath("/", "/")', '.')
    1:         tester('ntpath.relpath("/a", "/a")', '.')
    1:         tester('ntpath.relpath("/a/b", "/a/b")', '.')
    1:         tester('ntpath.relpath("c:/foo", "C:/FOO")', '.')
       
       
    2: class NtCommonTest(test_genericpath.CommonTest):
    1:     pathmodule = ntpath
    1:     attributes = ['relpath', 'splitunc']
       
       
    1: def test_main():
    1:     test_support.run_unittest(TestNtpath, NtCommonTest)
       
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
