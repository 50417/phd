    1: """Recognize image file formats based on their first few bytes."""
       
    1: __all__ = ["what"]
       
       #-------------------------#
       # Recognize image headers #
       #-------------------------#
       
    1: def what(file, h=None):
  123:     f = None
  123:     try:
  123:         if h is None:
   41:             if isinstance(file, basestring):
   23:                 f = open(file, 'rb')
   22:                 h = f.read(32)
                   else:
   18:                 location = file.tell()
   13:                 h = file.read(32)
   12:                 file.seek(location)
  651:         for tf in tests:
  645:             res = tf(h, f)
  644:             if res:
  109:                 return res
           finally:
  123:         if f: f.close()
    6:     return None
       
       
       #---------------------------------#
       # Subroutines per image file type #
       #---------------------------------#
       
    1: tests = []
       
    1: def test_jpeg(h, f):
           """JPEG data in JFIF format"""
  116:     if h[6:10] == 'JFIF':
    4:         return 'jpeg'
       
    1: tests.append(test_jpeg)
       
    1: def test_exif(h, f):
           """JPEG data in Exif format"""
  111:     if h[6:10] == 'Exif':
>>>>>>         return 'jpeg'
       
    1: tests.append(test_exif)
       
    1: def test_png(h, f):
  111:     if h[:8] == "\211PNG\r\n\032\n":
    5:         return 'png'
       
    1: tests.append(test_png)
       
    1: def test_gif(h, f):
           """GIF ('87 and '89 variants)"""
  106:     if h[:6] in ('GIF87a', 'GIF89a'):
   67:         return 'gif'
       
    1: tests.append(test_gif)
       
    1: def test_tiff(h, f):
           """TIFF (can be in Motorola or Intel byte order)"""
   39:     if h[:2] in ('MM', 'II'):
    4:         return 'tiff'
       
    1: tests.append(test_tiff)
       
    1: def test_rgb(h, f):
           """SGI image library"""
   35:     if h[:2] == '\001\332':
    4:         return 'rgb'
       
    1: tests.append(test_rgb)
       
    1: def test_pbm(h, f):
           """PBM (portable bitmap)"""
   31:     if len(h) >= 3 and \
   29:         h[0] == 'P' and h[1] in '14' and h[2] in ' \t\n\r':
    4:         return 'pbm'
       
    1: tests.append(test_pbm)
       
    1: def test_pgm(h, f):
           """PGM (portable graymap)"""
   27:     if len(h) >= 3 and \
   25:         h[0] == 'P' and h[1] in '25' and h[2] in ' \t\n\r':
    4:         return 'pgm'
       
    1: tests.append(test_pgm)
       
    1: def test_ppm(h, f):
           """PPM (portable pixmap)"""
   23:     if len(h) >= 3 and \
   21:         h[0] == 'P' and h[1] in '36' and h[2] in ' \t\n\r':
    4:         return 'ppm'
       
    1: tests.append(test_ppm)
       
    1: def test_rast(h, f):
           """Sun raster file"""
   19:     if h[:4] == '\x59\xA6\x6A\x95':
    4:         return 'rast'
       
    1: tests.append(test_rast)
       
    1: def test_xbm(h, f):
           """X bitmap (X10 or X11)"""
   15:     s = '#define '
   15:     if h[:len(s)] == s:
    4:         return 'xbm'
       
    1: tests.append(test_xbm)
       
    1: def test_bmp(h, f):
   11:     if h[:2] == 'BM':
    4:         return 'bmp'
       
    1: tests.append(test_bmp)
       
       #--------------------#
       # Small test program #
       #--------------------#
       
    1: def test():
>>>>>>     import sys
>>>>>>     recursive = 0
>>>>>>     if sys.argv[1:] and sys.argv[1] == '-r':
>>>>>>         del sys.argv[1:2]
>>>>>>         recursive = 1
>>>>>>     try:
>>>>>>         if sys.argv[1:]:
>>>>>>             testall(sys.argv[1:], recursive, 1)
               else:
>>>>>>             testall(['.'], recursive, 1)
>>>>>>     except KeyboardInterrupt:
>>>>>>         sys.stderr.write('\n[Interrupted]\n')
>>>>>>         sys.exit(1)
       
    1: def testall(list, recursive, toplevel):
>>>>>>     import sys
>>>>>>     import os
>>>>>>     for filename in list:
>>>>>>         if os.path.isdir(filename):
>>>>>>             print filename + '/:',
>>>>>>             if recursive or toplevel:
>>>>>>                 print 'recursing down:'
>>>>>>                 import glob
>>>>>>                 names = glob.glob(os.path.join(filename, '*'))
>>>>>>                 testall(names, recursive, 0)
                   else:
>>>>>>                 print '*** directory (use -r) ***'
               else:
>>>>>>             print filename + ':',
>>>>>>             sys.stdout.flush()
>>>>>>             try:
>>>>>>                 print what(filename)
>>>>>>             except IOError:
>>>>>>                 print '*** not found ***'
