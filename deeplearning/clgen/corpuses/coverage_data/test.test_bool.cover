       # Test properties of bool promised by PEP 285
       
    1: import unittest
    1: from test import test_support
       
    1: import os
       
    2: class BoolTest(unittest.TestCase):
       
    1:     def test_subclass(self):
    1:         try:
    2:             class C(bool):
    1:                 pass
    1:         except TypeError:
    1:             pass
               else:
>>>>>>             self.fail("bool should not be subclassable")
       
    1:         self.assertRaises(TypeError, int.__new__, bool, 0)
       
    1:     def test_print(self):
    1:         try:
    1:             fo = open(test_support.TESTFN, "wb")
    1:             print >> fo, False, True
    1:             fo.close()
    1:             fo = open(test_support.TESTFN, "rb")
    1:             self.assertEqual(fo.read(), 'False True\n')
               finally:
    1:             fo.close()
    1:             os.remove(test_support.TESTFN)
       
    1:     def test_repr(self):
    1:         self.assertEqual(repr(False), 'False')
    1:         self.assertEqual(repr(True), 'True')
    1:         self.assertEqual(eval(repr(False)), False)
    1:         self.assertEqual(eval(repr(True)), True)
       
    1:     def test_str(self):
    1:         self.assertEqual(str(False), 'False')
    1:         self.assertEqual(str(True), 'True')
       
    1:     def test_int(self):
    1:         self.assertEqual(int(False), 0)
    1:         self.assertIsNot(int(False), False)
    1:         self.assertEqual(int(True), 1)
    1:         self.assertIsNot(int(True), True)
       
    1:     def test_float(self):
    1:         self.assertEqual(float(False), 0.0)
    1:         self.assertIsNot(float(False), False)
    1:         self.assertEqual(float(True), 1.0)
    1:         self.assertIsNot(float(True), True)
       
    1:     def test_long(self):
    1:         self.assertEqual(long(False), 0L)
    1:         self.assertIsNot(long(False), False)
    1:         self.assertEqual(long(True), 1L)
    1:         self.assertIsNot(long(True), True)
       
    1:     def test_math(self):
    1:         self.assertEqual(+False, 0)
    1:         self.assertIsNot(+False, False)
    1:         self.assertEqual(-False, 0)
    1:         self.assertIsNot(-False, False)
    1:         self.assertEqual(abs(False), 0)
    1:         self.assertIsNot(abs(False), False)
    1:         self.assertEqual(+True, 1)
    1:         self.assertIsNot(+True, True)
    1:         self.assertEqual(-True, -1)
    1:         self.assertEqual(abs(True), 1)
    1:         self.assertIsNot(abs(True), True)
    1:         self.assertEqual(~False, -1)
    1:         self.assertEqual(~True, -2)
       
    1:         self.assertEqual(False+2, 2)
    1:         self.assertEqual(True+2, 3)
    1:         self.assertEqual(2+False, 2)
    1:         self.assertEqual(2+True, 3)
       
    1:         self.assertEqual(False+False, 0)
    1:         self.assertIsNot(False+False, False)
    1:         self.assertEqual(False+True, 1)
    1:         self.assertIsNot(False+True, True)
    1:         self.assertEqual(True+False, 1)
    1:         self.assertIsNot(True+False, True)
    1:         self.assertEqual(True+True, 2)
       
    1:         self.assertEqual(True-True, 0)
    1:         self.assertIsNot(True-True, False)
    1:         self.assertEqual(False-False, 0)
    1:         self.assertIsNot(False-False, False)
    1:         self.assertEqual(True-False, 1)
    1:         self.assertIsNot(True-False, True)
    1:         self.assertEqual(False-True, -1)
       
    1:         self.assertEqual(True*1, 1)
    1:         self.assertEqual(False*1, 0)
    1:         self.assertIsNot(False*1, False)
       
    1:         self.assertEqual(True//1, 1)
    1:         self.assertIsNot(True//1, True)
    1:         self.assertEqual(False//1, 0)
    1:         self.assertIsNot(False//1, False)
       
    3:         for b in False, True:
    8:             for i in 0, 1, 2:
    6:                 self.assertEqual(b**i, int(b)**i)
    6:                 self.assertIsNot(b**i, bool(int(b)**i))
       
    3:         for a in False, True:
    6:             for b in False, True:
    4:                 self.assertIs(a&b, bool(int(a)&int(b)))
    4:                 self.assertIs(a|b, bool(int(a)|int(b)))
    4:                 self.assertIs(a^b, bool(int(a)^int(b)))
    4:                 self.assertEqual(a&int(b), int(a)&int(b))
    4:                 self.assertIsNot(a&int(b), bool(int(a)&int(b)))
    4:                 self.assertEqual(a|int(b), int(a)|int(b))
    4:                 self.assertIsNot(a|int(b), bool(int(a)|int(b)))
    4:                 self.assertEqual(a^int(b), int(a)^int(b))
    4:                 self.assertIsNot(a^int(b), bool(int(a)^int(b)))
    4:                 self.assertEqual(int(a)&b, int(a)&int(b))
    4:                 self.assertIsNot(int(a)&b, bool(int(a)&int(b)))
    4:                 self.assertEqual(int(a)|b, int(a)|int(b))
    4:                 self.assertIsNot(int(a)|b, bool(int(a)|int(b)))
    4:                 self.assertEqual(int(a)^b, int(a)^int(b))
    4:                 self.assertIsNot(int(a)^b, bool(int(a)^int(b)))
       
    1:         self.assertIs(1==1, True)
    1:         self.assertIs(1==0, False)
    1:         self.assertIs(0<1, True)
    1:         self.assertIs(1<0, False)
    1:         self.assertIs(0<=0, True)
    1:         self.assertIs(1<=0, False)
    1:         self.assertIs(1>0, True)
    1:         self.assertIs(1>1, False)
    1:         self.assertIs(1>=1, True)
    1:         self.assertIs(0>=1, False)
    1:         self.assertIs(0!=1, True)
    1:         self.assertIs(0!=0, False)
       
    1:         x = [1]
    1:         self.assertIs(x is x, True)
    1:         self.assertIs(x is not x, False)
       
    1:         self.assertIs(1 in x, True)
    1:         self.assertIs(0 in x, False)
    1:         self.assertIs(1 not in x, False)
    1:         self.assertIs(0 not in x, True)
       
    1:         x = {1: 2}
    1:         self.assertIs(x is x, True)
    1:         self.assertIs(x is not x, False)
       
    1:         self.assertIs(1 in x, True)
    1:         self.assertIs(0 in x, False)
    1:         self.assertIs(1 not in x, False)
    1:         self.assertIs(0 not in x, True)
       
    1:         self.assertIs(not True, False)
    1:         self.assertIs(not False, True)
       
    1:     def test_convert(self):
    1:         self.assertRaises(TypeError, bool, 42, 42)
    1:         self.assertIs(bool(10), True)
    1:         self.assertIs(bool(1), True)
    1:         self.assertIs(bool(-1), True)
    1:         self.assertIs(bool(0), False)
    1:         self.assertIs(bool("hello"), True)
    1:         self.assertIs(bool(""), False)
    1:         self.assertIs(bool(), False)
       
    1:     def test_format(self):
    1:         self.assertEqual("%d" % False, "0")
    1:         self.assertEqual("%d" % True, "1")
    1:         self.assertEqual("%x" % False, "0")
    1:         self.assertEqual("%x" % True, "1")
       
    1:     def test_hasattr(self):
    1:         self.assertIs(hasattr([], "append"), True)
    1:         self.assertIs(hasattr([], "wobble"), False)
       
    1:     def test_callable(self):
    1:         self.assertIs(callable(len), True)
    1:         self.assertIs(callable(1), False)
       
    1:     def test_isinstance(self):
    1:         self.assertIs(isinstance(True, bool), True)
    1:         self.assertIs(isinstance(False, bool), True)
    1:         self.assertIs(isinstance(True, int), True)
    1:         self.assertIs(isinstance(False, int), True)
    1:         self.assertIs(isinstance(1, bool), False)
    1:         self.assertIs(isinstance(0, bool), False)
       
    1:     def test_issubclass(self):
    1:         self.assertIs(issubclass(bool, int), True)
    1:         self.assertIs(issubclass(int, bool), False)
       
    1:     def test_haskey(self):
    1:         self.assertIs(1 in {}, False)
    1:         self.assertIs(1 in {1:1}, True)
    1:         with test_support.check_py3k_warnings():
    1:             self.assertIs({}.has_key(1), False)
    1:             self.assertIs({1:1}.has_key(1), True)
       
    1:     def test_string(self):
    1:         self.assertIs("xyz".endswith("z"), True)
    1:         self.assertIs("xyz".endswith("x"), False)
    1:         self.assertIs("xyz0123".isalnum(), True)
    1:         self.assertIs("@#$%".isalnum(), False)
    1:         self.assertIs("xyz".isalpha(), True)
    1:         self.assertIs("@#$%".isalpha(), False)
    1:         self.assertIs("0123".isdigit(), True)
    1:         self.assertIs("xyz".isdigit(), False)
    1:         self.assertIs("xyz".islower(), True)
    1:         self.assertIs("XYZ".islower(), False)
    1:         self.assertIs(" ".isspace(), True)
    1:         self.assertIs("XYZ".isspace(), False)
    1:         self.assertIs("X".istitle(), True)
    1:         self.assertIs("x".istitle(), False)
    1:         self.assertIs("XYZ".isupper(), True)
    1:         self.assertIs("xyz".isupper(), False)
    1:         self.assertIs("xyz".startswith("x"), True)
    1:         self.assertIs("xyz".startswith("z"), False)
       
    1:         if test_support.have_unicode:
    1:             self.assertIs(unicode("xyz", 'ascii').endswith(unicode("z", 'ascii')), True)
    1:             self.assertIs(unicode("xyz", 'ascii').endswith(unicode("x", 'ascii')), False)
    1:             self.assertIs(unicode("xyz0123", 'ascii').isalnum(), True)
    1:             self.assertIs(unicode("@#$%", 'ascii').isalnum(), False)
    1:             self.assertIs(unicode("xyz", 'ascii').isalpha(), True)
    1:             self.assertIs(unicode("@#$%", 'ascii').isalpha(), False)
    1:             self.assertIs(unicode("0123", 'ascii').isdecimal(), True)
    1:             self.assertIs(unicode("xyz", 'ascii').isdecimal(), False)
    1:             self.assertIs(unicode("0123", 'ascii').isdigit(), True)
    1:             self.assertIs(unicode("xyz", 'ascii').isdigit(), False)
    1:             self.assertIs(unicode("xyz", 'ascii').islower(), True)
    1:             self.assertIs(unicode("XYZ", 'ascii').islower(), False)
    1:             self.assertIs(unicode("0123", 'ascii').isnumeric(), True)
    1:             self.assertIs(unicode("xyz", 'ascii').isnumeric(), False)
    1:             self.assertIs(unicode(" ", 'ascii').isspace(), True)
    1:             self.assertIs(unicode("XYZ", 'ascii').isspace(), False)
    1:             self.assertIs(unicode("X", 'ascii').istitle(), True)
    1:             self.assertIs(unicode("x", 'ascii').istitle(), False)
    1:             self.assertIs(unicode("XYZ", 'ascii').isupper(), True)
    1:             self.assertIs(unicode("xyz", 'ascii').isupper(), False)
    1:             self.assertIs(unicode("xyz", 'ascii').startswith(unicode("x", 'ascii')), True)
    1:             self.assertIs(unicode("xyz", 'ascii').startswith(unicode("z", 'ascii')), False)
       
    1:     def test_boolean(self):
    1:         self.assertEqual(True & 1, 1)
    1:         self.assertNotIsInstance(True & 1, bool)
    1:         self.assertIs(True & True, True)
       
    1:         self.assertEqual(True | 1, 1)
    1:         self.assertNotIsInstance(True | 1, bool)
    1:         self.assertIs(True | True, True)
       
    1:         self.assertEqual(True ^ 1, 0)
    1:         self.assertNotIsInstance(True ^ 1, bool)
    1:         self.assertIs(True ^ True, False)
       
    1:     def test_fileclosed(self):
    1:         try:
    1:             f = file(test_support.TESTFN, "w")
    1:             self.assertIs(f.closed, False)
    1:             f.close()
    1:             self.assertIs(f.closed, True)
               finally:
    1:             os.remove(test_support.TESTFN)
       
    1:     def test_types(self):
               # types are always true.
    1:         for t in [bool, complex, dict, file, float, int, list, long, object,
   14:                   set, str, tuple, type]:
   13:             self.assertIs(bool(t), True)
       
    1:     def test_operator(self):
    1:         import operator
    1:         self.assertIs(operator.truth(0), False)
    1:         self.assertIs(operator.truth(1), True)
    1:         with test_support.check_py3k_warnings():
    1:             self.assertIs(operator.isCallable(0), False)
    1:             self.assertIs(operator.isCallable(len), True)
    1:         self.assertIs(operator.isNumberType(None), False)
    1:         self.assertIs(operator.isNumberType(0), True)
    1:         self.assertIs(operator.not_(1), False)
    1:         self.assertIs(operator.not_(0), True)
    1:         self.assertIs(operator.isSequenceType(0), False)
    1:         self.assertIs(operator.isSequenceType([]), True)
    1:         self.assertIs(operator.contains([], 1), False)
    1:         self.assertIs(operator.contains([1], 1), True)
    1:         self.assertIs(operator.isMappingType(1), False)
    1:         self.assertIs(operator.isMappingType({}), True)
    1:         self.assertIs(operator.lt(0, 0), False)
    1:         self.assertIs(operator.lt(0, 1), True)
    1:         self.assertIs(operator.is_(True, True), True)
    1:         self.assertIs(operator.is_(True, False), False)
    1:         self.assertIs(operator.is_not(True, True), False)
    1:         self.assertIs(operator.is_not(True, False), True)
       
    1:     def test_marshal(self):
    1:         import marshal
    1:         self.assertIs(marshal.loads(marshal.dumps(True)), True)
    1:         self.assertIs(marshal.loads(marshal.dumps(False)), False)
       
    1:     def test_pickle(self):
    1:         import pickle
    4:         for proto in range(pickle.HIGHEST_PROTOCOL + 1):
    3:             self.assertIs(pickle.loads(pickle.dumps(True, proto)), True)
    3:             self.assertIs(pickle.loads(pickle.dumps(False, proto)), False)
       
    1:     def test_cpickle(self):
    1:         import cPickle
    4:         for proto in range(cPickle.HIGHEST_PROTOCOL + 1):
    3:             self.assertIs(cPickle.loads(cPickle.dumps(True, proto)), True)
    3:             self.assertIs(cPickle.loads(cPickle.dumps(False, proto)), False)
       
    1:     def test_mixedpickle(self):
    1:         import pickle, cPickle
    4:         for proto in range(pickle.HIGHEST_PROTOCOL + 1):
    3:             self.assertIs(pickle.loads(cPickle.dumps(True, proto)), True)
    3:             self.assertIs(pickle.loads(cPickle.dumps(False, proto)), False)
    3:             self.assertIs(cPickle.loads(pickle.dumps(True, proto)), True)
    3:             self.assertIs(cPickle.loads(pickle.dumps(False, proto)), False)
       
    1:     def test_picklevalues(self):
    1:         import pickle, cPickle
       
               # Test for specific backwards-compatible pickle values
    1:         self.assertEqual(pickle.dumps(True, protocol=0), "I01\n.")
    1:         self.assertEqual(pickle.dumps(False, protocol=0), "I00\n.")
    1:         self.assertEqual(cPickle.dumps(True, protocol=0), "I01\n.")
    1:         self.assertEqual(cPickle.dumps(False, protocol=0), "I00\n.")
    1:         self.assertEqual(pickle.dumps(True, protocol=1), "I01\n.")
    1:         self.assertEqual(pickle.dumps(False, protocol=1), "I00\n.")
    1:         self.assertEqual(cPickle.dumps(True, protocol=1), "I01\n.")
    1:         self.assertEqual(cPickle.dumps(False, protocol=1), "I00\n.")
    1:         self.assertEqual(pickle.dumps(True, protocol=2), b'\x80\x02\x88.')
    1:         self.assertEqual(pickle.dumps(False, protocol=2), b'\x80\x02\x89.')
    1:         self.assertEqual(cPickle.dumps(True, protocol=2), b'\x80\x02\x88.')
    1:         self.assertEqual(cPickle.dumps(False, protocol=2), b'\x80\x02\x89.')
       
    1:     def test_convert_to_bool(self):
               # Verify that TypeError occurs when bad things are returned
               # from __nonzero__().  This isn't really a bool test, but
               # it's related.
    4:         check = lambda o: self.assertRaises(TypeError, bool, o)
    2:         class Foo(object):
    1:             def __nonzero__(self):
    1:                 return self
    1:         check(Foo())
       
    2:         class Bar(object):
    1:             def __nonzero__(self):
    1:                 return "Yes"
    1:         check(Bar())
       
    2:         class Baz(int):
    1:             def __nonzero__(self):
    1:                 return self
    1:         check(Baz())
       
       
    1: def test_main():
    1:     test_support.run_unittest(BoolTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
