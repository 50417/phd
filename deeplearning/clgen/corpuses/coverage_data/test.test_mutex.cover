    1: import unittest
    1: import test.test_support
       
    1: mutex = test.test_support.import_module("mutex", deprecated=True)
       
    2: class MutexTest(unittest.TestCase):
       
    1:     def test_lock_and_unlock(self):
       
    1:         def called_by_mutex(some_data):
    1:             self.assertEqual(some_data, "spam")
    1:             self.assertTrue(m.test(), "mutex not held")
                   # Nested locking
    1:             m.lock(called_by_mutex2, "eggs")
       
    1:         def called_by_mutex2(some_data):
    1:             self.assertEqual(some_data, "eggs")
    1:             self.assertTrue(m.test(), "mutex not held")
    1:             self.assertTrue(ready_for_2,
    1:                          "called_by_mutex2 called too soon")
       
    1:         m = mutex.mutex()
    1:         read_for_2 = False
    1:         m.lock(called_by_mutex, "spam")
    1:         ready_for_2 = True
               # unlock both locks
    1:         m.unlock()
    1:         m.unlock()
    1:         self.assertFalse(m.test(), "mutex still held")
       
    1: def test_main():
    1:     test.test_support.run_unittest(MutexTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
