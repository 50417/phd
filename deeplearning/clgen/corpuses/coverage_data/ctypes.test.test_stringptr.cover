    1: import unittest
    1: from ctypes import *
       
    1: import _ctypes_test
       
    1: lib = CDLL(_ctypes_test.__file__)
       
    2: class StringPtrTestCase(unittest.TestCase):
       
    1:     def test__POINTER_c_char(self):
    2:         class X(Structure):
    1:             _fields_ = [("str", POINTER(c_char))]
    1:         x = X()
       
               # NULL pointer access
    1:         self.assertRaises(ValueError, getattr, x.str, "contents")
    1:         b = c_buffer("Hello, World")
    1:         from sys import getrefcount as grc
    1:         self.assertEqual(grc(b), 2)
>>>>>>         x.str = b
>>>>>>         self.assertEqual(grc(b), 3)
       
               # POINTER(c_char) and Python string is NOT compatible
               # POINTER(c_char) and c_buffer() is compatible
>>>>>>         for i in range(len(b)):
>>>>>>             self.assertEqual(b[i], x.str[i])
       
>>>>>>         self.assertRaises(TypeError, setattr, x, "str", "Hello, World")
       
    1:     def test__c_char_p(self):
    2:         class X(Structure):
    1:             _fields_ = [("str", c_char_p)]
    1:         x = X()
       
               # c_char_p and Python string is compatible
               # c_char_p and c_buffer is NOT compatible
    1:         self.assertEqual(x.str, None)
    1:         x.str = "Hello, World"
    1:         self.assertEqual(x.str, "Hello, World")
    1:         b = c_buffer("Hello, World")
    1:         self.assertRaises(TypeError, setattr, x, "str", b)
       
       
    1:     def test_functions(self):
    1:         strchr = lib.my_strchr
    1:         strchr.restype = c_char_p
       
               # c_char_p and Python string is compatible
               # c_char_p and c_buffer are now compatible
    1:         strchr.argtypes = c_char_p, c_char
    1:         self.assertEqual(strchr("abcdef", "c"), "cdef")
    1:         self.assertEqual(strchr(c_buffer("abcdef"), "c"), "cdef")
       
               # POINTER(c_char) and Python string is NOT compatible
               # POINTER(c_char) and c_buffer() is compatible
    1:         strchr.argtypes = POINTER(c_char), c_char
    1:         buf = c_buffer("abcdef")
    1:         self.assertEqual(strchr(buf, "c"), "cdef")
    1:         self.assertEqual(strchr("abcdef", "c"), "cdef")
       
               # XXX These calls are dangerous, because the first argument
               # to strchr is no longer valid after the function returns!
               # So we must keep a reference to buf separately
       
    1:         strchr.restype = POINTER(c_char)
    1:         buf = c_buffer("abcdef")
    1:         r = strchr(buf, "c")
    1:         x = r[0], r[1], r[2], r[3], r[4]
    1:         self.assertEqual(x, ("c", "d", "e", "f", "\000"))
    1:         del buf
               # x1 will NOT be the same as x, usually:
    1:         x1 = r[0], r[1], r[2], r[3], r[4]
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
