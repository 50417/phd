    1: from __future__ import unicode_literals
       
    1: import unittest
    1: from test import test_support
       
    2: class TestFuture(unittest.TestCase):
    1:     def assertType(self, obj, typ):
   28:         self.assertTrue(type(obj) is typ,
   28:             "type(%r) is %r, not %r" % (obj, type(obj), typ))
       
    1:     def test_unicode_strings(self):
    1:         self.assertType("", unicode)
    1:         self.assertType('', unicode)
    1:         self.assertType(r"", unicode)
    1:         self.assertType(r'', unicode)
    1:         self.assertType(""" """, unicode)
    1:         self.assertType(''' ''', unicode)
    1:         self.assertType(r""" """, unicode)
    1:         self.assertType(r''' ''', unicode)
    1:         self.assertType(u"", unicode)
    1:         self.assertType(u'', unicode)
    1:         self.assertType(ur"", unicode)
    1:         self.assertType(ur'', unicode)
    1:         self.assertType(u""" """, unicode)
    1:         self.assertType(u''' ''', unicode)
    1:         self.assertType(ur""" """, unicode)
    1:         self.assertType(ur''' ''', unicode)
       
    1:         self.assertType(b"", str)
    1:         self.assertType(b'', str)
    1:         self.assertType(br"", str)
    1:         self.assertType(br'', str)
    1:         self.assertType(b""" """, str)
    1:         self.assertType(b''' ''', str)
    1:         self.assertType(br""" """, str)
    1:         self.assertType(br''' ''', str)
       
    1:         self.assertType('' '', unicode)
    1:         self.assertType('' u'', unicode)
    1:         self.assertType(u'' '', unicode)
    1:         self.assertType(u'' u'', unicode)
       
    1: def test_main():
    1:     test_support.run_unittest(TestFuture)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
