       # Copyright 2008 Armin Ronacher.
       # Licensed to PSF under a Contributor Agreement.
       
       """Fixer that cleans up a tuple argument to isinstance after the tokens
       in it were fixed.  This is mainly used to remove double occurrences of
       tokens as a leftover of the long -> int / unicode -> str conversion.
       
       eg.  isinstance(x, (int, long)) -> isinstance(x, (int, int))
              -> isinstance(x, int)
    1: """
       
    1: from .. import fixer_base
    1: from ..fixer_util import token
       
       
    2: class FixIsinstance(fixer_base.BaseFix):
    1:     BM_compatible = True
           PATTERN = """
           power<
               'isinstance'
               trailer< '(' arglist< any ',' atom< '('
                   args=testlist_gexp< any+ >
               ')' > > ')' >
           >
    1:     """
       
    1:     run_order = 6
       
    1:     def transform(self, node, results):
    6:         names_inserted = set()
    6:         testlist = results["args"]
    6:         args = testlist.children
    6:         new_args = []
    6:         iterator = enumerate(args)
   41:         for idx, arg in iterator:
   35:             if arg.type == token.NAME and arg.value in names_inserted:
   10:                 if idx < len(args) - 1 and args[idx + 1].type == token.COMMA:
    7:                     iterator.next()
    7:                     continue
                   else:
   25:                 new_args.append(arg)
   25:                 if arg.type == token.NAME:
   11:                     names_inserted.add(arg.value)
    6:         if new_args and new_args[-1].type == token.COMMA:
    3:             del new_args[-1]
    6:         if len(new_args) == 1:
    1:             atom = testlist.parent
    1:             new_args[0].prefix = atom.prefix
    1:             atom.replace(new_args[0])
               else:
    5:             args[:] = new_args
    5:             node.changed()
