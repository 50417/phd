       """
       atexit.py - allow programmer to define multiple exit functions to be executed
       upon normal program termination.
       
       One public function, register, is defined.
    2: """
       
    2: __all__ = ["register"]
       
    2: import sys
       
    2: _exithandlers = []
    2: def _run_exitfuncs():
           """run any registered exit functions
       
           _exithandlers is traversed in reverse order so functions are executed
           last in, first out.
           """
       
    6:     exc_info = None
   18:     while _exithandlers:
   12:         func, targs, kargs = _exithandlers.pop()
   12:         try:
   12:             func(*targs, **kargs)
    4:         except SystemExit:
    1:             exc_info = sys.exc_info()
    3:         except:
    3:             import traceback
    3:             print >> sys.stderr, "Error in atexit._run_exitfuncs:"
    3:             traceback.print_exc()
    3:             exc_info = sys.exc_info()
       
    6:     if exc_info is not None:
    3:         raise exc_info[0], exc_info[1], exc_info[2]
       
       
    2: def register(func, *targs, **kargs):
           """register a function to be executed upon normal program termination
       
           func - function to be called at exit
           targs - optional arguments to pass to func
           kargs - optional keyword arguments to pass to func
       
           func is returned to facilitate usage as a decorator.
           """
   14:     _exithandlers.append((func, targs, kargs))
   14:     return func
       
    2: if hasattr(sys, "exitfunc"):
           # Assume it's another registered exit function - append it to our list
    1:     register(sys.exitfunc)
    2: sys.exitfunc = _run_exitfuncs
       
    2: if __name__ == "__main__":
>>>>>>     def x1():
>>>>>>         print "running x1"
>>>>>>     def x2(n):
>>>>>>         print "running x2(%r)" % (n,)
>>>>>>     def x3(n, kwd=None):
>>>>>>         print "running x3(%r, kwd=%r)" % (n, kwd)
       
>>>>>>     register(x1)
>>>>>>     register(x2, 12)
>>>>>>     register(x3, 5, "bar")
>>>>>>     register(x3, "no kwd args")
