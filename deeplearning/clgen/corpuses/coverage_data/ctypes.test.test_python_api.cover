    1: from ctypes import *
    1: import unittest, sys
    1: from ctypes.test import requires
       
       ################################################################
       # This section should be moved into ctypes\__init__.py, when it's ready.
       
    1: from _ctypes import PyObj_FromPtr
       
       ################################################################
       
    1: from sys import getrefcount as grc
    1: if sys.version_info > (2, 4):
    1:     c_py_ssize_t = c_size_t
       else:
>>>>>>     c_py_ssize_t = c_int
       
    2: class PythonAPITestCase(unittest.TestCase):
       
    1:     def test_PyString_FromStringAndSize(self):
    1:         PyString_FromStringAndSize = pythonapi.PyString_FromStringAndSize
       
    1:         PyString_FromStringAndSize.restype = py_object
    1:         PyString_FromStringAndSize.argtypes = c_char_p, c_py_ssize_t
       
    1:         self.assertEqual(PyString_FromStringAndSize("abcdefghi", 3), "abc")
       
    1:     def test_PyString_FromString(self):
    1:         pythonapi.PyString_FromString.restype = py_object
    1:         pythonapi.PyString_FromString.argtypes = (c_char_p,)
       
    1:         s = "abc"
    1:         refcnt = grc(s)
    1:         pyob = pythonapi.PyString_FromString(s)
    1:         self.assertEqual(grc(s), refcnt)
    1:         self.assertEqual(s, pyob)
    1:         del pyob
    1:         self.assertEqual(grc(s), refcnt)
       
           # This test is unreliable, because it is possible that code in
           # unittest changes the refcount of the '42' integer.  So, it
           # is disabled by default.
    1:     def test_PyInt_Long(self):
    1:         requires("refcount")
>>>>>>         ref42 = grc(42)
>>>>>>         pythonapi.PyInt_FromLong.restype = py_object
>>>>>>         self.assertEqual(pythonapi.PyInt_FromLong(42), 42)
       
>>>>>>         self.assertEqual(grc(42), ref42)
       
>>>>>>         pythonapi.PyInt_AsLong.argtypes = (py_object,)
>>>>>>         pythonapi.PyInt_AsLong.restype = c_long
       
>>>>>>         res = pythonapi.PyInt_AsLong(42)
>>>>>>         self.assertEqual(grc(res), ref42 + 1)
>>>>>>         del res
>>>>>>         self.assertEqual(grc(42), ref42)
       
    1:     def test_PyObj_FromPtr(self):
    1:         s = "abc def ghi jkl"
    1:         ref = grc(s)
               # id(python-object) is the address
    1:         pyobj = PyObj_FromPtr(id(s))
    1:         self.assertIs(s, pyobj)
       
    1:         self.assertEqual(grc(s), ref + 1)
>>>>>>         del pyobj
>>>>>>         self.assertEqual(grc(s), ref)
       
    1:     def test_PyOS_snprintf(self):
    1:         PyOS_snprintf = pythonapi.PyOS_snprintf
    1:         PyOS_snprintf.argtypes = POINTER(c_char), c_size_t, c_char_p
       
    1:         buf = c_buffer(256)
    1:         PyOS_snprintf(buf, sizeof(buf), "Hello from %s", "ctypes")
    1:         self.assertEqual(buf.value, "Hello from ctypes")
       
    1:         PyOS_snprintf(buf, sizeof(buf), "Hello from %s", "ctypes", 1, 2, 3)
    1:         self.assertEqual(buf.value, "Hello from ctypes")
       
               # not enough arguments
    1:         self.assertRaises(TypeError, PyOS_snprintf, buf)
       
    1:     def test_pyobject_repr(self):
    1:         self.assertEqual(repr(py_object()), "py_object(<NULL>)")
    1:         self.assertEqual(repr(py_object(42)), "py_object(42)")
    1:         self.assertEqual(repr(py_object(object)), "py_object(%r)" % object)
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
