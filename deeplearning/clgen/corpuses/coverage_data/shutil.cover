       """Utility functions for copying and archiving files and directory trees.
       
       XXX The functions here don't copy the resource fork or other metadata on Mac.
       
       """
       
>>>>>> import os
>>>>>> import sys
>>>>>> import stat
>>>>>> from os.path import abspath
>>>>>> import fnmatch
>>>>>> import collections
>>>>>> import errno
       
>>>>>> try:
>>>>>>     import zlib
>>>>>>     del zlib
>>>>>>     _ZLIB_SUPPORTED = True
>>>>>> except ImportError:
>>>>>>     _ZLIB_SUPPORTED = False
       
>>>>>> try:
>>>>>>     import bz2
>>>>>>     del bz2
>>>>>>     _BZ2_SUPPORTED = True
>>>>>> except ImportError:
>>>>>>     _BZ2_SUPPORTED = False
       
>>>>>> try:
>>>>>>     from pwd import getpwnam
>>>>>> except ImportError:
>>>>>>     getpwnam = None
       
>>>>>> try:
>>>>>>     from grp import getgrnam
>>>>>> except ImportError:
>>>>>>     getgrnam = None
       
>>>>>> __all__ = ["copyfileobj", "copyfile", "copymode", "copystat", "copy", "copy2",
>>>>>>            "copytree", "move", "rmtree", "Error", "SpecialFileError",
>>>>>>            "ExecError", "make_archive", "get_archive_formats",
>>>>>>            "register_archive_format", "unregister_archive_format",
>>>>>>            "ignore_patterns"]
       
>>>>>> class Error(EnvironmentError):
>>>>>>     pass
       
>>>>>> class SpecialFileError(EnvironmentError):
           """Raised when trying to do a kind of operation (e.g. copying) which is
           not supported on a special file (e.g. a named pipe)"""
       
>>>>>> class ExecError(EnvironmentError):
           """Raised when a command could not be executed"""
       
>>>>>> try:
>>>>>>     WindowsError
>>>>>> except NameError:
>>>>>>     WindowsError = None
       
>>>>>> def copyfileobj(fsrc, fdst, length=16*1024):
           """copy data from file-like object fsrc to file-like object fdst"""
  150:     while 1:
  262:         buf = fsrc.read(length)
  236:         if not buf:
  124:             break
  112:         fdst.write(buf)
       
>>>>>> def _samefile(src, dst):
           # Macintosh, Unix.
   58:     if hasattr(os.path, 'samefile'):
   58:         try:
   58:             return os.path.samefile(src, dst)
   48:         except OSError:
   48:             return False
       
           # All other platforms: check for same pathname.
>>>>>>     return (os.path.normcase(os.path.abspath(src)) ==
>>>>>>             os.path.normcase(os.path.abspath(dst)))
       
>>>>>> def copyfile(src, dst):
           """Copy data from src to dst"""
   51:     if _samefile(src, dst):
    2:         raise Error("`%s` and `%s` are the same file" % (src, dst))
       
  142:     for fn in [src, dst]:
   96:         try:
   96:             st = os.stat(fn)
   50:         except OSError:
                   # File most likely does not exist
   50:             pass
               else:
                   # XXX What about other special files? (sockets, devices...)
   46:             if stat.S_ISFIFO(st.st_mode):
    3:                 raise SpecialFileError("`%s` is a named pipe" % fn)
       
   46:     with open(src, 'rb') as fsrc:
   45:         with open(dst, 'wb') as fdst:
   44:             copyfileobj(fsrc, fdst)
       
>>>>>> def copymode(src, dst):
           """Copy mode bits from src to dst"""
   26:     if hasattr(os, 'chmod'):
   26:         st = os.stat(src)
   26:         mode = stat.S_IMODE(st.st_mode)
   26:         os.chmod(dst, mode)
       
>>>>>> def copystat(src, dst):
           """Copy all stat info (mode bits, atime, mtime, flags) from src to dst"""
   29:     st = os.stat(src)
   29:     mode = stat.S_IMODE(st.st_mode)
   29:     if hasattr(os, 'utime'):
   29:         os.utime(dst, (st.st_atime, st.st_mtime))
   29:     if hasattr(os, 'chmod'):
   29:         os.chmod(dst, mode)
   29:     if hasattr(os, 'chflags') and hasattr(st, 'st_flags'):
   29:         try:
   29:             os.chflags(dst, st.st_flags)
    3:         except OSError, why:
    6:             for err in 'EOPNOTSUPP', 'ENOTSUP':
    5:                 if hasattr(errno, err) and why.errno == getattr(errno, err):
    2:                     break
                   else:
    1:                 raise
       
>>>>>> def copy(src, dst):
           """Copy data and mode bits ("cp src dst").
       
           The destination may be a directory.
       
           """
   20:     if os.path.isdir(dst):
   11:         dst = os.path.join(dst, os.path.basename(src))
   20:     copyfile(src, dst)
   20:     copymode(src, dst)
       
>>>>>> def copy2(src, dst):
           """Copy data and all stat info ("cp -p src dst").
       
           The destination may be a directory.
       
           """
   17:     if os.path.isdir(dst):
>>>>>>         dst = os.path.join(dst, os.path.basename(src))
   17:     copyfile(src, dst)
   16:     copystat(src, dst)
       
>>>>>> def ignore_patterns(*patterns):
           """Function that can be used as copytree() ignore parameter.
       
           Patterns is a sequence of glob-style patterns
           that are used to exclude files"""
    2:     def _ignore_patterns(path, names):
    5:         ignored_names = []
   15:         for pattern in patterns:
   10:             ignored_names.extend(fnmatch.filter(names, pattern))
    5:         return set(ignored_names)
    2:     return _ignore_patterns
       
>>>>>> def copytree(src, dst, symlinks=False, ignore=None):
           """Recursively copy a directory tree using copy2().
       
           The destination directory must not already exist.
           If exception(s) occur, an Error is raised with a list of reasons.
       
           If the optional symlinks flag is true, symbolic links in the
           source tree result in symbolic links in the destination tree; if
           it is false, the contents of the files pointed to by symbolic
           links are copied.
       
           The optional ignore argument is a callable. If given, it
           is called with the `src` parameter, which is the directory
           being visited by copytree(), and `names` which is the list of
           `src` contents, as returned by os.listdir():
       
               callable(src, names) -> ignored_names
       
           Since copytree() is called recursively, the callable will be
           called once for each directory that is copied. It returns a
           list of names relative to the `src` directory that should
           not be copied.
       
           XXX Consider this example code rather than the ultimate tool.
       
           """
   10:     names = os.listdir(src)
   10:     if ignore is not None:
    6:         ignored_names = ignore(src, names)
           else:
    4:         ignored_names = set()
       
   10:     os.makedirs(dst)
   10:     errors = []
   32:     for name in names:
   22:         if name in ignored_names:
    7:             continue
   15:         srcname = os.path.join(src, name)
   15:         dstname = os.path.join(dst, name)
   15:         try:
   15:             if symlinks and os.path.islink(srcname):
>>>>>>                 linkto = os.readlink(srcname)
>>>>>>                 os.symlink(linkto, dstname)
   15:             elif os.path.isdir(srcname):
    5:                 copytree(srcname, dstname, symlinks, ignore)
                   else:
                       # Will raise a SpecialFileError for unsupported file types
   10:                 copy2(srcname, dstname)
               # catch the Error from the recursive copytree so that we can
               # continue with other files
    2:         except Error, err:
    1:             errors.extend(err.args[0])
    1:         except EnvironmentError, why:
    1:             errors.append((srcname, dstname, str(why)))
   10:     try:
   10:         copystat(src, dst)
>>>>>>     except OSError, why:
>>>>>>         if WindowsError is not None and isinstance(why, WindowsError):
                   # Copying file access times may fail on Windows
>>>>>>             pass
               else:
>>>>>>             errors.append((src, dst, str(why)))
   10:     if errors:
    2:         raise Error, errors
       
>>>>>> def rmtree(path, ignore_errors=False, onerror=None):
           """Recursively delete a directory tree.
       
           If ignore_errors is set, errors are ignored; otherwise, if onerror
           is set, it is called to handle the error with arguments (func,
           path, exc_info) where func is os.listdir, os.remove, or os.rmdir;
           path is the argument to that function that caused it to fail; and
           exc_info is a tuple returned by sys.exc_info().  If ignore_errors
           is false and onerror is None, an exception is raised.
       
           """
 1348:     if ignore_errors:
  108:         def onerror(*args):
   32:             pass
 1240:     elif onerror is None:
  594:         def onerror(*args):
   13:             raise
 1348:     try:
 1348:         if os.path.islink(path):
                   # symlinks to directories are forbidden, see bug #1669
    1:             raise OSError("Cannot call rmtree on a symbolic link")
    1:     except OSError:
    1:         onerror(os.path.islink, path, sys.exc_info())
               # can't continue even if onerror hook returns
>>>>>>         return
 1347:     names = []
 1347:     try:
 1347:         names = os.listdir(path)
   26:     except os.error, err:
   26:         onerror(os.listdir, path, sys.exc_info())
 3270:     for name in names:
 1935:         fullname = os.path.join(path, name)
 1935:         try:
 1935:             mode = os.lstat(fullname).st_mode
    1:         except os.error:
    1:             mode = 0
 1935:         if stat.S_ISDIR(mode):
  648:             rmtree(fullname, ignore_errors, onerror)
               else:
 1287:             try:
 1287:                 os.remove(fullname)
    2:             except os.error, err:
    2:                 onerror(os.remove, fullname, sys.exc_info())
 1335:     try:
 1335:         os.rmdir(path)
   18:     except os.error:
   18:         onerror(os.rmdir, path, sys.exc_info())
       
       
>>>>>> def _basename(path):
           # A basename() variant which first strips the trailing slash, if present.
           # Thus we always get the last component of the path, even for directories.
    6:     sep = os.path.sep + (os.path.altsep or '')
    6:     return os.path.basename(path.rstrip(sep))
       
>>>>>> def move(src, dst):
           """Recursively move a file or directory to another location. This is
           similar to the Unix "mv" command.
       
           If the destination is a directory or a symlink to a directory, the source
           is moved inside the directory. The destination path must not already
           exist.
       
           If the destination already exists but is not a directory, it may be
           overwritten depending on os.rename() semantics.
       
           If the destination is on our current filesystem, then rename() is used.
           Otherwise, src is copied to the destination and then removed.
           A lot more could be done here...  A look at a mv.c shows a lot of
           the issues this implementation glosses over.
       
           """
   24:     real_dst = dst
   24:     if os.path.isdir(dst):
    7:         if _samefile(src, dst):
                   # We might be on a case insensitive filesystem,
                   # perform the rename anyway.
    1:             os.rename(src, dst)
    1:             return
       
    6:         real_dst = os.path.join(dst, _basename(src))
    6:         if os.path.exists(real_dst):
    1:             raise Error, "Destination path '%s' already exists" % real_dst
   22:     try:
   22:         os.rename(src, real_dst)
    1:     except OSError:
    1:         if os.path.isdir(src):
    1:             if _destinsrc(src, dst):
    1:                 raise Error, "Cannot move a directory '%s' into itself '%s'." % (src, dst)
>>>>>>             copytree(src, real_dst, symlinks=True)
>>>>>>             rmtree(src)
               else:
>>>>>>             copy2(src, real_dst)
>>>>>>             os.unlink(src)
       
>>>>>> def _destinsrc(src, dst):
    4:     src = abspath(src)
    4:     dst = abspath(dst)
    4:     if not src.endswith(os.path.sep):
    4:         src += os.path.sep
    4:     if not dst.endswith(os.path.sep):
    4:         dst += os.path.sep
    4:     return dst.startswith(src)
       
>>>>>> def _get_gid(name):
           """Returns a gid, given a group name."""
    9:     if getgrnam is None or name is None:
    6:         return None
    3:     try:
    3:         result = getgrnam(name)
    1:     except KeyError:
    1:         result = None
    3:     if result is not None:
    2:         return result[2]
    1:     return None
       
>>>>>> def _get_uid(name):
           """Returns an uid, given a user name."""
    9:     if getpwnam is None or name is None:
    6:         return None
    3:     try:
    3:         result = getpwnam(name)
    1:     except KeyError:
    1:         result = None
    3:     if result is not None:
    2:         return result[2]
    1:     return None
       
>>>>>> def _make_tarball(base_name, base_dir, compress="gzip", verbose=0, dry_run=0,
>>>>>>                   owner=None, group=None, logger=None):
           """Create a (possibly compressed) tar file from all the files under
           'base_dir'.
       
           'compress' must be "gzip" (the default), "bzip2", or None.
       
           'owner' and 'group' can be used to define an owner and a group for the
           archive that is being built. If not provided, the current owner and group
           will be used.
       
           The output tar file will be named 'base_name' +  ".tar", possibly plus
           the appropriate compression extension (".gz", or ".bz2").
       
           Returns the output filename.
           """
    9:     if compress is None:
    6:         tar_compression = ''
    3:     elif _ZLIB_SUPPORTED and compress == 'gzip':
    3:         tar_compression = 'gz'
>>>>>>     elif _BZ2_SUPPORTED and compress == 'bzip2':
>>>>>>         tar_compression = 'bz2'
           else:
>>>>>>         raise ValueError("bad value for 'compress', or compression format not "
>>>>>>                          "supported : {0}".format(compress))
       
    9:     compress_ext = '.' + tar_compression if compress else ''
    9:     archive_name = base_name + '.tar' + compress_ext
    9:     archive_dir = os.path.dirname(archive_name)
       
    9:     if archive_dir and not os.path.exists(archive_dir):
    1:         if logger is not None:
>>>>>>             logger.info("creating %s", archive_dir)
    1:         if not dry_run:
    1:             os.makedirs(archive_dir)
       
       
           # creating the tarball
    9:     import tarfile  # late import so Python build itself doesn't break
       
    9:     if logger is not None:
>>>>>>         logger.info('Creating tar archive')
       
    9:     uid = _get_uid(owner)
    9:     gid = _get_gid(group)
       
    9:     def _set_uid_gid(tarinfo):
   43:         if gid is not None:
   12:             tarinfo.gid = gid
   12:             tarinfo.gname = group
   43:         if uid is not None:
   12:             tarinfo.uid = uid
   12:             tarinfo.uname = owner
   43:         return tarinfo
       
    9:     if not dry_run:
    8:         tar = tarfile.open(archive_name, 'w|%s' % tar_compression)
    8:         try:
    8:             tar.add(base_dir, filter=_set_uid_gid)
               finally:
    8:             tar.close()
       
    9:     return archive_name
       
>>>>>> def _call_external_zip(base_dir, zip_filename, verbose=False, dry_run=False):
           # XXX see if we want to keep an external call here
>>>>>>     if verbose:
>>>>>>         zipoptions = "-r"
           else:
>>>>>>         zipoptions = "-rq"
>>>>>>     from distutils.errors import DistutilsExecError
>>>>>>     from distutils.spawn import spawn
>>>>>>     try:
>>>>>>         spawn(["zip", zipoptions, zip_filename, base_dir], dry_run=dry_run)
>>>>>>     except DistutilsExecError:
               # XXX really should distinguish between "couldn't find
               # external 'zip' command" and "zip failed".
>>>>>>         raise ExecError, \
>>>>>>             ("unable to create zip file '%s': "
                   "could neither import the 'zipfile' module nor "
>>>>>>             "find a standalone zip utility") % zip_filename
       
>>>>>> def _make_zipfile(base_name, base_dir, verbose=0, dry_run=0, logger=None):
           """Create a zip file from all the files under 'base_dir'.
       
           The output zip file will be named 'base_name' + ".zip".  Uses either the
           "zipfile" Python module (if available) or the InfoZIP "zip" utility
           (if installed and found on the default search path).  If neither tool is
           available, raises ExecError.  Returns the name of the output zip
           file.
           """
    7:     zip_filename = base_name + ".zip"
    7:     archive_dir = os.path.dirname(base_name)
       
    7:     if archive_dir and not os.path.exists(archive_dir):
    1:         if logger is not None:
>>>>>>             logger.info("creating %s", archive_dir)
    1:         if not dry_run:
    1:             os.makedirs(archive_dir)
       
           # If zipfile module is not available, try spawning an external 'zip'
           # command.
    7:     try:
    7:         import zlib
    7:         import zipfile
>>>>>>     except ImportError:
>>>>>>         zipfile = None
       
    7:     if zipfile is None:
>>>>>>         _call_external_zip(base_dir, zip_filename, verbose, dry_run)
           else:
    7:         if logger is not None:
>>>>>>             logger.info("creating '%s' and adding '%s' to it",
>>>>>>                         zip_filename, base_dir)
       
    7:         if not dry_run:
    7:             with zipfile.ZipFile(zip_filename, "w",
    7:                                  compression=zipfile.ZIP_DEFLATED) as zf:
    7:                 path = os.path.normpath(base_dir)
    7:                 if path != os.curdir:
    5:                     zf.write(path, path)
    5:                     if logger is not None:
>>>>>>                         logger.info("adding '%s'", path)
   27:                 for dirpath, dirnames, filenames in os.walk(base_dir):
   33:                     for name in sorted(dirnames):
   13:                         path = os.path.normpath(os.path.join(dirpath, name))
   13:                         zf.write(path, path)
   13:                         if logger is not None:
>>>>>>                             logger.info("adding '%s'", path)
   40:                     for name in filenames:
   20:                         path = os.path.normpath(os.path.join(dirpath, name))
   20:                         if os.path.isfile(path):
   20:                             zf.write(path, path)
   20:                             if logger is not None:
>>>>>>                                 logger.info("adding '%s'", path)
       
    7:     return zip_filename
       
>>>>>> _ARCHIVE_FORMATS = {
>>>>>>     'tar':   (_make_tarball, [('compress', None)], "uncompressed tar file"),
>>>>>>     'zip':   (_make_zipfile, [], "ZIP file")
       }
       
>>>>>> if _ZLIB_SUPPORTED:
>>>>>>     _ARCHIVE_FORMATS['gztar'] = (_make_tarball, [('compress', 'gzip')],
>>>>>>                                 "gzip'ed tar-file")
       
>>>>>> if _BZ2_SUPPORTED:
>>>>>>     _ARCHIVE_FORMATS['bztar'] = (_make_tarball, [('compress', 'bzip2')],
>>>>>>                                 "bzip2'ed tar-file")
       
>>>>>> def get_archive_formats():
           """Returns a list of supported formats for archiving and unarchiving.
       
           Each element of the returned sequence is a tuple (name, description)
           """
    2:     formats = [(name, registry[2]) for name, registry in
   11:                _ARCHIVE_FORMATS.items()]
    2:     formats.sort()
    2:     return formats
       
>>>>>> def register_archive_format(name, function, extra_args=None, description=''):
           """Registers an archive format.
       
           name is the name of the format. function is the callable that will be
           used to create archives. If provided, extra_args is a sequence of
           (name, value) tuples that will be passed as arguments to the callable.
           description can be provided to describe the format, and will be returned
           by the get_archive_formats() function.
           """
    5:     if extra_args is None:
    1:         extra_args = []
    5:     if not isinstance(function, collections.Callable):
    1:         raise TypeError('The %s object is not callable' % function)
    4:     if not isinstance(extra_args, (tuple, list)):
    1:         raise TypeError('extra_args needs to be a sequence')
    5:     for element in extra_args:
    3:         if not isinstance(element, (tuple, list)) or len(element) !=2 :
    1:             raise TypeError('extra_args elements are : (arg_name, value)')
       
    2:     _ARCHIVE_FORMATS[name] = (function, extra_args, description)
       
>>>>>> def unregister_archive_format(name):
    2:     del _ARCHIVE_FORMATS[name]
       
>>>>>> def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0,
>>>>>>                  dry_run=0, owner=None, group=None, logger=None):
           """Create an archive file (eg. zip or tar).
       
           'base_name' is the name of the file to create, minus any format-specific
           extension; 'format' is the archive format: one of "zip", "tar", "gztar",
           or "bztar".  Or any other registered format.
       
           'root_dir' is a directory that will be the root directory of the
           archive; ie. we typically chdir into 'root_dir' before creating the
           archive.  'base_dir' is the directory where we start archiving from;
           ie. 'base_dir' will be the common prefix of all files and
           directories in the archive.  'root_dir' and 'base_dir' both default
           to the current directory.  Returns the name of the archive file.
       
           'owner' and 'group' are used when creating a tar archive. By default,
           uses the current owner and group.
           """
   18:     save_cwd = os.getcwd()
   18:     if root_dir is not None:
   15:         if logger is not None:
>>>>>>             logger.debug("changing into '%s'", root_dir)
   15:         base_name = os.path.abspath(base_name)
   15:         if not dry_run:
   14:             os.chdir(root_dir)
       
   18:     if base_dir is None:
    5:         base_dir = os.curdir
       
   18:     kwargs = {'dry_run': dry_run, 'logger': logger}
       
   18:     try:
   18:         format_info = _ARCHIVE_FORMATS[format]
    1:     except KeyError:
    1:         raise ValueError, "unknown archive format '%s'" % format
       
   17:     func = format_info[0]
   26:     for arg, val in format_info[1]:
    9:         kwargs[arg] = val
       
   17:     if format != 'zip':
   10:         kwargs['owner'] = owner
   10:         kwargs['group'] = group
       
   17:     try:
   17:         filename = func(base_name, base_dir, **kwargs)
           finally:
   17:         if root_dir is not None:
   15:             if logger is not None:
>>>>>>                 logger.debug("changing back to '%s'", save_cwd)
   15:             os.chdir(save_cwd)
       
   16:     return filename
