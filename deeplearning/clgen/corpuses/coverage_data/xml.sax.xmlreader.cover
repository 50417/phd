       """An XML Reader is the SAX 2 name for an XML parser. XML Parsers
    2: should be based on this code. """
       
    2: import handler
       
    2: from _exceptions import SAXNotSupportedException, SAXNotRecognizedException
       
       
       # ===== XMLREADER =====
       
    4: class XMLReader:
           """Interface for reading an XML document using callbacks.
       
           XMLReader is the interface that an XML parser's SAX2 driver must
           implement. This interface allows an application to set and query
           features and properties in the parser, to register event handlers
           for document processing, and to initiate a document parse.
       
           All SAX interfaces are assumed to be synchronous: the parse
           methods must not return until parsing is complete, and readers
           must wait for an event-handler callback to return before reporting
    2:     the next event."""
       
    2:     def __init__(self):
   89:         self._cont_handler = handler.ContentHandler()
   89:         self._dtd_handler = handler.DTDHandler()
   89:         self._ent_handler = handler.EntityResolver()
   89:         self._err_handler = handler.ErrorHandler()
       
    2:     def parse(self, source):
               "Parse an XML document from a system identifier or an InputSource."
>>>>>>         raise NotImplementedError("This method must be implemented!")
       
    2:     def getContentHandler(self):
               "Returns the current ContentHandler."
>>>>>>         return self._cont_handler
       
    2:     def setContentHandler(self, handler):
               "Registers a new object to receive document content events."
   80:         self._cont_handler = handler
       
    2:     def getDTDHandler(self):
               "Returns the current DTD handler."
>>>>>>         return self._dtd_handler
       
    2:     def setDTDHandler(self, handler):
               "Register an object to receive basic DTD-related events."
    1:         self._dtd_handler = handler
       
    2:     def getEntityResolver(self):
               "Returns the current EntityResolver."
>>>>>>         return self._ent_handler
       
    2:     def setEntityResolver(self, resolver):
               "Register an object to resolve external entities."
    1:         self._ent_handler = resolver
       
    2:     def getErrorHandler(self):
               "Returns the current ErrorHandler."
>>>>>>         return self._err_handler
       
    2:     def setErrorHandler(self, handler):
               "Register an object to receive error-message events."
   58:         self._err_handler = handler
       
    2:     def setLocale(self, locale):
               """Allow an application to set the locale for errors and warnings.
       
               SAX parsers are not required to provide localization for errors
               and warnings; if they cannot support the requested locale,
               however, they must raise a SAX exception. Applications may
               request a locale change in the middle of a parse."""
>>>>>>         raise SAXNotSupportedException("Locale support not implemented")
       
    2:     def getFeature(self, name):
               "Looks up and returns the state of a SAX2 feature."
>>>>>>         raise SAXNotRecognizedException("Feature '%s' not recognized" % name)
       
    2:     def setFeature(self, name, state):
               "Sets the state of a SAX2 feature."
>>>>>>         raise SAXNotRecognizedException("Feature '%s' not recognized" % name)
       
    2:     def getProperty(self, name):
               "Looks up and returns the value of a SAX2 property."
>>>>>>         raise SAXNotRecognizedException("Property '%s' not recognized" % name)
       
    2:     def setProperty(self, name, value):
               "Sets the value of a SAX2 property."
>>>>>>         raise SAXNotRecognizedException("Property '%s' not recognized" % name)
       
    4: class IncrementalParser(XMLReader):
           """This interface adds three extra methods to the XMLReader
           interface that allow XML parsers to support incremental
           parsing. Support for this interface is optional, since not all
           underlying XML parsers support this functionality.
       
           When the parser is instantiated it is ready to begin accepting
           data from the feed method immediately. After parsing has been
           finished with a call to close the reset method must be called to
           make the parser ready to accept new data, either from feed or
           using the parse method.
       
           Note that these methods must _not_ be called during parsing, that
           is, after parse has been called and before it returns.
       
           By default, the class also implements the parse method of the XMLReader
           interface using the feed, close and reset methods of the
           IncrementalParser interface as a convenience to SAX 2.0 driver
    2:     writers."""
       
    2:     def __init__(self, bufsize=2**16):
   89:         self._bufsize = bufsize
   89:         XMLReader.__init__(self)
       
    2:     def parse(self, source):
   73:         import saxutils
   73:         source = saxutils.prepare_input_source(source)
       
   73:         self.prepareParser(source)
   73:         file = source.getByteStream()
   73:         buffer = file.read(self._bufsize)
  140:         while buffer != "":
   73:             self.feed(buffer)
   67:             buffer = file.read(self._bufsize)
   67:         self.close()
       
    2:     def feed(self, data):
               """This method gives the raw XML data in the data parameter to
               the parser and makes it parse the data, emitting the
               corresponding events. It is allowed for XML constructs to be
               split across several calls to feed.
       
               feed may raise SAXException."""
>>>>>>         raise NotImplementedError("This method must be implemented!")
       
    2:     def prepareParser(self, source):
               """This method is called by the parse implementation to allow
               the SAX 2.0 driver to prepare itself for parsing."""
>>>>>>         raise NotImplementedError("prepareParser must be overridden!")
       
    2:     def close(self):
               """This method is called when the entire XML document has been
               passed to the parser through the feed method, to notify the
               parser that there are no more data. This allows the parser to
               do the final checks on the document and empty the internal
               data buffer.
       
               The parser will not be ready to parse another document until
               the reset method has been called.
       
               close may raise SAXException."""
>>>>>>         raise NotImplementedError("This method must be implemented!")
       
    2:     def reset(self):
               """This method is called after close has been called to reset
               the parser so that it is ready to parse new documents. The
               results of calling parse or feed after close without calling
               reset are undefined."""
>>>>>>         raise NotImplementedError("This method must be implemented!")
       
       # ===== LOCATOR =====
       
    4: class Locator:
           """Interface for associating a SAX event with a document
           location. A locator object will return valid results only during
           calls to DocumentHandler methods; at any other time, the
    2:     results are unpredictable."""
       
    2:     def getColumnNumber(self):
               "Return the column number where the current event ends."
>>>>>>         return -1
       
    2:     def getLineNumber(self):
               "Return the line number where the current event ends."
>>>>>>         return -1
       
    2:     def getPublicId(self):
               "Return the public identifier for the current event."
>>>>>>         return None
       
    2:     def getSystemId(self):
               "Return the system identifier for the current event."
>>>>>>         return None
       
       # ===== INPUTSOURCE =====
       
    4: class InputSource:
           """Encapsulation of the information needed by the XMLReader to
           read entities.
       
           This class may include information about the public identifier,
           system identifier, byte stream (possibly with character encoding
           information) and/or the character stream of an entity.
       
           Applications will create objects of this class for use in the
           XMLReader.parse method and for returning from
           EntityResolver.resolveEntity.
       
           An InputSource belongs to the application, the XMLReader is not
           allowed to modify InputSource objects passed to it from the
    2:     application, although it may make copies and modify those."""
       
    2:     def __init__(self, system_id = None):
  166:         self.__system_id = system_id
  166:         self.__public_id = None
  166:         self.__encoding  = None
  166:         self.__bytefile  = None
  166:         self.__charfile  = None
       
    2:     def setPublicId(self, public_id):
               "Sets the public identifier of this InputSource."
>>>>>>         self.__public_id = public_id
       
    2:     def getPublicId(self):
               "Returns the public identifier of this InputSource."
    3:         return self.__public_id
       
    2:     def setSystemId(self, system_id):
               "Sets the system identifier of this InputSource."
   39:         self.__system_id = system_id
       
    2:     def getSystemId(self):
               "Returns the system identifier of this InputSource."
  144:         return self.__system_id
       
    2:     def setEncoding(self, encoding):
               """Sets the character encoding of this InputSource.
       
               The encoding must be a string acceptable for an XML encoding
               declaration (see section 4.3.3 of the XML recommendation).
       
               The encoding attribute of the InputSource is ignored if the
               InputSource also contains a character stream."""
    1:         self.__encoding = encoding
       
    2:     def getEncoding(self):
               "Get the character encoding of this InputSource."
  155:         return self.__encoding
       
    2:     def setByteStream(self, bytefile):
               """Set the byte stream (a Python file-like object which does
               not perform byte-to-character conversion) for this input
               source.
       
               The SAX parser will ignore this if there is also a character
               stream specified, but it will use a byte stream in preference
               to opening a URI connection itself.
       
               If the application knows the character encoding of the byte
               stream, it should set it with the setEncoding method."""
   77:         self.__bytefile = bytefile
       
    2:     def getByteStream(self):
               """Get the byte stream for this input source.
       
               The getEncoding method will return the character encoding for
               this byte stream, or None if unknown."""
  310:         return self.__bytefile
       
    2:     def setCharacterStream(self, charfile):
               """Set the character stream for this input source. (The stream
               must be a Python 2.0 Unicode-wrapped file-like that performs
               conversion to Unicode strings.)
       
               If there is a character stream specified, the SAX parser will
               ignore any byte stream and will not attempt to open a URI
               connection to the system identifier."""
>>>>>>         self.__charfile = charfile
       
    2:     def getCharacterStream(self):
               "Get the character stream for this input source."
   87:         return self.__charfile
       
       # ===== ATTRIBUTESIMPL =====
       
    4: class AttributesImpl:
       
    2:     def __init__(self, attrs):
               """Non-NS-aware implementation.
       
               attrs should be of the form {name : value}."""
  393:         self._attrs = attrs
       
    2:     def getLength(self):
    8:         return len(self._attrs)
       
    2:     def getType(self, name):
>>>>>>         return "CDATA"
       
    2:     def getValue(self, name):
    8:         return self._attrs[name]
       
    2:     def getValueByQName(self, name):
    4:         return self._attrs[name]
       
    2:     def getNameByQName(self, name):
    4:         if not name in self._attrs:
    2:             raise KeyError, name
    2:         return name
       
    2:     def getQNameByName(self, name):
    4:         if not name in self._attrs:
    2:             raise KeyError, name
    2:         return name
       
    2:     def getNames(self):
    8:         return self._attrs.keys()
       
    2:     def getQNames(self):
    4:         return self._attrs.keys()
       
    2:     def __len__(self):
    8:         return len(self._attrs)
       
    2:     def __getitem__(self, name):
    8:         return self._attrs[name]
       
    2:     def keys(self):
    7:         return self._attrs.keys()
       
    2:     def has_key(self, name):
    8:         return name in self._attrs
       
    2:     def __contains__(self, name):
>>>>>>         return name in self._attrs
       
    2:     def get(self, name, alternative=None):
   16:         return self._attrs.get(name, alternative)
       
    2:     def copy(self):
>>>>>>         return self.__class__(self._attrs)
       
    2:     def items(self):
  401:         return self._attrs.items()
       
    2:     def values(self):
    8:         return self._attrs.values()
       
       # ===== ATTRIBUTESNSIMPL =====
       
    4: class AttributesNSImpl(AttributesImpl):
       
    2:     def __init__(self, attrs, qnames):
               """NS-aware implementation.
       
               attrs should be of the form {(ns_uri, lname): value, ...}.
               qnames of the form {(ns_uri, lname): qname, ...}."""
   10:         self._attrs = attrs
   10:         self._qnames = qnames
       
    2:     def getValueByQName(self, name):
    3:         for (nsname, qname) in self._qnames.items():
    1:             if qname == name:
    1:                 return self._attrs[nsname]
       
    2:         raise KeyError, name
       
    2:     def getNameByQName(self, name):
    3:         for (nsname, qname) in self._qnames.items():
    1:             if qname == name:
    1:                 return nsname
       
    2:         raise KeyError, name
       
    2:     def getQNameByName(self, name):
    3:         return self._qnames[name]
       
    2:     def getQNames(self):
    5:         return self._qnames.values()
       
    2:     def copy(self):
>>>>>>         return self.__class__(self._attrs, self._qnames)
       
       
    2: def _test():
>>>>>>     XMLReader()
>>>>>>     IncrementalParser()
>>>>>>     Locator()
       
    2: if __name__ == "__main__":
>>>>>>     _test()
