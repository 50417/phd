       """Generic interface to all dbm clones.
       
       Instead of
       
               import dbm
               d = dbm.open(file, 'w', 0666)
       
       use
       
               import anydbm
               d = anydbm.open(file, 'w')
       
       The returned object is a dbhash, gdbm, dbm or dumbdbm object,
       dependent on the type of database being opened (determined by whichdb
       module) in the case of an existing dbm. If the dbm does not exist and
       the create or new flag ('c' or 'n') was specified, the dbm type will
       be determined by the availability of the modules (tested in the above
       order).
       
       It has the following interface (key and data are strings):
       
               d[key] = data   # store data at key (may override data at
                               # existing key)
               data = d[key]   # retrieve data at key (raise KeyError if no
                               # such key)
               del d[key]      # delete data stored at key (raises KeyError
                               # if no such key)
               flag = key in d   # true if the key exists
               list = d.keys() # return a list of all existing keys (slow!)
       
       Future versions may change the order in which implementations are
       tested for existence, and add interfaces to other dbm-like
       implementations.
    1: """
       
    2: class error(Exception):
    1:     pass
       
    1: _names = ['dbhash', 'gdbm', 'dbm', 'dumbdbm']
    1: _errors = [error]
    1: _defaultmod = None
       
    5: for _name in _names:
    4:     try:
    4:         _mod = __import__(_name)
    1:     except ImportError:
    1:         continue
    3:     if not _defaultmod:
    1:         _defaultmod = _mod
    3:     _errors.append(_mod.error)
       
    1: if not _defaultmod:
>>>>>>     raise ImportError, "no dbm clone found; tried %s" % _names
       
    1: error = tuple(_errors)
       
    1: def open(file, flag='r', mode=0666):
           """Open or create database at path given by *file*.
       
           Optional argument *flag* can be 'r' (default) for read-only access, 'w'
           for read-write access of an existing database, 'c' for read-write access
           to a new or existing database, and 'n' for read-write access to a new
           database.
       
           Note: 'r' and 'w' fail if the database doesn't exist; 'c' creates it
           only if it doesn't exist; and 'n' always creates a new database.
           """
       
           # guess the type of an existing database
   88:     from whichdb import whichdb
   88:     result=whichdb(file)
   88:     if result is None:
               # db doesn't exist
   85:         if 'c' in flag or 'n' in flag:
                   # file doesn't exist and the new
                   # flag was used so use default type
   85:             mod = _defaultmod
               else:
>>>>>>             raise error, "need 'c' or 'n' flag to open new db"
    3:     elif result == "":
               # db type cannot be determined
>>>>>>         raise error, "db type could not be determined"
           else:
    3:         mod = __import__(result)
   88:     return mod.open(file, flag, mode)
