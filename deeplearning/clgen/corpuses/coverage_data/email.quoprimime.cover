       # Copyright (C) 2001-2006 Python Software Foundation
       # Author: Ben Gertzfield
       # Contact: email-sig@python.org
       
       """Quoted-printable content transfer encoding per RFCs 2045-2047.
       
       This module handles the content transfer encoding method defined in RFC 2045
       to encode US ASCII-like 8-bit data called `quoted-printable'.  It is used to
       safely encode text that is in a character set similar to the 7-bit US ASCII
       character set, but that includes some 8-bit characters that are normally not
       allowed in email bodies or headers.
       
       Quoted-printable is very space-inefficient for encoding binary files; use the
       email.base64mime module for that instead.
       
       This module provides an interface to encode and decode both headers and bodies
       with quoted-printable encoding.
       
       RFC 2045 defines a method for including character set information in an
       `encoded-word' in a header.  This method is commonly used for 8-bit real names
       in To:/From:/Cc: etc. fields, as well as Subject: lines.
       
       This module does not do the line wrapping or end-of-line character
       conversion necessary for proper internationalized headers; it only
       does dumb encoding and decoding.  To deal with the various line
       wrapping issues, use the email.header module.
    1: """
       
       __all__ = [
    1:     'body_decode',
    1:     'body_encode',
    1:     'body_quopri_check',
    1:     'body_quopri_len',
    1:     'decode',
    1:     'decodestring',
    1:     'encode',
    1:     'encodestring',
    1:     'header_decode',
    1:     'header_encode',
    1:     'header_quopri_check',
    1:     'header_quopri_len',
    1:     'quote',
    1:     'unquote',
           ]
       
    1: import re
       
    1: from string import hexdigits
    1: from email.utils import fix_eols
       
    1: CRLF = '\r\n'
    1: NL = '\n'
       
       # See also Charset.py
    1: MISC_LEN = 7
       
    1: hqre = re.compile(r'[^-a-zA-Z0-9!*+/ ]')
    1: bqre = re.compile(r'[^ !-<>-~\t]')
       
       
       
       # Helpers
    1: def header_quopri_check(c):
           """Return True if the character should be escaped with header quopri."""
  768:     return bool(hqre.match(c))
       
       
    1: def body_quopri_check(c):
           """Return True if the character should be escaped with body quopri."""
  768:     return bool(bqre.match(c))
       
       
    1: def header_quopri_len(s):
           """Return the length of str when it is encoded with header quopri."""
 2063:     count = 0
67196:     for c in s:
65133:         if hqre.match(c):
25651:             count += 3
               else:
39482:             count += 1
 2063:     return count
       
       
    1: def body_quopri_len(str):
           """Return the length of str when it is encoded with body quopri."""
  768:     count = 0
 1536:     for c in str:
  768:         if bqre.match(c):
  483:             count += 3
               else:
  285:             count += 1
  768:     return count
       
       
    1: def _max_append(L, s, maxlen, extra=''):
 6193:     if not L:
  856:         L.append(s.lstrip())
 5337:     elif len(L[-1]) + len(s) <= maxlen:
 5008:         L[-1] += extra + s
           else:
  329:         L.append(s.lstrip())
       
       
    1: def unquote(s):
           """Turn a string in the form =AB to the ASCII character with value 0xab"""
  869:     return chr(int(s[1:3], 16))
       
       
    1: def quote(c):
  780:     return "=%02X" % ord(c)
       
       
       
    1: def header_encode(header, charset="iso-8859-1", keep_eols=False,
    1:                   maxlinelen=76, eol=NL):
           """Encode a single header line with quoted-printable (like) encoding.
       
           Defined in RFC 2045, this `Q' encoding is similar to quoted-printable, but
           used specifically for email header fields to allow charsets with mostly 7
           bit characters (and some 8 bit) to remain more or less readable in non-RFC
           2045 aware mail clients.
       
           charset names the character set to use to encode the header.  It defaults
           to iso-8859-1.
       
           The resulting string will be in the form:
       
           "=?charset?q?I_f=E2rt_in_your_g=E8n=E8ral_dire=E7tion?\\n
             =?charset?q?Silly_=C8nglish_Kn=EEghts?="
       
           with each line wrapped safely at, at most, maxlinelen characters (defaults
           to 76 characters).  If maxlinelen is None, the entire string is encoded in
           one chunk with no splitting.
       
           End-of-line characters (\\r, \\n, \\r\\n) will be automatically converted
           to the canonical email line separator \\r\\n unless the keep_eols
           parameter is True (the default is False).
       
           Each line of the header will be terminated in the value of eol, which
           defaults to "\\n".  Set this to "\\r\\n" if you are using the result of
           this function directly in email.
           """
           # Return empty headers unchanged
  162:     if not header:
>>>>>>         return header
       
  162:     if not keep_eols:
  159:         header = fix_eols(header)
       
           # Quopri encode each line, in encoded chunks no greater than maxlinelen in
           # length, after the RFC chrome is added in.
  162:     quoted = []
  162:     if maxlinelen is None:
               # An obnoxiously large number that's good enough
  135:         max_encoded = 100000
           else:
   27:         max_encoded = maxlinelen - len(charset) - MISC_LEN - 1
       
 5293:     for c in header:
               # Space may be represented as _ instead of =20 for readability
 5131:         if c == ' ':
  679:             _max_append(quoted, '_', max_encoded)
               # These characters can be included verbatim
 4452:         elif not hqre.match(c):
 4222:             _max_append(quoted, c, max_encoded)
               # Otherwise, replace with hex value like =E2
               else:
  230:             _max_append(quoted, "=%02X" % ord(c), max_encoded)
       
           # Now add the RFC chrome to each encoded chunk and glue the chunks
           # together.  BAW: should we be able to specify the leading whitespace in
           # the joiner?
  162:     joiner = eol + ' '
  348:     return joiner.join(['=?%s?q?%s?=' % (charset, line) for line in quoted])
       
       
       
    1: def encode(body, binary=False, maxlinelen=76, eol=NL):
           """Encode with quoted-printable, wrapping at maxlinelen characters.
       
           If binary is False (the default), end-of-line characters will be converted
           to the canonical email end-of-line sequence \\r\\n.  Otherwise they will
           be left verbatim.
       
           Each line of encoded text will end with eol, which defaults to "\\n".  Set
           this to "\\r\\n" if you will be using the result of this function directly
           in an email.
       
           Each line will be wrapped at, at most, maxlinelen characters (defaults to
           76 characters).  Long lines will have the `soft linefeed' quoted-printable
           character "=" appended to them, so the decoded text will be identical to
           the original text.
           """
   33:     if not body:
    6:         return body
       
   27:     if not binary:
   27:         body = fix_eols(body)
       
           # BAW: We're accumulating the body text by string concatenation.  That
           # can't be very efficient, but I don't have time now to rewrite it.  It
           # just feels like this algorithm could be more efficient.
   27:     encoded_body = ''
   27:     lineno = -1
           # Preserve line endings here so we can check later to see an eol needs to
           # be added to the output later.
   27:     lines = body.splitlines(1)
   66:     for line in lines:
               # But strip off line-endings for processing this line.
   39:         if line.endswith(CRLF):
   12:             line = line[:-2]
   27:         elif line[-1] in CRLF:
>>>>>>             line = line[:-1]
       
   39:         lineno += 1
   39:         encoded_line = ''
   39:         prev = None
   39:         linelen = len(line)
               # Now we need to examine every character to see if it needs to be
               # quopri encoded.  BAW: again, string concatenation is inefficient.
  906:         for j in range(linelen):
  867:             c = line[j]
  867:             prev = c
  867:             if bqre.match(c):
    6:                 c = quote(c)
  861:             elif j+1 == linelen:
                       # Check for whitespace at end of line; special case
   36:                 if c not in ' \t':
   30:                     encoded_line += c
   36:                 prev = c
   36:                 continue
                   # Check to see to see if the line has reached its maximum length
  831:             if len(encoded_line) + len(c) >= maxlinelen:
   12:                 encoded_body += encoded_line + '=' + eol
   12:                 encoded_line = ''
  831:             encoded_line += c
               # Now at end of line..
   39:         if prev and prev in ' \t':
                   # Special case for whitespace at end of file
    6:             if lineno + 1 == len(lines):
    6:                 prev = quote(prev)
    6:                 if len(encoded_line) + len(prev) > maxlinelen:
>>>>>>                     encoded_body += encoded_line + '=' + eol + prev
                       else:
    6:                     encoded_body += encoded_line + prev
                   # Just normal whitespace at end of line
                   else:
>>>>>>                 encoded_body += encoded_line + prev + '=' + eol
    6:             encoded_line = ''
               # Now look at the line we just finished and it has a line ending, we
               # need to add eol to the end of the line.
   39:         if lines[lineno].endswith(CRLF) or lines[lineno][-1] in CRLF:
   12:             encoded_body += encoded_line + eol
               else:
   27:             encoded_body += encoded_line
   39:         encoded_line = ''
   27:     return encoded_body
       
       
       # For convenience and backwards compatibility w/ standard base64 module
    1: body_encode = encode
    1: encodestring = encode
       
       
       
       # BAW: I'm not sure if the intent was for the signature of this function to be
       # the same as base64MIME.decode() or not...
    1: def decode(encoded, eol=NL):
           """Decode a quoted-printable string.
       
           Lines are separated with eol, which defaults to \\n.
           """
   12:     if not encoded:
    3:         return encoded
           # BAW: see comment in encode() above.  Again, we're building up the
           # decoded string with string concatenation, which could be done much more
           # efficiently.
    9:     decoded = ''
       
   21:     for line in encoded.splitlines():
   12:         line = line.rstrip()
   12:         if not line:
>>>>>>             decoded += eol
>>>>>>             continue
       
   12:         i = 0
   12:         n = len(line)
   72:         while i < n:
   60:             c = line[i]
   60:             if c != '=':
   60:                 decoded += c
   60:                 i += 1
                   # Otherwise, c == "=".  Are we at the end of the line?  If so, add
                   # a soft line break.
>>>>>>             elif i+1 == n:
>>>>>>                 i += 1
>>>>>>                 continue
                   # Decode if in form =AB
>>>>>>             elif i+2 < n and line[i+1] in hexdigits and line[i+2] in hexdigits:
>>>>>>                 decoded += unquote(line[i:i+3])
>>>>>>                 i += 3
                   # Otherwise, not in form =AB, pass literally
                   else:
>>>>>>                 decoded += c
>>>>>>                 i += 1
       
   60:             if i == n:
   12:                 decoded += eol
           # Special case if original string did not end with eol
    9:     if not encoded.endswith(eol) and decoded.endswith(eol):
    9:         decoded = decoded[:-1]
    9:     return decoded
       
       
       # For convenience and backwards compatibility w/ standard base64 module
    1: body_decode = decode
    1: decodestring = decode
       
       
       
    1: def _unquote_match(match):
           """Turn a match in the form =AB to the ASCII character with value 0xab"""
  101:     s = match.group(0)
  101:     return unquote(s)
       
       
       # Header decoding is done a bit differently
    1: def header_decode(s):
           """Decode a string encoded with RFC 2045 MIME header `Q' encoding.
       
           This function does not parse a full MIME header value encoded with
           quoted-printable (like =?iso-8859-1?q?Hello_World?=) -- please use
           the high level email.header class for that functionality.
           """
   62:     s = s.replace('_', ' ')
   62:     return re.sub(r'=[a-fA-F0-9]{2}', _unquote_match, s)
