       """Suite Standard Suite: Common terms for most applications
       Level 1, version 1
       
       Generated from /Volumes/Sap/System Folder/Extensions/AppleScript
       AETE/AEUT resource version 1/0, language 0, script 0
    1: """
       
    1: import aetools
    1: import MacOS
       
    1: _code = 'core'
       
    1: from _builtinSuites.builtin_Suite import *
    2: class Standard_Suite_Events(builtin_Suite_Events):
       
    1:     _argmap_class_info = {
    1:         'in_' : 'wrcd',
           }
       
    1:     def class_info(self, _object=None, _attributes={}, **_arguments):
               """class info: (optional) Get information about an object class
               Required argument: the object class about which information is requested
               Keyword argument in_: the human language and script system in which to return information
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: a record containing the object\xd5s properties and elements
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'qobj'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_class_info)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_close = {
    1:         'saving' : 'savo',
    1:         'saving_in' : 'kfil',
           }
       
    1:     def close(self, _object, _attributes={}, **_arguments):
               """close: Close an object
               Required argument: the object to close
               Keyword argument saving: specifies whether changes should be saved before closing
               Keyword argument saving_in: the file or alias in which to save the object
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'clos'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_close)
>>>>>>         _arguments['----'] = _object
       
>>>>>>         aetools.enumsubst(_arguments, 'savo', _Enum_savo)
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_count = {
    1:         'each' : 'kocl',
           }
       
    1:     def count(self, _object, _attributes={}, **_arguments):
               """count: Return the number of elements of an object
               Required argument: the object whose elements are to be counted
               Keyword argument each: if specified, restricts counting to objects of this class
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: the number of elements
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'cnte'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_count)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_data_size = {
    1:         'as' : 'rtyp',
           }
       
    1:     def data_size(self, _object, _attributes={}, **_arguments):
               """data size: (optional) Return the size in bytes of an object
               Required argument: the object whose data size is to be returned
               Keyword argument as: the data type for which the size is calculated
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: the size of the object in bytes
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'dsiz'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_data_size)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def delete(self, _object, _attributes={}, **_arguments):
               """delete: Delete an object from its container. Note this does not work on script variables, only on elements of application classes.
               Required argument: the element to delete
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'delo'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_duplicate = {
    1:         'to' : 'insh',
    1:         'with_properties' : 'prdt',
           }
       
    1:     def duplicate(self, _object, _attributes={}, **_arguments):
               """duplicate: Duplicate one or more objects
               Required argument: the object(s) to duplicate
               Keyword argument to: the new location for the object(s)
               Keyword argument with_properties: the initial values for properties of the new object that are to be different from the original
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: to the duplicated object(s)
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'clon'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_duplicate)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_event_info = {
    1:         'in_' : 'wrcd',
           }
       
    1:     def event_info(self, _object, _attributes={}, **_arguments):
               """event info: (optional) Get information about the Apple events in a suite
               Required argument: the event class of the Apple events for which to return information
               Keyword argument in_: the human language and script system in which to return information
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: a record containing the events and their parameters
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'gtei'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_event_info)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def exists(self, _object, _attributes={}, **_arguments):
               """exists: Verify if an object exists
               Required argument: the object in question
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: true if it exists, false if not
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'doex'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def handleBreakpoint(self, _object, _attributes={}, **_arguments):
               """handleBreakpoint: return true to stop at a breakpoint
               Required argument: the call frame of the breakpoint
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: true to stop, false if not
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'brak'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_make = {
    1:         'new' : 'kocl',
    1:         'at' : 'insh',
    1:         'with_data' : 'data',
    1:         'with_properties' : 'prdt',
           }
       
    1:     def make(self, _no_object=None, _attributes={}, **_arguments):
               """make: Make a new element
               Keyword argument new: the class of the new element
               Keyword argument at: the location at which to insert the element
               Keyword argument with_data: the initial data for the element
               Keyword argument with_properties: the initial values for the properties of the element
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: to the new object(s)
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'crel'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_make)
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_move = {
    1:         'to' : 'insh',
           }
       
    1:     def move(self, _object, _attributes={}, **_arguments):
               """move: Move object(s) to a new location
               Required argument: the object(s) to move
               Keyword argument to: the new location for the object(s)
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: to the object(s) after they have been moved
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'move'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_move)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def open(self, _object, _attributes={}, **_arguments):
               """open: Open the specified object(s)
               Required argument: list of objects to open
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'aevt'
>>>>>>         _subcode = 'odoc'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def print_(self, _object, _attributes={}, **_arguments):
               """print: Print the specified object(s)
               Required argument: list of objects to print
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'aevt'
>>>>>>         _subcode = 'pdoc'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_quit = {
    1:         'saving' : 'savo',
           }
       
    1:     def quit(self, _no_object=None, _attributes={}, **_arguments):
               """quit: Quit an application
               Keyword argument saving: specifies whether to save currently open documents
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'aevt'
>>>>>>         _subcode = 'quit'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_quit)
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
>>>>>>         aetools.enumsubst(_arguments, 'savo', _Enum_savo)
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def reopen(self, _no_object=None, _attributes={}, **_arguments):
               """reopen: Reactivate a running application.  Some applications will open a new untitled window if no window is open.
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'aevt'
>>>>>>         _subcode = 'rapp'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def run(self, _no_object=None, _attributes={}, **_arguments):
               """run: Run an application.  Most applications will open an empty, untitled window.
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'aevt'
>>>>>>         _subcode = 'oapp'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_save = {
    1:         'in_' : 'kfil',
    1:         'as' : 'fltp',
           }
       
    1:     def save(self, _object, _attributes={}, **_arguments):
               """save: Save an object
               Required argument: the object to save, usually a document or window
               Keyword argument in_: the file or alias in which to save the object
               Keyword argument as: the file type of the document in which to save the data
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'save'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_save)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def select(self, _object, _attributes={}, **_arguments):
               """select: Make a selection
               Required argument: the object to select
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'misc'
>>>>>>         _subcode = 'slct'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_suite_info = {
    1:         'in_' : 'wrcd',
           }
       
    1:     def suite_info(self, _object, _attributes={}, **_arguments):
               """suite info: (optional) Get information about event suite(s)
               Required argument: the suite for which to return information
               Keyword argument in_: the human language and script system in which to return information
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: a record containing the suites and their versions
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'gtsi'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_suite_info)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
       
    2: class alias(aetools.ComponentItem):
    1:     """alias - a file on a disk or server.  The file must exist when you check the syntax of your script. """
    1:     want = 'alis'
    2: class _Prop_POSIX_path(aetools.NProperty):
    1:     """POSIX path - the POSIX path of the file """
    1:     which = 'psxp'
    1:     want = 'TEXT'
       
    1: aliases = alias
       
    2: class application(aetools.ComponentItem):
    1:     """application - An application program """
    1:     want = 'capp'
    2: class _Prop_clipboard(aetools.NProperty):
    1:     """clipboard - the contents of the clipboard for this application """
    1:     which = 'pcli'
    1:     want = '****'
    1: clipboard = _Prop_clipboard()
    2: class _Prop_frontmost(aetools.NProperty):
    1:     """frontmost - Is this the frontmost application? """
    1:     which = 'pisf'
    1:     want = 'bool'
    1: frontmost = _Prop_frontmost()
    2: class _Prop_name(aetools.NProperty):
    1:     """name - the name of the application """
    1:     which = 'pnam'
    1:     want = 'itxt'
    1: name = _Prop_name()
    2: class _Prop_selection(aetools.NProperty):
    1:     """selection - the selection visible to the user.  Use the \xd4select\xd5 command to set a new selection; use \xd4contents of selection\xd5 to get or change information in the document. """
    1:     which = 'sele'
    1:     want = 'csel'
    1: selection = _Prop_selection()
    2: class _Prop_version(aetools.NProperty):
    1:     """version - the version of the application """
    1:     which = 'vers'
    1:     want = 'vers'
    1: version = _Prop_version()
       
    1: applications = application
       
    2: class insertion_points(aetools.ComponentItem):
    1:     """insertion points -  """
    1:     want = 'cins'
       
    1: insertion_point = insertion_points
       
    2: class selection_2d_object(aetools.ComponentItem):
    1:     """selection-object - A way to refer to the state of the current of the selection.  Use the \xd4select\xd5 command to make a new selection. """
    1:     want = 'csel'
    2: class _Prop_contents(aetools.NProperty):
    1:     """contents - the information currently selected.  Use \xd4contents of selection\xd5 to get or change information in a document. """
    1:     which = 'pcnt'
    1:     want = '****'
       
    2: class window(aetools.ComponentItem):
    1:     """window - A window """
    1:     want = 'cwin'
    2: class _Prop_bounds(aetools.NProperty):
    1:     """bounds - the boundary rectangle for the window """
    1:     which = 'pbnd'
    1:     want = 'qdrt'
    2: class _Prop_closeable(aetools.NProperty):
    1:     """closeable - Does the window have a close box? """
    1:     which = 'hclb'
    1:     want = 'bool'
    2: class _Prop_floating(aetools.NProperty):
    1:     """floating - Does the window float? """
    1:     which = 'isfl'
    1:     want = 'bool'
    2: class _Prop_index(aetools.NProperty):
    1:     """index - the number of the window """
    1:     which = 'pidx'
    1:     want = 'long'
    2: class _Prop_modal(aetools.NProperty):
    1:     """modal - Is the window modal? """
    1:     which = 'pmod'
    1:     want = 'bool'
    2: class _Prop_resizable(aetools.NProperty):
    1:     """resizable - Is the window resizable? """
    1:     which = 'prsz'
    1:     want = 'bool'
    2: class _Prop_titled(aetools.NProperty):
    1:     """titled - Does the window have a title bar? """
    1:     which = 'ptit'
    1:     want = 'bool'
    2: class _Prop_visible(aetools.NProperty):
    1:     """visible - Is the window visible? """
    1:     which = 'pvis'
    1:     want = 'bool'
    2: class _Prop_zoomable(aetools.NProperty):
    1:     """zoomable - Is the window zoomable? """
    1:     which = 'iszm'
    1:     want = 'bool'
    2: class _Prop_zoomed(aetools.NProperty):
    1:     """zoomed - Is the window zoomed? """
    1:     which = 'pzum'
    1:     want = 'bool'
       
    1: windows = window
       
    2: class document(aetools.ComponentItem):
    1:     """document - A document of a scriptable application """
    1:     want = 'docu'
    2: class _Prop_modified(aetools.NProperty):
    1:     """modified - Has the document been modified since the last save? """
    1:     which = 'imod'
    1:     want = 'bool'
       
    1: documents = document
       
    2: class file(aetools.ComponentItem):
    1:     """file - a file on a disk or server """
    1:     want = 'file'
       
    1: files = file
    1: alias._superclassnames = []
    1: alias._privpropdict = {
    1:     'POSIX_path' : _Prop_POSIX_path,
       }
    1: alias._privelemdict = {
       }
    1: application._superclassnames = []
    1: application._privpropdict = {
    1:     'clipboard' : _Prop_clipboard,
    1:     'frontmost' : _Prop_frontmost,
    1:     'name' : _Prop_name,
    1:     'selection' : _Prop_selection,
    1:     'version' : _Prop_version,
       }
    1: application._privelemdict = {
       }
    1: insertion_points._superclassnames = []
    1: insertion_points._privpropdict = {
       }
    1: insertion_points._privelemdict = {
       }
    1: selection_2d_object._superclassnames = []
    1: selection_2d_object._privpropdict = {
    1:     'contents' : _Prop_contents,
       }
    1: selection_2d_object._privelemdict = {
       }
    1: window._superclassnames = []
    1: window._privpropdict = {
    1:     'bounds' : _Prop_bounds,
    1:     'closeable' : _Prop_closeable,
    1:     'floating' : _Prop_floating,
    1:     'index' : _Prop_index,
    1:     'modal' : _Prop_modal,
    1:     'resizable' : _Prop_resizable,
    1:     'titled' : _Prop_titled,
    1:     'visible' : _Prop_visible,
    1:     'zoomable' : _Prop_zoomable,
    1:     'zoomed' : _Prop_zoomed,
       }
    1: window._privelemdict = {
       }
    1: document._superclassnames = []
    1: document._privpropdict = {
    1:     'modified' : _Prop_modified,
       }
    1: document._privelemdict = {
       }
    1: file._superclassnames = []
    1: file._privpropdict = {
    1:     'POSIX_path' : _Prop_POSIX_path,
       }
    1: file._privelemdict = {
       }
    2: class _3c_(aetools.NComparison):
    1:     """< - Less than """
    2: class _3d_(aetools.NComparison):
    1:     """= - Equal """
    2: class _3e_(aetools.NComparison):
    1:     """> - Greater than """
    2: class contains(aetools.NComparison):
    1:     """contains - Contains """
    2: class ends_with(aetools.NComparison):
    1:     """ends with - Ends with """
    2: class starts_with(aetools.NComparison):
    1:     """starts with - Starts with """
    2: class _b2_(aetools.NComparison):
    1:     """\xb2 - Less than or equal to """
    2: class _b3_(aetools.NComparison):
    1:     """\xb3 - Greater than or equal to """
    1: _Enum_kfrm = {
    1:     'index' : 'indx',   # keyform designating indexed access
    1:     'named' : 'name',   # keyform designating named access
    1:     'id' : 'ID  ',      # keyform designating access by unique identifier
       }
       
    1: _Enum_savo = {
    1:     'yes' : 'yes ',     # Save objects now
    1:     'no' : 'no  ',      # Do not save objects
    1:     'ask' : 'ask ',     # Ask the user whether to save
       }
       
    1: _Enum_styl = {
    1:     'plain' : 'plan',   # Plain
    1:     'bold' : 'bold',    # Bold
    1:     'italic' : 'ital',  # Italic
    1:     'outline' : 'outl', # Outline
    1:     'shadow' : 'shad',  # Shadow
    1:     'underline' : 'undl',       # Underline
    1:     'superscript' : 'spsc',     # Superscript
    1:     'subscript' : 'sbsc',       # Subscript
    1:     'strikethrough' : 'strk',   # Strikethrough
    1:     'small_caps' : 'smcp',      # Small caps
    1:     'all_caps' : 'alcp',        # All capital letters
    1:     'all_lowercase' : 'lowc',   # Lowercase
    1:     'condensed' : 'cond',       # Condensed
    1:     'expanded' : 'pexp',        # Expanded
    1:     'hidden' : 'hidn',  # Hidden
       }
       
       
       #
       # Indices of types declared in this module
       #
    1: _classdeclarations = {
    1:     'alis' : alias,
    1:     'capp' : application,
    1:     'cins' : insertion_points,
    1:     'csel' : selection_2d_object,
    1:     'cwin' : window,
    1:     'docu' : document,
    1:     'file' : file,
       }
       
    1: _propdeclarations = {
    1:     'hclb' : _Prop_closeable,
    1:     'imod' : _Prop_modified,
    1:     'isfl' : _Prop_floating,
    1:     'iszm' : _Prop_zoomable,
    1:     'pbnd' : _Prop_bounds,
    1:     'pcli' : _Prop_clipboard,
    1:     'pcnt' : _Prop_contents,
    1:     'pidx' : _Prop_index,
    1:     'pisf' : _Prop_frontmost,
    1:     'pmod' : _Prop_modal,
    1:     'pnam' : _Prop_name,
    1:     'prsz' : _Prop_resizable,
    1:     'psxp' : _Prop_POSIX_path,
    1:     'ptit' : _Prop_titled,
    1:     'pvis' : _Prop_visible,
    1:     'pzum' : _Prop_zoomed,
    1:     'sele' : _Prop_selection,
    1:     'vers' : _Prop_version,
       }
       
    1: _compdeclarations = {
    1:     '<   ' : _3c_,
    1:     '<=  ' : _b2_,
    1:     '=   ' : _3d_,
    1:     '>   ' : _3e_,
    1:     '>=  ' : _b3_,
    1:     'bgwt' : starts_with,
    1:     'cont' : contains,
    1:     'ends' : ends_with,
       }
       
    1: _enumdeclarations = {
    1:     'kfrm' : _Enum_kfrm,
    1:     'savo' : _Enum_savo,
    1:     'styl' : _Enum_styl,
       }
