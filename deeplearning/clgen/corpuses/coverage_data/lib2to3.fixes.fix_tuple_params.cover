       """Fixer for function definitions with tuple parameters.
       
       def func(((a, b), c), d):
           ...
       
           ->
       
       def func(x, d):
           ((a, b), c) = x
           ...
       
       It will also support lambdas:
       
           lambda (x, y): x + y -> lambda t: t[0] + t[1]
       
           # The parens are a syntax error in Python 3
           lambda (x): x + y -> lambda x: x + y
    1: """
       # Author: Collin Winter
       
       # Local imports
    1: from .. import pytree
    1: from ..pgen2 import token
    1: from .. import fixer_base
    1: from ..fixer_util import Assign, Name, Newline, Number, Subscript, syms
       
    1: def is_docstring(stmt):
    8:     return isinstance(stmt, pytree.Node) and \
    8:            stmt.children[0].type == token.STRING
       
    2: class FixTupleParams(fixer_base.BaseFix):
    1:     run_order = 4 #use a lower order since lambda is part of other
                         #patterns
    1:     BM_compatible = True
       
           PATTERN = """
                     funcdef< 'def' any parameters< '(' args=any ')' >
                              ['->' any] ':' suite=any+ >
                     |
                     lambda=
                     lambdef< 'lambda' args=vfpdef< '(' inner=any ')' >
                              ':' body=any
                     >
    1:               """
       
    1:     def transform(self, node, results):
  111:         if "lambda" in results:
   15:             return self.transform_lambda(node, results)
       
   96:         new_lines = []
   96:         suite = results["suite"]
   96:         args = results["args"]
               # This crap is so "def foo(...): x = 5; y = 7" is handled correctly.
               # TODO(cwinter): suite-cleanup
   96:         if suite[0].children[1].type == token.INDENT:
   64:             start = 2
   64:             indent = suite[0].children[1].value
   64:             end = Newline()
               else:
   32:             start = 0
   32:             indent = u"; "
   32:             end = pytree.Leaf(token.INDENT, u"")
       
               # We need access to self for new_name(), and making this a method
               #  doesn't feel right. Closing over self and new_lines makes the
               #  code below cleaner.
   96:         def handle_tuple(tuple_arg, add_prefix=False):
   17:             n = Name(self.new_name())
   17:             arg = tuple_arg.clone()
   17:             arg.prefix = u""
   17:             stmt = Assign(arg, n.clone())
   17:             if add_prefix:
    6:                 n.prefix = u" "
   17:             tuple_arg.replace(n)
   17:             new_lines.append(pytree.Node(syms.simple_stmt,
   17:                                          [stmt, end.clone()]))
       
   96:         if args.type == syms.tfpdef:
    4:             handle_tuple(args)
   92:         elif args.type == syms.typedargslist:
  271:             for i, arg in enumerate(args.children):
  230:                 if arg.type == syms.tfpdef:
                           # Without add_prefix, the emitted code is correct,
                           #  just ugly.
   13:                     handle_tuple(arg, add_prefix=(i > 0))
       
   96:         if not new_lines:
   82:             return
       
               # This isn't strictly necessary, but it plays nicely with other fixers.
               # TODO(cwinter) get rid of this when children becomes a smart list
   31:         for line in new_lines:
   17:             line.parent = suite[0]
       
               # TODO(cwinter) suite-cleanup
   14:         after = start
   14:         if start == 0:
    6:             new_lines[0].prefix = u" "
    8:         elif is_docstring(suite[0].children[start]):
    1:             new_lines[0].prefix = indent
    1:             after = start + 1
       
   31:         for line in new_lines:
   17:             line.parent = suite[0]
   14:         suite[0].children[after:after] = new_lines
   31:         for i in range(after+1, after+len(new_lines)+1):
   17:             suite[0].children[i].prefix = indent
   14:         suite[0].changed()
       
    1:     def transform_lambda(self, node, results):
   15:         args = results["args"]
   15:         body = results["body"]
   15:         inner = simplify_args(results["inner"])
       
               # Replace lambda ((((x)))): x  with lambda x: x
   15:         if inner.type == token.NAME:
    4:             inner = inner.clone()
    4:             inner.prefix = u" "
    4:             args.replace(inner)
    4:             return
       
   11:         params = find_params(args)
   11:         to_index = map_to_index(params)
   11:         tup_name = self.new_name(tuple_name(params))
       
   11:         new_param = Name(tup_name, prefix=u" ")
   11:         args.replace(new_param.clone())
  105:         for n in body.post_order():
   94:             if n.type == token.NAME and n.value in to_index:
   60:                 subscripts = [c.clone() for c in to_index[n.value]]
   27:                 new = pytree.Node(syms.power,
   27:                                   [new_param.clone()] + subscripts)
   27:                 new.prefix = n.prefix
   27:                 n.replace(new)
       
       
       ### Helper functions for transform_lambda()
       
    1: def simplify_args(node):
   15:     if node.type in (syms.vfplist, token.NAME):
    9:         return node
    6:     elif node.type == syms.vfpdef:
               # These look like vfpdef< '(' x ')' > where x is NAME
               # or another vfpdef instance (leading to recursion).
   20:         while node.type == syms.vfpdef:
   14:             node = node.children[1]
    6:         return node
>>>>>>     raise RuntimeError("Received unexpected node %s" % node)
       
    1: def find_params(node):
   59:     if node.type == syms.vfpdef:
   22:         return find_params(node.children[1])
   37:     elif node.type == token.NAME:
   23:         return node.value
   54:     return [find_params(c) for c in node.children if c.type != token.COMMA]
       
    1: def map_to_index(param_list, prefix=[], d=None):
   14:     if d is None:
   11:         d = {}
   40:     for i, obj in enumerate(param_list):
   26:         trailer = [Subscript(Number(unicode(i)))]
   26:         if isinstance(obj, list):
    3:             map_to_index(obj, trailer, d=d)
               else:
   23:             d[obj] = prefix + trailer
   14:     return d
       
    1: def tuple_name(param_list):
   14:     l = []
   40:     for obj in param_list:
   26:         if isinstance(obj, list):
    3:             l.append(tuple_name(obj))
               else:
   23:             l.append(obj)
   14:     return u"_".join(l)
