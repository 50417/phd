    1: import array
    1: import unittest
    1: from test.test_support import run_unittest, import_module, get_attribute
    1: import os, struct
    1: fcntl = import_module('fcntl')
    1: termios = import_module('termios')
    1: get_attribute(termios, 'TIOCGPGRP') #Can't run tests without this feature
       
    1: try:
    1:     tty = open("/dev/tty", "r")
>>>>>> except IOError:
>>>>>>     raise unittest.SkipTest("Unable to open /dev/tty")
       else:
           # Skip if another process is in foreground
    1:     r = fcntl.ioctl(tty, termios.TIOCGPGRP, "    ")
    1:     tty.close()
    1:     rpgrp = struct.unpack("i", r)[0]
    1:     if rpgrp not in (os.getpgrp(), os.getsid(0)):
>>>>>>         raise unittest.SkipTest("Neither the process group nor the session "
                                       "are attached to /dev/tty")
    1:     del tty, r, rpgrp
       
    1: try:
    1:     import pty
>>>>>> except ImportError:
>>>>>>     pty = None
       
    2: class IoctlTests(unittest.TestCase):
    1:     def test_ioctl(self):
               # If this process has been put into the background, TIOCGPGRP returns
               # the session ID instead of the process group id.
    1:         ids = (os.getpgrp(), os.getsid(0))
    1:         tty = open("/dev/tty", "r")
    1:         r = fcntl.ioctl(tty, termios.TIOCGPGRP, "    ")
    1:         rpgrp = struct.unpack("i", r)[0]
    1:         self.assertIn(rpgrp, ids)
       
    1:     def _check_ioctl_mutate_len(self, nbytes=None):
    3:         buf = array.array('i')
    3:         intsize = buf.itemsize
    3:         ids = (os.getpgrp(), os.getsid(0))
               # A fill value unlikely to be in `ids`
    3:         fill = -12345
    3:         if nbytes is not None:
                   # Extend the buffer so that it is exactly `nbytes` bytes long
    2:             buf.extend([fill] * (nbytes // intsize))
    2:             self.assertEqual(len(buf) * intsize, nbytes)   # sanity check
               else:
    1:             buf.append(fill)
    3:         with open("/dev/tty", "r") as tty:
    3:             r = fcntl.ioctl(tty, termios.TIOCGPGRP, buf, 1)
    3:         rpgrp = buf[0]
    3:         self.assertEqual(r, 0)
    3:         self.assertIn(rpgrp, ids)
       
    1:     def test_ioctl_mutate(self):
    1:         self._check_ioctl_mutate_len()
       
    1:     def test_ioctl_mutate_1024(self):
               # Issue #9758: a mutable buffer of exactly 1024 bytes wouldn't be
               # copied back after the system call.
    1:         self._check_ioctl_mutate_len(1024)
       
    1:     def test_ioctl_mutate_2048(self):
               # Test with a larger buffer, just for the record.
    1:         self._check_ioctl_mutate_len(2048)
       
    1:     def test_ioctl_signed_unsigned_code_param(self):
    1:         if not pty:
>>>>>>             raise unittest.SkipTest('pty module required')
    1:         mfd, sfd = pty.openpty()
    1:         try:
    1:             if termios.TIOCSWINSZ < 0:
>>>>>>                 set_winsz_opcode_maybe_neg = termios.TIOCSWINSZ
>>>>>>                 set_winsz_opcode_pos = termios.TIOCSWINSZ & 0xffffffffL
                   else:
    1:                 set_winsz_opcode_pos = termios.TIOCSWINSZ
    1:                 set_winsz_opcode_maybe_neg, = struct.unpack("i",
    1:                         struct.pack("I", termios.TIOCSWINSZ))
       
    1:             our_winsz = struct.pack("HHHH",80,25,0,0)
                   # test both with a positive and potentially negative ioctl code
    1:             new_winsz = fcntl.ioctl(mfd, set_winsz_opcode_pos, our_winsz)
    1:             new_winsz = fcntl.ioctl(mfd, set_winsz_opcode_maybe_neg, our_winsz)
               finally:
    1:             os.close(mfd)
    1:             os.close(sfd)
       
    1: def test_main():
    1:     run_unittest(IoctlTests)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
