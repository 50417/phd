    1: import unittest
    1: from ctypes import *
       
    2: class MyInt(c_int):
    1:     def __cmp__(self, other):
    4:         if type(other) != MyInt:
>>>>>>             return -1
    4:         return cmp(self.value, other.value)
    1:     def __hash__(self): # Silence Py3k warning
>>>>>>         return hash(self.value)
       
    2: class Test(unittest.TestCase):
       
    1:     def test_compare(self):
    1:         self.assertEqual(MyInt(3), MyInt(3))
    1:         self.assertNotEqual(MyInt(42), MyInt(43))
       
    1:     def test_ignore_retval(self):
               # Test if the return value of a callback is ignored
               # if restype is None
    1:         proto = CFUNCTYPE(None)
    1:         def func():
    1:             return (1, "abc", None)
       
    1:         cb = proto(func)
    1:         self.assertEqual(None, cb())
       
       
    1:     def test_int_callback(self):
    1:         args = []
    1:         def func(arg):
    2:             args.append(arg)
    2:             return arg
       
    1:         cb = CFUNCTYPE(None, MyInt)(func)
       
    1:         self.assertEqual(None, cb(42))
    1:         self.assertEqual(type(args[-1]), MyInt)
       
    1:         cb = CFUNCTYPE(c_int, c_int)(func)
       
    1:         self.assertEqual(42, cb(42))
    1:         self.assertEqual(type(args[-1]), int)
       
    1:     def test_int_struct(self):
    2:         class X(Structure):
    1:             _fields_ = [("x", MyInt)]
       
    1:         self.assertEqual(X().x, MyInt())
       
    1:         s = X()
    1:         s.x = MyInt(42)
       
    1:         self.assertEqual(s.x, MyInt(42))
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
