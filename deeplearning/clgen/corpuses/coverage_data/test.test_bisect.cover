    1: from __future__ import absolute_import
    1: import sys
    1: import unittest
    1: from test import test_support
    1: from UserList import UserList
       
       # We do a bit of trickery here to be able to test both the C implementation
       # and the Python implementation of the module.
       
       # Make it impossible to import the C implementation anymore.
    1: sys.modules['_bisect'] = 0
       # We must also handle the case that bisect was imported before.
    1: if 'bisect' in sys.modules:
    1:     del sys.modules['bisect']
       
       # Now we can import the module and get the pure Python implementation.
    1: import bisect as py_bisect
       
       # Restore everything to normal.
    1: del sys.modules['_bisect']
    1: del sys.modules['bisect']
       
       # This is now the module with the C implementation.
    1: import bisect as c_bisect
       
       
    2: class Range(object):
    1:     """A trivial xrange()-like object without any integer width limitations."""
    1:     def __init__(self, start, stop):
    2:         self.start = start
    2:         self.stop = stop
    2:         self.last_insert = None
       
    1:     def __len__(self):
    4:         return self.stop - self.start
       
    1:     def __getitem__(self, idx):
  292:         n = self.stop - self.start
  292:         if idx < 0:
>>>>>>             idx += n
  292:         if idx >= n:
>>>>>>             raise IndexError(idx)
  292:         return self.start + idx
       
    1:     def insert(self, idx, item):
    4:         self.last_insert = idx, item
       
       
    2: class TestBisect(unittest.TestCase):
    1:     module = None
       
    1:     def setUp(self):
               self.precomputedCases = [
   16:             (self.module.bisect_right, [], 1, 0),
   16:             (self.module.bisect_right, [1], 0, 0),
   16:             (self.module.bisect_right, [1], 1, 1),
   16:             (self.module.bisect_right, [1], 2, 1),
   16:             (self.module.bisect_right, [1, 1], 0, 0),
   16:             (self.module.bisect_right, [1, 1], 1, 2),
   16:             (self.module.bisect_right, [1, 1], 2, 2),
   16:             (self.module.bisect_right, [1, 1, 1], 0, 0),
   16:             (self.module.bisect_right, [1, 1, 1], 1, 3),
   16:             (self.module.bisect_right, [1, 1, 1], 2, 3),
   16:             (self.module.bisect_right, [1, 1, 1, 1], 0, 0),
   16:             (self.module.bisect_right, [1, 1, 1, 1], 1, 4),
   16:             (self.module.bisect_right, [1, 1, 1, 1], 2, 4),
   16:             (self.module.bisect_right, [1, 2], 0, 0),
   16:             (self.module.bisect_right, [1, 2], 1, 1),
   16:             (self.module.bisect_right, [1, 2], 1.5, 1),
   16:             (self.module.bisect_right, [1, 2], 2, 2),
   16:             (self.module.bisect_right, [1, 2], 3, 2),
   16:             (self.module.bisect_right, [1, 1, 2, 2], 0, 0),
   16:             (self.module.bisect_right, [1, 1, 2, 2], 1, 2),
   16:             (self.module.bisect_right, [1, 1, 2, 2], 1.5, 2),
   16:             (self.module.bisect_right, [1, 1, 2, 2], 2, 4),
   16:             (self.module.bisect_right, [1, 1, 2, 2], 3, 4),
   16:             (self.module.bisect_right, [1, 2, 3], 0, 0),
   16:             (self.module.bisect_right, [1, 2, 3], 1, 1),
   16:             (self.module.bisect_right, [1, 2, 3], 1.5, 1),
   16:             (self.module.bisect_right, [1, 2, 3], 2, 2),
   16:             (self.module.bisect_right, [1, 2, 3], 2.5, 2),
   16:             (self.module.bisect_right, [1, 2, 3], 3, 3),
   16:             (self.module.bisect_right, [1, 2, 3], 4, 3),
   16:             (self.module.bisect_right, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 0, 0),
   16:             (self.module.bisect_right, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 1, 1),
   16:             (self.module.bisect_right, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 1.5, 1),
   16:             (self.module.bisect_right, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 2, 3),
   16:             (self.module.bisect_right, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 2.5, 3),
   16:             (self.module.bisect_right, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3, 6),
   16:             (self.module.bisect_right, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3.5, 6),
   16:             (self.module.bisect_right, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 4, 10),
   16:             (self.module.bisect_right, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 5, 10),
       
   16:             (self.module.bisect_left, [], 1, 0),
   16:             (self.module.bisect_left, [1], 0, 0),
   16:             (self.module.bisect_left, [1], 1, 0),
   16:             (self.module.bisect_left, [1], 2, 1),
   16:             (self.module.bisect_left, [1, 1], 0, 0),
   16:             (self.module.bisect_left, [1, 1], 1, 0),
   16:             (self.module.bisect_left, [1, 1], 2, 2),
   16:             (self.module.bisect_left, [1, 1, 1], 0, 0),
   16:             (self.module.bisect_left, [1, 1, 1], 1, 0),
   16:             (self.module.bisect_left, [1, 1, 1], 2, 3),
   16:             (self.module.bisect_left, [1, 1, 1, 1], 0, 0),
   16:             (self.module.bisect_left, [1, 1, 1, 1], 1, 0),
   16:             (self.module.bisect_left, [1, 1, 1, 1], 2, 4),
   16:             (self.module.bisect_left, [1, 2], 0, 0),
   16:             (self.module.bisect_left, [1, 2], 1, 0),
   16:             (self.module.bisect_left, [1, 2], 1.5, 1),
   16:             (self.module.bisect_left, [1, 2], 2, 1),
   16:             (self.module.bisect_left, [1, 2], 3, 2),
   16:             (self.module.bisect_left, [1, 1, 2, 2], 0, 0),
   16:             (self.module.bisect_left, [1, 1, 2, 2], 1, 0),
   16:             (self.module.bisect_left, [1, 1, 2, 2], 1.5, 2),
   16:             (self.module.bisect_left, [1, 1, 2, 2], 2, 2),
   16:             (self.module.bisect_left, [1, 1, 2, 2], 3, 4),
   16:             (self.module.bisect_left, [1, 2, 3], 0, 0),
   16:             (self.module.bisect_left, [1, 2, 3], 1, 0),
   16:             (self.module.bisect_left, [1, 2, 3], 1.5, 1),
   16:             (self.module.bisect_left, [1, 2, 3], 2, 1),
   16:             (self.module.bisect_left, [1, 2, 3], 2.5, 2),
   16:             (self.module.bisect_left, [1, 2, 3], 3, 2),
   16:             (self.module.bisect_left, [1, 2, 3], 4, 3),
   16:             (self.module.bisect_left, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 0, 0),
   16:             (self.module.bisect_left, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 1, 0),
   16:             (self.module.bisect_left, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 1.5, 1),
   16:             (self.module.bisect_left, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 2, 1),
   16:             (self.module.bisect_left, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 2.5, 3),
   16:             (self.module.bisect_left, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3, 3),
   16:             (self.module.bisect_left, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3.5, 6),
   16:             (self.module.bisect_left, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 4, 6),
   16:             (self.module.bisect_left, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 5, 10)
               ]
       
    1:     def test_precomputed(self):
  158:         for func, data, elem, expected in self.precomputedCases:
  156:             self.assertEqual(func(data, elem), expected)
  156:             self.assertEqual(func(UserList(data), elem), expected)
       
    1:     def test_negative_lo(self):
               # Issue 3301
    2:         mod = self.module
    2:         self.assertRaises(ValueError, mod.bisect_left, [1, 2, 3], 5, -1, 3),
    2:         self.assertRaises(ValueError, mod.bisect_right, [1, 2, 3], 5, -1, 3),
    2:         self.assertRaises(ValueError, mod.insort_left, [1, 2, 3], 5, -1, 3),
    2:         self.assertRaises(ValueError, mod.insort_right, [1, 2, 3], 5, -1, 3),
       
    1:     def test_large_range(self):
               # Issue 13496
    2:         mod = self.module
    2:         n = sys.maxsize
    2:         try:
    2:             data = xrange(n-1)
>>>>>>         except OverflowError:
>>>>>>             self.skipTest("can't create a xrange() object of size `sys.maxsize`")
    2:         self.assertEqual(mod.bisect_left(data, n-3), n-3)
    2:         self.assertEqual(mod.bisect_right(data, n-3), n-2)
    2:         self.assertEqual(mod.bisect_left(data, n-3, n-10, n), n-3)
    2:         self.assertEqual(mod.bisect_right(data, n-3, n-10, n), n-2)
       
    1:     def test_large_pyrange(self):
               # Same as above, but without C-imposed limits on range() parameters
    2:         mod = self.module
    2:         n = sys.maxsize
    2:         data = Range(0, n-1)
    2:         self.assertEqual(mod.bisect_left(data, n-3), n-3)
    2:         self.assertEqual(mod.bisect_right(data, n-3), n-2)
    2:         self.assertEqual(mod.bisect_left(data, n-3, n-10, n), n-3)
    2:         self.assertEqual(mod.bisect_right(data, n-3, n-10, n), n-2)
    2:         x = n - 100
    2:         mod.insort_left(data, x, x - 50, x + 50)
    2:         self.assertEqual(data.last_insert, (x, x))
    2:         x = n - 200
    2:         mod.insort_right(data, x, x - 50, x + 50)
    2:         self.assertEqual(data.last_insert, (x + 1, x))
       
    1:     def test_random(self, n=25):
    2:         from random import randrange
   52:         for i in xrange(n):
  650:             data = [randrange(0, n, 2) for j in xrange(i)]
   50:             data.sort()
   50:             elem = randrange(-1, n+1)
   50:             ip = self.module.bisect_left(data, elem)
   50:             if ip < len(data):
   43:                 self.assertTrue(elem <= data[ip])
   50:             if ip > 0:
   40:                 self.assertTrue(data[ip-1] < elem)
   50:             ip = self.module.bisect_right(data, elem)
   50:             if ip < len(data):
   41:                 self.assertTrue(elem < data[ip])
   50:             if ip > 0:
   42:                 self.assertTrue(data[ip-1] <= elem)
       
    1:     def test_optionalSlicing(self):
  158:         for func, data, elem, expected in self.precomputedCases:
  780:             for lo in xrange(4):
  624:                 lo = min(len(data), lo)
 3744:                 for hi in xrange(3,8):
 3120:                     hi = min(len(data), hi)
 3120:                     ip = func(data, elem, lo, hi)
 3120:                     self.assertTrue(lo <= ip <= hi)
 3120:                     if func is self.module.bisect_left and ip < hi:
  840:                         self.assertTrue(elem <= data[ip])
 3120:                     if func is self.module.bisect_left and ip > lo:
  500:                         self.assertTrue(data[ip-1] < elem)
 3120:                     if func is self.module.bisect_right and ip < hi:
  616:                         self.assertTrue(elem < data[ip])
 3120:                     if func is self.module.bisect_right and ip > lo:
  724:                         self.assertTrue(data[ip-1] <= elem)
 3120:                     self.assertEqual(ip, max(lo, min(hi, expected)))
       
    1:     def test_backcompatibility(self):
    2:         self.assertEqual(self.module.bisect, self.module.bisect_right)
       
    1:     def test_keyword_args(self):
    2:         data = [10, 20, 30, 40, 50]
    2:         self.assertEqual(self.module.bisect_left(a=data, x=25, lo=1, hi=3), 2)
    2:         self.assertEqual(self.module.bisect_right(a=data, x=25, lo=1, hi=3), 2)
    2:         self.assertEqual(self.module.bisect(a=data, x=25, lo=1, hi=3), 2)
    2:         self.module.insort_left(a=data, x=25, lo=1, hi=3)
    2:         self.module.insort_right(a=data, x=25, lo=1, hi=3)
    2:         self.module.insort(a=data, x=25, lo=1, hi=3)
    2:         self.assertEqual(data, [10, 20, 25, 25, 25, 30, 40, 50])
       
    2: class TestBisectPython(TestBisect):
    1:     module = py_bisect
       
    2: class TestBisectC(TestBisect):
    1:     module = c_bisect
       
       #==============================================================================
       
    2: class TestInsort(unittest.TestCase):
    1:     module = None
       
    1:     def test_vsBuiltinSort(self, n=500):
    2:         from random import choice
    6:         for insorted in (list(), UserList()):
 2004:             for i in xrange(n):
 2000:                 digit = choice("0123456789")
 2000:                 if digit in "02468":
  966:                     f = self.module.insort_left
                       else:
 1034:                     f = self.module.insort_right
 2000:                 f(insorted, digit)
    4:             self.assertEqual(sorted(insorted), insorted)
       
    1:     def test_backcompatibility(self):
    2:         self.assertEqual(self.module.insort, self.module.insort_right)
       
    1:     def test_listDerived(self):
    4:         class List(list):
    2:             data = []
    2:             def insert(self, index, item):
    4:                 self.data.insert(index, item)
       
    2:         lst = List()
    2:         self.module.insort_left(lst, 10)
    2:         self.module.insort_right(lst, 5)
    2:         self.assertEqual([5, 10], lst.data)
       
    2: class TestInsortPython(TestInsort):
    1:     module = py_bisect
       
    2: class TestInsortC(TestInsort):
    1:     module = c_bisect
       
       #==============================================================================
       
       
    2: class LenOnly:
    1:     "Dummy sequence class defining __len__ but not __getitem__."
    1:     def __len__(self):
    8:         return 10
       
    2: class GetOnly:
    1:     "Dummy sequence class defining __getitem__ but not __len__."
    1:     def __getitem__(self, ndx):
>>>>>>         return 10
       
    2: class CmpErr:
    1:     "Dummy element that always raises an error during comparison"
    1:     def __cmp__(self, other):
    8:         raise ZeroDivisionError
       
    2: class TestErrorHandling(unittest.TestCase):
    1:     module = None
       
    1:     def test_non_sequence(self):
    2:         for f in (self.module.bisect_left, self.module.bisect_right,
   10:                   self.module.insort_left, self.module.insort_right):
    8:             self.assertRaises(TypeError, f, 10, 10)
       
    1:     def test_len_only(self):
    2:         for f in (self.module.bisect_left, self.module.bisect_right,
   10:                   self.module.insort_left, self.module.insort_right):
    8:             self.assertRaises(AttributeError, f, LenOnly(), 10)
       
    1:     def test_get_only(self):
    2:         for f in (self.module.bisect_left, self.module.bisect_right,
   10:                   self.module.insort_left, self.module.insort_right):
    8:             self.assertRaises(AttributeError, f, GetOnly(), 10)
       
    1:     def test_cmp_err(self):
    2:         seq = [CmpErr(), CmpErr(), CmpErr()]
    2:         for f in (self.module.bisect_left, self.module.bisect_right,
   10:                   self.module.insort_left, self.module.insort_right):
    8:             self.assertRaises(ZeroDivisionError, f, seq, 10)
       
    1:     def test_arg_parsing(self):
    2:         for f in (self.module.bisect_left, self.module.bisect_right,
   10:                   self.module.insort_left, self.module.insort_right):
    8:             self.assertRaises(TypeError, f, 10)
       
    2: class TestErrorHandlingPython(TestErrorHandling):
    1:     module = py_bisect
       
    2: class TestErrorHandlingC(TestErrorHandling):
    1:     module = c_bisect
       
       #==============================================================================
       
       libreftest = """
       Example from the Library Reference:  Doc/library/bisect.rst
       
       The bisect() function is generally useful for categorizing numeric data.
       This example uses bisect() to look up a letter grade for an exam total
       (say) based on a set of ordered numeric breakpoints: 85 and up is an `A',
       75..84 is a `B', etc.
       
           >>> grades = "FEDCBA"
           >>> breakpoints = [30, 44, 66, 75, 85]
           >>> from bisect import bisect
           >>> def grade(total):
           ...           return grades[bisect(breakpoints, total)]
           ...
           >>> grade(66)
           'C'
           >>> map(grade, [33, 99, 77, 44, 12, 88])
           ['E', 'A', 'B', 'D', 'F', 'A']
       
    1: """
       
       #------------------------------------------------------------------------------
       
    1: __test__ = {'libreftest' : libreftest}
       
    1: def test_main(verbose=None):
    1:     from test import test_bisect
       
    1:     test_classes = [TestBisectPython, TestBisectC,
    1:                     TestInsortPython, TestInsortC,
    1:                     TestErrorHandlingPython, TestErrorHandlingC]
       
    1:     test_support.run_unittest(*test_classes)
    1:     test_support.run_doctest(test_bisect, verbose)
       
           # verify reference counting
    1:     if verbose and hasattr(sys, "gettotalrefcount"):
>>>>>>         import gc
>>>>>>         counts = [None] * 5
>>>>>>         for i in xrange(len(counts)):
>>>>>>             test_support.run_unittest(*test_classes)
>>>>>>             gc.collect()
>>>>>>             counts[i] = sys.gettotalrefcount()
>>>>>>         print counts
       
    1: if __name__ == "__main__":
>>>>>>     test_main(verbose=True)
