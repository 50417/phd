    1: from test import test_support
    1: import unittest
    1: import urlparse
       
    1: RFC1808_BASE = "http://a/b/c/d;p?q#f"
    1: RFC2396_BASE = "http://a/b/c/d;p?q"
    1: RFC3986_BASE = 'http://a/b/c/d;p?q'
    1: SIMPLE_BASE  = 'http://a/b/c/d'
       
       # A list of test cases.  Each test case is a two-tuple that contains
       # a string with the query and a dictionary with the expected result.
       
       parse_qsl_test_cases = [
    1:     ("", []),
    1:     ("&", []),
    1:     ("&&", []),
    1:     ("=", [('', '')]),
    1:     ("=a", [('', 'a')]),
    1:     ("a", [('a', '')]),
    1:     ("a=", [('a', '')]),
    1:     ("a=", [('a', '')]),
    1:     ("&a=b", [('a', 'b')]),
    1:     ("a=a+b&b=b+c", [('a', 'a b'), ('b', 'b c')]),
    1:     ("a=1&a=2", [('a', '1'), ('a', '2')]),
    1:     (";", []),
    1:     (";;", []),
    1:     (";a=b", [('a', 'b')]),
    1:     ("a=a+b;b=b+c", [('a', 'a b'), ('b', 'b c')]),
    1:     ("a=1;a=2", [('a', '1'), ('a', '2')]),
    1:     (b";", []),
    1:     (b";;", []),
    1:     (b";a=b", [(b'a', b'b')]),
    1:     (b"a=a+b;b=b+c", [(b'a', b'a b'), (b'b', b'b c')]),
    1:     (b"a=1;a=2", [(b'a', b'1'), (b'a', b'2')]),
       ]
       
       parse_qs_test_cases = [
    1:     ("", {}),
    1:     ("&", {}),
    1:     ("&&", {}),
    1:     ("=", {'': ['']}),
    1:     ("=a", {'': ['a']}),
    1:     ("a", {'a': ['']}),
    1:     ("a=", {'a': ['']}),
    1:     ("&a=b", {'a': ['b']}),
    1:     ("a=a+b&b=b+c", {'a': ['a b'], 'b': ['b c']}),
    1:     ("a=1&a=2", {'a': ['1', '2']}),
    1:     (b"", {}),
    1:     (b"&", {}),
    1:     (b"&&", {}),
    1:     (b"=", {b'': [b'']}),
    1:     (b"=a", {b'': [b'a']}),
    1:     (b"a", {b'a': [b'']}),
    1:     (b"a=", {b'a': [b'']}),
    1:     (b"&a=b", {b'a': [b'b']}),
    1:     (b"a=a+b&b=b+c", {b'a': [b'a b'], b'b': [b'b c']}),
    1:     (b"a=1&a=2", {b'a': [b'1', b'2']}),
    1:     (";", {}),
    1:     (";;", {}),
    1:     (";a=b", {'a': ['b']}),
    1:     ("a=a+b;b=b+c", {'a': ['a b'], 'b': ['b c']}),
    1:     ("a=1;a=2", {'a': ['1', '2']}),
    1:     (b";", {}),
    1:     (b";;", {}),
    1:     (b";a=b", {b'a': [b'b']}),
    1:     (b"a=a+b;b=b+c", {b'a': [b'a b'], b'b': [b'b c']}),
    1:     (b"a=1;a=2", {b'a': [b'1', b'2']}),
       ]
       
    2: class UrlParseTestCase(unittest.TestCase):
       
    1:     def checkRoundtrips(self, url, parsed, split):
   16:         result = urlparse.urlparse(url)
   16:         self.assertEqual(result, parsed)
   16:         t = (result.scheme, result.netloc, result.path,
   16:              result.params, result.query, result.fragment)
   16:         self.assertEqual(t, parsed)
               # put it back together and it should be the same
   16:         result2 = urlparse.urlunparse(result)
   16:         self.assertEqual(result2, url)
   16:         self.assertEqual(result2, result.geturl())
       
               # the result of geturl() is a fixpoint; we can always parse it
               # again to get the same result:
   16:         result3 = urlparse.urlparse(result.geturl())
   16:         self.assertEqual(result3.geturl(), result.geturl())
   16:         self.assertEqual(result3,          result)
   16:         self.assertEqual(result3.scheme,   result.scheme)
   16:         self.assertEqual(result3.netloc,   result.netloc)
   16:         self.assertEqual(result3.path,     result.path)
   16:         self.assertEqual(result3.params,   result.params)
   16:         self.assertEqual(result3.query,    result.query)
   16:         self.assertEqual(result3.fragment, result.fragment)
   16:         self.assertEqual(result3.username, result.username)
   16:         self.assertEqual(result3.password, result.password)
   16:         self.assertEqual(result3.hostname, result.hostname)
   16:         self.assertEqual(result3.port,     result.port)
       
               # check the roundtrip using urlsplit() as well
   16:         result = urlparse.urlsplit(url)
   16:         self.assertEqual(result, split)
   16:         t = (result.scheme, result.netloc, result.path,
   16:              result.query, result.fragment)
   16:         self.assertEqual(t, split)
   16:         result2 = urlparse.urlunsplit(result)
   16:         self.assertEqual(result2, url)
   16:         self.assertEqual(result2, result.geturl())
       
               # check the fixpoint property of re-parsing the result of geturl()
   16:         result3 = urlparse.urlsplit(result.geturl())
   16:         self.assertEqual(result3.geturl(), result.geturl())
   16:         self.assertEqual(result3,          result)
   16:         self.assertEqual(result3.scheme,   result.scheme)
   16:         self.assertEqual(result3.netloc,   result.netloc)
   16:         self.assertEqual(result3.path,     result.path)
   16:         self.assertEqual(result3.query,    result.query)
   16:         self.assertEqual(result3.fragment, result.fragment)
   16:         self.assertEqual(result3.username, result.username)
   16:         self.assertEqual(result3.password, result.password)
   16:         self.assertEqual(result3.hostname, result.hostname)
   16:         self.assertEqual(result3.port,     result.port)
       
    1:     def test_qsl(self):
   22:         for orig, expect in parse_qsl_test_cases:
   21:             result = urlparse.parse_qsl(orig, keep_blank_values=True)
   21:             self.assertEqual(result, expect, "Error parsing %r" % orig)
   41:             expect_without_blanks = [v for v in expect if len(v[1])]
   21:             result = urlparse.parse_qsl(orig, keep_blank_values=False)
   21:             self.assertEqual(result, expect_without_blanks,
   21:                     "Error parsing %r" % orig)
       
    1:     def test_qs(self):
   31:         for orig, expect in parse_qs_test_cases:
   30:             result = urlparse.parse_qs(orig, keep_blank_values=True)
   30:             self.assertEqual(result, expect, "Error parsing %r" % orig)
   30:             expect_without_blanks = dict(
   54:                     [(v, expect[v]) for v in expect if len(expect[v][0])])
   30:             result = urlparse.parse_qs(orig, keep_blank_values=False)
   30:             self.assertEqual(result, expect_without_blanks,
   30:                     "Error parsing %r" % orig)
       
    1:     def test_roundtrips(self):
               testcases = [
    1:             ('file:///tmp/junk.txt',
    1:              ('file', '', '/tmp/junk.txt', '', '', ''),
    1:              ('file', '', '/tmp/junk.txt', '', '')),
    1:             ('imap://mail.python.org/mbox1',
    1:              ('imap', 'mail.python.org', '/mbox1', '', '', ''),
    1:              ('imap', 'mail.python.org', '/mbox1', '', '')),
    1:             ('mms://wms.sys.hinet.net/cts/Drama/09006251100.asf',
                    ('mms', 'wms.sys.hinet.net', '/cts/Drama/09006251100.asf',
    1:               '', '', ''),
                    ('mms', 'wms.sys.hinet.net', '/cts/Drama/09006251100.asf',
    1:               '', '')),
    1:             ('nfs://server/path/to/file.txt',
    1:              ('nfs', 'server', '/path/to/file.txt',  '', '', ''),
    1:              ('nfs', 'server', '/path/to/file.txt', '', '')),
    1:             ('svn+ssh://svn.zope.org/repos/main/ZConfig/trunk/',
                    ('svn+ssh', 'svn.zope.org', '/repos/main/ZConfig/trunk/',
    1:               '', '', ''),
                    ('svn+ssh', 'svn.zope.org', '/repos/main/ZConfig/trunk/',
    1:               '', '')),
    1:             ('git+ssh://git@github.com/user/project.git',
                   ('git+ssh', 'git@github.com','/user/project.git',
    1:              '','',''),
                   ('git+ssh', 'git@github.com','/user/project.git',
    1:              '', ''))
                   ]
    7:         for url, parsed, split in testcases:
    6:             self.checkRoundtrips(url, parsed, split)
       
    1:     def test_http_roundtrips(self):
               # urlparse.urlsplit treats 'http:' as an optimized special case,
               # so we test both 'http:' and 'https:' in all the following.
               # Three cheers for white box knowledge!
               testcases = [
    1:             ('://www.python.org',
    1:              ('www.python.org', '', '', '', ''),
    1:              ('www.python.org', '', '', '')),
    1:             ('://www.python.org#abc',
    1:              ('www.python.org', '', '', '', 'abc'),
    1:              ('www.python.org', '', '', 'abc')),
    1:             ('://www.python.org?q=abc',
    1:              ('www.python.org', '', '', 'q=abc', ''),
    1:              ('www.python.org', '', 'q=abc', '')),
    1:             ('://www.python.org/#abc',
    1:              ('www.python.org', '/', '', '', 'abc'),
    1:              ('www.python.org', '/', '', 'abc')),
    1:             ('://a/b/c/d;p?q#f',
    1:              ('a', '/b/c/d', 'p', 'q', 'f'),
    1:              ('a', '/b/c/d;p', 'q', 'f')),
                   ]
    3:         for scheme in ('http', 'https'):
   12:             for url, parsed, split in testcases:
   10:                 url = scheme + url
   10:                 parsed = (scheme,) + parsed
   10:                 split = (scheme,) + split
   10:                 self.checkRoundtrips(url, parsed, split)
       
    1:     def checkJoin(self, base, relurl, expected):
  149:         self.assertEqual(urlparse.urljoin(base, relurl), expected,
  149:                          (base, relurl, expected))
       
    1:     def test_unparse_parse(self):
    8:         for u in ['Python', './Python','x-newscheme://foo.com/stuff','x://y','x:/y','x:/','/',]:
    7:             self.assertEqual(urlparse.urlunsplit(urlparse.urlsplit(u)), u)
    7:             self.assertEqual(urlparse.urlunparse(urlparse.urlparse(u)), u)
       
    1:     def test_RFC1808(self):
               # "normal" cases from RFC 1808:
    1:         self.checkJoin(RFC1808_BASE, 'g:h', 'g:h')
    1:         self.checkJoin(RFC1808_BASE, 'g', 'http://a/b/c/g')
    1:         self.checkJoin(RFC1808_BASE, './g', 'http://a/b/c/g')
    1:         self.checkJoin(RFC1808_BASE, 'g/', 'http://a/b/c/g/')
    1:         self.checkJoin(RFC1808_BASE, '/g', 'http://a/g')
    1:         self.checkJoin(RFC1808_BASE, '//g', 'http://g')
    1:         self.checkJoin(RFC1808_BASE, 'g?y', 'http://a/b/c/g?y')
    1:         self.checkJoin(RFC1808_BASE, 'g?y/./x', 'http://a/b/c/g?y/./x')
    1:         self.checkJoin(RFC1808_BASE, '#s', 'http://a/b/c/d;p?q#s')
    1:         self.checkJoin(RFC1808_BASE, 'g#s', 'http://a/b/c/g#s')
    1:         self.checkJoin(RFC1808_BASE, 'g#s/./x', 'http://a/b/c/g#s/./x')
    1:         self.checkJoin(RFC1808_BASE, 'g?y#s', 'http://a/b/c/g?y#s')
    1:         self.checkJoin(RFC1808_BASE, 'g;x', 'http://a/b/c/g;x')
    1:         self.checkJoin(RFC1808_BASE, 'g;x?y#s', 'http://a/b/c/g;x?y#s')
    1:         self.checkJoin(RFC1808_BASE, '.', 'http://a/b/c/')
    1:         self.checkJoin(RFC1808_BASE, './', 'http://a/b/c/')
    1:         self.checkJoin(RFC1808_BASE, '..', 'http://a/b/')
    1:         self.checkJoin(RFC1808_BASE, '../', 'http://a/b/')
    1:         self.checkJoin(RFC1808_BASE, '../g', 'http://a/b/g')
    1:         self.checkJoin(RFC1808_BASE, '../..', 'http://a/')
    1:         self.checkJoin(RFC1808_BASE, '../../', 'http://a/')
    1:         self.checkJoin(RFC1808_BASE, '../../g', 'http://a/g')
       
               # "abnormal" cases from RFC 1808:
    1:         self.checkJoin(RFC1808_BASE, '', 'http://a/b/c/d;p?q#f')
    1:         self.checkJoin(RFC1808_BASE, '../../../g', 'http://a/../g')
    1:         self.checkJoin(RFC1808_BASE, '../../../../g', 'http://a/../../g')
    1:         self.checkJoin(RFC1808_BASE, '/./g', 'http://a/./g')
    1:         self.checkJoin(RFC1808_BASE, '/../g', 'http://a/../g')
    1:         self.checkJoin(RFC1808_BASE, 'g.', 'http://a/b/c/g.')
    1:         self.checkJoin(RFC1808_BASE, '.g', 'http://a/b/c/.g')
    1:         self.checkJoin(RFC1808_BASE, 'g..', 'http://a/b/c/g..')
    1:         self.checkJoin(RFC1808_BASE, '..g', 'http://a/b/c/..g')
    1:         self.checkJoin(RFC1808_BASE, './../g', 'http://a/b/g')
    1:         self.checkJoin(RFC1808_BASE, './g/.', 'http://a/b/c/g/')
    1:         self.checkJoin(RFC1808_BASE, 'g/./h', 'http://a/b/c/g/h')
    1:         self.checkJoin(RFC1808_BASE, 'g/../h', 'http://a/b/c/h')
       
               # RFC 1808 and RFC 1630 disagree on these (according to RFC 1808),
               # so we'll not actually run these tests (which expect 1808 behavior).
               #self.checkJoin(RFC1808_BASE, 'http:g', 'http:g')
               #self.checkJoin(RFC1808_BASE, 'http:', 'http:')
       
    1:     def test_RFC2368(self):
               # Issue 11467: path that starts with a number is not parsed correctly
    1:         self.assertEqual(urlparse.urlparse('mailto:1337@example.org'),
    1:                 ('mailto', '', '1337@example.org', '', '', ''))
       
    1:     def test_RFC2396(self):
               # cases from RFC 2396
    1:         self.checkJoin(RFC2396_BASE, 'g:h', 'g:h')
    1:         self.checkJoin(RFC2396_BASE, 'g', 'http://a/b/c/g')
    1:         self.checkJoin(RFC2396_BASE, './g', 'http://a/b/c/g')
    1:         self.checkJoin(RFC2396_BASE, 'g/', 'http://a/b/c/g/')
    1:         self.checkJoin(RFC2396_BASE, '/g', 'http://a/g')
    1:         self.checkJoin(RFC2396_BASE, '//g', 'http://g')
    1:         self.checkJoin(RFC2396_BASE, 'g?y', 'http://a/b/c/g?y')
    1:         self.checkJoin(RFC2396_BASE, '#s', 'http://a/b/c/d;p?q#s')
    1:         self.checkJoin(RFC2396_BASE, 'g#s', 'http://a/b/c/g#s')
    1:         self.checkJoin(RFC2396_BASE, 'g?y#s', 'http://a/b/c/g?y#s')
    1:         self.checkJoin(RFC2396_BASE, 'g;x', 'http://a/b/c/g;x')
    1:         self.checkJoin(RFC2396_BASE, 'g;x?y#s', 'http://a/b/c/g;x?y#s')
    1:         self.checkJoin(RFC2396_BASE, '.', 'http://a/b/c/')
    1:         self.checkJoin(RFC2396_BASE, './', 'http://a/b/c/')
    1:         self.checkJoin(RFC2396_BASE, '..', 'http://a/b/')
    1:         self.checkJoin(RFC2396_BASE, '../', 'http://a/b/')
    1:         self.checkJoin(RFC2396_BASE, '../g', 'http://a/b/g')
    1:         self.checkJoin(RFC2396_BASE, '../..', 'http://a/')
    1:         self.checkJoin(RFC2396_BASE, '../../', 'http://a/')
    1:         self.checkJoin(RFC2396_BASE, '../../g', 'http://a/g')
    1:         self.checkJoin(RFC2396_BASE, '', RFC2396_BASE)
    1:         self.checkJoin(RFC2396_BASE, '../../../g', 'http://a/../g')
    1:         self.checkJoin(RFC2396_BASE, '../../../../g', 'http://a/../../g')
    1:         self.checkJoin(RFC2396_BASE, '/./g', 'http://a/./g')
    1:         self.checkJoin(RFC2396_BASE, '/../g', 'http://a/../g')
    1:         self.checkJoin(RFC2396_BASE, 'g.', 'http://a/b/c/g.')
    1:         self.checkJoin(RFC2396_BASE, '.g', 'http://a/b/c/.g')
    1:         self.checkJoin(RFC2396_BASE, 'g..', 'http://a/b/c/g..')
    1:         self.checkJoin(RFC2396_BASE, '..g', 'http://a/b/c/..g')
    1:         self.checkJoin(RFC2396_BASE, './../g', 'http://a/b/g')
    1:         self.checkJoin(RFC2396_BASE, './g/.', 'http://a/b/c/g/')
    1:         self.checkJoin(RFC2396_BASE, 'g/./h', 'http://a/b/c/g/h')
    1:         self.checkJoin(RFC2396_BASE, 'g/../h', 'http://a/b/c/h')
    1:         self.checkJoin(RFC2396_BASE, 'g;x=1/./y', 'http://a/b/c/g;x=1/y')
    1:         self.checkJoin(RFC2396_BASE, 'g;x=1/../y', 'http://a/b/c/y')
    1:         self.checkJoin(RFC2396_BASE, 'g?y/./x', 'http://a/b/c/g?y/./x')
    1:         self.checkJoin(RFC2396_BASE, 'g?y/../x', 'http://a/b/c/g?y/../x')
    1:         self.checkJoin(RFC2396_BASE, 'g#s/./x', 'http://a/b/c/g#s/./x')
    1:         self.checkJoin(RFC2396_BASE, 'g#s/../x', 'http://a/b/c/g#s/../x')
       
    1:     def test_RFC3986(self):
               # Test cases from RFC3986
    1:         self.checkJoin(RFC3986_BASE, '?y','http://a/b/c/d;p?y')
    1:         self.checkJoin(RFC2396_BASE, ';x', 'http://a/b/c/;x')
    1:         self.checkJoin(RFC3986_BASE, 'g:h','g:h')
    1:         self.checkJoin(RFC3986_BASE, 'g','http://a/b/c/g')
    1:         self.checkJoin(RFC3986_BASE, './g','http://a/b/c/g')
    1:         self.checkJoin(RFC3986_BASE, 'g/','http://a/b/c/g/')
    1:         self.checkJoin(RFC3986_BASE, '/g','http://a/g')
    1:         self.checkJoin(RFC3986_BASE, '//g','http://g')
    1:         self.checkJoin(RFC3986_BASE, '?y','http://a/b/c/d;p?y')
    1:         self.checkJoin(RFC3986_BASE, 'g?y','http://a/b/c/g?y')
    1:         self.checkJoin(RFC3986_BASE, '#s','http://a/b/c/d;p?q#s')
    1:         self.checkJoin(RFC3986_BASE, 'g#s','http://a/b/c/g#s')
    1:         self.checkJoin(RFC3986_BASE, 'g?y#s','http://a/b/c/g?y#s')
    1:         self.checkJoin(RFC3986_BASE, ';x','http://a/b/c/;x')
    1:         self.checkJoin(RFC3986_BASE, 'g;x','http://a/b/c/g;x')
    1:         self.checkJoin(RFC3986_BASE, 'g;x?y#s','http://a/b/c/g;x?y#s')
    1:         self.checkJoin(RFC3986_BASE, '','http://a/b/c/d;p?q')
    1:         self.checkJoin(RFC3986_BASE, '.','http://a/b/c/')
    1:         self.checkJoin(RFC3986_BASE, './','http://a/b/c/')
    1:         self.checkJoin(RFC3986_BASE, '..','http://a/b/')
    1:         self.checkJoin(RFC3986_BASE, '../','http://a/b/')
    1:         self.checkJoin(RFC3986_BASE, '../g','http://a/b/g')
    1:         self.checkJoin(RFC3986_BASE, '../..','http://a/')
    1:         self.checkJoin(RFC3986_BASE, '../../','http://a/')
    1:         self.checkJoin(RFC3986_BASE, '../../g','http://a/g')
       
               #Abnormal Examples
       
               # The 'abnormal scenarios' are incompatible with RFC2986 parsing
               # Tests are here for reference.
       
               #self.checkJoin(RFC3986_BASE, '../../../g','http://a/g')
               #self.checkJoin(RFC3986_BASE, '../../../../g','http://a/g')
               #self.checkJoin(RFC3986_BASE, '/./g','http://a/g')
               #self.checkJoin(RFC3986_BASE, '/../g','http://a/g')
       
    1:         self.checkJoin(RFC3986_BASE, 'g.','http://a/b/c/g.')
    1:         self.checkJoin(RFC3986_BASE, '.g','http://a/b/c/.g')
    1:         self.checkJoin(RFC3986_BASE, 'g..','http://a/b/c/g..')
    1:         self.checkJoin(RFC3986_BASE, '..g','http://a/b/c/..g')
    1:         self.checkJoin(RFC3986_BASE, './../g','http://a/b/g')
    1:         self.checkJoin(RFC3986_BASE, './g/.','http://a/b/c/g/')
    1:         self.checkJoin(RFC3986_BASE, 'g/./h','http://a/b/c/g/h')
    1:         self.checkJoin(RFC3986_BASE, 'g/../h','http://a/b/c/h')
    1:         self.checkJoin(RFC3986_BASE, 'g;x=1/./y','http://a/b/c/g;x=1/y')
    1:         self.checkJoin(RFC3986_BASE, 'g;x=1/../y','http://a/b/c/y')
    1:         self.checkJoin(RFC3986_BASE, 'g?y/./x','http://a/b/c/g?y/./x')
    1:         self.checkJoin(RFC3986_BASE, 'g?y/../x','http://a/b/c/g?y/../x')
    1:         self.checkJoin(RFC3986_BASE, 'g#s/./x','http://a/b/c/g#s/./x')
    1:         self.checkJoin(RFC3986_BASE, 'g#s/../x','http://a/b/c/g#s/../x')
               #self.checkJoin(RFC3986_BASE, 'http:g','http:g') # strict parser
    1:         self.checkJoin(RFC3986_BASE, 'http:g','http://a/b/c/g') # relaxed parser
       
               # Test for issue9721
    1:         self.checkJoin('http://a/b/c/de', ';x','http://a/b/c/;x')
       
    1:     def test_urljoins(self):
    1:         self.checkJoin(SIMPLE_BASE, 'g:h','g:h')
    1:         self.checkJoin(SIMPLE_BASE, 'http:g','http://a/b/c/g')
    1:         self.checkJoin(SIMPLE_BASE, 'http:','http://a/b/c/d')
    1:         self.checkJoin(SIMPLE_BASE, 'g','http://a/b/c/g')
    1:         self.checkJoin(SIMPLE_BASE, './g','http://a/b/c/g')
    1:         self.checkJoin(SIMPLE_BASE, 'g/','http://a/b/c/g/')
    1:         self.checkJoin(SIMPLE_BASE, '/g','http://a/g')
    1:         self.checkJoin(SIMPLE_BASE, '//g','http://g')
    1:         self.checkJoin(SIMPLE_BASE, '?y','http://a/b/c/d?y')
    1:         self.checkJoin(SIMPLE_BASE, 'g?y','http://a/b/c/g?y')
    1:         self.checkJoin(SIMPLE_BASE, 'g?y/./x','http://a/b/c/g?y/./x')
    1:         self.checkJoin(SIMPLE_BASE, '.','http://a/b/c/')
    1:         self.checkJoin(SIMPLE_BASE, './','http://a/b/c/')
    1:         self.checkJoin(SIMPLE_BASE, '..','http://a/b/')
    1:         self.checkJoin(SIMPLE_BASE, '../','http://a/b/')
    1:         self.checkJoin(SIMPLE_BASE, '../g','http://a/b/g')
    1:         self.checkJoin(SIMPLE_BASE, '../..','http://a/')
    1:         self.checkJoin(SIMPLE_BASE, '../../g','http://a/g')
    1:         self.checkJoin(SIMPLE_BASE, '../../../g','http://a/../g')
    1:         self.checkJoin(SIMPLE_BASE, './../g','http://a/b/g')
    1:         self.checkJoin(SIMPLE_BASE, './g/.','http://a/b/c/g/')
    1:         self.checkJoin(SIMPLE_BASE, '/./g','http://a/./g')
    1:         self.checkJoin(SIMPLE_BASE, 'g/./h','http://a/b/c/g/h')
    1:         self.checkJoin(SIMPLE_BASE, 'g/../h','http://a/b/c/h')
    1:         self.checkJoin(SIMPLE_BASE, 'http:g','http://a/b/c/g')
    1:         self.checkJoin(SIMPLE_BASE, 'http:','http://a/b/c/d')
    1:         self.checkJoin(SIMPLE_BASE, 'http:?y','http://a/b/c/d?y')
    1:         self.checkJoin(SIMPLE_BASE, 'http:g?y','http://a/b/c/g?y')
    1:         self.checkJoin(SIMPLE_BASE, 'http:g?y/./x','http://a/b/c/g?y/./x')
    1:         self.checkJoin('http:///', '..','http:///')
    1:         self.checkJoin('', 'http://a/b/c/g?y/./x','http://a/b/c/g?y/./x')
    1:         self.checkJoin('', 'http://a/./g', 'http://a/./g')
    1:         self.checkJoin('svn://pathtorepo/dir1','dir2','svn://pathtorepo/dir2')
    1:         self.checkJoin('svn+ssh://pathtorepo/dir1','dir2','svn+ssh://pathtorepo/dir2')
       
    1:     def test_RFC2732(self):
    1:         for url, hostname, port in [
    1:             ('http://Test.python.org:5432/foo/', 'test.python.org', 5432),
    1:             ('http://12.34.56.78:5432/foo/', '12.34.56.78', 5432),
    1:             ('http://[::1]:5432/foo/', '::1', 5432),
    1:             ('http://[dead:beef::1]:5432/foo/', 'dead:beef::1', 5432),
    1:             ('http://[dead:beef::]:5432/foo/', 'dead:beef::', 5432),
                   ('http://[dead:beef:cafe:5417:affe:8FA3:deaf:feed]:5432/foo/',
    1:              'dead:beef:cafe:5417:affe:8fa3:deaf:feed', 5432),
    1:             ('http://[::12.34.56.78]:5432/foo/', '::12.34.56.78', 5432),
                   ('http://[::ffff:12.34.56.78]:5432/foo/',
    1:              '::ffff:12.34.56.78', 5432),
    1:             ('http://Test.python.org/foo/', 'test.python.org', None),
    1:             ('http://12.34.56.78/foo/', '12.34.56.78', None),
    1:             ('http://[::1]/foo/', '::1', None),
    1:             ('http://[dead:beef::1]/foo/', 'dead:beef::1', None),
    1:             ('http://[dead:beef::]/foo/', 'dead:beef::', None),
                   ('http://[dead:beef:cafe:5417:affe:8FA3:deaf:feed]/foo/',
    1:              'dead:beef:cafe:5417:affe:8fa3:deaf:feed', None),
    1:             ('http://[::12.34.56.78]/foo/', '::12.34.56.78', None),
                   ('http://[::ffff:12.34.56.78]/foo/',
    1:              '::ffff:12.34.56.78', None),
    1:             ('http://Test.python.org:/foo/', 'test.python.org', None),
    1:             ('http://12.34.56.78:/foo/', '12.34.56.78', None),
    1:             ('http://[::1]:/foo/', '::1', None),
    1:             ('http://[dead:beef::1]:/foo/', 'dead:beef::1', None),
    1:             ('http://[dead:beef::]:/foo/', 'dead:beef::', None),
                   ('http://[dead:beef:cafe:5417:affe:8FA3:deaf:feed]:/foo/',
    1:              'dead:beef:cafe:5417:affe:8fa3:deaf:feed', None),
    1:             ('http://[::12.34.56.78]:/foo/', '::12.34.56.78', None),
                   ('http://[::ffff:12.34.56.78]:/foo/',
   25:              '::ffff:12.34.56.78', None),
                   ]:
   24:             urlparsed = urlparse.urlparse(url)
   24:             self.assertEqual((urlparsed.hostname, urlparsed.port) , (hostname, port))
       
    1:         for invalid_url in [
    1:                 'http://::12.34.56.78]/',
    1:                 'http://[::1/foo/',
    1:                 'ftp://[::1/foo/bad]/bad',
    1:                 'http://[::1/foo/bad]/bad',
    6:                 'http://[::ffff:12.34.56.78']:
    5:             self.assertRaises(ValueError, urlparse.urlparse, invalid_url)
       
    1:     def test_urldefrag(self):
    1:         for url, defrag, frag in [
    1:             ('http://python.org#frag', 'http://python.org', 'frag'),
    1:             ('http://python.org', 'http://python.org', ''),
    1:             ('http://python.org/#frag', 'http://python.org/', 'frag'),
    1:             ('http://python.org/', 'http://python.org/', ''),
    1:             ('http://python.org/?q#frag', 'http://python.org/?q', 'frag'),
    1:             ('http://python.org/?q', 'http://python.org/?q', ''),
    1:             ('http://python.org/p#frag', 'http://python.org/p', 'frag'),
    1:             ('http://python.org/p?q', 'http://python.org/p?q', ''),
    1:             (RFC1808_BASE, 'http://a/b/c/d;p?q', 'f'),
   11:             (RFC2396_BASE, 'http://a/b/c/d;p?q', ''),
                   ]:
   10:             self.assertEqual(urlparse.urldefrag(url), (defrag, frag))
       
    1:     def test_urlsplit_attributes(self):
    1:         url = "HTTP://WWW.PYTHON.ORG/doc/#frag"
    1:         p = urlparse.urlsplit(url)
    1:         self.assertEqual(p.scheme, "http")
    1:         self.assertEqual(p.netloc, "WWW.PYTHON.ORG")
    1:         self.assertEqual(p.path, "/doc/")
    1:         self.assertEqual(p.query, "")
    1:         self.assertEqual(p.fragment, "frag")
    1:         self.assertEqual(p.username, None)
    1:         self.assertEqual(p.password, None)
    1:         self.assertEqual(p.hostname, "www.python.org")
    1:         self.assertEqual(p.port, None)
               # geturl() won't return exactly the original URL in this case
               # since the scheme is always case-normalized
               #self.assertEqual(p.geturl(), url)
       
    1:         url = "http://User:Pass@www.python.org:080/doc/?query=yes#frag"
    1:         p = urlparse.urlsplit(url)
    1:         self.assertEqual(p.scheme, "http")
    1:         self.assertEqual(p.netloc, "User:Pass@www.python.org:080")
    1:         self.assertEqual(p.path, "/doc/")
    1:         self.assertEqual(p.query, "query=yes")
    1:         self.assertEqual(p.fragment, "frag")
    1:         self.assertEqual(p.username, "User")
    1:         self.assertEqual(p.password, "Pass")
    1:         self.assertEqual(p.hostname, "www.python.org")
    1:         self.assertEqual(p.port, 80)
    1:         self.assertEqual(p.geturl(), url)
       
               # Addressing issue1698, which suggests Username can contain
               # "@" characters.  Though not RFC compliant, many ftp sites allow
               # and request email addresses as usernames.
       
    1:         url = "http://User@example.com:Pass@www.python.org:080/doc/?query=yes#frag"
    1:         p = urlparse.urlsplit(url)
    1:         self.assertEqual(p.scheme, "http")
    1:         self.assertEqual(p.netloc, "User@example.com:Pass@www.python.org:080")
    1:         self.assertEqual(p.path, "/doc/")
    1:         self.assertEqual(p.query, "query=yes")
    1:         self.assertEqual(p.fragment, "frag")
    1:         self.assertEqual(p.username, "User@example.com")
    1:         self.assertEqual(p.password, "Pass")
    1:         self.assertEqual(p.hostname, "www.python.org")
    1:         self.assertEqual(p.port, 80)
    1:         self.assertEqual(p.geturl(), url)
       
               # Verify an illegal port of value greater than 65535 is set as None
    1:         url = "http://www.python.org:65536"
    1:         p = urlparse.urlsplit(url)
    1:         self.assertEqual(p.port, None)
       
    1:     def test_issue14072(self):
    1:         p1 = urlparse.urlsplit('tel:+31-641044153')
    1:         self.assertEqual(p1.scheme, 'tel')
    1:         self.assertEqual(p1.path, '+31-641044153')
       
    1:         p2 = urlparse.urlsplit('tel:+31641044153')
    1:         self.assertEqual(p2.scheme, 'tel')
    1:         self.assertEqual(p2.path, '+31641044153')
       
               # Assert for urlparse
    1:         p1 = urlparse.urlparse('tel:+31-641044153')
    1:         self.assertEqual(p1.scheme, 'tel')
    1:         self.assertEqual(p1.path, '+31-641044153')
       
    1:         p2 = urlparse.urlparse('tel:+31641044153')
    1:         self.assertEqual(p2.scheme, 'tel')
    1:         self.assertEqual(p2.path, '+31641044153')
       
       
    1:     def test_telurl_params(self):
    1:         p1 = urlparse.urlparse('tel:123-4;phone-context=+1-650-516')
    1:         self.assertEqual(p1.scheme, 'tel')
    1:         self.assertEqual(p1.path, '123-4')
    1:         self.assertEqual(p1.params, 'phone-context=+1-650-516')
       
    1:         p1 = urlparse.urlparse('tel:+1-201-555-0123')
    1:         self.assertEqual(p1.scheme, 'tel')
    1:         self.assertEqual(p1.path, '+1-201-555-0123')
    1:         self.assertEqual(p1.params, '')
       
    1:         p1 = urlparse.urlparse('tel:7042;phone-context=example.com')
    1:         self.assertEqual(p1.scheme, 'tel')
    1:         self.assertEqual(p1.path, '7042')
    1:         self.assertEqual(p1.params, 'phone-context=example.com')
       
    1:         p1 = urlparse.urlparse('tel:863-1234;phone-context=+1-914-555')
    1:         self.assertEqual(p1.scheme, 'tel')
    1:         self.assertEqual(p1.path, '863-1234')
    1:         self.assertEqual(p1.params, 'phone-context=+1-914-555')
       
       
    1:     def test_attributes_bad_port(self):
               """Check handling of non-integer ports."""
    1:         p = urlparse.urlsplit("http://www.example.net:foo")
    1:         self.assertEqual(p.netloc, "www.example.net:foo")
    2:         self.assertRaises(ValueError, lambda: p.port)
       
    1:         p = urlparse.urlparse("http://www.example.net:foo")
    1:         self.assertEqual(p.netloc, "www.example.net:foo")
    2:         self.assertRaises(ValueError, lambda: p.port)
       
    1:     def test_attributes_without_netloc(self):
               # This example is straight from RFC 3261.  It looks like it
               # should allow the username, hostname, and port to be filled
               # in, but doesn't.  Since it's a URI and doesn't use the
               # scheme://netloc syntax, the netloc and related attributes
               # should be left empty.
    1:         uri = "sip:alice@atlanta.com;maddr=239.255.255.1;ttl=15"
    1:         p = urlparse.urlsplit(uri)
    1:         self.assertEqual(p.netloc, "")
    1:         self.assertEqual(p.username, None)
    1:         self.assertEqual(p.password, None)
    1:         self.assertEqual(p.hostname, None)
    1:         self.assertEqual(p.port, None)
    1:         self.assertEqual(p.geturl(), uri)
       
    1:         p = urlparse.urlparse(uri)
    1:         self.assertEqual(p.netloc, "")
    1:         self.assertEqual(p.username, None)
    1:         self.assertEqual(p.password, None)
    1:         self.assertEqual(p.hostname, None)
    1:         self.assertEqual(p.port, None)
    1:         self.assertEqual(p.geturl(), uri)
       
    1:     def test_caching(self):
               # Test case for bug #1313119
    1:         uri = "http://example.com/doc/"
    1:         unicode_uri = unicode(uri)
       
    1:         urlparse.urlparse(unicode_uri)
    1:         p = urlparse.urlparse(uri)
    1:         self.assertEqual(type(p.scheme), type(uri))
    1:         self.assertEqual(type(p.hostname), type(uri))
    1:         self.assertEqual(type(p.path), type(uri))
       
    1:     def test_noslash(self):
               # Issue 1637: http://foo.com?query is legal
    1:         self.assertEqual(urlparse.urlparse("http://example.com?blahblah=/foo"),
    1:                          ('http', 'example.com', '', '', 'blahblah=/foo', ''))
       
    1:     def test_anyscheme(self):
               # Issue 7904: s3://foo.com/stuff has netloc "foo.com".
    1:         self.assertEqual(urlparse.urlparse("s3://foo.com/stuff"),
    1:                          ('s3','foo.com','/stuff','','',''))
    1:         self.assertEqual(urlparse.urlparse("x-newscheme://foo.com/stuff"),
    1:                          ('x-newscheme','foo.com','/stuff','','',''))
    1:         self.assertEqual(urlparse.urlparse("x-newscheme://foo.com/stuff?query#fragment"),
    1:                          ('x-newscheme','foo.com','/stuff','','query','fragment'))
    1:         self.assertEqual(urlparse.urlparse("x-newscheme://foo.com/stuff?query"),
    1:                          ('x-newscheme','foo.com','/stuff','','query',''))
       
    1:     def test_withoutscheme(self):
               # Test urlparse without scheme
               # Issue 754016: urlparse goes wrong with IP:port without scheme
               # RFC 1808 specifies that netloc should start with //, urlparse expects
               # the same, otherwise it classifies the portion of url as path.
    1:         self.assertEqual(urlparse.urlparse("path"),
    1:                 ('','','path','','',''))
    1:         self.assertEqual(urlparse.urlparse("//www.python.org:80"),
    1:                 ('','www.python.org:80','','','',''))
    1:         self.assertEqual(urlparse.urlparse("http://www.python.org:80"),
    1:                 ('http','www.python.org:80','','','',''))
       
    1:     def test_portseparator(self):
               # Issue 754016 makes changes for port separator ':' from scheme separator
    1:         self.assertEqual(urlparse.urlparse("path:80"),
    1:                 ('','','path:80','','',''))
    1:         self.assertEqual(urlparse.urlparse("http:"),('http','','','','',''))
    1:         self.assertEqual(urlparse.urlparse("https:"),('https','','','','',''))
    1:         self.assertEqual(urlparse.urlparse("http://www.python.org:80"),
    1:                 ('http','www.python.org:80','','','',''))
       
    1: def test_main():
    1:     test_support.run_unittest(UrlParseTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
