    1: import os, unittest
    1: from ctypes import *
       
    1: try:
    1:     WINFUNCTYPE
    1: except NameError:
           # fake to enable this test on Linux
    1:     WINFUNCTYPE = CFUNCTYPE
       
    1: import _ctypes_test
    1: lib = CDLL(_ctypes_test.__file__)
       
    2: class CFuncPtrTestCase(unittest.TestCase):
    1:     def test_basic(self):
    1:         X = WINFUNCTYPE(c_int, c_int, c_int)
       
    1:         def func(*args):
>>>>>>             return len(args)
       
    1:         x = X(func)
    1:         self.assertEqual(x.restype, c_int)
    1:         self.assertEqual(x.argtypes, (c_int, c_int))
    1:         self.assertEqual(sizeof(x), sizeof(c_voidp))
    1:         self.assertEqual(sizeof(X), sizeof(c_voidp))
       
    1:     def test_first(self):
    1:         StdCallback = WINFUNCTYPE(c_int, c_int, c_int)
    1:         CdeclCallback = CFUNCTYPE(c_int, c_int, c_int)
       
    1:         def func(a, b):
    3:             return a + b
       
    1:         s = StdCallback(func)
    1:         c = CdeclCallback(func)
       
    1:         self.assertEqual(s(1, 2), 3)
    1:         self.assertEqual(c(1, 2), 3)
               # The following no longer raises a TypeError - it is now
               # possible, as in C, to call cdecl functions with more parameters.
               #self.assertRaises(TypeError, c, 1, 2, 3)
    1:         self.assertEqual(c(1, 2, 3, 4, 5, 6), 3)
    1:         if not WINFUNCTYPE is CFUNCTYPE and os.name != "ce":
>>>>>>             self.assertRaises(TypeError, s, 1, 2, 3)
       
    1:     def test_structures(self):
    1:         WNDPROC = WINFUNCTYPE(c_long, c_int, c_int, c_int, c_int)
       
    1:         def wndproc(hwnd, msg, wParam, lParam):
    2:             return hwnd + msg + wParam + lParam
       
    1:         HINSTANCE = c_int
    1:         HICON = c_int
    1:         HCURSOR = c_int
    1:         LPCTSTR = c_char_p
       
    2:         class WNDCLASS(Structure):
    1:             _fields_ = [("style", c_uint),
    1:                         ("lpfnWndProc", WNDPROC),
    1:                         ("cbClsExtra", c_int),
    1:                         ("cbWndExtra", c_int),
    1:                         ("hInstance", HINSTANCE),
    1:                         ("hIcon", HICON),
    1:                         ("hCursor", HCURSOR),
    1:                         ("lpszMenuName", LPCTSTR),
    1:                         ("lpszClassName", LPCTSTR)]
       
    1:         wndclass = WNDCLASS()
    1:         wndclass.lpfnWndProc = WNDPROC(wndproc)
       
    1:         WNDPROC_2 = WINFUNCTYPE(c_long, c_int, c_int, c_int, c_int)
       
               # This is no longer true, now that WINFUNCTYPE caches created types internally.
               ## # CFuncPtr subclasses are compared by identity, so this raises a TypeError:
               ## self.assertRaises(TypeError, setattr, wndclass,
               ##                  "lpfnWndProc", WNDPROC_2(wndproc))
               # instead:
       
    1:         self.assertIs(WNDPROC, WNDPROC_2)
               # 'wndclass.lpfnWndProc' leaks 94 references.  Why?
    1:         self.assertEqual(wndclass.lpfnWndProc(1, 2, 3, 4), 10)
       
       
    1:         f = wndclass.lpfnWndProc
       
    1:         del wndclass
    1:         del wndproc
       
    1:         self.assertEqual(f(10, 11, 12, 13), 46)
       
    1:     def test_dllfunctions(self):
       
    1:         def NoNullHandle(value):
>>>>>>             if not value:
>>>>>>                 raise WinError()
>>>>>>             return value
       
    1:         strchr = lib.my_strchr
    1:         strchr.restype = c_char_p
    1:         strchr.argtypes = (c_char_p, c_char)
    1:         self.assertEqual(strchr("abcdefghi", "b"), "bcdefghi")
    1:         self.assertEqual(strchr("abcdefghi", "x"), None)
       
       
    1:         strtok = lib.my_strtok
    1:         strtok.restype = c_char_p
               # Neither of this does work: strtok changes the buffer it is passed
       ##        strtok.argtypes = (c_char_p, c_char_p)
       ##        strtok.argtypes = (c_string, c_char_p)
       
    1:         def c_string(init):
    1:             size = len(init) + 1
    1:             return (c_char*size)(*init)
       
    1:         s = "a\nb\nc"
    1:         b = c_string(s)
       
       ##        b = (c_char * (len(s)+1))()
       ##        b.value = s
       
       ##        b = c_string(s)
    1:         self.assertEqual(strtok(b, "\n"), "a")
    1:         self.assertEqual(strtok(None, "\n"), "b")
    1:         self.assertEqual(strtok(None, "\n"), "c")
    1:         self.assertEqual(strtok(None, "\n"), None)
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
