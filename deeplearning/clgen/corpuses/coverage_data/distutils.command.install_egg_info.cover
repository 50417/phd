       """distutils.command.install_egg_info
       
       Implements the Distutils 'install_egg_info' command, for installing
    1: a package's PKG-INFO metadata."""
       
       
    1: from distutils.cmd import Command
    1: from distutils import log, dir_util
    1: import os, sys, re
       
    2: class install_egg_info(Command):
    1:     """Install an .egg-info file for the package"""
       
    1:     description = "Install package's PKG-INFO metadata as an .egg-info file"
           user_options = [
    1:         ('install-dir=', 'd', "directory to install to"),
           ]
       
    1:     def initialize_options(self):
    3:         self.install_dir = None
       
    1:     def finalize_options(self):
    3:         self.set_undefined_options('install_lib',('install_dir','install_dir'))
    3:         basename = "%s-%s-py%s.egg-info" % (
    3:             to_filename(safe_name(self.distribution.get_name())),
    3:             to_filename(safe_version(self.distribution.get_version())),
    3:             sys.version[:3]
               )
    3:         self.target = os.path.join(self.install_dir, basename)
    3:         self.outputs = [self.target]
       
    1:     def run(self):
    3:         target = self.target
    3:         if os.path.isdir(target) and not os.path.islink(target):
>>>>>>             dir_util.remove_tree(target, dry_run=self.dry_run)
    3:         elif os.path.exists(target):
>>>>>>             self.execute(os.unlink,(self.target,),"Removing "+target)
    3:         elif not os.path.isdir(self.install_dir):
>>>>>>             self.execute(os.makedirs, (self.install_dir,),
>>>>>>                          "Creating "+self.install_dir)
    3:         log.info("Writing %s", target)
    3:         if not self.dry_run:
    3:             f = open(target, 'w')
    3:             self.distribution.metadata.write_pkg_file(f)
    3:             f.close()
       
    1:     def get_outputs(self):
    2:         return self.outputs
       
       
       # The following routines are taken from setuptools' pkg_resources module and
       # can be replaced by importing them from pkg_resources once it is included
       # in the stdlib.
       
    1: def safe_name(name):
           """Convert an arbitrary string to a standard distribution name
       
           Any runs of non-alphanumeric/. characters are replaced with a single '-'.
           """
    3:     return re.sub('[^A-Za-z0-9.]+', '-', name)
       
       
    1: def safe_version(version):
           """Convert an arbitrary string to a standard version string
       
           Spaces become dots, and all other non-alphanumeric characters become
           dashes, with runs of multiple dashes condensed to a single dash.
           """
    3:     version = version.replace(' ','.')
    3:     return re.sub('[^A-Za-z0-9.]+', '-', version)
       
       
    1: def to_filename(name):
           """Convert a project or version name to its filename-escaped form
       
           Any '-' characters are currently replaced with '_'.
           """
    6:     return name.replace('-','_')
