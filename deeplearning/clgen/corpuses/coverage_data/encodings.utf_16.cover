       """ Python 'utf-16' Codec
       
       
       Written by Marc-Andre Lemburg (mal@lemburg.com).
       
       (c) Copyright CNRI, All Rights Reserved. NO WARRANTY.
       
    1: """
    1: import codecs, sys
       
       ### Codec APIs
       
    1: encode = codecs.utf_16_encode
       
    1: def decode(input, errors='strict'):
 1028:     return codecs.utf_16_decode(input, errors, True)
       
    2: class IncrementalEncoder(codecs.IncrementalEncoder):
    1:     def __init__(self, errors='strict'):
  110:         codecs.IncrementalEncoder.__init__(self, errors)
  110:         self.encoder = None
       
    1:     def encode(self, input, final=False):
   53:         if self.encoder is None:
   14:             result = codecs.utf_16_encode(input, self.errors)[0]
   14:             if sys.byteorder == 'little':
   14:                 self.encoder = codecs.utf_16_le_encode
                   else:
>>>>>>                 self.encoder = codecs.utf_16_be_encode
   14:             return result
   39:         return self.encoder(input, self.errors)[0]
       
    1:     def reset(self):
    8:         codecs.IncrementalEncoder.reset(self)
    8:         self.encoder = None
       
    1:     def getstate(self):
               # state info we return to the caller:
               # 0: stream is in natural order for this platform
               # 2: endianness hasn't been determined yet
               # (we're never writing in unnatural order)
>>>>>>         return (2 if self.encoder is None else 0)
       
    1:     def setstate(self, state):
    4:         if state:
>>>>>>             self.encoder = None
               else:
    4:             if sys.byteorder == 'little':
    4:                 self.encoder = codecs.utf_16_le_encode
                   else:
>>>>>>                 self.encoder = codecs.utf_16_be_encode
       
    2: class IncrementalDecoder(codecs.BufferedIncrementalDecoder):
    1:     def __init__(self, errors='strict'):
  193:         codecs.BufferedIncrementalDecoder.__init__(self, errors)
  193:         self.decoder = None
       
    1:     def _buffer_decode(self, input, errors, final):
 3782:         if self.decoder is None:
                   (output, consumed, byteorder) = \
  226:                 codecs.utf_16_ex_decode(input, errors, 0, final)
  226:             if byteorder == -1:
  197:                 self.decoder = codecs.utf_16_le_decode
   29:             elif byteorder == 1:
>>>>>>                 self.decoder = codecs.utf_16_be_decode
   29:             elif consumed >= 2:
>>>>>>                 raise UnicodeError("UTF-16 stream does not start with BOM")
  226:             return (output, consumed)
 3556:         return self.decoder(input, self.errors, final)
       
    1:     def reset(self):
   11:         codecs.BufferedIncrementalDecoder.reset(self)
   11:         self.decoder = None
       
    2: class StreamWriter(codecs.StreamWriter):
    1:     def __init__(self, stream, errors='strict'):
    9:         codecs.StreamWriter.__init__(self, stream, errors)
    9:         self.encoder = None
       
    1:     def reset(self):
    8:         codecs.StreamWriter.reset(self)
    8:         self.encoder = None
       
    1:     def encode(self, input, errors='strict'):
   25:         if self.encoder is None:
   10:             result = codecs.utf_16_encode(input, errors)
   10:             if sys.byteorder == 'little':
   10:                 self.encoder = codecs.utf_16_le_encode
                   else:
>>>>>>                 self.encoder = codecs.utf_16_be_encode
   10:             return result
               else:
   15:             return self.encoder(input, errors)
       
    2: class StreamReader(codecs.StreamReader):
       
    1:     def reset(self):
   13:         codecs.StreamReader.reset(self)
   13:         try:
   13:             del self.decode
    8:         except AttributeError:
    8:             pass
       
    1:     def decode(self, input, errors='strict'):
               (object, consumed, byteorder) = \
  675:             codecs.utf_16_ex_decode(input, errors, 0, False)
  675:         if byteorder == -1:
  669:             self.decode = codecs.utf_16_le_decode
    6:         elif byteorder == 1:
>>>>>>             self.decode = codecs.utf_16_be_decode
    6:         elif consumed>=2:
    2:             raise UnicodeError,"UTF-16 stream does not start with BOM"
  673:         return (object, consumed)
       
       ### encodings module API
       
    1: def getregentry():
    3:     return codecs.CodecInfo(
    3:         name='utf-16',
    3:         encode=encode,
    3:         decode=decode,
    3:         incrementalencoder=IncrementalEncoder,
    3:         incrementaldecoder=IncrementalDecoder,
    3:         streamreader=StreamReader,
    3:         streamwriter=StreamWriter,
           )
