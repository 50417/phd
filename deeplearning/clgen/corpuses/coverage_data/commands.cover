       """Execute shell commands via os.popen() and return status, output.
       
       Interface summary:
       
              import commands
       
              outtext = commands.getoutput(cmd)
              (exitstatus, outtext) = commands.getstatusoutput(cmd)
              outtext = commands.getstatus(file)  # returns output of "ls -ld file"
       
       A trailing newline is removed from the output string.
       
       Encapsulates the basic operation:
       
             pipe = os.popen('{ ' + cmd + '; } 2>&1', 'r')
             text = pipe.read()
             sts = pipe.close()
       
        [Note:  it would be nice to add functions to interpret the exit status.]
    1: """
    1: from warnings import warnpy3k
    1: warnpy3k("the commands module has been removed in Python 3.0; "
    1:          "use the subprocess module instead", stacklevel=2)
    1: del warnpy3k
       
    1: __all__ = ["getstatusoutput","getoutput","getstatus"]
       
       # Module 'commands'
       #
       # Various tools for executing commands and looking at their output and status.
       #
       # NB This only works (and is only relevant) for UNIX.
       
       
       # Get 'ls -l' status for an object into a string
       #
    1: def getstatus(file):
           """Return output of "ls -ld <file>" in a string."""
    1:     import warnings
    1:     warnings.warn("commands.getstatus() is deprecated", DeprecationWarning, 2)
    1:     return getoutput('ls -ld' + mkarg(file))
       
       
       # Get the output from a shell command into a string.
       # The exit status is ignored; a trailing newline is stripped.
       # Assume the command will work with '{ ... ; } 2>&1' around it..
       #
    1: def getoutput(cmd):
           """Return output (stdout or stderr) of executing cmd in a shell."""
    2:     return getstatusoutput(cmd)[1]
       
       
       # Ditto but preserving the exit status.
       # Returns a pair (sts, output)
       #
    1: def getstatusoutput(cmd):
           """Return (status, output) of executing cmd in a shell."""
    4:     import os
    4:     pipe = os.popen('{ ' + cmd + '; } 2>&1', 'r')
    4:     text = pipe.read()
    4:     sts = pipe.close()
    4:     if sts is None: sts = 0
    4:     if text[-1:] == '\n': text = text[:-1]
    4:     return sts, text
       
       
       # Make command argument from directory and pathname (prefix space, add quotes).
       #
    1: def mk2arg(head, x):
>>>>>>     import os
>>>>>>     return mkarg(os.path.join(head, x))
       
       
       # Make a shell command argument from a string.
       # Return a string beginning with a space followed by a shell-quoted
       # version of the argument.
       # Two strategies: enclose in single quotes if it contains none;
       # otherwise, enclose in double quotes and prefix quotable characters
       # with backslash.
       #
    1: def mkarg(x):
    1:     if '\'' not in x:
    1:         return ' \'' + x + '\''
>>>>>>     s = ' "'
>>>>>>     for c in x:
>>>>>>         if c in '\\$"`':
>>>>>>             s = s + '\\'
>>>>>>         s = s + c
>>>>>>     s = s + '"'
>>>>>>     return s
