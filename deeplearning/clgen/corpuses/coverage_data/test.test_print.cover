       """Test correct operation of the print function.
    1: """
       
       # In 2.6, this gives us the behavior we want.  In 3.0, it has
       #  no function, but it still must parse correctly.
    1: from __future__ import print_function
       
    1: import unittest
    1: from test import test_support
       
    1: from StringIO import StringIO
       
    1: NotDefined = object()
       
       # A dispatch table all 8 combinations of providing
       #  sep, end, and file
       # I use this machinery so that I'm not just passing default
       #  values to print, I'm either passing or not passing in the
       #  arguments
    1: dispatch = {
           (False, False, False):
   12:      lambda args, sep, end, file: print(*args),
           (False, False, True):
   12:      lambda args, sep, end, file: print(file=file, *args),
           (False, True,  False):
    3:      lambda args, sep, end, file: print(end=end, *args),
           (False, True,  True):
    3:      lambda args, sep, end, file: print(end=end, file=file, *args),
           (True,  False, False):
    6:      lambda args, sep, end, file: print(sep=sep, *args),
           (True,  False, True):
    6:      lambda args, sep, end, file: print(sep=sep, file=file, *args),
           (True,  True,  False):
    4:      lambda args, sep, end, file: print(sep=sep, end=end, *args),
           (True,  True,  True):
    4:      lambda args, sep, end, file: print(sep=sep, end=end, file=file, *args),
           }
       
       # Class used to test __str__ and print
    2: class ClassWith__str__:
    1:     def __init__(self, x):
    3:         self.x = x
    1:     def __str__(self):
    6:         return self.x
       
    2: class TestPrint(unittest.TestCase):
           def check(self, expected, args,
    1:             sep=NotDefined, end=NotDefined, file=NotDefined):
               # Capture sys.stdout in a StringIO.  Call print with args,
               #  and with sep, end, and file, if they're defined.  Result
               #  must match expected.
       
               # Look up the actual function to call, based on if sep, end, and file
               #  are defined
   42:         fn = dispatch[(sep is not NotDefined,
   42:                        end is not NotDefined,
   42:                        file is not NotDefined)]
       
   42:         with test_support.captured_stdout() as t:
   42:             fn(args, sep, end, file)
       
   42:         self.assertEqual(t.getvalue(), expected)
       
    1:     def test_print(self):
    1:         def x(expected, args, sep=NotDefined, end=NotDefined):
                   # Run the test 2 ways: not using file, and using
                   #  file directed to a StringIO
       
   21:             self.check(expected, args, sep=sep, end=end)
       
                   # When writing to a file, stdout is expected to be empty
   21:             o = StringIO()
   21:             self.check('', args, sep=sep, end=end, file=o)
       
                   # And o will contain the expected output
   21:             self.assertEqual(o.getvalue(), expected)
       
    1:         x('\n', ())
    1:         x('a\n', ('a',))
    1:         x('None\n', (None,))
    1:         x('1 2\n', (1, 2))
    1:         x('1   2\n', (1, ' ', 2))
    1:         x('1*2\n', (1, 2), sep='*')
    1:         x('1 s', (1, 's'), end='')
    1:         x('a\nb\n', ('a', 'b'), sep='\n')
    1:         x('1.01', (1.0, 1), sep='', end='')
    1:         x('1*a*1.3+', (1, 'a', 1.3), sep='*', end='+')
    1:         x('a\n\nb\n', ('a\n', 'b'), sep='\n')
    1:         x('\0+ +\0\n', ('\0', ' ', '\0'), sep='+')
       
    1:         x('a\n b\n', ('a\n', 'b'))
    1:         x('a\n b\n', ('a\n', 'b'), sep=None)
    1:         x('a\n b\n', ('a\n', 'b'), end=None)
    1:         x('a\n b\n', ('a\n', 'b'), sep=None, end=None)
       
    1:         x('*\n', (ClassWith__str__('*'),))
    1:         x('abc 1\n', (ClassWith__str__('abc'), 1))
       
               # 2.x unicode tests
    1:         x(u'1 2\n', ('1', u'2'))
    1:         x(u'u\1234\n', (u'u\1234',))
    1:         x(u'  abc 1\n', (' ', ClassWith__str__(u'abc'), 1))
       
               # errors
    1:         self.assertRaises(TypeError, print, '', sep=3)
    1:         self.assertRaises(TypeError, print, '', end=3)
    1:         self.assertRaises(AttributeError, print, '', file='')
       
    1:     def test_mixed_args(self):
               # If a unicode arg is passed, sep and end should be unicode, too.
    2:         class Recorder(object):
       
    1:             def __init__(self, must_be_unicode):
    2:                 self.buf = []
    2:                 self.force_unicode = must_be_unicode
       
    1:             def write(self, what):
   11:                 if self.force_unicode and not isinstance(what, unicode):
>>>>>>                     raise AssertionError("{0!r} is not unicode".format(what))
   11:                 self.buf.append(what)
       
    1:         buf = Recorder(True)
    1:         print(u'hi', file=buf)
    1:         self.assertEqual(u''.join(buf.buf), 'hi\n')
    1:         del buf.buf[:]
    1:         print(u'hi', u'nothing', file=buf)
    1:         self.assertEqual(u''.join(buf.buf), 'hi nothing\n')
    1:         buf = Recorder(False)
    1:         print('hi', 'bye', end=u'\n', file=buf)
    1:         self.assertIsInstance(buf.buf[1], unicode)
    1:         self.assertIsInstance(buf.buf[3], unicode)
    1:         del buf.buf[:]
    1:         print(sep=u'x', file=buf)
    1:         self.assertIsInstance(buf.buf[-1], unicode)
       
       
    1: def test_main():
    1:     test_support.run_unittest(TestPrint)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
