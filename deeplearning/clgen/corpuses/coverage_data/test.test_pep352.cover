    2: import unittest
    2: import __builtin__
    2: import exceptions
    2: import warnings
    2: from test.test_support import run_unittest, check_warnings
    2: import os
    2: import sys
    2: from platform import system as platform_system
       
    2: DEPRECATION_WARNINGS = ["BaseException.message has been deprecated"]
       
    2: if sys.py3kwarning:
>>>>>>     DEPRECATION_WARNINGS.extend(
>>>>>>         ["exceptions must derive from BaseException",
>>>>>>          "catching classes that don't inherit from BaseException is not allowed",
>>>>>>          "__get(item|slice)__ not supported for exception classes"])
       
    4: _deprecations = [(msg, DeprecationWarning) for msg in DEPRECATION_WARNINGS]
       
       # Silence Py3k and other deprecation warnings
    2: def ignore_deprecation_warnings(func):
           """Ignore the known DeprecationWarnings."""
   13:     def wrapper(*args, **kw):
   49:         with check_warnings(*_deprecations, quiet=True):
   49:             return func(*args, **kw)
   13:     return wrapper
       
    4: class ExceptionClassTests(unittest.TestCase):
       
           """Tests for anything relating to exception objects themselves (e.g.,
    2:     inheritance hierarchy)"""
       
    2:     def test_builtins_new_style(self):
    1:         self.assertTrue(issubclass(Exception, object))
       
    2:     @ignore_deprecation_warnings
           def verify_instance_interface(self, ins):
  264:         for attr in ("args", "message", "__str__", "__repr__", "__getitem__"):
  220:             self.assertTrue(hasattr(ins, attr),
  220:                             "%s missing %s attribute" %
  220:                             (ins.__class__.__name__, attr))
       
    2:     def test_inheritance(self):
               # Make sure the inheritance hierarchy matches the documentation
   53:         exc_set = set(x for x in dir(exceptions) if not x.startswith('_'))
    1:         inheritance_tree = open(os.path.join(os.path.split(__file__)[0],
    1:                                                 'exception_hierarchy.txt'))
    1:         try:
    1:             superclass_name = inheritance_tree.readline().rstrip()
    1:             try:
    1:                 last_exc = getattr(__builtin__, superclass_name)
>>>>>>             except AttributeError:
>>>>>>                 self.fail("base class %s not a built-in" % superclass_name)
    1:             self.assertIn(superclass_name, exc_set)
    1:             exc_set.discard(superclass_name)
    1:             superclasses = []  # Loop will insert base exception
    1:             last_depth = 0
   50:             for exc_line in inheritance_tree:
   49:                 exc_line = exc_line.rstrip()
   49:                 depth = exc_line.rindex('-')
   49:                 exc_name = exc_line[depth+2:]  # Slice past space
   49:                 if '(' in exc_name:
    2:                     paren_index = exc_name.index('(')
    2:                     platform_name = exc_name[paren_index+1:-1]
    2:                     exc_name = exc_name[:paren_index-1]  # Slice off space
    2:                     if platform_system() != platform_name:
    2:                         exc_set.discard(exc_name)
    2:                         continue
   47:                 if '[' in exc_name:
>>>>>>                     left_bracket = exc_name.index('[')
>>>>>>                     exc_name = exc_name[:left_bracket-1]  # cover space
   47:                 try:
   47:                     exc = getattr(__builtin__, exc_name)
>>>>>>                 except AttributeError:
>>>>>>                     self.fail("%s not a built-in exception" % exc_name)
   47:                 if last_depth < depth:
   13:                     superclasses.append((last_depth, last_exc))
   34:                 elif last_depth > depth:
   19:                     while superclasses[-1][0] >= depth:
   11:                         superclasses.pop()
   47:                 self.assertTrue(issubclass(exc, superclasses[-1][1]),
   47:                 "%s is not a subclass of %s" % (exc.__name__,
   47:                     superclasses[-1][1].__name__))
   47:                 try:  # Some exceptions require arguments; just skip them
   47:                     self.verify_instance_interface(exc())
    3:                 except TypeError:
    3:                     pass
   47:                 self.assertIn(exc_name, exc_set)
   47:                 exc_set.discard(exc_name)
   47:                 last_exc = exc
   47:                 last_depth = depth
               finally:
    1:             inheritance_tree.close()
    1:         self.assertEqual(len(exc_set), 0, "%s not accounted for" % exc_set)
       
           interface_tests = ("length", "args", "message", "str", "unicode", "repr",
    2:             "indexing")
       
    2:     def interface_test_driver(self, results):
   24:         for test_name, (given, expected) in zip(self.interface_tests, results):
   21:             self.assertEqual(given, expected, "%s: %s != %s" % (test_name,
   21:                 given, expected))
       
    2:     @ignore_deprecation_warnings
           def test_interface_single_arg(self):
               # Make sure interface works properly when given a single argument
    1:         arg = "spam"
    1:         exc = Exception(arg)
    1:         results = ([len(exc.args), 1], [exc.args[0], arg], [exc.message, arg],
    1:                    [str(exc), str(arg)], [unicode(exc), unicode(arg)],
    1:                    [repr(exc), exc.__class__.__name__ + repr(exc.args)],
    1:                    [exc[0], arg])
    1:         self.interface_test_driver(results)
       
    2:     @ignore_deprecation_warnings
           def test_interface_multi_arg(self):
               # Make sure interface correct when multiple arguments given
    1:         arg_count = 3
    1:         args = tuple(range(arg_count))
    1:         exc = Exception(*args)
    1:         results = ([len(exc.args), arg_count], [exc.args, args],
    1:                    [exc.message, ''], [str(exc), str(args)],
    1:                    [unicode(exc), unicode(args)],
    1:                    [repr(exc), exc.__class__.__name__ + repr(exc.args)],
    1:                    [exc[-1], args[-1]])
    1:         self.interface_test_driver(results)
       
    2:     @ignore_deprecation_warnings
           def test_interface_no_arg(self):
               # Make sure that with no args that interface is correct
    1:         exc = Exception()
    1:         results = ([len(exc.args), 0], [exc.args, tuple()],
    1:                    [exc.message, ''],
    1:                    [str(exc), ''], [unicode(exc), u''],
    1:                    [repr(exc), exc.__class__.__name__ + '()'], [True, True])
    1:         self.interface_test_driver(results)
       
       
    2:     def test_message_deprecation(self):
               # As of Python 2.6, BaseException.message is deprecated.
    1:         with check_warnings(("", DeprecationWarning)):
    1:             BaseException().message
       
       
    4: class UsageTests(unittest.TestCase):
       
    2:     """Test usage of exceptions"""
       
    2:     def raise_fails(self, object_):
               """Make sure that raising 'object_' triggers a TypeError."""
    3:         try:
    3:             raise object_
    3:         except TypeError:
    3:             return  # What is expected.
>>>>>>         self.fail("TypeError expected for raising %s" % type(object_))
       
    2:     def catch_fails(self, object_):
               """Catching 'object_' should raise a TypeError."""
>>>>>>         try:
>>>>>>             try:
>>>>>>                 raise StandardError
>>>>>>             except object_:
>>>>>>                 pass
>>>>>>         except TypeError:
>>>>>>             pass
>>>>>>         except StandardError:
>>>>>>             self.fail("TypeError expected when catching %s" % type(object_))
       
>>>>>>         try:
>>>>>>             try:
>>>>>>                 raise StandardError
>>>>>>             except (object_,):
>>>>>>                 pass
>>>>>>         except TypeError:
>>>>>>             return
>>>>>>         except StandardError:
>>>>>>             self.fail("TypeError expected when catching %s as specified in a "
>>>>>>                         "tuple" % type(object_))
       
    2:     @ignore_deprecation_warnings
           def test_raise_classic(self):
               # Raising a classic class is okay (for now).
    2:         class ClassicClass:
    1:             pass
    1:         try:
    1:             raise ClassicClass
    1:         except ClassicClass:
    1:             pass
>>>>>>         except:
>>>>>>             self.fail("unable to raise classic class")
    1:         try:
    1:             raise ClassicClass()
    1:         except ClassicClass:
    1:             pass
>>>>>>         except:
>>>>>>             self.fail("unable to raise classic class instance")
       
    2:     def test_raise_new_style_non_exception(self):
               # You cannot raise a new-style class that does not inherit from
               # BaseException; the ability was not possible until BaseException's
               # introduction so no need to support new-style objects that do not
               # inherit from it.
    2:         class NewStyleClass(object):
    1:             pass
    1:         self.raise_fails(NewStyleClass)
    1:         self.raise_fails(NewStyleClass())
       
    2:     def test_raise_string(self):
               # Raising a string raises TypeError.
    1:         self.raise_fails("spam")
       
    2:     def test_catch_string(self):
               # Catching a string should trigger a DeprecationWarning.
    1:         with warnings.catch_warnings():
    1:             warnings.resetwarnings()
    1:             warnings.filterwarnings("error")
    1:             str_exc = "spam"
    1:             with self.assertRaises(DeprecationWarning):
    1:                 try:
    1:                     raise StandardError
    1:                 except str_exc:
>>>>>>                     pass
       
                   # Make sure that even if the string exception is listed in a tuple
                   # that a warning is raised.
    1:             with self.assertRaises(DeprecationWarning):
    1:                 try:
    1:                     raise StandardError
    1:                 except (AssertionError, str_exc):
>>>>>>                     pass
       
       
    2: def test_main():
    1:     run_unittest(ExceptionClassTests, UsageTests)
       
       
       
    2: if __name__ == '__main__':
>>>>>>     test_main()
