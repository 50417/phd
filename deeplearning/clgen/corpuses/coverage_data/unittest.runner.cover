       """Running tests"""
       
>>>>>> import sys
>>>>>> import time
       
>>>>>> from . import result
>>>>>> from .signals import registerResult
       
>>>>>> __unittest = True
       
       
>>>>>> class _WritelnDecorator(object):
           """Used to decorate file-like objects with a handy 'writeln' method"""
>>>>>>     def __init__(self,stream):
   31:         self.stream = stream
       
>>>>>>     def __getattr__(self, attr):
  228:         if attr in ('stream', '__getstate__'):
    6:             raise AttributeError(attr)
  222:         return getattr(self.stream,attr)
       
>>>>>>     def writeln(self, arg=None):
   97:         if arg:
   59:             self.write(arg)
   97:         self.write('\n') # text-mode streams translate to \r\n if needed
       
       
>>>>>> class TextTestResult(result.TestResult):
           """A test result class that can print formatted text results to a stream.
       
           Used by TextTestRunner.
           """
>>>>>>     separator1 = '=' * 70
>>>>>>     separator2 = '-' * 70
       
>>>>>>     def __init__(self, stream, descriptions, verbosity):
   12:         super(TextTestResult, self).__init__(stream, descriptions, verbosity)
   12:         self.stream = stream
   12:         self.showAll = verbosity > 1
   12:         self.dots = verbosity == 1
   12:         self.descriptions = descriptions
       
>>>>>>     def getDescription(self, test):
    6:         doc_first_line = test.shortDescription()
    6:         if self.descriptions and doc_first_line:
    2:             return '\n'.join((str(test), doc_first_line))
               else:
    4:             return str(test)
       
>>>>>>     def startTest(self, test):
    6:         super(TextTestResult, self).startTest(test)
    6:         if self.showAll:
>>>>>>             self.stream.write(self.getDescription(test))
>>>>>>             self.stream.write(" ... ")
>>>>>>             self.stream.flush()
       
>>>>>>     def addSuccess(self, test):
    3:         super(TextTestResult, self).addSuccess(test)
    3:         if self.showAll:
>>>>>>             self.stream.writeln("ok")
    3:         elif self.dots:
    3:             self.stream.write('.')
    3:             self.stream.flush()
       
>>>>>>     def addError(self, test, err):
>>>>>>         super(TextTestResult, self).addError(test, err)
>>>>>>         if self.showAll:
>>>>>>             self.stream.writeln("ERROR")
>>>>>>         elif self.dots:
>>>>>>             self.stream.write('E')
>>>>>>             self.stream.flush()
       
>>>>>>     def addFailure(self, test, err):
    3:         super(TextTestResult, self).addFailure(test, err)
    3:         if self.showAll:
>>>>>>             self.stream.writeln("FAIL")
    3:         elif self.dots:
    3:             self.stream.write('F')
    3:             self.stream.flush()
       
>>>>>>     def addSkip(self, test, reason):
>>>>>>         super(TextTestResult, self).addSkip(test, reason)
>>>>>>         if self.showAll:
>>>>>>             self.stream.writeln("skipped {0!r}".format(reason))
>>>>>>         elif self.dots:
>>>>>>             self.stream.write("s")
>>>>>>             self.stream.flush()
       
>>>>>>     def addExpectedFailure(self, test, err):
>>>>>>         super(TextTestResult, self).addExpectedFailure(test, err)
>>>>>>         if self.showAll:
>>>>>>             self.stream.writeln("expected failure")
>>>>>>         elif self.dots:
>>>>>>             self.stream.write("x")
>>>>>>             self.stream.flush()
       
>>>>>>     def addUnexpectedSuccess(self, test):
>>>>>>         super(TextTestResult, self).addUnexpectedSuccess(test)
>>>>>>         if self.showAll:
>>>>>>             self.stream.writeln("unexpected success")
>>>>>>         elif self.dots:
>>>>>>             self.stream.write("u")
>>>>>>             self.stream.flush()
       
>>>>>>     def printErrors(self):
    8:         if self.dots or self.showAll:
    8:             self.stream.writeln()
    8:         self.printErrorList('ERROR', self.errors)
    8:         self.printErrorList('FAIL', self.failures)
       
>>>>>>     def printErrorList(self, flavour, errors):
   19:         for test, err in errors:
    3:             self.stream.writeln(self.separator1)
    3:             self.stream.writeln("%s: %s" % (flavour,self.getDescription(test)))
    3:             self.stream.writeln(self.separator2)
    3:             self.stream.writeln("%s" % err)
       
       
>>>>>> class TextTestRunner(object):
           """A test runner class that displays results in textual form.
       
           It prints out the names of tests as they are run, errors as they
           occur, and a summary of the results at the end of the test run.
           """
>>>>>>     resultclass = TextTestResult
       
>>>>>>     def __init__(self, stream=sys.stderr, descriptions=True, verbosity=1,
>>>>>>                  failfast=False, buffer=False, resultclass=None):
   31:         self.stream = _WritelnDecorator(stream)
   31:         self.descriptions = descriptions
   31:         self.verbosity = verbosity
   31:         self.failfast = failfast
   31:         self.buffer = buffer
   31:         if resultclass is not None:
   17:             self.resultclass = resultclass
       
>>>>>>     def _makeResult(self):
   25:         return self.resultclass(self.stream, self.descriptions, self.verbosity)
       
>>>>>>     def run(self, test):
               "Run the given test case or test suite."
   28:         result = self._makeResult()
   28:         registerResult(result)
   28:         result.failfast = self.failfast
   28:         result.buffer = self.buffer
   28:         startTime = time.time()
   28:         startTestRun = getattr(result, 'startTestRun', None)
   28:         if startTestRun is not None:
   27:             startTestRun()
   28:         try:
   28:             test(result)
               finally:
   28:             stopTestRun = getattr(result, 'stopTestRun', None)
   28:             if stopTestRun is not None:
   27:                 stopTestRun()
   28:         stopTime = time.time()
   28:         timeTaken = stopTime - startTime
   28:         result.printErrors()
   28:         if hasattr(result, 'separator2'):
   10:             self.stream.writeln(result.separator2)
   28:         run = result.testsRun
   28:         self.stream.writeln("Ran %d test%s in %.3fs" %
   28:                             (run, run != 1 and "s" or "", timeTaken))
   28:         self.stream.writeln()
       
   28:         expectedFails = unexpectedSuccesses = skipped = 0
   28:         try:
   28:             results = map(len, (result.expectedFailures,
   27:                                 result.unexpectedSuccesses,
   27:                                 result.skipped))
    1:         except AttributeError:
    1:             pass
               else:
   27:             expectedFails, unexpectedSuccesses, skipped = results
       
   28:         infos = []
   28:         if not result.wasSuccessful():
    8:             self.stream.write("FAILED")
    8:             failed, errored = map(len, (result.failures, result.errors))
    8:             if failed:
    3:                 infos.append("failures=%d" % failed)
    8:             if errored:
    5:                 infos.append("errors=%d" % errored)
               else:
   20:             self.stream.write("OK")
   28:         if skipped:
    3:             infos.append("skipped=%d" % skipped)
   28:         if expectedFails:
>>>>>>             infos.append("expected failures=%d" % expectedFails)
   28:         if unexpectedSuccesses:
>>>>>>             infos.append("unexpected successes=%d" % unexpectedSuccesses)
   28:         if infos:
   11:             self.stream.writeln(" (%s)" % (", ".join(infos),))
               else:
   17:             self.stream.write("\n")
   28:         return result
