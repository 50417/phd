    1: """Unit tests for the copy module."""
       
    1: import copy
    1: import copy_reg
    1: import weakref
       
    1: import unittest
    1: from test import test_support
       
    2: class TestCopy(unittest.TestCase):
       
           # Attempt full line coverage of copy.py from top to bottom
       
    1:     def test_exceptions(self):
    1:         self.assertTrue(copy.Error is copy.error)
    1:         self.assertTrue(issubclass(copy.Error, Exception))
       
           # The copy() method
       
    1:     def test_copy_basic(self):
    1:         x = 42
    1:         y = copy.copy(x)
    1:         self.assertEqual(x, y)
       
    1:     def test_copy_copy(self):
    2:         class C(object):
    1:             def __init__(self, foo):
    2:                 self.foo = foo
    1:             def __copy__(self):
    1:                 return C(self.foo)
    1:         x = C(42)
    1:         y = copy.copy(x)
    1:         self.assertEqual(y.__class__, x.__class__)
    1:         self.assertEqual(y.foo, x.foo)
       
    1:     def test_copy_registry(self):
    2:         class C(object):
    1:             def __new__(cls, foo):
    2:                 obj = object.__new__(cls)
    2:                 obj.foo = foo
    2:                 return obj
    1:         def pickle_C(obj):
    1:             return (C, (obj.foo,))
    1:         x = C(42)
    1:         self.assertRaises(TypeError, copy.copy, x)
    1:         copy_reg.pickle(C, pickle_C, C)
    1:         y = copy.copy(x)
       
    1:     def test_copy_reduce_ex(self):
    2:         class C(object):
    1:             def __reduce_ex__(self, proto):
    1:                 return ""
    1:             def __reduce__(self):
>>>>>>                 raise test_support.TestFailed, "shouldn't call this"
    1:         x = C()
    1:         y = copy.copy(x)
    1:         self.assertTrue(y is x)
       
    1:     def test_copy_reduce(self):
    2:         class C(object):
    1:             def __reduce__(self):
    1:                 return ""
    1:         x = C()
    1:         y = copy.copy(x)
    1:         self.assertTrue(y is x)
       
    1:     def test_copy_cant(self):
    2:         class C(object):
    1:             def __getattribute__(self, name):
    2:                 if name.startswith("__reduce"):
    2:                     raise AttributeError, name
>>>>>>                 return object.__getattribute__(self, name)
    1:         x = C()
    1:         self.assertRaises(copy.Error, copy.copy, x)
       
           # Type-specific _copy_xxx() methods
       
    1:     def test_copy_atomic(self):
    2:         class Classic:
    1:             pass
    2:         class NewStyle(object):
    1:             pass
    1:         def f():
>>>>>>             pass
    1:         tests = [None, Ellipsis,
    1:                  42, 2L**100, 3.14, True, False, 1j,
    1:                  "hello", u"hello\u1234", f.func_code,
    1:                  NewStyle, xrange(10), Classic, max]
   16:         for x in tests:
   15:             self.assertTrue(copy.copy(x) is x, repr(x))
       
    1:     def test_copy_list(self):
    1:         x = [1, 2, 3]
    1:         y = copy.copy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertIsNot(y, x)
    1:         x = []
    1:         y = copy.copy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertIsNot(y, x)
       
    1:     def test_copy_tuple(self):
    1:         x = (1, 2, 3)
    1:         self.assertIs(copy.copy(x), x)
    1:         x = ()
    1:         self.assertIs(copy.copy(x), x)
    1:         x = (1, 2, 3, [])
    1:         self.assertIs(copy.copy(x), x)
       
    1:     def test_copy_dict(self):
    1:         x = {"foo": 1, "bar": 2}
    1:         y = copy.copy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertIsNot(y, x)
    1:         x = {}
    1:         y = copy.copy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertIsNot(y, x)
       
    1:     def test_copy_set(self):
    1:         x = {1, 2, 3}
    1:         y = copy.copy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertIsNot(y, x)
    1:         x = set()
    1:         y = copy.copy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertIsNot(y, x)
       
    1:     def test_copy_frozenset(self):
    1:         x = frozenset({1, 2, 3})
    1:         self.assertIs(copy.copy(x), x)
    1:         x = frozenset()
    1:         self.assertIs(copy.copy(x), x)
       
    1:     def test_copy_bytearray(self):
    1:         x = bytearray(b'abc')
    1:         y = copy.copy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertIsNot(y, x)
    1:         x = bytearray()
    1:         y = copy.copy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertIsNot(y, x)
       
    1:     def test_copy_inst_vanilla(self):
    2:         class C:
    1:             def __init__(self, foo):
    1:                 self.foo = foo
    1:             def __cmp__(self, other):
    1:                 return cmp(self.foo, other.foo)
    1:         x = C(42)
    1:         self.assertEqual(copy.copy(x), x)
       
    1:     def test_copy_inst_copy(self):
    2:         class C:
    1:             def __init__(self, foo):
    2:                 self.foo = foo
    1:             def __copy__(self):
    1:                 return C(self.foo)
    1:             def __cmp__(self, other):
    1:                 return cmp(self.foo, other.foo)
    1:         x = C(42)
    1:         self.assertEqual(copy.copy(x), x)
       
    1:     def test_copy_inst_getinitargs(self):
    2:         class C:
    1:             def __init__(self, foo):
    2:                 self.foo = foo
    1:             def __getinitargs__(self):
    1:                 return (self.foo,)
    1:             def __cmp__(self, other):
    1:                 return cmp(self.foo, other.foo)
    1:         x = C(42)
    1:         self.assertEqual(copy.copy(x), x)
       
    1:     def test_copy_inst_getstate(self):
    2:         class C:
    1:             def __init__(self, foo):
    1:                 self.foo = foo
    1:             def __getstate__(self):
    1:                 return {"foo": self.foo}
    1:             def __cmp__(self, other):
    1:                 return cmp(self.foo, other.foo)
    1:         x = C(42)
    1:         self.assertEqual(copy.copy(x), x)
       
    1:     def test_copy_inst_setstate(self):
    2:         class C:
    1:             def __init__(self, foo):
    1:                 self.foo = foo
    1:             def __setstate__(self, state):
    1:                 self.foo = state["foo"]
    1:             def __cmp__(self, other):
    1:                 return cmp(self.foo, other.foo)
    1:         x = C(42)
    1:         self.assertEqual(copy.copy(x), x)
       
    1:     def test_copy_inst_getstate_setstate(self):
    2:         class C:
    1:             def __init__(self, foo):
    2:                 self.foo = foo
    1:             def __getstate__(self):
    2:                 return self.foo
    1:             def __setstate__(self, state):
    2:                 self.foo = state
    1:             def __cmp__(self, other):
    2:                 return cmp(self.foo, other.foo)
    1:         x = C(42)
    1:         self.assertEqual(copy.copy(x), x)
               # State with boolean value is false (issue #25718)
    1:         x = C(0.0)
    1:         self.assertEqual(copy.copy(x), x)
       
           # The deepcopy() method
       
    1:     def test_deepcopy_basic(self):
    1:         x = 42
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(y, x)
       
    1:     def test_deepcopy_memo(self):
               # Tests of reflexive objects are under type-specific sections below.
               # This tests only repetitions of objects.
    1:         x = []
    1:         x = [x, x]
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertTrue(y is not x)
    1:         self.assertTrue(y[0] is not x[0])
    1:         self.assertTrue(y[0] is y[1])
       
    1:     def test_deepcopy_issubclass(self):
               # XXX Note: there's no way to test the TypeError coming out of
               # issubclass() -- this can only happen when an extension
               # module defines a "type" that doesn't formally inherit from
               # type.
    2:         class Meta(type):
    1:             pass
    2:         class C:
    1:             __metaclass__ = Meta
    1:         self.assertEqual(copy.deepcopy(C), C)
       
    1:     def test_deepcopy_deepcopy(self):
    2:         class C(object):
    1:             def __init__(self, foo):
    2:                 self.foo = foo
    1:             def __deepcopy__(self, memo=None):
    1:                 return C(self.foo)
    1:         x = C(42)
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(y.__class__, x.__class__)
    1:         self.assertEqual(y.foo, x.foo)
       
    1:     def test_deepcopy_registry(self):
    2:         class C(object):
    1:             def __new__(cls, foo):
    2:                 obj = object.__new__(cls)
    2:                 obj.foo = foo
    2:                 return obj
    1:         def pickle_C(obj):
    1:             return (C, (obj.foo,))
    1:         x = C(42)
    1:         self.assertRaises(TypeError, copy.deepcopy, x)
    1:         copy_reg.pickle(C, pickle_C, C)
    1:         y = copy.deepcopy(x)
       
    1:     def test_deepcopy_reduce_ex(self):
    2:         class C(object):
    1:             def __reduce_ex__(self, proto):
    1:                 return ""
    1:             def __reduce__(self):
>>>>>>                 raise test_support.TestFailed, "shouldn't call this"
    1:         x = C()
    1:         y = copy.deepcopy(x)
    1:         self.assertTrue(y is x)
       
    1:     def test_deepcopy_reduce(self):
    2:         class C(object):
    1:             def __reduce__(self):
    1:                 return ""
    1:         x = C()
    1:         y = copy.deepcopy(x)
    1:         self.assertTrue(y is x)
       
    1:     def test_deepcopy_cant(self):
    2:         class C(object):
    1:             def __getattribute__(self, name):
    3:                 if name.startswith("__reduce"):
    2:                     raise AttributeError, name
    1:                 return object.__getattribute__(self, name)
    1:         x = C()
    1:         self.assertRaises(copy.Error, copy.deepcopy, x)
       
           # Type-specific _deepcopy_xxx() methods
       
    1:     def test_deepcopy_atomic(self):
    2:         class Classic:
    1:             pass
    2:         class NewStyle(object):
    1:             pass
    1:         def f():
>>>>>>             pass
    1:         tests = [None, 42, 2L**100, 3.14, True, False, 1j,
    1:                  "hello", u"hello\u1234", f.func_code,
    1:                  NewStyle, xrange(10), Classic, max]
   15:         for x in tests:
   14:             self.assertTrue(copy.deepcopy(x) is x, repr(x))
       
    1:     def test_deepcopy_list(self):
    1:         x = [[1, 2], 3]
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertTrue(x is not y)
    1:         self.assertTrue(x[0] is not y[0])
       
    1:     def test_deepcopy_reflexive_list(self):
    1:         x = []
    1:         x.append(x)
    1:         y = copy.deepcopy(x)
    1:         self.assertRaises(RuntimeError, cmp, y, x)
    1:         self.assertTrue(y is not x)
    1:         self.assertTrue(y[0] is y)
    1:         self.assertEqual(len(y), 1)
       
    1:     def test_deepcopy_tuple(self):
    1:         x = ([1, 2], 3)
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertTrue(x is not y)
    1:         self.assertTrue(x[0] is not y[0])
       
    1:     def test_deepcopy_reflexive_tuple(self):
    1:         x = ([],)
    1:         x[0].append(x)
    1:         y = copy.deepcopy(x)
    1:         self.assertRaises(RuntimeError, cmp, y, x)
    1:         self.assertTrue(y is not x)
    1:         self.assertTrue(y[0] is not x[0])
    1:         self.assertTrue(y[0][0] is y)
       
    1:     def test_deepcopy_dict(self):
    1:         x = {"foo": [1, 2], "bar": 3}
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertTrue(x is not y)
    1:         self.assertTrue(x["foo"] is not y["foo"])
       
    1:     def test_deepcopy_reflexive_dict(self):
    1:         x = {}
    1:         x['foo'] = x
    1:         y = copy.deepcopy(x)
    1:         self.assertRaises(RuntimeError, cmp, y, x)
    1:         self.assertTrue(y is not x)
    1:         self.assertTrue(y['foo'] is y)
    1:         self.assertEqual(len(y), 1)
       
    1:     def test_deepcopy_keepalive(self):
    1:         memo = {}
    1:         x = 42
    1:         y = copy.deepcopy(x, memo)
    1:         self.assertTrue(memo[id(x)] is x)
       
    1:     def test_deepcopy_inst_vanilla(self):
    2:         class C:
    1:             def __init__(self, foo):
    1:                 self.foo = foo
    1:             def __cmp__(self, other):
    1:                 return cmp(self.foo, other.foo)
    1:         x = C([42])
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertTrue(y.foo is not x.foo)
       
    1:     def test_deepcopy_inst_deepcopy(self):
    2:         class C:
    1:             def __init__(self, foo):
    2:                 self.foo = foo
    1:             def __deepcopy__(self, memo):
    1:                 return C(copy.deepcopy(self.foo, memo))
    1:             def __cmp__(self, other):
    1:                 return cmp(self.foo, other.foo)
    1:         x = C([42])
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertTrue(y is not x)
    1:         self.assertTrue(y.foo is not x.foo)
       
    1:     def test_deepcopy_inst_getinitargs(self):
    2:         class C:
    1:             def __init__(self, foo):
    2:                 self.foo = foo
    1:             def __getinitargs__(self):
    1:                 return (self.foo,)
    1:             def __cmp__(self, other):
    1:                 return cmp(self.foo, other.foo)
    1:         x = C([42])
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertTrue(y is not x)
    1:         self.assertTrue(y.foo is not x.foo)
       
    1:     def test_deepcopy_inst_getstate(self):
    2:         class C:
    1:             def __init__(self, foo):
    1:                 self.foo = foo
    1:             def __getstate__(self):
    1:                 return {"foo": self.foo}
    1:             def __cmp__(self, other):
    1:                 return cmp(self.foo, other.foo)
    1:         x = C([42])
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertTrue(y is not x)
    1:         self.assertTrue(y.foo is not x.foo)
       
    1:     def test_deepcopy_inst_setstate(self):
    2:         class C:
    1:             def __init__(self, foo):
    1:                 self.foo = foo
    1:             def __setstate__(self, state):
    1:                 self.foo = state["foo"]
    1:             def __cmp__(self, other):
    1:                 return cmp(self.foo, other.foo)
    1:         x = C([42])
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertTrue(y is not x)
    1:         self.assertTrue(y.foo is not x.foo)
       
    1:     def test_deepcopy_inst_getstate_setstate(self):
    2:         class C:
    1:             def __init__(self, foo):
    2:                 self.foo = foo
    1:             def __getstate__(self):
    2:                 return self.foo
    1:             def __setstate__(self, state):
    2:                 self.foo = state
    1:             def __cmp__(self, other):
    2:                 return cmp(self.foo, other.foo)
    1:         x = C([42])
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertIsNot(y, x)
    1:         self.assertIsNot(y.foo, x.foo)
               # State with boolean value is false (issue #25718)
    1:         x = C([])
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertTrue(y is not x)
    1:         self.assertTrue(y.foo is not x.foo)
       
    1:     def test_deepcopy_reflexive_inst(self):
    2:         class C:
    1:             pass
    1:         x = C()
    1:         x.foo = x
    1:         y = copy.deepcopy(x)
    1:         self.assertTrue(y is not x)
    1:         self.assertTrue(y.foo is y)
       
           # _reconstruct()
       
    1:     def test_reconstruct_string(self):
    2:         class C(object):
    1:             def __reduce__(self):
    2:                 return ""
    1:         x = C()
    1:         y = copy.copy(x)
    1:         self.assertTrue(y is x)
    1:         y = copy.deepcopy(x)
    1:         self.assertTrue(y is x)
       
    1:     def test_reconstruct_nostate(self):
    2:         class C(object):
    1:             def __reduce__(self):
    2:                 return (C, ())
    1:         x = C()
    1:         x.foo = 42
    1:         y = copy.copy(x)
    1:         self.assertTrue(y.__class__ is x.__class__)
    1:         y = copy.deepcopy(x)
    1:         self.assertTrue(y.__class__ is x.__class__)
       
    1:     def test_reconstruct_state(self):
    2:         class C(object):
    1:             def __reduce__(self):
    2:                 return (C, (), self.__dict__)
    1:             def __cmp__(self, other):
    2:                 return cmp(self.__dict__, other.__dict__)
    1:             __hash__ = None # Silence Py3k warning
    1:         x = C()
    1:         x.foo = [42]
    1:         y = copy.copy(x)
    1:         self.assertEqual(y, x)
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertTrue(y.foo is not x.foo)
       
    1:     def test_reconstruct_state_setstate(self):
    2:         class C(object):
    1:             def __reduce__(self):
    2:                 return (C, (), self.__dict__)
    1:             def __setstate__(self, state):
    2:                 self.__dict__.update(state)
    1:             def __cmp__(self, other):
    2:                 return cmp(self.__dict__, other.__dict__)
    1:             __hash__ = None # Silence Py3k warning
    1:         x = C()
    1:         x.foo = [42]
    1:         y = copy.copy(x)
    1:         self.assertEqual(y, x)
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(y, x)
    1:         self.assertTrue(y.foo is not x.foo)
       
    1:     def test_reconstruct_reflexive(self):
    2:         class C(object):
    1:             pass
    1:         x = C()
    1:         x.foo = x
    1:         y = copy.deepcopy(x)
    1:         self.assertTrue(y is not x)
    1:         self.assertTrue(y.foo is y)
       
           # Additions for Python 2.3 and pickle protocol 2
       
    1:     def test_reduce_4tuple(self):
    2:         class C(list):
    1:             def __reduce__(self):
    2:                 return (C, (), self.__dict__, iter(self))
    1:             def __cmp__(self, other):
>>>>>>                 return (cmp(list(self), list(other)) or
>>>>>>                         cmp(self.__dict__, other.__dict__))
    1:             __hash__ = None # Silence Py3k warning
    1:         x = C([[1, 2], 3])
    1:         y = copy.copy(x)
    1:         self.assertEqual(x, y)
    1:         self.assertTrue(x is not y)
    1:         self.assertTrue(x[0] is y[0])
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(x, y)
    1:         self.assertTrue(x is not y)
    1:         self.assertTrue(x[0] is not y[0])
       
    1:     def test_reduce_5tuple(self):
    2:         class C(dict):
    1:             def __reduce__(self):
    2:                 return (C, (), self.__dict__, None, self.iteritems())
    1:             def __cmp__(self, other):
>>>>>>                 return (cmp(dict(self), list(dict)) or
>>>>>>                         cmp(self.__dict__, other.__dict__))
    1:             __hash__ = None # Silence Py3k warning
    1:         x = C([("foo", [1, 2]), ("bar", 3)])
    1:         y = copy.copy(x)
    1:         self.assertEqual(x, y)
    1:         self.assertTrue(x is not y)
    1:         self.assertTrue(x["foo"] is y["foo"])
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(x, y)
    1:         self.assertTrue(x is not y)
    1:         self.assertTrue(x["foo"] is not y["foo"])
       
    1:     def test_copy_slots(self):
    2:         class C(object):
    1:             __slots__ = ["foo"]
    1:         x = C()
    1:         x.foo = [42]
    1:         y = copy.copy(x)
    1:         self.assertTrue(x.foo is y.foo)
       
    1:     def test_deepcopy_slots(self):
    2:         class C(object):
    1:             __slots__ = ["foo"]
    1:         x = C()
    1:         x.foo = [42]
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(x.foo, y.foo)
    1:         self.assertTrue(x.foo is not y.foo)
       
    1:     def test_deepcopy_dict_subclass(self):
    2:         class C(dict):
    1:             def __init__(self, d=None):
    1:                 if not d:
>>>>>>                     d = {}
    1:                 self._keys = list(d.keys())
    1:                 dict.__init__(self, d)
    1:             def __setitem__(self, key, item):
    2:                 dict.__setitem__(self, key, item)
    2:                 if key not in self._keys:
    1:                     self._keys.append(key)
    1:         x = C(d={'foo':0})
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(x, y)
    1:         self.assertEqual(x._keys, y._keys)
    1:         self.assertTrue(x is not y)
    1:         x['bar'] = 1
    1:         self.assertNotEqual(x, y)
    1:         self.assertNotEqual(x._keys, y._keys)
       
    1:     def test_copy_list_subclass(self):
    2:         class C(list):
    1:             pass
    1:         x = C([[1, 2], 3])
    1:         x.foo = [4, 5]
    1:         y = copy.copy(x)
    1:         self.assertEqual(list(x), list(y))
    1:         self.assertEqual(x.foo, y.foo)
    1:         self.assertTrue(x[0] is y[0])
    1:         self.assertTrue(x.foo is y.foo)
       
    1:     def test_deepcopy_list_subclass(self):
    2:         class C(list):
    1:             pass
    1:         x = C([[1, 2], 3])
    1:         x.foo = [4, 5]
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(list(x), list(y))
    1:         self.assertEqual(x.foo, y.foo)
    1:         self.assertTrue(x[0] is not y[0])
    1:         self.assertTrue(x.foo is not y.foo)
       
    1:     def test_copy_tuple_subclass(self):
    2:         class C(tuple):
    1:             pass
    1:         x = C([1, 2, 3])
    1:         self.assertEqual(tuple(x), (1, 2, 3))
    1:         y = copy.copy(x)
    1:         self.assertEqual(tuple(y), (1, 2, 3))
       
    1:     def test_deepcopy_tuple_subclass(self):
    2:         class C(tuple):
    1:             pass
    1:         x = C([[1, 2], 3])
    1:         self.assertEqual(tuple(x), ([1, 2], 3))
    1:         y = copy.deepcopy(x)
    1:         self.assertEqual(tuple(y), ([1, 2], 3))
    1:         self.assertTrue(x is not y)
    1:         self.assertTrue(x[0] is not y[0])
       
    1:     def test_getstate_exc(self):
    2:         class EvilState(object):
    1:             def __getstate__(self):
    1:                 raise ValueError, "ain't got no stickin' state"
    1:         self.assertRaises(ValueError, copy.copy, EvilState())
       
    1:     def test_copy_function(self):
    1:         self.assertEqual(copy.copy(global_foo), global_foo)
    1:         def foo(x, y): return x+y
    1:         self.assertEqual(copy.copy(foo), foo)
    1:         bar = lambda: None
    1:         self.assertEqual(copy.copy(bar), bar)
       
    1:     def test_deepcopy_function(self):
    1:         self.assertEqual(copy.deepcopy(global_foo), global_foo)
    1:         def foo(x, y): return x+y
    1:         self.assertEqual(copy.deepcopy(foo), foo)
    1:         bar = lambda: None
    1:         self.assertEqual(copy.deepcopy(bar), bar)
       
    1:     def _check_weakref(self, _copy):
    4:         class C(object):
    2:             pass
    2:         obj = C()
    2:         x = weakref.ref(obj)
    2:         y = _copy(x)
    2:         self.assertTrue(y is x)
    2:         del obj
    2:         y = _copy(x)
    2:         self.assertTrue(y is x)
       
    1:     def test_copy_weakref(self):
    1:         self._check_weakref(copy.copy)
       
    1:     def test_deepcopy_weakref(self):
    1:         self._check_weakref(copy.deepcopy)
       
    1:     def _check_copy_weakdict(self, _dicttype):
    4:         class C(object):
    2:             pass
   10:         a, b, c, d = [C() for i in xrange(4)]
    2:         u = _dicttype()
    2:         u[a] = b
    2:         u[c] = d
    2:         v = copy.copy(u)
    2:         self.assertFalse(v is u)
    2:         self.assertEqual(v, u)
    2:         self.assertEqual(v[a], b)
    2:         self.assertEqual(v[c], d)
    2:         self.assertEqual(len(v), 2)
    2:         del c, d
    2:         self.assertEqual(len(v), 1)
    2:         x, y = C(), C()
               # The underlying containers are decoupled
    2:         v[x] = y
    2:         self.assertNotIn(x, u)
       
    1:     def test_copy_weakkeydict(self):
    1:         self._check_copy_weakdict(weakref.WeakKeyDictionary)
       
    1:     def test_copy_weakvaluedict(self):
    1:         self._check_copy_weakdict(weakref.WeakValueDictionary)
       
    1:     def test_deepcopy_weakkeydict(self):
    2:         class C(object):
    1:             def __init__(self, i):
    4:                 self.i = i
    5:         a, b, c, d = [C(i) for i in xrange(4)]
    1:         u = weakref.WeakKeyDictionary()
    1:         u[a] = b
    1:         u[c] = d
               # Keys aren't copied, values are
    1:         v = copy.deepcopy(u)
    1:         self.assertNotEqual(v, u)
    1:         self.assertEqual(len(v), 2)
    1:         self.assertFalse(v[a] is b)
    1:         self.assertFalse(v[c] is d)
    1:         self.assertEqual(v[a].i, b.i)
    1:         self.assertEqual(v[c].i, d.i)
    1:         del c
    1:         self.assertEqual(len(v), 1)
       
    1:     def test_deepcopy_weakvaluedict(self):
    2:         class C(object):
    1:             def __init__(self, i):
    4:                 self.i = i
    5:         a, b, c, d = [C(i) for i in xrange(4)]
    1:         u = weakref.WeakValueDictionary()
    1:         u[a] = b
    1:         u[c] = d
               # Keys are copied, values aren't
    1:         v = copy.deepcopy(u)
    1:         self.assertNotEqual(v, u)
    1:         self.assertEqual(len(v), 2)
    3:         (x, y), (z, t) = sorted(v.items(), key=lambda pair: pair[0].i)
    1:         self.assertFalse(x is a)
    1:         self.assertEqual(x.i, a.i)
    1:         self.assertTrue(y is b)
    1:         self.assertFalse(z is c)
    1:         self.assertEqual(z.i, c.i)
    1:         self.assertTrue(t is d)
    1:         del x, y, z, t
    1:         del d
    1:         self.assertEqual(len(v), 1)
       
    1:     def test_deepcopy_bound_method(self):
    2:         class Foo(object):
    1:             def m(self):
    1:                 pass
    1:         f = Foo()
    1:         f.b = f.m
    1:         g = copy.deepcopy(f)
    1:         self.assertEqual(g.m, g.b)
    1:         self.assertTrue(g.b.im_self is g)
    1:         g.b()
       
       
    1: def global_foo(x, y): return x+y
       
    1: def test_main():
    1:     test_support.run_unittest(TestCopy)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
