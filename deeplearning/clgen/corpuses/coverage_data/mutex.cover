       """Mutual exclusion -- for use with module sched
       
       A mutex has two pieces of state -- a 'locked' bit and a queue.
       When the mutex is not locked, the queue is empty.
       Otherwise, the queue contains 0 or more (function, argument) pairs
       representing functions (or methods) waiting to acquire the lock.
       When the mutex is unlocked while the queue is not empty,
       the first queue entry is removed and its function(argument) pair called,
       implying it now has the lock.
       
       Of course, no multi-threading is implied -- hence the funny interface
       for lock, where a function is called once the lock is acquired.
    1: """
    1: from warnings import warnpy3k
    1: warnpy3k("the mutex module has been removed in Python 3.0", stacklevel=2)
    1: del warnpy3k
       
    1: from collections import deque
       
    2: class mutex:
    1:     def __init__(self):
               """Create a new mutex -- initially unlocked."""
    1:         self.locked = False
    1:         self.queue = deque()
       
    1:     def test(self):
               """Test the locked bit of the mutex."""
    3:         return self.locked
       
    1:     def testandset(self):
               """Atomic test-and-set -- grab the lock if it is not set,
               return True if it succeeded."""
    2:         if not self.locked:
    1:             self.locked = True
    1:             return True
               else:
    1:             return False
       
    1:     def lock(self, function, argument):
               """Lock a mutex, call the function with supplied argument
               when it is acquired.  If the mutex is already locked, place
               function and argument in the queue."""
    2:         if self.testandset():
    1:             function(argument)
               else:
    1:             self.queue.append((function, argument))
       
    1:     def unlock(self):
               """Unlock a mutex.  If the queue is not empty, call the next
               function with its argument."""
    2:         if self.queue:
    1:             function, argument = self.queue.popleft()
    1:             function(argument)
               else:
    1:             self.locked = False
