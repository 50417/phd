    1: import unittest
    1: from ctypes import *
    1: import re, sys
       
    1: if sys.byteorder == "little":
    1:     THIS_ENDIAN = "<"
    1:     OTHER_ENDIAN = ">"
       else:
>>>>>>     THIS_ENDIAN = ">"
>>>>>>     OTHER_ENDIAN = "<"
       
    1: def normalize(format):
           # Remove current endian specifier and white space from a format
           # string
   60:     if format is None:
>>>>>>         return ""
   60:     format = format.replace(OTHER_ENDIAN, THIS_ENDIAN)
   60:     return re.sub(r"\s", "", format)
       
    2: class Test(unittest.TestCase):
       
    1:     def test_native_types(self):
   31:         for tp, fmt, shape, itemtp in native_types:
   30:             ob = tp()
   30:             v = memoryview(ob)
   30:             try:
   30:                 self.assertEqual(normalize(v.format), normalize(fmt))
   30:                 if shape is not None:
    5:                     self.assertEqual(len(v), shape[0])
                       else:
   25:                     self.assertEqual(len(v) * sizeof(itemtp), sizeof(ob))
   30:                 self.assertEqual(v.itemsize, sizeof(itemtp))
   30:                 self.assertEqual(v.shape, shape)
                       # ctypes object always have a non-strided memory block
   30:                 self.assertEqual(v.strides, None)
                       # they are always read/write
   30:                 self.assertFalse(v.readonly)
       
   30:                 if v.shape:
    5:                     n = 1
   13:                     for dim in v.shape:
    8:                         n = n * dim
    5:                     self.assertEqual(n * v.itemsize, len(v.tobytes()))
>>>>>>             except:
                       # so that we can see the failing type
>>>>>>                 print(tp)
>>>>>>                 raise
       
    1:     def test_endian_types(self):
    5:         for tp, fmt, shape, itemtp in endian_types:
    4:             ob = tp()
    4:             v = memoryview(ob)
    4:             try:
    4:                 self.assertEqual(v.format, fmt)
    4:                 if shape is not None:
>>>>>>                     self.assertEqual(len(v), shape[0])
                       else:
    4:                     self.assertEqual(len(v) * sizeof(itemtp), sizeof(ob))
    4:                 self.assertEqual(v.itemsize, sizeof(itemtp))
    4:                 self.assertEqual(v.shape, shape)
                       # ctypes object always have a non-strided memory block
    4:                 self.assertEqual(v.strides, None)
                       # they are always read/write
    4:                 self.assertFalse(v.readonly)
       
    4:                 if v.shape:
>>>>>>                     n = 1
>>>>>>                     for dim in v.shape:
>>>>>>                         n = n * dim
>>>>>>                     self.assertEqual(n, len(v))
>>>>>>             except:
                       # so that we can see the failing type
>>>>>>                 print(tp)
>>>>>>                 raise
       
       # define some structure classes
       
    2: class Point(Structure):
    1:     _fields_ = [("x", c_long), ("y", c_long)]
       
    2: class PackedPoint(Structure):
    1:     _pack_ = 2
    1:     _fields_ = [("x", c_long), ("y", c_long)]
       
    2: class Point2(Structure):
    1:     pass
    1: Point2._fields_ = [("x", c_long), ("y", c_long)]
       
    2: class EmptyStruct(Structure):
    1:     _fields_ = []
       
    2: class aUnion(Union):
    1:     _fields_ = [("a", c_int)]
       
    2: class StructWithArrays(Structure):
    1:     _fields_ = [("x", c_long * 3 * 2), ("y", Point * 4)]
       
       
    2: class Incomplete(Structure):
    1:     pass
       
    2: class Complete(Structure):
    1:     pass
    1: PComplete = POINTER(Complete)
    1: Complete._fields_ = [("a", c_long)]
       
       ################################################################
       #
       # This table contains format strings as they look on little endian
       # machines.  The test replaces '<' with '>' on big endian machines.
       #
       native_types = [
           # type                      format                  shape           calc itemsize
       
           ## simple types
       
    1:     (c_char,                    "<c",                   None,           c_char),
    1:     (c_byte,                    "<b",                   None,           c_byte),
    1:     (c_ubyte,                   "<B",                   None,           c_ubyte),
    1:     (c_short,                   "<h",                   None,           c_short),
    1:     (c_ushort,                  "<H",                   None,           c_ushort),
       
           # c_int and c_uint may be aliases to c_long
           #(c_int,                     "<i",                   None,           c_int),
           #(c_uint,                    "<I",                   None,           c_uint),
       
    1:     (c_long,                    "<l",                   None,           c_long),
    1:     (c_ulong,                   "<L",                   None,           c_ulong),
       
           # c_longlong and c_ulonglong are aliases on 64-bit platforms
           #(c_longlong,                "<q",                   None,           c_longlong),
           #(c_ulonglong,               "<Q",                   None,           c_ulonglong),
       
    1:     (c_float,                   "<f",                   None,           c_float),
    1:     (c_double,                  "<d",                   None,           c_double),
           # c_longdouble may be an alias to c_double
       
    1:     (c_bool,                    "<?",                   None,           c_bool),
    1:     (py_object,                 "<O",                   None,           py_object),
       
           ## pointers
       
    1:     (POINTER(c_byte),           "&<b",                  None,           POINTER(c_byte)),
    1:     (POINTER(POINTER(c_long)),  "&&<l",                 None,           POINTER(POINTER(c_long))),
       
           ## arrays and pointers
       
    1:     (c_double * 4,              "<d",                   (4,),           c_double),
    1:     (c_float * 4 * 3 * 2,       "<f",                   (2,3,4),        c_float),
    1:     (POINTER(c_short) * 2,      "&<h",                  (2,),           POINTER(c_short)),
    1:     (POINTER(c_short) * 2 * 3,  "&<h",                  (3,2,),         POINTER(c_short)),
    1:     (POINTER(c_short * 2),      "&(2)<h",               None,           POINTER(c_short)),
       
           ## structures and unions
       
    1:     (Point,                     "T{<l:x:<l:y:}",        None,           Point),
           # packed structures do not implement the pep
    1:     (PackedPoint,               "B",                    None,           PackedPoint),
    1:     (Point2,                    "T{<l:x:<l:y:}",        None,           Point2),
    1:     (EmptyStruct,               "T{}",                  None,           EmptyStruct),
           # the pep does't support unions
    1:     (aUnion,                    "B",                    None,           aUnion),
           # structure with sub-arrays
    1:     (StructWithArrays,          "T{(2,3)<l:x:(4)T{<l:x:<l:y:}:y:}", None,  StructWithArrays),
    1:     (StructWithArrays * 3,      "T{(2,3)<l:x:(4)T{<l:x:<l:y:}:y:}", (3,),  StructWithArrays),
       
           ## pointer to incomplete structure
    1:     (Incomplete,                "B",                    None,           Incomplete),
    1:     (POINTER(Incomplete),       "&B",                   None,           POINTER(Incomplete)),
       
           # 'Complete' is a structure that starts incomplete, but is completed after the
           # pointer type to it has been created.
    1:     (Complete,                  "T{<l:a:}",             None,           Complete),
           # Unfortunately the pointer format string is not fixed...
    1:     (POINTER(Complete),         "&B",                   None,           POINTER(Complete)),
       
           ## other
       
           # function signatures are not implemented
    1:     (CFUNCTYPE(None),           "X{}",                  None,           CFUNCTYPE(None)),
       
           ]
       
    2: class BEPoint(BigEndianStructure):
    1:     _fields_ = [("x", c_long), ("y", c_long)]
       
    2: class LEPoint(LittleEndianStructure):
    1:     _fields_ = [("x", c_long), ("y", c_long)]
       
       ################################################################
       #
       # This table contains format strings as they really look, on both big
       # and little endian machines.
       #
       endian_types = [
    1:     (BEPoint,                   "T{>l:x:>l:y:}",        None,           BEPoint),
    1:     (LEPoint,                   "T{<l:x:<l:y:}",        None,           LEPoint),
    1:     (POINTER(BEPoint),          "&T{>l:x:>l:y:}",       None,           POINTER(BEPoint)),
    1:     (POINTER(LEPoint),          "&T{<l:x:<l:y:}",       None,           POINTER(LEPoint)),
           ]
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
