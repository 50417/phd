       """HTML 2.0 parser.
       
       See the HTML 2.0 specification:
       http://www.w3.org/hypertext/WWW/MarkUp/html-spec/html-spec_toc.html
    1: """
       
    1: from warnings import warnpy3k
    1: warnpy3k("the htmllib module has been removed in Python 3.0",
    1:          stacklevel=2)
    1: del warnpy3k
       
    1: import sgmllib
       
    1: from formatter import AS_IS
       
    1: __all__ = ["HTMLParser", "HTMLParseError"]
       
       
    2: class HTMLParseError(sgmllib.SGMLParseError):
    1:     """Error raised when an HTML document can't be parsed."""
       
       
    2: class HTMLParser(sgmllib.SGMLParser):
           """This is the basic HTML parser class.
       
           It supports all entity names required by the XHTML 1.0 Recommendation.
           It also defines handlers for all HTML 2.0 and many HTML 3.0 and 3.2
           elements.
       
    1:     """
       
    1:     from htmlentitydefs import entitydefs
       
    1:     def __init__(self, formatter, verbose=0):
               """Creates an instance of the HTMLParser class.
       
               The formatter parameter is the formatter instance associated with
               the parser.
       
               """
    2:         sgmllib.SGMLParser.__init__(self, verbose)
    2:         self.formatter = formatter
       
    1:     def error(self, message):
>>>>>>         raise HTMLParseError(message)
       
    1:     def reset(self):
    2:         sgmllib.SGMLParser.reset(self)
    2:         self.savedata = None
    2:         self.isindex = 0
    2:         self.title = None
    2:         self.base = None
    2:         self.anchor = None
    2:         self.anchorlist = []
    2:         self.nofill = 0
    2:         self.list_stack = []
       
           # ------ Methods used internally; some may be overridden
       
           # --- Formatter interface, taking care of 'savedata' mode;
           # shouldn't need to be overridden
       
    1:     def handle_data(self, data):
   12:         if self.savedata is not None:
>>>>>>             self.savedata = self.savedata + data
               else:
   12:             if self.nofill:
>>>>>>                 self.formatter.add_literal_data(data)
                   else:
   12:                 self.formatter.add_flowing_data(data)
       
           # --- Hooks to save data; shouldn't need to be overridden
       
    1:     def save_bgn(self):
               """Begins saving character data in a buffer instead of sending it
               to the formatter object.
       
               Retrieve the stored data via the save_end() method.  Use of the
               save_bgn() / save_end() pair may not be nested.
       
               """
>>>>>>         self.savedata = ''
       
    1:     def save_end(self):
               """Ends buffering character data and returns all data saved since
               the preceding call to the save_bgn() method.
       
               If the nofill flag is false, whitespace is collapsed to single
               spaces.  A call to this method without a preceding call to the
               save_bgn() method will raise a TypeError exception.
       
               """
>>>>>>         data = self.savedata
>>>>>>         self.savedata = None
>>>>>>         if not self.nofill:
>>>>>>             data = ' '.join(data.split())
>>>>>>         return data
       
           # --- Hooks for anchors; should probably be overridden
       
    1:     def anchor_bgn(self, href, name, type):
               """This method is called at the start of an anchor region.
       
               The arguments correspond to the attributes of the <A> tag with
               the same names.  The default implementation maintains a list of
               hyperlinks (defined by the HREF attribute for <A> tags) within
               the document.  The list of hyperlinks is available as the data
               attribute anchorlist.
       
               """
>>>>>>         self.anchor = href
>>>>>>         if self.anchor:
>>>>>>             self.anchorlist.append(href)
       
    1:     def anchor_end(self):
               """This method is called at the end of an anchor region.
       
               The default implementation adds a textual footnote marker using an
               index into the list of hyperlinks created by the anchor_bgn()method.
       
               """
    3:         if self.anchor:
>>>>>>             self.handle_data("[%d]" % len(self.anchorlist))
>>>>>>             self.anchor = None
       
           # --- Hook for images; should probably be overridden
       
    1:     def handle_image(self, src, alt, *args):
               """This method is called to handle images.
       
               The default implementation simply passes the alt value to the
               handle_data() method.
       
               """
>>>>>>         self.handle_data(alt)
       
           # --------- Top level elememts
       
    2:     def start_html(self, attrs): pass
    2:     def end_html(self): pass
       
    1:     def start_head(self, attrs): pass
    1:     def end_head(self): pass
       
    2:     def start_body(self, attrs): pass
    2:     def end_body(self): pass
       
           # ------ Head elements
       
    1:     def start_title(self, attrs):
>>>>>>         self.save_bgn()
       
    1:     def end_title(self):
>>>>>>         self.title = self.save_end()
       
    1:     def do_base(self, attrs):
>>>>>>         for a, v in attrs:
>>>>>>             if a == 'href':
>>>>>>                 self.base = v
       
    1:     def do_isindex(self, attrs):
>>>>>>         self.isindex = 1
       
    1:     def do_link(self, attrs):
>>>>>>         pass
       
    1:     def do_meta(self, attrs):
>>>>>>         pass
       
    1:     def do_nextid(self, attrs): # Deprecated
>>>>>>         pass
       
           # ------ Body elements
       
           # --- Headings
       
    1:     def start_h1(self, attrs):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.push_font(('h1', 0, 1, 0))
       
    1:     def end_h1(self):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.pop_font()
       
    1:     def start_h2(self, attrs):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.push_font(('h2', 0, 1, 0))
       
    1:     def end_h2(self):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.pop_font()
       
    1:     def start_h3(self, attrs):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.push_font(('h3', 0, 1, 0))
       
    1:     def end_h3(self):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.pop_font()
       
    1:     def start_h4(self, attrs):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.push_font(('h4', 0, 1, 0))
       
    1:     def end_h4(self):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.pop_font()
       
    1:     def start_h5(self, attrs):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.push_font(('h5', 0, 1, 0))
       
    1:     def end_h5(self):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.pop_font()
       
    1:     def start_h6(self, attrs):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.push_font(('h6', 0, 1, 0))
       
    1:     def end_h6(self):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.pop_font()
       
           # --- Block Structuring Elements
       
    1:     def do_p(self, attrs):
>>>>>>         self.formatter.end_paragraph(1)
       
    1:     def start_pre(self, attrs):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.push_font((AS_IS, AS_IS, AS_IS, 1))
>>>>>>         self.nofill = self.nofill + 1
       
    1:     def end_pre(self):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.pop_font()
>>>>>>         self.nofill = max(0, self.nofill - 1)
       
    1:     def start_xmp(self, attrs):
>>>>>>         self.start_pre(attrs)
>>>>>>         self.setliteral('xmp') # Tell SGML parser
       
    1:     def end_xmp(self):
>>>>>>         self.end_pre()
       
    1:     def start_listing(self, attrs):
>>>>>>         self.start_pre(attrs)
>>>>>>         self.setliteral('listing') # Tell SGML parser
       
    1:     def end_listing(self):
>>>>>>         self.end_pre()
       
    1:     def start_address(self, attrs):
>>>>>>         self.formatter.end_paragraph(0)
>>>>>>         self.formatter.push_font((AS_IS, 1, AS_IS, AS_IS))
       
    1:     def end_address(self):
>>>>>>         self.formatter.end_paragraph(0)
>>>>>>         self.formatter.pop_font()
       
    1:     def start_blockquote(self, attrs):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.push_margin('blockquote')
       
    1:     def end_blockquote(self):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.formatter.pop_margin()
       
           # --- List Elements
       
    1:     def start_ul(self, attrs):
>>>>>>         self.formatter.end_paragraph(not self.list_stack)
>>>>>>         self.formatter.push_margin('ul')
>>>>>>         self.list_stack.append(['ul', '*', 0])
       
    1:     def end_ul(self):
>>>>>>         if self.list_stack: del self.list_stack[-1]
>>>>>>         self.formatter.end_paragraph(not self.list_stack)
>>>>>>         self.formatter.pop_margin()
       
    1:     def do_li(self, attrs):
>>>>>>         self.formatter.end_paragraph(0)
>>>>>>         if self.list_stack:
>>>>>>             [dummy, label, counter] = top = self.list_stack[-1]
>>>>>>             top[2] = counter = counter+1
               else:
>>>>>>             label, counter = '*', 0
>>>>>>         self.formatter.add_label_data(label, counter)
       
    1:     def start_ol(self, attrs):
>>>>>>         self.formatter.end_paragraph(not self.list_stack)
>>>>>>         self.formatter.push_margin('ol')
>>>>>>         label = '1.'
>>>>>>         for a, v in attrs:
>>>>>>             if a == 'type':
>>>>>>                 if len(v) == 1: v = v + '.'
>>>>>>                 label = v
>>>>>>         self.list_stack.append(['ol', label, 0])
       
    1:     def end_ol(self):
>>>>>>         if self.list_stack: del self.list_stack[-1]
>>>>>>         self.formatter.end_paragraph(not self.list_stack)
>>>>>>         self.formatter.pop_margin()
       
    1:     def start_menu(self, attrs):
>>>>>>         self.start_ul(attrs)
       
    1:     def end_menu(self):
>>>>>>         self.end_ul()
       
    1:     def start_dir(self, attrs):
>>>>>>         self.start_ul(attrs)
       
    1:     def end_dir(self):
>>>>>>         self.end_ul()
       
    1:     def start_dl(self, attrs):
>>>>>>         self.formatter.end_paragraph(1)
>>>>>>         self.list_stack.append(['dl', '', 0])
       
    1:     def end_dl(self):
>>>>>>         self.ddpop(1)
>>>>>>         if self.list_stack: del self.list_stack[-1]
       
    1:     def do_dt(self, attrs):
>>>>>>         self.ddpop()
       
    1:     def do_dd(self, attrs):
>>>>>>         self.ddpop()
>>>>>>         self.formatter.push_margin('dd')
>>>>>>         self.list_stack.append(['dd', '', 0])
       
    1:     def ddpop(self, bl=0):
>>>>>>         self.formatter.end_paragraph(bl)
>>>>>>         if self.list_stack:
>>>>>>             if self.list_stack[-1][0] == 'dd':
>>>>>>                 del self.list_stack[-1]
>>>>>>                 self.formatter.pop_margin()
       
           # --- Phrase Markup
       
           # Idiomatic Elements
       
    1:     def start_cite(self, attrs): self.start_i(attrs)
    1:     def end_cite(self): self.end_i()
       
    1:     def start_code(self, attrs): self.start_tt(attrs)
    1:     def end_code(self): self.end_tt()
       
    1:     def start_em(self, attrs): self.start_i(attrs)
    1:     def end_em(self): self.end_i()
       
    1:     def start_kbd(self, attrs): self.start_tt(attrs)
    1:     def end_kbd(self): self.end_tt()
       
    1:     def start_samp(self, attrs): self.start_tt(attrs)
    1:     def end_samp(self): self.end_tt()
       
    1:     def start_strong(self, attrs): self.start_b(attrs)
    1:     def end_strong(self): self.end_b()
       
    1:     def start_var(self, attrs): self.start_i(attrs)
    1:     def end_var(self): self.end_i()
       
           # Typographic Elements
       
    1:     def start_i(self, attrs):
>>>>>>         self.formatter.push_font((AS_IS, 1, AS_IS, AS_IS))
    1:     def end_i(self):
>>>>>>         self.formatter.pop_font()
       
    1:     def start_b(self, attrs):
>>>>>>         self.formatter.push_font((AS_IS, AS_IS, 1, AS_IS))
    1:     def end_b(self):
>>>>>>         self.formatter.pop_font()
       
    1:     def start_tt(self, attrs):
>>>>>>         self.formatter.push_font((AS_IS, AS_IS, AS_IS, 1))
    1:     def end_tt(self):
>>>>>>         self.formatter.pop_font()
       
    1:     def start_a(self, attrs):
    3:         href = ''
    3:         name = ''
    3:         type = ''
    7:         for attrname, value in attrs:
    4:             value = value.strip()
    4:             if attrname == 'href':
    2:                 href = value
    4:             if attrname == 'name':
    2:                 name = value
    4:             if attrname == 'type':
>>>>>>                 type = value.lower()
    3:         self.anchor_bgn(href, name, type)
       
    1:     def end_a(self):
    3:         self.anchor_end()
       
           # --- Line Break
       
    1:     def do_br(self, attrs):
>>>>>>         self.formatter.add_line_break()
       
           # --- Horizontal Rule
       
    1:     def do_hr(self, attrs):
>>>>>>         self.formatter.add_hor_rule()
       
           # --- Image
       
    1:     def do_img(self, attrs):
>>>>>>         align = ''
>>>>>>         alt = '(image)'
>>>>>>         ismap = ''
>>>>>>         src = ''
>>>>>>         width = 0
>>>>>>         height = 0
>>>>>>         for attrname, value in attrs:
>>>>>>             if attrname == 'align':
>>>>>>                 align = value
>>>>>>             if attrname == 'alt':
>>>>>>                 alt = value
>>>>>>             if attrname == 'ismap':
>>>>>>                 ismap = value
>>>>>>             if attrname == 'src':
>>>>>>                 src = value
>>>>>>             if attrname == 'width':
>>>>>>                 try: width = int(value)
>>>>>>                 except ValueError: pass
>>>>>>             if attrname == 'height':
>>>>>>                 try: height = int(value)
>>>>>>                 except ValueError: pass
>>>>>>         self.handle_image(src, alt, ismap, align, width, height)
       
           # --- Really Old Unofficial Deprecated Stuff
       
    1:     def do_plaintext(self, attrs):
>>>>>>         self.start_pre(attrs)
>>>>>>         self.setnomoretags() # Tell SGML parser
       
           # --- Unhandled tags
       
    1:     def unknown_starttag(self, tag, attrs):
>>>>>>         pass
       
    1:     def unknown_endtag(self, tag):
>>>>>>         pass
       
       
    1: def test(args = None):
>>>>>>     import sys, formatter
       
>>>>>>     if not args:
>>>>>>         args = sys.argv[1:]
       
>>>>>>     silent = args and args[0] == '-s'
>>>>>>     if silent:
>>>>>>         del args[0]
       
>>>>>>     if args:
>>>>>>         file = args[0]
           else:
>>>>>>         file = 'test.html'
       
>>>>>>     if file == '-':
>>>>>>         f = sys.stdin
           else:
>>>>>>         try:
>>>>>>             f = open(file, 'r')
>>>>>>         except IOError, msg:
>>>>>>             print file, ":", msg
>>>>>>             sys.exit(1)
       
>>>>>>     data = f.read()
       
>>>>>>     if f is not sys.stdin:
>>>>>>         f.close()
       
>>>>>>     if silent:
>>>>>>         f = formatter.NullFormatter()
           else:
>>>>>>         f = formatter.AbstractFormatter(formatter.DumbWriter())
       
>>>>>>     p = HTMLParser(f)
>>>>>>     p.feed(data)
>>>>>>     p.close()
       
       
    1: if __name__ == '__main__':
>>>>>>     test()
