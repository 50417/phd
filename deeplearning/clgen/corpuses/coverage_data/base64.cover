       #! /usr/bin/env python
       
    1: """RFC 3548: Base16, Base32, Base64 Data Encodings"""
       
       # Modified 04-Oct-1995 by Jack Jansen to use binascii module
       # Modified 30-Dec-2003 by Barry Warsaw to add full RFC 3548 support
       
    1: import re
    1: import struct
    1: import string
    1: import binascii
       
       
       __all__ = [
           # Legacy interface exports traditional RFC 1521 Base64 encodings
    1:     'encode', 'decode', 'encodestring', 'decodestring',
           # Generalized interface for other encodings
    1:     'b64encode', 'b64decode', 'b32encode', 'b32decode',
    1:     'b16encode', 'b16decode',
           # Standard Base64 encoding
    1:     'standard_b64encode', 'standard_b64decode',
           # Some common Base64 alternatives.  As referenced by RFC 3458, see thread
           # starting at:
           #
           # http://zgp.org/pipermail/p2p-hackers/2001-September/000316.html
    1:     'urlsafe_b64encode', 'urlsafe_b64decode',
           ]
       
  257: _translation = [chr(_x) for _x in range(256)]
    1: EMPTYSTRING = ''
       
       
    1: def _translate(s, altchars):
>>>>>>     translation = _translation[:]
>>>>>>     for k, v in altchars.items():
>>>>>>         translation[ord(k)] = v
>>>>>>     return s.translate(''.join(translation))
       
       
       
       # Base64 encoding/decoding uses binascii
       
    1: def b64encode(s, altchars=None):
           """Encode a string using Base64.
       
           s is the string to encode.  Optional altchars must be a string of at least
           length 2 (additional characters are ignored) which specifies an
           alternative alphabet for the '+' and '/' characters.  This allows an
           application to e.g. generate url or filesystem safe Base64 strings.
       
           The encoded string is returned.
           """
           # Strip off the trailing newline
   36:     encoded = binascii.b2a_base64(s)[:-1]
   36:     if altchars is not None:
    2:         return encoded.translate(string.maketrans(b'+/', altchars[:2]))
   34:     return encoded
       
       
    1: def b64decode(s, altchars=None):
           """Decode a Base64 encoded string.
       
           s is the string to decode.  Optional altchars must be a string of at least
           length 2 (additional characters are ignored) which specifies the
           alternative alphabet used instead of the '+' and '/' characters.
       
           The decoded string is returned.  A TypeError is raised if s is
           incorrectly padded.  Characters that are neither in the normal base-64
           alphabet nor the alternative alphabet are discarded prior to the padding
           check.
           """
   48:     if altchars is not None:
    2:         s = s.translate(string.maketrans(altchars[:2], '+/'))
   48:     try:
   48:         return binascii.a2b_base64(s)
    1:     except binascii.Error, msg:
               # Transform this exception for consistency
    1:         raise TypeError(msg)
       
       
    1: def standard_b64encode(s):
           """Encode a string using the standard Base64 alphabet.
       
           s is the string to encode.  The encoded string is returned.
           """
   10:     return b64encode(s)
       
    1: def standard_b64decode(s):
           """Decode a string encoded with the standard Base64 alphabet.
       
           Argument s is the string to decode.  The decoded string is returned.  A
           TypeError is raised if the string is incorrectly padded.  Characters that
           are not in the standard alphabet are discarded prior to the padding
           check.
           """
   16:     return b64decode(s)
       
    1: _urlsafe_encode_translation = string.maketrans(b'+/', b'-_')
    1: _urlsafe_decode_translation = string.maketrans(b'-_', b'+/')
       
    1: def urlsafe_b64encode(s):
           """Encode a string using the URL- and filesystem-safe Base64 alphabet.
       
           Argument s is the string to encode.  The encoded string is returned.  The
           alphabet uses '-' instead of '+' and '_' instead of '/'.
           """
    2:     return b64encode(s).translate(_urlsafe_encode_translation)
       
    1: def urlsafe_b64decode(s):
           """Decode a string using the URL- and filesystem-safe Base64 alphabet.
       
           Argument s is the string to decode.  The decoded string is returned.  A
           TypeError is raised if the string is incorrectly padded.  Characters that
           are not in the URL-safe base-64 alphabet, and are not a plus '+' or slash
           '/', are discarded prior to the padding check.
       
           The alphabet uses '-' instead of '+' and '_' instead of '/'.
           """
   12:     return b64decode(s.translate(_urlsafe_decode_translation))
       
       
       
       # Base32 encoding/decoding must be done in Python
    1: _b32alphabet = {
    1:     0: 'A',  9: 'J', 18: 'S', 27: '3',
    1:     1: 'B', 10: 'K', 19: 'T', 28: '4',
    1:     2: 'C', 11: 'L', 20: 'U', 29: '5',
    1:     3: 'D', 12: 'M', 21: 'V', 30: '6',
    1:     4: 'E', 13: 'N', 22: 'W', 31: '7',
    1:     5: 'F', 14: 'O', 23: 'X',
    1:     6: 'G', 15: 'P', 24: 'Y',
    1:     7: 'H', 16: 'Q', 25: 'Z',
    1:     8: 'I', 17: 'R', 26: '2',
           }
       
    1: _b32tab = _b32alphabet.items()
    1: _b32tab.sort()
   33: _b32tab = [v for k, v in _b32tab]
   33: _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
       
       
    1: def b32encode(s):
           """Encode a string using Base32.
       
           s is the string to encode.  The encoded string is returned.
           """
    8:     parts = []
    8:     quanta, leftover = divmod(len(s), 5)
           # Pad the last quantum with zero bits if necessary
    8:     if leftover:
    6:         s += ('\0' * (5 - leftover))
    6:         quanta += 1
   15:     for i in range(quanta):
               # c1 and c2 are 16 bits wide, c3 is 8 bits wide.  The intent of this
               # code is to process the 40 bits in units of 5 bits.  So we take the 1
               # leftover bit of c1 and tack it onto c2.  Then we take the 2 leftover
               # bits of c2 and tack them onto c3.  The shifts and masks are intended
               # to give us values of exactly 5 bits in width.
    7:         c1, c2, c3 = struct.unpack('!HHB', s[i*5:(i+1)*5])
    7:         c2 += (c1 & 1) << 16 # 17 bits wide
    7:         c3 += (c2 & 3) << 8  # 10 bits wide
    7:         parts.extend([_b32tab[c1 >> 11],         # bits 1 - 5
    7:                       _b32tab[(c1 >> 6) & 0x1f], # bits 6 - 10
    7:                       _b32tab[(c1 >> 1) & 0x1f], # bits 11 - 15
    7:                       _b32tab[c2 >> 12],         # bits 16 - 20 (1 - 5)
    7:                       _b32tab[(c2 >> 7) & 0x1f], # bits 21 - 25 (6 - 10)
    7:                       _b32tab[(c2 >> 2) & 0x1f], # bits 26 - 30 (11 - 15)
    7:                       _b32tab[c3 >> 5],          # bits 31 - 35 (1 - 5)
    7:                       _b32tab[c3 & 0x1f],        # bits 36 - 40 (1 - 5)
                             ])
    8:     encoded = EMPTYSTRING.join(parts)
           # Adjust for any leftover partial quanta
    8:     if leftover == 1:
    2:         return encoded[:-6] + '======'
    6:     elif leftover == 2:
    1:         return encoded[:-4] + '===='
    5:     elif leftover == 3:
    1:         return encoded[:-3] + '==='
    4:     elif leftover == 4:
    2:         return encoded[:-1] + '='
    2:     return encoded
       
       
    1: def b32decode(s, casefold=False, map01=None):
           """Decode a Base32 encoded string.
       
           s is the string to decode.  Optional casefold is a flag specifying whether
           a lowercase alphabet is acceptable as input.  For security purposes, the
           default is False.
       
           RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O
           (oh), and for optional mapping of the digit 1 (one) to either the letter I
           (eye) or letter L (el).  The optional argument map01 when not None,
           specifies which letter the digit 1 should be mapped to (when map01 is not
           None, the digit 0 is always mapped to the letter O).  For security
           purposes the default is None, so that 0 and 1 are not allowed in the
           input.
       
           The decoded string is returned.  A TypeError is raised if s were
           incorrectly padded or if there are non-alphabet characters present in the
           string.
           """
   25:     quanta, leftover = divmod(len(s), 8)
   25:     if leftover:
    1:         raise TypeError('Incorrect padding')
           # Handle section 2.4 zero and one mapping.  The flag map01 will be either
           # False, or the character to map the digit 1 (one) to.  It should be
           # either L (el) or I (eye).
   24:     if map01:
    2:         s = s.translate(string.maketrans(b'01', b'O' + map01))
   24:     if casefold:
   11:         s = s.upper()
           # Strip off pad characters from the right.  We need to count the pad
           # characters because this will tell us how many null bytes to remove from
           # the end of the decoded string.
   24:     padchars = 0
   24:     mo = re.search('(?P<pad>[=]*)$', s)
   24:     if mo:
   24:         padchars = len(mo.group('pad'))
   24:         if padchars > 0:
   16:             s = s[:-padchars]
           # Now decode the full quanta
   24:     parts = []
   24:     acc = 0
   24:     shift = 35
  134:     for c in s:
  112:         val = _b32rev.get(c)
  112:         if val is None:
    2:             raise TypeError('Non-base32 digit found')
  110:         acc += _b32rev[c] << shift
  110:         shift -= 5
  110:         if shift < 0:
    6:             parts.append(binascii.unhexlify('%010x' % acc))
    6:             acc = 0
    6:             shift = 35
           # Process the last, partial quanta
   22:     last = binascii.unhexlify('%010x' % acc)
   22:     if padchars == 0:
    8:         last = ''                       # No characters
   14:     elif padchars == 1:
    3:         last = last[:-1]
   11:     elif padchars == 3:
    3:         last = last[:-2]
    8:     elif padchars == 4:
    3:         last = last[:-3]
    5:     elif padchars == 6:
    4:         last = last[:-4]
           else:
    1:         raise TypeError('Incorrect padding')
   21:     parts.append(last)
   21:     return EMPTYSTRING.join(parts)
       
       
       
       # RFC 3548, Base 16 Alphabet specifies uppercase, but hexlify() returns
       # lowercase.  The RFC also recommends against accepting input case
       # insensitively.
    1: def b16encode(s):
           """Encode a string using Base16.
       
           s is the string to encode.  The encoded string is returned.
           """
    3:     return binascii.hexlify(s).upper()
       
       
    1: def b16decode(s, casefold=False):
           """Decode a Base16 encoded string.
       
           s is the string to decode.  Optional casefold is a flag specifying whether
           a lowercase alphabet is acceptable as input.  For security purposes, the
           default is False.
       
           The decoded string is returned.  A TypeError is raised if s is
           incorrectly padded or if there are non-alphabet characters present in the
           string.
           """
   20:     if casefold:
    1:         s = s.upper()
   20:     if re.search('[^0-9A-F]', s):
    2:         raise TypeError('Non-base16 digit found')
   18:     return binascii.unhexlify(s)
       
       
       
       # Legacy interface.  This code could be cleaned up since I don't believe
       # binascii has any line length limitations.  It just doesn't seem worth it
       # though.
       
    1: MAXLINESIZE = 76 # Excluding the CRLF
    1: MAXBINSIZE = (MAXLINESIZE//4)*3
       
    1: def encode(input, output):
           """Encode a file."""
   12:     while True:
   12:         s = input.read(MAXBINSIZE)
   12:         if not s:
    5:             break
    7:         while len(s) < MAXBINSIZE:
    5:             ns = input.read(MAXBINSIZE-len(s))
    5:             if not ns:
    5:                 break
>>>>>>             s += ns
    7:         line = binascii.b2a_base64(s)
    7:         output.write(line)
       
       
    1: def decode(input, output):
           """Decode a file."""
    5:     while True:
    5:         line = input.readline()
    5:         if not line:
    2:             break
    3:         s = binascii.a2b_base64(line)
    3:         output.write(s)
       
       
    1: def encodestring(s):
           """Encode a string into multiple lines of base-64 data."""
  104:     pieces = []
 8659:     for i in range(0, len(s), MAXBINSIZE):
 8555:         chunk = s[i : i + MAXBINSIZE]
 8555:         pieces.append(binascii.b2a_base64(chunk))
  104:     return "".join(pieces)
       
       
    1: def decodestring(s):
           """Decode a string."""
  170:     return binascii.a2b_base64(s)
       
       
       
       # Useable as a script...
    1: def test():
           """Small test program"""
>>>>>>     import sys, getopt
>>>>>>     try:
>>>>>>         opts, args = getopt.getopt(sys.argv[1:], 'deut')
>>>>>>     except getopt.error, msg:
>>>>>>         sys.stdout = sys.stderr
>>>>>>         print msg
               print """usage: %s [-d|-e|-u|-t] [file|-]
               -d, -u: decode
               -e: encode (default)
>>>>>>         -t: encode and decode string 'Aladdin:open sesame'"""%sys.argv[0]
>>>>>>         sys.exit(2)
>>>>>>     func = encode
>>>>>>     for o, a in opts:
>>>>>>         if o == '-e': func = encode
>>>>>>         if o == '-d': func = decode
>>>>>>         if o == '-u': func = decode
>>>>>>         if o == '-t': test1(); return
>>>>>>     if args and args[0] != '-':
>>>>>>         with open(args[0], 'rb') as f:
>>>>>>             func(f, sys.stdout)
           else:
>>>>>>         func(sys.stdin, sys.stdout)
       
       
    1: def test1():
>>>>>>     s0 = "Aladdin:open sesame"
>>>>>>     s1 = encodestring(s0)
>>>>>>     s2 = decodestring(s1)
>>>>>>     print s0, repr(s1), s2
       
       
    1: if __name__ == '__main__':
>>>>>>     test()
