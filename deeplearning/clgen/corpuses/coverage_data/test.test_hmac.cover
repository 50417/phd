       # coding: utf-8
       
    1: import hmac
    1: import hashlib
    1: import unittest
    1: import warnings
    1: from test import test_support
       
    2: class TestVectorsTestCase(unittest.TestCase):
       
    1:     def test_md5_vectors(self):
               # Test the HMAC module against test vectors from the RFC.
       
    1:         def md5test(key, data, digest):
    7:             h = hmac.HMAC(key, data)
    7:             self.assertEqual(h.hexdigest().upper(), digest.upper())
       
    1:         md5test(chr(0x0b) * 16,
    1:                 "Hi There",
    1:                 "9294727A3638BB1C13F48EF8158BFC9D")
       
    1:         md5test("Jefe",
    1:                 "what do ya want for nothing?",
    1:                 "750c783e6ab0b503eaa86e310a5db738")
       
    1:         md5test(chr(0xAA)*16,
    1:                 chr(0xDD)*50,
    1:                 "56be34521d144c88dbb8c733f0e8b3f6")
       
   26:         md5test("".join([chr(i) for i in range(1, 26)]),
    1:                 chr(0xCD) * 50,
    1:                 "697eaf0aca3a3aea3a75164746ffaa79")
       
    1:         md5test(chr(0x0C) * 16,
    1:                 "Test With Truncation",
    1:                 "56461ef2342edc00f9bab995690efd4c")
       
    1:         md5test(chr(0xAA) * 80,
    1:                 "Test Using Larger Than Block-Size Key - Hash Key First",
    1:                 "6b1ab7fe4bd7bf8f0b62e6ce61b9d0cd")
       
    1:         md5test(chr(0xAA) * 80,
    1:                 ("Test Using Larger Than Block-Size Key "
                        "and Larger Than One Block-Size Data"),
    1:                 "6f630fad67cda0ee1fb1f562db3aa53e")
       
    1:     def test_sha_vectors(self):
    1:         def shatest(key, data, digest):
    7:             h = hmac.HMAC(key, data, digestmod=hashlib.sha1)
    7:             self.assertEqual(h.hexdigest().upper(), digest.upper())
       
    1:         shatest(chr(0x0b) * 20,
    1:                 "Hi There",
    1:                 "b617318655057264e28bc0b6fb378c8ef146be00")
       
    1:         shatest("Jefe",
    1:                 "what do ya want for nothing?",
    1:                 "effcdf6ae5eb2fa2d27416d5f184df9c259a7c79")
       
    1:         shatest(chr(0xAA)*20,
    1:                 chr(0xDD)*50,
    1:                 "125d7342b9ac11cd91a39af48aa17b4f63f175d3")
       
   26:         shatest("".join([chr(i) for i in range(1, 26)]),
    1:                 chr(0xCD) * 50,
    1:                 "4c9007f4026250c6bc8414f9bf50c86c2d7235da")
       
    1:         shatest(chr(0x0C) * 20,
    1:                 "Test With Truncation",
    1:                 "4c1a03424b55e07fe7f27be1d58bb9324a9a5a04")
       
    1:         shatest(chr(0xAA) * 80,
    1:                 "Test Using Larger Than Block-Size Key - Hash Key First",
    1:                 "aa4ae5e15272d00e95705637ce8a3b55ed402112")
       
    1:         shatest(chr(0xAA) * 80,
    1:                 ("Test Using Larger Than Block-Size Key "
                        "and Larger Than One Block-Size Data"),
    1:                 "e8e99d0f45237d786d6bbaa7965c7808bbff1a91")
       
    1:     def _rfc4231_test_cases(self, hashfunc):
    4:         def hmactest(key, data, hexdigests):
   24:             h = hmac.HMAC(key, data, digestmod=hashfunc)
   24:             self.assertEqual(h.hexdigest().lower(), hexdigests[hashfunc])
       
               # 4.2.  Test Case 1
    4:         hmactest(key = '\x0b'*20,
    4:                  data = 'Hi There',
    4:                  hexdigests = {
    4:                    hashlib.sha224: '896fb1128abbdf196832107cd49df33f'
                                          '47b4b1169912ba4f53684b22',
    4:                    hashlib.sha256: 'b0344c61d8db38535ca8afceaf0bf12b'
                                          '881dc200c9833da726e9376c2e32cff7',
    4:                    hashlib.sha384: 'afd03944d84895626b0825f4ab46907f'
                                          '15f9dadbe4101ec682aa034c7cebc59c'
                                          'faea9ea9076ede7f4af152e8b2fa9cb6',
    4:                    hashlib.sha512: '87aa7cdea5ef619d4ff0b4241a1d6cb0'
                                          '2379f4e2ce4ec2787ad0b30545e17cde'
                                          'daa833b7d6b8a702038b274eaea3f4e4'
                                          'be9d914eeb61f1702e696c203a126854',
                        })
       
               # 4.3.  Test Case 2
    4:         hmactest(key = 'Jefe',
    4:                  data = 'what do ya want for nothing?',
    4:                  hexdigests = {
    4:                    hashlib.sha224: 'a30e01098bc6dbbf45690f3a7e9e6d0f'
                                          '8bbea2a39e6148008fd05e44',
    4:                    hashlib.sha256: '5bdcc146bf60754e6a042426089575c7'
                                          '5a003f089d2739839dec58b964ec3843',
    4:                    hashlib.sha384: 'af45d2e376484031617f78d2b58a6b1b'
                                          '9c7ef464f5a01b47e42ec3736322445e'
                                          '8e2240ca5e69e2c78b3239ecfab21649',
    4:                    hashlib.sha512: '164b7a7bfcf819e2e395fbe73b56e0a3'
                                          '87bd64222e831fd610270cd7ea250554'
                                          '9758bf75c05a994a6d034f65f8f0e6fd'
                                          'caeab1a34d4a6b4b636e070a38bce737',
                        })
       
               # 4.4.  Test Case 3
    4:         hmactest(key = '\xaa'*20,
    4:                  data = '\xdd'*50,
    4:                  hexdigests = {
    4:                    hashlib.sha224: '7fb3cb3588c6c1f6ffa9694d7d6ad264'
                                          '9365b0c1f65d69d1ec8333ea',
    4:                    hashlib.sha256: '773ea91e36800e46854db8ebd09181a7'
                                          '2959098b3ef8c122d9635514ced565fe',
    4:                    hashlib.sha384: '88062608d3e6ad8a0aa2ace014c8a86f'
                                          '0aa635d947ac9febe83ef4e55966144b'
                                          '2a5ab39dc13814b94e3ab6e101a34f27',
    4:                    hashlib.sha512: 'fa73b0089d56a284efb0f0756c890be9'
                                          'b1b5dbdd8ee81a3655f83e33b2279d39'
                                          'bf3e848279a722c806b485a47e67c807'
                                          'b946a337bee8942674278859e13292fb',
                        })
       
               # 4.5.  Test Case 4
  104:         hmactest(key = ''.join([chr(x) for x in xrange(0x01, 0x19+1)]),
    4:                  data = '\xcd'*50,
    4:                  hexdigests = {
    4:                    hashlib.sha224: '6c11506874013cac6a2abc1bb382627c'
                                          'ec6a90d86efc012de7afec5a',
    4:                    hashlib.sha256: '82558a389a443c0ea4cc819899f2083a'
                                          '85f0faa3e578f8077a2e3ff46729665b',
    4:                    hashlib.sha384: '3e8a69b7783c25851933ab6290af6ca7'
                                          '7a9981480850009cc5577c6e1f573b4e'
                                          '6801dd23c4a7d679ccf8a386c674cffb',
    4:                    hashlib.sha512: 'b0ba465637458c6990e5a8c5f61d4af7'
                                          'e576d97ff94b872de76f8050361ee3db'
                                          'a91ca5c11aa25eb4d679275cc5788063'
                                          'a5f19741120c4f2de2adebeb10a298dd',
                        })
       
               # 4.7.  Test Case 6
    4:         hmactest(key = '\xaa'*131,
    4:                  data = 'Test Using Larger Than Block-Siz'
                               'e Key - Hash Key First',
    4:                  hexdigests = {
    4:                    hashlib.sha224: '95e9a0db962095adaebe9b2d6f0dbce2'
                                          'd499f112f2d2b7273fa6870e',
    4:                    hashlib.sha256: '60e431591ee0b67f0d8a26aacbf5b77f'
                                          '8e0bc6213728c5140546040f0ee37f54',
    4:                    hashlib.sha384: '4ece084485813e9088d2c63a041bc5b4'
                                          '4f9ef1012a2b588f3cd11f05033ac4c6'
                                          '0c2ef6ab4030fe8296248df163f44952',
    4:                    hashlib.sha512: '80b24263c7c1a3ebb71493c1dd7be8b4'
                                          '9b46d1f41b4aeec1121b013783f8f352'
                                          '6b56d037e05f2598bd0fd2215d6a1e52'
                                          '95e64f73f63f0aec8b915a985d786598',
                        })
       
               # 4.8.  Test Case 7
    4:         hmactest(key = '\xaa'*131,
    4:                  data = 'This is a test using a larger th'
                               'an block-size key and a larger t'
                               'han block-size data. The key nee'
                               'ds to be hashed before being use'
                               'd by the HMAC algorithm.',
    4:                  hexdigests = {
    4:                    hashlib.sha224: '3a854166ac5d9f023f54d517d0b39dbd'
                                          '946770db9c2b95c9f6f565d1',
    4:                    hashlib.sha256: '9b09ffa71b942fcb27635fbcd5b0e944'
                                          'bfdc63644f0713938a7f51535c3a35e2',
    4:                    hashlib.sha384: '6617178e941f020d351e2f254e8fd32c'
                                          '602420feb0b8fb9adccebb82461e99c5'
                                          'a678cc31e799176d3860e6110c46523e',
    4:                    hashlib.sha512: 'e37b6a775dc87dbaa4dfa9f96e5e3ffd'
                                          'debd71f8867289865df5a32d20cdc944'
                                          'b6022cac3c4982b10d5eeb55c3e4de15'
                                          '134676fb6de0446065c97440fa8c6a58',
                        })
       
    1:     def test_sha224_rfc4231(self):
    1:         self._rfc4231_test_cases(hashlib.sha224)
       
    1:     def test_sha256_rfc4231(self):
    1:         self._rfc4231_test_cases(hashlib.sha256)
       
    1:     def test_sha384_rfc4231(self):
    1:         self._rfc4231_test_cases(hashlib.sha384)
       
    1:     def test_sha512_rfc4231(self):
    1:         self._rfc4231_test_cases(hashlib.sha512)
       
    1:     def test_legacy_block_size_warnings(self):
    2:         class MockCrazyHash(object):
    1:             """Ain't no block_size attribute here."""
    1:             def __init__(self, *args):
    4:                 self._x = hashlib.sha1(*args)
    4:                 self.digest_size = self._x.digest_size
    1:             def update(self, v):
>>>>>>                 self._x.update(v)
    1:             def digest(self):
>>>>>>                 return self._x.digest()
       
    1:         with warnings.catch_warnings():
    1:             warnings.simplefilter('error', RuntimeWarning)
    1:             with self.assertRaises(RuntimeWarning):
    1:                 hmac.HMAC('a', 'b', digestmod=MockCrazyHash)
>>>>>>                 self.fail('Expected warning about missing block_size')
       
    1:             MockCrazyHash.block_size = 1
    1:             with self.assertRaises(RuntimeWarning):
    1:                 hmac.HMAC('a', 'b', digestmod=MockCrazyHash)
>>>>>>                 self.fail('Expected warning about small block_size')
       
       
       
    2: class ConstructorTestCase(unittest.TestCase):
       
    1:     def test_normal(self):
               # Standard constructor call.
    1:         failed = 0
    1:         try:
    1:             h = hmac.HMAC("key")
>>>>>>         except:
>>>>>>             self.fail("Standard constructor call raised exception.")
       
    1:     def test_withtext(self):
               # Constructor call with text.
    1:         try:
    1:             h = hmac.HMAC("key", "hash this!")
>>>>>>         except:
>>>>>>             self.fail("Constructor call with text argument raised exception.")
       
    1:     def test_withmodule(self):
               # Constructor call with text and digest module.
    1:         try:
    1:             h = hmac.HMAC("key", "", hashlib.sha1)
>>>>>>         except:
>>>>>>             self.fail("Constructor call with hashlib.sha1 raised exception.")
       
    2: class SanityTestCase(unittest.TestCase):
       
    1:     def test_default_is_md5(self):
               # Testing if HMAC defaults to MD5 algorithm.
               # NOTE: this whitebox test depends on the hmac class internals
    1:         h = hmac.HMAC("key")
    1:         self.assertTrue(h.digest_cons == hashlib.md5)
       
    1:     def test_exercise_all_methods(self):
               # Exercising all methods once.
               # This must not raise any exceptions
    1:         try:
    1:             h = hmac.HMAC("my secret key")
    1:             h.update("compute the hash of this text!")
    1:             dig = h.digest()
    1:             dig = h.hexdigest()
    1:             h2 = h.copy()
>>>>>>         except:
>>>>>>             self.fail("Exception raised during normal usage of HMAC class.")
       
    2: class CopyTestCase(unittest.TestCase):
       
    1:     def test_attributes(self):
               # Testing if attributes are of same type.
    1:         h1 = hmac.HMAC("key")
    1:         h2 = h1.copy()
    1:         self.assertTrue(h1.digest_cons == h2.digest_cons,
    1:             "digest constructors don't match.")
    1:         self.assertTrue(type(h1.inner) == type(h2.inner),
    1:             "Types of inner don't match.")
    1:         self.assertTrue(type(h1.outer) == type(h2.outer),
    1:             "Types of outer don't match.")
       
    1:     def test_realcopy(self):
               # Testing if the copy method created a real copy.
    1:         h1 = hmac.HMAC("key")
    1:         h2 = h1.copy()
               # Using id() in case somebody has overridden __cmp__.
    1:         self.assertTrue(id(h1) != id(h2), "No real copy of the HMAC instance.")
    1:         self.assertTrue(id(h1.inner) != id(h2.inner),
    1:             "No real copy of the attribute 'inner'.")
    1:         self.assertTrue(id(h1.outer) != id(h2.outer),
    1:             "No real copy of the attribute 'outer'.")
       
    1:     def test_equality(self):
               # Testing if the copy has the same digests.
    1:         h1 = hmac.HMAC("key")
    1:         h1.update("some random text")
    1:         h2 = h1.copy()
    1:         self.assertTrue(h1.digest() == h2.digest(),
    1:             "Digest of copy doesn't match original digest.")
    1:         self.assertTrue(h1.hexdigest() == h2.hexdigest(),
    1:             "Hexdigest of copy doesn't match original hexdigest.")
       
       
    2: class CompareDigestTestCase(unittest.TestCase):
       
    1:     def test_compare_digest(self):
               # Testing input type exception handling
    1:         a, b = 100, 200
    1:         self.assertRaises(TypeError, hmac.compare_digest, a, b)
    1:         a, b = 100, b"foobar"
    1:         self.assertRaises(TypeError, hmac.compare_digest, a, b)
    1:         a, b = b"foobar", 200
    1:         self.assertRaises(TypeError, hmac.compare_digest, a, b)
    1:         a, b = u"foobar", b"foobar"
    1:         self.assertRaises(TypeError, hmac.compare_digest, a, b)
    1:         a, b = b"foobar", u"foobar"
    1:         self.assertRaises(TypeError, hmac.compare_digest, a, b)
       
               # Testing bytes of different lengths
    1:         a, b = b"foobar", b"foo"
    1:         self.assertFalse(hmac.compare_digest(a, b))
    1:         a, b = b"\xde\xad\xbe\xef", b"\xde\xad"
    1:         self.assertFalse(hmac.compare_digest(a, b))
       
               # Testing bytes of same lengths, different values
    1:         a, b = b"foobar", b"foobaz"
    1:         self.assertFalse(hmac.compare_digest(a, b))
    1:         a, b = b"\xde\xad\xbe\xef", b"\xab\xad\x1d\xea"
    1:         self.assertFalse(hmac.compare_digest(a, b))
       
               # Testing bytes of same lengths, same values
    1:         a, b = b"foobar", b"foobar"
    1:         self.assertTrue(hmac.compare_digest(a, b))
    1:         a, b = b"\xde\xad\xbe\xef", b"\xde\xad\xbe\xef"
    1:         self.assertTrue(hmac.compare_digest(a, b))
       
               # Testing bytearrays of same lengths, same values
    1:         a, b = bytearray(b"foobar"), bytearray(b"foobar")
    1:         self.assertTrue(hmac.compare_digest(a, b))
       
               # Testing bytearrays of diffeent lengths
    1:         a, b = bytearray(b"foobar"), bytearray(b"foo")
    1:         self.assertFalse(hmac.compare_digest(a, b))
       
               # Testing bytearrays of same lengths, different values
    1:         a, b = bytearray(b"foobar"), bytearray(b"foobaz")
    1:         self.assertFalse(hmac.compare_digest(a, b))
       
               # Testing byte and bytearray of same lengths, same values
    1:         a, b = bytearray(b"foobar"), b"foobar"
    1:         self.assertTrue(hmac.compare_digest(a, b))
    1:         self.assertTrue(hmac.compare_digest(b, a))
       
               # Testing byte bytearray of diffeent lengths
    1:         a, b = bytearray(b"foobar"), b"foo"
    1:         self.assertFalse(hmac.compare_digest(a, b))
    1:         self.assertFalse(hmac.compare_digest(b, a))
       
               # Testing byte and bytearray of same lengths, different values
    1:         a, b = bytearray(b"foobar"), b"foobaz"
    1:         self.assertFalse(hmac.compare_digest(a, b))
    1:         self.assertFalse(hmac.compare_digest(b, a))
       
               # Testing str of same lengths
    1:         a, b = "foobar", "foobar"
    1:         self.assertTrue(hmac.compare_digest(a, b))
       
               # Testing str of diffeent lengths
    1:         a, b = "foo", "foobar"
    1:         self.assertFalse(hmac.compare_digest(a, b))
       
               # Testing bytes of same lengths, different values
    1:         a, b = "foobar", "foobaz"
    1:         self.assertFalse(hmac.compare_digest(a, b))
       
               # Testing error cases
    1:         a, b = u"foobar", b"foobar"
    1:         self.assertRaises(TypeError, hmac.compare_digest, a, b)
    1:         a, b = b"foobar", u"foobar"
    1:         self.assertRaises(TypeError, hmac.compare_digest, a, b)
    1:         a, b = b"foobar", 1
    1:         self.assertRaises(TypeError, hmac.compare_digest, a, b)
    1:         a, b = 100, 200
    1:         self.assertRaises(TypeError, hmac.compare_digest, a, b)
    1:         a, b = "fooä", "fooä"
    1:         self.assertTrue(hmac.compare_digest(a, b))
       
    1:         with test_support.check_py3k_warnings():
                   # subclasses are supported by ignore __eq__
    2:             class mystr(str):
    1:                 def __eq__(self, other):
>>>>>>                     return False
       
    1:         a, b = mystr("foobar"), mystr("foobar")
    1:         self.assertTrue(hmac.compare_digest(a, b))
    1:         a, b = mystr("foobar"), "foobar"
    1:         self.assertTrue(hmac.compare_digest(a, b))
    1:         a, b = mystr("foobar"), mystr("foobaz")
    1:         self.assertFalse(hmac.compare_digest(a, b))
       
    1:         with test_support.check_py3k_warnings():
    2:             class mybytes(bytes):
    1:                 def __eq__(self, other):
>>>>>>                     return False
       
    1:         a, b = mybytes(b"foobar"), mybytes(b"foobar")
    1:         self.assertTrue(hmac.compare_digest(a, b))
    1:         a, b = mybytes(b"foobar"), b"foobar"
    1:         self.assertTrue(hmac.compare_digest(a, b))
    1:         a, b = mybytes(b"foobar"), mybytes(b"foobaz")
    1:         self.assertFalse(hmac.compare_digest(a, b))
       
       
    1: def test_main():
    1:     test_support.run_unittest(
    1:         TestVectorsTestCase,
    1:         ConstructorTestCase,
    1:         SanityTestCase,
    1:         CopyTestCase,
    1:         CompareDigestTestCase,
           )
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
