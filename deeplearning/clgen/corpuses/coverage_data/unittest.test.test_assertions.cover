    1: import datetime
       
    1: import unittest
       
       
    2: class Test_Assertions(unittest.TestCase):
    1:     def test_AlmostEqual(self):
    1:         self.assertAlmostEqual(1.00000001, 1.0)
    1:         self.assertNotAlmostEqual(1.0000001, 1.0)
    1:         self.assertRaises(self.failureException,
    1:                           self.assertAlmostEqual, 1.0000001, 1.0)
    1:         self.assertRaises(self.failureException,
    1:                           self.assertNotAlmostEqual, 1.00000001, 1.0)
       
    1:         self.assertAlmostEqual(1.1, 1.0, places=0)
    1:         self.assertRaises(self.failureException,
    1:                           self.assertAlmostEqual, 1.1, 1.0, places=1)
       
    1:         self.assertAlmostEqual(0, .1+.1j, places=0)
    1:         self.assertNotAlmostEqual(0, .1+.1j, places=1)
    1:         self.assertRaises(self.failureException,
    1:                           self.assertAlmostEqual, 0, .1+.1j, places=1)
    1:         self.assertRaises(self.failureException,
    1:                           self.assertNotAlmostEqual, 0, .1+.1j, places=0)
       
    1:         self.assertAlmostEqual(float('inf'), float('inf'))
    1:         self.assertRaises(self.failureException, self.assertNotAlmostEqual,
    1:                           float('inf'), float('inf'))
       
    1:     def test_AmostEqualWithDelta(self):
    1:         self.assertAlmostEqual(1.1, 1.0, delta=0.5)
    1:         self.assertAlmostEqual(1.0, 1.1, delta=0.5)
    1:         self.assertNotAlmostEqual(1.1, 1.0, delta=0.05)
    1:         self.assertNotAlmostEqual(1.0, 1.1, delta=0.05)
       
    1:         self.assertAlmostEqual(1.0, 1.0, delta=0.5)
    1:         self.assertRaises(self.failureException, self.assertNotAlmostEqual,
    1:                           1.0, 1.0, delta=0.5)
       
    1:         self.assertRaises(self.failureException, self.assertAlmostEqual,
    1:                           1.1, 1.0, delta=0.05)
    1:         self.assertRaises(self.failureException, self.assertNotAlmostEqual,
    1:                           1.1, 1.0, delta=0.5)
       
    1:         self.assertRaises(TypeError, self.assertAlmostEqual,
    1:                           1.1, 1.0, places=2, delta=2)
    1:         self.assertRaises(TypeError, self.assertNotAlmostEqual,
    1:                           1.1, 1.0, places=2, delta=2)
       
    1:         first = datetime.datetime.now()
    1:         second = first + datetime.timedelta(seconds=10)
    1:         self.assertAlmostEqual(first, second,
    1:                                delta=datetime.timedelta(seconds=20))
    1:         self.assertNotAlmostEqual(first, second,
    1:                                   delta=datetime.timedelta(seconds=5))
       
    1:     def test_assertRaises(self):
    1:         def _raise(e):
    3:             raise e
    1:         self.assertRaises(KeyError, _raise, KeyError)
    1:         self.assertRaises(KeyError, _raise, KeyError("key"))
    1:         try:
    2:             self.assertRaises(KeyError, lambda: None)
    1:         except self.failureException as e:
    1:             self.assertIn("KeyError not raised", e.args)
               else:
>>>>>>             self.fail("assertRaises() didn't fail")
    1:         try:
    1:             self.assertRaises(KeyError, _raise, ValueError)
    1:         except ValueError:
    1:             pass
               else:
>>>>>>             self.fail("assertRaises() didn't let exception pass through")
    1:         with self.assertRaises(KeyError) as cm:
    1:             try:
    1:                 raise KeyError
    1:             except Exception, e:
    1:                 raise
    1:         self.assertIs(cm.exception, e)
       
    1:         with self.assertRaises(KeyError):
    1:             raise KeyError("key")
    1:         try:
    1:             with self.assertRaises(KeyError):
    1:                 pass
    1:         except self.failureException as e:
    1:             self.assertIn("KeyError not raised", e.args)
               else:
>>>>>>             self.fail("assertRaises() didn't fail")
    1:         try:
    1:             with self.assertRaises(KeyError):
    1:                 raise ValueError
    1:         except ValueError:
    1:             pass
               else:
>>>>>>             self.fail("assertRaises() didn't let exception pass through")
       
    1:     def testAssertNotRegexpMatches(self):
    1:         self.assertNotRegexpMatches('Ala ma kota', r'r+')
    1:         try:
    1:             self.assertNotRegexpMatches('Ala ma kota', r'k.t', 'Message')
    1:         except self.failureException, e:
    1:             self.assertIn("'kot'", e.args[0])
    1:             self.assertIn('Message', e.args[0])
               else:
>>>>>>             self.fail('assertNotRegexpMatches should have failed.')
       
       
    2: class TestLongMessage(unittest.TestCase):
           """Test that the individual asserts honour longMessage.
           This actually tests all the message behaviour for
    1:     asserts that use longMessage."""
       
    1:     def setUp(self):
   48:         class TestableTestFalse(unittest.TestCase):
   24:             longMessage = False
   24:             failureException = self.failureException
       
   24:             def testTest(self):
>>>>>>                 pass
       
   48:         class TestableTestTrue(unittest.TestCase):
   24:             longMessage = True
   24:             failureException = self.failureException
       
   24:             def testTest(self):
>>>>>>                 pass
       
   24:         self.testableTrue = TestableTestTrue('testTest')
   24:         self.testableFalse = TestableTestFalse('testTest')
       
    1:     def testDefault(self):
    1:         self.assertFalse(unittest.TestCase.longMessage)
       
    1:     def test_formatMsg(self):
    1:         self.assertEqual(self.testableFalse._formatMessage(None, "foo"), "foo")
    1:         self.assertEqual(self.testableFalse._formatMessage("foo", "bar"), "foo")
       
    1:         self.assertEqual(self.testableTrue._formatMessage(None, "foo"), "foo")
    1:         self.assertEqual(self.testableTrue._formatMessage("foo", "bar"), "bar : foo")
       
               # This blows up if _formatMessage uses string concatenation
    1:         self.testableTrue._formatMessage(object(), 'foo')
       
    1:     def test_formatMessage_unicode_error(self):
  257:         one = ''.join(chr(i) for i in range(255))
               # this used to cause a UnicodeDecodeError constructing msg
    1:         self.testableTrue._formatMessage(one, u'\uFFFD')
       
    1:     def assertMessages(self, methodName, args, errors):
   21:         def getMethod(i):
   84:             useTestableFalse  = i < 2
   84:             if useTestableFalse:
   42:                 test = self.testableFalse
                   else:
   42:                 test = self.testableTrue
   84:             return getattr(test, methodName)
       
  105:         for i, expected_regexp in enumerate(errors):
   84:             testMethod = getMethod(i)
   84:             kwargs = {}
   84:             withMsg = i % 2
   84:             if withMsg:
   42:                 kwargs = {"msg": "oops"}
       
   84:             with self.assertRaisesRegexp(self.failureException,
   84:                                          expected_regexp=expected_regexp):
   84:                 testMethod(*args, **kwargs)
       
    1:     def testAssertTrue(self):
    1:         self.assertMessages('assertTrue', (False,),
    1:                             ["^False is not true$", "^oops$", "^False is not true$",
    1:                              "^False is not true : oops$"])
       
    1:     def testAssertFalse(self):
    1:         self.assertMessages('assertFalse', (True,),
    1:                             ["^True is not false$", "^oops$", "^True is not false$",
    1:                              "^True is not false : oops$"])
       
    1:     def testNotEqual(self):
    1:         self.assertMessages('assertNotEqual', (1, 1),
    1:                             ["^1 == 1$", "^oops$", "^1 == 1$",
    1:                              "^1 == 1 : oops$"])
       
    1:     def testAlmostEqual(self):
    1:         self.assertMessages('assertAlmostEqual', (1, 2),
    1:                             ["^1 != 2 within 7 places$", "^oops$",
    1:                              "^1 != 2 within 7 places$", "^1 != 2 within 7 places : oops$"])
       
    1:     def testNotAlmostEqual(self):
    1:         self.assertMessages('assertNotAlmostEqual', (1, 1),
    1:                             ["^1 == 1 within 7 places$", "^oops$",
    1:                              "^1 == 1 within 7 places$", "^1 == 1 within 7 places : oops$"])
       
    1:     def test_baseAssertEqual(self):
    1:         self.assertMessages('_baseAssertEqual', (1, 2),
    1:                             ["^1 != 2$", "^oops$", "^1 != 2$", "^1 != 2 : oops$"])
       
    1:     def testAssertSequenceEqual(self):
               # Error messages are multiline so not testing on full message
               # assertTupleEqual and assertListEqual delegate to this method
    1:         self.assertMessages('assertSequenceEqual', ([], [None]),
    1:                             ["\+ \[None\]$", "^oops$", r"\+ \[None\]$",
    1:                              r"\+ \[None\] : oops$"])
       
    1:     def testAssertSetEqual(self):
    1:         self.assertMessages('assertSetEqual', (set(), set([None])),
    1:                             ["None$", "^oops$", "None$",
    1:                              "None : oops$"])
       
    1:     def testAssertIn(self):
    1:         self.assertMessages('assertIn', (None, []),
    1:                             ['^None not found in \[\]$', "^oops$",
    1:                              '^None not found in \[\]$',
    1:                              '^None not found in \[\] : oops$'])
       
    1:     def testAssertNotIn(self):
    1:         self.assertMessages('assertNotIn', (None, [None]),
    1:                             ['^None unexpectedly found in \[None\]$', "^oops$",
    1:                              '^None unexpectedly found in \[None\]$',
    1:                              '^None unexpectedly found in \[None\] : oops$'])
       
    1:     def testAssertDictEqual(self):
    1:         self.assertMessages('assertDictEqual', ({}, {'key': 'value'}),
    1:                             [r"\+ \{'key': 'value'\}$", "^oops$",
    1:                              "\+ \{'key': 'value'\}$",
    1:                              "\+ \{'key': 'value'\} : oops$"])
       
    1:     def testAssertDictContainsSubset(self):
    1:         self.assertMessages('assertDictContainsSubset', ({'key': 'value'}, {}),
    1:                             ["^Missing: 'key'$", "^oops$",
    1:                              "^Missing: 'key'$",
    1:                              "^Missing: 'key' : oops$"])
       
    1:     def testAssertMultiLineEqual(self):
    1:         self.assertMessages('assertMultiLineEqual', ("", "foo"),
    1:                             [r"\+ foo$", "^oops$",
    1:                              r"\+ foo$",
    1:                              r"\+ foo : oops$"])
       
    1:     def testAssertLess(self):
    1:         self.assertMessages('assertLess', (2, 1),
    1:                             ["^2 not less than 1$", "^oops$",
    1:                              "^2 not less than 1$", "^2 not less than 1 : oops$"])
       
    1:     def testAssertLessEqual(self):
    1:         self.assertMessages('assertLessEqual', (2, 1),
    1:                             ["^2 not less than or equal to 1$", "^oops$",
    1:                              "^2 not less than or equal to 1$",
    1:                              "^2 not less than or equal to 1 : oops$"])
       
    1:     def testAssertGreater(self):
    1:         self.assertMessages('assertGreater', (1, 2),
    1:                             ["^1 not greater than 2$", "^oops$",
    1:                              "^1 not greater than 2$",
    1:                              "^1 not greater than 2 : oops$"])
       
    1:     def testAssertGreaterEqual(self):
    1:         self.assertMessages('assertGreaterEqual', (1, 2),
    1:                             ["^1 not greater than or equal to 2$", "^oops$",
    1:                              "^1 not greater than or equal to 2$",
    1:                              "^1 not greater than or equal to 2 : oops$"])
       
    1:     def testAssertIsNone(self):
    1:         self.assertMessages('assertIsNone', ('not None',),
    1:                             ["^'not None' is not None$", "^oops$",
    1:                              "^'not None' is not None$",
    1:                              "^'not None' is not None : oops$"])
       
    1:     def testAssertIsNotNone(self):
    1:         self.assertMessages('assertIsNotNone', (None,),
    1:                             ["^unexpectedly None$", "^oops$",
    1:                              "^unexpectedly None$",
    1:                              "^unexpectedly None : oops$"])
       
    1:     def testAssertIs(self):
    1:         self.assertMessages('assertIs', (None, 'foo'),
    1:                             ["^None is not 'foo'$", "^oops$",
    1:                              "^None is not 'foo'$",
    1:                              "^None is not 'foo' : oops$"])
       
    1:     def testAssertIsNot(self):
    1:         self.assertMessages('assertIsNot', (None, None),
    1:                             ["^unexpectedly identical: None$", "^oops$",
    1:                              "^unexpectedly identical: None$",
    1:                              "^unexpectedly identical: None : oops$"])
       
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
