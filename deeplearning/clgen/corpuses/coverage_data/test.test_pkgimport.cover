    1: import os, sys, string, random, tempfile, unittest
       
    1: from test.test_support import run_unittest
       
    2: class TestImport(unittest.TestCase):
       
    1:     def __init__(self, *args, **kw):
    1:         self.package_name = 'PACKAGE_'
    1:         while self.package_name in sys.modules:
>>>>>>             self.package_name += random.choose(string.letters)
    1:         self.module_name = self.package_name + '.foo'
    1:         unittest.TestCase.__init__(self, *args, **kw)
       
    1:     def remove_modules(self):
    3:         for module_name in (self.package_name, self.module_name):
    2:             if module_name in sys.modules:
    2:                 del sys.modules[module_name]
       
    1:     def setUp(self):
    1:         self.test_dir = tempfile.mkdtemp()
    1:         sys.path.append(self.test_dir)
    1:         self.package_dir = os.path.join(self.test_dir,
    1:                                         self.package_name)
    1:         os.mkdir(self.package_dir)
    1:         open(os.path.join(
    1:                 self.package_dir, '__init__'+os.extsep+'py'), 'w').close()
    1:         self.module_path = os.path.join(self.package_dir, 'foo'+os.extsep+'py')
       
    1:     def tearDown(self):
    5:         for file in os.listdir(self.package_dir):
    4:             os.remove(os.path.join(self.package_dir, file))
    1:         os.rmdir(self.package_dir)
    1:         os.rmdir(self.test_dir)
    1:         self.assertNotEqual(sys.path.count(self.test_dir), 0)
    1:         sys.path.remove(self.test_dir)
    1:         self.remove_modules()
       
    1:     def rewrite_file(self, contents):
    9:         for extension in "co":
    6:             compiled_path = self.module_path + extension
    6:             if os.path.exists(compiled_path):
    1:                 os.remove(compiled_path)
    3:         f = open(self.module_path, 'w')
    3:         f.write(contents)
    3:         f.close()
       
    1:     def test_package_import__semantics(self):
       
               # Generate a couple of broken modules to try importing.
       
               # ...try loading the module when there's a SyntaxError
    1:         self.rewrite_file('for')
    1:         try: __import__(self.module_name)
    1:         except SyntaxError: pass
>>>>>>         else: raise RuntimeError, 'Failed to induce SyntaxError'
    1:         self.assertNotIn(self.module_name, sys.modules)
    1:         self.assertFalse(hasattr(sys.modules[self.package_name], 'foo'))
       
               # ...make up a variable name that isn't bound in __builtins__
    1:         var = 'a'
    1:         while var in dir(__builtins__):
>>>>>>             var += random.choose(string.letters)
       
               # ...make a module that just contains that
    1:         self.rewrite_file(var)
       
    1:         try: __import__(self.module_name)
    1:         except NameError: pass
>>>>>>         else: raise RuntimeError, 'Failed to induce NameError.'
       
               # ...now  change  the module  so  that  the NameError  doesn't
               # happen
    1:         self.rewrite_file('%s = 1' % var)
    1:         module = __import__(self.module_name).foo
    1:         self.assertEqual(getattr(module, var), 1)
       
       
    1: def test_main():
    1:     run_unittest(TestImport)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
