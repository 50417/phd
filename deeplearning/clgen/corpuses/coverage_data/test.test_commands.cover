       '''
          Tests for commands module
          Nick Mathewson
    1: '''
    1: import unittest
    1: import os, tempfile, re
       
    1: from test.test_support import run_unittest, reap_children, import_module, \
                                     check_warnings
       
       # Silence Py3k warning
    1: commands = import_module('commands', deprecated=True)
       
       # The module says:
       #   "NB This only works (and is only relevant) for UNIX."
       #
       # Actually, getoutput should work on any platform with an os.popen, but
       # I'll take the comment as given, and skip this suite.
       
    1: if os.name != 'posix':
>>>>>>     raise unittest.SkipTest('Not posix; skipping test_commands')
       
       
    2: class CommandTests(unittest.TestCase):
       
    1:     def test_getoutput(self):
    1:         self.assertEqual(commands.getoutput('echo xyzzy'), 'xyzzy')
    1:         self.assertEqual(commands.getstatusoutput('echo xyzzy'), (0, 'xyzzy'))
       
               # we use mkdtemp in the next line to create an empty directory
               # under our exclusive control; from that, we can invent a pathname
               # that we _know_ won't exist.  This is guaranteed to fail.
    1:         dir = None
    1:         try:
    1:             dir = tempfile.mkdtemp()
    1:             name = os.path.join(dir, "foo")
       
    1:             status, output = commands.getstatusoutput('cat ' + name)
    1:             self.assertNotEqual(status, 0)
               finally:
    1:             if dir is not None:
    1:                 os.rmdir(dir)
       
    1:     def test_getstatus(self):
               # This pattern should match 'ls -ld /.' on any posix
               # system, however perversely configured.  Even on systems
               # (e.g., Cygwin) where user and group names can have spaces:
               #     drwxr-xr-x   15 Administ Domain U     4096 Aug 12 12:50 /
               #     drwxr-xr-x   15 Joe User My Group     4096 Aug 12 12:50 /
               # Note that the first case above has a space in the group name
               # while the second one has a space in both names.
               # Special attributes supported:
               #   + = has ACLs
               #   @ = has Mac OS X extended attributes
               #   . = has a SELinux security context
               pat = r'''d.........   # It is a directory.
                         [.+@]?       # It may have special attributes.
                         \s+\d+       # It has some number of links.
                         [^/]*        # Skip user, group, size, and date.
                         /\.          # and end with the name of the file.
    1:                '''
       
    1:         with check_warnings((".*commands.getstatus.. is deprecated",
    1:                              DeprecationWarning)):
    1:             self.assertTrue(re.match(pat, commands.getstatus("/."), re.VERBOSE))
       
       
    1: def test_main():
    1:     run_unittest(CommandTests)
    1:     reap_children()
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
