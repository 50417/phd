    1: """Tests for distutils.ccompiler."""
    1: import os
    1: import unittest
    1: from test.test_support import captured_stdout
       
    1: from distutils.ccompiler import (gen_lib_options, CCompiler,
                                        get_default_compiler)
    1: from distutils.sysconfig import customize_compiler
    1: from distutils import debug
    1: from distutils.tests import support
       
    2: class FakeCompiler(object):
    1:     def library_dir_option(self, dir):
    2:         return "-L" + dir
       
    1:     def runtime_library_dir_option(self, dir):
    1:         return ["-cool", "-R" + dir]
       
    1:     def find_library_file(self, dirs, lib, debug=0):
    1:         return 'found'
       
    1:     def library_option(self, lib):
    1:         return "-l" + lib
       
    2: class CCompilerTestCase(support.EnvironGuard, unittest.TestCase):
       
    1:     def test_gen_lib_options(self):
    1:         compiler = FakeCompiler()
    1:         libdirs = ['lib1', 'lib2']
    1:         runlibdirs = ['runlib1']
    1:         libs = [os.path.join('dir', 'name'), 'name2']
       
    1:         opts = gen_lib_options(compiler, libdirs, runlibdirs, libs)
    1:         wanted = ['-Llib1', '-Llib2', '-cool', '-Rrunlib1', 'found',
    1:                   '-lname2']
    1:         self.assertEqual(opts, wanted)
       
    1:     def test_debug_print(self):
       
    2:         class MyCCompiler(CCompiler):
    1:             executables = {}
       
    1:         compiler = MyCCompiler()
    1:         with captured_stdout() as stdout:
    1:             compiler.debug_print('xxx')
    1:         stdout.seek(0)
    1:         self.assertEqual(stdout.read(), '')
       
    1:         debug.DEBUG = True
    1:         try:
    1:             with captured_stdout() as stdout:
    1:                 compiler.debug_print('xxx')
    1:             stdout.seek(0)
    1:             self.assertEqual(stdout.read(), 'xxx\n')
               finally:
    1:             debug.DEBUG = False
       
    1:     @unittest.skipUnless(get_default_compiler() == 'unix',
    1:                          'not testing if default compiler is not unix')
           def test_customize_compiler(self):
    1:         os.environ['AR'] = 'my_ar'
    1:         os.environ['ARFLAGS'] = '-arflags'
       
               # make sure AR gets caught
    2:         class compiler:
    1:             compiler_type = 'unix'
       
    1:             def set_executables(self, **kw):
    1:                 self.exes = kw
       
    1:         comp = compiler()
    1:         customize_compiler(comp)
    1:         self.assertEqual(comp.exes['archiver'], 'my_ar -arflags')
       
    1: def test_suite():
    1:     return unittest.makeSuite(CCompilerTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main(defaultTest="test_suite")
