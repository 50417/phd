    1: import imghdr
    1: import io
    1: import sys
    1: import unittest
    1: from test.test_support import findfile, TESTFN, unlink, run_unittest
       
       TEST_FILES = (
    1:     ('python.png', 'png'),
    1:     ('python.gif', 'gif'),
    1:     ('python.bmp', 'bmp'),
    1:     ('python.ppm', 'ppm'),
    1:     ('python.pgm', 'pgm'),
    1:     ('python.pbm', 'pbm'),
    1:     ('python.jpg', 'jpeg'),
    1:     ('python.ras', 'rast'),
    1:     ('python.sgi', 'rgb'),
    1:     ('python.tiff', 'tiff'),
    1:     ('python.xbm', 'xbm')
       )
       
    2: class UnseekableIO(io.FileIO):
    1:     def tell(self):
    1:         raise io.UnsupportedOperation
       
    1:     def seek(self, *args, **kwargs):
>>>>>>         raise io.UnsupportedOperation
       
    2: class TestImghdr(unittest.TestCase):
    1:     @classmethod
           def setUpClass(cls):
    1:         cls.testfile = findfile('python.png', subdir='imghdrdata')
    1:         with open(cls.testfile, 'rb') as stream:
    1:             cls.testdata = stream.read()
       
    1:     def tearDown(self):
    9:         unlink(TESTFN)
       
    1:     def test_data(self):
   12:         for filename, expected in TEST_FILES:
   11:             filename = findfile(filename, subdir='imghdrdata')
   11:             self.assertEqual(imghdr.what(filename), expected)
   11:             ufilename = filename.decode(sys.getfilesystemencoding())
   11:             self.assertEqual(imghdr.what(ufilename), expected)
   11:             with open(filename, 'rb') as stream:
   11:                 self.assertEqual(imghdr.what(stream), expected)
   11:             with open(filename, 'rb') as stream:
   11:                 data = stream.read()
   11:             self.assertEqual(imghdr.what(None, data), expected)
       
    1:     def test_register_test(self):
    1:         def test_jumbo(h, file):
    1:             if h.startswith(b'eggs'):
    1:                 return 'ham'
    1:         imghdr.tests.append(test_jumbo)
    1:         self.addCleanup(imghdr.tests.pop)
    1:         self.assertEqual(imghdr.what(None, b'eggs'), 'ham')
       
    1:     def test_file_pos(self):
    1:         with open(TESTFN, 'wb') as stream:
    1:             stream.write(b'ababagalamaga')
    1:             pos = stream.tell()
    1:             stream.write(self.testdata)
    1:         with open(TESTFN, 'rb') as stream:
    1:             stream.seek(pos)
    1:             self.assertEqual(imghdr.what(stream), 'png')
    1:             self.assertEqual(stream.tell(), pos)
       
    1:     def test_bad_args(self):
    1:         with self.assertRaises(TypeError):
    1:             imghdr.what()
    1:         with self.assertRaises(AttributeError):
    1:             imghdr.what(None)
    1:         with self.assertRaises(TypeError):
    1:             imghdr.what(self.testfile, 1)
    1:         with open(self.testfile, 'rb') as f:
    1:             with self.assertRaises(AttributeError):
    1:                 imghdr.what(f.fileno())
       
    1:     def test_invalid_headers(self):
    1:         for header in (b'\211PN\r\n',
                              b'\001\331',
                              b'\x59\xA6',
                              b'cutecat',
                              b'000000JFI',
    7:                        b'GIF80'):
    6:             self.assertIsNone(imghdr.what(None, header))
       
    1:     def test_missing_file(self):
    1:         with self.assertRaises(IOError):
    1:             imghdr.what('missing')
       
    1:     def test_closed_file(self):
    1:         stream = open(self.testfile, 'rb')
    1:         stream.close()
    1:         with self.assertRaises(ValueError) as cm:
    1:             imghdr.what(stream)
    1:         stream = io.BytesIO(self.testdata)
    1:         stream.close()
    1:         with self.assertRaises(ValueError) as cm:
    1:             imghdr.what(stream)
       
    1:     def test_unseekable(self):
    1:         with open(TESTFN, 'wb') as stream:
    1:             stream.write(self.testdata)
    1:         with UnseekableIO(TESTFN, 'rb') as stream:
    1:             with self.assertRaises(io.UnsupportedOperation):
    1:                 imghdr.what(stream)
       
    1:     def test_output_stream(self):
    1:         with open(TESTFN, 'wb') as stream:
    1:             stream.write(self.testdata)
    1:             stream.seek(0)
    1:             with self.assertRaises(IOError) as cm:
    1:                 imghdr.what(stream)
       
    1: def test_main():
    1:     run_unittest(TestImghdr)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
