    1: "Utility functions used by the btm_matcher module"
       
    1: from . import pytree
    1: from .pgen2 import grammar, token
    1: from .pygram import pattern_symbols, python_symbols
       
    1: syms = pattern_symbols
    1: pysyms = python_symbols
    1: tokens = grammar.opmap
    1: token_labels = token
       
    1: TYPE_ANY = -1
    1: TYPE_ALTERNATIVES = -2
    1: TYPE_GROUP = -3
       
    2: class MinNode(object):
           """This class serves as an intermediate representation of the
           pattern tree during the conversion to sets of leaf-to-root
    1:     subpatterns"""
       
    1:     def __init__(self, type=None, name=None):
31378:         self.type = type
31378:         self.name = name
31378:         self.children = []
31378:         self.leaf = False
31378:         self.parent = None
31378:         self.alternatives = []
31378:         self.group = []
       
    1:     def __repr__(self):
>>>>>>         return str(self.type) + ' ' + str(self.name)
       
    1:     def leaf_to_root(self):
               """Internal method. Returns a characteristic path of the
               pattern tree. This method must be run for all leaves until the
               linear subpatterns are merged into a single"""
19796:         node = self
19796:         subp = []
50060:         while node:
49271:             if node.type == TYPE_ALTERNATIVES:
13958:                 node.alternatives.append(subp)
13958:                 if len(node.alternatives) == len(node.children):
                           #last alternative
 1621:                     subp = [tuple(node.alternatives)]
 1621:                     node.alternatives = []
 1621:                     node = node.parent
 1621:                     continue
                       else:
12337:                     node = node.parent
12337:                     subp = None
12337:                     break
       
35313:             if node.type == TYPE_GROUP:
11176:                 node.group.append(subp)
                       #probably should check the number of leaves
11176:                 if len(node.group) == len(node.children):
 4506:                     subp = get_characteristic_subpattern(node.group)
 4506:                     node.group = []
 4506:                     node = node.parent
 4506:                     continue
                       else:
 6670:                     node = node.parent
 6670:                     subp = None
 6670:                     break
       
24137:             if node.type == token_labels.NAME and node.name:
                       #in case of type=name, use the name instead
14643:                 subp.append(node.name)
                   else:
 9494:                 subp.append(node.type)
       
24137:             node = node.parent
19796:         return subp
       
    1:     def get_linear_subpattern(self):
               """Drives the leaf_to_root method. The reason that
               leaf_to_root must be run multiple times is because we need to
               reject 'group' matches; for example the alternative form
               (a | b c) creates a group [b c] that needs to be matched. Since
               matching multiple linear patterns overcomes the automaton's
               capabilities, leaf_to_root merges each group into a single
               choice based on 'characteristic'ity,
       
               i.e. (a|b c) -> (a|b) if b more characteristic than c
       
               Returns: The most 'characteristic'(as defined by
                 get_characteristic_subpattern) path for the compiled pattern
                 tree.
               """
       
19796:         for l in self.leaves():
19796:             subp = l.leaf_to_root()
19796:             if subp:
  789:                 return subp
       
    1:     def leaves(self):
               "Generator that returns the leaves of the tree"
56864:         for child in self.children:
133155:             for x in child.leaves():
106555:                 yield x
27389:         if not self.children:
19796:             yield self
       
    1: def reduce_tree(node, parent=None):
           """
           Internal function. Reduces a compiled pattern tree to an
           intermediate representation suitable for feeding the
           automaton. This also trims off any optional pattern elements(like
           [a], a*).
           """
       
53908:     new_node = None
           #switch on the node type
53908:     if node.type == syms.Matcher:
               #skip
  789:         node = node.children[0]
       
53908:     if node.type == syms.Alternatives  :
               #2 cases
 6906:         if len(node.children) <= 2:
                   #just a single 'Alternative', skip this node
 5285:             new_node = reduce_tree(node.children[0], parent)
               else:
                   #real alternatives
 1621:             new_node = MinNode(type=TYPE_ALTERNATIVES)
                   #skip odd children('|' tokens)
27916:             for child in node.children:
26295:                 if node.children.index(child)%2:
12337:                     continue
13958:                 reduced = reduce_tree(child, new_node)
13958:                 if reduced is not None:
13958:                     new_node.children.append(reduced)
47002:     elif node.type == syms.Alternative:
19243:         if len(node.children) > 1:
       
 4530:             new_node = MinNode(type=TYPE_GROUP)
17576:             for child in node.children:
13046:                 reduced = reduce_tree(child, new_node)
13046:                 if reduced:
11176:                     new_node.children.append(reduced)
 4530:             if not new_node.children:
                       # delete the group if all of the children were reduced to None
   24:                 new_node = None
       
               else:
14713:             new_node = reduce_tree(node.children[0], parent)
       
27759:     elif node.type == syms.Unit:
27457:         if (isinstance(node.children[0], pytree.Leaf) and
27457:             node.children[0].value == '('):
                   #skip parentheses
 1112:             return reduce_tree(node.children[1], parent)
26345:         if ((isinstance(node.children[0], pytree.Leaf) and
26345:                node.children[0].value == '[')
                      or
25744:                (len(node.children)>1 and
14472:                hasattr(node.children[1], "value") and
 9449:                node.children[1].value == '[')):
                   #skip whole unit if its optional
  601:             return None
       
25744:         leaf = True
25744:         details_node = None
25744:         alternatives_node = None
25744:         has_repeater = False
25744:         repeater_node = None
25744:         has_variable_name = False
       
77422:         for child in node.children:
51678:             if child.type == syms.Details:
 4488:                 leaf = False
 4488:                 details_node = child
47190:             elif child.type == syms.Repeater:
 1514:                 has_repeater = True
 1514:                 repeater_node = child
45676:             elif child.type == syms.Alternatives:
  517:                 alternatives_node = child
51678:             if hasattr(child, 'value') and child.value == '=': # variable name
 9449:                 has_variable_name = True
       
               #skip variable name
25744:         if has_variable_name:
                   #skip variable name, '='
 9449:             name_leaf = node.children[2]
 9449:             if hasattr(name_leaf, 'value') and name_leaf.value == '(':
                       # skip parenthesis
  517:                 name_leaf = node.children[3]
               else:
16295:             name_leaf = node.children[0]
       
               #set node type
25744:         if name_leaf.type == token_labels.NAME:
                   #(python) non-name or wildcard
 7809:             if name_leaf.value == 'any':
 2995:                 new_node = MinNode(type=TYPE_ANY)
                   else:
 4814:                 if hasattr(token_labels, name_leaf.value):
  180:                     new_node = MinNode(type=getattr(token_labels, name_leaf.value))
                       else:
 4634:                     new_node = MinNode(type=getattr(pysyms, name_leaf.value))
       
17935:         elif name_leaf.type == token_labels.STRING:
                   #(python) name or character; remove the apostrophes from
                   #the string value
17418:             name = name_leaf.value.strip("'")
17418:             if name in tokens:
 2775:                 new_node = MinNode(type=tokens[name])
                   else:
14643:                 new_node = MinNode(type=token_labels.NAME, name=name)
  517:         elif name_leaf.type == syms.Alternatives:
  517:             new_node = reduce_tree(alternatives_node, parent)
       
               #handle repeaters
25744:         if has_repeater:
 1514:             if repeater_node.children[0].value == '*':
                       #reduce to None
 1090:                 new_node = None
  424:             elif repeater_node.children[0].value == '+':
                       #reduce to a single occurrence i.e. do nothing
  424:                 pass
                   else:
                       #TODO: handle {min, max} repeaters
>>>>>>                 raise NotImplementedError
>>>>>>                 pass
       
               #add children
25744:         if details_node and new_node is not None:
 8976:             for child in details_node.children[1:-1]:
                       #skip '<', '>' markers
 4488:                 reduced = reduce_tree(child, new_node)
 4488:                 if reduced is not None:
 4341:                     new_node.children.append(reduced)
52195:     if new_node:
50167:         new_node.parent = parent
52195:     return new_node
       
       
    1: def get_characteristic_subpattern(subpatterns):
           """Picks the most characteristic from a list of linear patterns
           Current order used is:
           names > common_names > common_chars
           """
 4506:     if not isinstance(subpatterns, list):
>>>>>>         return subpatterns
 4506:     if len(subpatterns)==1:
  343:         return subpatterns[0]
       
           # first pick out the ones containing variable names
 4163:     subpatterns_with_names = []
 4163:     subpatterns_with_common_names = []
 4163:     common_names = ['in', 'for', 'if' , 'not', 'None']
 4163:     subpatterns_with_common_chars = []
 4163:     common_chars = "[]().,:"
14996:     for subpattern in subpatterns:
22988:         if any(rec_test(subpattern, lambda x: type(x) is str)):
 5088:             if any(rec_test(subpattern,
27490:                             lambda x: isinstance(x, str) and x in common_chars)):
>>>>>>                 subpatterns_with_common_chars.append(subpattern)
 5088:             elif any(rec_test(subpattern,
27266:                               lambda x: isinstance(x, str) and x in common_names)):
  261:                 subpatterns_with_common_names.append(subpattern)
       
                   else:
 4827:                 subpatterns_with_names.append(subpattern)
       
 4163:     if subpatterns_with_names:
 2989:         subpatterns = subpatterns_with_names
 1174:     elif subpatterns_with_common_names:
  156:         subpatterns = subpatterns_with_common_names
 1018:     elif subpatterns_with_common_chars:
>>>>>>         subpatterns = subpatterns_with_common_chars
           # of the remaining subpatterns pick out the longest one
 4163:     return max(subpatterns, key=len)
       
    1: def rec_test(sequence, test_func):
           """Tests test_func on all items of sequence and items of included
           sub-iterables"""
149357:     for x in sequence:
96434:         if isinstance(x, (list, tuple)):
135953:             for y in rec_test(x, test_func):
98690:                 yield y
               else:
56735:             yield test_func(x)
