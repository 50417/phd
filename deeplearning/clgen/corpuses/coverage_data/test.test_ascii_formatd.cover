       # PyOS_ascii_formatd is deprecated and not called from anywhere in
       #  Python itself. So this module is the only place it gets tested.
       # Test that it works, and test that it's deprecated.
       
    1: import unittest
    1: from test.test_support import check_warnings, run_unittest, import_module
       
       # Skip tests if _ctypes module does not exist
    1: import_module('_ctypes')
       
    1: from ctypes import pythonapi, create_string_buffer, sizeof, byref, c_double
    1: PyOS_ascii_formatd = pythonapi.PyOS_ascii_formatd
       
       
    2: class FormatDeprecationTests(unittest.TestCase):
       
    1:     def test_format_deprecation(self):
    1:         buf = create_string_buffer(' ' * 100)
       
    1:         with check_warnings(('PyOS_ascii_formatd is deprecated',
    1:                              DeprecationWarning)):
    1:             PyOS_ascii_formatd(byref(buf), sizeof(buf), '%+.10f',
    1:                                c_double(10.0))
    1:             self.assertEqual(buf.value, '+10.0000000000')
       
       
    2: class FormatTests(unittest.TestCase):
           # ensure that, for the restricted set of format codes,
           # %-formatting returns the same values os PyOS_ascii_formatd
    1:     def test_format(self):
    1:         buf = create_string_buffer(' ' * 100)
       
               tests = [
    1:             ('%f', 100.0),
    1:             ('%g', 100.0),
    1:             ('%#g', 100.0),
    1:             ('%#.2g', 100.0),
    1:             ('%#.2g', 123.4567),
    1:             ('%#.2g', 1.234567e200),
    1:             ('%e', 1.234567e200),
    1:             ('%e', 1.234),
    1:             ('%+e', 1.234),
    1:             ('%-e', 1.234),
                   ]
       
    1:         with check_warnings(('PyOS_ascii_formatd is deprecated',
    1:                              DeprecationWarning)):
   11:             for format, val in tests:
   10:                 PyOS_ascii_formatd(byref(buf), sizeof(buf), format,
   10:                                    c_double(val))
   10:                 self.assertEqual(buf.value, format % val)
       
       
    1: def test_main():
    1:     run_unittest(FormatDeprecationTests, FormatTests)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
