       """Test script for the dumbdbm module
          Original by Roger E. Masse
    1: """
       
    1: import os
    1: import stat
    1: import unittest
    1: import dumbdbm
    1: from test import test_support
       
    1: _fname = test_support.TESTFN
       
    1: def _delete_files():
   92:     for ext in [".dir", ".dat", ".bak"]:
   69:         try:
   69:             os.unlink(_fname + ext)
   41:         except OSError:
   41:             pass
       
    2: class DumbDBMTestCase(unittest.TestCase):
    1:     _dict = {'0': '',
    1:              'a': 'Python:',
    1:              'b': 'Programming',
    1:              'c': 'the',
    1:              'd': 'way',
    1:              'f': 'Guido',
    1:              'g': 'intended'
                    }
       
    1:     def __init__(self, *args):
   11:         unittest.TestCase.__init__(self, *args)
       
    1:     def test_dumbdbm_creation(self):
    1:         f = dumbdbm.open(_fname, 'c')
    1:         self.assertEqual(f.keys(), [])
    8:         for key in self._dict:
    7:             f[key] = self._dict[key]
    1:         self.read_helper(f)
    1:         f.close()
       
    1:     @unittest.skipUnless(hasattr(os, 'chmod'), 'os.chmod not available')
    1:     @unittest.skipUnless(hasattr(os, 'umask'), 'os.umask not available')
           def test_dumbdbm_creation_mode(self):
    1:         try:
    1:             old_umask = os.umask(0002)
    1:             f = dumbdbm.open(_fname, 'c', 0637)
    1:             f.close()
               finally:
    1:             os.umask(old_umask)
       
    1:         expected_mode = 0635
    1:         if os.name != 'posix':
                   # Windows only supports setting the read-only attribute.
                   # This shouldn't fail, but doesn't work like Unix either.
>>>>>>             expected_mode = 0666
       
    1:         import stat
    1:         st = os.stat(_fname + '.dat')
    1:         self.assertEqual(stat.S_IMODE(st.st_mode), expected_mode)
    1:         st = os.stat(_fname + '.dir')
    1:         self.assertEqual(stat.S_IMODE(st.st_mode), expected_mode)
       
    1:     def test_close_twice(self):
    1:         f = dumbdbm.open(_fname)
    1:         f['a'] = 'b'
    1:         self.assertEqual(f['a'], 'b')
    1:         f.close()
    1:         f.close()
       
    1:     def test_dumbdbm_modification(self):
    1:         self.init_db()
    1:         f = dumbdbm.open(_fname, 'w')
    1:         self._dict['g'] = f['g'] = "indented"
    1:         self.read_helper(f)
    1:         f.close()
       
    1:     def test_dumbdbm_read(self):
    1:         self.init_db()
    1:         f = dumbdbm.open(_fname, 'r')
    1:         self.read_helper(f)
    1:         f.close()
       
    1:     def test_dumbdbm_keys(self):
    1:         self.init_db()
    1:         f = dumbdbm.open(_fname)
    1:         keys = self.keys_helper(f)
    1:         f.close()
       
    1:     def test_write_write_read(self):
               # test for bug #482460
    1:         f = dumbdbm.open(_fname)
    1:         f['1'] = 'hello'
    1:         f['1'] = 'hello2'
    1:         f.close()
    1:         f = dumbdbm.open(_fname)
    1:         self.assertEqual(f['1'], 'hello2')
    1:         f.close()
       
    1:     def test_line_endings(self):
               # test for bug #1172763: dumbdbm would die if the line endings
               # weren't what was expected.
    1:         f = dumbdbm.open(_fname)
    1:         f['1'] = 'hello'
    1:         f['2'] = 'hello2'
    1:         f.close()
       
               # Mangle the file by adding \r before each newline
    1:         data = open(_fname + '.dir').read()
    1:         data = data.replace('\n', '\r\n')
    1:         open(_fname + '.dir', 'wb').write(data)
       
    1:         f = dumbdbm.open(_fname)
    1:         self.assertEqual(f['1'], 'hello')
    1:         self.assertEqual(f['2'], 'hello2')
       
       
    1:     def read_helper(self, f):
    3:         keys = self.keys_helper(f)
   24:         for key in self._dict:
   21:             self.assertEqual(self._dict[key], f[key])
       
    1:     def init_db(self):
    3:         f = dumbdbm.open(_fname, 'w')
   24:         for k in self._dict:
   21:             f[k] = self._dict[k]
    3:         f.close()
       
    1:     def keys_helper(self, f):
    4:         keys = f.keys()
    4:         keys.sort()
    4:         dkeys = self._dict.keys()
    4:         dkeys.sort()
    4:         self.assertEqual(keys, dkeys)
    4:         return keys
       
           # Perform randomized operations.  This doesn't make assumptions about
           # what *might* fail.
    1:     def test_random(self):
    1:         import random
    1:         d = {}  # mirror the database
    6:         for dummy in range(5):
    5:             f = dumbdbm.open(_fname)
  505:             for dummy in range(100):
  500:                 k = random.choice('abcdefghijklm')
  500:                 if random.random() < 0.2:
  105:                     if k in d:
   81:                         del d[k]
   81:                         del f[k]
                       else:
  395:                     v = random.choice('abc') * random.randrange(10000)
  395:                     d[k] = v
  395:                     f[k] = v
  395:                     self.assertEqual(f[k], v)
    5:             f.close()
       
    5:             f = dumbdbm.open(_fname)
    5:             expected = d.items()
    5:             expected.sort()
    5:             got = f.items()
    5:             got.sort()
    5:             self.assertEqual(expected, got)
    5:             f.close()
       
    1:     def test_eval(self):
    1:         with open(_fname + '.dir', 'w') as stream:
    1:             stream.write("str(__import__('sys').stdout.write('Hacked!')), 0\n")
    1:         with test_support.captured_stdout() as stdout:
    1:             with self.assertRaises(ValueError):
    1:                 dumbdbm.open(_fname).close()
    1:             self.assertEqual(stdout.getvalue(), '')
       
    1:     @unittest.skipUnless(hasattr(os, 'chmod'), 'test needs os.chmod()')
           def test_readonly_files(self):
    1:         dir = _fname
    1:         os.mkdir(dir)
    1:         try:
    1:             fname = os.path.join(dir, 'db')
    1:             f = dumbdbm.open(fname, 'n')
    1:             self.assertEqual(list(f.keys()), [])
    8:             for key in self._dict:
    7:                 f[key] = self._dict[key]
    1:             f.close()
    1:             os.chmod(fname + ".dir", stat.S_IRUSR)
    1:             os.chmod(fname + ".dat", stat.S_IRUSR)
    1:             os.chmod(dir, stat.S_IRUSR|stat.S_IXUSR)
    1:             f = dumbdbm.open(fname, 'r')
    1:             self.assertEqual(sorted(f.keys()), sorted(self._dict))
    1:             f.close()  # don't write
               finally:
    1:             test_support.rmtree(dir)
       
    1:     def tearDown(self):
   11:         _delete_files()
       
    1:     def setUp(self):
   11:         _delete_files()
       
    1: def test_main():
    1:     try:
    1:         test_support.run_unittest(DumbDBMTestCase)
           finally:
    1:         _delete_files()
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
