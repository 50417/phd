    1: from ctypes import *
    1: import unittest
       
    2: class VarSizeTest(unittest.TestCase):
    1:     def test_resize(self):
    2:         class X(Structure):
    1:             _fields_ = [("item", c_int),
    1:                         ("array", c_int * 1)]
       
    1:         self.assertEqual(sizeof(X), sizeof(c_int) * 2)
    1:         x = X()
    1:         x.item = 42
    1:         x.array[0] = 100
    1:         self.assertEqual(sizeof(x), sizeof(c_int) * 2)
       
               # make room for one additional item
    1:         new_size = sizeof(X) + sizeof(c_int) * 1
    1:         resize(x, new_size)
    1:         self.assertEqual(sizeof(x), new_size)
    1:         self.assertEqual((x.item, x.array[0]), (42, 100))
       
               # make room for 10 additional items
    1:         new_size = sizeof(X) + sizeof(c_int) * 9
    1:         resize(x, new_size)
    1:         self.assertEqual(sizeof(x), new_size)
    1:         self.assertEqual((x.item, x.array[0]), (42, 100))
       
               # make room for one additional item
    1:         new_size = sizeof(X) + sizeof(c_int) * 1
    1:         resize(x, new_size)
    1:         self.assertEqual(sizeof(x), new_size)
    1:         self.assertEqual((x.item, x.array[0]), (42, 100))
       
    1:     def test_array_invalid_length(self):
               # cannot create arrays with non-positive size
    2:         self.assertRaises(ValueError, lambda: c_int * -1)
    2:         self.assertRaises(ValueError, lambda: c_int * -3)
       
    1:     def test_zerosized_array(self):
    1:         array = (c_int * 0)()
               # accessing elements of zero-sized arrays raise IndexError
    1:         self.assertRaises(IndexError, array.__setitem__, 0, None)
    1:         self.assertRaises(IndexError, array.__getitem__, 0)
    1:         self.assertRaises(IndexError, array.__setitem__, 1, None)
    1:         self.assertRaises(IndexError, array.__getitem__, 1)
    1:         self.assertRaises(IndexError, array.__setitem__, -1, None)
    1:         self.assertRaises(IndexError, array.__getitem__, -1)
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
