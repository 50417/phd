    1: import unittest
       
       
    2: class TestHashing(object):
    1:     """Used as a mixin for TestCase"""
       
           # Check for a valid __hash__ implementation
    1:     def test_hash(self):
    2:         for obj_1, obj_2 in self.eq_pairs:
    1:             try:
    1:                 if not hash(obj_1) == hash(obj_2):
>>>>>>                     self.fail("%r and %r do not hash equal" % (obj_1, obj_2))
>>>>>>             except KeyboardInterrupt:
>>>>>>                 raise
>>>>>>             except Exception, e:
>>>>>>                 self.fail("Problem hashing %r and %r: %s" % (obj_1, obj_2, e))
       
    4:         for obj_1, obj_2 in self.ne_pairs:
    3:             try:
    3:                 if hash(obj_1) == hash(obj_2):
>>>>>>                     self.fail("%s and %s hash equal, but shouldn't" %
>>>>>>                               (obj_1, obj_2))
>>>>>>             except KeyboardInterrupt:
>>>>>>                 raise
>>>>>>             except Exception, e:
>>>>>>                 self.fail("Problem hashing %s and %s: %s" % (obj_1, obj_2, e))
       
       
    2: class TestEquality(object):
    1:     """Used as a mixin for TestCase"""
       
           # Check for a valid __eq__ implementation
    1:     def test_eq(self):
    6:         for obj_1, obj_2 in self.eq_pairs:
    4:             self.assertEqual(obj_1, obj_2)
    4:             self.assertEqual(obj_2, obj_1)
       
           # Check for a valid __ne__ implementation
    1:     def test_ne(self):
    9:         for obj_1, obj_2 in self.ne_pairs:
    7:             self.assertNotEqual(obj_1, obj_2)
    7:             self.assertNotEqual(obj_2, obj_1)
       
       
    2: class LoggingResult(unittest.TestResult):
    1:     def __init__(self, log):
   24:         self._events = log
   24:         super(LoggingResult, self).__init__()
       
    1:     def startTest(self, test):
   23:         self._events.append('startTest')
   23:         super(LoggingResult, self).startTest(test)
       
    1:     def startTestRun(self):
    6:         self._events.append('startTestRun')
    6:         super(LoggingResult, self).startTestRun()
       
    1:     def stopTest(self, test):
   23:         self._events.append('stopTest')
   23:         super(LoggingResult, self).stopTest(test)
       
    1:     def stopTestRun(self):
    6:         self._events.append('stopTestRun')
    6:         super(LoggingResult, self).stopTestRun()
       
    1:     def addFailure(self, *args):
    5:         self._events.append('addFailure')
    5:         super(LoggingResult, self).addFailure(*args)
       
    1:     def addSuccess(self, *args):
    3:         self._events.append('addSuccess')
    3:         super(LoggingResult, self).addSuccess(*args)
       
    1:     def addError(self, *args):
    9:         self._events.append('addError')
    9:         super(LoggingResult, self).addError(*args)
       
    1:     def addSkip(self, *args):
    4:         self._events.append('addSkip')
    4:         super(LoggingResult, self).addSkip(*args)
       
    1:     def addExpectedFailure(self, *args):
    1:         self._events.append('addExpectedFailure')
    1:         super(LoggingResult, self).addExpectedFailure(*args)
       
    1:     def addUnexpectedSuccess(self, *args):
    1:         self._events.append('addUnexpectedSuccess')
    1:         super(LoggingResult, self).addUnexpectedSuccess(*args)
       
       
    2: class ResultWithNoStartTestRunStopTestRun(object):
    1:     """An object honouring TestResult before startTestRun/stopTestRun."""
       
    1:     def __init__(self):
    2:         self.failures = []
    2:         self.errors = []
    2:         self.testsRun = 0
    2:         self.skipped = []
    2:         self.expectedFailures = []
    2:         self.unexpectedSuccesses = []
    2:         self.shouldStop = False
       
    1:     def startTest(self, test):
    1:         pass
       
    1:     def stopTest(self, test):
    1:         pass
       
    1:     def addError(self, test):
>>>>>>         pass
       
    1:     def addFailure(self, test):
>>>>>>         pass
       
    1:     def addSuccess(self, test):
    1:         pass
       
    1:     def wasSuccessful(self):
    1:         return True
