    1: from ctypes import *
    1: from ctypes.test import need_symbol
    1: import unittest
       
    2: class StringBufferTestCase(unittest.TestCase):
       
    1:     def test_buffer(self):
    1:         b = create_string_buffer(32)
    1:         self.assertEqual(len(b), 32)
    1:         self.assertEqual(sizeof(b), 32 * sizeof(c_char))
    1:         self.assertIs(type(b[0]), str)
       
    1:         b = create_string_buffer("abc")
    1:         self.assertEqual(len(b), 4) # trailing nul char
    1:         self.assertEqual(sizeof(b), 4 * sizeof(c_char))
    1:         self.assertIs(type(b[0]), str)
    1:         self.assertEqual(b[0], "a")
    1:         self.assertEqual(b[:], "abc\0")
    1:         self.assertEqual(b[::], "abc\0")
    1:         self.assertEqual(b[::-1], "\0cba")
    1:         self.assertEqual(b[::2], "ac")
    1:         self.assertEqual(b[::5], "a")
       
    1:     def test_buffer_interface(self):
    1:         self.assertEqual(len(bytearray(create_string_buffer(0))), 0)
    1:         self.assertEqual(len(bytearray(create_string_buffer(1))), 1)
       
    1:     def test_string_conversion(self):
    1:         b = create_string_buffer(u"abc")
    1:         self.assertEqual(len(b), 4) # trailing nul char
    1:         self.assertEqual(sizeof(b), 4 * sizeof(c_char))
    1:         self.assertTrue(type(b[0]) is str)
    1:         self.assertEqual(b[0], "a")
    1:         self.assertEqual(b[:], "abc\0")
    1:         self.assertEqual(b[::], "abc\0")
    1:         self.assertEqual(b[::-1], "\0cba")
    1:         self.assertEqual(b[::2], "ac")
    1:         self.assertEqual(b[::5], "a")
       
    1:     @need_symbol('c_wchar')
           def test_unicode_buffer(self):
    1:         b = create_unicode_buffer(32)
    1:         self.assertEqual(len(b), 32)
    1:         self.assertEqual(sizeof(b), 32 * sizeof(c_wchar))
    1:         self.assertIs(type(b[0]), unicode)
       
    1:         b = create_unicode_buffer(u"abc")
    1:         self.assertEqual(len(b), 4) # trailing nul char
    1:         self.assertEqual(sizeof(b), 4 * sizeof(c_wchar))
    1:         self.assertIs(type(b[0]), unicode)
    1:         self.assertEqual(b[0], u"a")
    1:         self.assertEqual(b[:], "abc\0")
    1:         self.assertEqual(b[::], "abc\0")
    1:         self.assertEqual(b[::-1], "\0cba")
    1:         self.assertEqual(b[::2], "ac")
    1:         self.assertEqual(b[::5], "a")
       
    1:     @need_symbol('c_wchar')
           def test_unicode_conversion(self):
    1:         b = create_unicode_buffer("abc")
    1:         self.assertEqual(len(b), 4) # trailing nul char
    1:         self.assertEqual(sizeof(b), 4 * sizeof(c_wchar))
    1:         self.assertIs(type(b[0]), unicode)
    1:         self.assertEqual(b[0], u"a")
    1:         self.assertEqual(b[:], "abc\0")
    1:         self.assertEqual(b[::], "abc\0")
    1:         self.assertEqual(b[::-1], "\0cba")
    1:         self.assertEqual(b[::2], "ac")
    1:         self.assertEqual(b[::5], "a")
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
