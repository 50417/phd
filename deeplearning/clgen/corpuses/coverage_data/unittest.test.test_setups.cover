    1: import sys
       
    1: from cStringIO import StringIO
       
    1: import unittest
       
       
    1: def resultFactory(*_):
   15:     return unittest.TestResult()
       
       
    2: class TestSetups(unittest.TestCase):
       
    1:     def getRunner(self):
   15:         return unittest.TextTestRunner(resultclass=resultFactory,
   15:                                           stream=StringIO())
    1:     def runTests(self, *cases):
   14:         suite = unittest.TestSuite()
   32:         for case in cases:
   18:             tests = unittest.defaultTestLoader.loadTestsFromTestCase(case)
   18:             suite.addTests(tests)
       
   14:         runner = self.getRunner()
       
               # creating a nested suite exposes some potential bugs
   14:         realSuite = unittest.TestSuite()
   14:         realSuite.addTest(suite)
               # adding empty suites to the end exposes potential bugs
   14:         suite.addTest(unittest.TestSuite())
   14:         realSuite.addTest(unittest.TestSuite())
   14:         return runner.run(realSuite)
       
    1:     def test_setup_class(self):
    2:         class Test(unittest.TestCase):
    1:             setUpCalled = 0
    1:             @classmethod
                   def setUpClass(cls):
    1:                 Test.setUpCalled += 1
    1:                 unittest.TestCase.setUpClass()
    1:             def test_one(self):
    1:                 pass
    1:             def test_two(self):
    1:                 pass
       
    1:         result = self.runTests(Test)
       
    1:         self.assertEqual(Test.setUpCalled, 1)
    1:         self.assertEqual(result.testsRun, 2)
    1:         self.assertEqual(len(result.errors), 0)
       
    1:     def test_teardown_class(self):
    2:         class Test(unittest.TestCase):
    1:             tearDownCalled = 0
    1:             @classmethod
                   def tearDownClass(cls):
    1:                 Test.tearDownCalled += 1
    1:                 unittest.TestCase.tearDownClass()
    1:             def test_one(self):
    1:                 pass
    1:             def test_two(self):
    1:                 pass
       
    1:         result = self.runTests(Test)
       
    1:         self.assertEqual(Test.tearDownCalled, 1)
    1:         self.assertEqual(result.testsRun, 2)
    1:         self.assertEqual(len(result.errors), 0)
       
    1:     def test_teardown_class_two_classes(self):
    2:         class Test(unittest.TestCase):
    1:             tearDownCalled = 0
    1:             @classmethod
                   def tearDownClass(cls):
    1:                 Test.tearDownCalled += 1
    1:                 unittest.TestCase.tearDownClass()
    1:             def test_one(self):
    1:                 pass
    1:             def test_two(self):
    1:                 pass
       
    2:         class Test2(unittest.TestCase):
    1:             tearDownCalled = 0
    1:             @classmethod
                   def tearDownClass(cls):
    1:                 Test2.tearDownCalled += 1
    1:                 unittest.TestCase.tearDownClass()
    1:             def test_one(self):
    1:                 pass
    1:             def test_two(self):
    1:                 pass
       
    1:         result = self.runTests(Test, Test2)
       
    1:         self.assertEqual(Test.tearDownCalled, 1)
    1:         self.assertEqual(Test2.tearDownCalled, 1)
    1:         self.assertEqual(result.testsRun, 4)
    1:         self.assertEqual(len(result.errors), 0)
       
    1:     def test_error_in_setupclass(self):
    2:         class BrokenTest(unittest.TestCase):
    1:             @classmethod
                   def setUpClass(cls):
    1:                 raise TypeError('foo')
    1:             def test_one(self):
>>>>>>                 pass
    1:             def test_two(self):
>>>>>>                 pass
       
    1:         result = self.runTests(BrokenTest)
       
    1:         self.assertEqual(result.testsRun, 0)
    1:         self.assertEqual(len(result.errors), 1)
    1:         error, _ = result.errors[0]
    1:         self.assertEqual(str(error),
    1:                     'setUpClass (%s.BrokenTest)' % __name__)
       
    1:     def test_error_in_teardown_class(self):
    2:         class Test(unittest.TestCase):
    1:             tornDown = 0
    1:             @classmethod
                   def tearDownClass(cls):
    1:                 Test.tornDown += 1
    1:                 raise TypeError('foo')
    1:             def test_one(self):
    1:                 pass
    1:             def test_two(self):
    1:                 pass
       
    2:         class Test2(unittest.TestCase):
    1:             tornDown = 0
    1:             @classmethod
                   def tearDownClass(cls):
    1:                 Test2.tornDown += 1
    1:                 raise TypeError('foo')
    1:             def test_one(self):
    1:                 pass
    1:             def test_two(self):
    1:                 pass
       
    1:         result = self.runTests(Test, Test2)
    1:         self.assertEqual(result.testsRun, 4)
    1:         self.assertEqual(len(result.errors), 2)
    1:         self.assertEqual(Test.tornDown, 1)
    1:         self.assertEqual(Test2.tornDown, 1)
       
    1:         error, _ = result.errors[0]
    1:         self.assertEqual(str(error),
    1:                     'tearDownClass (%s.Test)' % __name__)
       
    1:     def test_class_not_torndown_when_setup_fails(self):
    2:         class Test(unittest.TestCase):
    1:             tornDown = False
    1:             @classmethod
                   def setUpClass(cls):
    1:                 raise TypeError
    1:             @classmethod
                   def tearDownClass(cls):
>>>>>>                 Test.tornDown = True
>>>>>>                 raise TypeError('foo')
    1:             def test_one(self):
>>>>>>                 pass
       
    1:         self.runTests(Test)
    1:         self.assertFalse(Test.tornDown)
       
    1:     def test_class_not_setup_or_torndown_when_skipped(self):
    2:         class Test(unittest.TestCase):
    1:             classSetUp = False
    1:             tornDown = False
    1:             @classmethod
                   def setUpClass(cls):
>>>>>>                 Test.classSetUp = True
    1:             @classmethod
                   def tearDownClass(cls):
>>>>>>                 Test.tornDown = True
    1:             def test_one(self):
>>>>>>                 pass
       
    1:         Test = unittest.skip("hop")(Test)
    1:         self.runTests(Test)
    1:         self.assertFalse(Test.classSetUp)
    1:         self.assertFalse(Test.tornDown)
       
    1:     def test_setup_teardown_order_with_pathological_suite(self):
    1:         results = []
       
    2:         class Module1(object):
    1:             @staticmethod
                   def setUpModule():
    1:                 results.append('Module1.setUpModule')
    1:             @staticmethod
                   def tearDownModule():
    1:                 results.append('Module1.tearDownModule')
       
    2:         class Module2(object):
    1:             @staticmethod
                   def setUpModule():
    1:                 results.append('Module2.setUpModule')
    1:             @staticmethod
                   def tearDownModule():
    1:                 results.append('Module2.tearDownModule')
       
    2:         class Test1(unittest.TestCase):
    1:             @classmethod
                   def setUpClass(cls):
    1:                 results.append('setup 1')
    1:             @classmethod
                   def tearDownClass(cls):
    1:                 results.append('teardown 1')
    1:             def testOne(self):
    1:                 results.append('Test1.testOne')
    1:             def testTwo(self):
    1:                 results.append('Test1.testTwo')
       
    2:         class Test2(unittest.TestCase):
    1:             @classmethod
                   def setUpClass(cls):
    1:                 results.append('setup 2')
    1:             @classmethod
                   def tearDownClass(cls):
    1:                 results.append('teardown 2')
    1:             def testOne(self):
    1:                 results.append('Test2.testOne')
    1:             def testTwo(self):
    1:                 results.append('Test2.testTwo')
       
    2:         class Test3(unittest.TestCase):
    1:             @classmethod
                   def setUpClass(cls):
    1:                 results.append('setup 3')
    1:             @classmethod
                   def tearDownClass(cls):
    1:                 results.append('teardown 3')
    1:             def testOne(self):
    1:                 results.append('Test3.testOne')
    1:             def testTwo(self):
    1:                 results.append('Test3.testTwo')
       
    1:         Test1.__module__ = Test2.__module__ = 'Module'
    1:         Test3.__module__ = 'Module2'
    1:         sys.modules['Module'] = Module1
    1:         sys.modules['Module2'] = Module2
       
    1:         first = unittest.TestSuite((Test1('testOne'),))
    1:         second = unittest.TestSuite((Test1('testTwo'),))
    1:         third = unittest.TestSuite((Test2('testOne'),))
    1:         fourth = unittest.TestSuite((Test2('testTwo'),))
    1:         fifth = unittest.TestSuite((Test3('testOne'),))
    1:         sixth = unittest.TestSuite((Test3('testTwo'),))
    1:         suite = unittest.TestSuite((first, second, third, fourth, fifth, sixth))
       
    1:         runner = self.getRunner()
    1:         result = runner.run(suite)
    1:         self.assertEqual(result.testsRun, 6)
    1:         self.assertEqual(len(result.errors), 0)
       
    1:         self.assertEqual(results,
    1:                          ['Module1.setUpModule', 'setup 1',
    1:                           'Test1.testOne', 'Test1.testTwo', 'teardown 1',
    1:                           'setup 2', 'Test2.testOne', 'Test2.testTwo',
    1:                           'teardown 2', 'Module1.tearDownModule',
    1:                           'Module2.setUpModule', 'setup 3',
    1:                           'Test3.testOne', 'Test3.testTwo',
    1:                           'teardown 3', 'Module2.tearDownModule'])
       
    1:     def test_setup_module(self):
    2:         class Module(object):
    1:             moduleSetup = 0
    1:             @staticmethod
                   def setUpModule():
    1:                 Module.moduleSetup += 1
       
    2:         class Test(unittest.TestCase):
    1:             def test_one(self):
    1:                 pass
    1:             def test_two(self):
    1:                 pass
    1:         Test.__module__ = 'Module'
    1:         sys.modules['Module'] = Module
       
    1:         result = self.runTests(Test)
    1:         self.assertEqual(Module.moduleSetup, 1)
    1:         self.assertEqual(result.testsRun, 2)
    1:         self.assertEqual(len(result.errors), 0)
       
    1:     def test_error_in_setup_module(self):
    2:         class Module(object):
    1:             moduleSetup = 0
    1:             moduleTornDown = 0
    1:             @staticmethod
                   def setUpModule():
    1:                 Module.moduleSetup += 1
    1:                 raise TypeError('foo')
    1:             @staticmethod
                   def tearDownModule():
>>>>>>                 Module.moduleTornDown += 1
       
    2:         class Test(unittest.TestCase):
    1:             classSetUp = False
    1:             classTornDown = False
    1:             @classmethod
                   def setUpClass(cls):
>>>>>>                 Test.classSetUp = True
    1:             @classmethod
                   def tearDownClass(cls):
>>>>>>                 Test.classTornDown = True
    1:             def test_one(self):
>>>>>>                 pass
    1:             def test_two(self):
>>>>>>                 pass
       
    2:         class Test2(unittest.TestCase):
    1:             def test_one(self):
>>>>>>                 pass
    1:             def test_two(self):
>>>>>>                 pass
    1:         Test.__module__ = 'Module'
    1:         Test2.__module__ = 'Module'
    1:         sys.modules['Module'] = Module
       
    1:         result = self.runTests(Test, Test2)
    1:         self.assertEqual(Module.moduleSetup, 1)
    1:         self.assertEqual(Module.moduleTornDown, 0)
    1:         self.assertEqual(result.testsRun, 0)
    1:         self.assertFalse(Test.classSetUp)
    1:         self.assertFalse(Test.classTornDown)
    1:         self.assertEqual(len(result.errors), 1)
    1:         error, _ = result.errors[0]
    1:         self.assertEqual(str(error), 'setUpModule (Module)')
       
    1:     def test_testcase_with_missing_module(self):
    2:         class Test(unittest.TestCase):
    1:             def test_one(self):
    1:                 pass
    1:             def test_two(self):
    1:                 pass
    1:         Test.__module__ = 'Module'
    1:         sys.modules.pop('Module', None)
       
    1:         result = self.runTests(Test)
    1:         self.assertEqual(result.testsRun, 2)
       
    1:     def test_teardown_module(self):
    2:         class Module(object):
    1:             moduleTornDown = 0
    1:             @staticmethod
                   def tearDownModule():
    1:                 Module.moduleTornDown += 1
       
    2:         class Test(unittest.TestCase):
    1:             def test_one(self):
    1:                 pass
    1:             def test_two(self):
    1:                 pass
    1:         Test.__module__ = 'Module'
    1:         sys.modules['Module'] = Module
       
    1:         result = self.runTests(Test)
    1:         self.assertEqual(Module.moduleTornDown, 1)
    1:         self.assertEqual(result.testsRun, 2)
    1:         self.assertEqual(len(result.errors), 0)
       
    1:     def test_error_in_teardown_module(self):
    2:         class Module(object):
    1:             moduleTornDown = 0
    1:             @staticmethod
                   def tearDownModule():
    1:                 Module.moduleTornDown += 1
    1:                 raise TypeError('foo')
       
    2:         class Test(unittest.TestCase):
    1:             classSetUp = False
    1:             classTornDown = False
    1:             @classmethod
                   def setUpClass(cls):
    1:                 Test.classSetUp = True
    1:             @classmethod
                   def tearDownClass(cls):
    1:                 Test.classTornDown = True
    1:             def test_one(self):
    1:                 pass
    1:             def test_two(self):
    1:                 pass
       
    2:         class Test2(unittest.TestCase):
    1:             def test_one(self):
    1:                 pass
    1:             def test_two(self):
    1:                 pass
    1:         Test.__module__ = 'Module'
    1:         Test2.__module__ = 'Module'
    1:         sys.modules['Module'] = Module
       
    1:         result = self.runTests(Test, Test2)
    1:         self.assertEqual(Module.moduleTornDown, 1)
    1:         self.assertEqual(result.testsRun, 4)
    1:         self.assertTrue(Test.classSetUp)
    1:         self.assertTrue(Test.classTornDown)
    1:         self.assertEqual(len(result.errors), 1)
    1:         error, _ = result.errors[0]
    1:         self.assertEqual(str(error), 'tearDownModule (Module)')
       
    1:     def test_skiptest_in_setupclass(self):
    2:         class Test(unittest.TestCase):
    1:             @classmethod
                   def setUpClass(cls):
    1:                 raise unittest.SkipTest('foo')
    1:             def test_one(self):
>>>>>>                 pass
    1:             def test_two(self):
>>>>>>                 pass
       
    1:         result = self.runTests(Test)
    1:         self.assertEqual(result.testsRun, 0)
    1:         self.assertEqual(len(result.errors), 0)
    1:         self.assertEqual(len(result.skipped), 1)
    1:         skipped = result.skipped[0][0]
    1:         self.assertEqual(str(skipped), 'setUpClass (%s.Test)' % __name__)
       
    1:     def test_skiptest_in_setupmodule(self):
    2:         class Test(unittest.TestCase):
    1:             def test_one(self):
>>>>>>                 pass
    1:             def test_two(self):
>>>>>>                 pass
       
    2:         class Module(object):
    1:             @staticmethod
                   def setUpModule():
    1:                 raise unittest.SkipTest('foo')
       
    1:         Test.__module__ = 'Module'
    1:         sys.modules['Module'] = Module
       
    1:         result = self.runTests(Test)
    1:         self.assertEqual(result.testsRun, 0)
    1:         self.assertEqual(len(result.errors), 0)
    1:         self.assertEqual(len(result.skipped), 1)
    1:         skipped = result.skipped[0][0]
    1:         self.assertEqual(str(skipped), 'setUpModule (Module)')
       
    1:     def test_suite_debug_executes_setups_and_teardowns(self):
    1:         ordering = []
       
    2:         class Module(object):
    1:             @staticmethod
                   def setUpModule():
    1:                 ordering.append('setUpModule')
    1:             @staticmethod
                   def tearDownModule():
    1:                 ordering.append('tearDownModule')
       
    2:         class Test(unittest.TestCase):
    1:             @classmethod
                   def setUpClass(cls):
    1:                 ordering.append('setUpClass')
    1:             @classmethod
                   def tearDownClass(cls):
    1:                 ordering.append('tearDownClass')
    1:             def test_something(self):
    1:                 ordering.append('test_something')
       
    1:         Test.__module__ = 'Module'
    1:         sys.modules['Module'] = Module
       
    1:         suite = unittest.defaultTestLoader.loadTestsFromTestCase(Test)
    1:         suite.debug()
    1:         expectedOrder = ['setUpModule', 'setUpClass', 'test_something', 'tearDownClass', 'tearDownModule']
    1:         self.assertEqual(ordering, expectedOrder)
       
    1:     def test_suite_debug_propagates_exceptions(self):
    2:         class Module(object):
    1:             @staticmethod
                   def setUpModule():
    5:                 if phase == 0:
    1:                     raise Exception('setUpModule')
    1:             @staticmethod
                   def tearDownModule():
    1:                 if phase == 1:
    1:                     raise Exception('tearDownModule')
       
    2:         class Test(unittest.TestCase):
    1:             @classmethod
                   def setUpClass(cls):
    4:                 if phase == 2:
    1:                     raise Exception('setUpClass')
    1:             @classmethod
                   def tearDownClass(cls):
    2:                 if phase == 3:
    1:                     raise Exception('tearDownClass')
    1:             def test_something(self):
    3:                 if phase == 4:
    1:                     raise Exception('test_something')
       
    1:         Test.__module__ = 'Module'
    1:         sys.modules['Module'] = Module
       
    1:         _suite = unittest.defaultTestLoader.loadTestsFromTestCase(Test)
    1:         suite = unittest.TestSuite()
    1:         suite.addTest(_suite)
       
    1:         messages = ('setUpModule', 'tearDownModule', 'setUpClass', 'tearDownClass', 'test_something')
    6:         for phase, msg in enumerate(messages):
    5:             with self.assertRaisesRegexp(Exception, msg):
    5:                 suite.debug()
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
