    1: """Test the binascii C module."""
       
    1: from test import test_support
    1: import unittest
    1: import binascii
    1: import array
       
       # Note: "*_hex" functions are aliases for "(un)hexlify"
    1: b2a_functions = ['b2a_base64', 'b2a_hex', 'b2a_hqx', 'b2a_qp', 'b2a_uu',
    1:                  'hexlify', 'rlecode_hqx']
    1: a2b_functions = ['a2b_base64', 'a2b_hex', 'a2b_hqx', 'a2b_qp', 'a2b_uu',
    1:                  'unhexlify', 'rledecode_hqx']
    1: all_functions = a2b_functions + b2a_functions + ['crc32', 'crc_hqx']
       
       
    2: class BinASCIITest(unittest.TestCase):
       
    1:     type2test = str
           # Create binary test data
    1:     rawdata = "The quick brown fox jumps over the lazy dog.\r\n"
           # Be slow so we don't depend on other modules
    1:     rawdata += "".join(map(chr, xrange(256)))
    1:     rawdata += "\r\nHello world.\n"
       
    1:     def setUp(self):
   48:         self.data = self.type2test(self.rawdata)
       
    1:     def test_exceptions(self):
               # Check module exceptions
    4:         self.assertTrue(issubclass(binascii.Error, Exception))
    4:         self.assertTrue(issubclass(binascii.Incomplete, Exception))
       
    1:     def test_functions(self):
               # Check presence of all functions
   68:         for name in all_functions:
   64:             self.assertTrue(hasattr(getattr(binascii, name), '__call__'))
   64:             self.assertRaises(TypeError, getattr(binascii, name))
       
    1:     def test_returned_value(self):
               # Limit to the minimum of all limits (b2a_uu)
    4:         MAX_ALL = 45
    4:         raw = self.rawdata[:MAX_ALL]
   32:         for fa, fb in zip(a2b_functions, b2a_functions):
   28:             a2b = getattr(binascii, fa)
   28:             b2a = getattr(binascii, fb)
   28:             try:
   28:                 a = b2a(self.type2test(raw))
   28:                 res = a2b(self.type2test(a))
>>>>>>             except Exception, err:
>>>>>>                 self.fail("{}/{} conversion raises {!r}".format(fb, fa, err))
   28:             if fb == 'b2a_hqx':
                       # b2a_hqx returns a tuple
    4:                 res, _ = res
   28:             self.assertEqual(res, raw, "{}/{} conversion: "
   28:                              "{!r} != {!r}".format(fb, fa, res, raw))
   28:             self.assertIsInstance(res, str)
   28:             self.assertIsInstance(a, str)
 1868:             self.assertLess(max(ord(c) for c in a), 128)
    4:         self.assertIsInstance(binascii.crc_hqx(raw, 0), int)
    4:         self.assertIsInstance(binascii.crc32(raw), int)
       
    1:     def test_base64valid(self):
               # Test base64 with valid data
    4:         MAX_BASE64 = 57
    4:         lines = []
   28:         for i in range(0, len(self.rawdata), MAX_BASE64):
   24:             b = self.type2test(self.rawdata[i:i+MAX_BASE64])
   24:             a = binascii.b2a_base64(b)
   24:             lines.append(a)
    4:         res = ""
   28:         for line in lines:
   24:             a = self.type2test(line)
   24:             b = binascii.a2b_base64(a)
   24:             res = res + b
    4:         self.assertEqual(res, self.rawdata)
       
    1:     def test_base64invalid(self):
               # Test base64 with random invalid characters sprinkled throughout
               # (This requires a new version of binascii.)
    4:         MAX_BASE64 = 57
    4:         lines = []
   28:         for i in range(0, len(self.data), MAX_BASE64):
   24:             b = self.type2test(self.rawdata[i:i+MAX_BASE64])
   24:             a = binascii.b2a_base64(b)
   24:             lines.append(a)
       
    4:         fillers = ""
    4:         valid = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/"
 1028:         for i in xrange(256):
 1024:             c = chr(i)
 1024:             if c not in valid:
  768:                 fillers += c
    4:         def addnoise(line):
   24:             noise = fillers
   24:             ratio = len(line) // len(noise)
   24:             res = ""
 6328:             while line and noise:
 6304:                 if len(line) // len(noise) > ratio:
 1720:                     c, line = line[0], line[1:]
                       else:
 4584:                     c, noise = noise[0], noise[1:]
 6304:                 res += c
   24:             return res + noise + line
    4:         res = ""
   28:         for line in map(addnoise, lines):
   24:             a = self.type2test(line)
   24:             b = binascii.a2b_base64(a)
   24:             res += b
    4:         self.assertEqual(res, self.rawdata)
       
               # Test base64 with just invalid characters, which should return
               # empty strings. TBD: shouldn't it raise an exception instead ?
    4:         self.assertEqual(binascii.a2b_base64(self.type2test(fillers)), '')
       
    1:     def test_uu(self):
    4:         MAX_UU = 45
    4:         lines = []
   36:         for i in range(0, len(self.data), MAX_UU):
   32:             b = self.type2test(self.rawdata[i:i+MAX_UU])
   32:             a = binascii.b2a_uu(b)
   32:             lines.append(a)
    4:         res = ""
   36:         for line in lines:
   32:             a = self.type2test(line)
   32:             b = binascii.a2b_uu(a)
   32:             res += b
    4:         self.assertEqual(res, self.rawdata)
       
    4:         self.assertEqual(binascii.a2b_uu("\x7f"), "\x00"*31)
    4:         self.assertEqual(binascii.a2b_uu("\x80"), "\x00"*32)
    4:         self.assertEqual(binascii.a2b_uu("\xff"), "\x00"*31)
    4:         self.assertRaises(binascii.Error, binascii.a2b_uu, "\xff\x00")
    4:         self.assertRaises(binascii.Error, binascii.a2b_uu, "!!!!")
       
    4:         self.assertRaises(binascii.Error, binascii.b2a_uu, 46*"!")
       
               # Issue #7701 (crash on a pydebug build)
    4:         self.assertEqual(binascii.b2a_uu('x'), '!>   \n')
       
    1:     def test_crc_hqx(self):
    4:         crc = binascii.crc_hqx(self.type2test(b"Test the CRC-32 of"), 0)
    4:         crc = binascii.crc_hqx(self.type2test(b" this string."), crc)
    4:         self.assertEqual(crc, 14290)
       
    4:         self.assertRaises(TypeError, binascii.crc_hqx)
    4:         self.assertRaises(TypeError, binascii.crc_hqx, self.type2test(b''))
       
    1:     def test_crc32(self):
    4:         crc = binascii.crc32(self.type2test("Test the CRC-32 of"))
    4:         crc = binascii.crc32(self.type2test(" this string."), crc)
    4:         self.assertEqual(crc, 1571220330)
       
    4:         self.assertRaises(TypeError, binascii.crc32)
       
    1:     def test_hqx(self):
               # Perform binhex4 style RLE-compression
               # Then calculate the hexbin4 binary-to-ASCII translation
    4:         rle = binascii.rlecode_hqx(self.data)
    4:         a = binascii.b2a_hqx(self.type2test(rle))
    4:         b, _ = binascii.a2b_hqx(self.type2test(a))
    4:         res = binascii.rledecode_hqx(b)
       
    4:         self.assertEqual(res, self.rawdata)
       
    1:     def test_hex(self):
               # test hexlification
    4:         s = '{s\005\000\000\000worldi\002\000\000\000s\005\000\000\000helloi\001\000\000\0000'
    4:         t = binascii.b2a_hex(self.type2test(s))
    4:         u = binascii.a2b_hex(self.type2test(t))
    4:         self.assertEqual(s, u)
    4:         self.assertRaises(TypeError, binascii.a2b_hex, t[:-1])
    4:         self.assertRaises(TypeError, binascii.a2b_hex, t[:-1] + 'q')
       
               # Verify the treatment of Unicode strings
    4:         if test_support.have_unicode:
    4:             self.assertEqual(binascii.hexlify(unicode('a', 'ascii')), '61')
       
    1:     def test_qp(self):
    4:         type2test = self.type2test
    4:         a2b_qp = binascii.a2b_qp
    4:         b2a_qp = binascii.b2a_qp
       
    4:         a2b_qp(data=b"", header=False)  # Keyword arguments allowed
       
               # A test for SF bug 534347 (segfaults without the proper fix)
    4:         try:
    4:             a2b_qp(b"", **{1:1})
    4:         except TypeError:
    4:             pass
               else:
>>>>>>             self.fail("binascii.a2b_qp(**{1:1}) didn't raise TypeError")
       
    4:         self.assertEqual(a2b_qp(type2test(b"=")), b"")
    4:         self.assertEqual(a2b_qp(type2test(b"= ")), b"= ")
    4:         self.assertEqual(a2b_qp(type2test(b"==")), b"=")
    4:         self.assertEqual(a2b_qp(type2test(b"=\nAB")), b"AB")
    4:         self.assertEqual(a2b_qp(type2test(b"=\r\nAB")), b"AB")
    4:         self.assertEqual(a2b_qp(type2test(b"=\rAB")), b"")  # ?
    4:         self.assertEqual(a2b_qp(type2test(b"=\rAB\nCD")), b"CD")  # ?
    4:         self.assertEqual(a2b_qp(type2test(b"=AB")), b"\xab")
    4:         self.assertEqual(a2b_qp(type2test(b"=ab")), b"\xab")
    4:         self.assertEqual(a2b_qp(type2test(b"=AX")), b"=AX")
    4:         self.assertEqual(a2b_qp(type2test(b"=XA")), b"=XA")
    4:         self.assertEqual(a2b_qp(type2test(b"=AB")[:-1]), b"=A")
       
    4:         self.assertEqual(a2b_qp(type2test(b'_')), b'_')
    4:         self.assertEqual(a2b_qp(type2test(b'_'), header=True), b' ')
       
    4:         self.assertRaises(TypeError, b2a_qp, foo="bar")
    4:         self.assertEqual(a2b_qp(type2test(b"=00\r\n=00")), b"\x00\r\n\x00")
    4:         self.assertEqual(b2a_qp(type2test(b"\xff\r\n\xff\n\xff")),
    4:                          b"=FF\r\n=FF\r\n=FF")
    4:         self.assertEqual(b2a_qp(type2test(b"0"*75+b"\xff\r\n\xff\r\n\xff")),
    4:                          b"0"*75+b"=\r\n=FF\r\n=FF\r\n=FF")
       
    4:         self.assertEqual(b2a_qp(type2test(b'\x7f')), b'=7F')
    4:         self.assertEqual(b2a_qp(type2test(b'=')), b'=3D')
       
    4:         self.assertEqual(b2a_qp(type2test(b'_')), b'_')
    4:         self.assertEqual(b2a_qp(type2test(b'_'), header=True), b'=5F')
    4:         self.assertEqual(b2a_qp(type2test(b'x y'), header=True), b'x_y')
    4:         self.assertEqual(b2a_qp(type2test(b'x '), header=True), b'x=20')
    4:         self.assertEqual(b2a_qp(type2test(b'x y'), header=True, quotetabs=True),
    4:                          b'x=20y')
    4:         self.assertEqual(b2a_qp(type2test(b'x\ty'), header=True), b'x\ty')
       
    4:         self.assertEqual(b2a_qp(type2test(b' ')), b'=20')
    4:         self.assertEqual(b2a_qp(type2test(b'\t')), b'=09')
    4:         self.assertEqual(b2a_qp(type2test(b' x')), b' x')
    4:         self.assertEqual(b2a_qp(type2test(b'\tx')), b'\tx')
    4:         self.assertEqual(b2a_qp(type2test(b' x')[:-1]), b'=20')
    4:         self.assertEqual(b2a_qp(type2test(b'\tx')[:-1]), b'=09')
    4:         self.assertEqual(b2a_qp(type2test(b'\0')), b'=00')
       
    4:         self.assertEqual(b2a_qp(type2test(b'\0\n')), b'=00\n')
    4:         self.assertEqual(b2a_qp(type2test(b'\0\n'), quotetabs=True), b'=00\n')
       
    4:         self.assertEqual(b2a_qp(type2test(b'x y\tz')), b'x y\tz')
    4:         self.assertEqual(b2a_qp(type2test(b'x y\tz'), quotetabs=True),
    4:                          b'x=20y=09z')
    4:         self.assertEqual(b2a_qp(type2test(b'x y\tz'), istext=False),
    4:                          b'x y\tz')
    4:         self.assertEqual(b2a_qp(type2test(b'x \ny\t\n')),
    4:                          b'x=20\ny=09\n')
    4:         self.assertEqual(b2a_qp(type2test(b'x \ny\t\n'), quotetabs=True),
    4:                          b'x=20\ny=09\n')
    4:         self.assertEqual(b2a_qp(type2test(b'x \ny\t\n'), istext=False),
    4:                          b'x =0Ay\t=0A')
    4:         self.assertEqual(b2a_qp(type2test(b'x \ry\t\r')),
    4:                          b'x \ry\t\r')
    4:         self.assertEqual(b2a_qp(type2test(b'x \ry\t\r'), quotetabs=True),
    4:                          b'x=20\ry=09\r')
    4:         self.assertEqual(b2a_qp(type2test(b'x \ry\t\r'), istext=False),
    4:                          b'x =0Dy\t=0D')
    4:         self.assertEqual(b2a_qp(type2test(b'x \r\ny\t\r\n')),
    4:                          b'x=20\r\ny=09\r\n')
    4:         self.assertEqual(b2a_qp(type2test(b'x \r\ny\t\r\n'), quotetabs=True),
    4:                          b'x=20\r\ny=09\r\n')
    4:         self.assertEqual(b2a_qp(type2test(b'x \r\ny\t\r\n'), istext=False),
    4:                          b'x =0D=0Ay\t=0D=0A')
       
    4:         self.assertEqual(b2a_qp(type2test(b'x \r\n')[:-1]), b'x \r')
    4:         self.assertEqual(b2a_qp(type2test(b'x\t\r\n')[:-1]), b'x\t\r')
    4:         self.assertEqual(b2a_qp(type2test(b'x \r\n')[:-1], quotetabs=True),
    4:                          b'x=20\r')
    4:         self.assertEqual(b2a_qp(type2test(b'x\t\r\n')[:-1], quotetabs=True),
    4:                          b'x=09\r')
    4:         self.assertEqual(b2a_qp(type2test(b'x \r\n')[:-1], istext=False),
    4:                          b'x =0D')
    4:         self.assertEqual(b2a_qp(type2test(b'x\t\r\n')[:-1], istext=False),
    4:                          b'x\t=0D')
       
    4:         self.assertEqual(b2a_qp(type2test(b'.')), b'=2E')
    4:         self.assertEqual(b2a_qp(type2test(b'.\n')), b'=2E\n')
    4:         self.assertEqual(b2a_qp(type2test(b'.\r')), b'=2E\r')
    4:         self.assertEqual(b2a_qp(type2test(b'.\0')), b'=2E=00')
    4:         self.assertEqual(b2a_qp(type2test(b'a.\n')), b'a.\n')
    4:         self.assertEqual(b2a_qp(type2test(b'.a')[:-1]), b'=2E')
       
    1:     def test_empty_string(self):
               # A test for SF bug #1022953.  Make sure SystemError is not raised.
    4:         empty = self.type2test('')
   68:         for func in all_functions:
   64:             if func == 'crc_hqx':
                       # crc_hqx needs 2 arguments
    4:                 binascii.crc_hqx(empty, 0)
    4:                 continue
   60:             f = getattr(binascii, func)
   60:             try:
   60:                 f(empty)
>>>>>>             except Exception, err:
>>>>>>                 self.fail("{}({!r}) raises {!r}".format(func, empty, err))
       
       
    2: class ArrayBinASCIITest(BinASCIITest):
    1:     def type2test(self, s):
  135:         return array.array('c', s)
       
       
    2: class BytearrayBinASCIITest(BinASCIITest):
    1:     type2test = bytearray
       
       
    2: class MemoryviewBinASCIITest(BinASCIITest):
    1:     type2test = memoryview
       
       
    1: def test_main():
    1:     test_support.run_unittest(BinASCIITest,
    1:                               ArrayBinASCIITest,
    1:                               BytearrayBinASCIITest,
    1:                               MemoryviewBinASCIITest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
