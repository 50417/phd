       # Codec encoding tests for ISO 2022 encodings.
       
    1: from test import test_support
    1: from test import multibytecodec_support
    1: import unittest
       
       COMMON_CODEC_TESTS = (
               # invalid bytes
    1:         (b'ab\xFFcd', 'replace', u'ab\uFFFDcd'),
    1:         (b'ab\x1Bdef', 'replace', u'ab\x1Bdef'),
    1:         (b'ab\x1B$def', 'replace', u'ab\uFFFD'),
           )
       
    2: class Test_ISO2022_JP(multibytecodec_support.TestBase, unittest.TestCase):
    1:     encoding = 'iso2022_jp'
    1:     tstring = multibytecodec_support.load_teststring('iso2022_jp')
    1:     codectests = COMMON_CODEC_TESTS + (
    1:         (b'ab\x1BNdef', 'replace', u'ab\x1BNdef'),
           )
       
    2: class Test_ISO2022_JP2(multibytecodec_support.TestBase, unittest.TestCase):
    1:     encoding = 'iso2022_jp_2'
    1:     tstring = multibytecodec_support.load_teststring('iso2022_jp')
    1:     codectests = COMMON_CODEC_TESTS + (
    1:         (b'ab\x1BNdef', 'replace', u'abdef'),
           )
       
    2: class Test_ISO2022_KR(multibytecodec_support.TestBase, unittest.TestCase):
    1:     encoding = 'iso2022_kr'
    1:     tstring = multibytecodec_support.load_teststring('iso2022_kr')
    1:     codectests = COMMON_CODEC_TESTS + (
    1:         (b'ab\x1BNdef', 'replace', u'ab\x1BNdef'),
           )
       
           # iso2022_kr.txt cannot be used to test "chunk coding": the escape
           # sequence is only written on the first line
    1:     @unittest.skip('iso2022_kr.txt cannot be used to test "chunk coding"')
           def test_chunkcoding(self):
>>>>>>         pass
       
    1: def test_main():
    1:     test_support.run_unittest(__name__)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
