    1: import test.test_support, unittest
       
       # we're testing the behavior of these future builtins:
    1: from future_builtins import hex, oct, map, zip, filter
       
    2: class BuiltinTest(unittest.TestCase):
    1:     def test_hex(self):
    1:         self.assertEqual(hex(0), '0x0')
    1:         self.assertEqual(hex(16), '0x10')
    1:         self.assertEqual(hex(16L), '0x10')
    1:         self.assertEqual(hex(-16), '-0x10')
    1:         self.assertEqual(hex(-16L), '-0x10')
    1:         self.assertRaises(TypeError, hex, {})
       
    1:     def test_oct(self):
    1:         self.assertEqual(oct(0), '0o0')
    1:         self.assertEqual(oct(100), '0o144')
    1:         self.assertEqual(oct(100L), '0o144')
    1:         self.assertEqual(oct(-100), '-0o144')
    1:         self.assertEqual(oct(-100L), '-0o144')
    1:         self.assertRaises(TypeError, oct, ())
       
    1:     def test_itertools(self):
    1:         from itertools import imap, izip, ifilter
               # We will assume that the itertools functions work, so provided
               # that we've got identical coppies, we will work!
    1:         self.assertEqual(map, imap)
    1:         self.assertEqual(zip, izip)
    1:         self.assertEqual(filter, ifilter)
               # Testing that filter(None, stuff) raises a warning lives in
               # test_py3kwarn.py
       
       
    1: def test_main(verbose=None):
    1:     test.test_support.run_unittest(BuiltinTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main(verbose=True)
