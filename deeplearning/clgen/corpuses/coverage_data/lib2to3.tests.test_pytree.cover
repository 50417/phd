       # Copyright 2006 Google, Inc. All Rights Reserved.
       # Licensed to PSF under a Contributor Agreement.
       
       """Unit tests for pytree.py.
       
       NOTE: Please *don't* add doc strings to individual test methods!
       In verbose mode, printing of the module, class and method name is much
       more helpful than printing of (the first line of) the docstring,
       especially when debugging a test.
    1: """
       
    1: from __future__ import with_statement
       
    1: import sys
    1: import warnings
       
       # Testing imports
    1: from . import support
       
    1: from lib2to3 import pytree
       
    1: try:
    1:     sorted
>>>>>> except NameError:
>>>>>>     def sorted(lst):
>>>>>>         l = list(lst)
>>>>>>         l.sort()
>>>>>>         return l
       
    2: class TestNodes(support.TestCase):
       
    1:     """Unit tests for nodes (Base, Leaf, Node)."""
       
    1:     if sys.version_info >= (2,6):
               # warnings.catch_warnings is new in 2.6.
    1:         def test_deprecated_prefix_methods(self):
    1:             l = pytree.Leaf(100, "foo")
    1:             with warnings.catch_warnings(record=True) as w:
    1:                 warnings.simplefilter("always", DeprecationWarning)
    1:                 self.assertEqual(l.get_prefix(), "")
    1:                 l.set_prefix("hi")
    1:             self.assertEqual(l.prefix, "hi")
    1:             self.assertEqual(len(w), 2)
    3:             for warning in w:
    2:                 self.assertTrue(warning.category is DeprecationWarning)
    1:             self.assertEqual(str(w[0].message), "get_prefix() is deprecated; " \
                                        "use the prefix property")
    1:             self.assertEqual(str(w[1].message), "set_prefix() is deprecated; " \
                                        "use the prefix property")
       
    1:     def test_instantiate_base(self):
               if __debug__:
                   # Test that instantiating Base() raises an AssertionError
    1:             self.assertRaises(AssertionError, pytree.Base)
       
    1:     def test_leaf(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         self.assertEqual(l1.type, 100)
    1:         self.assertEqual(l1.value, "foo")
       
    1:     def test_leaf_repr(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         self.assertEqual(repr(l1), "Leaf(100, 'foo')")
       
    1:     def test_leaf_str(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         self.assertEqual(str(l1), "foo")
    1:         l2 = pytree.Leaf(100, "foo", context=(" ", (10, 1)))
    1:         self.assertEqual(str(l2), " foo")
       
    1:     def test_leaf_str_numeric_value(self):
               # Make sure that the Leaf's value is stringified. Failing to
               #  do this can cause a TypeError in certain situations.
    1:         l1 = pytree.Leaf(2, 5)
    1:         l1.prefix = "foo_"
    1:         self.assertEqual(str(l1), "foo_5")
       
    1:     def test_leaf_equality(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l2 = pytree.Leaf(100, "foo", context=(" ", (1, 0)))
    1:         self.assertEqual(l1, l2)
    1:         l3 = pytree.Leaf(101, "foo")
    1:         l4 = pytree.Leaf(100, "bar")
    1:         self.assertNotEqual(l1, l3)
    1:         self.assertNotEqual(l1, l4)
       
    1:     def test_leaf_prefix(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         self.assertEqual(l1.prefix, "")
    1:         self.assertFalse(l1.was_changed)
    1:         l1.prefix = "  ##\n\n"
    1:         self.assertEqual(l1.prefix, "  ##\n\n")
    1:         self.assertTrue(l1.was_changed)
       
    1:     def test_node(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l2 = pytree.Leaf(200, "bar")
    1:         n1 = pytree.Node(1000, [l1, l2])
    1:         self.assertEqual(n1.type, 1000)
    1:         self.assertEqual(n1.children, [l1, l2])
       
    1:     def test_node_repr(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l2 = pytree.Leaf(100, "bar", context=(" ", (1, 0)))
    1:         n1 = pytree.Node(1000, [l1, l2])
    1:         self.assertEqual(repr(n1),
    1:                          "Node(1000, [%s, %s])" % (repr(l1), repr(l2)))
       
    1:     def test_node_str(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l2 = pytree.Leaf(100, "bar", context=(" ", (1, 0)))
    1:         n1 = pytree.Node(1000, [l1, l2])
    1:         self.assertEqual(str(n1), "foo bar")
       
    1:     def test_node_prefix(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         self.assertEqual(l1.prefix, "")
    1:         n1 = pytree.Node(1000, [l1])
    1:         self.assertEqual(n1.prefix, "")
    1:         n1.prefix = " "
    1:         self.assertEqual(n1.prefix, " ")
    1:         self.assertEqual(l1.prefix, " ")
       
    1:     def test_get_suffix(self):
    1:         l1 = pytree.Leaf(100, "foo", prefix="a")
    1:         l2 = pytree.Leaf(100, "bar", prefix="b")
    1:         n1 = pytree.Node(1000, [l1, l2])
       
    1:         self.assertEqual(l1.get_suffix(), l2.prefix)
    1:         self.assertEqual(l2.get_suffix(), "")
    1:         self.assertEqual(n1.get_suffix(), "")
       
    1:         l3 = pytree.Leaf(100, "bar", prefix="c")
    1:         n2 = pytree.Node(1000, [n1, l3])
       
    1:         self.assertEqual(n1.get_suffix(), l3.prefix)
    1:         self.assertEqual(l3.get_suffix(), "")
    1:         self.assertEqual(n2.get_suffix(), "")
       
    1:     def test_node_equality(self):
    1:         n1 = pytree.Node(1000, ())
    1:         n2 = pytree.Node(1000, [], context=(" ", (1, 0)))
    1:         self.assertEqual(n1, n2)
    1:         n3 = pytree.Node(1001, ())
    1:         self.assertNotEqual(n1, n3)
       
    1:     def test_node_recursive_equality(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l2 = pytree.Leaf(100, "foo")
    1:         n1 = pytree.Node(1000, [l1])
    1:         n2 = pytree.Node(1000, [l2])
    1:         self.assertEqual(n1, n2)
    1:         l3 = pytree.Leaf(100, "bar")
    1:         n3 = pytree.Node(1000, [l3])
    1:         self.assertNotEqual(n1, n3)
       
    1:     def test_replace(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l2 = pytree.Leaf(100, "+")
    1:         l3 = pytree.Leaf(100, "bar")
    1:         n1 = pytree.Node(1000, [l1, l2, l3])
    1:         self.assertEqual(n1.children, [l1, l2, l3])
    1:         self.assertIsInstance(n1.children, list)
    1:         self.assertFalse(n1.was_changed)
    1:         l2new = pytree.Leaf(100, "-")
    1:         l2.replace(l2new)
    1:         self.assertEqual(n1.children, [l1, l2new, l3])
    1:         self.assertIsInstance(n1.children, list)
    1:         self.assertTrue(n1.was_changed)
       
    1:     def test_replace_with_list(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l2 = pytree.Leaf(100, "+")
    1:         l3 = pytree.Leaf(100, "bar")
    1:         n1 = pytree.Node(1000, [l1, l2, l3])
       
    1:         l2.replace([pytree.Leaf(100, "*"), pytree.Leaf(100, "*")])
    1:         self.assertEqual(str(n1), "foo**bar")
    1:         self.assertIsInstance(n1.children, list)
       
    1:     def test_leaves(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l2 = pytree.Leaf(100, "bar")
    1:         l3 = pytree.Leaf(100, "fooey")
    1:         n2 = pytree.Node(1000, [l1, l2])
    1:         n3 = pytree.Node(1000, [l3])
    1:         n1 = pytree.Node(1000, [n2, n3])
       
    1:         self.assertEqual(list(n1.leaves()), [l1, l2, l3])
       
    1:     def test_depth(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l2 = pytree.Leaf(100, "bar")
    1:         n2 = pytree.Node(1000, [l1, l2])
    1:         n3 = pytree.Node(1000, [])
    1:         n1 = pytree.Node(1000, [n2, n3])
       
    1:         self.assertEqual(l1.depth(), 2)
    1:         self.assertEqual(n3.depth(), 1)
    1:         self.assertEqual(n1.depth(), 0)
       
    1:     def test_post_order(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l2 = pytree.Leaf(100, "bar")
    1:         l3 = pytree.Leaf(100, "fooey")
    1:         c1 = pytree.Node(1000, [l1, l2])
    1:         n1 = pytree.Node(1000, [c1, l3])
    1:         self.assertEqual(list(n1.post_order()), [l1, l2, c1, l3, n1])
       
    1:     def test_pre_order(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l2 = pytree.Leaf(100, "bar")
    1:         l3 = pytree.Leaf(100, "fooey")
    1:         c1 = pytree.Node(1000, [l1, l2])
    1:         n1 = pytree.Node(1000, [c1, l3])
    1:         self.assertEqual(list(n1.pre_order()), [n1, c1, l1, l2, l3])
       
    1:     def test_changed(self):
    1:         l1 = pytree.Leaf(100, "f")
    1:         self.assertFalse(l1.was_changed)
    1:         l1.changed()
    1:         self.assertTrue(l1.was_changed)
       
    1:         l1 = pytree.Leaf(100, "f")
    1:         n1 = pytree.Node(1000, [l1])
    1:         self.assertFalse(n1.was_changed)
    1:         n1.changed()
    1:         self.assertTrue(n1.was_changed)
       
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l2 = pytree.Leaf(100, "+")
    1:         l3 = pytree.Leaf(100, "bar")
    1:         n1 = pytree.Node(1000, [l1, l2, l3])
    1:         n2 = pytree.Node(1000, [n1])
    1:         self.assertFalse(l1.was_changed)
    1:         self.assertFalse(n1.was_changed)
    1:         self.assertFalse(n2.was_changed)
       
    1:         n1.changed()
    1:         self.assertTrue(n1.was_changed)
    1:         self.assertTrue(n2.was_changed)
    1:         self.assertFalse(l1.was_changed)
       
    1:     def test_leaf_constructor_prefix(self):
    3:         for prefix in ("xyz_", ""):
    2:             l1 = pytree.Leaf(100, "self", prefix=prefix)
    2:             self.assertTrue(str(l1), prefix + "self")
    2:             self.assertEqual(l1.prefix, prefix)
       
    1:     def test_node_constructor_prefix(self):
    3:         for prefix in ("xyz_", ""):
    2:             l1 = pytree.Leaf(100, "self")
    2:             l2 = pytree.Leaf(100, "foo", prefix="_")
    2:             n1 = pytree.Node(1000, [l1, l2], prefix=prefix)
    2:             self.assertTrue(str(n1), prefix + "self_foo")
    2:             self.assertEqual(n1.prefix, prefix)
    2:             self.assertEqual(l1.prefix, prefix)
    2:             self.assertEqual(l2.prefix, "_")
       
    1:     def test_remove(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l2 = pytree.Leaf(100, "foo")
    1:         n1 = pytree.Node(1000, [l1, l2])
    1:         n2 = pytree.Node(1000, [n1])
       
    1:         self.assertEqual(n1.remove(), 0)
    1:         self.assertEqual(n2.children, [])
    1:         self.assertEqual(l1.parent, n1)
    1:         self.assertEqual(n1.parent, None)
    1:         self.assertEqual(n2.parent, None)
    1:         self.assertFalse(n1.was_changed)
    1:         self.assertTrue(n2.was_changed)
       
    1:         self.assertEqual(l2.remove(), 1)
    1:         self.assertEqual(l1.remove(), 0)
    1:         self.assertEqual(n1.children, [])
    1:         self.assertEqual(l1.parent, None)
    1:         self.assertEqual(n1.parent, None)
    1:         self.assertEqual(n2.parent, None)
    1:         self.assertTrue(n1.was_changed)
    1:         self.assertTrue(n2.was_changed)
       
    1:     def test_remove_parentless(self):
    1:         n1 = pytree.Node(1000, [])
    1:         n1.remove()
    1:         self.assertEqual(n1.parent, None)
       
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l1.remove()
    1:         self.assertEqual(l1.parent, None)
       
    1:     def test_node_set_child(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         n1 = pytree.Node(1000, [l1])
       
    1:         l2 = pytree.Leaf(100, "bar")
    1:         n1.set_child(0, l2)
    1:         self.assertEqual(l1.parent, None)
    1:         self.assertEqual(l2.parent, n1)
    1:         self.assertEqual(n1.children, [l2])
       
    1:         n2 = pytree.Node(1000, [l1])
    1:         n2.set_child(0, n1)
    1:         self.assertEqual(l1.parent, None)
    1:         self.assertEqual(n1.parent, n2)
    1:         self.assertEqual(n2.parent, None)
    1:         self.assertEqual(n2.children, [n1])
       
    1:         self.assertRaises(IndexError, n1.set_child, 4, l2)
               # I don't care what it raises, so long as it's an exception
    1:         self.assertRaises(Exception, n1.set_child, 0, list)
       
    1:     def test_node_insert_child(self):
    1:         l1 = pytree.Leaf(100, "foo")
    1:         n1 = pytree.Node(1000, [l1])
       
    1:         l2 = pytree.Leaf(100, "bar")
    1:         n1.insert_child(0, l2)
    1:         self.assertEqual(l2.parent, n1)
    1:         self.assertEqual(n1.children, [l2, l1])
       
    1:         l3 = pytree.Leaf(100, "abc")
    1:         n1.insert_child(2, l3)
    1:         self.assertEqual(n1.children, [l2, l1, l3])
       
               # I don't care what it raises, so long as it's an exception
    1:         self.assertRaises(Exception, n1.insert_child, 0, list)
       
    1:     def test_node_append_child(self):
    1:         n1 = pytree.Node(1000, [])
       
    1:         l1 = pytree.Leaf(100, "foo")
    1:         n1.append_child(l1)
    1:         self.assertEqual(l1.parent, n1)
    1:         self.assertEqual(n1.children, [l1])
       
    1:         l2 = pytree.Leaf(100, "bar")
    1:         n1.append_child(l2)
    1:         self.assertEqual(l2.parent, n1)
    1:         self.assertEqual(n1.children, [l1, l2])
       
               # I don't care what it raises, so long as it's an exception
    1:         self.assertRaises(Exception, n1.append_child, list)
       
    1:     def test_node_next_sibling(self):
    1:         n1 = pytree.Node(1000, [])
    1:         n2 = pytree.Node(1000, [])
    1:         p1 = pytree.Node(1000, [n1, n2])
       
    1:         self.assertIs(n1.next_sibling, n2)
    1:         self.assertEqual(n2.next_sibling, None)
    1:         self.assertEqual(p1.next_sibling, None)
       
    1:     def test_leaf_next_sibling(self):
    1:         l1 = pytree.Leaf(100, "a")
    1:         l2 = pytree.Leaf(100, "b")
    1:         p1 = pytree.Node(1000, [l1, l2])
       
    1:         self.assertIs(l1.next_sibling, l2)
    1:         self.assertEqual(l2.next_sibling, None)
    1:         self.assertEqual(p1.next_sibling, None)
       
    1:     def test_node_prev_sibling(self):
    1:         n1 = pytree.Node(1000, [])
    1:         n2 = pytree.Node(1000, [])
    1:         p1 = pytree.Node(1000, [n1, n2])
       
    1:         self.assertIs(n2.prev_sibling, n1)
    1:         self.assertEqual(n1.prev_sibling, None)
    1:         self.assertEqual(p1.prev_sibling, None)
       
    1:     def test_leaf_prev_sibling(self):
    1:         l1 = pytree.Leaf(100, "a")
    1:         l2 = pytree.Leaf(100, "b")
    1:         p1 = pytree.Node(1000, [l1, l2])
       
    1:         self.assertIs(l2.prev_sibling, l1)
    1:         self.assertEqual(l1.prev_sibling, None)
    1:         self.assertEqual(p1.prev_sibling, None)
       
       
    2: class TestPatterns(support.TestCase):
       
    1:     """Unit tests for tree matching patterns."""
       
    1:     def test_basic_patterns(self):
               # Build a tree
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l2 = pytree.Leaf(100, "bar")
    1:         l3 = pytree.Leaf(100, "foo")
    1:         n1 = pytree.Node(1000, [l1, l2])
    1:         n2 = pytree.Node(1000, [l3])
    1:         root = pytree.Node(1000, [n1, n2])
               # Build a pattern matching a leaf
    1:         pl = pytree.LeafPattern(100, "foo", name="pl")
    1:         r = {}
    1:         self.assertFalse(pl.match(root, results=r))
    1:         self.assertEqual(r, {})
    1:         self.assertFalse(pl.match(n1, results=r))
    1:         self.assertEqual(r, {})
    1:         self.assertFalse(pl.match(n2, results=r))
    1:         self.assertEqual(r, {})
    1:         self.assertTrue(pl.match(l1, results=r))
    1:         self.assertEqual(r, {"pl": l1})
    1:         r = {}
    1:         self.assertFalse(pl.match(l2, results=r))
    1:         self.assertEqual(r, {})
               # Build a pattern matching a node
    1:         pn = pytree.NodePattern(1000, [pl], name="pn")
    1:         self.assertFalse(pn.match(root, results=r))
    1:         self.assertEqual(r, {})
    1:         self.assertFalse(pn.match(n1, results=r))
    1:         self.assertEqual(r, {})
    1:         self.assertTrue(pn.match(n2, results=r))
    1:         self.assertEqual(r, {"pn": n2, "pl": l3})
    1:         r = {}
    1:         self.assertFalse(pn.match(l1, results=r))
    1:         self.assertEqual(r, {})
    1:         self.assertFalse(pn.match(l2, results=r))
    1:         self.assertEqual(r, {})
       
    1:     def test_wildcard(self):
               # Build a tree for testing
    1:         l1 = pytree.Leaf(100, "foo")
    1:         l2 = pytree.Leaf(100, "bar")
    1:         l3 = pytree.Leaf(100, "foo")
    1:         n1 = pytree.Node(1000, [l1, l2])
    1:         n2 = pytree.Node(1000, [l3])
    1:         root = pytree.Node(1000, [n1, n2])
               # Build a pattern
    1:         pl = pytree.LeafPattern(100, "foo", name="pl")
    1:         pn = pytree.NodePattern(1000, [pl], name="pn")
    1:         pw = pytree.WildcardPattern([[pn], [pl, pl]], name="pw")
    1:         r = {}
    1:         self.assertFalse(pw.match_seq([root], r))
    1:         self.assertEqual(r, {})
    1:         self.assertFalse(pw.match_seq([n1], r))
    1:         self.assertEqual(r, {})
    1:         self.assertTrue(pw.match_seq([n2], r))
               # These are easier to debug
    1:         self.assertEqual(sorted(r.keys()), ["pl", "pn", "pw"])
    1:         self.assertEqual(r["pl"], l1)
    1:         self.assertEqual(r["pn"], n2)
    1:         self.assertEqual(r["pw"], [n2])
               # But this is equivalent
    1:         self.assertEqual(r, {"pl": l1, "pn": n2, "pw": [n2]})
    1:         r = {}
    1:         self.assertTrue(pw.match_seq([l1, l3], r))
    1:         self.assertEqual(r, {"pl": l3, "pw": [l1, l3]})
    1:         self.assertIs(r["pl"], l3)
    1:         r = {}
       
    1:     def test_generate_matches(self):
    1:         la = pytree.Leaf(1, "a")
    1:         lb = pytree.Leaf(1, "b")
    1:         lc = pytree.Leaf(1, "c")
    1:         ld = pytree.Leaf(1, "d")
    1:         le = pytree.Leaf(1, "e")
    1:         lf = pytree.Leaf(1, "f")
    1:         leaves = [la, lb, lc, ld, le, lf]
    1:         root = pytree.Node(1000, leaves)
    1:         pa = pytree.LeafPattern(1, "a", "pa")
    1:         pb = pytree.LeafPattern(1, "b", "pb")
    1:         pc = pytree.LeafPattern(1, "c", "pc")
    1:         pd = pytree.LeafPattern(1, "d", "pd")
    1:         pe = pytree.LeafPattern(1, "e", "pe")
    1:         pf = pytree.LeafPattern(1, "f", "pf")
    1:         pw = pytree.WildcardPattern([[pa, pb, pc], [pd, pe],
    1:                                      [pa, pb], [pc, pd], [pe, pf]],
    1:                                     min=1, max=4, name="pw")
    6:         self.assertEqual([x[0] for x in pw.generate_matches(leaves)],
    1:                          [3, 5, 2, 4, 6])
    1:         pr = pytree.NodePattern(type=1000, content=[pw], name="pr")
    1:         matches = list(pytree.generate_matches([pr], [root]))
    1:         self.assertEqual(len(matches), 1)
    1:         c, r = matches[0]
    1:         self.assertEqual(c, 1)
    1:         self.assertEqual(str(r["pr"]), "abcdef")
    1:         self.assertEqual(r["pw"], [la, lb, lc, ld, le, lf])
    7:         for c in "abcdef":
    6:             self.assertEqual(r["p" + c], pytree.Leaf(1, c))
       
    1:     def test_has_key_example(self):
    1:         pattern = pytree.NodePattern(331,
    1:                                      (pytree.LeafPattern(7),
    1:                                       pytree.WildcardPattern(name="args"),
    1:                                       pytree.LeafPattern(8)))
    1:         l1 = pytree.Leaf(7, "(")
    1:         l2 = pytree.Leaf(3, "x")
    1:         l3 = pytree.Leaf(8, ")")
    1:         node = pytree.Node(331, [l1, l2, l3])
    1:         r = {}
    1:         self.assertTrue(pattern.match(node, r))
    1:         self.assertEqual(r["args"], [l2])
