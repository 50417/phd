    1: from test import test_support
    1: mimetools = test_support.import_module('mimetools', deprecated=True)
    1: multifile = test_support.import_module('multifile', deprecated=True)
    1: import cStringIO
       
       msg = """Mime-Version: 1.0
       Content-Type: multipart/mixed;
               boundary="=====================_590453667==_"
       X-OriginalArrivalTime: 05 Feb 2002 03:43:23.0310 (UTC) FILETIME=[42D88CE0:01C1ADF7]
       
       --=====================_590453667==_
       Content-Type: multipart/alternative;
               boundary="=====================_590453677==_.ALT"
       
       --=====================_590453677==_.ALT
       Content-Type: text/plain; charset="us-ascii"; format=flowed
       
       test A
       --=====================_590453677==_.ALT
       Content-Type: text/html; charset="us-ascii"
       
       <html>
       <b>test B</font></b></html>
       
       --=====================_590453677==_.ALT--
       
       --=====================_590453667==_
       Content-Type: text/plain; charset="us-ascii"
       Content-Disposition: attachment; filename="att.txt"
       
       Attached Content.
       Attached Content.
       Attached Content.
       Attached Content.
       
       --=====================_590453667==_--
       
    1: """
       
    1: def getMIMEMsg(mf):
           global boundaries, linecount
    5:     msg = mimetools.Message(mf)
       
           #print "TYPE: %s" % msg.gettype()
    5:     if msg.getmaintype() == 'multipart':
    2:         boundary = msg.getparam("boundary")
    2:         boundaries += 1
       
    2:         mf.push(boundary)
    6:         while mf.next():
    4:             getMIMEMsg(mf)
    2:         mf.pop()
           else:
    3:         lines = mf.readlines()
    3:         linecount += len(lines)
       
    1: def test_main():
           global boundaries, linecount
    1:     boundaries = 0
    1:     linecount = 0
    1:     f = cStringIO.StringIO(msg)
    1:     getMIMEMsg(multifile.MultiFile(f))
    1:     assert boundaries == 2
    1:     assert linecount == 9
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
