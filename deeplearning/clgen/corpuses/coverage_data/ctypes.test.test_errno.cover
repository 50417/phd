    1: import unittest, os, errno
    1: from ctypes import *
    1: from ctypes.util import find_library
    1: from test import test_support
    1: try:
    1:     import threading
>>>>>> except ImportError:
>>>>>>     threading = None
       
    2: class Test(unittest.TestCase):
    1:     def test_open(self):
    1:         libc_name = find_library("c")
    1:         if libc_name is None:
>>>>>>             raise unittest.SkipTest("Unable to find C library")
    1:         libc = CDLL(libc_name, use_errno=True)
    1:         if os.name == "nt":
>>>>>>             libc_open = libc._open
               else:
    1:             libc_open = libc.open
       
    1:         libc_open.argtypes = c_char_p, c_int
       
    1:         self.assertEqual(libc_open("", 0), -1)
    1:         self.assertEqual(get_errno(), errno.ENOENT)
       
    1:         self.assertEqual(set_errno(32), errno.ENOENT)
    1:         self.assertEqual(get_errno(), 32)
       
    1:         if threading:
    1:             def _worker():
    1:                 set_errno(0)
       
    1:                 libc = CDLL(libc_name, use_errno=False)
    1:                 if os.name == "nt":
>>>>>>                     libc_open = libc._open
                       else:
    1:                     libc_open = libc.open
    1:                 libc_open.argtypes = c_char_p, c_int
    1:                 self.assertEqual(libc_open("", 0), -1)
    1:                 self.assertEqual(get_errno(), 0)
       
    1:             t = threading.Thread(target=_worker)
    1:             t.start()
    1:             t.join()
       
    1:             self.assertEqual(get_errno(), 32)
    1:             set_errno(0)
       
    1:     @unittest.skipUnless(os.name == "nt", 'Test specific to Windows')
           def test_GetLastError(self):
>>>>>>         dll = WinDLL("kernel32", use_last_error=True)
>>>>>>         GetModuleHandle = dll.GetModuleHandleA
>>>>>>         GetModuleHandle.argtypes = [c_wchar_p]
       
>>>>>>         self.assertEqual(0, GetModuleHandle("foo"))
>>>>>>         self.assertEqual(get_last_error(), 126)
       
>>>>>>         self.assertEqual(set_last_error(32), 126)
>>>>>>         self.assertEqual(get_last_error(), 32)
       
>>>>>>         def _worker():
>>>>>>             set_last_error(0)
       
>>>>>>             dll = WinDLL("kernel32", use_last_error=False)
>>>>>>             GetModuleHandle = dll.GetModuleHandleW
>>>>>>             GetModuleHandle.argtypes = [c_wchar_p]
>>>>>>             GetModuleHandle("bar")
       
>>>>>>             self.assertEqual(get_last_error(), 0)
       
>>>>>>         t = threading.Thread(target=_worker)
>>>>>>         t.start()
>>>>>>         t.join()
       
>>>>>>         self.assertEqual(get_last_error(), 32)
       
>>>>>>         set_last_error(0)
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
