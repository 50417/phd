    1: """Tests for distutils.spawn."""
    1: import unittest
    1: import os
    1: import time
    1: from test.test_support import captured_stdout, run_unittest
       
    1: from distutils.spawn import _nt_quote_args
    1: from distutils.spawn import spawn, find_executable
    1: from distutils.errors import DistutilsExecError
    1: from distutils.tests import support
       
    2: class SpawnTestCase(support.TempdirManager,
    1:                     support.LoggingSilencer,
    1:                     unittest.TestCase):
       
    1:     def test_nt_quote_args(self):
       
    1:         for (args, wanted) in ((['with space', 'nospace'],
    1:                                 ['"with space"', 'nospace']),
    1:                                (['nochange', 'nospace'],
    3:                                 ['nochange', 'nospace'])):
    2:             res = _nt_quote_args(args)
    2:             self.assertEqual(res, wanted)
       
       
    1:     @unittest.skipUnless(os.name in ('nt', 'posix'),
    1:                          'Runs only under posix or nt')
           def test_spawn(self):
    1:         tmpdir = self.mkdtemp()
       
               # creating something executable
               # through the shell that returns 1
    1:         if os.name == 'posix':
    1:             exe = os.path.join(tmpdir, 'foo.sh')
    1:             self.write_file(exe, '#!/bin/sh\nexit 1')
    1:             os.chmod(exe, 0777)
               else:
>>>>>>             exe = os.path.join(tmpdir, 'foo.bat')
>>>>>>             self.write_file(exe, 'exit 1')
       
    1:         os.chmod(exe, 0777)
    1:         self.assertRaises(DistutilsExecError, spawn, [exe])
       
               # now something that works
    1:         if os.name == 'posix':
    1:             exe = os.path.join(tmpdir, 'foo.sh')
    1:             self.write_file(exe, '#!/bin/sh\nexit 0')
    1:             os.chmod(exe, 0777)
               else:
>>>>>>             exe = os.path.join(tmpdir, 'foo.bat')
>>>>>>             self.write_file(exe, 'exit 0')
       
    1:         os.chmod(exe, 0777)
    1:         spawn([exe])  # should work without any error
       
    1: def test_suite():
    1:     return unittest.makeSuite(SpawnTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     run_unittest(test_suite())
