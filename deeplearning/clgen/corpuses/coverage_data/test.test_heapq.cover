    1: """Unittests for heapq."""
       
    1: import sys
    1: import random
       
    1: from test import test_support
    1: from unittest import TestCase, skipUnless
       
    1: py_heapq = test_support.import_fresh_module('heapq', blocked=['_heapq'])
    1: c_heapq = test_support.import_fresh_module('heapq', fresh=['_heapq'])
       
       # _heapq.nlargest/nsmallest are saved in heapq._nlargest/_smallest when
       # _heapq is imported, so check them there
    1: func_names = ['heapify', 'heappop', 'heappush', 'heappushpop',
    1:               'heapreplace', '_nlargest', '_nsmallest']
       
    2: class TestModules(TestCase):
    1:     def test_py_functions(self):
    8:         for fname in func_names:
    7:             self.assertEqual(getattr(py_heapq, fname).__module__, 'heapq')
       
    1:     @skipUnless(c_heapq, 'requires _heapq')
           def test_c_functions(self):
    8:         for fname in func_names:
    7:             self.assertEqual(getattr(c_heapq, fname).__module__, '_heapq')
       
       
    2: class TestHeap(TestCase):
    1:     module = None
       
    1:     def test_push_pop(self):
               # 1) Push 256 random numbers and pop them off, verifying all's OK.
    2:         heap = []
    2:         data = []
    2:         self.check_invariant(heap)
  514:         for i in range(256):
  512:             item = random.random()
  512:             data.append(item)
  512:             self.module.heappush(heap, item)
  512:             self.check_invariant(heap)
    2:         results = []
  514:         while heap:
  512:             item = self.module.heappop(heap)
  512:             self.check_invariant(heap)
  512:             results.append(item)
    2:         data_sorted = data[:]
    2:         data_sorted.sort()
    2:         self.assertEqual(data_sorted, results)
               # 2) Check that the invariant holds for a sorted array
    2:         self.check_invariant(results)
       
    2:         self.assertRaises(TypeError, self.module.heappush, [])
    2:         try:
    2:             self.assertRaises(TypeError, self.module.heappush, None, None)
    1:             self.assertRaises(TypeError, self.module.heappop, None)
    1:         except AttributeError:
    1:             pass
       
    1:     def check_invariant(self, heap):
               # Check the heap invariant.
133542:         for pos, item in enumerate(heap):
132454:             if pos: # pos 0 has no parent
131372:                 parentpos = (pos-1) >> 1
131372:                 self.assertTrue(heap[parentpos] <= item)
       
    1:     def test_heapify(self):
   62:         for size in range(30):
  930:             heap = [random.random() for dummy in range(size)]
   60:             self.module.heapify(heap)
   60:             self.check_invariant(heap)
       
    2:         self.assertRaises(TypeError, self.module.heapify, None)
       
    1:     def test_naive_nbest(self):
 2002:         data = [random.randrange(2000) for i in range(1000)]
    2:         heap = []
 2002:         for item in data:
 2000:             self.module.heappush(heap, item)
 2000:             if len(heap) > 10:
 1980:                 self.module.heappop(heap)
    2:         heap.sort()
    2:         self.assertEqual(heap, sorted(data)[-10:])
       
    1:     def heapiter(self, heap):
               # An iterator returning a heap's elements, smallest-first.
    4:         try:
    4:             while 1:
   44:                 yield self.module.heappop(heap)
    4:         except IndexError:
    4:             pass
       
    1:     def test_nbest(self):
               # Less-naive "N-best" algorithm, much faster (if len(data) is big
               # enough <wink>) than sorting all of data.  However, if we had a max
               # heap instead of a min heap, it could go faster still via
               # heapify'ing all of data (linear time), then doing 10 heappops
               # (10 log-time steps).
 2002:         data = [random.randrange(2000) for i in range(1000)]
    2:         heap = data[:10]
    2:         self.module.heapify(heap)
 1982:         for item in data[10:]:
 1980:             if item > heap[0]:  # this gets rarer the longer we run
   95:                 self.module.heapreplace(heap, item)
    2:         self.assertEqual(list(self.heapiter(heap)), sorted(data)[-10:])
       
    2:         self.assertRaises(TypeError, self.module.heapreplace, None)
    2:         self.assertRaises(TypeError, self.module.heapreplace, None, None)
    2:         self.assertRaises(IndexError, self.module.heapreplace, [], None)
       
    1:     def test_nbest_with_pushpop(self):
 2002:         data = [random.randrange(2000) for i in range(1000)]
    2:         heap = data[:10]
    2:         self.module.heapify(heap)
 1982:         for item in data[10:]:
 1980:             self.module.heappushpop(heap, item)
    2:         self.assertEqual(list(self.heapiter(heap)), sorted(data)[-10:])
    2:         self.assertEqual(self.module.heappushpop([], 'x'), 'x')
       
    1:     def test_heappushpop(self):
    2:         h = []
    2:         x = self.module.heappushpop(h, 10)
    2:         self.assertEqual((h, x), ([], 10))
       
    2:         h = [10]
    2:         x = self.module.heappushpop(h, 10.0)
    2:         self.assertEqual((h, x), ([10], 10.0))
    2:         self.assertEqual(type(h[0]), int)
    2:         self.assertEqual(type(x), float)
       
    2:         h = [10];
    2:         x = self.module.heappushpop(h, 9)
    2:         self.assertEqual((h, x), ([10], 9))
       
    2:         h = [10];
    2:         x = self.module.heappushpop(h, 11)
    2:         self.assertEqual((h, x), ([11], 10))
       
    1:     def test_heapsort(self):
               # Exercise everything with repeated heapsort checks
  202:         for trial in xrange(100):
  200:             size = random.randrange(50)
 5458:             data = [random.randrange(25) for i in range(size)]
  200:             if trial & 1:     # Half of the time, use heapify
  100:                 heap = data[:]
  100:                 self.module.heapify(heap)
                   else:             # The rest of the time, use heappush
  100:                 heap = []
 2722:                 for item in data:
 2622:                     self.module.heappush(heap, item)
 5458:             heap_sorted = [self.module.heappop(heap) for i in range(size)]
  200:             self.assertEqual(heap_sorted, sorted(data))
       
    1:     def test_merge(self):
    2:         inputs = []
    6:         for i in xrange(random.randrange(5)):
   24:             row = sorted(random.randrange(1000) for j in range(random.randrange(10)))
    4:             inputs.append(row)
    2:         self.assertEqual(sorted(chain(*inputs)), list(self.module.merge(*inputs)))
    2:         self.assertEqual(list(self.module.merge()), [])
       
    1:     def test_merge_does_not_suppress_index_error(self):
               # Issue 19018: Heapq.merge suppresses IndexError from user generator
    2:         def iterable():
    4:             s = list(range(10))
   42:             for i in range(20):
   42:                 yield s[i]       # IndexError when i > 10
    2:         with self.assertRaises(IndexError):
    2:             list(self.module.merge(iterable(), iterable()))
       
    1:     def test_merge_stability(self):
    4:         class Int(int):
    2:             pass
    2:         inputs = [[], [], [], []]
40002:         for i in range(20000):
40000:             stream = random.randrange(4)
40000:             x = random.randrange(500)
40000:             obj = Int(x)
40000:             obj.pair = (x, stream)
40000:             inputs[stream].append(obj)
   10:         for stream in inputs:
    8:             stream.sort()
40002:         result = [i.pair for i in self.module.merge(*inputs)]
    2:         self.assertEqual(result, sorted(result))
       
    1:     def test_nsmallest(self):
 2002:         data = [(random.randrange(2000), i) for i in range(1000)]
34006:         for f in (None, lambda x:  x[0] * 547 % 2000):
   40:             for n in (0, 1, 2, 10, 100, 400, 999, 1000, 1100):
   36:                 self.assertEqual(self.module.nsmallest(n, data), sorted(data)[:n])
   36:                 self.assertEqual(self.module.nsmallest(n, data, key=f),
   36:                                  sorted(data, key=f)[:n])
       
    1:     def test_nlargest(self):
 2002:         data = [(random.randrange(2000), i) for i in range(1000)]
34006:         for f in (None, lambda x:  x[0] * 547 % 2000):
   40:             for n in (0, 1, 2, 10, 100, 400, 999, 1000, 1100):
   36:                 self.assertEqual(self.module.nlargest(n, data),
   36:                                  sorted(data, reverse=True)[:n])
   36:                 self.assertEqual(self.module.nlargest(n, data, key=f),
   36:                                  sorted(data, key=f, reverse=True)[:n])
       
    1:     def test_comparison_operator(self):
               # Issue 3051: Make sure heapq works with both __lt__ and __le__
    2:         def hsort(data, comp):
    4:             data = map(comp, data)
    4:             self.module.heapify(data)
  404:             return [self.module.heappop(data).x for i in range(len(data))]
    4:         class LT:
    2:             def __init__(self, x):
  200:                 self.x = x
    2:             def __lt__(self, other):
 1397:                 return self.x > other.x
    4:         class LE:
    2:             def __init__(self, x):
  200:                 self.x = x
    2:             def __le__(self, other):
 1397:                 return self.x >= other.x
  202:         data = [random.random() for i in range(100)]
    2:         target = sorted(data, reverse=True)
    2:         self.assertEqual(hsort(data, LT), target)
    2:         self.assertEqual(hsort(data, LE), target)
       
       
    2: class TestHeapPython(TestHeap):
    1:     module = py_heapq
       
       
    2: @skipUnless(c_heapq, 'requires _heapq')
    1: class TestHeapC(TestHeap):
    1:     module = c_heapq
       
       
       #==============================================================================
       
    2: class LenOnly:
    1:     "Dummy sequence class defining __len__ but not __getitem__."
    1:     def __len__(self):
    6:         return 10
       
    2: class GetOnly:
    1:     "Dummy sequence class defining __getitem__ but not __len__."
    1:     def __getitem__(self, ndx):
>>>>>>         return 10
       
    2: class CmpErr:
    1:     "Dummy element that always raises an error during comparison"
    1:     def __cmp__(self, other):
   12:         raise ZeroDivisionError
       
    1: def R(seqn):
           'Regular generator'
 8400:     for i in seqn:
 8360:         yield i
       
    2: class G:
    1:     'Sequence using __getitem__'
    1:     def __init__(self, seqn):
   40:         self.seqn = seqn
    1:     def __getitem__(self, i):
 8400:         return self.seqn[i]
       
    2: class I:
    1:     'Sequence using iterator protocol'
    1:     def __init__(self, seqn):
   20:         self.seqn = seqn
   20:         self.i = 0
    1:     def __iter__(self):
   20:         return self
    1:     def next(self):
 4200:         if self.i >= len(self.seqn): raise StopIteration
 4180:         v = self.seqn[self.i]
 4180:         self.i += 1
 4180:         return v
       
    2: class Ig:
    1:     'Sequence using iterator protocol defined with a generator'
    1:     def __init__(self, seqn):
   40:         self.seqn = seqn
   40:         self.i = 0
    1:     def __iter__(self):
 8400:         for val in self.seqn:
 8360:             yield val
       
    2: class X:
    1:     'Missing __getitem__ and __iter__'
    1:     def __init__(self, seqn):
   20:         self.seqn = seqn
   20:         self.i = 0
    1:     def next(self):
>>>>>>         if self.i >= len(self.seqn): raise StopIteration
>>>>>>         v = self.seqn[self.i]
>>>>>>         self.i += 1
>>>>>>         return v
       
    2: class N:
    1:     'Iterator missing next()'
    1:     def __init__(self, seqn):
   20:         self.seqn = seqn
   20:         self.i = 0
    1:     def __iter__(self):
   20:         return self
       
    2: class E:
    1:     'Test propagation of exceptions'
    1:     def __init__(self, seqn):
   20:         self.seqn = seqn
   20:         self.i = 0
    1:     def __iter__(self):
   20:         return self
    1:     def next(self):
   20:         3 // 0
       
    2: class S:
    1:     'Test immediate stop'
    1:     def __init__(self, seqn):
   20:         pass
    1:     def __iter__(self):
   20:         return self
    1:     def next(self):
   20:         raise StopIteration
       
    1: from itertools import chain, imap
    1: def L(seqn):
           'Test multiple tiers of iterators'
 4200:     return chain(imap(lambda x:x, R(Ig(G(seqn)))))
       
    2: class SideEffectLT:
    1:     def __init__(self, value, heap):
  802:         self.value = value
  802:         self.heap = heap
       
    1:     def __lt__(self, other):
    4:         self.heap[:] = []
    4:         return self.value < other.value
       
       
    2: class TestErrorHandling(TestCase):
    1:     module = None
       
    1:     def test_non_sequence(self):
    6:         for f in (self.module.heapify, self.module.heappop):
    4:             self.assertRaises((TypeError, AttributeError), f, 10)
    2:         for f in (self.module.heappush, self.module.heapreplace,
   10:                   self.module.nlargest, self.module.nsmallest):
    8:             self.assertRaises((TypeError, AttributeError), f, 10, 10)
       
    1:     def test_len_only(self):
    6:         for f in (self.module.heapify, self.module.heappop):
    4:             self.assertRaises((TypeError, AttributeError), f, LenOnly())
    6:         for f in (self.module.heappush, self.module.heapreplace):
    4:             self.assertRaises((TypeError, AttributeError), f, LenOnly(), 10)
    6:         for f in (self.module.nlargest, self.module.nsmallest):
    4:             self.assertRaises(TypeError, f, 2, LenOnly())
       
    1:     def test_get_only(self):
    2:         seq = [CmpErr(), CmpErr(), CmpErr()]
    6:         for f in (self.module.heapify, self.module.heappop):
    4:             self.assertRaises(ZeroDivisionError, f, seq)
    6:         for f in (self.module.heappush, self.module.heapreplace):
    4:             self.assertRaises(ZeroDivisionError, f, seq, 10)
    6:         for f in (self.module.nlargest, self.module.nsmallest):
    4:             self.assertRaises(ZeroDivisionError, f, 2, seq)
       
    1:     def test_arg_parsing(self):
    2:         for f in (self.module.heapify, self.module.heappop,
    2:                   self.module.heappush, self.module.heapreplace,
   14:                   self.module.nlargest, self.module.nsmallest):
   12:             self.assertRaises((TypeError, AttributeError), f, 10)
       
    1:     def test_iterable_args(self):
    6:         for f in (self.module.nlargest, self.module.nsmallest):
   24:             for s in ("123", "", range(1000), ('do', 1.2), xrange(2000,2200,5)):
  120:                 for g in (G, I, Ig, L, R):
  100:                     with test_support.check_py3k_warnings(
  100:                             ("comparing unequal types not supported",
  100:                              DeprecationWarning), quiet=True):
  100:                         self.assertEqual(f(2, g(s)), f(2,s))
   20:                 self.assertEqual(f(2, S(s)), [])
   20:                 self.assertRaises(TypeError, f, 2, X(s))
   20:                 self.assertRaises(TypeError, f, 2, N(s))
   20:                 self.assertRaises(ZeroDivisionError, f, 2, E(s))
       
           # Issue #17278: the heap may change size while it's being walked.
       
    1:     def test_heappush_mutating_heap(self):
    2:         heap = []
  404:         heap.extend(SideEffectLT(i, heap) for i in range(200))
               # Python version raises IndexError, C version RuntimeError
    2:         with self.assertRaises((IndexError, RuntimeError)):
    2:             self.module.heappush(heap, SideEffectLT(5, heap))
       
    1:     def test_heappop_mutating_heap(self):
    2:         heap = []
  404:         heap.extend(SideEffectLT(i, heap) for i in range(200))
               # Python version raises IndexError, C version RuntimeError
    2:         with self.assertRaises((IndexError, RuntimeError)):
    2:             self.module.heappop(heap)
       
       
    2: class TestErrorHandlingPython(TestErrorHandling):
    1:     module = py_heapq
       
       
    2: @skipUnless(c_heapq, 'requires _heapq')
    1: class TestErrorHandlingC(TestErrorHandling):
    1:     module = c_heapq
       
       
       #==============================================================================
       
       
    1: def test_main(verbose=None):
    1:     test_classes = [TestModules, TestHeapPython, TestHeapC,
    1:                     TestErrorHandlingPython, TestErrorHandlingC]
    1:     test_support.run_unittest(*test_classes)
       
           # verify reference counting
    1:     if verbose and hasattr(sys, "gettotalrefcount"):
>>>>>>         import gc
>>>>>>         counts = [None] * 5
>>>>>>         for i in xrange(len(counts)):
>>>>>>             test_support.run_unittest(*test_classes)
>>>>>>             gc.collect()
>>>>>>             counts[i] = sys.gettotalrefcount()
>>>>>>         print counts
       
    1: if __name__ == "__main__":
>>>>>>     test_main(verbose=True)
