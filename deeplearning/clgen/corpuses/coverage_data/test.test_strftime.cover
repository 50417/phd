       """
       Unittest for time.strftime
    1: """
       
    1: import calendar
    1: import sys
    1: import re
    1: from test import test_support
    1: import time
    1: import unittest
       
       
       # helper functions
    1: def fixasctime(s):
  251:     if s[8] == ' ':
   65:         s = s[:8] + '0' + s[9:]
  251:     return s
       
    1: def escapestr(text, ampm):
           """
           Escape text to deal with possible locale values that have regex
           syntax while allowing regex syntax used for comparison.
           """
 8283:     new_text = re.escape(text)
 8283:     new_text = new_text.replace(re.escape(ampm), ampm)
 8283:     new_text = new_text.replace('\%', '%')
 8283:     new_text = new_text.replace('\:', ':')
 8283:     new_text = new_text.replace('\?', '?')
 8283:     return new_text
       
    2: class StrftimeTest(unittest.TestCase):
       
    1:     def __init__(self, *k, **kw):
    1:         unittest.TestCase.__init__(self, *k, **kw)
       
    1:     def _update_variables(self, now):
               # we must update the local variables on every cycle
  251:         self.gmt = time.gmtime(now)
  251:         now = time.localtime(now)
       
  251:         if now[3] < 12: self.ampm='(AM|am)'
  126:         else: self.ampm='(PM|pm)'
       
  251:         self.jan1 = time.localtime(time.mktime((now[0], 1, 1, 0, 0, 0, 0, 1, 0)))
       
  251:         try:
  251:             if now[8]: self.tz = time.tzname[1]
   93:             else: self.tz = time.tzname[0]
>>>>>>         except AttributeError:
>>>>>>             self.tz = ''
       
  251:         if now[3] > 12: self.clock12 = now[3] - 12
  135:         elif now[3] > 0: self.clock12 = now[3]
   11:         else: self.clock12 = 12
       
  251:         self.now = now
       
    1:     def setUp(self):
    1:         try:
    1:             import java
>>>>>>             java.util.Locale.setDefault(java.util.Locale.US)
    1:         except ImportError:
    1:             import locale
    1:             locale.setlocale(locale.LC_TIME, 'C')
       
    1:     def test_strftime(self):
    1:         now = time.time()
    1:         self._update_variables(now)
    1:         self.strftest1(now)
    1:         self.strftest2(now)
       
    1:         if test_support.verbose:
>>>>>>             print "Strftime test, platform: %s, Python version: %s" % \
>>>>>>                   (sys.platform, sys.version.split()[0])
       
   11:         for j in range(-5, 5):
  260:             for i in range(25):
  250:                 arg = now + (i+j*100)*23*3603
  250:                 self._update_variables(arg)
  250:                 self.strftest1(arg)
  250:                 self.strftest2(arg)
       
    1:     def strftest1(self, now):
  251:         if test_support.verbose:
>>>>>>             print "strftime test for", time.ctime(now)
  251:         now = self.now
               # Make sure any characters that could be taken as regex syntax is
               # escaped in escapestr()
               expectations = (
  251:             ('%a', calendar.day_abbr[now[6]], 'abbreviated weekday name'),
  251:             ('%A', calendar.day_name[now[6]], 'full weekday name'),
  251:             ('%b', calendar.month_abbr[now[1]], 'abbreviated month name'),
  251:             ('%B', calendar.month_name[now[1]], 'full month name'),
                   # %c see below
  251:             ('%d', '%02d' % now[2], 'day of month as number (00-31)'),
  251:             ('%H', '%02d' % now[3], 'hour (00-23)'),
  251:             ('%I', '%02d' % self.clock12, 'hour (01-12)'),
  251:             ('%j', '%03d' % now[7], 'julian day (001-366)'),
  251:             ('%m', '%02d' % now[1], 'month as number (01-12)'),
  251:             ('%M', '%02d' % now[4], 'minute, (00-59)'),
  251:             ('%p', self.ampm, 'AM or PM as appropriate'),
  251:             ('%S', '%02d' % now[5], 'seconds of current time (00-60)'),
  251:             ('%U', '%02d' % ((now[7] + self.jan1[6])//7),
  251:              'week number of the year (Sun 1st)'),
  251:             ('%w', '0?%d' % ((1+now[6]) % 7), 'weekday as a number (Sun 1st)'),
  251:             ('%W', '%02d' % ((now[7] + (self.jan1[6] - 1)%7)//7),
  251:             'week number of the year (Mon 1st)'),
                   # %x see below
  251:             ('%X', '%02d:%02d:%02d' % (now[3], now[4], now[5]), '%H:%M:%S'),
  251:             ('%y', '%02d' % (now[0]%100), 'year without century'),
  251:             ('%Y', '%d' % now[0], 'year with century'),
                   # %Z see below
  251:             ('%%', '%', 'single percent sign'),
               )
       
 5020:         for e in expectations:
                   # musn't raise a value error
 4769:             try:
 4769:                 result = time.strftime(e[0], now)
>>>>>>             except ValueError, error:
>>>>>>                 self.fail("strftime '%s' format gave error: %s" % (e[0], error))
 4769:             if re.match(escapestr(e[1], self.ampm), result):
 4769:                 continue
>>>>>>             if not result or result[0] == '%':
>>>>>>                 self.fail("strftime does not support standard '%s' format (%s)"
>>>>>>                           % (e[0], e[2]))
                   else:
>>>>>>                 self.fail("Conflict for %s (%s): expected %s, but got %s"
>>>>>>                           % (e[0], e[2], e[1], result))
       
    1:     def strftest2(self, now):
  251:         nowsecs = str(long(now))[:-1]
  251:         now = self.now
       
               nonstandard_expectations = (
               # These are standard but don't have predictable output
  251:             ('%c', fixasctime(time.asctime(now)), 'near-asctime() format'),
  251:             ('%x', '%02d/%02d/%02d' % (now[1], now[2], (now[0]%100)),
  251:             '%m/%d/%y %H:%M:%S'),
  251:             ('%Z', '%s' % self.tz, 'time zone name'),
       
                   # These are some platform specific extensions
  251:             ('%D', '%02d/%02d/%02d' % (now[1], now[2], (now[0]%100)), 'mm/dd/yy'),
  251:             ('%e', '%2d' % now[2], 'day of month as number, blank padded ( 0-31)'),
  251:             ('%h', calendar.month_abbr[now[1]], 'abbreviated month name'),
  251:             ('%k', '%2d' % now[3], 'hour, blank padded ( 0-23)'),
  251:             ('%n', '\n', 'newline character'),
  251:             ('%r', '%02d:%02d:%02d %s' % (self.clock12, now[4], now[5], self.ampm),
  251:             '%I:%M:%S %p'),
  251:             ('%R', '%02d:%02d' % (now[3], now[4]), '%H:%M'),
  251:             ('%s', nowsecs, 'seconds since the Epoch in UCT'),
  251:             ('%t', '\t', 'tab character'),
  251:             ('%T', '%02d:%02d:%02d' % (now[3], now[4], now[5]), '%H:%M:%S'),
  251:             ('%3y', '%03d' % (now[0]%100),
  251:             'year without century rendered using fieldwidth'),
               )
       
 3765:         for e in nonstandard_expectations:
 3514:             try:
 3514:                 result = time.strftime(e[0], now)
>>>>>>             except ValueError, result:
>>>>>>                 msg = "Error for nonstandard '%s' format (%s): %s" % \
>>>>>>                       (e[0], e[2], str(result))
>>>>>>                 if test_support.verbose:
>>>>>>                     print msg
>>>>>>                 continue
       
 3514:             if re.match(escapestr(e[1], self.ampm), result):
 3198:                 if test_support.verbose:
>>>>>>                     print "Supports nonstandard '%s' format (%s)" % (e[0], e[2])
  316:             elif not result or result[0] == '%':
>>>>>>                 if test_support.verbose:
>>>>>>                     print "Does not appear to support '%s' format (%s)" % \
>>>>>>                            (e[0], e[2])
                   else:
  316:                 if test_support.verbose:
>>>>>>                     print "Conflict for nonstandard '%s' format (%s):" % \
>>>>>>                            (e[0], e[2])
>>>>>>                     print "  Expected %s, but got %s" % (e[1], result)
       
    1: def test_main():
    1:     test_support.run_unittest(StrftimeTest)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
