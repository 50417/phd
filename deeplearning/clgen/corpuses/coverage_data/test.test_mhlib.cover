       """
          Tests for the mhlib module
          Nick Mathewson
    1: """
       
       ### BUG: This suite doesn't currently test the mime functionality of
       ###      mhlib.  It should.
       
    1: import unittest
    1: from test.test_support import run_unittest, TESTFN, import_module
    1: import os, StringIO
    1: import sys
    1: mhlib = import_module('mhlib', deprecated=True)
       
    1: if (sys.platform.startswith("win") or sys.platform=="riscos" or
    1:       sys.platform.startswith("atheos")):
           # mhlib.updateline() renames a file to the name of a file that already
           # exists.  That causes a reasonable OS <wink> to complain in test_sequence
           # here, like the "OSError: [Errno 17] File exists" raised on Windows.
           # mhlib's listsubfolders() and listallfolders() do something with
           # link counts, and that causes test_listfolders() here to get back
           # an empty list from its call of listallfolders().
           # The other tests here pass on Windows.
>>>>>>     raise unittest.SkipTest("skipped on %s -- " % sys.platform +
>>>>>>                             "too many Unix assumptions")
       
    1: _mhroot = TESTFN+"_MH"
    1: _mhpath = os.path.join(_mhroot, "MH")
    1: _mhprofile = os.path.join(_mhroot, ".mh_profile")
       
    1: def normF(f):
  796:     return os.path.join(*f.split('/'))
       
    1: def writeFile(fname, contents):
  788:     dir = os.path.split(fname)[0]
  788:     if dir and not os.path.exists(dir):
>>>>>>         mkdirs(dir)
  788:     f = open(fname, 'w')
  788:     f.write(contents)
  788:     f.close()
       
    1: def readFile(fname):
    7:     f = open(fname)
    7:     r = f.read()
    7:     f.close()
    7:     return r
       
    1: def writeProfile(dict):
   20:     contents = [ "%s: %s\n" % (k, v) for k, v in dict.iteritems() ]
    5:     writeFile(_mhprofile, "".join(contents))
       
    1: def writeContext(folder):
    1:     folder = normF(folder)
    1:     writeFile(os.path.join(_mhpath, "context"),
    1:               "Current-Folder: %s\n" % folder)
       
    1: def writeCurMessage(folder, cur):
    2:     folder = normF(folder)
    2:     writeFile(os.path.join(_mhpath, folder, ".mh_sequences"),
    2:               "cur: %s\n"%cur)
       
    1: def writeMessage(folder, n, headers, body):
  780:     folder = normF(folder)
 2310:     headers = "".join([ "%s: %s\n" % (k, v) for k, v in headers.iteritems() ])
  780:     contents = "%s\n%s\n" % (headers,body)
  780:     mkdirs(os.path.join(_mhpath, folder))
  780:     writeFile(os.path.join(_mhpath, folder, str(n)), contents)
       
    1: def getMH():
    5:     return mhlib.MH(os.path.abspath(_mhpath), _mhprofile)
       
    1: def sortLines(s):
    3:     lines = s.split("\n")
   14:     lines = [ line.strip() for line in lines if len(line) >= 2 ]
    3:     lines.sort()
    3:     return lines
       
       # These next 2 functions are copied from test_glob.py.
    1: def mkdirs(fname):
  825:     if os.path.exists(fname) or fname == '':
  785:         return
   40:     base, file = os.path.split(fname)
   40:     mkdirs(base)
   40:     os.mkdir(fname)
       
    1: def deltree(fname):
   45:     if not os.path.exists(fname):
    5:         return
  863:     for f in os.listdir(fname):
  823:         fullname = os.path.join(fname, f)
  823:         if os.path.isdir(fullname):
   35:             deltree(fullname)
               else:
  788:             try:
  788:                 os.unlink(fullname)
>>>>>>             except:
>>>>>>                 pass
   40:     try:
   40:         os.rmdir(fname)
>>>>>>     except:
>>>>>>         pass
       
    2: class MhlibTests(unittest.TestCase):
    1:     def setUp(self):
    5:         deltree(_mhroot)
    5:         mkdirs(_mhpath)
    5:         writeProfile({'Path' : os.path.abspath(_mhpath),
    5:                       'Editor': 'emacs',
    5:                       'ignored-attribute': 'camping holiday'})
               # Note: These headers aren't really conformant to RFC822, but
               #  mhlib shouldn't care about that.
       
               # An inbox with a couple of messages.
    5:         writeMessage('inbox', 1,
    5:                      {'From': 'Mrs. Premise',
    5:                       'To': 'Mrs. Conclusion',
    5:                       'Date': '18 July 2001'}, "Hullo, Mrs. Conclusion!\n")
    5:         writeMessage('inbox', 2,
    5:                      {'From': 'Mrs. Conclusion',
    5:                       'To': 'Mrs. Premise',
    5:                       'Date': '29 July 2001'}, "Hullo, Mrs. Premise!\n")
       
               # A folder with many messages
  735:         for i in range(5, 101)+range(101, 201, 2):
  730:             writeMessage('wide', i,
  730:                          {'From': 'nowhere', 'Subject': 'message #%s' % i},
  730:                          "This is message number %s\n" % i)
       
               # A deeply nested folder
    5:         def deep(folder, n):
   40:             writeMessage(folder, n,
   40:                          {'Subject': 'Message %s/%s' % (folder, n) },
   40:                          "This is message number %s in %s\n" % (n, folder) )
    5:         deep('deep/f1', 1)
    5:         deep('deep/f1', 2)
    5:         deep('deep/f1', 3)
    5:         deep('deep/f2', 4)
    5:         deep('deep/f2', 6)
    5:         deep('deep', 3)
    5:         deep('deep/f2/f3', 1)
    5:         deep('deep/f2/f3', 2)
       
    1:     def tearDown(self):
    5:         deltree(_mhroot)
       
    1:     def test_basic(self):
    1:         writeContext('inbox')
    1:         writeCurMessage('inbox', 2)
    1:         mh = getMH()
       
    1:         eq = self.assertEqual
    1:         eq(mh.getprofile('Editor'), 'emacs')
    1:         eq(mh.getprofile('not-set'), None)
    1:         eq(mh.getpath(), os.path.abspath(_mhpath))
    1:         eq(mh.getcontext(), 'inbox')
       
    1:         mh.setcontext('wide')
    1:         eq(mh.getcontext(), 'wide')
    1:         eq(readFile(os.path.join(_mhpath, 'context')),
    1:            "Current-Folder: wide\n")
       
    1:         mh.setcontext('inbox')
       
    1:         inbox = mh.openfolder('inbox')
    1:         eq(inbox.getfullname(),
    1:            os.path.join(os.path.abspath(_mhpath), 'inbox'))
    1:         eq(inbox.getsequencesfilename(),
    1:            os.path.join(os.path.abspath(_mhpath), 'inbox', '.mh_sequences'))
    1:         eq(inbox.getmessagefilename(1),
    1:            os.path.join(os.path.abspath(_mhpath), 'inbox', '1'))
       
    1:     def test_listfolders(self):
    1:         mh = getMH()
    1:         eq = self.assertEqual
       
    1:         folders = mh.listfolders()
    1:         folders.sort()
    1:         eq(folders, ['deep', 'inbox', 'wide'])
       
    1:         folders = mh.listallfolders()
    1:         folders.sort()
    1:         tfolders = map(normF, ['deep', 'deep/f1', 'deep/f2', 'deep/f2/f3',
    1:                                 'inbox', 'wide'])
    1:         tfolders.sort()
    1:         eq(folders, tfolders)
       
    1:         folders = mh.listsubfolders('deep')
    1:         folders.sort()
    1:         eq(folders, map(normF, ['deep/f1', 'deep/f2']))
       
    1:         folders = mh.listallsubfolders('deep')
    1:         folders.sort()
    1:         eq(folders, map(normF, ['deep/f1', 'deep/f2', 'deep/f2/f3']))
    1:         eq(mh.listsubfolders(normF('deep/f2')), [normF('deep/f2/f3')])
       
    1:         eq(mh.listsubfolders('inbox'), [])
    1:         eq(mh.listallsubfolders('inbox'), [])
       
    1:     def test_sequence(self):
    1:         mh = getMH()
    1:         eq = self.assertEqual
    1:         writeCurMessage('wide', 55)
       
    1:         f = mh.openfolder('wide')
    1:         all = f.listmessages()
    1:         eq(all, range(5, 101)+range(101, 201, 2))
    1:         eq(f.getcurrent(), 55)
    1:         f.setcurrent(99)
    1:         eq(readFile(os.path.join(_mhpath, 'wide', '.mh_sequences')),
    1:            'cur: 99\n')
       
    1:         def seqeq(seq, val):
   18:             eq(f.parsesequence(seq), val)
       
    1:         seqeq('5-55', range(5, 56))
    1:         seqeq('90-108', range(90, 101)+range(101, 109, 2))
    1:         seqeq('90-108', range(90, 101)+range(101, 109, 2))
       
    1:         seqeq('10:10', range(10, 20))
    1:         seqeq('10:+10', range(10, 20))
    1:         seqeq('101:10', range(101, 121, 2))
       
    1:         seqeq('cur', [99])
    1:         seqeq('.', [99])
    1:         seqeq('prev', [98])
    1:         seqeq('next', [100])
    1:         seqeq('cur:-3', [97, 98, 99])
    1:         seqeq('first-cur', range(5, 100))
    1:         seqeq('150-last', range(151, 201, 2))
    1:         seqeq('prev-next', [98, 99, 100])
       
    1:         lowprimes = [5, 7, 11, 13, 17, 19, 23, 29]
   27:         lowcompos = [x for x in range(5, 31) if not x in lowprimes ]
    1:         f.putsequences({'cur': [5],
    1:                         'lowprime': lowprimes,
    1:                         'lowcompos': lowcompos})
    1:         seqs = readFile(os.path.join(_mhpath, 'wide', '.mh_sequences'))
    1:         seqs = sortLines(seqs)
    1:         eq(seqs, ["cur: 5",
    1:                   "lowcompos: 6 8-10 12 14-16 18 20-22 24-28 30",
    1:                   "lowprime: 5 7 11 13 17 19 23 29"])
       
    1:         seqeq('lowprime', lowprimes)
    1:         seqeq('lowprime:1', [5])
    1:         seqeq('lowprime:2', [5, 7])
    1:         seqeq('lowprime:-2', [23, 29])
       
               ## Not supported
               #seqeq('lowprime:first', [5])
               #seqeq('lowprime:last', [29])
               #seqeq('lowprime:prev', [29])
               #seqeq('lowprime:next', [29])
       
    1:     def test_modify(self):
    1:         mh = getMH()
    1:         eq = self.assertEqual
       
    1:         mh.makefolder("dummy1")
    1:         self.assertIn("dummy1", mh.listfolders())
    1:         path = os.path.join(_mhpath, "dummy1")
    1:         self.assertTrue(os.path.exists(path))
       
    1:         f = mh.openfolder('dummy1')
    1:         def create(n):
    6:             msg = "From: foo\nSubject: %s\n\nDummy Message %s\n" % (n,n)
    6:             f.createmessage(n, StringIO.StringIO(msg))
       
    1:         create(7)
    1:         create(8)
    1:         create(9)
       
    1:         eq(readFile(f.getmessagefilename(9)),
    1:            "From: foo\nSubject: 9\n\nDummy Message 9\n")
       
    1:         eq(f.listmessages(), [7, 8, 9])
    1:         files = os.listdir(path)
    1:         files.sort()
    1:         eq(files, ['7', '8', '9'])
       
    1:         f.removemessages(['7', '8'])
    1:         files = os.listdir(path)
    1:         files.sort()
    1:         eq(files, [',7', ',8', '9'])
    1:         eq(f.listmessages(), [9])
    1:         create(10)
    1:         create(11)
    1:         create(12)
       
    1:         mh.makefolder("dummy2")
    1:         f2 = mh.openfolder("dummy2")
    1:         eq(f2.listmessages(), [])
    1:         f.movemessage(10, f2, 3)
    1:         f.movemessage(11, f2, 5)
    1:         eq(f.listmessages(), [9, 12])
    1:         eq(f2.listmessages(), [3, 5])
    1:         eq(readFile(f2.getmessagefilename(3)),
    1:            "From: foo\nSubject: 10\n\nDummy Message 10\n")
       
    1:         f.copymessage(9, f2, 4)
    1:         eq(f.listmessages(), [9, 12])
    1:         eq(readFile(f2.getmessagefilename(4)),
    1:            "From: foo\nSubject: 9\n\nDummy Message 9\n")
       
    1:         f.refilemessages([9, 12], f2)
    1:         eq(f.listmessages(), [])
    1:         eq(f2.listmessages(), [3, 4, 5, 6, 7])
    1:         eq(readFile(f2.getmessagefilename(7)),
    1:            "From: foo\nSubject: 12\n\nDummy Message 12\n")
               # XXX This should check that _copysequences does the right thing.
       
    1:         mh.deletefolder('dummy1')
    1:         mh.deletefolder('dummy2')
    1:         self.assertNotIn('dummy1', mh.listfolders())
    1:         self.assertTrue(not os.path.exists(path))
       
    1:     def test_read(self):
    1:         mh = getMH()
    1:         eq = self.assertEqual
       
    1:         f = mh.openfolder('inbox')
    1:         msg = f.openmessage(1)
               # Check some basic stuff from rfc822
    1:         eq(msg.getheader('From'), "Mrs. Premise")
    1:         eq(msg.getheader('To'), "Mrs. Conclusion")
       
               # Okay, we have the right message.  Let's check the stuff from
               # mhlib.
    1:         lines = sortLines(msg.getheadertext())
    1:         eq(lines, ["Date: 18 July 2001",
    1:                    "From: Mrs. Premise",
    1:                    "To: Mrs. Conclusion"])
    4:         lines = sortLines(msg.getheadertext(lambda h: len(h)==4))
    1:         eq(lines, ["Date: 18 July 2001",
    1:                    "From: Mrs. Premise"])
    1:         eq(msg.getbodytext(), "Hullo, Mrs. Conclusion!\n\n")
    1:         eq(msg.getbodytext(0), "Hullo, Mrs. Conclusion!\n\n")
       
               # XXXX there should be a better way to reclaim the file handle
    1:         msg.fp.close()
    1:         del msg
       
       
    1: def test_main():
    1:     run_unittest(MhlibTests)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
