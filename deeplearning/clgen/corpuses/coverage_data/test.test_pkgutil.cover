    1: from test.test_support import run_unittest
    1: import unittest
    1: import sys
    1: import imp
    1: import pkgutil
    1: import os
    1: import os.path
    1: import tempfile
    1: import shutil
    1: import zipfile
       
       
       
    2: class PkgutilTests(unittest.TestCase):
       
    1:     def setUp(self):
    3:         self.dirname = tempfile.mkdtemp()
    3:         self.addCleanup(shutil.rmtree, self.dirname)
    3:         sys.path.insert(0, self.dirname)
       
    1:     def tearDown(self):
    3:         del sys.path[0]
       
    1:     def test_getdata_filesys(self):
    1:         pkg = 'test_getdata_filesys'
       
               # Include a LF and a CRLF, to test that binary data is read back
    1:         RESOURCE_DATA = 'Hello, world!\nSecond line\r\nThird line'
       
               # Make a package with some resources
    1:         package_dir = os.path.join(self.dirname, pkg)
    1:         os.mkdir(package_dir)
               # Empty init.py
    1:         f = open(os.path.join(package_dir, '__init__.py'), "wb")
    1:         f.close()
               # Resource files, res.txt, sub/res.txt
    1:         f = open(os.path.join(package_dir, 'res.txt'), "wb")
    1:         f.write(RESOURCE_DATA)
    1:         f.close()
    1:         os.mkdir(os.path.join(package_dir, 'sub'))
    1:         f = open(os.path.join(package_dir, 'sub', 'res.txt'), "wb")
    1:         f.write(RESOURCE_DATA)
    1:         f.close()
       
               # Check we can read the resources
    1:         res1 = pkgutil.get_data(pkg, 'res.txt')
    1:         self.assertEqual(res1, RESOURCE_DATA)
    1:         res2 = pkgutil.get_data(pkg, 'sub/res.txt')
    1:         self.assertEqual(res2, RESOURCE_DATA)
       
    1:         del sys.modules[pkg]
       
    1:     def test_getdata_zipfile(self):
    1:         zip = 'test_getdata_zipfile.zip'
    1:         pkg = 'test_getdata_zipfile'
       
               # Include a LF and a CRLF, to test that binary data is read back
    1:         RESOURCE_DATA = 'Hello, world!\nSecond line\r\nThird line'
       
               # Make a package with some resources
    1:         zip_file = os.path.join(self.dirname, zip)
    1:         z = zipfile.ZipFile(zip_file, 'w')
       
               # Empty init.py
    1:         z.writestr(pkg + '/__init__.py', "")
               # Resource files, res.txt, sub/res.txt
    1:         z.writestr(pkg + '/res.txt', RESOURCE_DATA)
    1:         z.writestr(pkg + '/sub/res.txt', RESOURCE_DATA)
    1:         z.close()
       
               # Check we can read the resources
    1:         sys.path.insert(0, zip_file)
    1:         res1 = pkgutil.get_data(pkg, 'res.txt')
    1:         self.assertEqual(res1, RESOURCE_DATA)
    1:         res2 = pkgutil.get_data(pkg, 'sub/res.txt')
    1:         self.assertEqual(res2, RESOURCE_DATA)
    1:         del sys.path[0]
       
    1:         del sys.modules[pkg]
       
    1:     def test_unreadable_dir_on_syspath(self):
               # issue7367 - walk_packages failed if unreadable dir on sys.path
    1:         package_name = "unreadable_package"
    1:         d = os.path.join(self.dirname, package_name)
               # this does not appear to create an unreadable dir on Windows
               #   but the test should not fail anyway
    1:         os.mkdir(d, 0)
    1:         self.addCleanup(os.rmdir, d)
    1:         for t in pkgutil.walk_packages(path=[self.dirname]):
>>>>>>             self.fail("unexpected package found")
       
    2: class PkgutilPEP302Tests(unittest.TestCase):
       
    2:     class MyTestLoader(object):
    1:         def load_module(self, fullname):
                   # Create an empty module
    3:             mod = sys.modules.setdefault(fullname, imp.new_module(fullname))
    3:             mod.__file__ = "<%s>" % self.__class__.__name__
    3:             mod.__loader__ = self
                   # Make it a package
    3:             mod.__path__ = []
                   # Count how many times the module is reloaded
    3:             mod.__dict__['loads'] = mod.__dict__.get('loads',0) + 1
    3:             return mod
       
    1:         def get_data(self, path):
    2:             return "Hello, world!"
       
    2:     class MyTestImporter(object):
    1:         def find_module(self, fullname, path=None):
    3:             return PkgutilPEP302Tests.MyTestLoader()
       
    1:     def setUp(self):
    2:         sys.meta_path.insert(0, self.MyTestImporter())
       
    1:     def tearDown(self):
    2:         del sys.meta_path[0]
       
    1:     def test_getdata_pep302(self):
               # Use a dummy importer/loader
    1:         self.assertEqual(pkgutil.get_data('foo', 'dummy'), "Hello, world!")
    1:         del sys.modules['foo']
       
    1:     def test_alreadyloaded(self):
               # Ensure that get_data works without reloading - the "loads" module
               # variable in the example loader should count how many times a reload
               # occurs.
    1:         import foo
    1:         self.assertEqual(foo.loads, 1)
    1:         self.assertEqual(pkgutil.get_data('foo', 'dummy'), "Hello, world!")
    1:         self.assertEqual(foo.loads, 1)
    1:         del sys.modules['foo']
       
    1: def test_main():
    1:     run_unittest(PkgutilTests, PkgutilPEP302Tests)
           # this is necessary if test is run repeated (like when finding leaks)
    1:     import zipimport
    1:     zipimport._zip_directory_cache.clear()
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
