    1: """Unit tests for collections.defaultdict."""
       
    1: import os
    1: import copy
    1: import tempfile
    1: import unittest
    1: from test import test_support
       
    1: from collections import defaultdict
       
    1: def foobar():
>>>>>>     return list
       
    2: class TestDefaultDict(unittest.TestCase):
       
    1:     def test_basic(self):
    1:         d1 = defaultdict()
    1:         self.assertEqual(d1.default_factory, None)
    1:         d1.default_factory = list
    1:         d1[12].append(42)
    1:         self.assertEqual(d1, {12: [42]})
    1:         d1[12].append(24)
    1:         self.assertEqual(d1, {12: [42, 24]})
    1:         d1[13]
    1:         d1[14]
    1:         self.assertEqual(d1, {12: [42, 24], 13: [], 14: []})
    1:         self.assertTrue(d1[12] is not d1[13] is not d1[14])
    1:         d2 = defaultdict(list, foo=1, bar=2)
    1:         self.assertEqual(d2.default_factory, list)
    1:         self.assertEqual(d2, {"foo": 1, "bar": 2})
    1:         self.assertEqual(d2["foo"], 1)
    1:         self.assertEqual(d2["bar"], 2)
    1:         self.assertEqual(d2[42], [])
    1:         self.assertIn("foo", d2)
    1:         self.assertIn("foo", d2.keys())
    1:         self.assertIn("bar", d2)
    1:         self.assertIn("bar", d2.keys())
    1:         self.assertIn(42, d2)
    1:         self.assertIn(42, d2.keys())
    1:         self.assertNotIn(12, d2)
    1:         self.assertNotIn(12, d2.keys())
    1:         d2.default_factory = None
    1:         self.assertEqual(d2.default_factory, None)
    1:         try:
    1:             d2[15]
    1:         except KeyError, err:
    1:             self.assertEqual(err.args, (15,))
               else:
>>>>>>             self.fail("d2[15] didn't raise KeyError")
    1:         self.assertRaises(TypeError, defaultdict, 1)
       
    1:     def test_missing(self):
    1:         d1 = defaultdict()
    1:         self.assertRaises(KeyError, d1.__missing__, 42)
    1:         d1.default_factory = list
    1:         self.assertEqual(d1.__missing__(42), [])
       
    1:     def test_repr(self):
    1:         d1 = defaultdict()
    1:         self.assertEqual(d1.default_factory, None)
    1:         self.assertEqual(repr(d1), "defaultdict(None, {})")
    1:         self.assertEqual(eval(repr(d1)), d1)
    1:         d1[11] = 41
    1:         self.assertEqual(repr(d1), "defaultdict(None, {11: 41})")
    1:         d2 = defaultdict(int)
    1:         self.assertEqual(d2.default_factory, int)
    1:         d2[12] = 42
    1:         self.assertEqual(repr(d2), "defaultdict(<type 'int'>, {12: 42})")
    2:         def foo(): return 43
    1:         d3 = defaultdict(foo)
    1:         self.assertTrue(d3.default_factory is foo)
    1:         d3[13]
    1:         self.assertEqual(repr(d3), "defaultdict(%s, {13: 43})" % repr(foo))
       
    1:     def test_print(self):
    1:         d1 = defaultdict()
    1:         def foo(): return 42
    1:         d2 = defaultdict(foo, {1: 2})
               # NOTE: We can't use tempfile.[Named]TemporaryFile since this
               # code must exercise the tp_print C code, which only gets
               # invoked for *real* files.
    1:         tfn = tempfile.mktemp()
    1:         try:
    1:             f = open(tfn, "w+")
    1:             try:
    1:                 print >>f, d1
    1:                 print >>f, d2
    1:                 f.seek(0)
    1:                 self.assertEqual(f.readline(), repr(d1) + "\n")
    1:                 self.assertEqual(f.readline(), repr(d2) + "\n")
                   finally:
    1:                 f.close()
               finally:
    1:             os.remove(tfn)
       
    1:     def test_copy(self):
    1:         d1 = defaultdict()
    1:         d2 = d1.copy()
    1:         self.assertEqual(type(d2), defaultdict)
    1:         self.assertEqual(d2.default_factory, None)
    1:         self.assertEqual(d2, {})
    1:         d1.default_factory = list
    1:         d3 = d1.copy()
    1:         self.assertEqual(type(d3), defaultdict)
    1:         self.assertEqual(d3.default_factory, list)
    1:         self.assertEqual(d3, {})
    1:         d1[42]
    1:         d4 = d1.copy()
    1:         self.assertEqual(type(d4), defaultdict)
    1:         self.assertEqual(d4.default_factory, list)
    1:         self.assertEqual(d4, {42: []})
    1:         d4[12]
    1:         self.assertEqual(d4, {42: [], 12: []})
       
               # Issue 6637: Copy fails for empty default dict
    1:         d = defaultdict()
    1:         d['a'] = 42
    1:         e = d.copy()
    1:         self.assertEqual(e['a'], 42)
       
    1:     def test_shallow_copy(self):
    1:         d1 = defaultdict(foobar, {1: 1})
    1:         d2 = copy.copy(d1)
    1:         self.assertEqual(d2.default_factory, foobar)
    1:         self.assertEqual(d2, d1)
    1:         d1.default_factory = list
    1:         d2 = copy.copy(d1)
    1:         self.assertEqual(d2.default_factory, list)
    1:         self.assertEqual(d2, d1)
       
    1:     def test_deep_copy(self):
    1:         d1 = defaultdict(foobar, {1: [1]})
    1:         d2 = copy.deepcopy(d1)
    1:         self.assertEqual(d2.default_factory, foobar)
    1:         self.assertEqual(d2, d1)
    1:         self.assertTrue(d1[1] is not d2[1])
    1:         d1.default_factory = list
    1:         d2 = copy.deepcopy(d1)
    1:         self.assertEqual(d2.default_factory, list)
    1:         self.assertEqual(d2, d1)
       
    1:     def test_keyerror_without_factory(self):
    1:         d1 = defaultdict()
    1:         try:
    1:             d1[(1,)]
    1:         except KeyError, err:
    1:             self.assertEqual(err.args[0], (1,))
               else:
>>>>>>             self.fail("expected KeyError")
       
    1:     def test_recursive_repr(self):
               # Issue2045: stack overflow when default_factory is a bound method
    2:         class sub(defaultdict):
    1:             def __init__(self):
    1:                 self.default_factory = self._factory
    1:             def _factory(self):
>>>>>>                 return []
    1:         d = sub()
    1:         self.assertTrue(repr(d).startswith(
    1:             "defaultdict(<bound method sub._factory of defaultdict(..."))
       
               # NOTE: printing a subclass of a builtin type does not call its
               # tp_print slot. So this part is essentially the same test as above.
    1:         tfn = tempfile.mktemp()
    1:         try:
    1:             f = open(tfn, "w+")
    1:             try:
    1:                 print >>f, d
                   finally:
    1:                 f.close()
               finally:
    1:             os.remove(tfn)
       
    1:     def test_callable_arg(self):
    1:         self.assertRaises(TypeError, defaultdict, {})
       
    1: def test_main():
    1:     test_support.run_unittest(TestDefaultDict)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
