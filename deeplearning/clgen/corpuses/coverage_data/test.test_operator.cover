    1: import operator
    1: import unittest
       
    1: from test import test_support
       
    2: class Seq1:
    1:     def __init__(self, lst):
    3:         self.lst = lst
    1:     def __len__(self):
>>>>>>         return len(self.lst)
    1:     def __getitem__(self, i):
>>>>>>         return self.lst[i]
    1:     def __add__(self, other):
    1:         return self.lst + other.lst
    1:     def __mul__(self, other):
    3:         return self.lst * other
    1:     def __rmul__(self, other):
>>>>>>         return other * self.lst
       
    2: class Seq2(object):
    1:     def __init__(self, lst):
    3:         self.lst = lst
    1:     def __len__(self):
>>>>>>         return len(self.lst)
    1:     def __getitem__(self, i):
>>>>>>         return self.lst[i]
    1:     def __add__(self, other):
    1:         return self.lst + other.lst
    1:     def __mul__(self, other):
    3:         return self.lst * other
    1:     def __rmul__(self, other):
>>>>>>         return other * self.lst
       
       
    2: class OperatorTestCase(unittest.TestCase):
    1:     def test_lt(self):
    1:         self.assertRaises(TypeError, operator.lt)
    1:         self.assertRaises(TypeError, operator.lt, 1j, 2j)
    1:         self.assertFalse(operator.lt(1, 0))
    1:         self.assertFalse(operator.lt(1, 0.0))
    1:         self.assertFalse(operator.lt(1, 1))
    1:         self.assertFalse(operator.lt(1, 1.0))
    1:         self.assertTrue(operator.lt(1, 2))
    1:         self.assertTrue(operator.lt(1, 2.0))
       
    1:     def test_le(self):
    1:         self.assertRaises(TypeError, operator.le)
    1:         self.assertRaises(TypeError, operator.le, 1j, 2j)
    1:         self.assertFalse(operator.le(1, 0))
    1:         self.assertFalse(operator.le(1, 0.0))
    1:         self.assertTrue(operator.le(1, 1))
    1:         self.assertTrue(operator.le(1, 1.0))
    1:         self.assertTrue(operator.le(1, 2))
    1:         self.assertTrue(operator.le(1, 2.0))
       
    1:     def test_eq(self):
    2:         class C(object):
    1:             def __eq__(self, other):
    1:                 raise SyntaxError
    1:             __hash__ = None # Silence Py3k warning
    1:         self.assertRaises(TypeError, operator.eq)
    1:         self.assertRaises(SyntaxError, operator.eq, C(), C())
    1:         self.assertFalse(operator.eq(1, 0))
    1:         self.assertFalse(operator.eq(1, 0.0))
    1:         self.assertTrue(operator.eq(1, 1))
    1:         self.assertTrue(operator.eq(1, 1.0))
    1:         self.assertFalse(operator.eq(1, 2))
    1:         self.assertFalse(operator.eq(1, 2.0))
       
    1:     def test_ne(self):
    2:         class C(object):
    1:             def __ne__(self, other):
    1:                 raise SyntaxError
    1:         self.assertRaises(TypeError, operator.ne)
    1:         self.assertRaises(SyntaxError, operator.ne, C(), C())
    1:         self.assertTrue(operator.ne(1, 0))
    1:         self.assertTrue(operator.ne(1, 0.0))
    1:         self.assertFalse(operator.ne(1, 1))
    1:         self.assertFalse(operator.ne(1, 1.0))
    1:         self.assertTrue(operator.ne(1, 2))
    1:         self.assertTrue(operator.ne(1, 2.0))
       
    1:     def test_ge(self):
    1:         self.assertRaises(TypeError, operator.ge)
    1:         self.assertRaises(TypeError, operator.ge, 1j, 2j)
    1:         self.assertTrue(operator.ge(1, 0))
    1:         self.assertTrue(operator.ge(1, 0.0))
    1:         self.assertTrue(operator.ge(1, 1))
    1:         self.assertTrue(operator.ge(1, 1.0))
    1:         self.assertFalse(operator.ge(1, 2))
    1:         self.assertFalse(operator.ge(1, 2.0))
       
    1:     def test_gt(self):
    1:         self.assertRaises(TypeError, operator.gt)
    1:         self.assertRaises(TypeError, operator.gt, 1j, 2j)
    1:         self.assertTrue(operator.gt(1, 0))
    1:         self.assertTrue(operator.gt(1, 0.0))
    1:         self.assertFalse(operator.gt(1, 1))
    1:         self.assertFalse(operator.gt(1, 1.0))
    1:         self.assertFalse(operator.gt(1, 2))
    1:         self.assertFalse(operator.gt(1, 2.0))
       
    1:     def test_abs(self):
    1:         self.assertRaises(TypeError, operator.abs)
    1:         self.assertRaises(TypeError, operator.abs, None)
    1:         self.assertTrue(operator.abs(-1) == 1)
    1:         self.assertTrue(operator.abs(1) == 1)
       
    1:     def test_add(self):
    1:         self.assertRaises(TypeError, operator.add)
    1:         self.assertRaises(TypeError, operator.add, None, None)
    1:         self.assertTrue(operator.add(3, 4) == 7)
       
    1:     def test_bitwise_and(self):
    1:         self.assertRaises(TypeError, operator.and_)
    1:         self.assertRaises(TypeError, operator.and_, None, None)
    1:         self.assertTrue(operator.and_(0xf, 0xa) == 0xa)
       
    1:     def test_concat(self):
    1:         self.assertRaises(TypeError, operator.concat)
    1:         self.assertRaises(TypeError, operator.concat, None, None)
    1:         self.assertTrue(operator.concat('py', 'thon') == 'python')
    1:         self.assertTrue(operator.concat([1, 2], [3, 4]) == [1, 2, 3, 4])
    1:         self.assertTrue(operator.concat(Seq1([5, 6]), Seq1([7])) == [5, 6, 7])
    1:         self.assertTrue(operator.concat(Seq2([5, 6]), Seq2([7])) == [5, 6, 7])
    1:         self.assertRaises(TypeError, operator.concat, 13, 29)
       
    1:     def test_countOf(self):
    1:         self.assertRaises(TypeError, operator.countOf)
    1:         self.assertRaises(TypeError, operator.countOf, None, None)
    1:         self.assertTrue(operator.countOf([1, 2, 1, 3, 1, 4], 3) == 1)
    1:         self.assertTrue(operator.countOf([1, 2, 1, 3, 1, 4], 5) == 0)
       
    1:     def test_delitem(self):
    1:         a = [4, 3, 2, 1]
    1:         self.assertRaises(TypeError, operator.delitem, a)
    1:         self.assertRaises(TypeError, operator.delitem, a, None)
    1:         self.assertTrue(operator.delitem(a, 1) is None)
    1:         self.assertTrue(a == [4, 2, 1])
       
    1:     def test_delslice(self):
    1:         a = range(10)
    1:         self.assertRaises(TypeError, operator.delslice, a)
    1:         self.assertRaises(TypeError, operator.delslice, a, None, None)
    1:         self.assertTrue(operator.delslice(a, 2, 8) is None)
    1:         self.assertTrue(a == [0, 1, 8, 9])
    1:         operator.delslice(a, 0, test_support.MAX_Py_ssize_t)
    1:         self.assertTrue(a == [])
       
    1:     def test_div(self):
    1:         self.assertRaises(TypeError, operator.div, 5)
    1:         self.assertRaises(TypeError, operator.div, None, None)
    1:         self.assertTrue(operator.floordiv(5, 2) == 2)
       
    1:     def test_floordiv(self):
    1:         self.assertRaises(TypeError, operator.floordiv, 5)
    1:         self.assertRaises(TypeError, operator.floordiv, None, None)
    1:         self.assertTrue(operator.floordiv(5, 2) == 2)
       
    1:     def test_truediv(self):
    1:         self.assertRaises(TypeError, operator.truediv, 5)
    1:         self.assertRaises(TypeError, operator.truediv, None, None)
    1:         self.assertTrue(operator.truediv(5, 2) == 2.5)
       
    1:     def test_getitem(self):
    1:         a = range(10)
    1:         self.assertRaises(TypeError, operator.getitem)
    1:         self.assertRaises(TypeError, operator.getitem, a, None)
    1:         self.assertTrue(operator.getitem(a, 2) == 2)
       
    1:     def test_getslice(self):
    1:         a = range(10)
    1:         self.assertRaises(TypeError, operator.getslice)
    1:         self.assertRaises(TypeError, operator.getslice, a, None, None)
    1:         self.assertTrue(operator.getslice(a, 4, 6) == [4, 5])
    1:         b = operator.getslice(a, 0, test_support.MAX_Py_ssize_t)
    1:         self.assertTrue(b == a)
       
    1:     def test_indexOf(self):
    1:         self.assertRaises(TypeError, operator.indexOf)
    1:         self.assertRaises(TypeError, operator.indexOf, None, None)
    1:         self.assertTrue(operator.indexOf([4, 3, 2, 1], 3) == 1)
    1:         self.assertRaises(ValueError, operator.indexOf, [4, 3, 2, 1], 0)
       
    1:     def test_invert(self):
    1:         self.assertRaises(TypeError, operator.invert)
    1:         self.assertRaises(TypeError, operator.invert, None)
    1:         self.assertTrue(operator.inv(4) == -5)
       
    1:     def test_isCallable(self):
    1:         self.assertRaises(TypeError, operator.isCallable)
    2:         class C:
    1:             pass
    1:         def check(self, o, v):
    4:             with test_support.check_py3k_warnings():
    4:                 self.assertEqual(operator.isCallable(o), v)
    4:                 self.assertEqual(callable(o), v)
    1:         check(self, 4, 0)
    1:         check(self, operator.isCallable, 1)
    1:         check(self, C, 1)
    1:         check(self, C(), 0)
       
    1:     def test_isMappingType(self):
    1:         self.assertRaises(TypeError, operator.isMappingType)
    1:         self.assertFalse(operator.isMappingType(1))
    1:         self.assertFalse(operator.isMappingType(operator.isMappingType))
    1:         self.assertTrue(operator.isMappingType(operator.__dict__))
    1:         self.assertTrue(operator.isMappingType({}))
       
    1:     def test_isNumberType(self):
    1:         self.assertRaises(TypeError, operator.isNumberType)
    1:         self.assertTrue(operator.isNumberType(8))
    1:         self.assertTrue(operator.isNumberType(8j))
    1:         self.assertTrue(operator.isNumberType(8L))
    1:         self.assertTrue(operator.isNumberType(8.3))
    1:         self.assertFalse(operator.isNumberType(dir()))
       
    1:     def test_isSequenceType(self):
    1:         self.assertRaises(TypeError, operator.isSequenceType)
    1:         self.assertTrue(operator.isSequenceType(dir()))
    1:         self.assertTrue(operator.isSequenceType(()))
    1:         self.assertTrue(operator.isSequenceType(xrange(10)))
    1:         self.assertTrue(operator.isSequenceType('yeahbuddy'))
    1:         self.assertFalse(operator.isSequenceType(3))
    2:         class Dict(dict): pass
    1:         self.assertFalse(operator.isSequenceType(Dict()))
       
    1:     def test_lshift(self):
    1:         self.assertRaises(TypeError, operator.lshift)
    1:         self.assertRaises(TypeError, operator.lshift, None, 42)
    1:         self.assertTrue(operator.lshift(5, 1) == 10)
    1:         self.assertTrue(operator.lshift(5, 0) == 5)
    1:         self.assertRaises(ValueError, operator.lshift, 2, -1)
       
    1:     def test_mod(self):
    1:         self.assertRaises(TypeError, operator.mod)
    1:         self.assertRaises(TypeError, operator.mod, None, 42)
    1:         self.assertTrue(operator.mod(5, 2) == 1)
       
    1:     def test_mul(self):
    1:         self.assertRaises(TypeError, operator.mul)
    1:         self.assertRaises(TypeError, operator.mul, None, None)
    1:         self.assertTrue(operator.mul(5, 2) == 10)
       
    1:     def test_neg(self):
    1:         self.assertRaises(TypeError, operator.neg)
    1:         self.assertRaises(TypeError, operator.neg, None)
    1:         self.assertTrue(operator.neg(5) == -5)
    1:         self.assertTrue(operator.neg(-5) == 5)
    1:         self.assertTrue(operator.neg(0) == 0)
    1:         self.assertTrue(operator.neg(-0) == 0)
       
    1:     def test_bitwise_or(self):
    1:         self.assertRaises(TypeError, operator.or_)
    1:         self.assertRaises(TypeError, operator.or_, None, None)
    1:         self.assertTrue(operator.or_(0xa, 0x5) == 0xf)
       
    1:     def test_pos(self):
    1:         self.assertRaises(TypeError, operator.pos)
    1:         self.assertRaises(TypeError, operator.pos, None)
    1:         self.assertTrue(operator.pos(5) == 5)
    1:         self.assertTrue(operator.pos(-5) == -5)
    1:         self.assertTrue(operator.pos(0) == 0)
    1:         self.assertTrue(operator.pos(-0) == 0)
       
    1:     def test_pow(self):
    1:         self.assertRaises(TypeError, operator.pow)
    1:         self.assertRaises(TypeError, operator.pow, None, None)
    1:         self.assertTrue(operator.pow(3,5) == 3**5)
    1:         self.assertTrue(operator.__pow__(3,5) == 3**5)
    1:         self.assertRaises(TypeError, operator.pow, 1)
    1:         self.assertRaises(TypeError, operator.pow, 1, 2, 3)
       
    1:     def test_repeat(self):
    1:         a = range(3)
    1:         self.assertRaises(TypeError, operator.repeat)
    1:         self.assertRaises(TypeError, operator.repeat, a, None)
    1:         self.assertTrue(operator.repeat(a, 2) == a+a)
    1:         self.assertTrue(operator.repeat(a, 1) == a)
    1:         self.assertTrue(operator.repeat(a, 0) == [])
    1:         a = (1, 2, 3)
    1:         self.assertTrue(operator.repeat(a, 2) == a+a)
    1:         self.assertTrue(operator.repeat(a, 1) == a)
    1:         self.assertTrue(operator.repeat(a, 0) == ())
    1:         a = '123'
    1:         self.assertTrue(operator.repeat(a, 2) == a+a)
    1:         self.assertTrue(operator.repeat(a, 1) == a)
    1:         self.assertTrue(operator.repeat(a, 0) == '')
    1:         a = Seq1([4, 5, 6])
    1:         self.assertTrue(operator.repeat(a, 2) == [4, 5, 6, 4, 5, 6])
    1:         self.assertTrue(operator.repeat(a, 1) == [4, 5, 6])
    1:         self.assertTrue(operator.repeat(a, 0) == [])
    1:         a = Seq2([4, 5, 6])
    1:         self.assertTrue(operator.repeat(a, 2) == [4, 5, 6, 4, 5, 6])
    1:         self.assertTrue(operator.repeat(a, 1) == [4, 5, 6])
    1:         self.assertTrue(operator.repeat(a, 0) == [])
    1:         self.assertRaises(TypeError, operator.repeat, 6, 7)
       
    1:     def test_rshift(self):
    1:         self.assertRaises(TypeError, operator.rshift)
    1:         self.assertRaises(TypeError, operator.rshift, None, 42)
    1:         self.assertTrue(operator.rshift(5, 1) == 2)
    1:         self.assertTrue(operator.rshift(5, 0) == 5)
    1:         self.assertRaises(ValueError, operator.rshift, 2, -1)
       
    1:     def test_contains(self):
    1:         self.assertRaises(TypeError, operator.contains)
    1:         self.assertRaises(TypeError, operator.contains, None, None)
    1:         self.assertTrue(operator.contains(range(4), 2))
    1:         self.assertFalse(operator.contains(range(4), 5))
    1:         with test_support.check_py3k_warnings():
    1:             self.assertTrue(operator.sequenceIncludes(range(4), 2))
    1:             self.assertFalse(operator.sequenceIncludes(range(4), 5))
       
    1:     def test_setitem(self):
    1:         a = range(3)
    1:         self.assertRaises(TypeError, operator.setitem, a)
    1:         self.assertRaises(TypeError, operator.setitem, a, None, None)
    1:         self.assertTrue(operator.setitem(a, 0, 2) is None)
    1:         self.assertTrue(a == [2, 1, 2])
    1:         self.assertRaises(IndexError, operator.setitem, a, 4, 2)
       
    1:     def test_setslice(self):
    1:         a = range(4)
    1:         self.assertRaises(TypeError, operator.setslice, a)
    1:         self.assertRaises(TypeError, operator.setslice, a, None, None, None)
    1:         self.assertTrue(operator.setslice(a, 1, 3, [2, 1]) is None)
    1:         self.assertTrue(a == [0, 2, 1, 3])
    1:         operator.setslice(a, 0, test_support.MAX_Py_ssize_t, [])
    1:         self.assertTrue(a == [])
       
    1:     def test_sub(self):
    1:         self.assertRaises(TypeError, operator.sub)
    1:         self.assertRaises(TypeError, operator.sub, None, None)
    1:         self.assertTrue(operator.sub(5, 2) == 3)
       
    1:     def test_truth(self):
    2:         class C(object):
    1:             def __nonzero__(self):
    1:                 raise SyntaxError
    1:         self.assertRaises(TypeError, operator.truth)
    1:         self.assertRaises(SyntaxError, operator.truth, C())
    1:         self.assertTrue(operator.truth(5))
    1:         self.assertTrue(operator.truth([0]))
    1:         self.assertFalse(operator.truth(0))
    1:         self.assertFalse(operator.truth([]))
       
    1:     def test_bitwise_xor(self):
    1:         self.assertRaises(TypeError, operator.xor)
    1:         self.assertRaises(TypeError, operator.xor, None, None)
    1:         self.assertTrue(operator.xor(0xb, 0xc) == 0x7)
       
    1:     def test_is(self):
    1:         a = b = 'xyzpdq'
    1:         c = a[:3] + b[3:]
    1:         self.assertRaises(TypeError, operator.is_)
    1:         self.assertTrue(operator.is_(a, b))
    1:         self.assertFalse(operator.is_(a,c))
       
    1:     def test_is_not(self):
    1:         a = b = 'xyzpdq'
    1:         c = a[:3] + b[3:]
    1:         self.assertRaises(TypeError, operator.is_not)
    1:         self.assertFalse(operator.is_not(a, b))
    1:         self.assertTrue(operator.is_not(a,c))
       
    1:     def test_attrgetter(self):
    2:         class A:
    1:             pass
    1:         a = A()
    1:         a.name = 'arthur'
    1:         f = operator.attrgetter('name')
    1:         self.assertEqual(f(a), 'arthur')
    1:         self.assertRaises(TypeError, f)
    1:         self.assertRaises(TypeError, f, a, 'dent')
    1:         self.assertRaises(TypeError, f, a, surname='dent')
    1:         f = operator.attrgetter('rank')
    1:         self.assertRaises(AttributeError, f, a)
    1:         f = operator.attrgetter(2)
    1:         self.assertRaises(TypeError, f, a)
    1:         self.assertRaises(TypeError, operator.attrgetter)
       
               # multiple gets
    1:         record = A()
    1:         record.x = 'X'
    1:         record.y = 'Y'
    1:         record.z = 'Z'
    1:         self.assertEqual(operator.attrgetter('x','z','y')(record), ('X', 'Z', 'Y'))
    1:         self.assertRaises(TypeError, operator.attrgetter('x', (), 'y'), record)
       
    2:         class C(object):
    1:             def __getattr__(self, name):
    1:                 raise SyntaxError
    1:         self.assertRaises(SyntaxError, operator.attrgetter('foo'), C())
       
               # recursive gets
    1:         a = A()
    1:         a.name = 'arthur'
    1:         a.child = A()
    1:         a.child.name = 'thomas'
    1:         f = operator.attrgetter('child.name')
    1:         self.assertEqual(f(a), 'thomas')
    1:         self.assertRaises(AttributeError, f, a.child)
    1:         f = operator.attrgetter('name', 'child.name')
    1:         self.assertEqual(f(a), ('arthur', 'thomas'))
    1:         f = operator.attrgetter('name', 'child.name', 'child.child.name')
    1:         self.assertRaises(AttributeError, f, a)
       
    1:         a.child.child = A()
    1:         a.child.child.name = 'johnson'
    1:         f = operator.attrgetter('child.child.name')
    1:         self.assertEqual(f(a), 'johnson')
    1:         f = operator.attrgetter('name', 'child.name', 'child.child.name')
    1:         self.assertEqual(f(a), ('arthur', 'thomas', 'johnson'))
       
    1:     def test_itemgetter(self):
    1:         a = 'ABCDE'
    1:         f = operator.itemgetter(2)
    1:         self.assertEqual(f(a), 'C')
    1:         self.assertRaises(TypeError, f)
    1:         self.assertRaises(TypeError, f, a, 3)
    1:         self.assertRaises(TypeError, f, a, size=3)
    1:         f = operator.itemgetter(10)
    1:         self.assertRaises(IndexError, f, a)
       
    2:         class C(object):
    1:             def __getitem__(self, name):
    1:                 raise SyntaxError
    1:         self.assertRaises(SyntaxError, operator.itemgetter(42), C())
       
    1:         f = operator.itemgetter('name')
    1:         self.assertRaises(TypeError, f, a)
    1:         self.assertRaises(TypeError, operator.itemgetter)
       
    1:         d = dict(key='val')
    1:         f = operator.itemgetter('key')
    1:         self.assertEqual(f(d), 'val')
    1:         f = operator.itemgetter('nonkey')
    1:         self.assertRaises(KeyError, f, d)
       
               # example used in the docs
    1:         inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)]
    1:         getcount = operator.itemgetter(1)
    1:         self.assertEqual(map(getcount, inventory), [3, 2, 5, 1])
    1:         self.assertEqual(sorted(inventory, key=getcount),
    1:             [('orange', 1), ('banana', 2), ('apple', 3), ('pear', 5)])
       
               # multiple gets
    1:         data = map(str, range(20))
    1:         self.assertEqual(operator.itemgetter(2,10,5)(data), ('2', '10', '5'))
    1:         self.assertRaises(TypeError, operator.itemgetter(2, 'x', 5), data)
       
    1:     def test_methodcaller(self):
    1:         self.assertRaises(TypeError, operator.methodcaller)
    2:         class A:
    1:             def foo(self, *args, **kwds):
    2:                 return args[0] + args[1]
    1:             def bar(self, f=42):
    2:                 return f
    1:         a = A()
    1:         f = operator.methodcaller('foo')
    1:         self.assertRaises(IndexError, f, a)
    1:         f = operator.methodcaller('foo', 1, 2)
    1:         self.assertEqual(f(a), 3)
    1:         self.assertRaises(TypeError, f)
    1:         self.assertRaises(TypeError, f, a, 3)
    1:         self.assertRaises(TypeError, f, a, spam=3)
    1:         f = operator.methodcaller('bar')
    1:         self.assertEqual(f(a), 42)
    1:         self.assertRaises(TypeError, f, a, a)
    1:         f = operator.methodcaller('bar', f=5)
    1:         self.assertEqual(f(a), 5)
       
    1:     def test_inplace(self):
    2:         class C(object):
    5:             def __iadd__     (self, other): return "iadd"
    3:             def __iand__     (self, other): return "iand"
    3:             def __idiv__     (self, other): return "idiv"
    3:             def __ifloordiv__(self, other): return "ifloordiv"
    3:             def __ilshift__  (self, other): return "ilshift"
    3:             def __imod__     (self, other): return "imod"
    5:             def __imul__     (self, other): return "imul"
    3:             def __ior__      (self, other): return "ior"
    3:             def __ipow__     (self, other): return "ipow"
    3:             def __irshift__  (self, other): return "irshift"
    3:             def __isub__     (self, other): return "isub"
    3:             def __itruediv__ (self, other): return "itruediv"
    3:             def __ixor__     (self, other): return "ixor"
    1:             def __getitem__(self, other): return 5  # so that C is a sequence
    1:         c = C()
    1:         self.assertEqual(operator.iadd     (c, 5), "iadd")
    1:         self.assertEqual(operator.iand     (c, 5), "iand")
    1:         self.assertEqual(operator.idiv     (c, 5), "idiv")
    1:         self.assertEqual(operator.ifloordiv(c, 5), "ifloordiv")
    1:         self.assertEqual(operator.ilshift  (c, 5), "ilshift")
    1:         self.assertEqual(operator.imod     (c, 5), "imod")
    1:         self.assertEqual(operator.imul     (c, 5), "imul")
    1:         self.assertEqual(operator.ior      (c, 5), "ior")
    1:         self.assertEqual(operator.ipow     (c, 5), "ipow")
    1:         self.assertEqual(operator.irshift  (c, 5), "irshift")
    1:         self.assertEqual(operator.isub     (c, 5), "isub")
    1:         self.assertEqual(operator.itruediv (c, 5), "itruediv")
    1:         self.assertEqual(operator.ixor     (c, 5), "ixor")
    1:         self.assertEqual(operator.iconcat  (c, c), "iadd")
    1:         self.assertEqual(operator.irepeat  (c, 5), "imul")
    1:         self.assertEqual(operator.__iadd__     (c, 5), "iadd")
    1:         self.assertEqual(operator.__iand__     (c, 5), "iand")
    1:         self.assertEqual(operator.__idiv__     (c, 5), "idiv")
    1:         self.assertEqual(operator.__ifloordiv__(c, 5), "ifloordiv")
    1:         self.assertEqual(operator.__ilshift__  (c, 5), "ilshift")
    1:         self.assertEqual(operator.__imod__     (c, 5), "imod")
    1:         self.assertEqual(operator.__imul__     (c, 5), "imul")
    1:         self.assertEqual(operator.__ior__      (c, 5), "ior")
    1:         self.assertEqual(operator.__ipow__     (c, 5), "ipow")
    1:         self.assertEqual(operator.__irshift__  (c, 5), "irshift")
    1:         self.assertEqual(operator.__isub__     (c, 5), "isub")
    1:         self.assertEqual(operator.__itruediv__ (c, 5), "itruediv")
    1:         self.assertEqual(operator.__ixor__     (c, 5), "ixor")
    1:         self.assertEqual(operator.__iconcat__  (c, c), "iadd")
    1:         self.assertEqual(operator.__irepeat__  (c, 5), "imul")
       
    1: def test_main(verbose=None):
    1:     import sys
           test_classes = (
    1:         OperatorTestCase,
           )
       
    1:     test_support.run_unittest(*test_classes)
       
           # verify reference counting
    1:     if verbose and hasattr(sys, "gettotalrefcount"):
>>>>>>         import gc
>>>>>>         counts = [None] * 5
>>>>>>         for i in xrange(len(counts)):
>>>>>>             test_support.run_unittest(*test_classes)
>>>>>>             gc.collect()
>>>>>>             counts[i] = sys.gettotalrefcount()
>>>>>>         print counts
       
    1: if __name__ == "__main__":
>>>>>>     test_main(verbose=True)
