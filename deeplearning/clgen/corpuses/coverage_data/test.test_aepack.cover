       # Copyright (C) 2003 Python Software Foundation
       
    1: import unittest
    1: import os
    1: from test import test_support
       
    1: aetypes = test_support.import_module('aetypes')
    1: aepack = test_support.import_module('aepack')
       
    2: class TestAepack(unittest.TestCase):
           OBJECTS = [
    1:         aetypes.Enum('enum'),
    1:         aetypes.Type('type'),
    1:         aetypes.Keyword('kwrd'),
    1:         aetypes.Range(1, 10),
    1:         aetypes.Comparison(1, '<   ', 10),
    1:         aetypes.Logical('not ', 1),
    1:         aetypes.IntlText(0, 0, 'international text'),
    1:         aetypes.IntlWritingCode(0,0),
    1:         aetypes.QDPoint(50,100),
    1:         aetypes.QDRectangle(50,100,150,200),
    1:         aetypes.RGBColor(0x7000, 0x6000, 0x5000),
    1:         aetypes.Unknown('xxxx', 'unknown type data'),
    1:         aetypes.Character(1),
    1:         aetypes.Character(2, aetypes.Line(2)),
           ]
       
    1:     def test_roundtrip_string(self):
    1:         o = 'a string'
    1:         packed = aepack.pack(o)
    1:         unpacked = aepack.unpack(packed)
    1:         self.assertEqual(o, unpacked)
       
    1:     def test_roundtrip_int(self):
    1:         o = 12
    1:         packed = aepack.pack(o)
    1:         unpacked = aepack.unpack(packed)
    1:         self.assertEqual(o, unpacked)
       
    1:     def test_roundtrip_float(self):
    1:         o = 12.1
    1:         packed = aepack.pack(o)
    1:         unpacked = aepack.unpack(packed)
    1:         self.assertEqual(o, unpacked)
       
    1:     def test_roundtrip_None(self):
    1:         o = None
    1:         packed = aepack.pack(o)
    1:         unpacked = aepack.unpack(packed)
    1:         self.assertEqual(o, unpacked)
       
    1:     def test_roundtrip_aeobjects(self):
   15:         for o in self.OBJECTS:
   14:             packed = aepack.pack(o)
   14:             unpacked = aepack.unpack(packed)
   14:             self.assertEqual(repr(o), repr(unpacked))
       
    1:     def test_roundtrip_FSSpec(self):
    1:         try:
    1:             import Carbon.File
>>>>>>         except:
>>>>>>             self.skipTest('Carbon.File not available')
       
    1:         if not hasattr(Carbon.File, "FSSpec"):
    1:             self.skipTest('Carbon.File.FSSpec not available')
>>>>>>         o = Carbon.File.FSSpec(os.curdir)
>>>>>>         packed = aepack.pack(o)
>>>>>>         unpacked = aepack.unpack(packed)
>>>>>>         self.assertEqual(o.as_pathname(), unpacked.as_pathname())
       
    1:     def test_roundtrip_Alias(self):
    1:         try:
    1:             import Carbon.File
>>>>>>         except:
>>>>>>             self.skipTest('Carbon.File not available')
    1:         if not hasattr(Carbon.File, "FSSpec"):
    1:             self.skipTest('Carbon.File.FSSpec not available')
>>>>>>         o = Carbon.File.FSSpec(os.curdir).NewAliasMinimal()
>>>>>>         packed = aepack.pack(o)
>>>>>>         unpacked = aepack.unpack(packed)
>>>>>>         self.assertEqual(o.FSResolveAlias(None)[0].as_pathname(),
>>>>>>             unpacked.FSResolveAlias(None)[0].as_pathname())
       
       
    1: def test_main():
    1:     test_support.run_unittest(TestAepack)
       
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
