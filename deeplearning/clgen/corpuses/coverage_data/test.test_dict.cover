    1: import unittest
    1: from test import test_support
       
    1: import UserDict, random, string
    1: import gc, weakref
       
       
    2: class DictTest(unittest.TestCase):
    1:     def test_constructor(self):
               # calling built-in types without argument must return empty
    1:         self.assertEqual(dict(), {})
    1:         self.assertIsNot(dict(), {})
       
    1:     def test_literal_constructor(self):
               # check literal constructor for different sized dicts
               # (to exercise the BUILD_MAP oparg).
    6:         for n in (0, 1, 6, 256, 400):
    5:             items = [(''.join(random.sample(string.letters, 8)), i)
  668:                      for i in range(n)]
    5:             random.shuffle(items)
  673:             formatted_items = ('{!r}: {:d}'.format(k, v) for k, v in items)
    5:             dictliteral = '{' + ', '.join(formatted_items) + '}'
    5:             self.assertEqual(eval(dictliteral), dict(items))
       
    1:     def test_bool(self):
    1:         self.assertIs(not {}, True)
    1:         self.assertTrue({1: 2})
    1:         self.assertIs(bool({}), False)
    1:         self.assertIs(bool({1: 2}), True)
       
    1:     def test_keys(self):
    1:         d = {}
    1:         self.assertEqual(d.keys(), [])
    1:         d = {'a': 1, 'b': 2}
    1:         k = d.keys()
    1:         self.assertEqual(set(k), {'a', 'b'})
    1:         self.assertIn('a', k)
    1:         self.assertIn('b', k)
    1:         self.assertTrue(d.has_key('a'))
    1:         self.assertTrue(d.has_key('b'))
    1:         self.assertRaises(TypeError, d.keys, None)
       
    1:     def test_values(self):
    1:         d = {}
    1:         self.assertEqual(d.values(), [])
    1:         d = {1:2}
    1:         self.assertEqual(d.values(), [2])
       
    1:         self.assertRaises(TypeError, d.values, None)
       
    1:     def test_items(self):
    1:         d = {}
    1:         self.assertEqual(d.items(), [])
       
    1:         d = {1:2}
    1:         self.assertEqual(d.items(), [(1, 2)])
       
    1:         self.assertRaises(TypeError, d.items, None)
       
    1:     def test_has_key(self):
    1:         d = {}
    1:         self.assertFalse(d.has_key('a'))
    1:         d = {'a': 1, 'b': 2}
    1:         k = d.keys()
    1:         k.sort()
    1:         self.assertEqual(k, ['a', 'b'])
       
    1:         self.assertRaises(TypeError, d.has_key)
       
    1:     def test_contains(self):
    1:         d = {}
    1:         self.assertNotIn('a', d)
    1:         self.assertFalse('a' in d)
    1:         self.assertTrue('a' not in d)
    1:         d = {'a': 1, 'b': 2}
    1:         self.assertIn('a', d)
    1:         self.assertIn('b', d)
    1:         self.assertNotIn('c', d)
       
    1:         self.assertRaises(TypeError, d.__contains__)
       
    1:     def test_len(self):
    1:         d = {}
    1:         self.assertEqual(len(d), 0)
    1:         d = {'a': 1, 'b': 2}
    1:         self.assertEqual(len(d), 2)
       
    1:     def test_getitem(self):
    1:         d = {'a': 1, 'b': 2}
    1:         self.assertEqual(d['a'], 1)
    1:         self.assertEqual(d['b'], 2)
    1:         d['c'] = 3
    1:         d['a'] = 4
    1:         self.assertEqual(d['c'], 3)
    1:         self.assertEqual(d['a'], 4)
    1:         del d['b']
    1:         self.assertEqual(d, {'a': 4, 'c': 3})
       
    1:         self.assertRaises(TypeError, d.__getitem__)
       
    2:         class BadEq(object):
    1:             def __eq__(self, other):
>>>>>>                 raise Exc()
    1:             def __hash__(self):
    1:                 return 24
       
    1:         d = {}
    1:         d[BadEq()] = 42
    1:         self.assertRaises(KeyError, d.__getitem__, 23)
       
    2:         class Exc(Exception): pass
       
    2:         class BadHash(object):
    1:             fail = False
    1:             def __hash__(self):
    2:                 if self.fail:
    1:                     raise Exc()
                       else:
    1:                     return 42
       
    1:         x = BadHash()
    1:         d[x] = 42
    1:         x.fail = True
    1:         self.assertRaises(Exc, d.__getitem__, x)
       
    1:     def test_clear(self):
    1:         d = {1:1, 2:2, 3:3}
    1:         d.clear()
    1:         self.assertEqual(d, {})
       
    1:         self.assertRaises(TypeError, d.clear, None)
       
    1:     def test_update(self):
    1:         d = {}
    1:         d.update({1:100})
    1:         d.update({2:20})
    1:         d.update({1:1, 2:2, 3:3})
    1:         self.assertEqual(d, {1:1, 2:2, 3:3})
       
    1:         d.update()
    1:         self.assertEqual(d, {1:1, 2:2, 3:3})
       
    1:         self.assertRaises((TypeError, AttributeError), d.update, None)
       
    2:         class SimpleUserDict:
    1:             def __init__(self):
    1:                 self.d = {1:1, 2:2, 3:3}
    1:             def keys(self):
    1:                 return self.d.keys()
    1:             def __getitem__(self, i):
    3:                 return self.d[i]
    1:         d.clear()
    1:         d.update(SimpleUserDict())
    1:         self.assertEqual(d, {1:1, 2:2, 3:3})
       
    2:         class Exc(Exception): pass
       
    1:         d.clear()
    2:         class FailingUserDict:
    1:             def keys(self):
    1:                 raise Exc
    1:         self.assertRaises(Exc, d.update, FailingUserDict())
       
    2:         class FailingUserDict:
    1:             def keys(self):
    2:                 class BogonIter:
    1:                     def __init__(self):
    1:                         self.i = 1
    1:                     def __iter__(self):
    1:                         return self
    1:                     def next(self):
    2:                         if self.i:
    1:                             self.i = 0
    1:                             return 'a'
    1:                         raise Exc
    1:                 return BogonIter()
    1:             def __getitem__(self, key):
    1:                 return key
    1:         self.assertRaises(Exc, d.update, FailingUserDict())
       
    2:         class FailingUserDict:
    1:             def keys(self):
    2:                 class BogonIter:
    1:                     def __init__(self):
    1:                         self.i = ord('a')
    1:                     def __iter__(self):
    1:                         return self
    1:                     def next(self):
    1:                         if self.i <= ord('z'):
    1:                             rtn = chr(self.i)
    1:                             self.i += 1
    1:                             return rtn
>>>>>>                         raise StopIteration
    1:                 return BogonIter()
    1:             def __getitem__(self, key):
    1:                 raise Exc
    1:         self.assertRaises(Exc, d.update, FailingUserDict())
       
    2:         class badseq(object):
    1:             def __iter__(self):
    1:                 return self
    1:             def next(self):
    1:                 raise Exc()
       
    1:         self.assertRaises(Exc, {}.update, badseq())
       
    1:         self.assertRaises(ValueError, {}.update, [(1, 2, 3)])
       
    1:     def test_fromkeys(self):
    1:         self.assertEqual(dict.fromkeys('abc'), {'a':None, 'b':None, 'c':None})
    1:         d = {}
    1:         self.assertIsNot(d.fromkeys('abc'), d)
    1:         self.assertEqual(d.fromkeys('abc'), {'a':None, 'b':None, 'c':None})
    1:         self.assertEqual(d.fromkeys((4,5),0), {4:0, 5:0})
    1:         self.assertEqual(d.fromkeys([]), {})
    1:         def g():
    1:             yield 1
    1:         self.assertEqual(d.fromkeys(g()), {1:None})
    1:         self.assertRaises(TypeError, {}.fromkeys, 3)
    2:         class dictlike(dict): pass
    1:         self.assertEqual(dictlike.fromkeys('a'), {'a':None})
    1:         self.assertEqual(dictlike().fromkeys('a'), {'a':None})
    1:         self.assertIsInstance(dictlike.fromkeys('a'), dictlike)
    1:         self.assertIsInstance(dictlike().fromkeys('a'), dictlike)
    2:         class mydict(dict):
    1:             def __new__(cls):
    1:                 return UserDict.UserDict()
    1:         ud = mydict.fromkeys('ab')
    1:         self.assertEqual(ud, {'a':None, 'b':None})
    1:         self.assertIsInstance(ud, UserDict.UserDict)
    1:         self.assertRaises(TypeError, dict.fromkeys)
       
    2:         class Exc(Exception): pass
       
    2:         class baddict1(dict):
    1:             def __init__(self):
    1:                 raise Exc()
       
    1:         self.assertRaises(Exc, baddict1.fromkeys, [1])
       
    2:         class BadSeq(object):
    1:             def __iter__(self):
    1:                 return self
    1:             def next(self):
    1:                 raise Exc()
       
    1:         self.assertRaises(Exc, dict.fromkeys, BadSeq())
       
    2:         class baddict2(dict):
    1:             def __setitem__(self, key, value):
    1:                 raise Exc()
       
    1:         self.assertRaises(Exc, baddict2.fromkeys, [1])
       
               # test fast path for dictionary inputs
    1:         d = dict(zip(range(6), range(6)))
    1:         self.assertEqual(dict.fromkeys(d, 0), dict(zip(range(6), [0]*6)))
       
    2:         class baddict3(dict):
    1:             def __new__(cls):
    1:                 return d
   12:         d = {i : i for i in range(10)}
    1:         res = d.copy()
    1:         res.update(a=None, b=None, c=None)
    1:         self.assertEqual(baddict3.fromkeys({"a", "b", "c"}), res)
       
    1:     def test_copy(self):
    1:         d = {1:1, 2:2, 3:3}
    1:         self.assertEqual(d.copy(), {1:1, 2:2, 3:3})
    1:         self.assertEqual({}.copy(), {})
    1:         self.assertRaises(TypeError, d.copy, None)
       
    1:     def test_get(self):
    1:         d = {}
    1:         self.assertIs(d.get('c'), None)
    1:         self.assertEqual(d.get('c', 3), 3)
    1:         d = {'a': 1, 'b': 2}
    1:         self.assertIs(d.get('c'), None)
    1:         self.assertEqual(d.get('c', 3), 3)
    1:         self.assertEqual(d.get('a'), 1)
    1:         self.assertEqual(d.get('a', 3), 1)
    1:         self.assertRaises(TypeError, d.get)
    1:         self.assertRaises(TypeError, d.get, None, None, None)
       
    1:     def test_setdefault(self):
               # dict.setdefault()
    1:         d = {}
    1:         self.assertIs(d.setdefault('key0'), None)
    1:         d.setdefault('key0', [])
    1:         self.assertIs(d.setdefault('key0'), None)
    1:         d.setdefault('key', []).append(3)
    1:         self.assertEqual(d['key'][0], 3)
    1:         d.setdefault('key', []).append(4)
    1:         self.assertEqual(len(d['key']), 2)
    1:         self.assertRaises(TypeError, d.setdefault)
       
    2:         class Exc(Exception): pass
       
    2:         class BadHash(object):
    1:             fail = False
    1:             def __hash__(self):
    2:                 if self.fail:
    1:                     raise Exc()
                       else:
    1:                     return 42
       
    1:         x = BadHash()
    1:         d[x] = 42
    1:         x.fail = True
    1:         self.assertRaises(Exc, d.setdefault, x, [])
       
    1:     def test_setdefault_atomic(self):
               # Issue #13521: setdefault() calls __hash__ and __eq__ only once.
    2:         class Hashed(object):
    1:             def __init__(self):
    2:                 self.hash_count = 0
    2:                 self.eq_count = 0
    1:             def __hash__(self):
    2:                 self.hash_count += 1
    2:                 return 42
    1:             def __eq__(self, other):
    1:                 self.eq_count += 1
    1:                 return id(self) == id(other)
    1:         hashed1 = Hashed()
    1:         y = {hashed1: 5}
    1:         hashed2 = Hashed()
    1:         y.setdefault(hashed2, [])
    1:         self.assertEqual(hashed1.hash_count, 1)
    1:         self.assertEqual(hashed2.hash_count, 1)
    1:         self.assertEqual(hashed1.eq_count + hashed2.eq_count, 1)
       
    1:     def test_popitem(self):
               # dict.popitem()
    3:         for copymode in -1, +1:
                   # -1: b has same structure as a
                   # +1: b is a.copy()
   26:             for log2size in range(12):
   24:                 size = 2**log2size
   24:                 a = {}
   24:                 b = {}
 8214:                 for i in range(size):
 8190:                     a[repr(i)] = i
 8190:                     if copymode < 0:
 4095:                         b[repr(i)] = i
   24:                 if copymode > 0:
   12:                     b = a.copy()
 8214:                 for i in range(size):
 8190:                     ka, va = ta = a.popitem()
 8190:                     self.assertEqual(va, int(ka))
 8190:                     kb, vb = tb = b.popitem()
 8190:                     self.assertEqual(vb, int(kb))
 8190:                     self.assertFalse(copymode < 0 and ta != tb)
   24:                 self.assertFalse(a)
   24:                 self.assertFalse(b)
       
    1:         d = {}
    1:         self.assertRaises(KeyError, d.popitem)
       
    1:     def test_pop(self):
               # Tests for pop with specified key
    1:         d = {}
    1:         k, v = 'abc', 'def'
    1:         d[k] = v
    1:         self.assertRaises(KeyError, d.pop, 'ghi')
       
    1:         self.assertEqual(d.pop(k), v)
    1:         self.assertEqual(len(d), 0)
       
    1:         self.assertRaises(KeyError, d.pop, k)
       
               # verify longs/ints get same value when key > 32 bits
               # (for 64-bit archs).  See SF bug #689659.
    1:         x = 4503599627370496L
    1:         y = 4503599627370496
    1:         h = {x: 'anything', y: 'something else'}
    1:         self.assertEqual(h[x], h[y])
       
    1:         self.assertEqual(d.pop(k, v), v)
    1:         d[k] = v
    1:         self.assertEqual(d.pop(k, 1), v)
       
    1:         self.assertRaises(TypeError, d.pop)
       
    2:         class Exc(Exception): pass
       
    2:         class BadHash(object):
    1:             fail = False
    1:             def __hash__(self):
    2:                 if self.fail:
    1:                     raise Exc()
                       else:
    1:                     return 42
       
    1:         x = BadHash()
    1:         d[x] = 42
    1:         x.fail = True
    1:         self.assertRaises(Exc, d.pop, x)
       
    1:     def test_mutatingiteration(self):
               # changing dict size during iteration
    1:         d = {}
    1:         d[1] = 1
    1:         with self.assertRaises(RuntimeError):
    2:             for i in d:
    1:                 d[i+1] = 1
       
    1:     def test_repr(self):
    1:         d = {}
    1:         self.assertEqual(repr(d), '{}')
    1:         d[1] = 2
    1:         self.assertEqual(repr(d), '{1: 2}')
    1:         d = {}
    1:         d[1] = d
    1:         self.assertEqual(repr(d), '{1: {...}}')
       
    2:         class Exc(Exception): pass
       
    2:         class BadRepr(object):
    1:             def __repr__(self):
    1:                 raise Exc()
       
    1:         d = {1: BadRepr()}
    1:         self.assertRaises(Exc, repr, d)
       
    1:     def test_le(self):
    1:         self.assertFalse({} < {})
    1:         self.assertFalse({1: 2} < {1L: 2L})
       
    2:         class Exc(Exception): pass
       
    2:         class BadCmp(object):
    1:             def __eq__(self, other):
    1:                 raise Exc()
    1:             def __hash__(self):
    2:                 return 42
       
    1:         d1 = {BadCmp(): 1}
    1:         d2 = {1: 1}
       
    1:         with self.assertRaises(Exc):
    1:             d1 < d2
       
    1:     def test_missing(self):
               # Make sure dict doesn't have a __missing__ method
    1:         self.assertFalse(hasattr(dict, "__missing__"))
    1:         self.assertFalse(hasattr({}, "__missing__"))
               # Test several cases:
               # (D) subclass defines __missing__ method returning a value
               # (E) subclass defines __missing__ method raising RuntimeError
               # (F) subclass sets __missing__ instance variable (no effect)
               # (G) subclass doesn't define __missing__ at all
    2:         class D(dict):
    1:             def __missing__(self, key):
    1:                 return 42
    1:         d = D({1: 2, 3: 4})
    1:         self.assertEqual(d[1], 2)
    1:         self.assertEqual(d[3], 4)
    1:         self.assertNotIn(2, d)
    1:         self.assertNotIn(2, d.keys())
    1:         self.assertEqual(d[2], 42)
       
    2:         class E(dict):
    1:             def __missing__(self, key):
    1:                 raise RuntimeError(key)
    1:         e = E()
    1:         with self.assertRaises(RuntimeError) as c:
    1:             e[42]
    1:         self.assertEqual(c.exception.args, (42,))
       
    2:         class F(dict):
    1:             def __init__(self):
                       # An instance variable __missing__ should have no effect
    1:                 self.__missing__ = lambda key: None
    1:         f = F()
    1:         with self.assertRaises(KeyError) as c:
    1:             f[42]
    1:         self.assertEqual(c.exception.args, (42,))
       
    2:         class G(dict):
    1:             pass
    1:         g = G()
    1:         with self.assertRaises(KeyError) as c:
    1:             g[42]
    1:         self.assertEqual(c.exception.args, (42,))
       
    1:     def test_tuple_keyerror(self):
               # SF #1576657
    1:         d = {}
    1:         with self.assertRaises(KeyError) as c:
    1:             d[(1,)]
    1:         self.assertEqual(c.exception.args, ((1,),))
       
    1:     def test_bad_key(self):
               # Dictionary lookups should fail if __cmp__() raises an exception.
    2:         class CustomException(Exception):
    1:             pass
       
    2:         class BadDictKey:
    1:             def __hash__(self):
    9:                 return hash(self.__class__)
       
    1:             def __cmp__(self, other):
    8:                 if isinstance(other, self.__class__):
    8:                     raise CustomException
>>>>>>                 return other
       
    1:         d = {}
    1:         x1 = BadDictKey()
    1:         x2 = BadDictKey()
    1:         d[x1] = 1
    1:         for stmt in ['d[x2] = 2',
    1:                      'z = d[x2]',
    1:                      'x2 in d',
    1:                      'd.has_key(x2)',
    1:                      'd.get(x2)',
    1:                      'd.setdefault(x2, 42)',
    1:                      'd.pop(x2)',
    9:                      'd.update({x2: 2})']:
    8:             with self.assertRaises(CustomException):
    8:                 exec stmt in locals()
       
    1:     def test_resize1(self):
               # Dict resizing bug, found by Jack Jansen in 2.2 CVS development.
               # This version got an assert failure in debug build, infinite loop in
               # release build.  Unfortunately, provoking this kind of stuff requires
               # a mix of inserts and deletes hitting exactly the right hash codes in
               # exactly the right order, and I can't think of a randomized approach
               # that would be *likely* to hit a failing case in reasonable time.
       
    1:         d = {}
    6:         for i in range(5):
    5:             d[i] = i
    6:         for i in range(5):
    5:             del d[i]
    5:         for i in range(5, 9):  # i==8 was the problem
    4:             d[i] = i
       
    1:     def test_resize2(self):
               # Another dict resizing bug (SF bug #1456209).
               # This caused Segmentation faults or Illegal instructions.
       
    2:         class X(object):
    1:             def __hash__(self):
    5:                 return 5
    1:             def __eq__(self, other):
   12:                 if resizing:
>>>>>>                     d.clear()
   12:                 return False
    1:         d = {}
    1:         resizing = False
    1:         d[X()] = 1
    1:         d[X()] = 2
    1:         d[X()] = 3
    1:         d[X()] = 4
    1:         d[X()] = 5
               # now trigger a resize
    1:         resizing = True
    1:         d[9] = 6
       
    1:     def test_empty_presized_dict_in_freelist(self):
               # Bug #3537: if an empty but presized dict with a size larger
               # than 7 was in the freelist, it triggered an assertion failure
    1:         with self.assertRaises(ZeroDivisionError):
    1:             d = {'a': 1 // 0, 'b': None, 'c': None, 'd': None, 'e': None,
>>>>>>                  'f': None, 'g': None, 'h': None}
    1:         d = {}
       
    1:     def test_container_iterator(self):
               # Bug #3680: tp_traverse was not implemented for dictiter objects
    2:         class C(object):
    1:             pass
    1:         iterators = (dict.iteritems, dict.itervalues, dict.iterkeys)
    4:         for i in iterators:
    3:             obj = C()
    3:             ref = weakref.ref(obj)
    3:             container = {obj: 1}
    3:             obj.x = i(container)
    3:             del obj, container
    3:             gc.collect()
    3:             self.assertIs(ref(), None, "Cycle was not collected")
       
    1:     def _not_tracked(self, t):
               # Nested containers can take several collections to untrack
   19:         gc.collect()
   19:         gc.collect()
   19:         self.assertFalse(gc.is_tracked(t), t)
       
    1:     def _tracked(self, t):
   15:         self.assertTrue(gc.is_tracked(t), t)
   15:         gc.collect()
   15:         gc.collect()
   15:         self.assertTrue(gc.is_tracked(t), t)
       
    1:     @test_support.cpython_only
           def test_track_literals(self):
               # Test GC-optimization of dict literals
    1:         x, y, z, w = 1.5, "a", (1, None), []
       
    1:         self._not_tracked({})
    1:         self._not_tracked({x:(), y:x, z:1})
    1:         self._not_tracked({1: "a", "b": 2})
    1:         self._not_tracked({1: 2, (None, True, False, ()): int})
    1:         self._not_tracked({1: object()})
       
               # Dicts with mutable elements are always tracked, even if those
               # elements are not tracked right now.
    1:         self._tracked({1: []})
    1:         self._tracked({1: ([],)})
    1:         self._tracked({1: {}})
    1:         self._tracked({1: set()})
       
    1:     @test_support.cpython_only
           def test_track_dynamic(self):
               # Test GC-optimization of dynamically-created dicts
    2:         class MyObject(object):
    1:             pass
    1:         x, y, z, w, o = 1.5, "a", (1, object()), [], MyObject()
       
    1:         d = dict()
    1:         self._not_tracked(d)
    1:         d[1] = "a"
    1:         self._not_tracked(d)
    1:         d[y] = 2
    1:         self._not_tracked(d)
    1:         d[z] = 3
    1:         self._not_tracked(d)
    1:         self._not_tracked(d.copy())
    1:         d[4] = w
    1:         self._tracked(d)
    1:         self._tracked(d.copy())
    1:         d[4] = None
    1:         self._not_tracked(d)
    1:         self._not_tracked(d.copy())
       
               # dd isn't tracked right now, but it may mutate and therefore d
               # which contains it must be tracked.
    1:         d = dict()
    1:         dd = dict()
    1:         d[1] = dd
    1:         self._not_tracked(dd)
    1:         self._tracked(d)
    1:         dd[1] = d
    1:         self._tracked(dd)
       
    1:         d = dict.fromkeys([x, y, z])
    1:         self._not_tracked(d)
    1:         dd = dict()
    1:         dd.update(d)
    1:         self._not_tracked(dd)
    1:         d = dict.fromkeys([x, y, z, o])
    1:         self._tracked(d)
    1:         dd = dict()
    1:         dd.update(d)
    1:         self._tracked(dd)
       
    1:         d = dict(x=x, y=y, z=z)
    1:         self._not_tracked(d)
    1:         d = dict(x=x, y=y, z=z, w=w)
    1:         self._tracked(d)
    1:         d = dict()
    1:         d.update(x=x, y=y, z=z)
    1:         self._not_tracked(d)
    1:         d.update(w=w)
    1:         self._tracked(d)
       
    1:         d = dict([(x, y), (z, 1)])
    1:         self._not_tracked(d)
    1:         d = dict([(x, y), (z, w)])
    1:         self._tracked(d)
    1:         d = dict()
    1:         d.update([(x, y), (z, 1)])
    1:         self._not_tracked(d)
    1:         d.update([(x, y), (z, w)])
    1:         self._tracked(d)
       
    1:     @test_support.cpython_only
           def test_track_subtypes(self):
               # Dict subtypes are always tracked
    2:         class MyDict(dict):
    1:             pass
    1:         self._tracked(MyDict())
       
       
    1:     def test_free_after_iterating(self):
    1:         test_support.check_free_after_iterating(self, iter, dict)
    2:         test_support.check_free_after_iterating(self, lambda d: d.iterkeys(), dict)
    2:         test_support.check_free_after_iterating(self, lambda d: d.itervalues(), dict)
    2:         test_support.check_free_after_iterating(self, lambda d: d.iteritems(), dict)
    2:         test_support.check_free_after_iterating(self, lambda d: iter(d.viewkeys()), dict)
    2:         test_support.check_free_after_iterating(self, lambda d: iter(d.viewvalues()), dict)
    2:         test_support.check_free_after_iterating(self, lambda d: iter(d.viewitems()), dict)
       
    1:     def test_equal_operator_modifying_operand(self):
               # test fix for seg fault reported in issue 27945 part 3.
    2:         class X(object):
    1:             def __del__(self):
    3:                 dict_b.clear()
       
    1:             def __eq__(self, other):
    2:                 dict_a.clear()
    2:                 return True
       
    1:             def __hash__(self):
    3:                 return 13
       
    1:         dict_a = {X(): 0}
    1:         dict_b = {X(): X()}
    1:         self.assertTrue(dict_a == dict_b)
       
    1:     def test_fromkeys_operator_modifying_dict_operand(self):
               # test fix for seg fault reported in issue 27945 part 4a.
    2:         class X(int):
    1:             def __hash__(self):
    2:                 return 13
       
    1:             def __eq__(self, other):
    2:                 if len(d) > 1:
    1:                     d.clear()
    2:                 return False
       
    1:         d = {}  # this is required to exist so that d can be constructed!
    1:         d = {X(1): 1, X(2): 2}
    1:         try:
    1:             dict.fromkeys(d)  # shouldn't crash
>>>>>>         except RuntimeError:  # implementation defined
>>>>>>             pass
       
    1:     def test_fromkeys_operator_modifying_set_operand(self):
               # test fix for seg fault reported in issue 27945 part 4b.
    2:         class X(int):
    1:             def __hash__(self):
    2:                 return 13
       
    1:             def __eq__(self, other):
    2:                 if len(d) > 1:
    1:                     d.clear()
    2:                 return False
       
    1:         d = {}  # this is required to exist so that d can be constructed!
    1:         d = {X(1), X(2)}
    1:         try:
    1:             dict.fromkeys(d)  # shouldn't crash
>>>>>>         except RuntimeError:  # implementation defined
>>>>>>             pass
       
    1:     def test_dictitems_contains_use_after_free(self):
    2:         class X(object):
    1:             def __eq__(self, other):
    1:                 d.clear()
    1:                 return NotImplemented
       
    1:             __hash__ = object.__hash__  # silence Py3k warning
       
    1:         d = {0: set()}
    1:         try:
    1:             (0, X()) in d.iteritems()  # shouldn't crash
    1:         except RuntimeError:  # implementation defined
    1:             pass
       
    1:     def test_init_use_after_free(self):
    2:         class X(object):
    1:             def __hash__(self):
    1:                 pair[:] = []
    1:                 return 13
       
    1:         pair = [X(), 123]
    1:         dict([pair])
       
    1:     def test_oob_indexing_dictiter_iternextitem(self):
    2:         class X(int):
    1:             def __del__(self):
    7:                 d.clear()
       
   10:         d = {i: X(i) for i in range(8)}
       
    1:         def iter_and_mutate():
    6:             for result in d.iteritems():
    5:                 if result[0] == 2:
    1:                     d[2] = None # free d[2] --> X(2).__del__ was called
       
    1:         self.assertRaises(RuntimeError, iter_and_mutate)
       
       
    1: from test import mapping_tests
       
    2: class GeneralMappingTests(mapping_tests.BasicTestMappingProtocol):
    1:     type2test = dict
       
    2: class Dict(dict):
    1:     pass
       
    2: class SubclassMappingTests(mapping_tests.BasicTestMappingProtocol):
    1:     type2test = Dict
       
    1: def test_main():
    1:     with test_support.check_py3k_warnings(
    1:         ('dict(.has_key..| inequality comparisons) not supported in 3.x',
    1:          DeprecationWarning)):
    1:         test_support.run_unittest(
    1:             DictTest,
    1:             GeneralMappingTests,
    1:             SubclassMappingTests,
               )
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
