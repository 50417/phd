    1: import unittest
    1: from test import test_support
       
    1: from random import random
    1: from math import atan2, isnan, copysign
       
    1: INF = float("inf")
    1: NAN = float("nan")
       # These tests ensure that complex math does the right thing
       
       # decorator for skipping tests on non-IEEE 754 platforms
    1: have_getformat = hasattr(float, "__getformat__")
    1: requires_IEEE_754 = unittest.skipUnless(have_getformat and
    1:     float.__getformat__("double").startswith("IEEE"),
    1:     "test requires IEEE 754 doubles")
       
       
    2: class ComplexTest(unittest.TestCase):
       
    1:     def assertAlmostEqual(self, a, b):
  383:         if isinstance(a, complex):
   59:             if isinstance(b, complex):
   51:                 unittest.TestCase.assertAlmostEqual(self, a.real, b.real)
   51:                 unittest.TestCase.assertAlmostEqual(self, a.imag, b.imag)
                   else:
    8:                 unittest.TestCase.assertAlmostEqual(self, a.real, b)
    8:                 unittest.TestCase.assertAlmostEqual(self, a.imag, 0.)
               else:
  324:             if isinstance(b, complex):
>>>>>>                 unittest.TestCase.assertAlmostEqual(self, a, b.real)
>>>>>>                 unittest.TestCase.assertAlmostEqual(self, 0., b.imag)
                   else:
  324:                 unittest.TestCase.assertAlmostEqual(self, a, b)
       
    1:     def assertCloseAbs(self, x, y, eps=1e-9):
               """Return true iff floats x and y "are close"."""
               # put the one with larger magnitude second
175466:         if abs(x) > abs(y):
 9684:             x, y = y, x
175466:         if y == 0:
15846:             return abs(x) < eps
159620:         if x == 0:
>>>>>>             return abs(y) < eps
               # check that relative difference < eps
159620:         self.assertTrue(abs((x-y)/y) < eps)
       
    1:     def assertFloatsAreIdentical(self, x, y):
               """assert that floats x and y are identical, in the sense that:
               (1) both x and y are nans, or
               (2) both x and y are infinities, with the same sign, or
               (3) both x and y are zeros, with the same sign, or
               (4) x and y are both finite and nonzero, and x == y
       
               """
 1496:         msg = 'floats {!r} and {!r} are not identical'
       
 1496:         if isnan(x) or isnan(y):
  184:             if isnan(x) and isnan(y):
  184:                 return
 1312:         elif x == y:
 1312:             if x != 0.0:
  944:                 return
                   # both zero; check that signs match
  368:             elif copysign(1.0, x) == copysign(1.0, y):
  368:                 return
                   else:
>>>>>>                 msg += ': zeros have different signs'
>>>>>>         self.fail(msg.format(x, y))
       
    1:     def assertClose(self, x, y, eps=1e-9):
               """Return true iff complexes x and y "are close"."""
87733:         self.assertCloseAbs(x.real, y.real, eps)
87733:         self.assertCloseAbs(x.imag, y.imag, eps)
       
    1:     def check_div(self, x, y):
               """Compute complex z=x*y, and check that z/x==y and z/y==x."""
14743:         z = x * y
14743:         if x != 0:
14622:             q = z / x
14622:             self.assertClose(q, y)
14622:             q = z.__div__(x)
14622:             self.assertClose(q, y)
14622:             q = z.__truediv__(x)
14622:             self.assertClose(q, y)
14743:         if y != 0:
14622:             q = z / y
14622:             self.assertClose(q, x)
14622:             q = z.__div__(y)
14622:             self.assertClose(q, x)
14622:             q = z.__truediv__(y)
14622:             self.assertClose(q, x)
       
    1:     def test_div(self):
   12:         simple_real = [float(i) for i in xrange(-5, 6)]
  133:         simple_complex = [complex(x, y) for x in simple_real for y in simple_real]
  122:         for x in simple_complex:
14762:             for y in simple_complex:
14641:                 self.check_div(x, y)
       
               # A naive complex division algorithm (such as in 2.0) is very prone to
               # nonsense errors for these (overflows and underflows).
    1:         self.check_div(complex(1e200, 1e200), 1+0j)
    1:         self.check_div(complex(1e-200, 1e-200), 1+0j)
       
               # Just for fun.
  101:         for i in xrange(100):
  100:             self.check_div(complex(random(), random()),
  100:                            complex(random(), random()))
       
    1:         self.assertRaises(ZeroDivisionError, complex.__div__, 1+1j, 0+0j)
               # FIXME: The following currently crashes on Alpha
               # self.assertRaises(OverflowError, pow, 1e200+1j, 1e200+1j)
       
    1:     def test_truediv(self):
    1:         self.assertAlmostEqual(complex.__truediv__(2+0j, 1+1j), 1-1j)
    1:         self.assertRaises(ZeroDivisionError, complex.__truediv__, 1+1j, 0+0j)
       
    4:         for denom_real, denom_imag in [(0, NAN), (NAN, 0), (NAN, NAN)]:
    3:             z = complex(0, 0) / complex(denom_real, denom_imag)
    3:             self.assertTrue(isnan(z.real))
    3:             self.assertTrue(isnan(z.imag))
       
    1:     def test_floordiv(self):
    1:         self.assertAlmostEqual(complex.__floordiv__(3+0j, 1.5+0j), 2)
    1:         self.assertRaises(ZeroDivisionError, complex.__floordiv__, 3+0j, 0+0j)
       
    1:     def test_coerce(self):
    1:         self.assertRaises(OverflowError, complex.__coerce__, 1+1j, 1L<<10000)
       
    1:     def test_no_implicit_coerce(self):
               # Python 2.7 removed implicit coercion from the complex type
    2:         class A(object):
    1:             def __coerce__(self, other):
>>>>>>                 raise RuntimeError
    1:             __hash__ = None
    1:             def __cmp__(self, other):
    1:                 return -1
       
    1:         a = A()
    2:         self.assertRaises(TypeError, lambda: a + 2.0j)
    1:         self.assertTrue(a < 2.0j)
       
    1:     def test_richcompare(self):
    1:         self.assertEqual(complex.__eq__(1+1j, 1L<<10000), False)
    1:         self.assertEqual(complex.__lt__(1+1j, None), NotImplemented)
    1:         self.assertIs(complex.__eq__(1+1j, 1+1j), True)
    1:         self.assertIs(complex.__eq__(1+1j, 2+2j), False)
    1:         self.assertIs(complex.__ne__(1+1j, 1+1j), False)
    1:         self.assertIs(complex.__ne__(1+1j, 2+2j), True)
    1:         self.assertRaises(TypeError, complex.__lt__, 1+1j, 2+2j)
    1:         self.assertRaises(TypeError, complex.__le__, 1+1j, 2+2j)
    1:         self.assertRaises(TypeError, complex.__gt__, 1+1j, 2+2j)
    1:         self.assertRaises(TypeError, complex.__ge__, 1+1j, 2+2j)
       
    1:     def test_richcompare_boundaries(self):
    1:         def check(n, deltas, is_equal, imag = 0.0):
 1919:             for delta in deltas:
 1900:                 i = n + delta
 1900:                 z = complex(i, imag)
 1900:                 self.assertIs(complex.__eq__(z, i), is_equal(delta))
 1900:                 self.assertIs(complex.__ne__(z, i), not is_equal(delta))
               # For IEEE-754 doubles the following should hold:
               #    x in [2 ** (52 + i), 2 ** (53 + i + 1)] -> x mod 2 ** i == 0
               # where the interval is representable, of course.
   10:         for i in range(1, 10):
    9:             pow = 52 + i
    9:             mult = 2 ** i
 1809:             check(2 ** pow, range(1, 101), lambda delta: delta % mult == 0)
 1809:             check(2 ** pow, range(1, 101), lambda delta: False, float(i))
  201:         check(2 ** 53, range(-100, 0), lambda delta: True)
       
    1:     def test_mod(self):
    1:         self.assertRaises(ZeroDivisionError, (1+1j).__mod__, 0+0j)
       
    1:         a = 3.33+4.43j
    1:         try:
    1:             a % 0
    1:         except ZeroDivisionError:
    1:             pass
               else:
>>>>>>             self.fail("modulo parama can't be 0")
       
    1:     def test_divmod(self):
    1:         self.assertRaises(ZeroDivisionError, divmod, 1+1j, 0+0j)
       
    1:     def test_pow(self):
    1:         self.assertAlmostEqual(pow(1+1j, 0+0j), 1.0)
    1:         self.assertAlmostEqual(pow(0+0j, 2+0j), 0.0)
    1:         self.assertRaises(ZeroDivisionError, pow, 0+0j, 1j)
    1:         self.assertAlmostEqual(pow(1j, -1), 1/1j)
    1:         self.assertAlmostEqual(pow(1j, 200), 1)
    1:         self.assertRaises(ValueError, pow, 1+1j, 1+1j, 1+1j)
       
    1:         a = 3.33+4.43j
    1:         self.assertEqual(a ** 0j, 1)
    1:         self.assertEqual(a ** 0.+0.j, 1)
       
    1:         self.assertEqual(3j ** 0j, 1)
    1:         self.assertEqual(3j ** 0, 1)
       
    1:         try:
    1:             0j ** a
    1:         except ZeroDivisionError:
    1:             pass
               else:
>>>>>>             self.fail("should fail 0.0 to negative or complex power")
       
    1:         try:
    1:             0j ** (3-2j)
    1:         except ZeroDivisionError:
    1:             pass
               else:
>>>>>>             self.fail("should fail 0.0 to negative or complex power")
       
               # The following is used to exercise certain code paths
    1:         self.assertEqual(a ** 105, a ** 105)
    1:         self.assertEqual(a ** -105, a ** -105)
    1:         self.assertEqual(a ** -30, a ** -30)
       
    1:         self.assertEqual(0.0j ** 0, 1)
       
    1:         b = 5.1+2.3j
    1:         self.assertRaises(ValueError, pow, a, b, 0)
       
    1:     def test_boolcontext(self):
  101:         for i in xrange(100):
  100:             self.assertTrue(complex(random() + 1e-6, random() + 1e-6))
    1:         self.assertTrue(not complex(0.0, 0.0))
       
    1:     def test_conjugate(self):
    1:         self.assertClose(complex(5.3, 9.8).conjugate(), 5.3-9.8j)
       
    1:     def test_constructor(self):
    2:         class OS:
    3:             def __init__(self, value): self.value = value
    3:             def __complex__(self): return self.value
    2:         class NS(object):
    3:             def __init__(self, value): self.value = value
    3:             def __complex__(self): return self.value
    1:         self.assertEqual(complex(OS(1+10j)), 1+10j)
    1:         self.assertEqual(complex(NS(1+10j)), 1+10j)
    1:         self.assertRaises(TypeError, complex, OS(None))
    1:         self.assertRaises(TypeError, complex, NS(None))
       
    1:         self.assertAlmostEqual(complex("1+10j"), 1+10j)
    1:         self.assertAlmostEqual(complex(10), 10+0j)
    1:         self.assertAlmostEqual(complex(10.0), 10+0j)
    1:         self.assertAlmostEqual(complex(10L), 10+0j)
    1:         self.assertAlmostEqual(complex(10+0j), 10+0j)
    1:         self.assertAlmostEqual(complex(1,10), 1+10j)
    1:         self.assertAlmostEqual(complex(1,10L), 1+10j)
    1:         self.assertAlmostEqual(complex(1,10.0), 1+10j)
    1:         self.assertAlmostEqual(complex(1L,10), 1+10j)
    1:         self.assertAlmostEqual(complex(1L,10L), 1+10j)
    1:         self.assertAlmostEqual(complex(1L,10.0), 1+10j)
    1:         self.assertAlmostEqual(complex(1.0,10), 1+10j)
    1:         self.assertAlmostEqual(complex(1.0,10L), 1+10j)
    1:         self.assertAlmostEqual(complex(1.0,10.0), 1+10j)
    1:         self.assertAlmostEqual(complex(3.14+0j), 3.14+0j)
    1:         self.assertAlmostEqual(complex(3.14), 3.14+0j)
    1:         self.assertAlmostEqual(complex(314), 314.0+0j)
    1:         self.assertAlmostEqual(complex(314L), 314.0+0j)
    1:         self.assertAlmostEqual(complex(3.14+0j, 0j), 3.14+0j)
    1:         self.assertAlmostEqual(complex(3.14, 0.0), 3.14+0j)
    1:         self.assertAlmostEqual(complex(314, 0), 314.0+0j)
    1:         self.assertAlmostEqual(complex(314L, 0L), 314.0+0j)
    1:         self.assertAlmostEqual(complex(0j, 3.14j), -3.14+0j)
    1:         self.assertAlmostEqual(complex(0.0, 3.14j), -3.14+0j)
    1:         self.assertAlmostEqual(complex(0j, 3.14), 3.14j)
    1:         self.assertAlmostEqual(complex(0.0, 3.14), 3.14j)
    1:         self.assertAlmostEqual(complex("1"), 1+0j)
    1:         self.assertAlmostEqual(complex("1j"), 1j)
    1:         self.assertAlmostEqual(complex(),  0)
    1:         self.assertAlmostEqual(complex("-1"), -1)
    1:         self.assertAlmostEqual(complex("+1"), +1)
    1:         self.assertAlmostEqual(complex("(1+2j)"), 1+2j)
    1:         self.assertAlmostEqual(complex("(1.3+2.2j)"), 1.3+2.2j)
    1:         self.assertAlmostEqual(complex("3.14+1J"), 3.14+1j)
    1:         self.assertAlmostEqual(complex(" ( +3.14-6J )"), 3.14-6j)
    1:         self.assertAlmostEqual(complex(" ( +3.14-J )"), 3.14-1j)
    1:         self.assertAlmostEqual(complex(" ( +3.14+j )"), 3.14+1j)
    1:         self.assertAlmostEqual(complex("J"), 1j)
    1:         self.assertAlmostEqual(complex("( j )"), 1j)
    1:         self.assertAlmostEqual(complex("+J"), 1j)
    1:         self.assertAlmostEqual(complex("( -j)"), -1j)
    1:         self.assertAlmostEqual(complex('1e-500'), 0.0 + 0.0j)
    1:         self.assertAlmostEqual(complex('-1e-500j'), 0.0 - 0.0j)
    1:         self.assertAlmostEqual(complex('-1e-500+1e-500j'), -0.0 + 0.0j)
       
    2:         class complex2(complex): pass
    1:         self.assertAlmostEqual(complex(complex2(1+1j)), 1+1j)
    1:         self.assertAlmostEqual(complex(real=17, imag=23), 17+23j)
    1:         self.assertAlmostEqual(complex(real=17+23j), 17+23j)
    1:         self.assertAlmostEqual(complex(real=17+23j, imag=23), 17+46j)
    1:         self.assertAlmostEqual(complex(real=1+2j, imag=3+4j), -3+5j)
       
               # check that the sign of a zero in the real or imaginary part
               # is preserved when constructing from two floats.  (These checks
               # are harmless on systems without support for signed zeros.)
    1:         def split_zeros(x):
                   """Function that produces different results for 0. and -0."""
    8:             return atan2(x, -1.)
       
    1:         self.assertEqual(split_zeros(complex(1., 0.).imag), split_zeros(0.))
    1:         self.assertEqual(split_zeros(complex(1., -0.).imag), split_zeros(-0.))
    1:         self.assertEqual(split_zeros(complex(0., 1.).real), split_zeros(0.))
    1:         self.assertEqual(split_zeros(complex(-0., 1.).real), split_zeros(-0.))
       
    1:         c = 3.14 + 1j
    1:         self.assertTrue(complex(c) is c)
    1:         del c
       
    1:         self.assertRaises(TypeError, complex, "1", "1")
    1:         self.assertRaises(TypeError, complex, 1, "1")
       
    1:         if test_support.have_unicode:
    1:             self.assertEqual(complex(unicode("  3.14+J  ")), 3.14+1j)
       
               # SF bug 543840:  complex(string) accepts strings with \0
               # Fixed in 2.3.
    1:         self.assertRaises(ValueError, complex, '1+1j\0j')
       
    1:         self.assertRaises(TypeError, int, 5+3j)
    1:         self.assertRaises(TypeError, long, 5+3j)
    1:         self.assertRaises(TypeError, float, 5+3j)
    1:         self.assertRaises(ValueError, complex, "")
    1:         self.assertRaises(TypeError, complex, None)
    1:         self.assertRaises(ValueError, complex, "\0")
    1:         self.assertRaises(ValueError, complex, "3\09")
    1:         self.assertRaises(TypeError, complex, "1", "2")
    1:         self.assertRaises(TypeError, complex, "1", 42)
    1:         self.assertRaises(TypeError, complex, 1, "2")
    1:         self.assertRaises(ValueError, complex, "1+")
    1:         self.assertRaises(ValueError, complex, "1+1j+1j")
    1:         self.assertRaises(ValueError, complex, "--")
    1:         self.assertRaises(ValueError, complex, "(1+2j")
    1:         self.assertRaises(ValueError, complex, "1+2j)")
    1:         self.assertRaises(ValueError, complex, "1+(2j)")
    1:         self.assertRaises(ValueError, complex, "(1+2j)123")
    1:         if test_support.have_unicode:
    1:             self.assertRaises(ValueError, complex, unicode("x"))
    1:         self.assertRaises(ValueError, complex, "1j+2")
    1:         self.assertRaises(ValueError, complex, "1e1ej")
    1:         self.assertRaises(ValueError, complex, "1e++1ej")
    1:         self.assertRaises(ValueError, complex, ")1+2j(")
               # the following three are accepted by Python 2.6
    1:         self.assertRaises(ValueError, complex, "1..1j")
    1:         self.assertRaises(ValueError, complex, "1.11.1j")
    1:         self.assertRaises(ValueError, complex, "1e1.1j")
       
    1:         if test_support.have_unicode:
                   # check that complex accepts long unicode strings
    1:             self.assertEqual(type(complex(unicode("1"*500))), complex)
       
    2:         class EvilExc(Exception):
    1:             pass
       
    2:         class evilcomplex:
    1:             def __complex__(self):
    1:                 raise EvilExc
       
    1:         self.assertRaises(EvilExc, complex, evilcomplex())
       
    2:         class float2:
    1:             def __init__(self, value):
    4:                 self.value = value
    1:             def __float__(self):
    4:                 return self.value
       
    1:         self.assertAlmostEqual(complex(float2(42.)), 42)
    1:         self.assertAlmostEqual(complex(real=float2(17.), imag=float2(23.)), 17+23j)
    1:         self.assertRaises(TypeError, complex, float2(None))
       
    2:         class complex0(complex):
    1:             """Test usage of __complex__() when inheriting from 'complex'"""
    1:             def __complex__(self):
    1:                 return 42j
       
    2:         class complex1(complex):
    1:             """Test usage of __complex__() with a __new__() method"""
    1:             def __new__(self, value=0j):
    1:                 return complex.__new__(self, 2*value)
    1:             def __complex__(self):
    1:                 return self
       
    2:         class complex2(complex):
                   """Make sure that __complex__() calls fail if anything other than a
    1:             complex is returned"""
    1:             def __complex__(self):
    1:                 return None
       
    1:         self.assertAlmostEqual(complex(complex0(1j)), 42j)
    1:         self.assertAlmostEqual(complex(complex1(1j)), 2j)
    1:         self.assertRaises(TypeError, complex, complex2(1j))
       
    1:     def test_subclass(self):
    2:         class xcomplex(complex):
    1:             def __add__(self,other):
  120:                 return xcomplex(complex(self) + other)
    1:             __radd__ = __add__
       
    1:             def __sub__(self,other):
   60:                 return xcomplex(complex(self) + other)
    1:             __rsub__ = __sub__
       
    1:             def __mul__(self,other):
   90:                 return xcomplex(complex(self) * other)
    1:             __rmul__ = __mul__
       
    1:             def __div__(self,other):
   45:                 return xcomplex(complex(self) / other)
       
    1:             def __rdiv__(self,other):
   45:                 return xcomplex(other / complex(self))
       
    1:             __truediv__ = __div__
    1:             __rtruediv__ = __rdiv__
       
    1:             def __floordiv__(self,other):
   45:                 return xcomplex(complex(self) // other)
       
    1:             def __rfloordiv__(self,other):
   45:                 return xcomplex(other // complex(self))
       
    1:             def __pow__(self,other):
   45:                 return xcomplex(complex(self) ** other)
       
    1:             def __rpow__(self,other):
   45:                 return xcomplex(other ** complex(self) )
       
    1:             def __mod__(self,other):
   45:                 return xcomplex(complex(self) % other)
       
    1:             def __rmod__(self,other):
   45:                 return xcomplex(other % complex(self))
       
    1:         infix_binops = ('+', '-', '*', '**', '%', '//', '/')
    1:         xcomplex_values = (xcomplex(1), xcomplex(123.0),
    1:                            xcomplex(-10+2j), xcomplex(3+187j),
    1:                            xcomplex(3-78j))
    1:         test_values = (1, 123.0, 10-19j, xcomplex(1+2j),
    1:                        xcomplex(1+87j), xcomplex(10+90j))
       
    8:         for op in infix_binops:
   42:             for x in xcomplex_values:
  245:                 for y in test_values:
  210:                     a = 'x %s y' % op
  210:                     b = 'y %s x' % op
  210:                     self.assertTrue(type(eval(a)) is type(eval(b)) is xcomplex)
       
    1:     @requires_IEEE_754
           def test_constructor_special_numbers(self):
    2:         class complex2(complex):
    1:             pass
    6:         for x in 0.0, -0.0, INF, -INF, NAN:
   30:             for y in 0.0, -0.0, INF, -INF, NAN:
   25:                 z = complex(x, y)
   25:                 self.assertFloatsAreIdentical(z.real, x)
   25:                 self.assertFloatsAreIdentical(z.imag, y)
   25:                 z = complex2(x, y)
   25:                 self.assertIs(type(z), complex2)
   25:                 self.assertFloatsAreIdentical(z.real, x)
   25:                 self.assertFloatsAreIdentical(z.imag, y)
   25:                 z = complex(complex2(x, y))
   25:                 self.assertIs(type(z), complex)
   25:                 self.assertFloatsAreIdentical(z.real, x)
   25:                 self.assertFloatsAreIdentical(z.imag, y)
   25:                 z = complex2(complex(x, y))
   25:                 self.assertIs(type(z), complex2)
   25:                 self.assertFloatsAreIdentical(z.real, x)
   25:                 self.assertFloatsAreIdentical(z.imag, y)
       
    1:     def test_hash(self):
   61:         for x in xrange(-30, 30):
   60:             self.assertEqual(hash(x), hash(complex(x, 0)))
   60:             x /= 3.0    # now check against floating point
   60:             self.assertEqual(hash(x), hash(complex(x, 0.)))
       
    1:     def test_abs(self):
  343:         nums = [complex(x/3., y/7.) for x in xrange(-9,9) for y in xrange(-9,9)]
  325:         for num in nums:
  324:             self.assertAlmostEqual((num.real**2 + num.imag**2)  ** 0.5, abs(num))
       
    1:     def test_repr(self):
    1:         self.assertEqual(repr(1+6j), '(1+6j)')
    1:         self.assertEqual(repr(1-6j), '(1-6j)')
       
    1:         self.assertNotEqual(repr(-(1+0j)), '(-1+-0j)')
       
    1:         self.assertEqual(1-6j,complex(repr(1-6j)))
    1:         self.assertEqual(1+6j,complex(repr(1+6j)))
    1:         self.assertEqual(-6j,complex(repr(-6j)))
    1:         self.assertEqual(6j,complex(repr(6j)))
       
    1:         self.assertEqual(repr(complex(1., INF)), "(1+infj)")
    1:         self.assertEqual(repr(complex(1., -INF)), "(1-infj)")
    1:         self.assertEqual(repr(complex(INF, 1)), "(inf+1j)")
    1:         self.assertEqual(repr(complex(-INF, INF)), "(-inf+infj)")
    1:         self.assertEqual(repr(complex(NAN, 1)), "(nan+1j)")
    1:         self.assertEqual(repr(complex(1, NAN)), "(1+nanj)")
    1:         self.assertEqual(repr(complex(NAN, NAN)), "(nan+nanj)")
       
    1:         self.assertEqual(repr(complex(0, INF)), "infj")
    1:         self.assertEqual(repr(complex(0, -INF)), "-infj")
    1:         self.assertEqual(repr(complex(0, NAN)), "nanj")
       
    1:     def test_neg(self):
    1:         self.assertEqual(-(1+6j), -1-6j)
       
    1:     def test_file(self):
    1:         a = 3.33+4.43j
    1:         b = 5.1+2.3j
       
    1:         fo = None
    1:         try:
    1:             fo = open(test_support.TESTFN, "wb")
    1:             print >>fo, a, b
    1:             fo.close()
    1:             fo = open(test_support.TESTFN, "rb")
    1:             self.assertEqual(fo.read(), "%s %s\n" % (a, b))
               finally:
    1:             if (fo is not None) and (not fo.closed):
    1:                 fo.close()
    1:             test_support.unlink(test_support.TESTFN)
       
    1:     def test_getnewargs(self):
    1:         self.assertEqual((1+2j).__getnewargs__(), (1.0, 2.0))
    1:         self.assertEqual((1-2j).__getnewargs__(), (1.0, -2.0))
    1:         self.assertEqual((2j).__getnewargs__(), (0.0, 2.0))
    1:         self.assertEqual((-0j).__getnewargs__(), (0.0, -0.0))
    1:         self.assertEqual(complex(0, INF).__getnewargs__(), (0.0, INF))
    1:         self.assertEqual(complex(INF, 0).__getnewargs__(), (INF, 0.0))
       
    1:     if float.__getformat__("double").startswith("IEEE"):
    1:         def test_plus_minus_0j(self):
                   # test that -0j and 0j literals are not identified
    1:             z1, z2 = 0j, -0j
    1:             self.assertEqual(atan2(z1.imag, -1.), atan2(0., -1.))
    1:             self.assertEqual(atan2(z2.imag, -1.), atan2(-0., -1.))
       
    1:     @unittest.skipUnless(float.__getformat__("double").startswith("IEEE"),
    1:                          "test requires IEEE 754 doubles")
           def test_overflow(self):
    1:         self.assertEqual(complex("1e500"), complex(INF, 0.0))
    1:         self.assertEqual(complex("-1e500j"), complex(0.0, -INF))
    1:         self.assertEqual(complex("-1e500+1.8e308j"), complex(-INF, INF))
       
    1:     @unittest.skipUnless(float.__getformat__("double").startswith("IEEE"),
    1:                          "test requires IEEE 754 doubles")
           def test_repr_roundtrip(self):
    1:         vals = [0.0, 1e-500, 1e-315, 1e-200, 0.0123, 3.1415, 1e50, INF, NAN]
   10:         vals += [-v for v in vals]
       
               # complex(repr(z)) should recover z exactly, even for complex
               # numbers involving an infinity, nan, or negative zero
   19:         for x in vals:
  342:             for y in vals:
  324:                 z = complex(x, y)
  324:                 roundtrip = complex(repr(z))
  324:                 self.assertFloatsAreIdentical(z.real, roundtrip.real)
  324:                 self.assertFloatsAreIdentical(z.imag, roundtrip.imag)
       
               # if we predefine some constants, then eval(repr(z)) should
               # also work, except that it might change the sign of zeros
    1:         inf, nan = float('inf'), float('nan')
    1:         infj, nanj = complex(0.0, inf), complex(0.0, nan)
   19:         for x in vals:
  342:             for y in vals:
  324:                 z = complex(x, y)
  324:                 roundtrip = eval(repr(z))
                       # adding 0.0 has no effect beside changing -0.0 to 0.0
  324:                 self.assertFloatsAreIdentical(0.0 + z.real,
  324:                                               0.0 + roundtrip.real)
  324:                 self.assertFloatsAreIdentical(0.0 + z.imag,
  324:                                               0.0 + roundtrip.imag)
       
    1:     def test_format(self):
               # empty format string is same as str()
    1:         self.assertEqual(format(1+3j, ''), str(1+3j))
    1:         self.assertEqual(format(1.5+3.5j, ''), str(1.5+3.5j))
    1:         self.assertEqual(format(3j, ''), str(3j))
    1:         self.assertEqual(format(3.2j, ''), str(3.2j))
    1:         self.assertEqual(format(3+0j, ''), str(3+0j))
    1:         self.assertEqual(format(3.2+0j, ''), str(3.2+0j))
       
               # empty presentation type should still be analogous to str,
               # even when format string is nonempty (issue #5920).
    1:         self.assertEqual(format(3.2+0j, '-'), str(3.2+0j))
    1:         self.assertEqual(format(3.2+0j, '<'), str(3.2+0j))
    1:         z = 4/7. - 100j/7.
    1:         self.assertEqual(format(z, ''), str(z))
    1:         self.assertEqual(format(z, '-'), str(z))
    1:         self.assertEqual(format(z, '<'), str(z))
    1:         self.assertEqual(format(z, '10'), str(z))
    1:         z = complex(0.0, 3.0)
    1:         self.assertEqual(format(z, ''), str(z))
    1:         self.assertEqual(format(z, '-'), str(z))
    1:         self.assertEqual(format(z, '<'), str(z))
    1:         self.assertEqual(format(z, '2'), str(z))
    1:         z = complex(-0.0, 2.0)
    1:         self.assertEqual(format(z, ''), str(z))
    1:         self.assertEqual(format(z, '-'), str(z))
    1:         self.assertEqual(format(z, '<'), str(z))
    1:         self.assertEqual(format(z, '3'), str(z))
       
    1:         self.assertEqual(format(1+3j, 'g'), '1+3j')
    1:         self.assertEqual(format(3j, 'g'), '0+3j')
    1:         self.assertEqual(format(1.5+3.5j, 'g'), '1.5+3.5j')
       
    1:         self.assertEqual(format(1.5+3.5j, '+g'), '+1.5+3.5j')
    1:         self.assertEqual(format(1.5-3.5j, '+g'), '+1.5-3.5j')
    1:         self.assertEqual(format(1.5-3.5j, '-g'), '1.5-3.5j')
    1:         self.assertEqual(format(1.5+3.5j, ' g'), ' 1.5+3.5j')
    1:         self.assertEqual(format(1.5-3.5j, ' g'), ' 1.5-3.5j')
    1:         self.assertEqual(format(-1.5+3.5j, ' g'), '-1.5+3.5j')
    1:         self.assertEqual(format(-1.5-3.5j, ' g'), '-1.5-3.5j')
       
    1:         self.assertEqual(format(-1.5-3.5e-20j, 'g'), '-1.5-3.5e-20j')
    1:         self.assertEqual(format(-1.5-3.5j, 'f'), '-1.500000-3.500000j')
    1:         self.assertEqual(format(-1.5-3.5j, 'F'), '-1.500000-3.500000j')
    1:         self.assertEqual(format(-1.5-3.5j, 'e'), '-1.500000e+00-3.500000e+00j')
    1:         self.assertEqual(format(-1.5-3.5j, '.2e'), '-1.50e+00-3.50e+00j')
    1:         self.assertEqual(format(-1.5-3.5j, '.2E'), '-1.50E+00-3.50E+00j')
    1:         self.assertEqual(format(-1.5e10-3.5e5j, '.2G'), '-1.5E+10-3.5E+05j')
       
    1:         self.assertEqual(format(1.5+3j, '<20g'),  '1.5+3j              ')
    1:         self.assertEqual(format(1.5+3j, '*<20g'), '1.5+3j**************')
    1:         self.assertEqual(format(1.5+3j, '>20g'),  '              1.5+3j')
    1:         self.assertEqual(format(1.5+3j, '^20g'),  '       1.5+3j       ')
    1:         self.assertEqual(format(1.5+3j, '<20'),   '(1.5+3j)            ')
    1:         self.assertEqual(format(1.5+3j, '>20'),   '            (1.5+3j)')
    1:         self.assertEqual(format(1.5+3j, '^20'),   '      (1.5+3j)      ')
    1:         self.assertEqual(format(1.123-3.123j, '^20.2'), '     (1.1-3.1j)     ')
       
    1:         self.assertEqual(format(1.5+3j, '20.2f'), '          1.50+3.00j')
    1:         self.assertEqual(format(1.5+3j, '>20.2f'), '          1.50+3.00j')
    1:         self.assertEqual(format(1.5+3j, '<20.2f'), '1.50+3.00j          ')
    1:         self.assertEqual(format(1.5e20+3j, '<20.2f'), '150000000000000000000.00+3.00j')
    1:         self.assertEqual(format(1.5e20+3j, '>40.2f'), '          150000000000000000000.00+3.00j')
    1:         self.assertEqual(format(1.5e20+3j, '^40,.2f'), '  150,000,000,000,000,000,000.00+3.00j  ')
    1:         self.assertEqual(format(1.5e21+3j, '^40,.2f'), ' 1,500,000,000,000,000,000,000.00+3.00j ')
    1:         self.assertEqual(format(1.5e21+3000j, ',.2f'), '1,500,000,000,000,000,000,000.00+3,000.00j')
       
               # alternate is invalid
    1:         self.assertRaises(ValueError, (1.5+0.5j).__format__, '#f')
       
               # zero padding is invalid
    1:         self.assertRaises(ValueError, (1.5+0.5j).__format__, '010f')
       
               # '=' alignment is invalid
    1:         self.assertRaises(ValueError, (1.5+3j).__format__, '=20')
       
               # integer presentation types are an error
    7:         for t in 'bcdoxX':
    6:             self.assertRaises(ValueError, (1.5+0.5j).__format__, t)
       
               # make sure everything works in ''.format()
    1:         self.assertEqual('*{0:.3f}*'.format(3.14159+2.71828j), '*3.142+2.718j*')
       
               # issue 3382: 'f' and 'F' with inf's and nan's
    1:         self.assertEqual('{0:f}'.format(INF+0j), 'inf+0.000000j')
    1:         self.assertEqual('{0:F}'.format(INF+0j), 'INF+0.000000j')
    1:         self.assertEqual('{0:f}'.format(-INF+0j), '-inf+0.000000j')
    1:         self.assertEqual('{0:F}'.format(-INF+0j), '-INF+0.000000j')
    1:         self.assertEqual('{0:f}'.format(complex(INF, INF)), 'inf+infj')
    1:         self.assertEqual('{0:F}'.format(complex(INF, INF)), 'INF+INFj')
    1:         self.assertEqual('{0:f}'.format(complex(INF, -INF)), 'inf-infj')
    1:         self.assertEqual('{0:F}'.format(complex(INF, -INF)), 'INF-INFj')
    1:         self.assertEqual('{0:f}'.format(complex(-INF, INF)), '-inf+infj')
    1:         self.assertEqual('{0:F}'.format(complex(-INF, INF)), '-INF+INFj')
    1:         self.assertEqual('{0:f}'.format(complex(-INF, -INF)), '-inf-infj')
    1:         self.assertEqual('{0:F}'.format(complex(-INF, -INF)), '-INF-INFj')
       
    1:         self.assertEqual('{0:f}'.format(complex(NAN, 0)), 'nan+0.000000j')
    1:         self.assertEqual('{0:F}'.format(complex(NAN, 0)), 'NAN+0.000000j')
    1:         self.assertEqual('{0:f}'.format(complex(NAN, NAN)), 'nan+nanj')
    1:         self.assertEqual('{0:F}'.format(complex(NAN, NAN)), 'NAN+NANj')
       
    1: def test_main():
    1:     with test_support.check_warnings(("complex divmod.., // and % are "
    1:                                       "deprecated", DeprecationWarning)):
    1:         test_support.run_unittest(ComplexTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
