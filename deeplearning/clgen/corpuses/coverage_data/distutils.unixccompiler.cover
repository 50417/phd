       """distutils.unixccompiler
       
       Contains the UnixCCompiler class, a subclass of CCompiler that handles
       the "typical" Unix-style command-line C compiler:
         * macros defined with -Dname[=value]
         * macros undefined with -Uname
         * include search directories specified with -Idir
         * libraries specified with -lllib
         * library search directories specified with -Ldir
         * compile handled by 'cc' (or similar) executable with -c option:
           compiles .c to .o
         * link static library handled by 'ar' command (possibly with 'ranlib')
         * link shared library handled by 'cc -shared'
    1: """
       
    1: __revision__ = "$Id$"
       
    1: import os, sys, re
    1: from types import StringType, NoneType
       
    1: from distutils import sysconfig
    1: from distutils.dep_util import newer
    1: from distutils.ccompiler import \
            CCompiler, gen_preprocess_options, gen_lib_options
    1: from distutils.errors import \
            DistutilsExecError, CompileError, LibError, LinkError
    1: from distutils import log
       
    1: if sys.platform == 'darwin':
    1:     import _osx_support
       
       # XXX Things not currently handled:
       #   * optimization/debug/warning flags; we just use whatever's in Python's
       #     Makefile and live with it.  Is this adequate?  If not, we might
       #     have to have a bunch of subclasses GNUCCompiler, SGICCompiler,
       #     SunCCompiler, and I suspect down that road lies madness.
       #   * even if we don't know a warning flag from an optimization flag,
       #     we need some way for outsiders to feed preprocessor/compiler/linker
       #     flags in to us -- eg. a sysadmin might want to mandate certain flags
       #     via a site config file, or a user might want to set something for
       #     compiling this module distribution only via the setup.py command
       #     line, whatever.  As long as these options come from something on the
       #     current system, they can be as system-dependent as they like, and we
       #     should just happily stuff them into the preprocessor/compiler/linker
       #     options and carry on.
       
       
    2: class UnixCCompiler(CCompiler):
       
    1:     compiler_type = 'unix'
       
           # These are used by CCompiler in two places: the constructor sets
           # instance attributes 'preprocessor', 'compiler', etc. from them, and
           # 'set_executable()' allows any of these to be set.  The defaults here
           # are pretty generic; they will probably have to be set by an outsider
           # (eg. using information discovered by the sysconfig about building
           # Python extensions).
    1:     executables = {'preprocessor' : None,
    1:                    'compiler'     : ["cc"],
    1:                    'compiler_so'  : ["cc"],
    1:                    'compiler_cxx' : ["cc"],
    1:                    'linker_so'    : ["cc", "-shared"],
    1:                    'linker_exe'   : ["cc"],
    1:                    'archiver'     : ["ar", "-cr"],
    1:                    'ranlib'       : None,
                         }
       
    1:     if sys.platform[:6] == "darwin":
    1:         executables['ranlib'] = ["ranlib"]
       
           # Needed for the filename generation methods provided by the base
           # class, CCompiler.  NB. whoever instantiates/uses a particular
           # UnixCCompiler instance should set 'shared_lib_ext' -- we set a
           # reasonable common default here, but it's not necessarily used on all
           # Unices!
       
    1:     src_extensions = [".c",".C",".cc",".cxx",".cpp",".m"]
    1:     obj_extension = ".o"
    1:     static_lib_extension = ".a"
    1:     shared_lib_extension = ".so"
    1:     dylib_lib_extension = ".dylib"
    1:     xcode_stub_lib_extension = ".tbd"
    1:     static_lib_format = shared_lib_format = dylib_lib_format = "lib%s%s"
    1:     xcode_stub_lib_format = dylib_lib_format
    1:     if sys.platform == "cygwin":
>>>>>>         exe_extension = ".exe"
       
           def preprocess(self, source,
    1:                    output_file=None, macros=None, include_dirs=None,
    1:                    extra_preargs=None, extra_postargs=None):
               ignore, macros, include_dirs = \
    2:             self._fix_compile_args(None, macros, include_dirs)
    2:         pp_opts = gen_preprocess_options(macros, include_dirs)
    2:         pp_args = self.preprocessor + pp_opts
    2:         if output_file:
    2:             pp_args.extend(['-o', output_file])
    2:         if extra_preargs:
>>>>>>             pp_args[:0] = extra_preargs
    2:         if extra_postargs:
>>>>>>             pp_args.extend(extra_postargs)
    2:         pp_args.append(source)
       
               # We need to preprocess: either we're being forced to, or we're
               # generating output to stdout, or there's a target output file and
               # the source file is newer than the target (or the target doesn't
               # exist).
    2:         if self.force or output_file is None or newer(source, output_file):
    2:             if output_file:
    2:                 self.mkpath(os.path.dirname(output_file))
    2:             try:
    2:                 self.spawn(pp_args)
>>>>>>             except DistutilsExecError, msg:
>>>>>>                 raise CompileError, msg
       
    1:     def _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts):
    8:         compiler_so = self.compiler_so
    8:         if sys.platform == 'darwin':
    8:             compiler_so = _osx_support.compiler_fixup(compiler_so,
    8:                                                     cc_args + extra_postargs)
    8:         try:
    8:             self.spawn(compiler_so + cc_args + [src, '-o', obj] +
    8:                        extra_postargs)
    5:         except DistutilsExecError, msg:
    4:             raise CompileError, msg
       
           def create_static_lib(self, objects, output_libname,
    1:                           output_dir=None, debug=0, target_lang=None):
    1:         objects, output_dir = self._fix_object_args(objects, output_dir)
       
               output_filename = \
    1:             self.library_filename(output_libname, output_dir=output_dir)
       
    1:         if self._need_link(objects, output_filename):
    1:             self.mkpath(os.path.dirname(output_filename))
    1:             self.spawn(self.archiver +
                              [output_filename] +
    1:                        objects + self.objects)
       
                   # Not many Unices required ranlib anymore -- SunOS 4.x is, I
                   # think the only major Unix that does.  Maybe we need some
                   # platform intelligence here to skip ranlib if it's not
                   # needed -- or maybe Python's configure script took care of
                   # it for us, hence the check for leading colon.
    1:             if self.ranlib:
    1:                 try:
    1:                     self.spawn(self.ranlib + [output_filename])
>>>>>>                 except DistutilsExecError, msg:
>>>>>>                     raise LibError, msg
               else:
>>>>>>             log.debug("skipping %s (up-to-date)", output_filename)
       
           def link(self, target_desc, objects,
    1:              output_filename, output_dir=None, libraries=None,
    1:              library_dirs=None, runtime_library_dirs=None,
    1:              export_symbols=None, debug=0, extra_preargs=None,
    1:              extra_postargs=None, build_temp=None, target_lang=None):
    2:         objects, output_dir = self._fix_object_args(objects, output_dir)
               libraries, library_dirs, runtime_library_dirs = \
    2:             self._fix_lib_args(libraries, library_dirs, runtime_library_dirs)
       
    2:         lib_opts = gen_lib_options(self, library_dirs, runtime_library_dirs,
    2:                                    libraries)
    2:         if type(output_dir) not in (StringType, NoneType):
>>>>>>             raise TypeError, "'output_dir' must be a string or None"
    2:         if output_dir is not None:
>>>>>>             output_filename = os.path.join(output_dir, output_filename)
       
    2:         if self._need_link(objects, output_filename):
                   ld_args = (objects + self.objects +
    2:                        lib_opts + ['-o', output_filename])
    2:             if debug:
>>>>>>                 ld_args[:0] = ['-g']
    2:             if extra_preargs:
>>>>>>                 ld_args[:0] = extra_preargs
    2:             if extra_postargs:
>>>>>>                 ld_args.extend(extra_postargs)
    2:             self.mkpath(os.path.dirname(output_filename))
    2:             try:
    2:                 if target_desc == CCompiler.EXECUTABLE:
>>>>>>                     linker = self.linker_exe[:]
                       else:
    2:                     linker = self.linker_so[:]
    2:                 if target_lang == "c++" and self.compiler_cxx:
                           # skip over environment variable settings if /usr/bin/env
                           # is used to set up the linker's environment.
                           # This is needed on OSX. Note: this assumes that the
                           # normal and C++ compiler have the same environment
                           # settings.
>>>>>>                     i = 0
>>>>>>                     if os.path.basename(linker[0]) == "env":
>>>>>>                         i = 1
>>>>>>                         while '=' in linker[i]:
>>>>>>                             i = i + 1
       
>>>>>>                     linker[i] = self.compiler_cxx[i]
       
    2:                 if sys.platform == 'darwin':
    2:                     linker = _osx_support.compiler_fixup(linker, ld_args)
       
    2:                 self.spawn(linker + ld_args)
>>>>>>             except DistutilsExecError, msg:
>>>>>>                 raise LinkError, msg
               else:
>>>>>>             log.debug("skipping %s (up-to-date)", output_filename)
       
           # -- Miscellaneous methods -----------------------------------------
           # These are all used by the 'gen_lib_options() function, in
           # ccompiler.py.
       
    1:     def library_dir_option(self, dir):
>>>>>>         return "-L" + dir
       
    1:     def _is_gcc(self, compiler_name):
    9:         return "gcc" in compiler_name or "g++" in compiler_name
       
    1:     def runtime_library_dir_option(self, dir):
               # XXX Hackish, at the very least.  See Python bug #445902:
               # http://sourceforge.net/tracker/index.php
               #   ?func=detail&aid=445902&group_id=5470&atid=105470
               # Linkers on different platforms need different options to
               # specify that directories need to be added to the list of
               # directories searched for dependencies when a dynamic library
               # is sought.  GCC has to be told to pass the -R option through
               # to the linker, whereas other compilers just know this.
               # Other compilers may need something slightly different.  At
               # this time, there's no way to determine this information from
               # the configuration data stored in the Python installation, so
               # we use this hack.
   12:         compiler = os.path.basename(sysconfig.get_config_var("CC"))
   12:         if sys.platform[:6] == "darwin":
                   # MacOSX's linker doesn't understand the -R flag at all
    1:             return "-L" + dir
   11:         elif sys.platform[:7] == "freebsd":
>>>>>>             return "-Wl,-rpath=" + dir
   11:         elif sys.platform[:5] == "hp-ux":
    3:             if self._is_gcc(compiler):
    2:                 return ["-Wl,+s", "-L" + dir]
    1:             return ["+s", "-L" + dir]
    8:         elif sys.platform[:7] == "irix646" or sys.platform[:6] == "osf1V5":
    2:             return ["-rpath", dir]
    6:         elif self._is_gcc(compiler):
    3:             return "-Wl,-R" + dir
               else:
    3:             return "-R" + dir
       
    1:     def library_option(self, lib):
>>>>>>         return "-l" + lib
       
    1:     def find_library_file(self, dirs, lib, debug=0):
>>>>>>         shared_f = self.library_filename(lib, lib_type='shared')
>>>>>>         dylib_f = self.library_filename(lib, lib_type='dylib')
>>>>>>         xcode_stub_f = self.library_filename(lib, lib_type='xcode_stub')
>>>>>>         static_f = self.library_filename(lib, lib_type='static')
       
>>>>>>         if sys.platform == 'darwin':
                   # On OSX users can specify an alternate SDK using
                   # '-isysroot', calculate the SDK root if it is specified
                   # (and use it further on)
                   #
                   # Note that, as of Xcode 7, Apple SDKs may contain textual stub
                   # libraries with .tbd extensions rather than the normal .dylib
                   # shared libraries installed in /.  The Apple compiler tool
                   # chain handles this transparently but it can cause problems
                   # for programs that are being built with an SDK and searching
                   # for specific libraries.  Callers of find_library_file need to
                   # keep in mind that the base filename of the returned SDK library
                   # file might have a different extension from that of the library
                   # file installed on the running system, for example:
                   #   /Applications/Xcode.app/Contents/Developer/Platforms/
                   #       MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/
                   #       usr/lib/libedit.tbd
                   # vs
                   #   /usr/lib/libedit.dylib
>>>>>>             cflags = sysconfig.get_config_var('CFLAGS')
>>>>>>             m = re.search(r'-isysroot\s+(\S+)', cflags)
>>>>>>             if m is None:
>>>>>>                 sysroot = '/'
                   else:
>>>>>>                 sysroot = m.group(1)
       
       
       
>>>>>>         for dir in dirs:
>>>>>>             shared = os.path.join(dir, shared_f)
>>>>>>             dylib = os.path.join(dir, dylib_f)
>>>>>>             static = os.path.join(dir, static_f)
>>>>>>             xcode_stub = os.path.join(dir, xcode_stub_f)
       
>>>>>>             if sys.platform == 'darwin' and (
>>>>>>                 dir.startswith('/System/') or (
>>>>>>                 dir.startswith('/usr/') and not dir.startswith('/usr/local/'))):
       
>>>>>>                 shared = os.path.join(sysroot, dir[1:], shared_f)
>>>>>>                 dylib = os.path.join(sysroot, dir[1:], dylib_f)
>>>>>>                 static = os.path.join(sysroot, dir[1:], static_f)
>>>>>>                 xcode_stub = os.path.join(sysroot, dir[1:], xcode_stub_f)
       
                   # We're second-guessing the linker here, with not much hard
                   # data to go on: GCC seems to prefer the shared library, so I'm
                   # assuming that *all* Unix C compilers do.  And of course I'm
                   # ignoring even GCC's "-static" option.  So sue me.
>>>>>>             if os.path.exists(dylib):
>>>>>>                 return dylib
>>>>>>             elif os.path.exists(xcode_stub):
>>>>>>                 return xcode_stub
>>>>>>             elif os.path.exists(shared):
>>>>>>                 return shared
>>>>>>             elif os.path.exists(static):
>>>>>>                 return static
       
               # Oops, didn't find it in *any* of 'dirs'
>>>>>>         return None
