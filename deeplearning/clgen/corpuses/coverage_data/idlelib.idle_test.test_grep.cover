       """ !Changing this line will break Test_findfile.test_found!
       Non-gui unit tests for idlelib.GrepDialog methods.
       dummy_command calls grep_it calls findfiles.
       An exception raised in one method will fail callers.
       Otherwise, tests are mostly independent.
       *** Currently only test grep_it.
    1: """
    1: import unittest
    1: from test.test_support import captured_stdout, findfile
    1: from idlelib.idle_test.mock_tk import Var
    1: from idlelib.GrepDialog import GrepDialog
    1: import re
       
    1: __file__ = findfile('idlelib/idle_test') + '/test_grep.py'
       
    2: class Dummy_searchengine:
           '''GrepDialog.__init__ calls parent SearchDiabolBase which attaches the
           passed in SearchEngine instance as attribute 'engine'. Only a few of the
           many possible self.engine.x attributes are needed here.
    1:     '''
    1:     def getpat(self):
    2:         return self._pat
       
    1: searchengine = Dummy_searchengine()
       
    2: class Dummy_grep:
           # Methods tested
           #default_command = GrepDialog.default_command
    1:     grep_it = GrepDialog.grep_it.im_func
    1:     findfiles = GrepDialog.findfiles.im_func
           # Other stuff needed
    1:     recvar = Var(False)
    1:     engine = searchengine
    1:     def close(self):  # gui method
    2:         pass
       
    1: grep = Dummy_grep()
       
    2: class FindfilesTest(unittest.TestCase):
           # findfiles is really a function, not a method, could be iterator
           # test that filename return filename
           # test that idlelib has many .py files
           # test that recursive flag adds idle_test .py files
    1:     pass
       
    2: class Grep_itTest(unittest.TestCase):
           # Test captured reports with 0 and some hits.
           # Should test file names, but Windows reports have mixed / and \ separators
           # from incomplete replacement, so 'later'.
       
    1:     def report(self, pat):
    2:         grep.engine._pat = pat
    2:         with captured_stdout() as s:
    2:             grep.grep_it(re.compile(pat), __file__)
    2:         lines = s.getvalue().split('\n')
    2:         lines.pop()  # remove bogus '' after last \n
    2:         return lines
       
    1:     def test_unfound(self):
    1:         pat = 'xyz*'*7
    1:         lines = self.report(pat)
    1:         self.assertEqual(len(lines), 2)
    1:         self.assertIn(pat, lines[0])
    1:         self.assertEqual(lines[1], 'No hits.')
       
    1:     def test_found(self):
       
    1:         pat = '""" !Changing this line will break Test_findfile.test_found!'
    1:         lines = self.report(pat)
    1:         self.assertEqual(len(lines), 5)
    1:         self.assertIn(pat, lines[0])
    1:         self.assertIn('py: 1:', lines[1])  # line number 1
    1:         self.assertIn('2', lines[3])  # hits found 2
    1:         self.assertTrue(lines[4].startswith('(Hint:'))
       
    2: class Default_commandTest(unittest.TestCase):
           # To write this, mode OutputWindow import to top of GrepDialog
           # so it can be replaced by captured_stdout in class setup/teardown.
    1:     pass
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main(verbosity=2, exit=False)
