       
    1: import os, filecmp, shutil, tempfile
    1: import unittest
    1: from test import test_support
       
    2: class FileCompareTestCase(unittest.TestCase):
    1:     def setUp(self):
    2:         self.name = test_support.TESTFN
    2:         self.name_same = test_support.TESTFN + '-same'
    2:         self.name_diff = test_support.TESTFN + '-diff'
    2:         data = 'Contents of file go here.\n'
    8:         for name in [self.name, self.name_same, self.name_diff]:
    6:             output = open(name, 'w')
    6:             output.write(data)
    6:             output.close()
       
    2:         output = open(self.name_diff, 'a+')
    2:         output.write('An extra line.\n')
    2:         output.close()
    2:         self.dir = tempfile.gettempdir()
       
    1:     def tearDown(self):
    2:         os.unlink(self.name)
    2:         os.unlink(self.name_same)
    2:         os.unlink(self.name_diff)
       
    1:     def test_matching(self):
    1:         self.assertTrue(filecmp.cmp(self.name, self.name_same),
    1:                         "Comparing file to itself fails")
    1:         self.assertTrue(filecmp.cmp(self.name, self.name_same, shallow=False),
    1:                         "Comparing file to itself fails")
    1:         self.assertTrue(filecmp.cmp(self.name, self.name, shallow=False),
    1:                         "Comparing file to identical file fails")
    1:         self.assertTrue(filecmp.cmp(self.name, self.name),
    1:                         "Comparing file to identical file fails")
       
    1:     def test_different(self):
    1:         self.assertFalse(filecmp.cmp(self.name, self.name_diff),
    1:                     "Mismatched files compare as equal")
    1:         self.assertFalse(filecmp.cmp(self.name, self.dir),
    1:                     "File and directory compare as equal")
       
    2: class DirCompareTestCase(unittest.TestCase):
    1:     def setUp(self):
    2:         tmpdir = tempfile.gettempdir()
    2:         self.dir = os.path.join(tmpdir, 'dir')
    2:         self.dir_same = os.path.join(tmpdir, 'dir-same')
    2:         self.dir_diff = os.path.join(tmpdir, 'dir-diff')
    2:         self.caseinsensitive = os.path.normcase('A') == os.path.normcase('a')
    2:         data = 'Contents of file go here.\n'
    8:         for dir in [self.dir, self.dir_same, self.dir_diff]:
    6:             shutil.rmtree(dir, True)
    6:             os.mkdir(dir)
    6:             if self.caseinsensitive and dir is self.dir_same:
>>>>>>                 fn = 'FiLe'     # Verify case-insensitive comparison
                   else:
    6:                 fn = 'file'
    6:             output = open(os.path.join(dir, fn), 'w')
    6:             output.write(data)
    6:             output.close()
       
    2:         output = open(os.path.join(self.dir_diff, 'file2'), 'w')
    2:         output.write('An extra file.\n')
    2:         output.close()
       
    1:     def tearDown(self):
    2:         shutil.rmtree(self.dir)
    2:         shutil.rmtree(self.dir_same)
    2:         shutil.rmtree(self.dir_diff)
       
    1:     def test_cmpfiles(self):
    1:         self.assertTrue(filecmp.cmpfiles(self.dir, self.dir, ['file']) ==
    1:                         (['file'], [], []),
    1:                         "Comparing directory to itself fails")
    1:         self.assertTrue(filecmp.cmpfiles(self.dir, self.dir_same, ['file']) ==
    1:                         (['file'], [], []),
    1:                         "Comparing directory to same fails")
       
               # Try it with shallow=False
    1:         self.assertTrue(filecmp.cmpfiles(self.dir, self.dir, ['file'],
    1:                                          shallow=False) ==
    1:                         (['file'], [], []),
    1:                         "Comparing directory to itself fails")
    1:         self.assertTrue(filecmp.cmpfiles(self.dir, self.dir_same, ['file'],
    1:                                          shallow=False),
    1:                         "Comparing directory to same fails")
       
               # Add different file2
    1:         output = open(os.path.join(self.dir, 'file2'), 'w')
    1:         output.write('Different contents.\n')
    1:         output.close()
       
    1:         self.assertFalse(filecmp.cmpfiles(self.dir, self.dir_same,
    1:                                      ['file', 'file2']) ==
    1:                     (['file'], ['file2'], []),
    1:                     "Comparing mismatched directories fails")
       
       
    1:     def test_dircmp(self):
               # Check attributes for comparison of two identical directories
    1:         d = filecmp.dircmp(self.dir, self.dir_same)
    1:         if self.caseinsensitive:
>>>>>>             self.assertEqual([d.left_list, d.right_list],[['file'], ['FiLe']])
               else:
    1:             self.assertEqual([d.left_list, d.right_list],[['file'], ['file']])
    1:         self.assertTrue(d.common == ['file'])
    1:         self.assertTrue(d.left_only == d.right_only == [])
    1:         self.assertTrue(d.same_files == ['file'])
    1:         self.assertTrue(d.diff_files == [])
       
               # Check attributes for comparison of two different directories
    1:         d = filecmp.dircmp(self.dir, self.dir_diff)
    1:         self.assertTrue(d.left_list == ['file'])
    1:         self.assertTrue(d.right_list == ['file', 'file2'])
    1:         self.assertTrue(d.common == ['file'])
    1:         self.assertTrue(d.left_only == [])
    1:         self.assertTrue(d.right_only == ['file2'])
    1:         self.assertTrue(d.same_files == ['file'])
    1:         self.assertTrue(d.diff_files == [])
       
               # Add different file2
    1:         output = open(os.path.join(self.dir, 'file2'), 'w')
    1:         output.write('Different contents.\n')
    1:         output.close()
    1:         d = filecmp.dircmp(self.dir, self.dir_diff)
    1:         self.assertTrue(d.same_files == ['file'])
    1:         self.assertTrue(d.diff_files == ['file2'])
       
       
    1: def test_main():
    1:     test_support.run_unittest(FileCompareTestCase, DirCompareTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
