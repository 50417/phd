    1: import re
    1: import unittest
    1: import Tkinter as tkinter
       
    2: class AbstractTkTest:
       
    1:     @classmethod
           def setUpClass(cls):
>>>>>>         cls._old_support_default_root = tkinter._support_default_root
>>>>>>         destroy_default_root()
>>>>>>         tkinter.NoDefaultRoot()
>>>>>>         cls.root = tkinter.Tk()
>>>>>>         cls.wantobjects = cls.root.wantobjects()
               # De-maximize main window.
               # Some window managers can maximize new windows.
>>>>>>         cls.root.wm_state('normal')
>>>>>>         try:
>>>>>>             cls.root.wm_attributes('-zoomed', False)
>>>>>>         except tkinter.TclError:
>>>>>>             pass
       
    1:     @classmethod
           def tearDownClass(cls):
>>>>>>         cls.root.update_idletasks()
>>>>>>         cls.root.destroy()
>>>>>>         del cls.root
>>>>>>         tkinter._default_root = None
>>>>>>         tkinter._support_default_root = cls._old_support_default_root
       
    1:     def setUp(self):
>>>>>>         self.root.deiconify()
       
    1:     def tearDown(self):
>>>>>>         for w in self.root.winfo_children():
>>>>>>             w.destroy()
>>>>>>         self.root.withdraw()
       
    1: def destroy_default_root():
>>>>>>     if getattr(tkinter, '_default_root', None):
>>>>>>         tkinter._default_root.update_idletasks()
>>>>>>         tkinter._default_root.destroy()
>>>>>>         tkinter._default_root = None
       
    1: def simulate_mouse_click(widget, x, y):
           """Generate proper events to click at the x, y position (tries to act
           like an X server)."""
>>>>>>     widget.event_generate('<Enter>', x=0, y=0)
>>>>>>     widget.event_generate('<Motion>', x=x, y=y)
>>>>>>     widget.event_generate('<ButtonPress-1>', x=x, y=y)
>>>>>>     widget.event_generate('<ButtonRelease-1>', x=x, y=y)
       
       
    1: import _tkinter
    1: tcl_version = tuple(map(int, _tkinter.TCL_VERSION.split('.')))
       
    1: def requires_tcl(*version):
    2:     return unittest.skipUnless(tcl_version >= version,
    2:             'requires Tcl version >= ' + '.'.join(map(str, version)))
       
    1: _tk_patchlevel = None
    1: def get_tk_patchlevel():
           global _tk_patchlevel
    2:     if _tk_patchlevel is None:
    1:         tcl = tkinter.Tcl()
    1:         patchlevel = tcl.call('info', 'patchlevel')
    1:         m = re.match(r'(\d+)\.(\d+)([ab.])(\d+)$', patchlevel)
    1:         major, minor, releaselevel, serial = m.groups()
    1:         major, minor, serial = int(major), int(minor), int(serial)
    1:         releaselevel = {'a': 'alpha', 'b': 'beta', '.': 'final'}[releaselevel]
    1:         if releaselevel == 'final':
    1:             _tk_patchlevel = major, minor, serial, releaselevel, 0
               else:
>>>>>>             _tk_patchlevel = major, minor, 0, releaselevel, serial
    2:     return _tk_patchlevel
       
    1: units = {
    1:     'c': 72 / 2.54,     # centimeters
    1:     'i': 72,            # inches
    1:     'm': 72 / 25.4,     # millimeters
    1:     'p': 1,             # points
       }
       
    1: def pixels_conv(value):
>>>>>>     return float(value[:-1]) * units[value[-1:]]
       
    1: def tcl_obj_eq(actual, expected):
>>>>>>     if actual == expected:
>>>>>>         return True
>>>>>>     if isinstance(actual, _tkinter.Tcl_Obj):
>>>>>>         if isinstance(expected, str):
>>>>>>             return str(actual) == expected
>>>>>>     if isinstance(actual, tuple):
>>>>>>         if isinstance(expected, tuple):
>>>>>>             return (len(actual) == len(expected) and
>>>>>>                     all(tcl_obj_eq(act, exp)
>>>>>>                         for act, exp in zip(actual, expected)))
>>>>>>     return False
       
    1: def widget_eq(actual, expected):
>>>>>>     if actual == expected:
>>>>>>         return True
>>>>>>     if isinstance(actual, (str, tkinter.Widget)):
>>>>>>         if isinstance(expected, (str, tkinter.Widget)):
>>>>>>             return str(actual) == str(expected)
>>>>>>     return False
