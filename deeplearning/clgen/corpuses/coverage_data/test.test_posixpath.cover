    1: import unittest
    1: from test import test_support, test_genericpath
    1: from test import test_support as support
       
    1: import posixpath
    1: import os
    1: import sys
    1: from posixpath import realpath, abspath, dirname, basename
       
    1: try:
    1:     import posix
>>>>>> except ImportError:
>>>>>>     posix = None
       
       # An absolute path to a temporary filename for testing. We can't rely on TESTFN
       # being an absolute path, so we need this.
       
    1: ABSTFN = abspath(test_support.TESTFN)
       
    1: def skip_if_ABSTFN_contains_backslash(test):
           """
           On Windows, posixpath.abspath still returns paths with backslashes
           instead of posix forward slashes. If this is the case, several tests
           fail, so skip them.
           """
    2:     found_backslash = '\\' in ABSTFN
    2:     msg = "ABSTFN is not a posix path - tests fail"
    2:     return [test, unittest.skip(msg)(test)][found_backslash]
       
    1: def safe_rmdir(dirname):
  172:     try:
  172:         os.rmdir(dirname)
  162:     except OSError:
  162:         pass
       
    2: class PosixPathTest(unittest.TestCase):
       
    1:     def setUp(self):
   27:         self.tearDown()
       
    1:     def tearDown(self):
  216:         for suffix in ["", "1", "2"]:
  162:             test_support.unlink(test_support.TESTFN + suffix)
  162:             safe_rmdir(test_support.TESTFN + suffix)
       
    1:     def test_join(self):
    1:         self.assertEqual(posixpath.join("/foo", "bar", "/bar", "baz"), "/bar/baz")
    1:         self.assertEqual(posixpath.join("/foo", "bar", "baz"), "/foo/bar/baz")
    1:         self.assertEqual(posixpath.join("/foo/", "bar/", "baz/"), "/foo/bar/baz/")
       
    1:     def test_split(self):
    1:         self.assertEqual(posixpath.split("/foo/bar"), ("/foo", "bar"))
    1:         self.assertEqual(posixpath.split("/"), ("/", ""))
    1:         self.assertEqual(posixpath.split("foo"), ("", "foo"))
    1:         self.assertEqual(posixpath.split("////foo"), ("////", "foo"))
    1:         self.assertEqual(posixpath.split("//foo//bar"), ("//foo", "bar"))
       
    1:     def splitextTest(self, path, filename, ext):
   12:         self.assertEqual(posixpath.splitext(path), (filename, ext))
   12:         self.assertEqual(posixpath.splitext("/" + path), ("/" + filename, ext))
   12:         self.assertEqual(posixpath.splitext("abc/" + path), ("abc/" + filename, ext))
   12:         self.assertEqual(posixpath.splitext("abc.def/" + path), ("abc.def/" + filename, ext))
   12:         self.assertEqual(posixpath.splitext("/abc.def/" + path), ("/abc.def/" + filename, ext))
   12:         self.assertEqual(posixpath.splitext(path + "/"), (filename + ext + "/", ""))
       
    1:     def test_splitext(self):
    1:         self.splitextTest("foo.bar", "foo", ".bar")
    1:         self.splitextTest("foo.boo.bar", "foo.boo", ".bar")
    1:         self.splitextTest("foo.boo.biff.bar", "foo.boo.biff", ".bar")
    1:         self.splitextTest(".csh.rc", ".csh", ".rc")
    1:         self.splitextTest("nodots", "nodots", "")
    1:         self.splitextTest(".cshrc", ".cshrc", "")
    1:         self.splitextTest("...manydots", "...manydots", "")
    1:         self.splitextTest("...manydots.ext", "...manydots", ".ext")
    1:         self.splitextTest(".", ".", "")
    1:         self.splitextTest("..", "..", "")
    1:         self.splitextTest("........", "........", "")
    1:         self.splitextTest("", "", "")
       
    1:     def test_isabs(self):
    1:         self.assertIs(posixpath.isabs(""), False)
    1:         self.assertIs(posixpath.isabs("/"), True)
    1:         self.assertIs(posixpath.isabs("/foo"), True)
    1:         self.assertIs(posixpath.isabs("/foo/bar"), True)
    1:         self.assertIs(posixpath.isabs("foo/bar"), False)
       
    1:     def test_basename(self):
    1:         self.assertEqual(posixpath.basename("/foo/bar"), "bar")
    1:         self.assertEqual(posixpath.basename("/"), "")
    1:         self.assertEqual(posixpath.basename("foo"), "foo")
    1:         self.assertEqual(posixpath.basename("////foo"), "foo")
    1:         self.assertEqual(posixpath.basename("//foo//bar"), "bar")
       
    1:     def test_dirname(self):
    1:         self.assertEqual(posixpath.dirname("/foo/bar"), "/foo")
    1:         self.assertEqual(posixpath.dirname("/"), "/")
    1:         self.assertEqual(posixpath.dirname("foo"), "")
    1:         self.assertEqual(posixpath.dirname("////foo"), "////")
    1:         self.assertEqual(posixpath.dirname("//foo//bar"), "//foo")
       
    1:     def test_islink(self):
    1:         self.assertIs(posixpath.islink(test_support.TESTFN + "1"), False)
    1:         f = open(test_support.TESTFN + "1", "wb")
    1:         try:
    1:             f.write("foo")
    1:             f.close()
    1:             self.assertIs(posixpath.islink(test_support.TESTFN + "1"), False)
    1:             if hasattr(os, 'symlink'):
    1:                 os.symlink(test_support.TESTFN + "1", test_support.TESTFN + "2")
    1:                 self.assertIs(posixpath.islink(test_support.TESTFN + "2"), True)
    1:                 os.remove(test_support.TESTFN + "1")
    1:                 self.assertIs(posixpath.islink(test_support.TESTFN + "2"), True)
    1:                 self.assertIs(posixpath.exists(test_support.TESTFN + "2"), False)
    1:                 self.assertIs(posixpath.lexists(test_support.TESTFN + "2"), True)
               finally:
    1:             if not f.close():
    1:                 f.close()
       
    1:     def test_samefile(self):
    1:         f = open(test_support.TESTFN + "1", "wb")
    1:         try:
    1:             f.write("foo")
    1:             f.close()
    1:             self.assertIs(
    1:                 posixpath.samefile(
    1:                     test_support.TESTFN + "1",
    1:                     test_support.TESTFN + "1"
                       ),
    1:                 True
                   )
       
                   # If we don't have links, assume that os.stat doesn't return
                   # reasonable inode information and thus, that samefile() doesn't
                   # work.
    1:             if hasattr(os, "symlink"):
    1:                 os.symlink(
    1:                     test_support.TESTFN + "1",
    1:                     test_support.TESTFN + "2"
                       )
    1:                 self.assertIs(
    1:                     posixpath.samefile(
    1:                         test_support.TESTFN + "1",
    1:                         test_support.TESTFN + "2"
                           ),
    1:                     True
                       )
    1:                 os.remove(test_support.TESTFN + "2")
    1:                 f = open(test_support.TESTFN + "2", "wb")
    1:                 f.write("bar")
    1:                 f.close()
    1:                 self.assertIs(
    1:                     posixpath.samefile(
    1:                         test_support.TESTFN + "1",
    1:                         test_support.TESTFN + "2"
                           ),
    1:                     False
                       )
               finally:
    1:             if not f.close():
    1:                 f.close()
       
    1:     def test_samestat(self):
    1:         f = open(test_support.TESTFN + "1", "wb")
    1:         try:
    1:             f.write("foo")
    1:             f.close()
    1:             self.assertIs(
    1:                 posixpath.samestat(
    1:                     os.stat(test_support.TESTFN + "1"),
    1:                     os.stat(test_support.TESTFN + "1")
                       ),
    1:                 True
                   )
                   # If we don't have links, assume that os.stat() doesn't return
                   # reasonable inode information and thus, that samestat() doesn't
                   # work.
    1:             if hasattr(os, "symlink"):
    1:                 os.symlink(test_support.TESTFN + "1", test_support.TESTFN + "2")
    1:                 self.assertIs(
    1:                     posixpath.samestat(
    1:                         os.stat(test_support.TESTFN + "1"),
    1:                         os.stat(test_support.TESTFN + "2")
                           ),
    1:                     True
                       )
    1:                 os.remove(test_support.TESTFN + "2")
    1:                 f = open(test_support.TESTFN + "2", "wb")
    1:                 f.write("bar")
    1:                 f.close()
    1:                 self.assertIs(
    1:                     posixpath.samestat(
    1:                         os.stat(test_support.TESTFN + "1"),
    1:                         os.stat(test_support.TESTFN + "2")
                           ),
    1:                     False
                       )
               finally:
    1:             if not f.close():
    1:                 f.close()
       
    1:     def test_ismount(self):
    1:         self.assertIs(posixpath.ismount("/"), True)
       
    1:     def test_ismount_non_existent(self):
               # Non-existent mountpoint.
    1:         self.assertIs(posixpath.ismount(ABSTFN), False)
    1:         try:
    1:             os.mkdir(ABSTFN)
    1:             self.assertIs(posixpath.ismount(ABSTFN), False)
               finally:
    1:             safe_rmdir(ABSTFN)
       
    1:     @unittest.skipUnless(hasattr(os, 'symlink'),
    1:                          'Requires functional symlink implementation')
           def test_ismount_symlinks(self):
               # Symlinks are never mountpoints.
    1:         try:
    1:             os.symlink("/", ABSTFN)
    1:             self.assertIs(posixpath.ismount(ABSTFN), False)
               finally:
    1:             os.unlink(ABSTFN)
       
    1:     @unittest.skipIf(posix is None, "Test requires posix module")
           def test_ismount_different_device(self):
               # Simulate the path being on a different device from its parent by
               # mocking out st_dev.
    1:         save_lstat = os.lstat
    1:         def fake_lstat(path):
   11:             st_ino = 0
   11:             st_dev = 0
   11:             if path == ABSTFN:
    3:                 st_dev = 1
    3:                 st_ino = 1
   11:             return posix.stat_result((0, st_ino, st_dev, 0, 0, 0, 0, 0, 0, 0))
    1:         try:
    1:             os.lstat = fake_lstat
    1:             self.assertIs(posixpath.ismount(ABSTFN), True)
               finally:
    1:             os.lstat = save_lstat
       
    1:     @unittest.skipIf(posix is None, "Test requires posix module")
           def test_ismount_directory_not_readable(self):
               # issue #2466: Simulate ismount run on a directory that is not
               # readable, which used to return False.
    1:         save_lstat = os.lstat
    1:         def fake_lstat(path):
   11:             st_ino = 0
   11:             st_dev = 0
   11:             if path.startswith(ABSTFN) and path != ABSTFN:
                       # ismount tries to read something inside the ABSTFN directory;
                       # simulate this being forbidden (no read permission).
>>>>>>                 raise OSError("Fake [Errno 13] Permission denied")
   11:             if path == ABSTFN:
    3:                 st_dev = 1
    3:                 st_ino = 1
   11:             return posix.stat_result((0, st_ino, st_dev, 0, 0, 0, 0, 0, 0, 0))
    1:         try:
    1:             os.lstat = fake_lstat
    1:             self.assertIs(posixpath.ismount(ABSTFN), True)
               finally:
    1:             os.lstat = save_lstat
       
    1:     def test_expanduser(self):
    1:         self.assertEqual(posixpath.expanduser("foo"), "foo")
    1:         with test_support.EnvironmentVarGuard() as env:
    5:             for home in '/', '', '//', '///':
    4:                 env['HOME'] = home
    4:                 self.assertEqual(posixpath.expanduser("~"), "/")
    4:                 self.assertEqual(posixpath.expanduser("~/"), "/")
    4:                 self.assertEqual(posixpath.expanduser("~/foo"), "/foo")
    1:         try:
    1:             import pwd
>>>>>>         except ImportError:
>>>>>>             pass
               else:
    1:             self.assertIsInstance(posixpath.expanduser("~/"), basestring)
                   # if home directory == root directory, this test makes no sense
    1:             if posixpath.expanduser("~") != '/':
    1:                 self.assertEqual(
    1:                     posixpath.expanduser("~") + "/",
    1:                     posixpath.expanduser("~/")
                       )
    1:             self.assertIsInstance(posixpath.expanduser("~root/"), basestring)
    1:             self.assertIsInstance(posixpath.expanduser("~foo/"), basestring)
       
    1:             with test_support.EnvironmentVarGuard() as env:
                       # expanduser should fall back to using the password database
    1:                 del env['HOME']
    1:                 home = pwd.getpwuid(os.getuid()).pw_dir
                       # $HOME can end with a trailing /, so strip it (see #17809)
    1:                 home = home.rstrip("/") or '/'
    1:                 self.assertEqual(posixpath.expanduser("~"), home)
       
    1:     def test_normpath(self):
    1:         self.assertEqual(posixpath.normpath(""), ".")
    1:         self.assertEqual(posixpath.normpath("/"), "/")
    1:         self.assertEqual(posixpath.normpath("//"), "//")
    1:         self.assertEqual(posixpath.normpath("///"), "/")
    1:         self.assertEqual(posixpath.normpath("///foo/.//bar//"), "/foo/bar")
    1:         self.assertEqual(posixpath.normpath("///foo/.//bar//.//..//.//baz"), "/foo/baz")
    1:         self.assertEqual(posixpath.normpath("///..//./foo/.//bar"), "/foo/bar")
       
    1:     @skip_if_ABSTFN_contains_backslash
           def test_realpath_curdir(self):
    1:         self.assertEqual(realpath('.'), os.getcwd())
    1:         self.assertEqual(realpath('./.'), os.getcwd())
    1:         self.assertEqual(realpath('/'.join(['.'] * 100)), os.getcwd())
       
    1:     @skip_if_ABSTFN_contains_backslash
           def test_realpath_pardir(self):
    1:         self.assertEqual(realpath('..'), dirname(os.getcwd()))
    1:         self.assertEqual(realpath('../..'), dirname(dirname(os.getcwd())))
    1:         self.assertEqual(realpath('/'.join(['..'] * 100)), '/')
       
    1:     if hasattr(os, "symlink"):
    1:         def test_realpath_basic(self):
                   # Basic operation.
    1:             try:
    1:                 os.symlink(ABSTFN+"1", ABSTFN)
    1:                 self.assertEqual(realpath(ABSTFN), ABSTFN+"1")
                   finally:
    1:                 test_support.unlink(ABSTFN)
       
    1:         def test_realpath_symlink_loops(self):
                   # Bug #930024, return the path unchanged if we get into an infinite
                   # symlink loop.
    1:             try:
    1:                 os.symlink(ABSTFN, ABSTFN)
    1:                 self.assertEqual(realpath(ABSTFN), ABSTFN)
       
    1:                 os.symlink(ABSTFN+"1", ABSTFN+"2")
    1:                 os.symlink(ABSTFN+"2", ABSTFN+"1")
    1:                 self.assertEqual(realpath(ABSTFN+"1"), ABSTFN+"1")
    1:                 self.assertEqual(realpath(ABSTFN+"2"), ABSTFN+"2")
       
    1:                 self.assertEqual(realpath(ABSTFN+"1/x"), ABSTFN+"1/x")
    1:                 self.assertEqual(realpath(ABSTFN+"1/.."), dirname(ABSTFN))
    1:                 self.assertEqual(realpath(ABSTFN+"1/../x"), dirname(ABSTFN) + "/x")
    1:                 os.symlink(ABSTFN+"x", ABSTFN+"y")
    1:                 self.assertEqual(realpath(ABSTFN+"1/../" + basename(ABSTFN) + "y"),
    1:                                 ABSTFN + "y")
    1:                 self.assertEqual(realpath(ABSTFN+"1/../" + basename(ABSTFN) + "1"),
    1:                                 ABSTFN + "1")
       
    1:                 os.symlink(basename(ABSTFN) + "a/b", ABSTFN+"a")
    1:                 self.assertEqual(realpath(ABSTFN+"a"), ABSTFN+"a/b")
       
    1:                 os.symlink("../" + basename(dirname(ABSTFN)) + "/" +
    1:                         basename(ABSTFN) + "c", ABSTFN+"c")
    1:                 self.assertEqual(realpath(ABSTFN+"c"), ABSTFN+"c")
       
                       # Test using relative path as well.
    1:                 with support.change_cwd(dirname(ABSTFN)):
    1:                     self.assertEqual(realpath(basename(ABSTFN)), ABSTFN)
                   finally:
    1:                 test_support.unlink(ABSTFN)
    1:                 test_support.unlink(ABSTFN+"1")
    1:                 test_support.unlink(ABSTFN+"2")
    1:                 test_support.unlink(ABSTFN+"y")
    1:                 test_support.unlink(ABSTFN+"c")
    1:                 test_support.unlink(ABSTFN+"a")
       
    1:         def test_realpath_repeated_indirect_symlinks(self):
                   # Issue #6975.
    1:             try:
    1:                 os.mkdir(ABSTFN)
    1:                 os.symlink('../' + basename(ABSTFN), ABSTFN + '/self')
    1:                 os.symlink('self/self/self', ABSTFN + '/link')
    1:                 self.assertEqual(realpath(ABSTFN + '/link'), ABSTFN)
                   finally:
    1:                 test_support.unlink(ABSTFN + '/self')
    1:                 test_support.unlink(ABSTFN + '/link')
    1:                 safe_rmdir(ABSTFN)
       
    1:         def test_realpath_deep_recursion(self):
    1:             depth = 10
    1:             try:
    1:                 os.mkdir(ABSTFN)
   11:                 for i in range(depth):
   10:                     os.symlink('/'.join(['%d' % i] * 10), ABSTFN + '/%d' % (i + 1))
    1:                 os.symlink('.', ABSTFN + '/0')
    1:                 self.assertEqual(realpath(ABSTFN + '/%d' % depth), ABSTFN)
       
                       # Test using relative path as well.
    1:                 with support.change_cwd(ABSTFN):
    1:                     self.assertEqual(realpath('%d' % depth), ABSTFN)
                   finally:
   12:                 for i in range(depth + 1):
   11:                     test_support.unlink(ABSTFN + '/%d' % i)
    1:                 safe_rmdir(ABSTFN)
       
    1:         def test_realpath_resolve_parents(self):
                   # We also need to resolve any symlinks in the parents of a relative
                   # path passed to realpath. E.g.: current working directory is
                   # /usr/doc with 'doc' being a symlink to /usr/share/doc. We call
                   # realpath("a"). This should return /usr/share/doc/a/.
    1:             try:
    1:                 os.mkdir(ABSTFN)
    1:                 os.mkdir(ABSTFN + "/y")
    1:                 os.symlink(ABSTFN + "/y", ABSTFN + "/k")
       
    1:                 with support.change_cwd(ABSTFN + "/k"):
    1:                     self.assertEqual(realpath("a"), ABSTFN + "/y/a")
                   finally:
    1:                 test_support.unlink(ABSTFN + "/k")
    1:                 safe_rmdir(ABSTFN + "/y")
    1:                 safe_rmdir(ABSTFN)
       
    1:         def test_realpath_resolve_before_normalizing(self):
                   # Bug #990669: Symbolic links should be resolved before we
                   # normalize the path. E.g.: if we have directories 'a', 'k' and 'y'
                   # in the following hierarchy:
                   # a/k/y
                   #
                   # and a symbolic link 'link-y' pointing to 'y' in directory 'a',
                   # then realpath("link-y/..") should return 'k', not 'a'.
    1:             try:
    1:                 os.mkdir(ABSTFN)
    1:                 os.mkdir(ABSTFN + "/k")
    1:                 os.mkdir(ABSTFN + "/k/y")
    1:                 os.symlink(ABSTFN + "/k/y", ABSTFN + "/link-y")
       
                       # Absolute path.
    1:                 self.assertEqual(realpath(ABSTFN + "/link-y/.."), ABSTFN + "/k")
                       # Relative path.
    1:                 with support.change_cwd(dirname(ABSTFN)):
    1:                     self.assertEqual(realpath(basename(ABSTFN) + "/link-y/.."),
    1:                                      ABSTFN + "/k")
                   finally:
    1:                 test_support.unlink(ABSTFN + "/link-y")
    1:                 safe_rmdir(ABSTFN + "/k/y")
    1:                 safe_rmdir(ABSTFN + "/k")
    1:                 safe_rmdir(ABSTFN)
       
    1:         def test_realpath_resolve_first(self):
                   # Bug #1213894: The first component of the path, if not absolute,
                   # must be resolved too.
       
    1:             try:
    1:                 os.mkdir(ABSTFN)
    1:                 os.mkdir(ABSTFN + "/k")
    1:                 os.symlink(ABSTFN, ABSTFN + "link")
    1:                 with support.change_cwd(dirname(ABSTFN)):
    1:                     base = basename(ABSTFN)
    1:                     self.assertEqual(realpath(base + "link"), ABSTFN)
    1:                     self.assertEqual(realpath(base + "link/k"), ABSTFN + "/k")
                   finally:
    1:                 test_support.unlink(ABSTFN + "link")
    1:                 safe_rmdir(ABSTFN + "/k")
    1:                 safe_rmdir(ABSTFN)
       
    1:     def test_relpath(self):
   18:         (real_getcwd, os.getcwd) = (os.getcwd, lambda: r"/home/user/bar")
    1:         try:
    1:             curdir = os.path.split(os.getcwd())[-1]
    1:             self.assertRaises(ValueError, posixpath.relpath, "")
    1:             self.assertEqual(posixpath.relpath("a"), "a")
    1:             self.assertEqual(posixpath.relpath(posixpath.abspath("a")), "a")
    1:             self.assertEqual(posixpath.relpath("a/b"), "a/b")
    1:             self.assertEqual(posixpath.relpath("../a/b"), "../a/b")
    1:             self.assertEqual(posixpath.relpath("a", "../b"), "../"+curdir+"/a")
    1:             self.assertEqual(posixpath.relpath("a/b", "../c"), "../"+curdir+"/a/b")
    1:             self.assertEqual(posixpath.relpath("a", "b/c"), "../../a")
    1:             self.assertEqual(posixpath.relpath("a", "a"), ".")
    1:             self.assertEqual(posixpath.relpath("/foo/bar/bat", "/x/y/z"), '../../../foo/bar/bat')
    1:             self.assertEqual(posixpath.relpath("/foo/bar/bat", "/foo/bar"), 'bat')
    1:             self.assertEqual(posixpath.relpath("/foo/bar/bat", "/"), 'foo/bar/bat')
    1:             self.assertEqual(posixpath.relpath("/", "/foo/bar/bat"), '../../..')
    1:             self.assertEqual(posixpath.relpath("/foo/bar/bat", "/x"), '../foo/bar/bat')
    1:             self.assertEqual(posixpath.relpath("/x", "/foo/bar/bat"), '../../../x')
    1:             self.assertEqual(posixpath.relpath("/", "/"), '.')
    1:             self.assertEqual(posixpath.relpath("/a", "/a"), '.')
    1:             self.assertEqual(posixpath.relpath("/a/b", "/a/b"), '.')
               finally:
    1:             os.getcwd = real_getcwd
       
    1:     @test_support.requires_unicode
           def test_expandvars_nonascii_word(self):
    1:         encoding = sys.getfilesystemencoding()
               # Non-ASCII word characters
    1:         letters = test_support.u(r'\xe6\u0130\u0141\u03c6\u041a\u05d0\u062a\u0e01')
    1:         uwnonascii = letters.encode(encoding, 'ignore').decode(encoding)[:3]
    1:         swnonascii = uwnonascii.encode(encoding)
    1:         if not swnonascii:
>>>>>>             self.skipTest('Needs non-ASCII word characters')
    1:         with test_support.EnvironmentVarGuard() as env:
    1:             env.clear()
    1:             env[swnonascii] = 'baz' + swnonascii
    1:             self.assertEqual(posixpath.expandvars(u'$%s bar' % uwnonascii),
    1:                              u'baz%s bar' % uwnonascii)
       
       
    2: class PosixCommonTest(test_genericpath.CommonTest):
    1:     pathmodule = posixpath
    1:     attributes = ['relpath', 'samefile', 'sameopenfile', 'samestat']
       
       
    1: def test_main():
    1:     test_support.run_unittest(PosixPathTest, PosixCommonTest)
       
       
    1: if __name__=="__main__":
>>>>>>     test_main()
