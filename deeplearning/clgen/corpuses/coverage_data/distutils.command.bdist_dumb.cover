       """distutils.command.bdist_dumb
       
       Implements the Distutils 'bdist_dumb' command (create a "dumb" built
       distribution -- i.e., just an archive to be unpacked under $prefix or
    1: $exec_prefix)."""
       
    1: __revision__ = "$Id$"
       
    1: import os
       
    1: from sysconfig import get_python_version
       
    1: from distutils.util import get_platform
    1: from distutils.core import Command
    1: from distutils.dir_util import remove_tree, ensure_relative
    1: from distutils.errors import DistutilsPlatformError
    1: from distutils import log
       
    2: class bdist_dumb (Command):
       
    1:     description = 'create a "dumb" built distribution'
       
           user_options = [('bdist-dir=', 'd',
    1:                      "temporary directory for creating the distribution"),
    1:                     ('plat-name=', 'p',
    1:                      "platform name to embed in generated filenames "
    1:                      "(default: %s)" % get_platform()),
                           ('format=', 'f',
    1:                      "archive format to create (tar, ztar, gztar, zip)"),
    1:                     ('keep-temp', 'k',
    1:                      "keep the pseudo-installation tree around after " +
    1:                      "creating the distribution archive"),
                           ('dist-dir=', 'd',
    1:                      "directory to put final built distributions in"),
                           ('skip-build', None,
    1:                      "skip rebuilding everything (for testing/debugging)"),
                           ('relative', None,
    1:                      "build the archive using relative paths"
                            "(default: false)"),
                           ('owner=', 'u',
    1:                      "Owner name used when creating a tar file"
                            " [default: current user]"),
                           ('group=', 'g',
    1:                      "Group name used when creating a tar file"
                            " [default: current group]"),
                          ]
       
    1:     boolean_options = ['keep-temp', 'skip-build', 'relative']
       
    1:     default_format = { 'posix': 'gztar',
    1:                        'nt': 'zip',
    1:                        'os2': 'zip' }
       
       
    1:     def initialize_options (self):
    3:         self.bdist_dir = None
    3:         self.plat_name = None
    3:         self.format = None
    3:         self.keep_temp = 0
    3:         self.dist_dir = None
    3:         self.skip_build = None
    3:         self.relative = 0
    3:         self.owner = None
    3:         self.group = None
       
    1:     def finalize_options(self):
    3:         if self.bdist_dir is None:
    3:             bdist_base = self.get_finalized_command('bdist').bdist_base
    3:             self.bdist_dir = os.path.join(bdist_base, 'dumb')
       
    3:         if self.format is None:
    2:             try:
    2:                 self.format = self.default_format[os.name]
>>>>>>             except KeyError:
>>>>>>                 raise DistutilsPlatformError, \
>>>>>>                       ("don't know how to create dumb built distributions " +
>>>>>>                        "on platform %s") % os.name
       
    3:         self.set_undefined_options('bdist',
    3:                                    ('dist_dir', 'dist_dir'),
    3:                                    ('plat_name', 'plat_name'),
    3:                                    ('skip_build', 'skip_build'))
       
    1:     def run(self):
    1:         if not self.skip_build:
    1:             self.run_command('build')
       
    1:         install = self.reinitialize_command('install', reinit_subcommands=1)
    1:         install.root = self.bdist_dir
    1:         install.skip_build = self.skip_build
    1:         install.warn_dir = 0
       
    1:         log.info("installing to %s" % self.bdist_dir)
    1:         self.run_command('install')
       
               # And make an archive relative to the root of the
               # pseudo-installation tree.
    1:         archive_basename = "%s.%s" % (self.distribution.get_fullname(),
    1:                                       self.plat_name)
       
               # OS/2 objects to any ":" characters in a filename (such as when
               # a timestamp is used in a version) so change them to hyphens.
    1:         if os.name == "os2":
>>>>>>             archive_basename = archive_basename.replace(":", "-")
       
    1:         pseudoinstall_root = os.path.join(self.dist_dir, archive_basename)
    1:         if not self.relative:
    1:             archive_root = self.bdist_dir
               else:
>>>>>>             if (self.distribution.has_ext_modules() and
>>>>>>                 (install.install_base != install.install_platbase)):
>>>>>>                 raise DistutilsPlatformError, \
>>>>>>                       ("can't make a dumb built distribution where "
                              "base and platbase are different (%s, %s)"
>>>>>>                        % (repr(install.install_base),
>>>>>>                           repr(install.install_platbase)))
                   else:
>>>>>>                 archive_root = os.path.join(self.bdist_dir,
>>>>>>                                    ensure_relative(install.install_base))
       
               # Make the archive
    1:         filename = self.make_archive(pseudoinstall_root,
    1:                                      self.format, root_dir=archive_root,
    1:                                      owner=self.owner, group=self.group)
    1:         if self.distribution.has_ext_modules():
>>>>>>             pyversion = get_python_version()
               else:
    1:             pyversion = 'any'
    1:         self.distribution.dist_files.append(('bdist_dumb', pyversion,
    1:                                              filename))
       
    1:         if not self.keep_temp:
    1:             remove_tree(self.bdist_dir, dry_run=self.dry_run)
