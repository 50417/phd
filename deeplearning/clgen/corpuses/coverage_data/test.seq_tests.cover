       """
       Tests common to tuple, list and UserList.UserList
    1: """
       
    1: import unittest
    1: import sys
    1: from test import test_support as support
       
       # Various iterables
       # This is used for checking the constructor (here and in test_deque.py)
    1: def iterfunc(seqn):
           'Regular generator'
10500:     for i in seqn:
10450:         yield i
       
    2: class Sequence:
    1:     'Sequence using __getitem__'
    1:     def __init__(self, seqn):
   50:         self.seqn = seqn
    1:     def __getitem__(self, i):
10500:         return self.seqn[i]
       
    2: class IterFunc:
    1:     'Sequence using iterator protocol'
    1:     def __init__(self, seqn):
   25:         self.seqn = seqn
   25:         self.i = 0
    1:     def __iter__(self):
   25:         return self
    1:     def next(self):
 5250:         if self.i >= len(self.seqn): raise StopIteration
 5225:         v = self.seqn[self.i]
 5225:         self.i += 1
 5225:         return v
       
    2: class IterGen:
    1:     'Sequence using iterator protocol defined with a generator'
    1:     def __init__(self, seqn):
   50:         self.seqn = seqn
   50:         self.i = 0
    1:     def __iter__(self):
10500:         for val in self.seqn:
10450:             yield val
       
    2: class IterNextOnly:
    1:     'Missing __getitem__ and __iter__'
    1:     def __init__(self, seqn):
   20:         self.seqn = seqn
   20:         self.i = 0
    1:     def next(self):
>>>>>>         if self.i >= len(self.seqn): raise StopIteration
>>>>>>         v = self.seqn[self.i]
>>>>>>         self.i += 1
>>>>>>         return v
       
    2: class IterNoNext:
    1:     'Iterator missing next()'
    1:     def __init__(self, seqn):
   20:         self.seqn = seqn
   20:         self.i = 0
    1:     def __iter__(self):
   20:         return self
       
    2: class IterGenExc:
    1:     'Test propagation of exceptions'
    1:     def __init__(self, seqn):
   20:         self.seqn = seqn
   20:         self.i = 0
    1:     def __iter__(self):
   20:         return self
    1:     def next(self):
   20:         3 // 0
       
    2: class IterFuncStop:
    1:     'Test immediate stop'
    1:     def __init__(self, seqn):
   25:         pass
    1:     def __iter__(self):
   25:         return self
    1:     def next(self):
   25:         raise StopIteration
       
    1: from itertools import chain, imap
    1: def itermulti(seqn):
           'Test multiple tiers of iterators'
 5250:     return chain(imap(lambda x:x, iterfunc(IterGen(Sequence(seqn)))))
       
    2: class LyingTuple(tuple):
    1:     def __iter__(self):
    3:         yield 1
       
    2: class LyingList(list):
    1:     def __iter__(self):
    3:         yield 1
       
    2: class CommonTest(unittest.TestCase):
           # The type to be tested
    1:     type2test = None
       
    1:     def test_constructors(self):
    3:         l0 = []
    3:         l1 = [0]
    3:         l2 = [0, 1]
       
    3:         u = self.type2test()
    3:         u0 = self.type2test(l0)
    3:         u1 = self.type2test(l1)
    3:         u2 = self.type2test(l2)
       
    3:         uu = self.type2test(u)
    3:         uu0 = self.type2test(u0)
    3:         uu1 = self.type2test(u1)
    3:         uu2 = self.type2test(u2)
       
    3:         v = self.type2test(tuple(u))
    6:         class OtherSeq:
    3:             def __init__(self, initseq):
    3:                 self.__data = initseq
    3:             def __len__(self):
    6:                 return len(self.__data)
    3:             def __getitem__(self, i):
    3:                 return self.__data[i]
    3:         s = OtherSeq(u0)
    3:         v0 = self.type2test(s)
    3:         self.assertEqual(len(v0), len(s))
       
    3:         s = "this is also a sequence"
    3:         vv = self.type2test(s)
    3:         self.assertEqual(len(vv), len(s))
       
               # Create from various iteratables
   18:         for s in ("123", "", range(1000), ('do', 1.2), xrange(2000,2200,5)):
   15:             for g in (Sequence, IterFunc, IterGen,
   90:                       itermulti, iterfunc):
   75:                 self.assertEqual(self.type2test(g(s)), self.type2test(s))
   15:             self.assertEqual(self.type2test(IterFuncStop(s)), self.type2test())
   75:             self.assertEqual(self.type2test(c for c in "123"), self.type2test("123"))
   15:             self.assertRaises(TypeError, self.type2test, IterNextOnly(s))
   15:             self.assertRaises(TypeError, self.type2test, IterNoNext(s))
   15:             self.assertRaises(ZeroDivisionError, self.type2test, IterGenExc(s))
       
               # Issue #23757
    3:         self.assertEqual(self.type2test(LyingTuple((2,))), self.type2test((1,)))
    3:         self.assertEqual(self.type2test(LyingList([2])), self.type2test([1]))
       
    1:     def test_truth(self):
    3:         self.assertFalse(self.type2test())
    3:         self.assertTrue(self.type2test([42]))
       
    1:     def test_getitem(self):
    3:         u = self.type2test([0, 1, 2, 3, 4])
   18:         for i in xrange(len(u)):
   15:             self.assertEqual(u[i], i)
   15:             self.assertEqual(u[long(i)], i)
   15:         for i in xrange(-len(u), -1):
   12:             self.assertEqual(u[i], len(u)+i)
   12:             self.assertEqual(u[long(i)], len(u)+i)
    3:         self.assertRaises(IndexError, u.__getitem__, -len(u)-1)
    3:         self.assertRaises(IndexError, u.__getitem__, len(u))
    3:         self.assertRaises(ValueError, u.__getitem__, slice(0,10,0))
       
    3:         u = self.type2test()
    3:         self.assertRaises(IndexError, u.__getitem__, 0)
    3:         self.assertRaises(IndexError, u.__getitem__, -1)
       
    3:         self.assertRaises(TypeError, u.__getitem__)
       
    3:         a = self.type2test([10, 11])
    3:         self.assertEqual(a[0], 10)
    3:         self.assertEqual(a[1], 11)
    3:         self.assertEqual(a[-2], 10)
    3:         self.assertEqual(a[-1], 11)
    3:         self.assertRaises(IndexError, a.__getitem__, -3)
    3:         self.assertRaises(IndexError, a.__getitem__, 3)
       
    1:     def test_getslice(self):
    3:         l = [0, 1, 2, 3, 4]
    3:         u = self.type2test(l)
       
    3:         self.assertEqual(u[0:0], self.type2test())
    3:         self.assertEqual(u[1:2], self.type2test([1]))
    3:         self.assertEqual(u[-2:-1], self.type2test([3]))
    3:         self.assertEqual(u[-1000:1000], u)
    3:         self.assertEqual(u[1000:-1000], self.type2test([]))
    3:         self.assertEqual(u[:], u)
    3:         self.assertEqual(u[1:None], self.type2test([1, 2, 3, 4]))
    3:         self.assertEqual(u[None:3], self.type2test([0, 1, 2]))
       
               # Extended slices
    3:         self.assertEqual(u[::], u)
    3:         self.assertEqual(u[::2], self.type2test([0, 2, 4]))
    3:         self.assertEqual(u[1::2], self.type2test([1, 3]))
    3:         self.assertEqual(u[::-1], self.type2test([4, 3, 2, 1, 0]))
    3:         self.assertEqual(u[::-2], self.type2test([4, 2, 0]))
    3:         self.assertEqual(u[3::-2], self.type2test([3, 1]))
    3:         self.assertEqual(u[3:3:-2], self.type2test([]))
    3:         self.assertEqual(u[3:2:-2], self.type2test([3]))
    3:         self.assertEqual(u[3:1:-2], self.type2test([3]))
    3:         self.assertEqual(u[3:0:-2], self.type2test([3, 1]))
    3:         self.assertEqual(u[::-100], self.type2test([4]))
    3:         self.assertEqual(u[100:-100:], self.type2test([]))
    3:         self.assertEqual(u[-100:100:], u)
    3:         self.assertEqual(u[100:-100:-1], u[::-1])
    3:         self.assertEqual(u[-100:100:-1], self.type2test([]))
    3:         self.assertEqual(u[-100L:100L:2L], self.type2test([0, 2, 4]))
       
               # Test extreme cases with long ints
    3:         a = self.type2test([0,1,2,3,4])
    3:         self.assertEqual(a[ -pow(2,128L): 3 ], self.type2test([0,1,2]))
    3:         self.assertEqual(a[ 3: pow(2,145L) ], self.type2test([3,4]))
       
    3:         self.assertRaises(TypeError, u.__getslice__)
       
    1:     def test_contains(self):
    3:         u = self.type2test([0, 1, 2])
   12:         for i in u:
    9:             self.assertIn(i, u)
    9:         for i in min(u)-1, max(u)+1:
    6:             self.assertNotIn(i, u)
       
    3:         self.assertRaises(TypeError, u.__contains__)
       
    1:     def test_contains_fake(self):
    6:         class AllEq:
                   # Sequences must use rich comparison against each item
                   # (unless "is" is true, or an earlier item answered)
                   # So instances of AllEq must be found in all non-empty sequences.
    3:             def __eq__(self, other):
    3:                 return True
    3:             __hash__ = None # Can't meet hash invariant requirements
    3:         self.assertNotIn(AllEq(), self.type2test([]))
    3:         self.assertIn(AllEq(), self.type2test([1]))
       
    1:     def test_contains_order(self):
               # Sequences must test in-order.  If a rich comparison has side
               # effects, these will be visible to tests against later members.
               # In this test, the "side effect" is a short-circuiting raise.
    6:         class DoNotTestEq(Exception):
    3:             pass
    6:         class StopCompares:
    3:             def __eq__(self, other):
    3:                 raise DoNotTestEq
       
    3:         checkfirst = self.type2test([1, StopCompares()])
    3:         self.assertIn(1, checkfirst)
    3:         checklast = self.type2test([StopCompares(), 1])
    3:         self.assertRaises(DoNotTestEq, checklast.__contains__, 1)
       
    1:     def test_len(self):
    3:         self.assertEqual(len(self.type2test()), 0)
    3:         self.assertEqual(len(self.type2test([])), 0)
    3:         self.assertEqual(len(self.type2test([0])), 1)
    3:         self.assertEqual(len(self.type2test([0, 1, 2])), 3)
       
    1:     def test_minmax(self):
    3:         u = self.type2test([0, 1, 2])
    3:         self.assertEqual(min(u), 0)
    3:         self.assertEqual(max(u), 2)
       
    1:     def test_addmul(self):
    3:         u1 = self.type2test([0])
    3:         u2 = self.type2test([0, 1])
    3:         self.assertEqual(u1, u1 + self.type2test())
    3:         self.assertEqual(u1, self.type2test() + u1)
    3:         self.assertEqual(u1 + self.type2test([1]), u2)
    3:         self.assertEqual(self.type2test([-1]) + u1, self.type2test([-1, 0]))
    3:         self.assertEqual(self.type2test(), u2*0)
    3:         self.assertEqual(self.type2test(), 0*u2)
    3:         self.assertEqual(self.type2test(), u2*0L)
    3:         self.assertEqual(self.type2test(), 0L*u2)
    3:         self.assertEqual(u2, u2*1)
    3:         self.assertEqual(u2, 1*u2)
    3:         self.assertEqual(u2, u2*1L)
    3:         self.assertEqual(u2, 1L*u2)
    3:         self.assertEqual(u2+u2, u2*2)
    3:         self.assertEqual(u2+u2, 2*u2)
    3:         self.assertEqual(u2+u2, u2*2L)
    3:         self.assertEqual(u2+u2, 2L*u2)
    3:         self.assertEqual(u2+u2+u2, u2*3)
    3:         self.assertEqual(u2+u2+u2, 3*u2)
       
    6:         class subclass(self.type2test):
    3:             pass
    3:         u3 = subclass([0, 1])
    3:         self.assertEqual(u3, u3*1)
    3:         self.assertIsNot(u3, u3*1)
       
    1:     def test_iadd(self):
    3:         u = self.type2test([0, 1])
    3:         u += self.type2test()
    3:         self.assertEqual(u, self.type2test([0, 1]))
    3:         u += self.type2test([2, 3])
    3:         self.assertEqual(u, self.type2test([0, 1, 2, 3]))
    3:         u += self.type2test([4, 5])
    3:         self.assertEqual(u, self.type2test([0, 1, 2, 3, 4, 5]))
       
    3:         u = self.type2test("spam")
    3:         u += self.type2test("eggs")
    3:         self.assertEqual(u, self.type2test("spameggs"))
       
    1:     def test_imul(self):
    1:         u = self.type2test([0, 1])
    1:         u *= 3
    1:         self.assertEqual(u, self.type2test([0, 1, 0, 1, 0, 1]))
       
    1:     def test_getitemoverwriteiter(self):
               # Verify that __getitem__ overrides are not recognized by __iter__
    4:         class T(self.type2test):
    2:             def __getitem__(self, key):
>>>>>>                 return str(key) + '!!!'
    2:         self.assertEqual(iter(T((1,2))).next(), 1)
       
    1:     def test_repeat(self):
   15:         for m in xrange(4):
   12:             s = tuple(range(m))
  108:             for n in xrange(-3, 5):
   96:                 self.assertEqual(self.type2test(s*n), self.type2test(s)*n)
   12:             self.assertEqual(self.type2test(s)*(-4), self.type2test([]))
   12:             self.assertEqual(id(s), id(s*1))
       
    1:     def test_bigrepeat(self):
    3:         import sys
    3:         if sys.maxint <= 2147483647:
>>>>>>             x = self.type2test([0])
>>>>>>             x *= 2**16
>>>>>>             self.assertRaises(MemoryError, x.__mul__, 2**16)
>>>>>>             if hasattr(x, '__imul__'):
>>>>>>                 self.assertRaises(MemoryError, x.__imul__, 2**16)
       
    1:     def test_subscript(self):
    3:         a = self.type2test([10, 11])
    3:         self.assertEqual(a.__getitem__(0L), 10)
    3:         self.assertEqual(a.__getitem__(1L), 11)
    3:         self.assertEqual(a.__getitem__(-2L), 10)
    3:         self.assertEqual(a.__getitem__(-1L), 11)
    3:         self.assertRaises(IndexError, a.__getitem__, -3)
    3:         self.assertRaises(IndexError, a.__getitem__, 3)
    3:         self.assertEqual(a.__getitem__(slice(0,1)), self.type2test([10]))
    3:         self.assertEqual(a.__getitem__(slice(1,2)), self.type2test([11]))
    3:         self.assertEqual(a.__getitem__(slice(0,2)), self.type2test([10, 11]))
    3:         self.assertEqual(a.__getitem__(slice(0,3)), self.type2test([10, 11]))
    3:         self.assertEqual(a.__getitem__(slice(3,5)), self.type2test([]))
    3:         self.assertRaises(ValueError, a.__getitem__, slice(0, 10, 0))
    3:         self.assertRaises(TypeError, a.__getitem__, 'x')
       
    1:     def test_count(self):
    1:         a = self.type2test([0, 1, 2])*3
    1:         self.assertEqual(a.count(0), 3)
    1:         self.assertEqual(a.count(1), 3)
    1:         self.assertEqual(a.count(3), 0)
       
    1:         self.assertRaises(TypeError, a.count)
       
    2:         class BadExc(Exception):
    1:             pass
       
    2:         class BadCmp:
    1:             def __eq__(self, other):
    3:                 if other == 2:
    1:                     raise BadExc()
    2:                 return False
       
    1:         self.assertRaises(BadExc, a.count, BadCmp())
       
    1:     def test_index(self):
    1:         u = self.type2test([0, 1])
    1:         self.assertEqual(u.index(0), 0)
    1:         self.assertEqual(u.index(1), 1)
    1:         self.assertRaises(ValueError, u.index, 2)
       
    1:         u = self.type2test([-2, -1, 0, 0, 1, 2])
    1:         self.assertEqual(u.count(0), 2)
    1:         self.assertEqual(u.index(0), 2)
    1:         self.assertEqual(u.index(0, 2), 2)
    1:         self.assertEqual(u.index(-2, -10), 0)
    1:         self.assertEqual(u.index(0, 3), 3)
    1:         self.assertEqual(u.index(0, 3, 4), 3)
    1:         self.assertRaises(ValueError, u.index, 2, 0, -10)
       
    1:         self.assertRaises(TypeError, u.index)
       
    2:         class BadExc(Exception):
    1:             pass
       
    2:         class BadCmp:
    1:             def __eq__(self, other):
    3:                 if other == 2:
    1:                     raise BadExc()
    2:                 return False
       
    1:         a = self.type2test([0, 1, 2, 3])
    1:         self.assertRaises(BadExc, a.index, BadCmp())
       
    1:         a = self.type2test([-2, -1, 0, 0, 1, 2])
    1:         self.assertEqual(a.index(0), 2)
    1:         self.assertEqual(a.index(0, 2), 2)
    1:         self.assertEqual(a.index(0, -4), 2)
    1:         self.assertEqual(a.index(-2, -10), 0)
    1:         self.assertEqual(a.index(0, 3), 3)
    1:         self.assertEqual(a.index(0, -3), 3)
    1:         self.assertEqual(a.index(0, 3, 4), 3)
    1:         self.assertEqual(a.index(0, -3, -2), 3)
    1:         self.assertEqual(a.index(0, -4*sys.maxint, 4*sys.maxint), 2)
    1:         self.assertRaises(ValueError, a.index, 0, 4*sys.maxint,-4*sys.maxint)
    1:         self.assertRaises(ValueError, a.index, 2, 0, -10)
       
    1:     def test_free_after_iterating(self):
    3:         support.check_free_after_iterating(self, iter, self.type2test)
    3:         support.check_free_after_iterating(self, reversed, self.type2test)
