       """
       Optional fixer to transform set() calls to set literals.
    1: """
       
       # Author: Benjamin Peterson
       
    1: from lib2to3 import fixer_base, pytree
    1: from lib2to3.fixer_util import token, syms
       
       
       
    2: class FixSetLiteral(fixer_base.BaseFix):
       
    1:     BM_compatible = True
    1:     explicit = True
       
           PATTERN = """power< 'set' trailer< '('
                            (atom=atom< '[' (items=listmaker< any ((',' any)* [',']) >
                                       |
                                       single=any) ']' >
                            |
                            atom< '(' items=testlist_gexp< any ((',' any)* [',']) > ')' >
                            )
                            ')' > >
    1:               """
       
    1:     def transform(self, node, results):
   22:         single = results.get("single")
   22:         if single:
                   # Make a fake listmaker
    9:             fake = pytree.Node(syms.listmaker, [single.clone()])
    9:             single.replace(fake)
    9:             items = fake
               else:
   13:             items = results["items"]
       
               # Build the contents of the literal
   22:         literal = [pytree.Leaf(token.LBRACE, u"{")]
   95:         literal.extend(n.clone() for n in items.children)
   22:         literal.append(pytree.Leaf(token.RBRACE, u"}"))
               # Set the prefix of the right brace to that of the ')' or ']'
   22:         literal[-1].prefix = items.next_sibling.prefix
   22:         maker = pytree.Node(syms.dictsetmaker, literal)
   22:         maker.prefix = node.prefix
       
               # If the original was a one tuple, we need to remove the extra comma.
   22:         if len(maker.children) == 4:
    1:             n = maker.children[2]
    1:             n.remove()
    1:             maker.children[-1].prefix = n.prefix
       
               # Finally, replace the set call with our shiny new literal.
   22:         return maker
