       """This module includes tests of the code object representation.
       
       >>> def f(x):
       ...     def g(y):
       ...         return x + y
       ...     return g
       ...
       
       >>> dump(f.func_code)
       name: f
       argcount: 1
       names: ()
       varnames: ('x', 'g')
       cellvars: ('x',)
       freevars: ()
       nlocals: 2
       flags: 3
       consts: ('None', '<code object g>')
       
       >>> dump(f(4).func_code)
       name: g
       argcount: 1
       names: ()
       varnames: ('y',)
       cellvars: ()
       freevars: ('x',)
       nlocals: 1
       flags: 19
       consts: ('None',)
       
       >>> def h(x, y):
       ...     a = x + y
       ...     b = x - y
       ...     c = a * b
       ...     return c
       ...
       >>> dump(h.func_code)
       name: h
       argcount: 2
       names: ()
       varnames: ('x', 'y', 'a', 'b', 'c')
       cellvars: ()
       freevars: ()
       nlocals: 5
       flags: 67
       consts: ('None',)
       
       >>> def attrs(obj):
       ...     print obj.attr1
       ...     print obj.attr2
       ...     print obj.attr3
       
       >>> dump(attrs.func_code)
       name: attrs
       argcount: 1
       names: ('attr1', 'attr2', 'attr3')
       varnames: ('obj',)
       cellvars: ()
       freevars: ()
       nlocals: 1
       flags: 67
       consts: ('None',)
       
       >>> def optimize_away():
       ...     'doc string'
       ...     'not a docstring'
       ...     53
       ...     53L
       
       >>> dump(optimize_away.func_code)
       name: optimize_away
       argcount: 0
       names: ()
       varnames: ()
       cellvars: ()
       freevars: ()
       nlocals: 0
       flags: 67
       consts: ("'doc string'", 'None')
       
    1: """
       
    1: import unittest
    1: import weakref
    1: from test.test_support import run_doctest, run_unittest, cpython_only
       
       
    1: def consts(t):
           """Yield a doctest-safe sequence of object reprs."""
   12:     for elt in t:
    7:         r = repr(elt)
    7:         if r.startswith("<code object"):
    1:             yield "<code object %s>" % elt.co_name
               else:
    6:             yield r
       
    1: def dump(co):
           """Print out a text representation of a code object."""
    5:     for attr in ["name", "argcount", "names", "varnames", "cellvars",
   45:                  "freevars", "nlocals", "flags"]:
   40:         print "%s: %s" % (attr, getattr(co, "co_" + attr))
    5:     print "consts:", tuple(consts(co.co_consts))
       
       
    2: class CodeTest(unittest.TestCase):
       
    1:     @cpython_only
           def test_newempty(self):
    1:         import _testcapi
    1:         co = _testcapi.code_newempty("filename", "funcname", 15)
    1:         self.assertEqual(co.co_filename, "filename")
    1:         self.assertEqual(co.co_name, "funcname")
    1:         self.assertEqual(co.co_firstlineno, 15)
       
       
    1: def isinterned(s):
    4:     return s is intern(('_' + s + '_')[1:-1])
       
    2: class CodeConstsTest(unittest.TestCase):
       
    1:     def find_const(self, consts, value):
    5:         for v in consts:
    5:             if v == value:
    3:                 return v
>>>>>>         self.assertIn(value, consts)  # raises an exception
>>>>>>         self.fail('Should never be reached')
       
    1:     def assertIsInterned(self, s):
    3:         if not isinterned(s):
>>>>>>             self.fail('String %r is not interned' % (s,))
       
    1:     def assertIsNotInterned(self, s):
    1:         if isinterned(s):
>>>>>>             self.fail('String %r is interned' % (s,))
       
    1:     @cpython_only
           def test_interned_string(self):
    1:         co = compile('res = "str_value"', '?', 'exec')
    1:         v = self.find_const(co.co_consts, 'str_value')
    1:         self.assertIsInterned(v)
       
    1:     @cpython_only
           def test_interned_string_in_tuple(self):
    1:         co = compile('res = ("str_value",)', '?', 'exec')
    1:         v = self.find_const(co.co_consts, ('str_value',))
    1:         self.assertIsInterned(v[0])
       
    1:     @cpython_only
           def test_interned_string_default(self):
    1:         def f(a='str_value'):
    1:             return a
    1:         self.assertIsInterned(f())
       
    1:     @cpython_only
           def test_interned_string_with_null(self):
    1:         co = compile(r'res = "str\0value!"', '?', 'exec')
    1:         v = self.find_const(co.co_consts, 'str\0value!')
    1:         self.assertIsNotInterned(v)
       
       
    2: class CodeWeakRefTest(unittest.TestCase):
       
    1:     def test_basic(self):
               # Create a code object in a clean environment so that we know we have
               # the only reference to it left.
    1:         namespace = {}
    1:         exec "def f(): pass" in globals(), namespace
    1:         f = namespace["f"]
    1:         del namespace
       
    1:         self.called = False
    1:         def callback(code):
>>>>>>             self.called = True
       
               # f is now the last reference to the function, and through it, the code
               # object.  While we hold it, check that we can create a weakref and
               # deref it.  Then delete it, and check that the callback gets called and
               # the reference dies.
    1:         coderef = weakref.ref(f.__code__, callback)
    1:         self.assertTrue(bool(coderef()))
    1:         del f
    1:         self.assertFalse(bool(coderef()))
    1:         self.assertTrue(self.called)
       
       
    1: def test_main(verbose=None):
    1:     from test import test_code
    1:     run_doctest(test_code, verbose)
    1:     run_unittest(CodeTest, CodeConstsTest, CodeWeakRefTest)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
