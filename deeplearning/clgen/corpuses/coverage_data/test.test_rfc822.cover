    1: import unittest
    1: from test import test_support
       
    1: rfc822 = test_support.import_module("rfc822", deprecated=True)
       
    1: try:
    1:     from cStringIO import StringIO
>>>>>> except ImportError:
>>>>>>     from StringIO import StringIO
       
       
    2: class MessageTestCase(unittest.TestCase):
    1:     def create_message(self, msg):
   18:         return rfc822.Message(StringIO(msg))
       
    1:     def test_get(self):
    1:         msg = self.create_message(
    1:             'To: "last, first" <userid@foo.net>\n\ntest\n')
    1:         self.assertTrue(msg.get("to") == '"last, first" <userid@foo.net>')
    1:         self.assertTrue(msg.get("TO") == '"last, first" <userid@foo.net>')
    1:         self.assertTrue(msg.get("No-Such-Header") is None)
    1:         self.assertTrue(msg.get("No-Such-Header", "No-Such-Value")
    1:                      == "No-Such-Value")
       
    1:     def test_setdefault(self):
    1:         msg = self.create_message(
    1:             'To: "last, first" <userid@foo.net>\n\ntest\n')
    1:         self.assertTrue(not msg.has_key("New-Header"))
    1:         self.assertTrue(msg.setdefault("New-Header", "New-Value") == "New-Value")
    1:         self.assertTrue(msg.setdefault("New-Header", "Different-Value")
    1:                      == "New-Value")
    1:         self.assertTrue(msg["new-header"] == "New-Value")
       
    1:         self.assertTrue(msg.setdefault("Another-Header") == "")
    1:         self.assertTrue(msg["another-header"] == "")
       
    1:     def check(self, msg, results):
               """Check addresses and the date."""
   14:         m = self.create_message(msg)
   14:         i = 0
   37:         for n, a in m.getaddrlist('to') + m.getaddrlist('cc'):
   23:             try:
   23:                 mn, ma = results[i][0], results[i][1]
>>>>>>             except IndexError:
>>>>>>                 print 'extra parsed address:', repr(n), repr(a)
>>>>>>                 continue
   23:             i = i + 1
   23:             self.assertEqual(mn, n,
   23:                              "Un-expected name: %r != %r" % (mn, n))
   23:             self.assertEqual(ma, a,
   23:                              "Un-expected address: %r != %r" % (ma, a))
   23:             if mn == n and ma == a:
   23:                 pass
                   else:
>>>>>>                 print 'not found:', repr(n), repr(a)
       
   14:         out = m.getdate('date')
   14:         if out:
    7:             self.assertEqual(out,
    7:                              (1999, 1, 13, 23, 57, 35, 0, 1, 0),
    7:                              "date conversion failed")
       
       
           # Note: all test cases must have the same date (in various formats),
           # or no date!
       
    1:     def test_basic(self):
    1:         self.check(
    1:             'Date:    Wed, 13 Jan 1999 23:57:35 -0500\n'
                   'From:    Guido van Rossum <guido@CNRI.Reston.VA.US>\n'
                   'To:      "Guido van\n'
                   '\t : Rossum" <guido@python.org>\n'
                   'Subject: test2\n'
                   '\n'
                   'test2\n',
    1:             [('Guido van\n\t : Rossum', 'guido@python.org')])
       
    1:         self.check(
    1:             'From: Barry <bwarsaw@python.org\n'
                   'To: guido@python.org (Guido: the Barbarian)\n'
                   'Subject: nonsense\n'
                   'Date: Wednesday, January 13 1999 23:57:35 -0500\n'
                   '\n'
                   'test',
    1:             [('Guido: the Barbarian', 'guido@python.org')])
       
    1:         self.check(
    1:             'From: Barry <bwarsaw@python.org\n'
                   'To: guido@python.org (Guido: the Barbarian)\n'
                   'Cc: "Guido: the Madman" <guido@python.org>\n'
                   'Date:  13-Jan-1999 23:57:35 EST\n'
                   '\n'
                   'test',
    1:             [('Guido: the Barbarian', 'guido@python.org'),
    1:              ('Guido: the Madman', 'guido@python.org')
                    ])
       
    1:         self.check(
    1:             'To: "The monster with\n'
                   '     the very long name: Guido" <guido@python.org>\n'
                   'Date:    Wed, 13 Jan 1999 23:57:35 -0500\n'
                   '\n'
                   'test',
                   [('The monster with\n     the very long name: Guido',
    1:               'guido@python.org')])
       
    1:         self.check(
    1:             'To: "Amit J. Patel" <amitp@Theory.Stanford.EDU>\n'
                   'CC: Mike Fletcher <mfletch@vrtelecom.com>,\n'
                   '        "\'string-sig@python.org\'" <string-sig@python.org>\n'
                   'Cc: fooz@bat.com, bart@toof.com\n'
                   'Cc: goit@lip.com\n'
                   'Date:    Wed, 13 Jan 1999 23:57:35 -0500\n'
                   '\n'
                   'test',
    1:             [('Amit J. Patel', 'amitp@Theory.Stanford.EDU'),
    1:              ('Mike Fletcher', 'mfletch@vrtelecom.com'),
    1:              ("'string-sig@python.org'", 'string-sig@python.org'),
    1:              ('', 'fooz@bat.com'),
    1:              ('', 'bart@toof.com'),
    1:              ('', 'goit@lip.com'),
                    ])
       
    1:         self.check(
    1:             'To: Some One <someone@dom.ain>\n'
                   'From: Anudder Persin <subuddy.else@dom.ain>\n'
                   'Date:\n'
                   '\n'
                   'test',
    1:             [('Some One', 'someone@dom.ain')])
       
    1:         self.check(
    1:             'To: person@dom.ain (User J. Person)\n\n',
    1:             [('User J. Person', 'person@dom.ain')])
       
    1:     def test_doublecomment(self):
               # The RFC allows comments within comments in an email addr
    1:         self.check(
    1:             'To: person@dom.ain ((User J. Person)), John Doe <foo@bar.com>\n\n',
    1:             [('User J. Person', 'person@dom.ain'), ('John Doe', 'foo@bar.com')])
       
    1:     def test_twisted(self):
               # This one is just twisted.  I don't know what the proper
               # result should be, but it shouldn't be to infloop, which is
               # what used to happen!
    1:         self.check(
    1:             'To: <[smtp:dd47@mail.xxx.edu]_at_hmhq@hdq-mdm1-imgout.companay.com>\n'
                   'Date:    Wed, 13 Jan 1999 23:57:35 -0500\n'
                   '\n'
                   'test',
    1:             [('', ''),
    1:              ('', 'dd47@mail.xxx.edu'),
    1:              ('', '_at_hmhq@hdq-mdm1-imgout.companay.com'),
                    ])
       
    1:     def test_commas_in_full_name(self):
               # This exercises the old commas-in-a-full-name bug, which
               # should be doing the right thing in recent versions of the
               # module.
    1:         self.check(
    1:             'To: "last, first" <userid@foo.net>\n'
                   '\n'
                   'test',
    1:             [('last, first', 'userid@foo.net')])
       
    1:     def test_quoted_name(self):
    1:         self.check(
    1:             'To: (Comment stuff) "Quoted name"@somewhere.com\n'
                   '\n'
                   'test',
    1:             [('Comment stuff', '"Quoted name"@somewhere.com')])
       
    1:     def test_bogus_to_header(self):
    1:         self.check(
    1:             'To: :\n'
                   'Cc: goit@lip.com\n'
                   'Date:    Wed, 13 Jan 1999 23:57:35 -0500\n'
                   '\n'
                   'test',
    1:             [('', 'goit@lip.com')])
       
    1:     def test_addr_ipquad(self):
    1:         self.check(
    1:             'To: guido@[132.151.1.21]\n'
                   '\n'
                   'foo',
    1:             [('', 'guido@[132.151.1.21]')])
       
    1:     def test_iter(self):
    1:         m = rfc822.Message(StringIO(
    1:             'Date:    Wed, 13 Jan 1999 23:57:35 -0500\n'
                   'From:    Guido van Rossum <guido@CNRI.Reston.VA.US>\n'
                   'To:      "Guido van\n'
                   '\t : Rossum" <guido@python.org>\n'
                   'Subject: test2\n'
                   '\n'
                   'test2\n' ))
    1:         self.assertEqual(sorted(m), ['date', 'from', 'subject', 'to'])
       
    1:     def test_rfc2822_phrases(self):
               # RFC 2822 (the update to RFC 822) specifies that dots in phrases are
               # obsolete syntax, which conforming programs MUST recognize but NEVER
               # generate (see $4.1 Miscellaneous obsolete tokens).  This is a
               # departure from RFC 822 which did not allow dots in non-quoted
               # phrases.
    1:         self.check('To: User J. Person <person@dom.ain>\n\n',
    1:                    [('User J. Person', 'person@dom.ain')])
       
           # This takes too long to add to the test suite
       ##    def test_an_excrutiatingly_long_address_field(self):
       ##        OBSCENELY_LONG_HEADER_MULTIPLIER = 10000
       ##        oneaddr = ('Person' * 10) + '@' + ('.'.join(['dom']*10)) + '.com'
       ##        addr = ', '.join([oneaddr] * OBSCENELY_LONG_HEADER_MULTIPLIER)
       ##        lst = rfc822.AddrlistClass(addr).getaddrlist()
       ##        self.assertEqual(len(lst), OBSCENELY_LONG_HEADER_MULTIPLIER)
       
    1:     def test_2getaddrlist(self):
    1:         eq = self.assertEqual
    1:         msg = self.create_message("""\
       To: aperson@dom.ain
       Cc: bperson@dom.ain
       Cc: cperson@dom.ain
       Cc: dperson@dom.ain
       
       A test message.
    1: """)
    1:         ccs = [('', a) for a in
    4:                ['bperson@dom.ain', 'cperson@dom.ain', 'dperson@dom.ain']]
    1:         addrs = msg.getaddrlist('cc')
    1:         addrs.sort()
    1:         eq(addrs, ccs)
               # Try again, this one used to fail
    1:         addrs = msg.getaddrlist('cc')
    1:         addrs.sort()
    1:         eq(addrs, ccs)
       
    1:     def test_parseaddr(self):
    1:         eq = self.assertEqual
    1:         eq(rfc822.parseaddr('<>'), ('', ''))
    1:         eq(rfc822.parseaddr('aperson@dom.ain'), ('', 'aperson@dom.ain'))
    1:         eq(rfc822.parseaddr('bperson@dom.ain (Bea A. Person)'),
    1:            ('Bea A. Person', 'bperson@dom.ain'))
    1:         eq(rfc822.parseaddr('Cynthia Person <cperson@dom.ain>'),
    1:            ('Cynthia Person', 'cperson@dom.ain'))
       
    1:     def test_quote_unquote(self):
    1:         eq = self.assertEqual
    1:         eq(rfc822.quote('foo\\wacky"name'), 'foo\\\\wacky\\"name')
    1:         eq(rfc822.unquote('"foo\\\\wacky\\"name"'), 'foo\\wacky"name')
       
    1:     def test_invalid_headers(self):
    1:         eq = self.assertEqual
    1:         msg = self.create_message("First: val\n: otherval\nSecond: val2\n")
    1:         eq(msg.getheader('First'), 'val')
    1:         eq(msg.getheader('Second'), 'val2')
       
       
    1: def test_main():
    1:     test_support.run_unittest(MessageTestCase)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
