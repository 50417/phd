    1: import sys
    1: from test.test_support import verbose, have_unicode, TestFailed
    1: import test.test_support as test_support
    1: import unittest
       
    1: maxsize = test_support.MAX_Py_ssize_t
       
       # test string formatting operator (I am not sure if this is being tested
       # elsewhere but, surely, some of the given cases are *not* tested because
       # they crash python)
       # test on unicode strings as well
       
    1: def testformat(formatstr, args, output=None, limit=None, overflowok=False):
  287:     if verbose:
>>>>>>         if output:
>>>>>>             print "%s %% %s =? %s ..." %\
>>>>>>                 (repr(formatstr), repr(args), repr(output)),
               else:
>>>>>>             print "%s %% %s works? ..." % (repr(formatstr), repr(args)),
  287:     try:
  287:         result = formatstr % args
   15:     except OverflowError:
    6:         if not overflowok:
>>>>>>             raise
    6:         if verbose:
>>>>>>             print 'overflow (this is fine)'
           else:
  272:         if output and limit is None and result != output:
>>>>>>             if verbose:
>>>>>>                 print 'no'
>>>>>>             raise AssertionError("%r %% %r == %r != %r" %
>>>>>>                                 (formatstr, args, result, output))
               # when 'limit' is specified, it determines how many characters
               # must match exactly; lengths must always match.
               # ex: limit=5, '12345678' matches '12345___'
               # (mainly for floating point format tests for which an exact match
               # can't be guaranteed due to rounding and representation errors)
  272:         elif output and limit is not None and (
    6:                 len(result)!=len(output) or result[:limit]!=output[:limit]):
>>>>>>             if verbose:
>>>>>>                 print 'no'
>>>>>>             print "%s %% %s == %s != %s" % \
>>>>>>                   (repr(formatstr), repr(args), repr(result), repr(output))
               else:
  272:             if verbose:
>>>>>>                 print 'yes'
       
       
    1: def testboth(formatstr, *args, **kwargs):
  137:     testformat(formatstr, *args, **kwargs)
  137:     if have_unicode:
  137:         testformat(unicode(formatstr), *args, **kwargs)
       
       
    2: class FormatTest(unittest.TestCase):
    1:     def test_format(self):
    1:         testboth("%.1d", (1,), "1")
    1:         testboth("%.*d", (sys.maxint,1), overflowok=True)  # expect overflow
    1:         testboth("%.100d", (1,), '00000000000000000000000000000000000000'
                        '000000000000000000000000000000000000000000000000000000'
    1:                  '00000001', overflowok=True)
    1:         testboth("%#.117x", (1,), '0x00000000000000000000000000000000000'
                        '000000000000000000000000000000000000000000000000000000'
                        '0000000000000000000000000001',
    1:                  overflowok=True)
    1:         testboth("%#.118x", (1,), '0x00000000000000000000000000000000000'
                        '000000000000000000000000000000000000000000000000000000'
                        '00000000000000000000000000001',
    1:                  overflowok=True)
       
    1:         testboth("%f", (1.0,), "1.000000")
               # these are trying to test the limits of the internal magic-number-length
               # formatting buffer, if that number changes then these tests are less
               # effective
    1:         testboth("%#.*g", (109, -1.e+49/3.))
    1:         testboth("%#.*g", (110, -1.e+49/3.))
    1:         testboth("%#.*g", (110, -1.e+100/3.))
       
               # test some ridiculously large precision, expect overflow
    1:         testboth('%12.*f', (123456, 1.0))
       
               # check for internal overflow validation on length of precision
               # these tests should no longer cause overflow in Python
               # 2.7/3.1 and later.
    1:         testboth("%#.*g", (110, -1.e+100/3.))
    1:         testboth("%#.*G", (110, -1.e+100/3.))
    1:         testboth("%#.*f", (110, -1.e+100/3.))
    1:         testboth("%#.*F", (110, -1.e+100/3.))
       
               # Formatting of long integers. Overflow is not ok
    1:         testboth("%x", 10L, "a")
    1:         testboth("%x", 100000000000L, "174876e800")
    1:         testboth("%o", 10L, "12")
    1:         testboth("%o", 100000000000L, "1351035564000")
    1:         testboth("%d", 10L, "10")
    1:         testboth("%d", 100000000000L, "100000000000")
       
    1:         big = 123456789012345678901234567890L
    1:         testboth("%d", big, "123456789012345678901234567890")
    1:         testboth("%d", -big, "-123456789012345678901234567890")
    1:         testboth("%5d", -big, "-123456789012345678901234567890")
    1:         testboth("%31d", -big, "-123456789012345678901234567890")
    1:         testboth("%32d", -big, " -123456789012345678901234567890")
    1:         testboth("%-32d", -big, "-123456789012345678901234567890 ")
    1:         testboth("%032d", -big, "-0123456789012345678901234567890")
    1:         testboth("%-032d", -big, "-123456789012345678901234567890 ")
    1:         testboth("%034d", -big, "-000123456789012345678901234567890")
    1:         testboth("%034d", big, "0000123456789012345678901234567890")
    1:         testboth("%0+34d", big, "+000123456789012345678901234567890")
    1:         testboth("%+34d", big, "   +123456789012345678901234567890")
    1:         testboth("%34d", big, "    123456789012345678901234567890")
    1:         testboth("%.2d", big, "123456789012345678901234567890")
    1:         testboth("%.30d", big, "123456789012345678901234567890")
    1:         testboth("%.31d", big, "0123456789012345678901234567890")
    1:         testboth("%32.31d", big, " 0123456789012345678901234567890")
    1:         testboth("%d", float(big), "123456________________________", 6)
       
    1:         big = 0x1234567890abcdef12345L  # 21 hex digits
    1:         testboth("%x", big, "1234567890abcdef12345")
    1:         testboth("%x", -big, "-1234567890abcdef12345")
    1:         testboth("%5x", -big, "-1234567890abcdef12345")
    1:         testboth("%22x", -big, "-1234567890abcdef12345")
    1:         testboth("%23x", -big, " -1234567890abcdef12345")
    1:         testboth("%-23x", -big, "-1234567890abcdef12345 ")
    1:         testboth("%023x", -big, "-01234567890abcdef12345")
    1:         testboth("%-023x", -big, "-1234567890abcdef12345 ")
    1:         testboth("%025x", -big, "-0001234567890abcdef12345")
    1:         testboth("%025x", big, "00001234567890abcdef12345")
    1:         testboth("%0+25x", big, "+0001234567890abcdef12345")
    1:         testboth("%+25x", big, "   +1234567890abcdef12345")
    1:         testboth("%25x", big, "    1234567890abcdef12345")
    1:         testboth("%.2x", big, "1234567890abcdef12345")
    1:         testboth("%.21x", big, "1234567890abcdef12345")
    1:         testboth("%.22x", big, "01234567890abcdef12345")
    1:         testboth("%23.22x", big, " 01234567890abcdef12345")
    1:         testboth("%-23.22x", big, "01234567890abcdef12345 ")
    1:         testboth("%X", big, "1234567890ABCDEF12345")
    1:         testboth("%#X", big, "0X1234567890ABCDEF12345")
    1:         testboth("%#x", big, "0x1234567890abcdef12345")
    1:         testboth("%#x", -big, "-0x1234567890abcdef12345")
    1:         testboth("%#.23x", -big, "-0x001234567890abcdef12345")
    1:         testboth("%#+.23x", big, "+0x001234567890abcdef12345")
    1:         testboth("%# .23x", big, " 0x001234567890abcdef12345")
    1:         testboth("%#+.23X", big, "+0X001234567890ABCDEF12345")
    1:         testboth("%#-+.23X", big, "+0X001234567890ABCDEF12345")
    1:         testboth("%#-+26.23X", big, "+0X001234567890ABCDEF12345")
    1:         testboth("%#-+27.23X", big, "+0X001234567890ABCDEF12345 ")
    1:         testboth("%#+27.23X", big, " +0X001234567890ABCDEF12345")
               # next one gets two leading zeroes from precision, and another from the
               # 0 flag and the width
    1:         testboth("%#+027.23X", big, "+0X0001234567890ABCDEF12345")
               # same, except no 0 flag
    1:         testboth("%#+27.23X", big, " +0X001234567890ABCDEF12345")
    1:         testboth("%x", float(big), "123456_______________", 6)
       
    1:         big = 012345670123456701234567012345670L  # 32 octal digits
    1:         testboth("%o", big, "12345670123456701234567012345670")
    1:         testboth("%o", -big, "-12345670123456701234567012345670")
    1:         testboth("%5o", -big, "-12345670123456701234567012345670")
    1:         testboth("%33o", -big, "-12345670123456701234567012345670")
    1:         testboth("%34o", -big, " -12345670123456701234567012345670")
    1:         testboth("%-34o", -big, "-12345670123456701234567012345670 ")
    1:         testboth("%034o", -big, "-012345670123456701234567012345670")
    1:         testboth("%-034o", -big, "-12345670123456701234567012345670 ")
    1:         testboth("%036o", -big, "-00012345670123456701234567012345670")
    1:         testboth("%036o", big, "000012345670123456701234567012345670")
    1:         testboth("%0+36o", big, "+00012345670123456701234567012345670")
    1:         testboth("%+36o", big, "   +12345670123456701234567012345670")
    1:         testboth("%36o", big, "    12345670123456701234567012345670")
    1:         testboth("%.2o", big, "12345670123456701234567012345670")
    1:         testboth("%.32o", big, "12345670123456701234567012345670")
    1:         testboth("%.33o", big, "012345670123456701234567012345670")
    1:         testboth("%34.33o", big, " 012345670123456701234567012345670")
    1:         testboth("%-34.33o", big, "012345670123456701234567012345670 ")
    1:         testboth("%o", big, "12345670123456701234567012345670")
    1:         testboth("%#o", big, "012345670123456701234567012345670")
    1:         testboth("%#o", -big, "-012345670123456701234567012345670")
    1:         testboth("%#.34o", -big, "-0012345670123456701234567012345670")
    1:         testboth("%#+.34o", big, "+0012345670123456701234567012345670")
    1:         testboth("%# .34o", big, " 0012345670123456701234567012345670")
    1:         testboth("%#+.34o", big, "+0012345670123456701234567012345670")
    1:         testboth("%#-+.34o", big, "+0012345670123456701234567012345670")
    1:         testboth("%#-+37.34o", big, "+0012345670123456701234567012345670  ")
    1:         testboth("%#+37.34o", big, "  +0012345670123456701234567012345670")
               # next one gets one leading zero from precision
    1:         testboth("%.33o", big, "012345670123456701234567012345670")
               # base marker shouldn't change that, since "0" is redundant
    1:         testboth("%#.33o", big, "012345670123456701234567012345670")
               # but reduce precision, and base marker should add a zero
    1:         testboth("%#.32o", big, "012345670123456701234567012345670")
               # one leading zero from precision, and another from "0" flag & width
    1:         testboth("%034.33o", big, "0012345670123456701234567012345670")
               # base marker shouldn't change that
    1:         testboth("%0#34.33o", big, "0012345670123456701234567012345670")
    1:         testboth("%o", float(big), "123456__________________________", 6)
       
               # Some small ints, in both Python int and long flavors).
    1:         testboth("%d", 42, "42")
    1:         testboth("%d", -42, "-42")
    1:         testboth("%d", 42L, "42")
    1:         testboth("%d", -42L, "-42")
    1:         testboth("%d", 42.0, "42")
    1:         testboth("%#x", 1, "0x1")
    1:         testboth("%#x", 1L, "0x1")
    1:         testboth("%#X", 1, "0X1")
    1:         testboth("%#X", 1L, "0X1")
    1:         testboth("%#x", 1.0, "0x1")
    1:         testboth("%#o", 1, "01")
    1:         testboth("%#o", 1L, "01")
    1:         testboth("%#o", 0, "0")
    1:         testboth("%#o", 0L, "0")
    1:         testboth("%o", 0, "0")
    1:         testboth("%o", 0L, "0")
    1:         testboth("%d", 0, "0")
    1:         testboth("%d", 0L, "0")
    1:         testboth("%#x", 0, "0x0")
    1:         testboth("%#x", 0L, "0x0")
    1:         testboth("%#X", 0, "0X0")
    1:         testboth("%#X", 0L, "0X0")
       
    1:         testboth("%x", 0x42, "42")
    1:         testboth("%x", -0x42, "-42")
    1:         testboth("%x", 0x42L, "42")
    1:         testboth("%x", -0x42L, "-42")
    1:         testboth("%x", float(0x42), "42")
       
    1:         testboth("%o", 042, "42")
    1:         testboth("%o", -042, "-42")
    1:         testboth("%o", 042L, "42")
    1:         testboth("%o", -042L, "-42")
    1:         testboth("%o", float(042), "42")
       
               # alternate float formatting
    1:         testformat('%g', 1.1, '1.1')
    1:         testformat('%#g', 1.1, '1.10000')
       
               # Regression test for http://bugs.python.org/issue15516.
    2:         class IntFails(object):
    1:             def __int__(self):
    2:                 raise TestFailed
    1:             def __long__(self):
    2:                 return 0
       
    1:         fst = IntFails()
    1:         testformat("%x", fst, '0')
    1:         testformat(u"%x", fst, '0')
       
               # Test exception for unknown format characters
    1:         if verbose:
>>>>>>             print 'Testing exceptions'
       
    1:         def test_exc(formatstr, args, exception, excmsg):
    9:             try:
    9:                 testformat(formatstr, args)
    9:             except exception, exc:
    9:                 if str(exc) == excmsg:
    9:                     if verbose:
>>>>>>                         print "yes"
                       else:
>>>>>>                     if verbose: print 'no'
>>>>>>                     print 'Unexpected ', exception, ':', repr(str(exc))
>>>>>>             except:
>>>>>>                 if verbose: print 'no'
>>>>>>                 print 'Unexpected exception'
>>>>>>                 raise
                   else:
>>>>>>                 raise TestFailed, 'did not get expected exception: %s' % excmsg
       
    1:         test_exc('abc %a', 1, ValueError,
    1:                  "unsupported format character 'a' (0x61) at index 5")
    1:         if have_unicode:
    1:             test_exc(unicode('abc %\u3000','raw-unicode-escape'), 1, ValueError,
    1:                      "unsupported format character '?' (0x3000) at index 5")
       
    1:         test_exc('%d', '1', TypeError, "%d format: a number is required, not str")
    1:         test_exc('%g', '1', TypeError, "float argument required, not str")
    1:         test_exc('no format', '1', TypeError,
    1:                  "not all arguments converted during string formatting")
    1:         test_exc('no format', u'1', TypeError,
    1:                  "not all arguments converted during string formatting")
    1:         test_exc(u'no format', '1', TypeError,
    1:                  "not all arguments converted during string formatting")
    1:         test_exc(u'no format', u'1', TypeError,
    1:                  "not all arguments converted during string formatting")
       
    2:         class Foobar(long):
    1:             def __oct__(self):
                       # Returning a non-string should not blow up.
    1:                 return self + 1
       
    1:         test_exc('%o', Foobar(), TypeError,
    1:                  "expected string or Unicode object, long found")
       
    1:         if maxsize == 2**31-1:
                   # crashes 2.2.1 and earlier:
>>>>>>             try:
                       "%*d"%(maxsize, -127)
>>>>>>             except MemoryError:
>>>>>>                 pass
                   else:
>>>>>>                 raise TestFailed, '"%*d"%(maxsize, -127) should fail'
       
    1:     def test_invalid_special_methods(self):
    1:         tests = []
   12:         for f in 'sriduoxXfge':
   11:             tests.append(('%' + f, 1, TypeError))
   11:             tests.append(('%#' + f, 1, TypeError))
    5:         for r in ['', '-', 'L', '-L']:
   28:             for f in 'iduoxX':
   24:                 tests.append(('%' + f, r, ValueError))
   24:                 tests.append(('%#' + f, r, ValueError))
    1:         tests.append(('%o', 'abc', ValueError))
    5:         for r in ('abc', '0abc', '0x', '0xL'):
   12:             for f in 'xX':
    8:                 tests.append(('%' + f, r, ValueError))
    3:         for r in ('0x', '0xL'):
    6:             for f in 'xX':
    4:                 tests.append(('%#' + f, r, ValueError))
       
    2:         class X(long):
    1:             def __repr__(self):
    2:                 return result
    1:             def __str__(self):
   32:                 return result
    1:             def __oct__(self):
   11:                 return result
    1:             def __hex__(self):
   32:                 return result
    1:             def __float__(self):
    6:                 return result
   84:         for fmt, result, exc in tests:
   83:             try:
   83:                 fmt % X()
   83:             except exc:
   83:                 pass
                   else:
>>>>>>                 self.fail('%s not raised for %r format of %r' %
>>>>>>                           (exc.__name__, fmt, result))
       
       
    1: def test_main():
    1:     test_support.run_unittest(FormatTest)
       
    1:     def test_precision(self):
>>>>>>         f = 1.2
>>>>>>         self.assertEqual(format(f, ".0f"), "1")
>>>>>>         self.assertEqual(format(f, ".3f"), "1.200")
>>>>>>         with self.assertRaises(ValueError) as cm:
>>>>>>             format(f, ".%sf" % (sys.maxsize + 1))
>>>>>>         self.assertEqual(str(cm.exception), "precision too big")
       
>>>>>>         c = complex(f)
>>>>>>         self.assertEqual(format(c, ".0f"), "1+0j")
>>>>>>         self.assertEqual(format(c, ".3f"), "1.200+0.000j")
>>>>>>         with self.assertRaises(ValueError) as cm:
>>>>>>             format(c, ".%sf" % (sys.maxsize + 1))
>>>>>>         self.assertEqual(str(cm.exception), "precision too big")
       
    1:     @test_support.cpython_only
           def test_precision_c_limits(self):
>>>>>>         from _testcapi import INT_MAX
       
>>>>>>         f = 1.2
>>>>>>         with self.assertRaises(ValueError) as cm:
>>>>>>             format(f, ".%sf" % (INT_MAX + 1))
       
>>>>>>         c = complex(f)
>>>>>>         with self.assertRaises(ValueError) as cm:
>>>>>>             format(c, ".%sf" % (INT_MAX + 1))
       
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
