    1: import unittest
    1: import os
    1: from test.test_support import TESTFN, run_unittest
    1: import stat
       
    2: class TestFilemode(unittest.TestCase):
    1:     file_flags = {'SF_APPEND', 'SF_ARCHIVED', 'SF_IMMUTABLE', 'SF_NOUNLINK',
    1:                   'SF_SNAPSHOT', 'UF_APPEND', 'UF_COMPRESSED', 'UF_HIDDEN',
    1:                   'UF_IMMUTABLE', 'UF_NODUMP', 'UF_NOUNLINK', 'UF_OPAQUE'}
       
    1:     formats = {'S_IFBLK', 'S_IFCHR', 'S_IFDIR', 'S_IFIFO', 'S_IFLNK',
    1:                'S_IFREG', 'S_IFSOCK'}
       
    1:     format_funcs = {'S_ISBLK', 'S_ISCHR', 'S_ISDIR', 'S_ISFIFO', 'S_ISLNK',
    1:                     'S_ISREG', 'S_ISSOCK'}
       
    1:     stat_struct = {
    1:         'ST_MODE': 0,
    1:         'ST_INO': 1,
    1:         'ST_DEV': 2,
    1:         'ST_NLINK': 3,
    1:         'ST_UID': 4,
    1:         'ST_GID': 5,
    1:         'ST_SIZE': 6,
    1:         'ST_ATIME': 7,
    1:         'ST_MTIME': 8,
    1:         'ST_CTIME': 9}
       
           # permission bit value are defined by POSIX
    1:     permission_bits = {
    1:         'S_ISUID': 0o4000,
    1:         'S_ISGID': 0o2000,
    1:         'S_ENFMT': 0o2000,
    1:         'S_ISVTX': 0o1000,
    1:         'S_IRWXU': 0o700,
    1:         'S_IRUSR': 0o400,
    1:         'S_IREAD': 0o400,
    1:         'S_IWUSR': 0o200,
    1:         'S_IWRITE': 0o200,
    1:         'S_IXUSR': 0o100,
    1:         'S_IEXEC': 0o100,
    1:         'S_IRWXG': 0o070,
    1:         'S_IRGRP': 0o040,
    1:         'S_IWGRP': 0o020,
    1:         'S_IXGRP': 0o010,
    1:         'S_IRWXO': 0o007,
    1:         'S_IROTH': 0o004,
    1:         'S_IWOTH': 0o002,
    1:         'S_IXOTH': 0o001}
       
    1:     def setUp(self):
   12:         try:
   12:             os.remove(TESTFN)
    9:         except OSError:
    9:             try:
    9:                 os.rmdir(TESTFN)
    8:             except OSError:
    8:                 pass
    1:     tearDown = setUp
       
    1:     def get_mode(self, fname=TESTFN, lstat=True):
    8:         if lstat:
    7:             st_mode = os.lstat(fname).st_mode
               else:
    1:             st_mode = os.stat(fname).st_mode
    8:         return st_mode
       
    1:     def assertS_IS(self, name, mode):
               # test format, lstrip is for S_IFIFO
    8:         fmt = getattr(stat, "S_IF" + name.lstrip("F"))
    8:         self.assertEqual(stat.S_IFMT(mode), fmt)
               # test that just one function returns true
    8:         testname = "S_IS" + name
   64:         for funcname in self.format_funcs:
   56:             func = getattr(stat, funcname, None)
   56:             if func is None:
>>>>>>                 if funcname == testname:
>>>>>>                     raise ValueError(funcname)
>>>>>>                 continue
   56:             if funcname == testname:
    8:                 self.assertTrue(func(mode))
                   else:
   48:                 self.assertFalse(func(mode))
       
    1:     def test_mode(self):
    1:         with open(TESTFN, 'w'):
    1:             pass
    1:         if os.name == 'posix':
    1:             os.chmod(TESTFN, 0o700)
    1:             st_mode = self.get_mode()
    1:             self.assertS_IS("REG", st_mode)
    1:             self.assertEqual(stat.S_IMODE(st_mode),
    1:                              stat.S_IRWXU)
       
    1:             os.chmod(TESTFN, 0o070)
    1:             st_mode = self.get_mode()
    1:             self.assertS_IS("REG", st_mode)
    1:             self.assertEqual(stat.S_IMODE(st_mode),
    1:                              stat.S_IRWXG)
       
    1:             os.chmod(TESTFN, 0o007)
    1:             st_mode = self.get_mode()
    1:             self.assertS_IS("REG", st_mode)
    1:             self.assertEqual(stat.S_IMODE(st_mode),
    1:                              stat.S_IRWXO)
       
    1:             os.chmod(TESTFN, 0o444)
    1:             st_mode = self.get_mode()
    1:             self.assertS_IS("REG", st_mode)
    1:             self.assertEqual(stat.S_IMODE(st_mode), 0o444)
               else:
>>>>>>             os.chmod(TESTFN, 0o700)
>>>>>>             st_mode = self.get_mode()
>>>>>>             self.assertS_IS("REG", st_mode)
>>>>>>             self.assertEqual(stat.S_IFMT(st_mode),
>>>>>>                              stat.S_IFREG)
       
    1:     def test_directory(self):
    1:         os.mkdir(TESTFN)
    1:         os.chmod(TESTFN, 0o700)
    1:         st_mode = self.get_mode()
    1:         self.assertS_IS("DIR", st_mode)
       
    1:     @unittest.skipUnless(hasattr(os, 'symlink'), 'os.symlink not available')
           def test_link(self):
    1:         try:
    1:             os.symlink(os.getcwd(), TESTFN)
>>>>>>         except (OSError, NotImplementedError) as err:
>>>>>>             raise unittest.SkipTest(str(err))
               else:
    1:             st_mode = self.get_mode()
    1:             self.assertS_IS("LNK", st_mode)
       
    1:     @unittest.skipUnless(hasattr(os, 'mkfifo'), 'os.mkfifo not available')
           def test_fifo(self):
    1:         os.mkfifo(TESTFN, 0o700)
    1:         st_mode = self.get_mode()
    1:         self.assertS_IS("FIFO", st_mode)
       
    1:     @unittest.skipUnless(os.name == 'posix', 'requires Posix')
           def test_devices(self):
    1:         if os.path.exists(os.devnull):
    1:             st_mode = self.get_mode(os.devnull, lstat=False)
    1:             self.assertS_IS("CHR", st_mode)
               # Linux block devices, BSD has no block devices anymore
    3:         for blockdev in ("/dev/sda", "/dev/hda"):
    2:             if os.path.exists(blockdev):
>>>>>>                 st_mode = self.get_mode(blockdev, lstat=False)
>>>>>>                 self.assertS_IS("BLK", st_mode)
>>>>>>                 break
       
    1:     def test_module_attributes(self):
   11:         for key, value in self.stat_struct.items():
   10:             modvalue = getattr(stat, key)
   10:             self.assertEqual(value, modvalue, key)
   20:         for key, value in self.permission_bits.items():
   19:             modvalue = getattr(stat, key)
   19:             self.assertEqual(value, modvalue, key)
   13:         for key in self.file_flags:
   12:             modvalue = getattr(stat, key)
   12:             self.assertIsInstance(modvalue, int)
    8:         for key in self.formats:
    7:             modvalue = getattr(stat, key)
    7:             self.assertIsInstance(modvalue, int)
    8:         for key in self.format_funcs:
    7:             func = getattr(stat, key)
    7:             self.assertTrue(callable(func))
    7:             self.assertEqual(func(0), 0)
       
       
    1: def test_main():
    1:     run_unittest(TestFilemode)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
