    1: import dis
    1: import sys
    1: from cStringIO import StringIO
    1: import unittest
       
    1: def disassemble(func):
   48:     f = StringIO()
   48:     tmp = sys.stdout
   48:     sys.stdout = f
   48:     dis.dis(func)
   48:     sys.stdout = tmp
   48:     result = f.getvalue()
   48:     f.close()
   48:     return result
       
    1: def dis_single(line):
   39:     return disassemble(compile(line, '', 'single'))
       
    2: class TestTranforms(unittest.TestCase):
       
    1:     def test_unot(self):
               # UNARY_NOT POP_JUMP_IF_FALSE  -->  POP_JUMP_IF_TRUE
    1:         def unot(x):
>>>>>>             if not x == 2:
>>>>>>                 del x
    1:         asm = disassemble(unot)
    3:         for elem in ('UNARY_NOT', 'POP_JUMP_IF_FALSE'):
    2:             self.assertNotIn(elem, asm)
    1:         self.assertIn('POP_JUMP_IF_TRUE', asm)
       
    1:     def test_elim_inversion_of_is_or_in(self):
    1:         for line, elem in (
    1:             ('not a is b', '(is not)',),
    1:             ('not a in b', '(not in)',),
    1:             ('not a is not b', '(is)',),
    5:             ('not a not in b', '(in)',),
                   ):
    4:             asm = dis_single(line)
    4:             self.assertIn(elem, asm)
       
    1:     def test_none_as_constant(self):
               # LOAD_GLOBAL None  -->  LOAD_CONST None
    1:         def f(x):
>>>>>>             None
>>>>>>             return x
    1:         asm = disassemble(f)
    2:         for elem in ('LOAD_GLOBAL',):
    1:             self.assertNotIn(elem, asm)
    3:         for elem in ('LOAD_CONST', '(None)'):
    2:             self.assertIn(elem, asm)
    1:         def f():
                   'Adding a docstring made this test fail in Py2.5.0'
>>>>>>             return None
    1:         self.assertIn('LOAD_CONST', disassemble(f))
    1:         self.assertNotIn('LOAD_GLOBAL', disassemble(f))
       
    1:     def test_while_one(self):
               # Skip over:  LOAD_CONST trueconst  POP_JUMP_IF_FALSE xx
    1:         def f():
>>>>>>             while 1:
>>>>>>                 pass
>>>>>>             return list
    1:         asm = disassemble(f)
    3:         for elem in ('LOAD_CONST', 'POP_JUMP_IF_FALSE'):
    2:             self.assertNotIn(elem, asm)
    2:         for elem in ('JUMP_ABSOLUTE',):
    1:             self.assertIn(elem, asm)
       
    1:     def test_pack_unpack(self):
    1:         for line, elem in (
    1:             ('a, = a,', 'LOAD_CONST',),
    1:             ('a, b = a, b', 'ROT_TWO',),
    4:             ('a, b, c = a, b, c', 'ROT_THREE',),
                   ):
    3:             asm = dis_single(line)
    3:             self.assertIn(elem, asm)
    3:             self.assertNotIn('BUILD_TUPLE', asm)
    3:             self.assertNotIn('UNPACK_TUPLE', asm)
       
    1:     def test_folding_of_tuples_of_constants(self):
    1:         for line, elem in (
    1:             ('a = 1,2,3', '((1, 2, 3))'),
    1:             ('("a","b","c")', "(('a', 'b', 'c'))"),
    1:             ('a,b,c = 1,2,3', '((1, 2, 3))'),
    1:             ('(None, 1, None)', '((None, 1, None))'),
    6:             ('((1, 2), 3, 4)', '(((1, 2), 3, 4))'),
                   ):
    5:             asm = dis_single(line)
    5:             self.assertIn(elem, asm)
    5:             self.assertNotIn('BUILD_TUPLE', asm)
       
               # Bug 1053819:  Tuple of constants misidentified when presented with:
               # . . . opcode_with_arg 100   unary_opcode   BUILD_TUPLE 1  . . .
               # The following would segfault upon compilation
    1:         def crater():
                   (~[
>>>>>>                 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
>>>>>>                 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
>>>>>>                 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
>>>>>>                 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
>>>>>>                 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
>>>>>>                 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
>>>>>>                 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
>>>>>>                 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
>>>>>>                 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
>>>>>>                 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                   ],)
       
    1:     def test_folding_of_binops_on_constants(self):
    1:         for line, elem in (
    1:             ('a = 2+3+4', '(9)'),                   # chained fold
    1:             ('"@"*4', "('@@@@')"),                  # check string ops
    1:             ('a="abc" + "def"', "('abcdef')"),      # check string ops
    1:             ('a = 3**4', '(81)'),                   # binary power
    1:             ('a = 3*4', '(12)'),                    # binary multiply
    1:             ('a = 13//4', '(3)'),                   # binary floor divide
    1:             ('a = 14%4', '(2)'),                    # binary modulo
    1:             ('a = 2+3', '(5)'),                     # binary add
    1:             ('a = 13-4', '(9)'),                    # binary subtract
    1:             ('a = (12,13)[1]', '(13)'),             # binary subscr
    1:             ('a = 13 << 2', '(52)'),                # binary lshift
    1:             ('a = 13 >> 2', '(3)'),                 # binary rshift
    1:             ('a = 13 & 7', '(5)'),                  # binary and
    1:             ('a = 13 ^ 7', '(10)'),                 # binary xor
   16:             ('a = 13 | 7', '(15)'),                 # binary or
                   ):
   15:             asm = dis_single(line)
   15:             self.assertIn(elem, asm, asm)
   15:             self.assertNotIn('BINARY_', asm)
       
               # Verify that unfoldables are skipped
    1:         asm = dis_single('a=2+"b"')
    1:         self.assertIn('(2)', asm)
    1:         self.assertIn("('b')", asm)
       
               # Verify that large sequences do not result from folding
    1:         asm = dis_single('a="x"*1000')
    1:         self.assertIn('(1000)', asm)
       
    1:     def test_binary_subscr_on_unicode(self):
               # unicode strings don't get optimized
    1:         asm = dis_single('u"foo"[0]')
    1:         self.assertNotIn("(u'f')", asm)
    1:         self.assertIn('BINARY_SUBSCR', asm)
    1:         asm = dis_single('u"\u0061\uffff"[1]')
    1:         self.assertNotIn("(u'\\uffff')", asm)
    1:         self.assertIn('BINARY_SUBSCR', asm)
       
               # out of range
    1:         asm = dis_single('u"fuu"[10]')
    1:         self.assertIn('BINARY_SUBSCR', asm)
               # non-BMP char (see #5057)
    1:         asm = dis_single('u"\U00012345"[0]')
    1:         self.assertIn('BINARY_SUBSCR', asm)
    1:         asm = dis_single('u"\U00012345abcdef"[3]')
    1:         self.assertIn('BINARY_SUBSCR', asm)
       
       
    1:     def test_folding_of_unaryops_on_constants(self):
    1:         for line, elem in (
    1:             ('`1`', "('1')"),                       # unary convert
    1:             ('-0.5', '(-0.5)'),                     # unary negative
    4:             ('~-2', '(1)'),                         # unary invert
               ):
    3:             asm = dis_single(line)
    3:             self.assertIn(elem, asm, asm)
    3:             self.assertNotIn('UNARY_', asm)
       
               # Verify that unfoldables are skipped
    1:         for line, elem in (
    1:             ('-"abc"', "('abc')"),                  # unary negative
    3:             ('~"abc"', "('abc')"),                  # unary invert
               ):
    2:             asm = dis_single(line)
    2:             self.assertIn(elem, asm, asm)
    2:             self.assertIn('UNARY_', asm)
       
    1:     def test_elim_extra_return(self):
               # RETURN LOAD_CONST None RETURN  -->  RETURN
    1:         def f(x):
>>>>>>             return x
    1:         asm = disassemble(f)
    1:         self.assertNotIn('LOAD_CONST', asm)
    1:         self.assertNotIn('(None)', asm)
    1:         self.assertEqual(asm.split().count('RETURN_VALUE'), 1)
       
    1:     def test_elim_jump_to_return(self):
               # JUMP_FORWARD to RETURN -->  RETURN
    1:         def f(cond, true_value, false_value):
>>>>>>             return true_value if cond else false_value
    1:         asm = disassemble(f)
    1:         self.assertNotIn('JUMP_FORWARD', asm)
    1:         self.assertNotIn('JUMP_ABSOLUTE', asm)
    1:         self.assertEqual(asm.split().count('RETURN_VALUE'), 2)
       
    1:     def test_elim_jump_after_return1(self):
               # Eliminate dead code: jumps immediately after returns can't be reached
    1:         def f(cond1, cond2):
>>>>>>             if cond1: return 1
>>>>>>             if cond2: return 2
>>>>>>             while 1:
>>>>>>                 return 3
>>>>>>             while 1:
>>>>>>                 if cond1: return 4
>>>>>>                 return 5
>>>>>>             return 6
    1:         asm = disassemble(f)
    1:         self.assertNotIn('JUMP_FORWARD', asm)
    1:         self.assertNotIn('JUMP_ABSOLUTE', asm)
    1:         self.assertEqual(asm.split().count('RETURN_VALUE'), 6)
       
    1:     def test_elim_jump_after_return2(self):
               # Eliminate dead code: jumps immediately after returns can't be reached
    1:         def f(cond1, cond2):
>>>>>>             while 1:
>>>>>>                 if cond1: return 4
    1:         asm = disassemble(f)
    1:         self.assertNotIn('JUMP_FORWARD', asm)
               # There should be one jump for the while loop.
    1:         self.assertEqual(asm.split().count('JUMP_ABSOLUTE'), 1)
    1:         self.assertEqual(asm.split().count('RETURN_VALUE'), 2)
       
       
    1: def test_main(verbose=None):
    1:     import sys
    1:     from test import test_support
    1:     test_classes = (TestTranforms,)
       
    1:     with test_support.check_py3k_warnings(
    1:             ("backquote not supported", SyntaxWarning)):
    1:         test_support.run_unittest(*test_classes)
       
               # verify reference counting
    1:         if verbose and hasattr(sys, "gettotalrefcount"):
>>>>>>             import gc
>>>>>>             counts = [None] * 5
>>>>>>             for i in xrange(len(counts)):
>>>>>>                 test_support.run_unittest(*test_classes)
>>>>>>                 gc.collect()
>>>>>>                 counts[i] = sys.gettotalrefcount()
>>>>>>             print counts
       
    1: if __name__ == "__main__":
>>>>>>     test_main(verbose=True)
