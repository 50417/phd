    1: """Tests for binary operators on subtypes of built-in types."""
       
    1: import unittest
    1: from test import test_support
       
    1: def gcd(a, b):
           """Greatest common divisor using Euclid's algorithm."""
 5761:     while a:
 4226:         a, b = b%a, a
 1535:     return b
       
    1: def isint(x):
           """Test whether an object is an instance of int or long."""
  243:     return isinstance(x, int) or isinstance(x, long)
       
    1: def isnum(x):
           """Test whether an object is an instance of a built-in numeric type."""
   36:     for T in int, long, float, complex:
   36:         if isinstance(x, T):
   12:             return 1
>>>>>>     return 0
       
    1: def isRat(x):
           """Test wheter an object is an instance of the Rat class."""
   46:     return isinstance(x, Rat)
       
    2: class Rat(object):
       
    1:     """Rational number implemented as a normalized pair of longs."""
       
    1:     __slots__ = ['_Rat__num', '_Rat__den']
       
    1:     def __init__(self, num=0L, den=1L):
               """Constructor: Rat([num[, den]]).
       
               The arguments must be ints or longs, and default to (0, 1)."""
  103:         if not isint(num):
    9:             raise TypeError, "Rat numerator must be int or long (%r)" % num
   94:         if not isint(den):
    9:             raise TypeError, "Rat denominator must be int or long (%r)" % den
               # But the zero is always on
   85:         if den == 0:
    1:             raise ZeroDivisionError, "zero denominator"
   84:         g = gcd(den, num)
   84:         self.__num = long(num//g)
   84:         self.__den = long(den//g)
       
    1:     def _get_num(self):
               """Accessor function for read-only 'num' attribute of Rat."""
    6:         return self.__num
    1:     num = property(_get_num, None)
       
    1:     def _get_den(self):
               """Accessor function for read-only 'den' attribute of Rat."""
    6:         return self.__den
    1:     den = property(_get_den, None)
       
    1:     def __repr__(self):
               """Convert a Rat to a string resembling a Rat constructor call."""
>>>>>>         return "Rat(%d, %d)" % (self.__num, self.__den)
       
    1:     def __str__(self):
               """Convert a Rat to a string resembling a decimal numeric value."""
>>>>>>         return str(float(self))
       
    1:     def __float__(self):
               """Convert a Rat to a float."""
   12:         return self.__num*1.0/self.__den
       
    1:     def __int__(self):
               """Convert a Rat to an int; self.den must be 1."""
>>>>>>         if self.__den == 1:
>>>>>>             try:
>>>>>>                 return int(self.__num)
>>>>>>             except OverflowError:
>>>>>>                 raise OverflowError, ("%s too large to convert to int" %
>>>>>>                                       repr(self))
>>>>>>         raise ValueError, "can't convert %s to int" % repr(self)
       
    1:     def __long__(self):
               """Convert a Rat to a long; self.den must be 1."""
>>>>>>         if self.__den == 1:
>>>>>>             return long(self.__num)
>>>>>>         raise ValueError, "can't convert %s to long" % repr(self)
       
    1:     def __add__(self, other):
               """Add two Rats, or a Rat and a number."""
    5:         if isint(other):
    2:             other = Rat(other)
    5:         if isRat(other):
    3:             return Rat(self.__num*other.__den + other.__num*self.__den,
    3:                        self.__den*other.__den)
    2:         if isnum(other):
    2:             return float(self) + other
>>>>>>         return NotImplemented
       
    1:     __radd__ = __add__
       
    1:     def __sub__(self, other):
               """Subtract two Rats, or a Rat and a number."""
    3:         if isint(other):
    1:             other = Rat(other)
    3:         if isRat(other):
    2:             return Rat(self.__num*other.__den - other.__num*self.__den,
    2:                        self.__den*other.__den)
    1:         if isnum(other):
    1:             return float(self) - other
>>>>>>         return NotImplemented
       
    1:     def __rsub__(self, other):
               """Subtract two Rats, or a Rat and a number (reversed args)."""
    2:         if isint(other):
    1:             other = Rat(other)
    2:         if isRat(other):
    1:             return Rat(other.__num*self.__den - self.__num*other.__den,
    1:                        self.__den*other.__den)
    1:         if isnum(other):
    1:             return other - float(self)
>>>>>>         return NotImplemented
       
    1:     def __mul__(self, other):
               """Multiply two Rats, or a Rat and a number."""
    9:         if isRat(other):
    1:             return Rat(self.__num*other.__num, self.__den*other.__den)
    8:         if isint(other):
    2:             return Rat(self.__num*other, self.__den)
    6:         if isnum(other):
    6:             return float(self)*other
>>>>>>         return NotImplemented
       
    1:     __rmul__ = __mul__
       
    1:     def __truediv__(self, other):
               """Divide two Rats, or a Rat and a number."""
    7:         if isRat(other):
    5:             return Rat(self.__num*other.__den, self.__den*other.__num)
    2:         if isint(other):
    2:             return Rat(self.__num, self.__den*other)
>>>>>>         if isnum(other):
>>>>>>             return float(self) / other
>>>>>>         return NotImplemented
       
    1:     __div__ = __truediv__
       
    1:     def __rtruediv__(self, other):
               """Divide two Rats, or a Rat and a number (reversed args)."""
    3:         if isRat(other):
>>>>>>             return Rat(other.__num*self.__den, other.__den*self.__num)
    3:         if isint(other):
    3:             return Rat(other*self.__den, self.__num)
>>>>>>         if isnum(other):
>>>>>>             return other / float(self)
>>>>>>         return NotImplemented
       
    1:     __rdiv__ = __rtruediv__
       
    1:     def __floordiv__(self, other):
               """Divide two Rats, returning the floored result."""
    3:         if isint(other):
    1:             other = Rat(other)
    2:         elif not isRat(other):
>>>>>>             return NotImplemented
    3:         x = self/other
    3:         return x.__num // x.__den
       
    1:     def __rfloordiv__(self, other):
               """Divide two Rats, returning the floored result (reversed args)."""
    1:         x = other/self
    1:         return x.__num // x.__den
       
    1:     def __divmod__(self, other):
               """Divide two Rats, returning quotient and remainder."""
>>>>>>         if isint(other):
>>>>>>             other = Rat(other)
>>>>>>         elif not isRat(other):
>>>>>>             return NotImplemented
>>>>>>         x = self//other
>>>>>>         return (x, self - other * x)
       
    1:     def __rdivmod__(self, other):
               """Divide two Rats, returning quotient and remainder (reversed args)."""
>>>>>>         if isint(other):
>>>>>>             other = Rat(other)
>>>>>>         elif not isRat(other):
>>>>>>             return NotImplemented
>>>>>>         return divmod(other, self)
       
    1:     def __mod__(self, other):
               """Take one Rat modulo another."""
>>>>>>         return divmod(self, other)[1]
       
    1:     def __rmod__(self, other):
               """Take one Rat modulo another (reversed args)."""
>>>>>>         return divmod(other, self)[1]
       
    1:     def __eq__(self, other):
               """Compare two Rats for equality."""
   20:         if isint(other):
    5:             return self.__den == 1 and self.__num == other
   15:         if isRat(other):
   13:             return self.__num == other.__num and self.__den == other.__den
    2:         if isnum(other):
    2:             return float(self) == other
>>>>>>         return NotImplemented
       
    1:     def __ne__(self, other):
               """Compare two Rats for inequality."""
>>>>>>         return not self == other
       
           # Silence Py3k warning
    1:     __hash__ = None
       
    2: class RatTestCase(unittest.TestCase):
    1:     """Unit tests for Rat class and its support utilities."""
       
    1:     def test_gcd(self):
    1:         self.assertEqual(gcd(10, 12), 2)
    1:         self.assertEqual(gcd(10, 15), 5)
    1:         self.assertEqual(gcd(10, 11), 1)
    1:         self.assertEqual(gcd(100, 15), 5)
    1:         self.assertEqual(gcd(-10, 2), -2)
    1:         self.assertEqual(gcd(10, -2), 2)
    1:         self.assertEqual(gcd(-10, -2), -2)
   20:         for i in range(1, 20):
  380:             for j in range(1, 20):
  361:                 self.assertTrue(gcd(i, j) > 0)
  361:                 self.assertTrue(gcd(-i, j) < 0)
  361:                 self.assertTrue(gcd(i, -j) > 0)
  361:                 self.assertTrue(gcd(-i, -j) < 0)
       
    1:     def test_constructor(self):
    1:         a = Rat(10, 15)
    1:         self.assertEqual(a.num, 2)
    1:         self.assertEqual(a.den, 3)
    1:         a = Rat(10L, 15L)
    1:         self.assertEqual(a.num, 2)
    1:         self.assertEqual(a.den, 3)
    1:         a = Rat(10, -15)
    1:         self.assertEqual(a.num, -2)
    1:         self.assertEqual(a.den, 3)
    1:         a = Rat(-10, 15)
    1:         self.assertEqual(a.num, -2)
    1:         self.assertEqual(a.den, 3)
    1:         a = Rat(-10, -15)
    1:         self.assertEqual(a.num, 2)
    1:         self.assertEqual(a.den, 3)
    1:         a = Rat(7)
    1:         self.assertEqual(a.num, 7)
    1:         self.assertEqual(a.den, 1)
    1:         try:
    1:             a = Rat(1, 0)
    1:         except ZeroDivisionError:
    1:             pass
               else:
>>>>>>             self.fail("Rat(1, 0) didn't raise ZeroDivisionError")
   10:         for bad in "0", 0.0, 0j, (), [], {}, None, Rat, unittest:
    9:             try:
    9:                 a = Rat(bad)
    9:             except TypeError:
    9:                 pass
                   else:
>>>>>>                 self.fail("Rat(%r) didn't raise TypeError" % bad)
    9:             try:
    9:                 a = Rat(1, bad)
    9:             except TypeError:
    9:                 pass
                   else:
>>>>>>                 self.fail("Rat(1, %r) didn't raise TypeError" % bad)
       
    1:     def test_add(self):
    1:         self.assertEqual(Rat(2, 3) + Rat(1, 3), 1)
    1:         self.assertEqual(Rat(2, 3) + 1, Rat(5, 3))
    1:         self.assertEqual(1 + Rat(2, 3), Rat(5, 3))
    1:         self.assertEqual(1.0 + Rat(1, 2), 1.5)
    1:         self.assertEqual(Rat(1, 2) + 1.0, 1.5)
       
    1:     def test_sub(self):
    1:         self.assertEqual(Rat(7, 2) - Rat(7, 5), Rat(21, 10))
    1:         self.assertEqual(Rat(7, 5) - 1, Rat(2, 5))
    1:         self.assertEqual(1 - Rat(3, 5), Rat(2, 5))
    1:         self.assertEqual(Rat(3, 2) - 1.0, 0.5)
    1:         self.assertEqual(1.0 - Rat(1, 2), 0.5)
       
    1:     def test_mul(self):
    1:         self.assertEqual(Rat(2, 3) * Rat(5, 7), Rat(10, 21))
    1:         self.assertEqual(Rat(10, 3) * 3, 10)
    1:         self.assertEqual(3 * Rat(10, 3), 10)
    1:         self.assertEqual(Rat(10, 5) * 0.5, 1.0)
    1:         self.assertEqual(0.5 * Rat(10, 5), 1.0)
       
    1:     def test_div(self):
    1:         self.assertEqual(Rat(10, 3) / Rat(5, 7), Rat(14, 3))
    1:         self.assertEqual(Rat(10, 3) / 3, Rat(10, 9))
    1:         self.assertEqual(2 / Rat(5), Rat(2, 5))
    1:         self.assertEqual(3.0 * Rat(1, 2), 1.5)
    1:         self.assertEqual(Rat(1, 2) * 3.0, 1.5)
       
    1:     def test_floordiv(self):
    1:         self.assertEqual(Rat(10) // Rat(4), 2)
    1:         self.assertEqual(Rat(10, 3) // Rat(4, 3), 2)
    1:         self.assertEqual(Rat(10) // 4, 2)
    1:         self.assertEqual(10 // Rat(4), 2)
       
    1:     def test_eq(self):
    1:         self.assertEqual(Rat(10), Rat(20, 2))
    1:         self.assertEqual(Rat(10), 10)
    1:         self.assertEqual(10, Rat(10))
    1:         self.assertEqual(Rat(10), 10.0)
    1:         self.assertEqual(10.0, Rat(10))
       
    1:     def test_future_div(self):
    1:         exec future_test
       
           # XXX Ran out of steam; TO DO: divmod, div, future division
       
       future_test = """
       from __future__ import division
       self.assertEqual(Rat(10, 3) / Rat(5, 7), Rat(14, 3))
       self.assertEqual(Rat(10, 3) / 3, Rat(10, 9))
       self.assertEqual(2 / Rat(5), Rat(2, 5))
       self.assertEqual(3.0 * Rat(1, 2), 1.5)
       self.assertEqual(Rat(1, 2) * 3.0, 1.5)
       self.assertEqual(eval('1/2'), 0.5)
    1: """
       
    1: def test_main():
    1:     test_support.run_unittest(RatTestCase)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
