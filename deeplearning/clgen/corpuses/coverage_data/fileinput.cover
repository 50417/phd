       """Helper class to quickly write a loop over all standard input files.
       
       Typical use is:
       
           import fileinput
           for line in fileinput.input():
               process(line)
       
       This iterates over the lines of all files listed in sys.argv[1:],
       defaulting to sys.stdin if the list is empty.  If a filename is '-' it
       is also replaced by sys.stdin.  To specify an alternative list of
       filenames, pass it as the argument to input().  A single file name is
       also allowed.
       
       Functions filename(), lineno() return the filename and cumulative line
       number of the line that has just been read; filelineno() returns its
       line number in the current file; isfirstline() returns true iff the
       line just read is the first line of its file; isstdin() returns true
       iff the line was read from sys.stdin.  Function nextfile() closes the
       current file so that the next iteration will read the first line from
       the next file (if any); lines not read from the file will not count
       towards the cumulative line count; the filename is not changed until
       after the first line of the next file has been read.  Function close()
       closes the sequence.
       
       Before any lines have been read, filename() returns None and both line
       numbers are zero; nextfile() has no effect.  After all lines have been
       read, filename() and the line number functions return the values
       pertaining to the last line read; nextfile() has no effect.
       
       All files are opened in text mode by default, you can override this by
       setting the mode parameter to input() or FileInput.__init__().
       If an I/O error occurs during opening or reading a file, the IOError
       exception is raised.
       
       If sys.stdin is used more than once, the second and further use will
       return no lines, except perhaps for interactive use, or if it has been
       explicitly reset (e.g. using sys.stdin.seek(0)).
       
       Empty files are opened and immediately closed; the only time their
       presence in the list of filenames is noticeable at all is when the
       last file opened is empty.
       
       It is possible that the last line of a file doesn't end in a newline
       character; otherwise lines are returned including the trailing
       newline.
       
       Class FileInput is the implementation; its methods filename(),
       lineno(), fileline(), isfirstline(), isstdin(), nextfile() and close()
       correspond to the functions in the module.  In addition it has a
       readline() method which returns the next input line, and a
       __getitem__() method which implements the sequence behavior.  The
       sequence must be accessed in strictly sequential order; sequence
       access and readline() cannot be mixed.
       
       Optional in-place filtering: if the keyword argument inplace=1 is
       passed to input() or to the FileInput constructor, the file is moved
       to a backup file and standard output is directed to the input file.
       This makes it possible to write a filter that rewrites its input file
       in place.  If the keyword argument backup=".<some extension>" is also
       given, it specifies the extension for the backup file, and the backup
       file remains around; by default, the extension is ".bak" and it is
       deleted when the output file is closed.  In-place filtering is
       disabled when standard input is read.  XXX The current implementation
       does not work for MS-DOS 8+3 filesystems.
       
       XXX Possible additions:
       
       - optional getopt argument processing
       - isatty()
       - read(), read(size), even readlines()
       
    1: """
       
    1: import sys, os
       
    1: __all__ = ["input","close","nextfile","filename","lineno","filelineno",
    1:            "isfirstline","isstdin","FileInput"]
       
    1: _state = None
       
       # No longer used
    1: DEFAULT_BUFSIZE = 8*1024
       
    1: def input(files=None, inplace=0, backup="", bufsize=0,
    1:           mode="r", openhook=None):
           """Return an instance of the FileInput class, which can be iterated.
       
           The parameters are passed to the constructor of the FileInput class.
           The returned instance, in addition to being an iterator,
           keeps global state for the functions of this module,.
           """
           global _state
>>>>>>     if _state and _state._file:
>>>>>>         raise RuntimeError, "input() already active"
>>>>>>     _state = FileInput(files, inplace, backup, bufsize, mode, openhook)
>>>>>>     return _state
       
    1: def close():
           """Close the sequence."""
           global _state
>>>>>>     state = _state
>>>>>>     _state = None
>>>>>>     if state:
>>>>>>         state.close()
       
    1: def nextfile():
           """
           Close the current file so that the next iteration will read the first
           line from the next file (if any); lines not read from the file will
           not count towards the cumulative line count. The filename is not
           changed until after the first line of the next file has been read.
           Before the first line has been read, this function has no effect;
           it cannot be used to skip the first file. After the last line of the
           last file has been read, this function has no effect.
           """
>>>>>>     if not _state:
>>>>>>         raise RuntimeError, "no active input()"
>>>>>>     return _state.nextfile()
       
    1: def filename():
           """
           Return the name of the file currently being read.
           Before the first line has been read, returns None.
           """
>>>>>>     if not _state:
>>>>>>         raise RuntimeError, "no active input()"
>>>>>>     return _state.filename()
       
    1: def lineno():
           """
           Return the cumulative line number of the line that has just been read.
           Before the first line has been read, returns 0. After the last line
           of the last file has been read, returns the line number of that line.
           """
>>>>>>     if not _state:
>>>>>>         raise RuntimeError, "no active input()"
>>>>>>     return _state.lineno()
       
    1: def filelineno():
           """
           Return the line number in the current file. Before the first line
           has been read, returns 0. After the last line of the last file has
           been read, returns the line number of that line within the file.
           """
>>>>>>     if not _state:
>>>>>>         raise RuntimeError, "no active input()"
>>>>>>     return _state.filelineno()
       
    1: def fileno():
           """
           Return the file number of the current file. When no file is currently
           opened, returns -1.
           """
>>>>>>     if not _state:
>>>>>>         raise RuntimeError, "no active input()"
>>>>>>     return _state.fileno()
       
    1: def isfirstline():
           """
           Returns true the line just read is the first line of its file,
           otherwise returns false.
           """
>>>>>>     if not _state:
>>>>>>         raise RuntimeError, "no active input()"
>>>>>>     return _state.isfirstline()
       
    1: def isstdin():
           """
           Returns true if the last line was read from sys.stdin,
           otherwise returns false.
           """
>>>>>>     if not _state:
>>>>>>         raise RuntimeError, "no active input()"
>>>>>>     return _state.isstdin()
       
    2: class FileInput:
           """FileInput([files[, inplace[, backup[, bufsize[, mode[, openhook]]]]]])
       
           Class FileInput is the implementation of the module; its methods
           filename(), lineno(), fileline(), isfirstline(), isstdin(), fileno(),
           nextfile() and close() correspond to the functions of the same name
           in the module.
           In addition it has a readline() method which returns the next
           input line, and a __getitem__() method which implements the
           sequence behavior. The sequence must be accessed in strictly
           sequential order; random access and readline() cannot be mixed.
    1:     """
       
    1:     def __init__(self, files=None, inplace=0, backup="", bufsize=0,
    1:                  mode="r", openhook=None):
   28:         if isinstance(files, basestring):
    8:             files = (files,)
               else:
   20:             if files is None:
    3:                 files = sys.argv[1:]
   20:             if not files:
>>>>>>                 files = ('-',)
                   else:
   20:                 files = tuple(files)
   28:         self._files = files
   28:         self._inplace = inplace
   28:         self._backup = backup
   28:         self._savestdout = None
   28:         self._output = None
   28:         self._filename = None
   28:         self._startlineno = 0
   28:         self._filelineno = 0
   28:         self._file = None
   28:         self._isstdin = False
   28:         self._backupfilename = None
               # restrict mode argument to reading modes
   28:         if mode not in ('r', 'rU', 'U', 'rb'):
    1:             raise ValueError("FileInput opening mode must be one of "
                                    "'r', 'rU', 'U' and 'rb'")
   27:         self._mode = mode
   27:         if inplace and openhook:
    1:             raise ValueError("FileInput cannot use an opening hook in inplace mode")
   26:         elif openhook and not hasattr(openhook, '__call__'):
    1:             raise ValueError("FileInput openhook must be callable")
   25:         self._openhook = openhook
       
    1:     def __del__(self):
   18:         self.close()
       
    1:     def close(self):
   34:         try:
   34:             self.nextfile()
               finally:
   34:             self._files = ()
       
    1:     def __iter__(self):
   18:         return self
       
    1:     def next(self):
 1126:         while 1:
 1172:             line = self._readline()
 1171:             if line:
 1106:                 self._filelineno += 1
 1106:                 return line
   65:             if not self._file:
   19:                 raise StopIteration
   46:             self.nextfile()
                   # repeat with next file
       
    1:     def __getitem__(self, i):
>>>>>>         if i != self.lineno():
>>>>>>             raise RuntimeError, "accessing lines out of order"
>>>>>>         try:
>>>>>>             return self.next()
>>>>>>         except StopIteration:
>>>>>>             raise IndexError, "end of input reached"
       
    1:     def nextfile(self):
   95:         savestdout = self._savestdout
   95:         self._savestdout = 0
   95:         if savestdout:
    8:             sys.stdout = savestdout
       
   95:         output = self._output
   95:         self._output = 0
   95:         try:
   95:             if output:
    8:                 output.close()
               finally:
   95:             file = self._file
   95:             self._file = None
   95:             try:
   95:                 del self._readline  # restore FileInput._readline
   35:             except AttributeError:
   35:                 pass
   95:             try:
   95:                 if file and not self._isstdin:
   58:                     file.close()
                   finally:
   95:                 backupfilename = self._backupfilename
   95:                 self._backupfilename = 0
   95:                 if backupfilename and not self._backup:
    8:                     try: os.unlink(backupfilename)
>>>>>>                     except OSError: pass
       
   95:                 self._isstdin = False
       
    1:     def readline(self):
   54:         while 1:
   62:             line = self._readline()
   62:             if line:
   51:                 self._filelineno += 1
   51:                 return line
   11:             if not self._file:
    3:                 return line
    8:             self.nextfile()
                   # repeat with next file
       
    1:     def _readline(self):
   82:         if not self._files:
   22:             return ""
   60:         self._filename = self._files[0]
   60:         self._files = self._files[1:]
   60:         self._startlineno = self.lineno()
   60:         self._filelineno = 0
   60:         self._file = None
   60:         self._isstdin = False
   60:         self._backupfilename = 0
   60:         if self._filename == '-':
    2:             self._filename = '<stdin>'
    2:             self._file = sys.stdin
    2:             self._isstdin = True
               else:
   58:             if self._inplace:
                       self._backupfilename = (
    8:                     self._filename + (self._backup or os.extsep+"bak"))
    8:                 try: os.unlink(self._backupfilename)
    8:                 except os.error: pass
                       # The next few lines may raise IOError
    8:                 os.rename(self._filename, self._backupfilename)
    8:                 self._file = open(self._backupfilename, self._mode)
    8:                 try:
    8:                     perm = os.fstat(self._file.fileno()).st_mode
>>>>>>                 except OSError:
>>>>>>                     self._output = open(self._filename, "w")
                       else:
    8:                     fd = os.open(self._filename,
    8:                                     os.O_CREAT | os.O_WRONLY | os.O_TRUNC,
    8:                                     perm)
    8:                     self._output = os.fdopen(fd, "w")
    8:                     try:
    8:                         if hasattr(os, 'chmod'):
    8:                             os.chmod(self._filename, perm)
>>>>>>                     except OSError:
>>>>>>                         pass
    8:                 self._savestdout = sys.stdout
    8:                 sys.stdout = self._output
                   else:
                       # This may raise IOError
   50:                 if self._openhook:
   10:                     self._file = self._openhook(self._filename, self._mode)
                       else:
   40:                     self._file = open(self._filename, self._mode)
       
   60:         self._readline = self._file.readline  # hide FileInput._readline
   60:         return self._readline()
       
    1:     def filename(self):
   12:         return self._filename
       
    1:     def lineno(self):
   73:         return self._startlineno + self._filelineno
       
    1:     def filelineno(self):
   67:         return self._filelineno
       
    1:     def fileno(self):
    4:         if self._file:
    1:             try:
    1:                 return self._file.fileno()
>>>>>>             except ValueError:
>>>>>>                 return -1
               else:
    3:             return -1
       
    1:     def isfirstline(self):
    2:         return self._filelineno == 1
       
    1:     def isstdin(self):
    2:         return self._isstdin
       
       
    1: def hook_compressed(filename, mode):
>>>>>>     ext = os.path.splitext(filename)[1]
>>>>>>     if ext == '.gz':
>>>>>>         import gzip
>>>>>>         return gzip.open(filename, mode)
>>>>>>     elif ext == '.bz2':
>>>>>>         import bz2
>>>>>>         return bz2.BZ2File(filename, mode)
           else:
>>>>>>         return open(filename, mode)
       
       
    1: def hook_encoded(encoding):
    6:     import io
    6:     def openhook(filename, mode):
    6:         mode = mode.replace('U', '').replace('b', '') or 'r'
    6:         return io.open(filename, mode, encoding=encoding, newline='')
    6:     return openhook
       
       
    1: def _test():
>>>>>>     import getopt
>>>>>>     inplace = 0
>>>>>>     backup = 0
>>>>>>     opts, args = getopt.getopt(sys.argv[1:], "ib:")
>>>>>>     for o, a in opts:
>>>>>>         if o == '-i': inplace = 1
>>>>>>         if o == '-b': backup = a
>>>>>>     for line in input(args, inplace=inplace, backup=backup):
>>>>>>         if line[-1:] == '\n': line = line[:-1]
>>>>>>         if line[-1:] == '\r': line = line[:-1]
>>>>>>         print "%d: %s[%d]%s %s" % (lineno(), filename(), filelineno(),
>>>>>>                                    isfirstline() and "*" or "", line)
>>>>>>     print "%d: %s[%d]" % (lineno(), filename(), filelineno())
       
    1: if __name__ == '__main__':
>>>>>>     _test()
