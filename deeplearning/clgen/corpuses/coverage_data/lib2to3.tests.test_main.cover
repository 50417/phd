       # -*- coding: utf-8 -*-
    1: import sys
    1: import codecs
    1: import logging
    1: import os
    1: import re
    1: import shutil
    1: import StringIO
    1: import sys
    1: import tempfile
    1: import unittest
       
    1: from lib2to3 import main
       
       
    1: TEST_DATA_DIR = os.path.join(os.path.dirname(__file__), "data")
    1: PY2_TEST_MODULE = os.path.join(TEST_DATA_DIR, "py2_test_grammar.py")
       
       
    2: class TestMain(unittest.TestCase):
       
    1:     if not hasattr(unittest.TestCase, 'assertNotRegex'):
               # This method was only introduced in 3.2.
    1:         def assertNotRegex(self, text, regexp, msg=None):
    1:             import re
    1:             if not hasattr(regexp, 'search'):
    1:                 regexp = re.compile(regexp)
    1:             if regexp.search(text):
>>>>>>                 self.fail("regexp %s MATCHED text %r" % (regexp.pattern, text))
       
    1:     def setUp(self):
    4:         self.temp_dir = None  # tearDown() will rmtree this directory if set.
       
    1:     def tearDown(self):
               # Clean up logging configuration down by main.
    4:         del logging.root.handlers[:]
    4:         if self.temp_dir:
    3:             shutil.rmtree(self.temp_dir)
       
    1:     def run_2to3_capture(self, args, in_capture, out_capture, err_capture):
    4:         save_stdin = sys.stdin
    4:         save_stdout = sys.stdout
    4:         save_stderr = sys.stderr
    4:         sys.stdin = in_capture
    4:         sys.stdout = out_capture
    4:         sys.stderr = err_capture
    4:         try:
    4:             return main.main("lib2to3.fixes", args)
               finally:
    4:             sys.stdin = save_stdin
    4:             sys.stdout = save_stdout
    4:             sys.stderr = save_stderr
       
    1:     def test_unencodable_diff(self):
    1:         input_stream = StringIO.StringIO(u"print 'nothing'\nprint u'Ã¼ber'\n")
    1:         out = StringIO.StringIO()
    1:         out_enc = codecs.getwriter("ascii")(out)
    1:         err = StringIO.StringIO()
    1:         ret = self.run_2to3_capture(["-"], input_stream, out_enc, err)
    1:         self.assertEqual(ret, 0)
    1:         output = out.getvalue()
    1:         self.assertIn("-print 'nothing'", output)
    1:         self.assertIn("WARNING: couldn't encode <stdin>'s diff for "
    1:                       "your terminal", err.getvalue())
       
    1:     def setup_test_source_trees(self):
               """Setup a test source tree and output destination tree."""
    3:         self.temp_dir = tempfile.mkdtemp()  # tearDown() cleans this up.
    3:         self.py2_src_dir = os.path.join(self.temp_dir, "python2_project")
    3:         self.py3_dest_dir = os.path.join(self.temp_dir, "python3_project")
    3:         os.mkdir(self.py2_src_dir)
    3:         os.mkdir(self.py3_dest_dir)
               # Turn it into a package with a few files.
    3:         self.setup_files = []
    3:         open(os.path.join(self.py2_src_dir, "__init__.py"), "w").close()
    3:         self.setup_files.append("__init__.py")
    3:         shutil.copy(PY2_TEST_MODULE, self.py2_src_dir)
    3:         self.setup_files.append(os.path.basename(PY2_TEST_MODULE))
    3:         self.trivial_py2_file = os.path.join(self.py2_src_dir, "trivial.py")
    3:         self.init_py2_file = os.path.join(self.py2_src_dir, "__init__.py")
    3:         with open(self.trivial_py2_file, "w") as trivial:
    3:             trivial.write("print 'I need a simple conversion.'")
    3:         self.setup_files.append("trivial.py")
       
    1:     def test_filename_changing_on_output_single_dir(self):
               """2to3 a single directory with a new output dir and suffix."""
    1:         self.setup_test_source_trees()
    1:         out = StringIO.StringIO()
    1:         err = StringIO.StringIO()
    1:         suffix = "TEST"
    1:         ret = self.run_2to3_capture(
    1:                 ["-n", "--add-suffix", suffix, "--write-unchanged-files",
    1:                  "--no-diffs", "--output-dir",
    1:                  self.py3_dest_dir, self.py2_src_dir],
    1:                 StringIO.StringIO(""), out, err)
    1:         self.assertEqual(ret, 0)
    1:         stderr = err.getvalue()
    1:         self.assertIn(" implies -w.", stderr)
    1:         self.assertIn(
    1:                 "Output in %r will mirror the input directory %r layout" % (
    1:                         self.py3_dest_dir, self.py2_src_dir), stderr)
    5:         self.assertEqual(set(name+suffix for name in self.setup_files),
    1:                          set(os.listdir(self.py3_dest_dir)))
    4:         for name in self.setup_files:
    3:             self.assertIn("Writing converted %s to %s" % (
    3:                     os.path.join(self.py2_src_dir, name),
    3:                     os.path.join(self.py3_dest_dir, name+suffix)), stderr)
    1:         sep = re.escape(os.sep)
    1:         self.assertRegexpMatches(
    1:                 stderr, r"No changes to .*/__init__\.py".replace("/", sep))
    1:         self.assertNotRegex(
    1:                 stderr, r"No changes to .*/trivial\.py".replace("/", sep))
       
    1:     def test_filename_changing_on_output_two_files(self):
               """2to3 two files in one directory with a new output dir."""
    1:         self.setup_test_source_trees()
    1:         err = StringIO.StringIO()
    1:         py2_files = [self.trivial_py2_file, self.init_py2_file]
    4:         expected_files = set(os.path.basename(name) for name in py2_files)
    1:         ret = self.run_2to3_capture(
    1:                 ["-n", "-w", "--write-unchanged-files",
    1:                  "--no-diffs", "--output-dir", self.py3_dest_dir] + py2_files,
    1:                 StringIO.StringIO(""), StringIO.StringIO(), err)
    1:         self.assertEqual(ret, 0)
    1:         stderr = err.getvalue()
    1:         self.assertIn(
    1:                 "Output in %r will mirror the input directory %r layout" % (
    1:                         self.py3_dest_dir, self.py2_src_dir), stderr)
    1:         self.assertEqual(expected_files, set(os.listdir(self.py3_dest_dir)))
       
    1:     def test_filename_changing_on_output_single_file(self):
               """2to3 a single file with a new output dir."""
    1:         self.setup_test_source_trees()
    1:         err = StringIO.StringIO()
    1:         ret = self.run_2to3_capture(
    1:                 ["-n", "-w", "--no-diffs", "--output-dir", self.py3_dest_dir,
    1:                  self.trivial_py2_file],
    1:                 StringIO.StringIO(""), StringIO.StringIO(), err)
    1:         self.assertEqual(ret, 0)
    1:         stderr = err.getvalue()
    1:         self.assertIn(
    1:                 "Output in %r will mirror the input directory %r layout" % (
    1:                         self.py3_dest_dir, self.py2_src_dir), stderr)
    1:         self.assertEqual(set([os.path.basename(self.trivial_py2_file)]),
    1:                          set(os.listdir(self.py3_dest_dir)))
       
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
