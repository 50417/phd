    1: """Unit tests for idlelib.configSectionNameDialog"""
    1: import unittest
    1: from idlelib.idle_test.mock_tk import Var, Mbox
    1: from idlelib import configSectionNameDialog as name_dialog_module
       
    1: name_dialog = name_dialog_module.GetCfgSectionNameDialog
       
    2: class Dummy_name_dialog(object):
           # Mock for testing the following methods of name_dialog
    1:     name_ok = name_dialog.name_ok.im_func
    1:     Ok = name_dialog.Ok.im_func
    1:     Cancel = name_dialog.Cancel.im_func
           # Attributes, constant or variable, needed for tests
    1:     used_names = ['used']
    1:     name = Var()
    1:     result = None
    1:     destroyed = False
    1:     def destroy(self):
    2:         self.destroyed = True
       
       # name_ok calls Mbox.showerror if name is not ok
    1: orig_mbox = name_dialog_module.tkMessageBox
    1: showerror = Mbox.showerror
       
    2: class ConfigNameTest(unittest.TestCase):
    1:     dialog = Dummy_name_dialog()
       
    1:     @classmethod
           def setUpClass(cls):
    1:         name_dialog_module.tkMessageBox = Mbox
       
    1:     @classmethod
           def tearDownClass(cls):
    1:         name_dialog_module.tkMessageBox = orig_mbox
       
    1:     def test_blank_name(self):
    1:         self.dialog.name.set(' ')
    1:         self.assertEqual(self.dialog.name_ok(), '')
    1:         self.assertEqual(showerror.title, 'Name Error')
    1:         self.assertIn('No', showerror.message)
       
    1:     def test_used_name(self):
    1:         self.dialog.name.set('used')
    1:         self.assertEqual(self.dialog.name_ok(), '')
    1:         self.assertEqual(showerror.title, 'Name Error')
    1:         self.assertIn('use', showerror.message)
       
    1:     def test_long_name(self):
    1:         self.dialog.name.set('good'*8)
    1:         self.assertEqual(self.dialog.name_ok(), '')
    1:         self.assertEqual(showerror.title, 'Name Error')
    1:         self.assertIn('too long', showerror.message)
       
    1:     def test_good_name(self):
    1:         self.dialog.name.set('  good ')
    1:         showerror.title = 'No Error'  # should not be called
    1:         self.assertEqual(self.dialog.name_ok(), 'good')
    1:         self.assertEqual(showerror.title, 'No Error')
       
    1:     def test_ok(self):
    1:         self.dialog.destroyed = False
    1:         self.dialog.name.set('good')
    1:         self.dialog.Ok()
    1:         self.assertEqual(self.dialog.result, 'good')
    1:         self.assertTrue(self.dialog.destroyed)
       
    1:     def test_cancel(self):
    1:         self.dialog.destroyed = False
    1:         self.dialog.Cancel()
    1:         self.assertEqual(self.dialog.result, '')
    1:         self.assertTrue(self.dialog.destroyed)
       
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main(verbosity=2, exit=False)
