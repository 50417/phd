    1: import pprint
    1: import test.test_support
    1: import unittest
    1: import test.test_set
       
    1: try:
    1:     uni = unicode
>>>>>> except NameError:
>>>>>>     def uni(x):
>>>>>>         return x
       
       # list, tuple and dict subclasses that do or don't overwrite __repr__
    2: class list2(list):
    1:     pass
       
    2: class list3(list):
    1:     def __repr__(self):
   12:         return list.__repr__(self)
       
    2: class tuple2(tuple):
    1:     pass
       
    2: class tuple3(tuple):
    1:     def __repr__(self):
   12:         return tuple.__repr__(self)
       
    2: class set2(set):
    1:     pass
       
    2: class set3(set):
    1:     def __repr__(self):
    9:         return set.__repr__(self)
       
    2: class frozenset2(frozenset):
    1:     pass
       
    2: class frozenset3(frozenset):
    1:     def __repr__(self):
    9:         return frozenset.__repr__(self)
       
    2: class dict2(dict):
    1:     pass
       
    2: class dict3(dict):
    1:     def __repr__(self):
    8:         return dict.__repr__(self)
       
    2: class QueryTestCase(unittest.TestCase):
       
    1:     def setUp(self):
   11:         self.a = range(100)
   11:         self.b = range(200)
   11:         self.a[-12] = self.b
       
    1:     def test_basic(self):
               # Verify .isrecursive() and .isreadable() w/o recursion
    1:         pp = pprint.PrettyPrinter()
    1:         for safe in (2, 2.0, 2j, "abc", [3], (2,2), {3: 3}, uni("yaddayadda"),
    1:                      bytearray(b"ghi"), True, False, None,
   15:                      self.a, self.b):
                   # module-level convenience functions
   14:             self.assertFalse(pprint.isrecursive(safe),
   14:                              "expected not isrecursive for %r" % (safe,))
   14:             self.assertTrue(pprint.isreadable(safe),
   14:                             "expected isreadable for %r" % (safe,))
                   # PrettyPrinter methods
   14:             self.assertFalse(pp.isrecursive(safe),
   14:                              "expected not isrecursive for %r" % (safe,))
   14:             self.assertTrue(pp.isreadable(safe),
   14:                             "expected isreadable for %r" % (safe,))
       
    1:     def test_knotted(self):
               # Verify .isrecursive() and .isreadable() w/ recursion
               # Tie a knot.
    1:         self.b[67] = self.a
               # Messy dict.
    1:         self.d = {}
    1:         self.d[0] = self.d[1] = self.d[2] = self.d
       
    1:         pp = pprint.PrettyPrinter()
       
    5:         for icky in self.a, self.b, self.d, (self.d, self.d):
    4:             self.assertTrue(pprint.isrecursive(icky), "expected isrecursive")
    4:             self.assertFalse(pprint.isreadable(icky), "expected not isreadable")
    4:             self.assertTrue(pp.isrecursive(icky), "expected isrecursive")
    4:             self.assertFalse(pp.isreadable(icky), "expected not isreadable")
       
               # Break the cycles.
    1:         self.d.clear()
    1:         del self.a[:]
    1:         del self.b[:]
       
    5:         for safe in self.a, self.b, self.d, (self.d, self.d):
                   # module-level convenience functions
    4:             self.assertFalse(pprint.isrecursive(safe),
    4:                              "expected not isrecursive for %r" % (safe,))
    4:             self.assertTrue(pprint.isreadable(safe),
    4:                             "expected isreadable for %r" % (safe,))
                   # PrettyPrinter methods
    4:             self.assertFalse(pp.isrecursive(safe),
    4:                              "expected not isrecursive for %r" % (safe,))
    4:             self.assertTrue(pp.isreadable(safe),
    4:                             "expected isreadable for %r" % (safe,))
       
    1:     def test_unreadable(self):
               # Not recursive but not readable anyway
    1:         pp = pprint.PrettyPrinter()
    4:         for unreadable in type(3), pprint, pprint.isrecursive:
                   # module-level convenience functions
    3:             self.assertFalse(pprint.isrecursive(unreadable),
    3:                              "expected not isrecursive for %r" % (unreadable,))
    3:             self.assertFalse(pprint.isreadable(unreadable),
    3:                              "expected not isreadable for %r" % (unreadable,))
                   # PrettyPrinter methods
    3:             self.assertFalse(pp.isrecursive(unreadable),
    3:                              "expected not isrecursive for %r" % (unreadable,))
    3:             self.assertFalse(pp.isreadable(unreadable),
    3:                              "expected not isreadable for %r" % (unreadable,))
       
    1:     def test_same_as_repr(self):
               # Simple objects, small containers and classes that overwrite __repr__
               # For those the result should be the same as repr().
               # Ahem.  The docs don't say anything about that -- this appears to
               # be testing an implementation quirk.  Starting in Python 2.5, it's
               # not true for dicts:  pprint always sorts dicts by key now; before,
               # it sorted a dict display if and only if the display required
               # multiple lines.  For that reason, dicts with more than one element
               # aren't tested here.
    1:         for simple in (0, 0L, 0+0j, 0.0, "", uni(""), bytearray(),
    1:                        (), tuple2(), tuple3(),
    1:                        [], list2(), list3(),
    1:                        set(), set2(), set3(),
    1:                        frozenset(), frozenset2(), frozenset3(),
    1:                        {}, dict2(), dict3(),
    1:                        self.assertTrue, pprint,
    1:                        -6, -6L, -6-6j, -1.5, "x", uni("x"), bytearray(b"x"),
    1:                        (3,), [3], {3: 6},
    1:                        (1,2), [3,4], {5: 6},
    1:                        tuple2((1,2)), tuple3((1,2)), tuple3(range(100)),
    1:                        [3,4], list2([3,4]), list3([3,4]), list3(range(100)),
    1:                        set({7}), set2({7}), set3({7}),
    1:                        frozenset({8}), frozenset2({8}), frozenset3({8}),
    1:                        dict2({5: 6}), dict3({5: 6}),
    1:                        range(10, -11, -1),
   57:                        True, False, None,
                             ):
   56:             native = repr(simple)
   56:             self.assertEqual(pprint.pformat(simple), native)
   56:             self.assertEqual(pprint.pformat(simple, width=1, indent=0)
   56:                              .replace('\n', ' '), native)
   56:             self.assertEqual(pprint.saferepr(simple), native)
       
    1:     def test_basic_line_wrap(self):
               # verify basic line-wrapping operation
    1:         o = {'RPM_cal': 0,
    1:              'RPM_cal2': 48059,
    1:              'Speed_cal': 0,
    1:              'controldesk_runtime_us': 0,
    1:              'main_code_runtime_us': 0,
    1:              'read_io_runtime_us': 0,
    1:              'write_io_runtime_us': 43690}
               exp = """\
       {'RPM_cal': 0,
        'RPM_cal2': 48059,
        'Speed_cal': 0,
        'controldesk_runtime_us': 0,
        'main_code_runtime_us': 0,
        'read_io_runtime_us': 0,
    1:  'write_io_runtime_us': 43690}"""
    3:         for type in [dict, dict2]:
    2:             self.assertEqual(pprint.pformat(type(o)), exp)
       
    1:         o = range(100)
    1:         exp = '[%s]' % ',\n '.join(map(str, o))
    3:         for type in [list, list2]:
    2:             self.assertEqual(pprint.pformat(type(o)), exp)
       
    1:         o = tuple(range(100))
    1:         exp = '(%s)' % ',\n '.join(map(str, o))
    3:         for type in [tuple, tuple2]:
    2:             self.assertEqual(pprint.pformat(type(o)), exp)
       
               # indent parameter
    1:         o = range(100)
    1:         exp = '[   %s]' % ',\n    '.join(map(str, o))
    3:         for type in [list, list2]:
    2:             self.assertEqual(pprint.pformat(type(o), indent=4), exp)
       
    1:     def test_nested_indentations(self):
    1:         o1 = list(range(10))
    1:         o2 = dict(first=1, second=2, third=3)
    1:         o = [o1, o2]
               expected = """\
       [   [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
           {   'first': 1,
               'second': 2,
    1:         'third': 3}]"""
    1:         self.assertEqual(pprint.pformat(o, indent=4, width=42), expected)
       
    1:     def test_sorted_dict(self):
               # Starting in Python 2.5, pprint sorts dict displays by key regardless
               # of how small the dictionary may be.
               # Before the change, on 32-bit Windows pformat() gave order
               # 'a', 'c', 'b' here, so this test failed.
    1:         d = {'a': 1, 'b': 1, 'c': 1}
    1:         self.assertEqual(pprint.pformat(d), "{'a': 1, 'b': 1, 'c': 1}")
    1:         self.assertEqual(pprint.pformat([d, d]),
    1:             "[{'a': 1, 'b': 1, 'c': 1}, {'a': 1, 'b': 1, 'c': 1}]")
       
               # The next one is kind of goofy.  The sorted order depends on the
               # alphabetic order of type names:  "int" < "str" < "tuple".  Before
               # Python 2.5, this was in the test_same_as_repr() test.  It's worth
               # keeping around for now because it's one of few tests of pprint
               # against a crazy mix of types.
    1:         self.assertEqual(pprint.pformat({"xy\tab\n": (3,), 5: [[]], (): {}}),
    1:             r"{5: [[]], 'xy\tab\n': (3,), (): {}}")
       
    1:     def test_subclassing(self):
    1:         o = {'names with spaces': 'should be presented using repr()',
    1:              'others.should.not.be': 'like.this'}
               exp = """\
       {'names with spaces': 'should be presented using repr()',
    1:  others.should.not.be: like.this}"""
    1:         self.assertEqual(DottedPrettyPrinter().pformat(o), exp)
       
    1:     def test_set_reprs(self):
    1:         self.assertEqual(pprint.pformat(set()), 'set([])')
    1:         self.assertEqual(pprint.pformat(set(range(3))), 'set([0, 1, 2])')
    1:         self.assertEqual(pprint.pformat(set(range(7)), width=20), '''\
       set([0,
            1,
            2,
            3,
            4,
            5,
    1:      6])''')
    1:         self.assertEqual(pprint.pformat(set2(range(7)), width=20), '''\
       set2([0,
             1,
             2,
             3,
             4,
             5,
    1:       6])''')
    1:         self.assertEqual(pprint.pformat(set3(range(7)), width=20),
    1:                          'set3([0, 1, 2, 3, 4, 5, 6])')
       
    1:         self.assertEqual(pprint.pformat(frozenset()), 'frozenset([])')
    1:         self.assertEqual(pprint.pformat(frozenset(range(3))),
    1:                          'frozenset([0, 1, 2])')
    1:         self.assertEqual(pprint.pformat(frozenset(range(7)), width=20), '''\
       frozenset([0,
                  1,
                  2,
                  3,
                  4,
                  5,
    1:            6])''')
    1:         self.assertEqual(pprint.pformat(frozenset2(range(7)), width=20), '''\
       frozenset2([0,
                   1,
                   2,
                   3,
                   4,
                   5,
    1:             6])''')
    1:         self.assertEqual(pprint.pformat(frozenset3(range(7)), width=20),
    1:                          'frozenset3([0, 1, 2, 3, 4, 5, 6])')
       
    1:     def test_set_of_sets_reprs(self):
               cube_repr_tgt = """\
       {frozenset([]): frozenset([frozenset([2]), frozenset([0]), frozenset([1])]),
        frozenset([0]): frozenset([frozenset([]),
                                   frozenset([0, 2]),
                                   frozenset([0, 1])]),
        frozenset([1]): frozenset([frozenset([]),
                                   frozenset([1, 2]),
                                   frozenset([0, 1])]),
        frozenset([2]): frozenset([frozenset([]),
                                   frozenset([1, 2]),
                                   frozenset([0, 2])]),
        frozenset([1, 2]): frozenset([frozenset([2]),
                                      frozenset([1]),
                                      frozenset([0, 1, 2])]),
        frozenset([0, 2]): frozenset([frozenset([2]),
                                      frozenset([0]),
                                      frozenset([0, 1, 2])]),
        frozenset([0, 1]): frozenset([frozenset([0]),
                                      frozenset([1]),
                                      frozenset([0, 1, 2])]),
        frozenset([0, 1, 2]): frozenset([frozenset([1, 2]),
                                         frozenset([0, 2]),
    1:                                   frozenset([0, 1])])}"""
    1:         cube = test.test_set.cube(3)
    1:         self.assertEqual(pprint.pformat(cube), cube_repr_tgt)
               cubo_repr_tgt = """\
       {frozenset([frozenset([0, 2]), frozenset([0])]): frozenset([frozenset([frozenset([0,
                                                                                         2]),
                                                                              frozenset([0,
                                                                                         1,
                                                                                         2])]),
                                                                   frozenset([frozenset([0]),
                                                                              frozenset([0,
                                                                                         1])]),
                                                                   frozenset([frozenset([]),
                                                                              frozenset([0])]),
                                                                   frozenset([frozenset([2]),
                                                                              frozenset([0,
                                                                                         2])])]),
        frozenset([frozenset([0, 1]), frozenset([1])]): frozenset([frozenset([frozenset([0,
                                                                                         1]),
                                                                              frozenset([0,
                                                                                         1,
                                                                                         2])]),
                                                                   frozenset([frozenset([0]),
                                                                              frozenset([0,
                                                                                         1])]),
                                                                   frozenset([frozenset([1]),
                                                                              frozenset([1,
                                                                                         2])]),
                                                                   frozenset([frozenset([]),
                                                                              frozenset([1])])]),
        frozenset([frozenset([1, 2]), frozenset([1])]): frozenset([frozenset([frozenset([1,
                                                                                         2]),
                                                                              frozenset([0,
                                                                                         1,
                                                                                         2])]),
                                                                   frozenset([frozenset([2]),
                                                                              frozenset([1,
                                                                                         2])]),
                                                                   frozenset([frozenset([]),
                                                                              frozenset([1])]),
                                                                   frozenset([frozenset([1]),
                                                                              frozenset([0,
                                                                                         1])])]),
        frozenset([frozenset([1, 2]), frozenset([2])]): frozenset([frozenset([frozenset([1,
                                                                                         2]),
                                                                              frozenset([0,
                                                                                         1,
                                                                                         2])]),
                                                                   frozenset([frozenset([1]),
                                                                              frozenset([1,
                                                                                         2])]),
                                                                   frozenset([frozenset([2]),
                                                                              frozenset([0,
                                                                                         2])]),
                                                                   frozenset([frozenset([]),
                                                                              frozenset([2])])]),
        frozenset([frozenset([]), frozenset([0])]): frozenset([frozenset([frozenset([0]),
                                                                          frozenset([0,
                                                                                     1])]),
                                                               frozenset([frozenset([0]),
                                                                          frozenset([0,
                                                                                     2])]),
                                                               frozenset([frozenset([]),
                                                                          frozenset([1])]),
                                                               frozenset([frozenset([]),
                                                                          frozenset([2])])]),
        frozenset([frozenset([]), frozenset([1])]): frozenset([frozenset([frozenset([]),
                                                                          frozenset([0])]),
                                                               frozenset([frozenset([1]),
                                                                          frozenset([1,
                                                                                     2])]),
                                                               frozenset([frozenset([]),
                                                                          frozenset([2])]),
                                                               frozenset([frozenset([1]),
                                                                          frozenset([0,
                                                                                     1])])]),
        frozenset([frozenset([2]), frozenset([])]): frozenset([frozenset([frozenset([2]),
                                                                          frozenset([1,
                                                                                     2])]),
                                                               frozenset([frozenset([]),
                                                                          frozenset([0])]),
                                                               frozenset([frozenset([]),
                                                                          frozenset([1])]),
                                                               frozenset([frozenset([2]),
                                                                          frozenset([0,
                                                                                     2])])]),
        frozenset([frozenset([0, 1, 2]), frozenset([0, 1])]): frozenset([frozenset([frozenset([1,
                                                                                               2]),
                                                                                    frozenset([0,
                                                                                               1,
                                                                                               2])]),
                                                                         frozenset([frozenset([0,
                                                                                               2]),
                                                                                    frozenset([0,
                                                                                               1,
                                                                                               2])]),
                                                                         frozenset([frozenset([0]),
                                                                                    frozenset([0,
                                                                                               1])]),
                                                                         frozenset([frozenset([1]),
                                                                                    frozenset([0,
                                                                                               1])])]),
        frozenset([frozenset([0]), frozenset([0, 1])]): frozenset([frozenset([frozenset([]),
                                                                              frozenset([0])]),
                                                                   frozenset([frozenset([0,
                                                                                         1]),
                                                                              frozenset([0,
                                                                                         1,
                                                                                         2])]),
                                                                   frozenset([frozenset([0]),
                                                                              frozenset([0,
                                                                                         2])]),
                                                                   frozenset([frozenset([1]),
                                                                              frozenset([0,
                                                                                         1])])]),
        frozenset([frozenset([2]), frozenset([0, 2])]): frozenset([frozenset([frozenset([0,
                                                                                         2]),
                                                                              frozenset([0,
                                                                                         1,
                                                                                         2])]),
                                                                   frozenset([frozenset([2]),
                                                                              frozenset([1,
                                                                                         2])]),
                                                                   frozenset([frozenset([0]),
                                                                              frozenset([0,
                                                                                         2])]),
                                                                   frozenset([frozenset([]),
                                                                              frozenset([2])])]),
        frozenset([frozenset([0, 1, 2]), frozenset([0, 2])]): frozenset([frozenset([frozenset([1,
                                                                                               2]),
                                                                                    frozenset([0,
                                                                                               1,
                                                                                               2])]),
                                                                         frozenset([frozenset([0,
                                                                                               1]),
                                                                                    frozenset([0,
                                                                                               1,
                                                                                               2])]),
                                                                         frozenset([frozenset([0]),
                                                                                    frozenset([0,
                                                                                               2])]),
                                                                         frozenset([frozenset([2]),
                                                                                    frozenset([0,
                                                                                               2])])]),
        frozenset([frozenset([1, 2]), frozenset([0, 1, 2])]): frozenset([frozenset([frozenset([0,
                                                                                               2]),
                                                                                    frozenset([0,
                                                                                               1,
                                                                                               2])]),
                                                                         frozenset([frozenset([0,
                                                                                               1]),
                                                                                    frozenset([0,
                                                                                               1,
                                                                                               2])]),
                                                                         frozenset([frozenset([2]),
                                                                                    frozenset([1,
                                                                                               2])]),
                                                                         frozenset([frozenset([1]),
                                                                                    frozenset([1,
    1:                                                                                         2])])])}"""
       
    1:         cubo = test.test_set.linegraph(cube)
    1:         self.assertEqual(pprint.pformat(cubo), cubo_repr_tgt)
       
    1:     def test_depth(self):
    1:         nested_tuple = (1, (2, (3, (4, (5, 6)))))
    1:         nested_dict = {1: {2: {3: {4: {5: {6: 6}}}}}}
    1:         nested_list = [1, [2, [3, [4, [5, [6, []]]]]]]
    1:         self.assertEqual(pprint.pformat(nested_tuple), repr(nested_tuple))
    1:         self.assertEqual(pprint.pformat(nested_dict), repr(nested_dict))
    1:         self.assertEqual(pprint.pformat(nested_list), repr(nested_list))
       
    1:         lv1_tuple = '(1, (...))'
    1:         lv1_dict = '{1: {...}}'
    1:         lv1_list = '[1, [...]]'
    1:         self.assertEqual(pprint.pformat(nested_tuple, depth=1), lv1_tuple)
    1:         self.assertEqual(pprint.pformat(nested_dict, depth=1), lv1_dict)
    1:         self.assertEqual(pprint.pformat(nested_list, depth=1), lv1_list)
       
       
    2: class DottedPrettyPrinter(pprint.PrettyPrinter):
       
    1:     def format(self, object, context, maxlevels, level):
    5:         if isinstance(object, str):
    4:             if ' ' in object:
    2:                 return repr(object), 1, 0
                   else:
    2:                 return object, 0, 0
               else:
    1:             return pprint.PrettyPrinter.format(
    1:                 self, object, context, maxlevels, level)
       
       
    1: def test_main():
    1:     test.test_support.run_unittest(QueryTestCase)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
