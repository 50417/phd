       """Provide access to Python's configuration information.  The specific
       configuration variables available depend heavily on the platform and
       configuration.  The values may be retrieved using
       get_config_var(name), and the list of variables is available via
       get_config_vars().keys().  Additional convenience functions are also
       available.
       
       Written by:   Fred L. Drake, Jr.
       Email:        <fdrake@acm.org>
    2: """
       
    2: __revision__ = "$Id$"
       
    2: import os
    2: import re
    2: import string
    2: import sys
       
    2: from distutils.errors import DistutilsPlatformError
       
       # These are needed in a couple of spots, so just compute them once.
    2: PREFIX = os.path.normpath(sys.prefix)
    2: EXEC_PREFIX = os.path.normpath(sys.exec_prefix)
       
       # Path to the base directory of the project. On Windows the binary may
       # live in project/PCBuild9.  If we're dealing with an x64 Windows build,
       # it'll live in project/PCbuild/amd64.
    2: project_base = os.path.dirname(os.path.abspath(sys.executable))
    2: if os.name == "nt" and "pcbuild" in project_base[-8:].lower():
>>>>>>     project_base = os.path.abspath(os.path.join(project_base, os.path.pardir))
       # PC/VS7.1
    2: if os.name == "nt" and "\\pc\\v" in project_base[-10:].lower():
>>>>>>     project_base = os.path.abspath(os.path.join(project_base, os.path.pardir,
>>>>>>                                                 os.path.pardir))
       # PC/AMD64
    2: if os.name == "nt" and "\\pcbuild\\amd64" in project_base[-14:].lower():
>>>>>>     project_base = os.path.abspath(os.path.join(project_base, os.path.pardir,
>>>>>>                                                 os.path.pardir))
       
       # set for cross builds
    2: if "_PYTHON_PROJECT_BASE" in os.environ:
           # this is the build directory, at least for posix
>>>>>>     project_base = os.path.normpath(os.environ["_PYTHON_PROJECT_BASE"])
       
       # python_build: (Boolean) if true, we're either building Python or
       # building an extension with an un-installed Python, so we use
       # different (hard-wired) directories.
       # Setup.local is available for Makefile builds including VPATH builds,
       # Setup.dist is available on Windows
    2: def _python_build():
    6:     for fn in ("Setup.dist", "Setup.local"):
    4:         if os.path.isfile(os.path.join(project_base, "Modules", fn)):
>>>>>>             return True
    2:     return False
    2: python_build = _python_build()
       
       
    2: def get_python_version():
           """Return a string containing the major and minor Python version,
           leaving off the patchlevel.  Sample return values could be '1.5'
           or '2.2'.
           """
   55:     return sys.version[:3]
       
       
    2: def get_python_inc(plat_specific=0, prefix=None):
           """Return the directory containing installed Python header files.
       
           If 'plat_specific' is false (the default), this is the path to the
           non-platform-specific header files, i.e. Python.h and so on;
           otherwise, this is the path to platform-specific header files
           (namely pyconfig.h).
       
           If 'prefix' is supplied, use it instead of sys.prefix or
           sys.exec_prefix -- i.e., ignore 'plat_specific'.
           """
   51:     if prefix is None:
   51:         prefix = plat_specific and EXEC_PREFIX or PREFIX
       
   51:     if os.name == "posix":
   51:         if python_build:
>>>>>>             buildir = os.path.dirname(sys.executable)
>>>>>>             if plat_specific:
                       # python.h is located in the buildir
>>>>>>                 inc_dir = buildir
                   else:
                       # the source dir is relative to the buildir
>>>>>>                 srcdir = os.path.abspath(os.path.join(buildir,
>>>>>>                                          get_config_var('srcdir')))
                       # Include is located in the srcdir
>>>>>>                 inc_dir = os.path.join(srcdir, "Include")
>>>>>>             return inc_dir
   51:         return os.path.join(prefix, "include", "python" + get_python_version())
>>>>>>     elif os.name == "nt":
>>>>>>         return os.path.join(prefix, "include")
>>>>>>     elif os.name == "os2":
>>>>>>         return os.path.join(prefix, "Include")
           else:
>>>>>>         raise DistutilsPlatformError(
>>>>>>             "I don't know where Python installs its C header files "
>>>>>>             "on platform '%s'" % os.name)
       
       
    2: def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
           """Return the directory containing the Python library (standard or
           site additions).
       
           If 'plat_specific' is true, return the directory containing
           platform-specific modules, i.e. any module from a non-pure-Python
           module distribution; otherwise, return the platform-shared library
           directory.  If 'standard_lib' is true, return the directory
           containing standard Python library modules; otherwise, return the
           directory for site-specific modules.
       
           If 'prefix' is supplied, use it instead of sys.prefix or
           sys.exec_prefix -- i.e., ignore 'plat_specific'.
           """
    4:     if prefix is None:
    3:         prefix = plat_specific and EXEC_PREFIX or PREFIX
       
    4:     if os.name == "posix":
    4:         libpython = os.path.join(prefix,
    4:                                  "lib", "python" + get_python_version())
    4:         if standard_lib:
    1:             return libpython
               else:
    3:             return os.path.join(libpython, "site-packages")
       
>>>>>>     elif os.name == "nt":
>>>>>>         if standard_lib:
>>>>>>             return os.path.join(prefix, "Lib")
               else:
>>>>>>             if get_python_version() < "2.2":
>>>>>>                 return prefix
                   else:
>>>>>>                 return os.path.join(prefix, "Lib", "site-packages")
       
>>>>>>     elif os.name == "os2":
>>>>>>         if standard_lib:
>>>>>>             return os.path.join(prefix, "Lib")
               else:
>>>>>>             return os.path.join(prefix, "Lib", "site-packages")
       
           else:
>>>>>>         raise DistutilsPlatformError(
>>>>>>             "I don't know where Python installs its library "
>>>>>>             "on platform '%s'" % os.name)
       
       
       
    2: def customize_compiler(compiler):
           """Do any platform-specific customization of a CCompiler instance.
       
           Mainly needed on Unix, so we can plug in the information that
           varies across Unices and is stored in Python's Makefile.
           """
   13:     if compiler.compiler_type == "unix":
   13:         if sys.platform == "darwin":
                   # Perform first-time customization of compiler-related
                   # config vars on OS X now that we know we need a compiler.
                   # This is primarily to support Pythons from binary
                   # installers.  The kind and paths to build tools on
                   # the user system may vary significantly from the system
                   # that Python itself was built on.  Also the user OS
                   # version and build tools may not support the same set
                   # of CPU architectures for universal builds.
                   global _config_vars
                   # Use get_config_var() to ensure _config_vars is initialized.
   13:             if not get_config_var('CUSTOMIZED_OSX_COMPILER'):
    1:                 import _osx_support
    1:                 _osx_support.customize_compiler(_config_vars)
    1:                 _config_vars['CUSTOMIZED_OSX_COMPILER'] = 'True'
       
               (cc, cxx, opt, cflags, ccshared, ldshared, so_ext, ar, ar_flags) = \
   13:             get_config_vars('CC', 'CXX', 'OPT', 'CFLAGS',
   13:                             'CCSHARED', 'LDSHARED', 'SO', 'AR',
   13:                             'ARFLAGS')
       
   13:         if 'CC' in os.environ:
    2:             newcc = os.environ['CC']
    2:             if (sys.platform == 'darwin'
    2:                     and 'LDSHARED' not in os.environ
    1:                     and ldshared.startswith(cc)):
                       # On OS X, if CC is overridden, use that as the default
                       #       command for LDSHARED as well
    1:                 ldshared = newcc + ldshared[len(cc):]
    2:             cc = newcc
   13:         if 'CXX' in os.environ:
>>>>>>             cxx = os.environ['CXX']
   13:         if 'LDSHARED' in os.environ:
    1:             ldshared = os.environ['LDSHARED']
   13:         if 'CPP' in os.environ:
>>>>>>             cpp = os.environ['CPP']
               else:
   13:             cpp = cc + " -E"           # not always
   13:         if 'LDFLAGS' in os.environ:
>>>>>>             ldshared = ldshared + ' ' + os.environ['LDFLAGS']
   13:         if 'CFLAGS' in os.environ:
>>>>>>             cflags = opt + ' ' + os.environ['CFLAGS']
>>>>>>             ldshared = ldshared + ' ' + os.environ['CFLAGS']
   13:         if 'CPPFLAGS' in os.environ:
>>>>>>             cpp = cpp + ' ' + os.environ['CPPFLAGS']
>>>>>>             cflags = cflags + ' ' + os.environ['CPPFLAGS']
>>>>>>             ldshared = ldshared + ' ' + os.environ['CPPFLAGS']
   13:         if 'AR' in os.environ:
    1:             ar = os.environ['AR']
   13:         if 'ARFLAGS' in os.environ:
    1:             archiver = ar + ' ' + os.environ['ARFLAGS']
               else:
   12:             archiver = ar + ' ' + ar_flags
       
   13:         cc_cmd = cc + ' ' + cflags
   13:         compiler.set_executables(
   13:             preprocessor=cpp,
   13:             compiler=cc_cmd,
   13:             compiler_so=cc_cmd + ' ' + ccshared,
   13:             compiler_cxx=cxx,
   13:             linker_so=ldshared,
   13:             linker_exe=cc,
   13:             archiver=archiver)
       
   13:         compiler.shared_lib_extension = so_ext
       
       
    2: def get_config_h_filename():
           """Return full pathname of installed pyconfig.h file."""
>>>>>>     if python_build:
>>>>>>         if os.name == "nt":
>>>>>>             inc_dir = os.path.join(project_base, "PC")
               else:
>>>>>>             inc_dir = project_base
           else:
>>>>>>         inc_dir = get_python_inc(plat_specific=1)
>>>>>>     if get_python_version() < '2.2':
>>>>>>         config_h = 'config.h'
           else:
               # The name of the config.h file changed in 2.2
>>>>>>         config_h = 'pyconfig.h'
>>>>>>     return os.path.join(inc_dir, config_h)
       
       
    2: def get_makefile_filename():
           """Return full pathname of installed Makefile from the Python build."""
>>>>>>     if python_build:
>>>>>>         return os.path.join(project_base, "Makefile")
>>>>>>     lib_dir = get_python_lib(plat_specific=1, standard_lib=1)
>>>>>>     return os.path.join(lib_dir, "config", "Makefile")
       
       
    2: def parse_config_h(fp, g=None):
           """Parse a config.h-style file.
       
           A dictionary containing name/value pairs is returned.  If an
           optional dictionary is passed in as the second argument, it is
           used instead of a new dictionary.
           """
>>>>>>     if g is None:
>>>>>>         g = {}
>>>>>>     define_rx = re.compile("#define ([A-Z][A-Za-z0-9_]+) (.*)\n")
>>>>>>     undef_rx = re.compile("/[*] #undef ([A-Z][A-Za-z0-9_]+) [*]/\n")
           #
>>>>>>     while 1:
>>>>>>         line = fp.readline()
>>>>>>         if not line:
>>>>>>             break
>>>>>>         m = define_rx.match(line)
>>>>>>         if m:
>>>>>>             n, v = m.group(1, 2)
>>>>>>             try: v = int(v)
>>>>>>             except ValueError: pass
>>>>>>             g[n] = v
               else:
>>>>>>             m = undef_rx.match(line)
>>>>>>             if m:
>>>>>>                 g[m.group(1)] = 0
>>>>>>     return g
       
       
       # Regexes needed for parsing Makefile (and similar syntaxes,
       # like old-style Setup files).
    2: _variable_rx = re.compile("([a-zA-Z][a-zA-Z0-9_]+)\s*=\s*(.*)")
    2: _findvar1_rx = re.compile(r"\$\(([A-Za-z][A-Za-z0-9_]*)\)")
    2: _findvar2_rx = re.compile(r"\${([A-Za-z][A-Za-z0-9_]*)}")
       
    2: def parse_makefile(fn, g=None):
           """Parse a Makefile-style file.
       
           A dictionary containing name/value pairs is returned.  If an
           optional dictionary is passed in as the second argument, it is
           used instead of a new dictionary.
           """
    2:     from distutils.text_file import TextFile
    2:     fp = TextFile(fn, strip_comments=1, skip_blanks=1, join_lines=1)
       
    2:     if g is None:
    2:         g = {}
    2:     done = {}
    2:     notdone = {}
       
    2:     while 1:
    8:         line = fp.readline()
    8:         if line is None:  # eof
    2:             break
    6:         m = _variable_rx.match(line)
    6:         if m:
    6:             n, v = m.group(1, 2)
    6:             v = v.strip()
                   # `$$' is a literal `$' in make
    6:             tmpv = v.replace('$$', '')
       
    6:             if "$" in tmpv:
    2:                 notdone[n] = v
                   else:
    4:                 try:
    4:                     v = int(v)
    4:                 except ValueError:
                           # insert literal `$'
    4:                     done[n] = v.replace('$$', '$')
                       else:
>>>>>>                     done[n] = v
       
           # do variable interpolation here
    4:     while notdone:
    4:         for name in notdone.keys():
    2:             value = notdone[name]
    2:             m = _findvar1_rx.search(value) or _findvar2_rx.search(value)
    2:             if m:
>>>>>>                 n = m.group(1)
>>>>>>                 found = True
>>>>>>                 if n in done:
>>>>>>                     item = str(done[n])
>>>>>>                 elif n in notdone:
                           # get it on a subsequent round
>>>>>>                     found = False
>>>>>>                 elif n in os.environ:
                           # do it like make: fall back to environment
>>>>>>                     item = os.environ[n]
                       else:
>>>>>>                     done[n] = item = ""
>>>>>>                 if found:
>>>>>>                     after = value[m.end():]
>>>>>>                     value = value[:m.start()] + item + after
>>>>>>                     if "$" in after:
>>>>>>                         notdone[name] = value
                           else:
>>>>>>                         try: value = int(value)
>>>>>>                         except ValueError:
>>>>>>                             done[name] = value.strip()
                               else:
>>>>>>                             done[name] = value
>>>>>>                         del notdone[name]
                   else:
                       # bogus variable reference; just drop it since we can't deal
    2:                 del notdone[name]
       
    2:     fp.close()
       
           # strip spurious spaces
    6:     for k, v in done.items():
    4:         if isinstance(v, str):
    4:             done[k] = v.strip()
       
           # save the results in the global dictionary
    2:     g.update(done)
    2:     return g
       
       
    2: def expand_makefile_vars(s, vars):
           """Expand Makefile-style variables -- "${foo}" or "$(foo)" -- in
           'string' according to 'vars' (a dictionary mapping variable names to
           values).  Variables not present in 'vars' are silently expanded to the
           empty string.  The variable values in 'vars' should not contain further
           variable expansions; if 'vars' is the output of 'parse_makefile()',
           you're fine.  Returns a variable-expanded version of 's'.
           """
       
           # This algorithm does multiple expansion, so if vars['foo'] contains
           # "${bar}", it will expand ${foo} to ${bar}, and then expand
           # ${bar}... and so forth.  This is fine as long as 'vars' comes from
           # 'parse_makefile()', which takes care of such expansions eagerly,
           # according to make's variable expansion semantics.
       
>>>>>>     while 1:
>>>>>>         m = _findvar1_rx.search(s) or _findvar2_rx.search(s)
>>>>>>         if m:
>>>>>>             (beg, end) = m.span()
>>>>>>             s = s[0:beg] + vars.get(m.group(1)) + s[end:]
               else:
>>>>>>             break
>>>>>>     return s
       
       
    2: _config_vars = None
       
    2: def _init_posix():
           """Initialize the module as appropriate for POSIX systems."""
           # _sysconfigdata is generated at build time, see the sysconfig module
    1:     from _sysconfigdata import build_time_vars
           global _config_vars
    1:     _config_vars = {}
    1:     _config_vars.update(build_time_vars)
       
       
    2: def _init_nt():
           """Initialize the module as appropriate for NT"""
>>>>>>     g = {}
           # set basic install directories
>>>>>>     g['LIBDEST'] = get_python_lib(plat_specific=0, standard_lib=1)
>>>>>>     g['BINLIBDEST'] = get_python_lib(plat_specific=1, standard_lib=1)
       
           # XXX hmmm.. a normal install puts include files here
>>>>>>     g['INCLUDEPY'] = get_python_inc(plat_specific=0)
       
>>>>>>     g['SO'] = '.pyd'
>>>>>>     g['EXE'] = ".exe"
>>>>>>     g['VERSION'] = get_python_version().replace(".", "")
>>>>>>     g['BINDIR'] = os.path.dirname(os.path.abspath(sys.executable))
       
           global _config_vars
>>>>>>     _config_vars = g
       
       
    2: def _init_os2():
           """Initialize the module as appropriate for OS/2"""
>>>>>>     g = {}
           # set basic install directories
>>>>>>     g['LIBDEST'] = get_python_lib(plat_specific=0, standard_lib=1)
>>>>>>     g['BINLIBDEST'] = get_python_lib(plat_specific=1, standard_lib=1)
       
           # XXX hmmm.. a normal install puts include files here
>>>>>>     g['INCLUDEPY'] = get_python_inc(plat_specific=0)
       
>>>>>>     g['SO'] = '.pyd'
>>>>>>     g['EXE'] = ".exe"
       
           global _config_vars
>>>>>>     _config_vars = g
       
       
    2: def get_config_vars(*args):
           """With no arguments, return a dictionary of all configuration
           variables relevant for the current platform.  Generally this includes
           everything needed to build extensions and install both pure modules and
           extensions.  On Unix, this means every variable defined in Python's
           installed Makefile; on Windows and Mac OS it's a much smaller set.
       
           With arguments, return a list of values that result from looking up
           each argument in the configuration variable dictionary.
           """
           global _config_vars
  151:     if _config_vars is None:
    1:         func = globals().get("_init_" + os.name)
    1:         if func:
    1:             func()
               else:
>>>>>>             _config_vars = {}
       
               # Normalized versions of prefix and exec_prefix are handy to have;
               # in fact, these are the standard versions used most places in the
               # Distutils.
    1:         _config_vars['prefix'] = PREFIX
    1:         _config_vars['exec_prefix'] = EXEC_PREFIX
       
               # OS X platforms require special customization to handle
               # multi-architecture, multi-os-version installers
    1:         if sys.platform == 'darwin':
    1:             import _osx_support
    1:             _osx_support.customize_config_vars(_config_vars)
       
  151:     if args:
   23:         vals = []
  160:         for name in args:
  137:             vals.append(_config_vars.get(name))
   23:         return vals
           else:
  128:         return _config_vars
       
    2: def get_config_var(name):
           """Return the value of a single variable using the dictionary
           returned by 'get_config_vars()'.  Equivalent to
           get_config_vars().get(name)
           """
   74:     return get_config_vars().get(name)
