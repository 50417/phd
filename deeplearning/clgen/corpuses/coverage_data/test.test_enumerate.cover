    1: import unittest
    1: import sys
       
    1: from test import test_support
       
    2: class G:
    1:     'Sequence using __getitem__'
    1:     def __init__(self, seqn):
   14:         self.seqn = seqn
    1:     def __getitem__(self, i):
10024:         return self.seqn[i]
       
    2: class I:
    1:     'Sequence using iterator protocol'
    1:     def __init__(self, seqn):
   14:         self.seqn = seqn
   14:         self.i = 0
    1:     def __iter__(self):
   14:         return self
    1:     def next(self):
10024:         if self.i >= len(self.seqn): raise StopIteration
10010:         v = self.seqn[self.i]
10010:         self.i += 1
10010:         return v
       
    2: class Ig:
    1:     'Sequence using iterator protocol defined with a generator'
    1:     def __init__(self, seqn):
   14:         self.seqn = seqn
   14:         self.i = 0
    1:     def __iter__(self):
10024:         for val in self.seqn:
10010:             yield val
       
    2: class X:
    1:     'Missing __getitem__ and __iter__'
    1:     def __init__(self, seqn):
    7:         self.seqn = seqn
    7:         self.i = 0
    1:     def next(self):
>>>>>>         if self.i >= len(self.seqn): raise StopIteration
>>>>>>         v = self.seqn[self.i]
>>>>>>         self.i += 1
>>>>>>         return v
       
    2: class E:
    1:     'Test propagation of exceptions'
    1:     def __init__(self, seqn):
    7:         self.seqn = seqn
    7:         self.i = 0
    1:     def __iter__(self):
    7:         return self
    1:     def next(self):
    7:         3 // 0
       
    2: class N:
    1:     'Iterator missing next()'
    1:     def __init__(self, seqn):
    7:         self.seqn = seqn
    7:         self.i = 0
    1:     def __iter__(self):
    7:         return self
       
    2: class EnumerateTestCase(unittest.TestCase):
       
    1:     enum = enumerate
    1:     seq, res = 'abc', [(0,'a'), (1,'b'), (2,'c')]
       
    1:     def test_basicfunction(self):
    4:         self.assertEqual(type(self.enum(self.seq)), self.enum)
    4:         e = self.enum(self.seq)
    4:         self.assertEqual(iter(e), e)
    4:         self.assertEqual(list(self.enum(self.seq)), self.res)
    4:         self.enum.__doc__
       
    1:     def test_getitemseqn(self):
    7:         self.assertEqual(list(self.enum(G(self.seq))), self.res)
    7:         e = self.enum(G(''))
    7:         self.assertRaises(StopIteration, e.next)
       
    1:     def test_iteratorseqn(self):
    7:         self.assertEqual(list(self.enum(I(self.seq))), self.res)
    7:         e = self.enum(I(''))
    7:         self.assertRaises(StopIteration, e.next)
       
    1:     def test_iteratorgenerator(self):
    7:         self.assertEqual(list(self.enum(Ig(self.seq))), self.res)
    7:         e = self.enum(Ig(''))
    7:         self.assertRaises(StopIteration, e.next)
       
    1:     def test_noniterable(self):
    7:         self.assertRaises(TypeError, self.enum, X(self.seq))
       
    1:     def test_illformediterable(self):
    7:         self.assertRaises(TypeError, list, self.enum(N(self.seq)))
       
    1:     def test_exception_propagation(self):
    7:         self.assertRaises(ZeroDivisionError, list, self.enum(E(self.seq)))
       
    1:     def test_argumentcheck(self):
    7:         self.assertRaises(TypeError, self.enum) # no arguments
    7:         self.assertRaises(TypeError, self.enum, 1) # wrong type (not iterable)
    7:         self.assertRaises(TypeError, self.enum, 'abc', 'a') # wrong type
    7:         self.assertRaises(TypeError, self.enum, 'abc', 2, 3) # too many arguments
       
    1:     @test_support.cpython_only
           def test_tuple_reuse(self):
               # Tests an implementation detail where tuple is reused
               # whenever nothing else holds a reference to it
    7:         self.assertEqual(len(set(map(id, list(enumerate(self.seq))))), len(self.seq))
    7:         self.assertEqual(len(set(map(id, enumerate(self.seq)))), min(1,len(self.seq)))
       
    2: class MyEnum(enumerate):
    1:     pass
       
    2: class SubclassTestCase(EnumerateTestCase):
       
    1:     enum = MyEnum
       
    2: class TestEmpty(EnumerateTestCase):
       
    1:     seq, res = '', []
       
    2: class TestBig(EnumerateTestCase):
       
    1:     seq = range(10,20000,2)
    1:     res = zip(range(20000), seq)
       
    2: class TestReversed(unittest.TestCase):
       
    1:     def test_simple(self):
    2:         class A:
    1:             def __getitem__(self, i):
   11:                 if i < 5:
   10:                     return str(i)
    1:                 raise StopIteration
    1:             def __len__(self):
    3:                 return 5
    6:         for data in 'abc', range(5), tuple(enumerate('abc')), A(), xrange(1,17,5):
    5:             self.assertEqual(list(data)[::-1], list(reversed(data)))
    1:         self.assertRaises(TypeError, reversed, {})
               # don't allow keyword arguments
    1:         self.assertRaises(TypeError, reversed, [], a=1)
       
    1:     def test_classic_class(self):
    2:         class A:
    1:             def __reversed__(self):
    1:                 return [2, 1]
    1:         self.assertEqual(list(reversed(A())), [2, 1])
       
    1:     def test_xrange_optimization(self):
    1:         x = xrange(1)
    1:         self.assertEqual(type(reversed(x)), type(iter(x)))
       
    1:     @test_support.cpython_only
           def test_len(self):
               # This is an implementation detail, not an interface requirement
    1:         from test.test_iterlen import len
    5:         for s in ('hello', tuple('hello'), list('hello'), xrange(5)):
    4:             self.assertEqual(len(reversed(s)), len(s))
    4:             r = reversed(s)
    4:             list(r)
    4:             self.assertEqual(len(r), 0)
    2:         class SeqWithWeirdLen:
    1:             called = False
    1:             def __len__(self):
    2:                 if not self.called:
    1:                     self.called = True
    1:                     return 10
    1:                 raise ZeroDivisionError
    1:             def __getitem__(self, index):
>>>>>>                 return index
    1:         r = reversed(SeqWithWeirdLen())
    1:         self.assertRaises(ZeroDivisionError, len, r)
       
       
    1:     def test_gc(self):
    2:         class Seq:
    1:             def __len__(self):
    1:                 return 10
    1:             def __getitem__(self, index):
>>>>>>                 return index
    1:         s = Seq()
    1:         r = reversed(s)
    1:         s.r = r
       
    1:     def test_args(self):
    1:         self.assertRaises(TypeError, reversed)
    1:         self.assertRaises(TypeError, reversed, [], 'extra')
       
    1:     @unittest.skipUnless(hasattr(sys, 'getrefcount'), 'test needs sys.getrefcount()')
           def test_bug1229429(self):
               # this bug was never in reversed, it was in
               # PyObject_CallMethod, and reversed_new calls that sometimes.
    1:         def f():
>>>>>>             pass
    1:         r = f.__reversed__ = object()
    1:         rc = sys.getrefcount(r)
   11:         for i in range(10):
   10:             try:
   10:                 reversed(f)
   10:             except TypeError:
   10:                 pass
                   else:
>>>>>>                 self.fail("non-callable __reversed__ didn't raise!")
    1:         self.assertEqual(rc, sys.getrefcount(r))
       
    1:     def test_objmethods(self):
               # Objects must have __len__() and __getitem__() implemented.
    2:         class NoLen(object):
    1:             def __getitem__(self): return 1
    1:         nl = NoLen()
    1:         self.assertRaises(TypeError, reversed, nl)
       
    2:         class NoGetItem(object):
    1:             def __len__(self): return 2
    1:         ngi = NoGetItem()
    1:         self.assertRaises(TypeError, reversed, ngi)
       
       
    2: class EnumerateStartTestCase(EnumerateTestCase):
       
    1:     def test_basicfunction(self):
    3:         e = self.enum(self.seq)
    3:         self.assertEqual(iter(e), e)
    3:         self.assertEqual(list(self.enum(self.seq)), self.res)
       
       
    2: class TestStart(EnumerateStartTestCase):
       
   13:     enum = lambda self, i: enumerate(i, start=11)
    1:     seq, res = 'abc', [(11, 'a'), (12, 'b'), (13, 'c')]
       
       
    2: class TestLongStart(EnumerateStartTestCase):
       
   13:     enum = lambda self, i: enumerate(i, start=sys.maxint+1)
    1:     seq, res = 'abc', [(sys.maxint+1,'a'), (sys.maxint+2,'b'),
    1:                        (sys.maxint+3,'c')]
       
       
    1: def test_main(verbose=None):
    1:     test_support.run_unittest(__name__)
       
           # verify reference counting
    1:     if verbose and hasattr(sys, "gettotalrefcount"):
>>>>>>         counts = [None] * 5
>>>>>>         for i in xrange(len(counts)):
>>>>>>             test_support.run_unittest(__name__)
>>>>>>             counts[i] = sys.gettotalrefcount()
>>>>>>         print counts
       
    1: if __name__ == "__main__":
>>>>>>     test_main(verbose=True)
