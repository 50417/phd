       """
       Fixer that changes zip(seq0, seq1, ...) into list(zip(seq0, seq1, ...)
       unless there exists a 'from future_builtins import zip' statement in the
       top-level namespace.
       
       We avoid the transformation if the zip() call is directly contained in
       iter(<>), list(<>), tuple(<>), sorted(<>), ...join(<>), or for V in <>:.
    1: """
       
       # Local imports
    1: from .. import fixer_base
    1: from ..fixer_util import Name, Call, in_special_context
       
    2: class FixZip(fixer_base.ConditionalFix):
       
    1:     BM_compatible = True
           PATTERN = """
           power< 'zip' args=trailer< '(' [any] ')' >
           >
    1:     """
       
    1:     skip_on = "future_builtins.zip"
       
    1:     def transform(self, node, results):
   27:         if self.should_skip(node):
    5:             return
       
   22:         if in_special_context(node):
   19:             return None
       
    3:         new = node.clone()
    3:         new.prefix = u""
    3:         new = Call(Name(u"list"), [new])
    3:         new.prefix = node.prefix
    3:         return new
