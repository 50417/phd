    1: from collections import deque
    1: import unittest
    1: from test import test_support, seq_tests
    1: import gc
    1: import weakref
    1: import copy
    1: import cPickle as pickle
    1: import random
    1: import struct
       
    1: BIG = 100000
       
    1: def fail():
    1:     raise SyntaxError
>>>>>>     yield 1
       
    2: class BadCmp:
    1:     def __eq__(self, other):
    1:         raise RuntimeError
       
    2: class MutateCmp:
    1:     def __init__(self, deque, result):
    2:         self.deque = deque
    2:         self.result = result
    1:     def __eq__(self, other):
    2:         self.deque.clear()
    2:         return self.result
       
    2: class TestBasic(unittest.TestCase):
       
    1:     def test_basics(self):
    1:         d = deque(xrange(-5125, -5000))
    1:         d.__init__(xrange(200))
  201:         for i in xrange(200, 400):
  200:             d.append(i)
  201:         for i in reversed(xrange(-200, 0)):
  200:             d.appendleft(i)
    1:         self.assertEqual(list(d), range(-200, 400))
    1:         self.assertEqual(len(d), 600)
       
  251:         left = [d.popleft() for i in xrange(250)]
    1:         self.assertEqual(left, range(-200, 50))
    1:         self.assertEqual(list(d), range(50, 400))
       
  251:         right = [d.pop() for i in xrange(250)]
    1:         right.reverse()
    1:         self.assertEqual(right, range(150, 400))
    1:         self.assertEqual(list(d), range(50, 150))
       
    1:     def test_maxlen(self):
    1:         self.assertRaises(ValueError, deque, 'abc', -1)
    1:         self.assertRaises(ValueError, deque, 'abc', -2)
    1:         it = iter(range(10))
    1:         d = deque(it, maxlen=3)
    1:         self.assertEqual(list(it), [])
    1:         self.assertEqual(repr(d), 'deque([7, 8, 9], maxlen=3)')
    1:         self.assertEqual(list(d), range(7, 10))
    1:         self.assertEqual(d, deque(range(10), 3))
    1:         d.append(10)
    1:         self.assertEqual(list(d), range(8, 11))
    1:         d.appendleft(7)
    1:         self.assertEqual(list(d), range(7, 10))
    1:         d.extend([10, 11])
    1:         self.assertEqual(list(d), range(9, 12))
    1:         d.extendleft([8, 7])
    1:         self.assertEqual(list(d), range(7, 10))
    1:         d = deque(xrange(200), maxlen=10)
    1:         d.append(d)
    1:         test_support.unlink(test_support.TESTFN)
    1:         fo = open(test_support.TESTFN, "wb")
    1:         try:
    1:             print >> fo, d,
    1:             fo.close()
    1:             fo = open(test_support.TESTFN, "rb")
    1:             self.assertEqual(fo.read(), repr(d))
               finally:
    1:             fo.close()
    1:             test_support.unlink(test_support.TESTFN)
       
    1:         d = deque(range(10), maxlen=None)
    1:         self.assertEqual(repr(d), 'deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])')
    1:         fo = open(test_support.TESTFN, "wb")
    1:         try:
    1:             print >> fo, d,
    1:             fo.close()
    1:             fo = open(test_support.TESTFN, "rb")
    1:             self.assertEqual(fo.read(), repr(d))
               finally:
    1:             fo.close()
    1:             test_support.unlink(test_support.TESTFN)
       
    1:     def test_maxlen_zero(self):
    1:         it = iter(range(100))
    1:         deque(it, maxlen=0)
    1:         self.assertEqual(list(it), [])
       
    1:         it = iter(range(100))
    1:         d = deque(maxlen=0)
    1:         d.extend(it)
    1:         self.assertEqual(list(it), [])
       
    1:         it = iter(range(100))
    1:         d = deque(maxlen=0)
    1:         d.extendleft(it)
    1:         self.assertEqual(list(it), [])
       
    1:     def test_maxlen_attribute(self):
    1:         self.assertEqual(deque().maxlen, None)
    1:         self.assertEqual(deque('abc').maxlen, None)
    1:         self.assertEqual(deque('abc', maxlen=4).maxlen, 4)
    1:         self.assertEqual(deque('abc', maxlen=2).maxlen, 2)
    1:         self.assertEqual(deque('abc', maxlen=0).maxlen, 0)
    1:         with self.assertRaises(AttributeError):
    1:             d = deque('abc')
    1:             d.maxlen = 10
       
    1:     def test_count(self):
    4:         for s in ('', 'abracadabra', 'simsalabim'*500+'abc'):
    3:             s = list(s)
    3:             d = deque(s)
   81:             for letter in 'abcdefghijklmnopqrstuvwxyz':
   78:                 self.assertEqual(s.count(letter), d.count(letter), (s, d, letter))
    1:         self.assertRaises(TypeError, d.count)       # too few args
    1:         self.assertRaises(TypeError, d.count, 1, 2) # too many args
    2:         class BadCompare:
    1:             def __eq__(self, other):
    2:                 raise ArithmeticError
    1:         d = deque([1, 2, BadCompare(), 3])
    1:         self.assertRaises(ArithmeticError, d.count, 2)
    1:         d = deque([1, 2, 3])
    1:         self.assertRaises(ArithmeticError, d.count, BadCompare())
    2:         class MutatingCompare:
    1:             def __eq__(self, other):
    1:                 self.d.pop()
    1:                 return True
    1:         m = MutatingCompare()
    1:         d = deque([1, 2, 3, m, 4, 5])
    1:         m.d = d
    1:         self.assertRaises(RuntimeError, d.count, 3)
       
               # test issue11004
               # block advance failed after rotation aligned elements on right side of block
    1:         d = deque([None]*16)
   17:         for i in range(len(d)):
   16:             d.rotate(-1)
    1:         d.rotate(1)
    1:         self.assertEqual(d.count(1), 0)
    1:         self.assertEqual(d.count(None), 16)
       
    1:     def test_comparisons(self):
    1:         d = deque('xabc'); d.popleft()
    6:         for e in [d, deque('abc'), deque('ab'), deque(), list(d)]:
    5:             self.assertEqual(d==e, type(d)==type(e) and list(d)==list(e))
    5:             self.assertEqual(d!=e, not(type(d)==type(e) and list(d)==list(e)))
       
    1:         args = map(deque, ('', 'a', 'b', 'ab', 'ba', 'abc', 'xba', 'xabc', 'cba'))
   10:         for x in args:
   90:             for y in args:
   81:                 self.assertEqual(x == y, list(x) == list(y), (x,y))
   81:                 self.assertEqual(x != y, list(x) != list(y), (x,y))
   81:                 self.assertEqual(x <  y, list(x) <  list(y), (x,y))
   81:                 self.assertEqual(x <= y, list(x) <= list(y), (x,y))
   81:                 self.assertEqual(x >  y, list(x) >  list(y), (x,y))
   81:                 self.assertEqual(x >= y, list(x) >= list(y), (x,y))
   81:                 self.assertEqual(cmp(x,y), cmp(list(x),list(y)), (x,y))
       
    1:     def test_extend(self):
    1:         d = deque('a')
    1:         self.assertRaises(TypeError, d.extend, 1)
    1:         d.extend('bcd')
    1:         self.assertEqual(list(d), list('abcd'))
    1:         d.extend(d)
    1:         self.assertEqual(list(d), list('abcdabcd'))
       
    1:     def test_iadd(self):
    1:         d = deque('a')
    1:         d += 'bcd'
    1:         self.assertEqual(list(d), list('abcd'))
    1:         d += d
    1:         self.assertEqual(list(d), list('abcdabcd'))
       
    1:     def test_extendleft(self):
    1:         d = deque('a')
    1:         self.assertRaises(TypeError, d.extendleft, 1)
    1:         d.extendleft('bcd')
    1:         self.assertEqual(list(d), list(reversed('abcd')))
    1:         d.extendleft(d)
    1:         self.assertEqual(list(d), list('abcddcba'))
    1:         d = deque()
    1:         d.extendleft(range(1000))
    1:         self.assertEqual(list(d), list(reversed(range(1000))))
    1:         self.assertRaises(SyntaxError, d.extendleft, fail())
       
    1:     def test_getitem(self):
    1:         n = 200
    1:         d = deque(xrange(n))
    1:         l = range(n)
  201:         for i in xrange(n):
  200:             d.popleft()
  200:             l.pop(0)
  200:             if random.random() < 0.5:
  106:                 d.append(i)
  106:                 l.append(i)
61218:             for j in xrange(1-len(l), len(l)):
61018:                 assert d[j] == l[j]
       
    1:         d = deque('superman')
    1:         self.assertEqual(d[0], 's')
    1:         self.assertEqual(d[-1], 'n')
    1:         d = deque()
    1:         self.assertRaises(IndexError, d.__getitem__, 0)
    1:         self.assertRaises(IndexError, d.__getitem__, -1)
       
    1:     def test_setitem(self):
    1:         n = 200
    1:         d = deque(xrange(n))
  201:         for i in xrange(n):
  200:             d[i] = 10 * i
  201:         self.assertEqual(list(d), [10*i for i in xrange(n)])
    1:         l = list(d)
    1:         for i in xrange(1-n, 0, -1):
>>>>>>             d[i] = 7*i
>>>>>>             l[i] = 7*i
    1:         self.assertEqual(list(d), l)
       
    1:     def test_delitem(self):
    1:         n = 500         # O(n**2) test, don't make this too big
    1:         d = deque(xrange(n))
    1:         self.assertRaises(IndexError, d.__delitem__, -n-1)
    1:         self.assertRaises(IndexError, d.__delitem__, n)
  501:         for i in xrange(n):
  500:             self.assertEqual(len(d), n-i)
  500:             j = random.randrange(-len(d), len(d))
  500:             val = d[j]
  500:             self.assertIn(val, d)
  500:             del d[j]
  500:             self.assertNotIn(val, d)
    1:         self.assertEqual(len(d), 0)
       
    1:     def test_reverse(self):
    1:         n = 500         # O(n**2) test, don't make this too big
  501:         data = [random.random() for i in range(n)]
  501:         for i in range(n):
  500:             d = deque(data[:i])
  500:             r = d.reverse()
  500:             self.assertEqual(list(d), list(reversed(data[:i])))
  500:             self.assertIs(r, None)
  500:             d.reverse()
  500:             self.assertEqual(list(d), data[:i])
    1:         self.assertRaises(TypeError, d.reverse, 1)          # Arity is zero
       
    1:     def test_rotate(self):
    1:         s = tuple('abcde')
    1:         n = len(s)
       
    1:         d = deque(s)
    1:         d.rotate(1)             # verify rot(1)
    1:         self.assertEqual(''.join(d), 'eabcd')
       
    1:         d = deque(s)
    1:         d.rotate(-1)            # verify rot(-1)
    1:         self.assertEqual(''.join(d), 'bcdea')
    1:         d.rotate()              # check default to 1
    1:         self.assertEqual(tuple(d), s)
       
   16:         for i in xrange(n*3):
   15:             d = deque(s)
   15:             e = deque(d)
   15:             d.rotate(i)         # check vs. rot(1) n times
  120:             for j in xrange(i):
  105:                 e.rotate(1)
   15:             self.assertEqual(tuple(d), tuple(e))
   15:             d.rotate(-i)        # check that it works in reverse
   15:             self.assertEqual(tuple(d), s)
   15:             e.rotate(n-i)       # check that it wraps forward
   15:             self.assertEqual(tuple(e), s)
       
   16:         for i in xrange(n*3):
   15:             d = deque(s)
   15:             e = deque(d)
   15:             d.rotate(-i)
  120:             for j in xrange(i):
  105:                 e.rotate(-1)    # check vs. rot(-1) n times
   15:             self.assertEqual(tuple(d), tuple(e))
   15:             d.rotate(i)         # check that it works in reverse
   15:             self.assertEqual(tuple(d), s)
   15:             e.rotate(i-n)       # check that it wraps backaround
   15:             self.assertEqual(tuple(e), s)
       
    1:         d = deque(s)
    1:         e = deque(s)
    1:         e.rotate(BIG+17)        # verify on long series of rotates
    1:         dr = d.rotate
100018:         for i in xrange(BIG+17):
100017:             dr()
    1:         self.assertEqual(tuple(d), tuple(e))
       
    1:         self.assertRaises(TypeError, d.rotate, 'x')   # Wrong arg type
    1:         self.assertRaises(TypeError, d.rotate, 1, 10) # Too many args
       
    1:         d = deque()
    1:         d.rotate()              # rotate an empty deque
    1:         self.assertEqual(d, deque())
       
    1:     def test_len(self):
    1:         d = deque('ab')
    1:         self.assertEqual(len(d), 2)
    1:         d.popleft()
    1:         self.assertEqual(len(d), 1)
    1:         d.pop()
    1:         self.assertEqual(len(d), 0)
    1:         self.assertRaises(IndexError, d.pop)
    1:         self.assertEqual(len(d), 0)
    1:         d.append('c')
    1:         self.assertEqual(len(d), 1)
    1:         d.appendleft('d')
    1:         self.assertEqual(len(d), 2)
    1:         d.clear()
    1:         self.assertEqual(len(d), 0)
       
    1:     def test_underflow(self):
    1:         d = deque()
    1:         self.assertRaises(IndexError, d.pop)
    1:         self.assertRaises(IndexError, d.popleft)
       
    1:     def test_clear(self):
    1:         d = deque(xrange(100))
    1:         self.assertEqual(len(d), 100)
    1:         d.clear()
    1:         self.assertEqual(len(d), 0)
    1:         self.assertEqual(list(d), [])
    1:         d.clear()               # clear an empty deque
    1:         self.assertEqual(list(d), [])
       
    1:     def test_remove(self):
    1:         d = deque('abcdefghcij')
    1:         d.remove('c')
    1:         self.assertEqual(d, deque('abdefghcij'))
    1:         d.remove('c')
    1:         self.assertEqual(d, deque('abdefghij'))
    1:         self.assertRaises(ValueError, d.remove, 'c')
    1:         self.assertEqual(d, deque('abdefghij'))
       
               # Handle comparison errors
    1:         d = deque(['a', 'b', BadCmp(), 'c'])
    1:         e = deque(d)
    1:         self.assertRaises(RuntimeError, d.remove, 'c')
    5:         for x, y in zip(d, e):
                   # verify that original order and values are retained.
    4:             self.assertTrue(x is y)
       
               # Handle evil mutator
    3:         for match in (True, False):
    2:             d = deque(['ab'])
    2:             d.extend([MutateCmp(d, match), 'c'])
    2:             self.assertRaises(IndexError, d.remove, 'c')
    2:             self.assertEqual(d, deque())
       
    1:     def test_repr(self):
    1:         d = deque(xrange(200))
    1:         e = eval(repr(d))
    1:         self.assertEqual(list(d), list(e))
    1:         d.append(d)
    1:         self.assertIn('...', repr(d))
       
    1:     def test_print(self):
    1:         d = deque(xrange(200))
    1:         d.append(d)
    1:         test_support.unlink(test_support.TESTFN)
    1:         fo = open(test_support.TESTFN, "wb")
    1:         try:
    1:             print >> fo, d,
    1:             fo.close()
    1:             fo = open(test_support.TESTFN, "rb")
    1:             self.assertEqual(fo.read(), repr(d))
               finally:
    1:             fo.close()
    1:             test_support.unlink(test_support.TESTFN)
       
    1:     def test_init(self):
    1:         self.assertRaises(TypeError, deque, 'abc', 2, 3);
    1:         self.assertRaises(TypeError, deque, 1);
       
    1:     def test_hash(self):
    1:         self.assertRaises(TypeError, hash, deque('abc'))
       
    1:     def test_long_steadystate_queue_popleft(self):
    6:         for size in (0, 1, 2, 100, 1000):
    5:             d = deque(xrange(size))
    5:             append, pop = d.append, d.popleft
498902:             for i in xrange(size, BIG):
498897:                 append(i)
498897:                 x = pop()
498897:                 if x != i - size:
>>>>>>                     self.assertEqual(x, i-size)
    5:             self.assertEqual(list(d), range(BIG-size, BIG))
       
    1:     def test_long_steadystate_queue_popright(self):
    6:         for size in (0, 1, 2, 100, 1000):
    5:             d = deque(reversed(xrange(size)))
    5:             append, pop = d.appendleft, d.pop
498902:             for i in xrange(size, BIG):
498897:                 append(i)
498897:                 x = pop()
498897:                 if x != i - size:
>>>>>>                     self.assertEqual(x, i-size)
    5:             self.assertEqual(list(reversed(list(d))), range(BIG-size, BIG))
       
    1:     def test_big_queue_popleft(self):
               pass
    1:         d = deque()
    1:         append, pop = d.append, d.popleft
100001:         for i in xrange(BIG):
100000:             append(i)
100001:         for i in xrange(BIG):
100000:             x = pop()
100000:             if x != i:
>>>>>>                 self.assertEqual(x, i)
       
    1:     def test_big_queue_popright(self):
    1:         d = deque()
    1:         append, pop = d.appendleft, d.pop
100001:         for i in xrange(BIG):
100000:             append(i)
100001:         for i in xrange(BIG):
100000:             x = pop()
100000:             if x != i:
>>>>>>                 self.assertEqual(x, i)
       
    1:     def test_big_stack_right(self):
    1:         d = deque()
    1:         append, pop = d.append, d.pop
100001:         for i in xrange(BIG):
100000:             append(i)
100001:         for i in reversed(xrange(BIG)):
100000:             x = pop()
100000:             if x != i:
>>>>>>                 self.assertEqual(x, i)
    1:         self.assertEqual(len(d), 0)
       
    1:     def test_big_stack_left(self):
    1:         d = deque()
    1:         append, pop = d.appendleft, d.popleft
100001:         for i in xrange(BIG):
100000:             append(i)
100001:         for i in reversed(xrange(BIG)):
100000:             x = pop()
100000:             if x != i:
>>>>>>                 self.assertEqual(x, i)
    1:         self.assertEqual(len(d), 0)
       
    1:     def test_roundtrip_iter_init(self):
    1:         d = deque(xrange(200))
    1:         e = deque(d)
    1:         self.assertNotEqual(id(d), id(e))
    1:         self.assertEqual(list(d), list(e))
       
    1:     def test_pickle(self):
    1:         d = deque(xrange(200))
    4:         for i in range(pickle.HIGHEST_PROTOCOL + 1):
    3:             s = pickle.dumps(d, i)
    3:             e = pickle.loads(s)
    3:             self.assertNotEqual(id(d), id(e))
    3:             self.assertEqual(list(d), list(e))
       
       ##    def test_pickle_recursive(self):
       ##        d = deque('abc')
       ##        d.append(d)
       ##        for i in range(pickle.HIGHEST_PROTOCOL + 1):
       ##            e = pickle.loads(pickle.dumps(d, i))
       ##            self.assertNotEqual(id(d), id(e))
       ##            self.assertEqual(id(e), id(e[-1]))
       
    1:     def test_deepcopy(self):
    1:         mut = [10]
    1:         d = deque([mut])
    1:         e = copy.deepcopy(d)
    1:         self.assertEqual(list(d), list(e))
    1:         mut[0] = 11
    1:         self.assertNotEqual(id(d), id(e))
    1:         self.assertNotEqual(list(d), list(e))
       
    1:     def test_copy(self):
    1:         mut = [10]
    1:         d = deque([mut])
    1:         e = copy.copy(d)
    1:         self.assertEqual(list(d), list(e))
    1:         mut[0] = 11
    1:         self.assertNotEqual(id(d), id(e))
    1:         self.assertEqual(list(d), list(e))
       
    1:     def test_reversed(self):
    3:         for s in ('abcd', xrange(2000)):
    2:             self.assertEqual(list(reversed(deque(s))), list(reversed(s)))
       
    1:     def test_gc_doesnt_blowup(self):
    1:         import gc
               # This used to assert-fail in deque_traverse() under a debug
               # build, or run wild with a NULL pointer in a release build.
    1:         d = deque()
  101:         for i in xrange(100):
  100:             d.append(1)
  100:             gc.collect()
       
    1:     def test_container_iterator(self):
               # Bug #3680: tp_traverse was not implemented for deque iterator objects
    2:         class C(object):
    1:             pass
    3:         for i in range(2):
    2:             obj = C()
    2:             ref = weakref.ref(obj)
    2:             if i == 0:
    1:                 container = deque([obj, 1])
                   else:
    1:                 container = reversed(deque([obj, 1]))
    2:             obj.x = iter(container)
    2:             del obj, container
    2:             gc.collect()
    2:             self.assertTrue(ref() is None, "Cycle was not collected")
       
    1:     check_sizeof = test_support.check_sizeof
       
    1:     @test_support.cpython_only
           def test_sizeof(self):
    1:         BLOCKLEN = 62
    1:         basesize = test_support.calcobjsize('2P3PlPP')
    1:         blocksize = struct.calcsize('%dP2P' % BLOCKLEN)
    1:         self.assertEqual(object.__sizeof__(deque()), basesize)
    1:         check = self.check_sizeof
    1:         check(deque(), basesize + blocksize)
    1:         check(deque('a'), basesize + blocksize)
    1:         check(deque('a' * (BLOCKLEN // 2)), basesize + blocksize)
    1:         check(deque('a' * (BLOCKLEN // 2 + 1)), basesize + 2 * blocksize)
    1:         check(deque('a' * (42 * BLOCKLEN)), basesize + 43 * blocksize)
       
    2: class TestVariousIteratorArgs(unittest.TestCase):
       
    1:     def test_constructor(self):
    6:         for s in ("123", "", range(1000), ('do', 1.2), xrange(2000,2200,5)):
    5:             for g in (seq_tests.Sequence, seq_tests.IterFunc,
    5:                       seq_tests.IterGen, seq_tests.IterFuncStop,
   35:                       seq_tests.itermulti, seq_tests.iterfunc):
   30:                 self.assertEqual(list(deque(g(s))), list(g(s)))
    5:             self.assertRaises(TypeError, deque, seq_tests.IterNextOnly(s))
    5:             self.assertRaises(TypeError, deque, seq_tests.IterNoNext(s))
    5:             self.assertRaises(ZeroDivisionError, deque, seq_tests.IterGenExc(s))
       
    1:     def test_iter_with_altered_data(self):
    1:         d = deque('abcdefg')
    1:         it = iter(d)
    1:         d.pop()
    1:         self.assertRaises(RuntimeError, it.next)
       
    1:     def test_runtime_error_on_empty_deque(self):
    1:         d = deque()
    1:         it = iter(d)
    1:         d.append(10)
    1:         self.assertRaises(RuntimeError, it.next)
       
    2: class Deque(deque):
    1:     pass
       
    2: class DequeWithBadIter(deque):
    1:     def __iter__(self):
>>>>>>         raise TypeError
       
    2: class TestSubclass(unittest.TestCase):
       
    1:     def test_basics(self):
    1:         d = Deque(xrange(25))
    1:         d.__init__(xrange(200))
  201:         for i in xrange(200, 400):
  200:             d.append(i)
  201:         for i in reversed(xrange(-200, 0)):
  200:             d.appendleft(i)
    1:         self.assertEqual(list(d), range(-200, 400))
    1:         self.assertEqual(len(d), 600)
       
  251:         left = [d.popleft() for i in xrange(250)]
    1:         self.assertEqual(left, range(-200, 50))
    1:         self.assertEqual(list(d), range(50, 400))
       
  251:         right = [d.pop() for i in xrange(250)]
    1:         right.reverse()
    1:         self.assertEqual(right, range(150, 400))
    1:         self.assertEqual(list(d), range(50, 150))
       
    1:         d.clear()
    1:         self.assertEqual(len(d), 0)
       
    1:     def test_copy_pickle(self):
       
    1:         d = Deque('abc')
       
    1:         e = d.__copy__()
    1:         self.assertEqual(type(d), type(e))
    1:         self.assertEqual(list(d), list(e))
       
    1:         e = Deque(d)
    1:         self.assertEqual(type(d), type(e))
    1:         self.assertEqual(list(d), list(e))
       
    4:         for proto in range(pickle.HIGHEST_PROTOCOL + 1):
    3:             s = pickle.dumps(d, proto)
    3:             e = pickle.loads(s)
    3:             self.assertNotEqual(id(d), id(e))
    3:             self.assertEqual(type(d), type(e))
    3:             self.assertEqual(list(d), list(e))
       
    1:         d = Deque('abcde', maxlen=4)
       
    1:         e = d.__copy__()
    1:         self.assertEqual(type(d), type(e))
    1:         self.assertEqual(list(d), list(e))
       
    1:         e = Deque(d)
    1:         self.assertEqual(type(d), type(e))
    1:         self.assertEqual(list(d), list(e))
       
    4:         for proto in range(pickle.HIGHEST_PROTOCOL + 1):
    3:             s = pickle.dumps(d, proto)
    3:             e = pickle.loads(s)
    3:             self.assertNotEqual(id(d), id(e))
    3:             self.assertEqual(type(d), type(e))
    3:             self.assertEqual(list(d), list(e))
       
       ##    def test_pickle(self):
       ##        d = Deque('abc')
       ##        d.append(d)
       ##
       ##        e = pickle.loads(pickle.dumps(d))
       ##        self.assertNotEqual(id(d), id(e))
       ##        self.assertEqual(type(d), type(e))
       ##        dd = d.pop()
       ##        ee = e.pop()
       ##        self.assertEqual(id(e), id(ee))
       ##        self.assertEqual(d, e)
       ##
       ##        d.x = d
       ##        e = pickle.loads(pickle.dumps(d))
       ##        self.assertEqual(id(e), id(e.x))
       ##
       ##        d = DequeWithBadIter('abc')
       ##        self.assertRaises(TypeError, pickle.dumps, d)
       
    1:     def test_weakref(self):
    1:         d = deque('gallahad')
    1:         p = weakref.proxy(d)
    1:         self.assertEqual(str(p), str(d))
    1:         d = None
    1:         self.assertRaises(ReferenceError, str, p)
       
    1:     def test_strange_subclass(self):
    2:         class X(deque):
    1:             def __iter__(self):
    2:                 return iter([])
    1:         d1 = X([1,2,3])
    1:         d2 = X([4,5,6])
    1:         d1 == d2   # not clear if this is supposed to be True or False,
                          # but it used to give a SystemError
       
       
    2: class SubclassWithKwargs(deque):
    1:     def __init__(self, newarg=1):
    1:         deque.__init__(self)
       
    2: class TestSubclassWithKwargs(unittest.TestCase):
    1:     def test_subclass_with_kwargs(self):
               # SF bug #1486663 -- this used to erroneously raise a TypeError
    1:         SubclassWithKwargs(newarg=1)
       
    1:     def test_free_after_iterating(self):
               # For now, bypass tests that require slicing
    1:         self.skipTest("Exhausted deque iterator doesn't free a deque")
       
       #==============================================================================
       
       libreftest = """
       Example from the Library Reference:  Doc/lib/libcollections.tex
       
       >>> from collections import deque
       >>> d = deque('ghi')                 # make a new deque with three items
       >>> for elem in d:                   # iterate over the deque's elements
       ...     print elem.upper()
       G
       H
       I
       >>> d.append('j')                    # add a new entry to the right side
       >>> d.appendleft('f')                # add a new entry to the left side
       >>> d                                # show the representation of the deque
       deque(['f', 'g', 'h', 'i', 'j'])
       >>> d.pop()                          # return and remove the rightmost item
       'j'
       >>> d.popleft()                      # return and remove the leftmost item
       'f'
       >>> list(d)                          # list the contents of the deque
       ['g', 'h', 'i']
       >>> d[0]                             # peek at leftmost item
       'g'
       >>> d[-1]                            # peek at rightmost item
       'i'
       >>> list(reversed(d))                # list the contents of a deque in reverse
       ['i', 'h', 'g']
       >>> 'h' in d                         # search the deque
       True
       >>> d.extend('jkl')                  # add multiple elements at once
       >>> d
       deque(['g', 'h', 'i', 'j', 'k', 'l'])
       >>> d.rotate(1)                      # right rotation
       >>> d
       deque(['l', 'g', 'h', 'i', 'j', 'k'])
       >>> d.rotate(-1)                     # left rotation
       >>> d
       deque(['g', 'h', 'i', 'j', 'k', 'l'])
       >>> deque(reversed(d))               # make a new deque in reverse order
       deque(['l', 'k', 'j', 'i', 'h', 'g'])
       >>> d.clear()                        # empty the deque
       >>> d.pop()                          # cannot pop from an empty deque
       Traceback (most recent call last):
         File "<pyshell#6>", line 1, in -toplevel-
           d.pop()
       IndexError: pop from an empty deque
       
       >>> d.extendleft('abc')              # extendleft() reverses the input order
       >>> d
       deque(['c', 'b', 'a'])
       
       
       
       >>> def delete_nth(d, n):
       ...     d.rotate(-n)
       ...     d.popleft()
       ...     d.rotate(n)
       ...
       >>> d = deque('abcdef')
       >>> delete_nth(d, 2)   # remove the entry at d[2]
       >>> d
       deque(['a', 'b', 'd', 'e', 'f'])
       
       
       
       >>> def roundrobin(*iterables):
       ...     pending = deque(iter(i) for i in iterables)
       ...     while pending:
       ...         task = pending.popleft()
       ...         try:
       ...             yield task.next()
       ...         except StopIteration:
       ...             continue
       ...         pending.append(task)
       ...
       
       >>> for value in roundrobin('abc', 'd', 'efgh'):
       ...     print value
       ...
       a
       d
       e
       b
       f
       c
       g
       h
       
       
       >>> def maketree(iterable):
       ...     d = deque(iterable)
       ...     while len(d) > 1:
       ...         pair = [d.popleft(), d.popleft()]
       ...         d.append(pair)
       ...     return list(d)
       ...
       >>> print maketree('abcdefgh')
       [[[['a', 'b'], ['c', 'd']], [['e', 'f'], ['g', 'h']]]]
       
    1: """
       
       
       #==============================================================================
       
    1: __test__ = {'libreftest' : libreftest}
       
    1: def test_main(verbose=None):
    1:     import sys
           test_classes = (
    1:         TestBasic,
    1:         TestVariousIteratorArgs,
    1:         TestSubclass,
    1:         TestSubclassWithKwargs,
           )
       
    1:     test_support.run_unittest(*test_classes)
       
           # verify reference counting
    1:     if verbose and hasattr(sys, "gettotalrefcount"):
>>>>>>         import gc
>>>>>>         counts = [None] * 5
>>>>>>         for i in xrange(len(counts)):
>>>>>>             test_support.run_unittest(*test_classes)
>>>>>>             gc.collect()
>>>>>>             counts[i] = sys.gettotalrefcount()
>>>>>>         print counts
       
           # doctests
    1:     from test import test_deque
    1:     test_support.run_doctest(test_deque, verbose)
       
    1: if __name__ == "__main__":
>>>>>>     test_main(verbose=True)
