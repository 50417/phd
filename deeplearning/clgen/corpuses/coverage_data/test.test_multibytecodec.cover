       # test_multibytecodec.py
       #   Unit test for multibytecodec itself
       #
       
    1: from test import test_support
    1: from test.test_support import TESTFN
    1: import unittest, StringIO, codecs, sys, os
    1: import _multibytecodec
       
       ALL_CJKENCODINGS = [
       # _codecs_cn
    1:     'gb2312', 'gbk', 'gb18030', 'hz',
       # _codecs_hk
    1:     'big5hkscs',
       # _codecs_jp
    1:     'cp932', 'shift_jis', 'euc_jp', 'euc_jisx0213', 'shift_jisx0213',
    1:     'euc_jis_2004', 'shift_jis_2004',
       # _codecs_kr
    1:     'cp949', 'euc_kr', 'johab',
       # _codecs_tw
    1:     'big5', 'cp950',
       # _codecs_iso2022
    1:     'iso2022_jp', 'iso2022_jp_1', 'iso2022_jp_2', 'iso2022_jp_2004',
    1:     'iso2022_jp_3', 'iso2022_jp_ext', 'iso2022_kr',
       ]
       
    2: class Test_MultibyteCodec(unittest.TestCase):
       
    1:     def test_nullcoding(self):
   25:         for enc in ALL_CJKENCODINGS:
   24:             self.assertEqual(''.decode(enc), u'')
   24:             self.assertEqual(unicode('', enc), u'')
   24:             self.assertEqual(u''.encode(enc), '')
       
    1:     def test_str_decode(self):
   25:         for enc in ALL_CJKENCODINGS:
   24:             self.assertEqual('abcd'.encode(enc), 'abcd')
       
    1:     def test_errorcallback_longindex(self):
    1:         dec = codecs.getdecoder('euc-kr')
    2:         myreplace  = lambda exc: (u'', sys.maxint+1)
    1:         codecs.register_error('test.cjktest', myreplace)
    1:         self.assertRaises(IndexError, dec,
    1:                           'apple\x92ham\x93spam', 'test.cjktest')
       
    1:     def test_errorcallback_custom_ignore(self):
               # Issue #23215: MemoryError with custom error handlers and multibyte codecs
    1:         data = 100 * unichr(0xdc00)
    1:         codecs.register_error("test.ignore", codecs.ignore_errors)
   25:         for enc in ALL_CJKENCODINGS:
   24:             self.assertEqual(data.encode(enc, "test.ignore"), b'')
       
    1:     def test_codingspec(self):
   25:         for enc in ALL_CJKENCODINGS:
   24:             code = '# coding: {}\n'.format(enc)
   24:             exec code
       
    1:     def test_init_segfault(self):
               # bug #3305: this used to segfault
    1:         self.assertRaises(AttributeError,
    1:                           _multibytecodec.MultibyteStreamReader, None)
    1:         self.assertRaises(AttributeError,
    1:                           _multibytecodec.MultibyteStreamWriter, None)
       
       
    2: class Test_IncrementalEncoder(unittest.TestCase):
       
    1:     def test_stateless(self):
               # cp949 encoder isn't stateful at all.
    1:         encoder = codecs.getincrementalencoder('cp949')()
    1:         self.assertEqual(encoder.encode(u'\ud30c\uc774\uc36c \ub9c8\uc744'),
    1:                          '\xc6\xc4\xc0\xcc\xbd\xe3 \xb8\xb6\xc0\xbb')
    1:         self.assertEqual(encoder.reset(), None)
    1:         self.assertEqual(encoder.encode(u'\u2606\u223c\u2606', True),
    1:                          '\xa1\xd9\xa1\xad\xa1\xd9')
    1:         self.assertEqual(encoder.reset(), None)
    1:         self.assertEqual(encoder.encode(u'', True), '')
    1:         self.assertEqual(encoder.encode(u'', False), '')
    1:         self.assertEqual(encoder.reset(), None)
       
    1:     def test_stateful(self):
               # jisx0213 encoder is stateful for a few code points. eg)
               #   U+00E6 => A9DC
               #   U+00E6 U+0300 => ABC4
               #   U+0300 => ABDC
       
    1:         encoder = codecs.getincrementalencoder('jisx0213')()
    1:         self.assertEqual(encoder.encode(u'\u00e6\u0300'), '\xab\xc4')
    1:         self.assertEqual(encoder.encode(u'\u00e6'), '')
    1:         self.assertEqual(encoder.encode(u'\u0300'), '\xab\xc4')
    1:         self.assertEqual(encoder.encode(u'\u00e6', True), '\xa9\xdc')
       
    1:         self.assertEqual(encoder.reset(), None)
    1:         self.assertEqual(encoder.encode(u'\u0300'), '\xab\xdc')
       
    1:         self.assertEqual(encoder.encode(u'\u00e6'), '')
    1:         self.assertEqual(encoder.encode('', True), '\xa9\xdc')
    1:         self.assertEqual(encoder.encode('', True), '')
       
    1:     def test_stateful_keep_buffer(self):
    1:         encoder = codecs.getincrementalencoder('jisx0213')()
    1:         self.assertEqual(encoder.encode(u'\u00e6'), '')
    1:         self.assertRaises(UnicodeEncodeError, encoder.encode, u'\u0123')
    1:         self.assertEqual(encoder.encode(u'\u0300\u00e6'), '\xab\xc4')
    1:         self.assertRaises(UnicodeEncodeError, encoder.encode, u'\u0123')
    1:         self.assertEqual(encoder.reset(), None)
    1:         self.assertEqual(encoder.encode(u'\u0300'), '\xab\xdc')
    1:         self.assertEqual(encoder.encode(u'\u00e6'), '')
    1:         self.assertRaises(UnicodeEncodeError, encoder.encode, u'\u0123')
    1:         self.assertEqual(encoder.encode(u'', True), '\xa9\xdc')
       
    1:     def test_issue5640(self):
    1:         encoder = codecs.getincrementalencoder('shift-jis')('backslashreplace')
    1:         self.assertEqual(encoder.encode(u'\xff'), b'\\xff')
    1:         self.assertEqual(encoder.encode(u'\n'), b'\n')
       
    2: class Test_IncrementalDecoder(unittest.TestCase):
       
    1:     def test_dbcs(self):
               # cp949 decoder is simple with only 1 or 2 bytes sequences.
    1:         decoder = codecs.getincrementaldecoder('cp949')()
    1:         self.assertEqual(decoder.decode('\xc6\xc4\xc0\xcc\xbd'),
    1:                          u'\ud30c\uc774')
    1:         self.assertEqual(decoder.decode('\xe3 \xb8\xb6\xc0\xbb'),
    1:                          u'\uc36c \ub9c8\uc744')
    1:         self.assertEqual(decoder.decode(''), u'')
       
    1:     def test_dbcs_keep_buffer(self):
    1:         decoder = codecs.getincrementaldecoder('cp949')()
    1:         self.assertEqual(decoder.decode('\xc6\xc4\xc0'), u'\ud30c')
    1:         self.assertRaises(UnicodeDecodeError, decoder.decode, '', True)
    1:         self.assertEqual(decoder.decode('\xcc'), u'\uc774')
       
    1:         self.assertEqual(decoder.decode('\xc6\xc4\xc0'), u'\ud30c')
    1:         self.assertRaises(UnicodeDecodeError, decoder.decode, '\xcc\xbd', True)
    1:         self.assertEqual(decoder.decode('\xcc'), u'\uc774')
       
    1:     def test_iso2022(self):
    1:         decoder = codecs.getincrementaldecoder('iso2022-jp')()
    1:         ESC = '\x1b'
    1:         self.assertEqual(decoder.decode(ESC + '('), u'')
    1:         self.assertEqual(decoder.decode('B', True), u'')
    1:         self.assertEqual(decoder.decode(ESC + '$'), u'')
    1:         self.assertEqual(decoder.decode('B@$'), u'\u4e16')
    1:         self.assertEqual(decoder.decode('@$@'), u'\u4e16')
    1:         self.assertEqual(decoder.decode('$', True), u'\u4e16')
    1:         self.assertEqual(decoder.reset(), None)
    1:         self.assertEqual(decoder.decode('@$'), u'@$')
    1:         self.assertEqual(decoder.decode(ESC + '$'), u'')
    1:         self.assertRaises(UnicodeDecodeError, decoder.decode, '', True)
    1:         self.assertEqual(decoder.decode('B@$'), u'\u4e16')
       
    2: class Test_StreamReader(unittest.TestCase):
    1:     def test_bug1728403(self):
    1:         try:
    1:             open(TESTFN, 'w').write('\xa1')
    1:             f = codecs.open(TESTFN, encoding='cp949')
    1:             self.assertRaises(UnicodeDecodeError, f.read, 2)
               finally:
    1:             try: f.close()
>>>>>>             except: pass
    1:             os.unlink(TESTFN)
       
    2: class Test_StreamWriter(unittest.TestCase):
    1:     @unittest.skipUnless(len(u'\U00012345') == 2, 'need a narrow build')
           def test_gb18030(self):
    1:         s = StringIO.StringIO()
    1:         c = codecs.getwriter('gb18030')(s)
    1:         c.write(u'123')
    1:         self.assertEqual(s.getvalue(), '123')
    1:         c.write(u'\U00012345')
    1:         self.assertEqual(s.getvalue(), '123\x907\x959')
    1:         c.write(u'\U00012345'[0])
    1:         self.assertEqual(s.getvalue(), '123\x907\x959')
    1:         c.write(u'\U00012345'[1] + u'\U00012345' + u'\uac00\u00ac')
    1:         self.assertEqual(s.getvalue(),
    1:                 '123\x907\x959\x907\x959\x907\x959\x827\xcf5\x810\x851')
    1:         c.write(u'\U00012345'[0])
    1:         self.assertEqual(s.getvalue(),
    1:                 '123\x907\x959\x907\x959\x907\x959\x827\xcf5\x810\x851')
    1:         self.assertRaises(UnicodeError, c.reset)
    1:         self.assertEqual(s.getvalue(),
    1:                 '123\x907\x959\x907\x959\x907\x959\x827\xcf5\x810\x851')
       
    1:     @unittest.skipUnless(len(u'\U00012345') == 2, 'need a narrow build')
           def test_utf_8(self):
    1:         s= StringIO.StringIO()
    1:         c = codecs.getwriter('utf-8')(s)
    1:         c.write(u'123')
    1:         self.assertEqual(s.getvalue(), '123')
    1:         c.write(u'\U00012345')
    1:         self.assertEqual(s.getvalue(), '123\xf0\x92\x8d\x85')
       
               # Python utf-8 codec can't buffer surrogate pairs yet.
    1:         if 0:
                   c.write(u'\U00012345'[0])
                   self.assertEqual(s.getvalue(), '123\xf0\x92\x8d\x85')
                   c.write(u'\U00012345'[1] + u'\U00012345' + u'\uac00\u00ac')
                   self.assertEqual(s.getvalue(),
                       '123\xf0\x92\x8d\x85\xf0\x92\x8d\x85\xf0\x92\x8d\x85'
                       '\xea\xb0\x80\xc2\xac')
                   c.write(u'\U00012345'[0])
                   self.assertEqual(s.getvalue(),
                       '123\xf0\x92\x8d\x85\xf0\x92\x8d\x85\xf0\x92\x8d\x85'
                       '\xea\xb0\x80\xc2\xac')
                   c.reset()
                   self.assertEqual(s.getvalue(),
                       '123\xf0\x92\x8d\x85\xf0\x92\x8d\x85\xf0\x92\x8d\x85'
                       '\xea\xb0\x80\xc2\xac\xed\xa0\x88')
                   c.write(u'\U00012345'[1])
                   self.assertEqual(s.getvalue(),
                       '123\xf0\x92\x8d\x85\xf0\x92\x8d\x85\xf0\x92\x8d\x85'
                       '\xea\xb0\x80\xc2\xac\xed\xa0\x88\xed\xbd\x85')
       
    1:     def test_streamwriter_strwrite(self):
    1:         s = StringIO.StringIO()
    1:         wr = codecs.getwriter('gb18030')(s)
    1:         wr.write('abcd')
    1:         self.assertEqual(s.getvalue(), 'abcd')
       
    2: class Test_ISO2022(unittest.TestCase):
    1:     def test_g2(self):
    1:         iso2022jp2 = '\x1b(B:hu4:unit\x1b.A\x1bNi de famille'
    1:         uni = u':hu4:unit\xe9 de famille'
    1:         self.assertEqual(iso2022jp2.decode('iso2022-jp-2'), uni)
       
    1:     def test_iso2022_jp_g0(self):
    1:         self.assertNotIn('\x0e', u'\N{SOFT HYPHEN}'.encode('iso-2022-jp-2'))
    3:         for encoding in ('iso-2022-jp-2004', 'iso-2022-jp-3'):
    2:             e = u'\u3406'.encode(encoding)
   20:             self.assertFalse(filter(lambda x: x >= '\x80', e))
       
    1:     def test_bug1572832(self):
    1:         if sys.maxunicode >= 0x10000:
>>>>>>             myunichr = unichr
               else:
1048577:             myunichr = lambda x: unichr(0xD7C0+(x>>10)) + unichr(0xDC00+(x&0x3FF))
       
1048577:         for x in xrange(0x10000, 0x110000):
                   # Any ISO 2022 codec will cause the segfault
1048576:             myunichr(x).encode('iso_2022_jp', 'ignore')
       
    2: class TestStateful(unittest.TestCase):
    1:     text = u'\u4E16\u4E16'
    1:     encoding = 'iso-2022-jp'
    1:     expected = b'\x1b$B@$@$'
    1:     expected_reset = b'\x1b$B@$@$\x1b(B'
       
    1:     def test_encode(self):
    2:         self.assertEqual(self.text.encode(self.encoding), self.expected_reset)
       
    1:     def test_incrementalencoder(self):
    2:         encoder = codecs.getincrementalencoder(self.encoding)()
    2:         output = b''.join(
    8:             encoder.encode(char)
    6:             for char in self.text)
    2:         self.assertEqual(output, self.expected)
       
    1:     def test_incrementalencoder_final(self):
    2:         encoder = codecs.getincrementalencoder(self.encoding)()
    2:         last_index = len(self.text) - 1
    2:         output = b''.join(
    8:             encoder.encode(char, index == last_index)
    6:             for index, char in enumerate(self.text))
    2:         self.assertEqual(output, self.expected_reset)
       
    2: class TestHZStateful(TestStateful):
    1:     text = u'\u804a\u804a'
    1:     encoding = 'hz'
    1:     expected = b'~{ADAD'
    1:     expected_reset = b'~{ADAD~}'
       
    1: def test_main():
    1:     test_support.run_unittest(__name__)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
