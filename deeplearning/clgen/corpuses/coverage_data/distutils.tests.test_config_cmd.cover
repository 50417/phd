    1: """Tests for distutils.command.config."""
    1: import unittest
    1: import os
    1: import sys
    1: from test.test_support import run_unittest
       
    1: from distutils.command.config import dump_file, config
    1: from distutils.tests import support
    1: from distutils import log
       
    2: class ConfigTestCase(support.LoggingSilencer,
    1:                      support.TempdirManager,
    1:                      unittest.TestCase):
       
    1:     def _info(self, msg, *args):
  102:         for line in msg.splitlines():
   95:             self._logs.append(line)
       
    1:     def setUp(self):
    4:         super(ConfigTestCase, self).setUp()
    4:         self._logs = []
    4:         self.old_log = log.info
    4:         log.info = self._info
       
    1:     def tearDown(self):
    4:         log.info = self.old_log
    4:         super(ConfigTestCase, self).tearDown()
       
    1:     def test_dump_file(self):
    1:         this_file = os.path.splitext(__file__)[0] + '.py'
    1:         f = open(this_file)
    1:         try:
    1:             numlines = len(f.readlines())
               finally:
    1:             f.close()
       
    1:         dump_file(this_file, 'I am the header')
    1:         self.assertEqual(len(self._logs), numlines+1)
       
    1:     @unittest.skipIf(sys.platform == 'win32', "can't test on Windows")
           def test_search_cpp(self):
    1:         pkg_dir, dist = self.create_dist()
    1:         cmd = config(dist)
       
               # simple pattern searches
    1:         match = cmd.search_cpp(pattern='xxx', body='/* xxx */')
    1:         self.assertEqual(match, 0)
       
    1:         match = cmd.search_cpp(pattern='_configtest', body='/* xxx */')
    1:         self.assertEqual(match, 1)
       
    1:     def test_finalize_options(self):
               # finalize_options does a bit of transformation
               # on options
    1:         pkg_dir, dist = self.create_dist()
    1:         cmd = config(dist)
    1:         cmd.include_dirs = 'one%stwo' % os.pathsep
    1:         cmd.libraries = 'one'
    1:         cmd.library_dirs = 'three%sfour' % os.pathsep
    1:         cmd.ensure_finalized()
       
    1:         self.assertEqual(cmd.include_dirs, ['one', 'two'])
    1:         self.assertEqual(cmd.libraries, ['one'])
    1:         self.assertEqual(cmd.library_dirs, ['three', 'four'])
       
    1:     def test_clean(self):
               # _clean removes files
    1:         tmp_dir = self.mkdtemp()
    1:         f1 = os.path.join(tmp_dir, 'one')
    1:         f2 = os.path.join(tmp_dir, 'two')
       
    1:         self.write_file(f1, 'xxx')
    1:         self.write_file(f2, 'xxx')
       
    3:         for f in (f1, f2):
    2:             self.assertTrue(os.path.exists(f))
       
    1:         pkg_dir, dist = self.create_dist()
    1:         cmd = config(dist)
    1:         cmd._clean(f1, f2)
       
    3:         for f in (f1, f2):
    2:             self.assertFalse(os.path.exists(f))
       
    1: def test_suite():
    1:     return unittest.makeSuite(ConfigTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     run_unittest(test_suite())
