    1: import sys
       
    1: import unittest
    1: from test import test_support
    1: from test.test_support import run_unittest, have_unicode
    1: import math
       
       L = [
    1:         ('0', 0),
    1:         ('1', 1),
    1:         ('9', 9),
    1:         ('10', 10),
    1:         ('99', 99),
    1:         ('100', 100),
    1:         ('314', 314),
    1:         (' 314', 314),
    1:         ('314 ', 314),
    1:         ('  \t\t  314  \t\t  ', 314),
    1:         (repr(sys.maxint), sys.maxint),
    1:         ('  1x', ValueError),
    1:         ('  1  ', 1),
    1:         ('  1\02  ', ValueError),
    1:         ('', ValueError),
    1:         (' ', ValueError),
    1:         ('  \t\t  ', ValueError)
       ]
    1: if have_unicode:
    1:     L += [
    1:         (unicode('0'), 0),
    1:         (unicode('1'), 1),
    1:         (unicode('9'), 9),
    1:         (unicode('10'), 10),
    1:         (unicode('99'), 99),
    1:         (unicode('100'), 100),
    1:         (unicode('314'), 314),
    1:         (unicode(' 314'), 314),
    1:         (unicode('\u0663\u0661\u0664 ','raw-unicode-escape'), 314),
    1:         (unicode('  \t\t  314  \t\t  '), 314),
    1:         (unicode('  1x'), ValueError),
    1:         (unicode('  1  '), 1),
    1:         (unicode('  1\02  '), ValueError),
    1:         (unicode(''), ValueError),
    1:         (unicode(' '), ValueError),
    1:         (unicode('  \t\t  '), ValueError),
    1:         (unichr(0x200), ValueError),
       ]
       
    2: class IntSubclass(int):
    1:     pass
       
    2: class IntLongCommonTests(object):
       
    1:     """Mixin of test cases to share between both test_int and test_long."""
       
           # Change to int or long in the TestCase subclass.
    1:     ntype = None
       
    1:     def test_no_args(self):
    2:         self.assertEqual(self.ntype(), 0)
       
    1:     def test_keyword_args(self):
               # Test invoking constructor using keyword arguments.
    2:         self.assertEqual(self.ntype(x=1.2), 1)
    2:         self.assertEqual(self.ntype('100', base=2), 4)
    2:         self.assertEqual(self.ntype(x='100', base=2), 4)
    2:         self.assertRaises(TypeError, self.ntype, base=10)
    2:         self.assertRaises(TypeError, self.ntype, base=0)
       
    2: class IntTestCases(IntLongCommonTests, unittest.TestCase):
       
    1:     ntype = int
       
    1:     def test_basic(self):
    1:         self.assertEqual(int(314), 314)
    1:         self.assertEqual(int(3.14), 3)
    1:         self.assertEqual(int(314L), 314)
               # Check that conversion from float truncates towards zero
    1:         self.assertEqual(int(-3.14), -3)
    1:         self.assertEqual(int(3.9), 3)
    1:         self.assertEqual(int(-3.9), -3)
    1:         self.assertEqual(int(3.5), 3)
    1:         self.assertEqual(int(-3.5), -3)
               # Different base:
    1:         self.assertEqual(int("10",16), 16L)
    1:         if have_unicode:
    1:             self.assertEqual(int(unicode("10"),16), 16L)
               # Test conversion from strings and various anomalies
   35:         for s, v in L:
  136:             for sign in "", "+", "-":
  510:                 for prefix in "", " ", "\t", "  \t\t  ":
  408:                     ss = prefix + sign + s
  408:                     vv = v
  408:                     if sign == "-" and v is not ValueError:
   92:                         vv = -v
  408:                     try:
  408:                         self.assertEqual(int(ss), vv)
  132:                     except v:
  132:                         pass
       
    1:         s = repr(-1-sys.maxint)
    1:         x = int(s)
    1:         self.assertEqual(x+1, -sys.maxint)
    1:         self.assertIsInstance(x, int)
               # should return long
    1:         self.assertEqual(int(s[1:]), sys.maxint+1)
       
               # should return long
    1:         x = int(1e100)
    1:         self.assertIsInstance(x, long)
    1:         x = int(-1e100)
    1:         self.assertIsInstance(x, long)
       
       
               # SF bug 434186:  0x80000000/2 != 0x80000000>>1.
               # Worked by accident in Windows release build, but failed in debug build.
               # Failed in all Linux builds.
    1:         x = -1-sys.maxint
    1:         self.assertEqual(x >> 1, x//2)
       
    1:         self.assertRaises(ValueError, int, '123\0')
    1:         self.assertRaises(ValueError, int, '53', 40)
       
               # SF bug 1545497: embedded NULs were not detected with
               # explicit base
    1:         self.assertRaises(ValueError, int, '123\0', 10)
    1:         self.assertRaises(ValueError, int, '123\x00 245', 20)
       
    1:         x = int('1' * 600)
    1:         self.assertIsInstance(x, long)
       
    1:         if have_unicode:
    1:             x = int(unichr(0x661) * 600)
    1:             self.assertIsInstance(x, long)
       
    1:         self.assertRaises(TypeError, int, 1, 12)
       
    1:         self.assertEqual(int('0123', 0), 83)
    1:         self.assertEqual(int('0x123', 16), 291)
       
               # Bug 1679: "0x" is not a valid hex literal
    1:         self.assertRaises(ValueError, int, "0x", 16)
    1:         self.assertRaises(ValueError, int, "0x", 0)
       
    1:         self.assertRaises(ValueError, int, "0o", 8)
    1:         self.assertRaises(ValueError, int, "0o", 0)
       
    1:         self.assertRaises(ValueError, int, "0b", 2)
    1:         self.assertRaises(ValueError, int, "0b", 0)
       
       
               # SF bug 1334662: int(string, base) wrong answers
               # Various representations of 2**32 evaluated to 0
               # rather than 2**32 in previous versions
       
    1:         self.assertEqual(int('100000000000000000000000000000000', 2), 4294967296L)
    1:         self.assertEqual(int('102002022201221111211', 3), 4294967296L)
    1:         self.assertEqual(int('10000000000000000', 4), 4294967296L)
    1:         self.assertEqual(int('32244002423141', 5), 4294967296L)
    1:         self.assertEqual(int('1550104015504', 6), 4294967296L)
    1:         self.assertEqual(int('211301422354', 7), 4294967296L)
    1:         self.assertEqual(int('40000000000', 8), 4294967296L)
    1:         self.assertEqual(int('12068657454', 9), 4294967296L)
    1:         self.assertEqual(int('4294967296', 10), 4294967296L)
    1:         self.assertEqual(int('1904440554', 11), 4294967296L)
    1:         self.assertEqual(int('9ba461594', 12), 4294967296L)
    1:         self.assertEqual(int('535a79889', 13), 4294967296L)
    1:         self.assertEqual(int('2ca5b7464', 14), 4294967296L)
    1:         self.assertEqual(int('1a20dcd81', 15), 4294967296L)
    1:         self.assertEqual(int('100000000', 16), 4294967296L)
    1:         self.assertEqual(int('a7ffda91', 17), 4294967296L)
    1:         self.assertEqual(int('704he7g4', 18), 4294967296L)
    1:         self.assertEqual(int('4f5aff66', 19), 4294967296L)
    1:         self.assertEqual(int('3723ai4g', 20), 4294967296L)
    1:         self.assertEqual(int('281d55i4', 21), 4294967296L)
    1:         self.assertEqual(int('1fj8b184', 22), 4294967296L)
    1:         self.assertEqual(int('1606k7ic', 23), 4294967296L)
    1:         self.assertEqual(int('mb994ag', 24), 4294967296L)
    1:         self.assertEqual(int('hek2mgl', 25), 4294967296L)
    1:         self.assertEqual(int('dnchbnm', 26), 4294967296L)
    1:         self.assertEqual(int('b28jpdm', 27), 4294967296L)
    1:         self.assertEqual(int('8pfgih4', 28), 4294967296L)
    1:         self.assertEqual(int('76beigg', 29), 4294967296L)
    1:         self.assertEqual(int('5qmcpqg', 30), 4294967296L)
    1:         self.assertEqual(int('4q0jto4', 31), 4294967296L)
    1:         self.assertEqual(int('4000000', 32), 4294967296L)
    1:         self.assertEqual(int('3aokq94', 33), 4294967296L)
    1:         self.assertEqual(int('2qhxjli', 34), 4294967296L)
    1:         self.assertEqual(int('2br45qb', 35), 4294967296L)
    1:         self.assertEqual(int('1z141z4', 36), 4294967296L)
       
               # tests with base 0
               # this fails on 3.0, but in 2.x the old octal syntax is allowed
    1:         self.assertEqual(int(' 0123  ', 0), 83)
    1:         self.assertEqual(int(' 0123  ', 0), 83)
    1:         self.assertEqual(int('000', 0), 0)
    1:         self.assertEqual(int('0o123', 0), 83)
    1:         self.assertEqual(int('0x123', 0), 291)
    1:         self.assertEqual(int('0b100', 0), 4)
    1:         self.assertEqual(int(' 0O123   ', 0), 83)
    1:         self.assertEqual(int(' 0X123  ', 0), 291)
    1:         self.assertEqual(int(' 0B100 ', 0), 4)
    1:         self.assertEqual(int('0', 0), 0)
    1:         self.assertEqual(int('+0', 0), 0)
    1:         self.assertEqual(int('-0', 0), 0)
    1:         self.assertEqual(int('00', 0), 0)
    1:         self.assertRaises(ValueError, int, '08', 0)
    1:         self.assertRaises(ValueError, int, '-012395', 0)
       
               # without base still base 10
    1:         self.assertEqual(int('0123'), 123)
    1:         self.assertEqual(int('0123', 10), 123)
       
               # tests with prefix and base != 0
    1:         self.assertEqual(int('0x123', 16), 291)
    1:         self.assertEqual(int('0o123', 8), 83)
    1:         self.assertEqual(int('0b100', 2), 4)
    1:         self.assertEqual(int('0X123', 16), 291)
    1:         self.assertEqual(int('0O123', 8), 83)
    1:         self.assertEqual(int('0B100', 2), 4)
       
               # the code has special checks for the first character after the
               #  type prefix
    1:         self.assertRaises(ValueError, int, '0b2', 2)
    1:         self.assertRaises(ValueError, int, '0b02', 2)
    1:         self.assertRaises(ValueError, int, '0B2', 2)
    1:         self.assertRaises(ValueError, int, '0B02', 2)
    1:         self.assertRaises(ValueError, int, '0o8', 8)
    1:         self.assertRaises(ValueError, int, '0o08', 8)
    1:         self.assertRaises(ValueError, int, '0O8', 8)
    1:         self.assertRaises(ValueError, int, '0O08', 8)
    1:         self.assertRaises(ValueError, int, '0xg', 16)
    1:         self.assertRaises(ValueError, int, '0x0g', 16)
    1:         self.assertRaises(ValueError, int, '0Xg', 16)
    1:         self.assertRaises(ValueError, int, '0X0g', 16)
       
               # SF bug 1334662: int(string, base) wrong answers
               # Checks for proper evaluation of 2**32 + 1
    1:         self.assertEqual(int('100000000000000000000000000000001', 2), 4294967297L)
    1:         self.assertEqual(int('102002022201221111212', 3), 4294967297L)
    1:         self.assertEqual(int('10000000000000001', 4), 4294967297L)
    1:         self.assertEqual(int('32244002423142', 5), 4294967297L)
    1:         self.assertEqual(int('1550104015505', 6), 4294967297L)
    1:         self.assertEqual(int('211301422355', 7), 4294967297L)
    1:         self.assertEqual(int('40000000001', 8), 4294967297L)
    1:         self.assertEqual(int('12068657455', 9), 4294967297L)
    1:         self.assertEqual(int('4294967297', 10), 4294967297L)
    1:         self.assertEqual(int('1904440555', 11), 4294967297L)
    1:         self.assertEqual(int('9ba461595', 12), 4294967297L)
    1:         self.assertEqual(int('535a7988a', 13), 4294967297L)
    1:         self.assertEqual(int('2ca5b7465', 14), 4294967297L)
    1:         self.assertEqual(int('1a20dcd82', 15), 4294967297L)
    1:         self.assertEqual(int('100000001', 16), 4294967297L)
    1:         self.assertEqual(int('a7ffda92', 17), 4294967297L)
    1:         self.assertEqual(int('704he7g5', 18), 4294967297L)
    1:         self.assertEqual(int('4f5aff67', 19), 4294967297L)
    1:         self.assertEqual(int('3723ai4h', 20), 4294967297L)
    1:         self.assertEqual(int('281d55i5', 21), 4294967297L)
    1:         self.assertEqual(int('1fj8b185', 22), 4294967297L)
    1:         self.assertEqual(int('1606k7id', 23), 4294967297L)
    1:         self.assertEqual(int('mb994ah', 24), 4294967297L)
    1:         self.assertEqual(int('hek2mgm', 25), 4294967297L)
    1:         self.assertEqual(int('dnchbnn', 26), 4294967297L)
    1:         self.assertEqual(int('b28jpdn', 27), 4294967297L)
    1:         self.assertEqual(int('8pfgih5', 28), 4294967297L)
    1:         self.assertEqual(int('76beigh', 29), 4294967297L)
    1:         self.assertEqual(int('5qmcpqh', 30), 4294967297L)
    1:         self.assertEqual(int('4q0jto5', 31), 4294967297L)
    1:         self.assertEqual(int('4000001', 32), 4294967297L)
    1:         self.assertEqual(int('3aokq95', 33), 4294967297L)
    1:         self.assertEqual(int('2qhxjlj', 34), 4294967297L)
    1:         self.assertEqual(int('2br45qc', 35), 4294967297L)
    1:         self.assertEqual(int('1z141z5', 36), 4294967297L)
       
    1:     def test_bit_length(self):
    1:         tiny = 1e-10
130001:         for x in xrange(-65000, 65000):
130000:             k = x.bit_length()
                   # Check equivalence with Python version
130000:             self.assertEqual(k, len(bin(x).lstrip('-0b')))
                   # Behaviour as specified in the docs
130000:             if x != 0:
129999:                 self.assertTrue(2**(k-1) <= abs(x) < 2**k)
                   else:
    1:                 self.assertEqual(k, 0)
                   # Alternative definition: x.bit_length() == 1 + floor(log_2(x))
130000:             if x != 0:
                       # When x is an exact power of 2, numeric errors can
                       # cause floor(log(x)/log(2)) to be one too small; for
                       # small x this can be fixed by adding a small quantity
                       # to the quotient before taking the floor.
129999:                 self.assertEqual(k, 1 + math.floor(
129999:                         math.log(abs(x))/math.log(2) + tiny))
       
    1:         self.assertEqual((0).bit_length(), 0)
    1:         self.assertEqual((1).bit_length(), 1)
    1:         self.assertEqual((-1).bit_length(), 1)
    1:         self.assertEqual((2).bit_length(), 2)
    1:         self.assertEqual((-2).bit_length(), 2)
   11:         for i in [2, 3, 15, 16, 17, 31, 32, 33, 63, 64]:
   10:             a = 2**i
   10:             self.assertEqual((a-1).bit_length(), i)
   10:             self.assertEqual((1-a).bit_length(), i)
   10:             self.assertEqual((a).bit_length(), i+1)
   10:             self.assertEqual((-a).bit_length(), i+1)
   10:             self.assertEqual((a+1).bit_length(), i+1)
   10:             self.assertEqual((-a-1).bit_length(), i+1)
       
    1:     @unittest.skipUnless(float.__getformat__("double").startswith("IEEE"),
    1:                          "test requires IEEE 754 doubles")
           def test_float_conversion(self):
               # values exactly representable as floats
    1:         exact_values = [-2, -1, 0, 1, 2, 2**52, 2**53-1, 2**53, 2**53+2,
    1:                          2**53+4, 2**54-4, 2**54-2, 2**63, -2**63, 2**64,
    1:                          -2**64, 10**20, 10**21, 10**22]
   20:         for value in exact_values:
   19:             self.assertEqual(int(float(int(value))), value)
       
               # test round-half-to-even
    1:         self.assertEqual(int(float(2**53+1)), 2**53)
    1:         self.assertEqual(int(float(2**53+2)), 2**53+2)
    1:         self.assertEqual(int(float(2**53+3)), 2**53+4)
    1:         self.assertEqual(int(float(2**53+5)), 2**53+4)
    1:         self.assertEqual(int(float(2**53+6)), 2**53+6)
    1:         self.assertEqual(int(float(2**53+7)), 2**53+8)
       
    1:         self.assertEqual(int(float(-2**53-1)), -2**53)
    1:         self.assertEqual(int(float(-2**53-2)), -2**53-2)
    1:         self.assertEqual(int(float(-2**53-3)), -2**53-4)
    1:         self.assertEqual(int(float(-2**53-5)), -2**53-4)
    1:         self.assertEqual(int(float(-2**53-6)), -2**53-6)
    1:         self.assertEqual(int(float(-2**53-7)), -2**53-8)
       
    1:         self.assertEqual(int(float(2**54-2)), 2**54-2)
    1:         self.assertEqual(int(float(2**54-1)), 2**54)
    1:         self.assertEqual(int(float(2**54+2)), 2**54)
    1:         self.assertEqual(int(float(2**54+3)), 2**54+4)
    1:         self.assertEqual(int(float(2**54+5)), 2**54+4)
    1:         self.assertEqual(int(float(2**54+6)), 2**54+8)
    1:         self.assertEqual(int(float(2**54+10)), 2**54+8)
    1:         self.assertEqual(int(float(2**54+11)), 2**54+12)
       
    1:     def test_valid_non_numeric_input_types_for_x(self):
               # Test possible valid non-numeric types for x, including subclasses
               # of the allowed built-in types.
    2:         class CustomStr(str): pass
    2:         class CustomByteArray(bytearray): pass
    1:         factories = [str, bytearray, CustomStr, CustomByteArray, buffer]
       
    1:         if have_unicode:
    2:             class CustomUnicode(unicode): pass
    1:             factories += [unicode, CustomUnicode]
       
    8:         for f in factories:
    7:             with test_support.check_py3k_warnings(quiet=True):
    7:                 x = f('100')
    7:             msg = 'x has value %s and type %s' % (x, type(x).__name__)
    7:             try:
    7:                 self.assertEqual(int(x), 100, msg=msg)
    7:                 if isinstance(x, basestring):
    4:                     self.assertEqual(int(x, 2), 4, msg=msg)
>>>>>>             except TypeError, err:
>>>>>>                 raise AssertionError('For %s got TypeError: %s' %
>>>>>>                                      (type(x).__name__, err))
    7:             if not isinstance(x, basestring):
    3:                 errmsg = "can't convert non-string"
    3:                 with self.assertRaisesRegexp(TypeError, errmsg, msg=msg):
    3:                     int(x, 2)
    7:             errmsg = 'invalid literal'
    7:             with self.assertRaisesRegexp(ValueError, errmsg, msg=msg), \
    7:                  test_support.check_py3k_warnings(quiet=True):
    7:                 int(f('A' * 0x10))
       
    1:     def test_int_buffer(self):
    1:         with test_support.check_py3k_warnings():
    1:             self.assertEqual(int(buffer('123', 1, 2)), 23)
    1:             self.assertEqual(int(buffer('123\x00', 1, 2)), 23)
    1:             self.assertEqual(int(buffer('123 ', 1, 2)), 23)
    1:             self.assertEqual(int(buffer('123A', 1, 2)), 23)
    1:             self.assertEqual(int(buffer('1234', 1, 2)), 23)
       
    1:     def test_error_on_string_float_for_x(self):
    1:         self.assertRaises(ValueError, int, '1.2')
       
    1:     def test_error_on_bytearray_for_x(self):
    1:         self.assertRaises(TypeError, int, bytearray('100'), 2)
       
    1:     def test_error_on_invalid_int_bases(self):
    4:         for base in [-1, 1, 1000]:
    3:             self.assertRaises(ValueError, int, '100', base)
       
    1:     def test_error_on_string_base(self):
    1:         self.assertRaises(TypeError, int, 100, base='foo')
       
    1:     @test_support.cpython_only
           def test_small_ints(self):
    1:         self.assertIs(int('10'), 10)
    1:         self.assertIs(int('-1'), -1)
    1:         if have_unicode:
    1:             self.assertIs(int(u'10'), 10)
    1:             self.assertIs(int(u'-1'), -1)
       
    1:     def test_intconversion(self):
               # Test __int__()
    2:         class ClassicMissingMethods:
    1:             pass
    1:         self.assertRaises(AttributeError, int, ClassicMissingMethods())
       
    2:         class MissingMethods(object):
    1:             pass
    1:         self.assertRaises(TypeError, int, MissingMethods())
       
    2:         class Foo0:
    1:             def __int__(self):
    1:                 return 42
       
    2:         class Foo1(object):
    1:             def __int__(self):
    1:                 return 42
       
    2:         class Foo2(int):
    1:             def __int__(self):
    1:                 return 42
       
    2:         class Foo3(int):
    1:             def __int__(self):
    1:                 return self
       
    2:         class Foo4(int):
    1:             def __int__(self):
    1:                 return 42L
       
    2:         class Foo5(int):
    1:             def __int__(self):
    1:                 return 42.
       
    1:         self.assertEqual(int(Foo0()), 42)
    1:         self.assertEqual(int(Foo1()), 42)
    1:         self.assertEqual(int(Foo2()), 42)
    1:         self.assertEqual(int(Foo3()), 0)
    1:         self.assertEqual(int(Foo4()), 42L)
    1:         self.assertRaises(TypeError, int, Foo5())
       
    2:         class Classic:
    1:             pass
    3:         for base in (object, Classic):
    4:             class IntOverridesTrunc(base):
    2:                 def __int__(self):
    2:                     return 42
    2:                 def __trunc__(self):
>>>>>>                     return -12
    2:             self.assertEqual(int(IntOverridesTrunc()), 42)
       
    4:             class JustTrunc(base):
    2:                 def __trunc__(self):
    2:                     return 42
    2:             self.assertEqual(int(JustTrunc()), 42)
       
    6:             for trunc_result_base in (object, Classic):
    8:                 class Integral(trunc_result_base):
    4:                     def __int__(self):
    4:                         return 42
       
    8:                 class TruncReturnsNonInt(base):
    4:                     def __trunc__(self):
    4:                         return Integral()
    4:                 self.assertEqual(int(TruncReturnsNonInt()), 42)
       
    8:                 class NonIntegral(trunc_result_base):
    4:                     def __trunc__(self):
                               # Check that we avoid infinite recursion.
>>>>>>                         return NonIntegral()
       
    8:                 class TruncReturnsNonIntegral(base):
    4:                     def __trunc__(self):
    4:                         return NonIntegral()
    4:                 try:
    4:                     int(TruncReturnsNonIntegral())
    4:                 except TypeError as e:
    4:                     self.assertEqual(str(e),
    4:                                       "__trunc__ returned non-Integral"
                                             " (type NonIntegral)")
                       else:
>>>>>>                     self.fail("Failed to raise TypeError with %s" %
>>>>>>                               ((base, trunc_result_base),))
       
    8:                 class TruncReturnsIntSubclass(base):
    4:                     def __trunc__(self):
    8:                         return True
    4:                 good_int = TruncReturnsIntSubclass()
    4:                 n = int(good_int)
    4:                 self.assertEqual(n, 1)
    4:                 self.assertIs(type(n), bool)
    4:                 n = IntSubclass(good_int)
    4:                 self.assertEqual(n, 1)
    4:                 self.assertIs(type(n), IntSubclass)
       
       
    1: def test_main():
    1:     run_unittest(IntTestCases)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
