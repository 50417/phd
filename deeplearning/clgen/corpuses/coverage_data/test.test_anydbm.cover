       """Test script for the anydbm module
          based on testdumbdbm.py
    1: """
       
    1: import os
    1: import unittest
    1: import glob
    1: from test import test_support
       
    1: _fname = test_support.TESTFN
       
       # Silence Py3k warning
    1: anydbm = test_support.import_module('anydbm', deprecated=True)
       
    1: def _delete_files():
           # we don't know the precise name the underlying database uses
           # so we use glob to locate all names
   13:     for f in glob.glob(_fname + "*"):
    4:         try:
    4:             os.unlink(f)
>>>>>>         except OSError:
>>>>>>             pass
       
    2: class AnyDBMTestCase(unittest.TestCase):
    1:     _dict = {'0': '',
    1:              'a': 'Python:',
    1:              'b': 'Programming',
    1:              'c': 'the',
    1:              'd': 'way',
    1:              'f': 'Guido',
    1:              'g': 'intended'
                    }
       
    1:     def __init__(self, *args):
    4:         unittest.TestCase.__init__(self, *args)
       
    1:     def test_anydbm_creation(self):
    1:         f = anydbm.open(_fname, 'c')
    1:         self.assertEqual(f.keys(), [])
    8:         for key in self._dict:
    7:             f[key] = self._dict[key]
    1:         self.read_helper(f)
    1:         f.close()
       
    1:     def test_anydbm_modification(self):
    1:         self.init_db()
    1:         f = anydbm.open(_fname, 'c')
    1:         self._dict['g'] = f['g'] = "indented"
    1:         self.read_helper(f)
    1:         f.close()
       
    1:     def test_anydbm_read(self):
    1:         self.init_db()
    1:         f = anydbm.open(_fname, 'r')
    1:         self.read_helper(f)
    1:         f.close()
       
    1:     def test_anydbm_keys(self):
    1:         self.init_db()
    1:         f = anydbm.open(_fname, 'r')
    1:         keys = self.keys_helper(f)
    1:         f.close()
       
    1:     def read_helper(self, f):
    3:         keys = self.keys_helper(f)
   24:         for key in self._dict:
   21:             self.assertEqual(self._dict[key], f[key])
       
    1:     def init_db(self):
    3:         f = anydbm.open(_fname, 'n')
   24:         for k in self._dict:
   21:             f[k] = self._dict[k]
    3:         f.close()
       
    1:     def keys_helper(self, f):
    4:         keys = f.keys()
    4:         keys.sort()
    4:         dkeys = self._dict.keys()
    4:         dkeys.sort()
    4:         self.assertEqual(keys, dkeys)
    4:         return keys
       
    1:     def tearDown(self):
    4:         _delete_files()
       
    1:     def setUp(self):
    4:         _delete_files()
       
    1: def test_main():
    1:     try:
    1:         test_support.run_unittest(AnyDBMTestCase)
           finally:
    1:         _delete_files()
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
