       """Suite Power Suite: Terms and Events for controlling System power
       Level 1, version 1
       
       Generated from /System/Library/CoreServices/System Events.app
       AETE/AEUT resource version 1/0, language 0, script 0
    1: """
       
    1: import aetools
    1: import MacOS
       
    1: _code = 'powr'
       
    2: class Power_Suite_Events:
       
    1:     def restart(self, _object, _attributes={}, **_arguments):
               """restart: Restart the computer
               Required argument: the object for the command
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'fndr'
>>>>>>         _subcode = 'rest'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def shut_down(self, _object, _attributes={}, **_arguments):
               """shut down: Shut Down the computer
               Required argument: the object for the command
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'fndr'
>>>>>>         _subcode = 'shut'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def sleep(self, _object, _attributes={}, **_arguments):
               """sleep: Put the computer to sleep
               Required argument: the object for the command
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'fndr'
>>>>>>         _subcode = 'slep'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
       
    2: class application(aetools.ComponentItem):
    1:     """application - The System Events application """
    1:     want = 'capp'
    2: class _Prop__3c_Inheritance_3e_(aetools.NProperty):
    1:     """<Inheritance> - All of the properties of the superclass. """
    1:     which = 'c@#^'
    1:     want = 'capp'
    1: _3c_Inheritance_3e_ = _Prop__3c_Inheritance_3e_()
    2: class _Prop_folder_actions_enabled(aetools.NProperty):
    1:     """folder actions enabled - Are Folder Actions currently being processed? """
    1:     which = 'faen'
    1:     want = 'bool'
    1: folder_actions_enabled = _Prop_folder_actions_enabled()
    2: class _Prop_properties(aetools.NProperty):
    1:     """properties - every property of the System Events application """
    1:     which = 'pALL'
    1:     want = '****'
    1: properties = _Prop_properties()
       #        element 'cdis' as ['name', 'indx', 'rele', 'rang', 'test']
       #        element 'cfol' as ['name', 'indx', 'rele', 'rang', 'test']
       #        element 'cobj' as ['name', 'indx', 'rele', 'rang', 'test']
       #        element 'cwin' as ['name', 'indx', 'rele', 'rang', 'test', 'ID  ']
       #        element 'docu' as ['name', 'indx', 'rele', 'rang', 'test']
       #        element 'file' as ['name', 'indx', 'rele', 'rang', 'test']
       #        element 'foac' as ['name', 'indx', 'rele', 'rang', 'test']
       #        element 'logi' as ['name', 'indx', 'rele', 'rang', 'test']
       #        element 'pcap' as ['name', 'indx', 'rele', 'rang', 'test']
       #        element 'pcda' as ['name', 'indx', 'rele', 'rang', 'test']
       #        element 'prcs' as ['name', 'indx', 'rele', 'rang', 'test']
       
    1: applications = application
    1: application._superclassnames = []
    1: import Disk_Folder_File_Suite
    1: import Standard_Suite
    1: import Folder_Actions_Suite
    1: import Login_Items_Suite
    1: import Processes_Suite
    1: application._privpropdict = {
    1:     '_3c_Inheritance_3e_' : _Prop__3c_Inheritance_3e_,
    1:     'folder_actions_enabled' : _Prop_folder_actions_enabled,
    1:     'properties' : _Prop_properties,
       }
    1: application._privelemdict = {
    1:     'application_process' : Processes_Suite.application_process,
    1:     'desk_accessory_process' : Processes_Suite.desk_accessory_process,
    1:     'disk' : Disk_Folder_File_Suite.disk,
    1:     'document' : Standard_Suite.document,
    1:     'file' : Disk_Folder_File_Suite.file,
    1:     'folder' : Disk_Folder_File_Suite.folder,
    1:     'folder_action' : Folder_Actions_Suite.folder_action,
    1:     'item' : Disk_Folder_File_Suite.item,
    1:     'login_item' : Login_Items_Suite.login_item,
    1:     'process' : Processes_Suite.process,
    1:     'window' : Standard_Suite.window,
       }
       
       #
       # Indices of types declared in this module
       #
    1: _classdeclarations = {
    1:     'capp' : application,
       }
       
    1: _propdeclarations = {
    1:     'c@#^' : _Prop__3c_Inheritance_3e_,
    1:     'faen' : _Prop_folder_actions_enabled,
    1:     'pALL' : _Prop_properties,
       }
       
    1: _compdeclarations = {
       }
       
    1: _enumdeclarations = {
       }
