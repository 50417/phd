    1: """Filename globbing utility."""
       
    1: import sys
    1: import os
    1: import re
    1: import fnmatch
       
    1: try:
    1:     _unicode = unicode
>>>>>> except NameError:
           # If Python is built without Unicode support, the unicode type
           # will not exist. Fake one.
>>>>>>     class _unicode(object):
>>>>>>         pass
       
    1: __all__ = ["glob", "iglob"]
       
    1: def glob(pathname):
           """Return a list of paths matching a pathname pattern.
       
           The pattern may contain simple shell-style wildcards a la
           fnmatch. However, unlike fnmatch, filenames starting with a
           dot are special cases that are not matched by '*' and '?'
           patterns.
       
           """
  295:     return list(iglob(pathname))
       
    1: def iglob(pathname):
           """Return an iterator which yields the paths matching a pathname pattern.
       
           The pattern may contain simple shell-style wildcards a la
           fnmatch. However, unlike fnmatch, filenames starting with a
           dot are special cases that are not matched by '*' and '?'
           patterns.
       
           """
  371:     dirname, basename = os.path.split(pathname)
  371:     if not has_magic(pathname):
   51:         if basename:
   45:             if os.path.lexists(pathname):
   29:                 yield pathname
               else:
                   # Patterns ending with a slash should match only directories
    6:             if os.path.isdir(dirname):
    4:                 yield pathname
   51:         return
  320:     if not dirname:
  277:         for name in glob1(os.curdir, basename):
   94:             yield name
  183:         return
           # `os.path.split()` returns the argument itself as a dirname if it is a
           # drive or UNC path.  Prevent an infinite recursion if a drive or UNC path
           # contains magic characters (i.e. r'\\?\C:').
  137:     if dirname != pathname and has_magic(dirname):
   28:         dirs = iglob(dirname)
           else:
  109:         dirs = [dirname]
  137:     if has_magic(basename):
  129:         glob_in_dir = glob1
           else:
    8:         glob_in_dir = glob0
  360:     for dirname in dirs:
  882:         for name in glob_in_dir(dirname, basename):
  659:             yield os.path.join(dirname, name)
       
       # These 2 helper functions non-recursively glob inside a literal directory.
       # They return a list of basenames. `glob1` accepts a pattern while `glob0`
       # takes a literal basename (so it only has to check for its existence).
       
    1: def glob1(dirname, pattern):
  372:     if not dirname:
>>>>>>         dirname = os.curdir
  372:     if isinstance(pattern, _unicode) and not isinstance(dirname, unicode):
    1:         dirname = unicode(dirname, sys.getfilesystemencoding() or
>>>>>>                                    sys.getdefaultencoding())
  372:     try:
  372:         names = os.listdir(dirname)
   44:     except os.error:
   44:         return []
  328:     if pattern[0] != '.':
 2441:         names = filter(lambda x: x[0] != '.', names)
  328:     return fnmatch.filter(names, pattern)
       
    1: def glob0(dirname, basename):
   34:     if basename == '':
               # `os.path.split()` returns an empty basename for paths ending with a
               # directory separator.  'q*x/' should match only directories.
    6:         if os.path.isdir(dirname):
    4:             return [basename]
           else:
   28:         if os.path.lexists(os.path.join(dirname, basename)):
    4:             return [basename]
   26:     return []
       
       
    1: magic_check = re.compile('[*?[]')
       
    1: def has_magic(s):
  645:     return magic_check.search(s) is not None
