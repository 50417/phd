    1: """PyUnit testing that threads honor our signal semantics"""
       
    1: import unittest
    1: import signal
    1: import os
    1: import sys
    1: from test.test_support import run_unittest, import_module, reap_threads
    1: thread = import_module('thread')
       
    1: if sys.platform[:3] in ('win', 'os2') or sys.platform=='riscos':
>>>>>>     raise unittest.SkipTest, "Can't test signal on %s" % sys.platform
       
    1: process_pid = os.getpid()
    1: signalled_all=thread.allocate_lock()
       
       
    1: def registerSignals(for_usr1, for_usr2, for_alrm):
    2:     usr1 = signal.signal(signal.SIGUSR1, for_usr1)
    2:     usr2 = signal.signal(signal.SIGUSR2, for_usr2)
    2:     alrm = signal.signal(signal.SIGALRM, for_alrm)
    2:     return usr1, usr2, alrm
       
       
       # The signal handler. Just note that the signal occurred and
       # from who.
    1: def handle_signals(sig,frame):
    2:     signal_blackboard[sig]['tripped'] += 1
    2:     signal_blackboard[sig]['tripped_by'] = thread.get_ident()
       
       # a function that will be spawned as a separate thread.
    1: def send_signals():
>>>>>>     os.kill(process_pid, signal.SIGUSR1)
>>>>>>     os.kill(process_pid, signal.SIGUSR2)
>>>>>>     signalled_all.release()
       
    2: class ThreadSignals(unittest.TestCase):
           """Test signal handling semantics of threads.
              We spawn a thread, have the thread send two signals, and
              wait for it to finish. Check that we got both signals
              and that they were run by the main thread.
    1:     """
    1:     @reap_threads
           def test_signals(self):
    1:         signalled_all.acquire()
    1:         self.spawnSignallingThread()
    1:         signalled_all.acquire()
               # the signals that we asked the kernel to send
               # will come back, but we don't know when.
               # (it might even be after the thread exits
               # and might be out of order.)  If we haven't seen
               # the signals yet, send yet another signal and
               # wait for it return.
    1:         if signal_blackboard[signal.SIGUSR1]['tripped'] == 0 \
    1:            or signal_blackboard[signal.SIGUSR2]['tripped'] == 0:
>>>>>>             signal.alarm(1)
>>>>>>             signal.pause()
>>>>>>             signal.alarm(0)
       
    1:         self.assertEqual( signal_blackboard[signal.SIGUSR1]['tripped'], 1)
    1:         self.assertEqual( signal_blackboard[signal.SIGUSR1]['tripped_by'],
    1:                            thread.get_ident())
    1:         self.assertEqual( signal_blackboard[signal.SIGUSR2]['tripped'], 1)
    1:         self.assertEqual( signal_blackboard[signal.SIGUSR2]['tripped_by'],
    1:                            thread.get_ident())
    1:         signalled_all.release()
       
    1:     def spawnSignallingThread(self):
    1:         thread.start_new_thread(send_signals, ())
       
       
    1: def test_main():
           global signal_blackboard
       
    1:     signal_blackboard = { signal.SIGUSR1 : {'tripped': 0, 'tripped_by': 0 },
    1:                           signal.SIGUSR2 : {'tripped': 0, 'tripped_by': 0 },
    1:                           signal.SIGALRM : {'tripped': 0, 'tripped_by': 0 } }
       
    1:     oldsigs = registerSignals(handle_signals, handle_signals, handle_signals)
    1:     try:
    1:         run_unittest(ThreadSignals)
           finally:
    1:         registerSignals(*oldsigs)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
