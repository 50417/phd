       # Minimal tests for dis module
       
    1: from test.test_support import run_unittest
    1: import unittest
    1: import sys
    1: import dis
    1: import StringIO
       
       
    1: def _f(a):
>>>>>>     print a
>>>>>>     return 1
       
       dis_f = """\
       %3d           0 LOAD_FAST                0 (a)
                     3 PRINT_ITEM
                     4 PRINT_NEWLINE
       
       %3d           5 LOAD_CONST               1 (1)
                     8 RETURN_VALUE
    1: """%(_f.func_code.co_firstlineno + 1,
    1:      _f.func_code.co_firstlineno + 2)
       
       
    1: def bug708901():
>>>>>>     for res in range(1,
>>>>>>                      10):
>>>>>>         pass
       
       dis_bug708901 = """\
       %3d           0 SETUP_LOOP              23 (to 26)
                     3 LOAD_GLOBAL              0 (range)
                     6 LOAD_CONST               1 (1)
       
       %3d           9 LOAD_CONST               2 (10)
                    12 CALL_FUNCTION            2
                    15 GET_ITER
               >>   16 FOR_ITER                 6 (to 25)
                    19 STORE_FAST               0 (res)
       
       %3d          22 JUMP_ABSOLUTE           16
               >>   25 POP_BLOCK
               >>   26 LOAD_CONST               0 (None)
                    29 RETURN_VALUE
    1: """%(bug708901.func_code.co_firstlineno + 1,
    1:      bug708901.func_code.co_firstlineno + 2,
    1:      bug708901.func_code.co_firstlineno + 3)
       
       
    1: def bug1333982(x=[]):
>>>>>>     assert 0, ([s for s in x] +
>>>>>>               1)
>>>>>>     pass
       
       dis_bug1333982 = """\
       %3d           0 LOAD_CONST               1 (0)
                     3 POP_JUMP_IF_TRUE        41
                     6 LOAD_GLOBAL              0 (AssertionError)
                     9 BUILD_LIST               0
                    12 LOAD_FAST                0 (x)
                    15 GET_ITER
               >>   16 FOR_ITER                12 (to 31)
                    19 STORE_FAST               1 (s)
                    22 LOAD_FAST                1 (s)
                    25 LIST_APPEND              2
                    28 JUMP_ABSOLUTE           16
       
       %3d     >>   31 LOAD_CONST               2 (1)
                    34 BINARY_ADD
                    35 CALL_FUNCTION            1
                    38 RAISE_VARARGS            1
       
       %3d     >>   41 LOAD_CONST               0 (None)
                    44 RETURN_VALUE
    1: """%(bug1333982.func_code.co_firstlineno + 1,
    1:      bug1333982.func_code.co_firstlineno + 2,
    1:      bug1333982.func_code.co_firstlineno + 3)
       
       _BIG_LINENO_FORMAT = """\
       %3d           0 LOAD_GLOBAL              0 (spam)
                     3 POP_TOP
                     4 LOAD_CONST               0 (None)
                     7 RETURN_VALUE
    1: """
       
    2: class DisTests(unittest.TestCase):
    1:     def do_disassembly_test(self, func, expected):
  772:         s = StringIO.StringIO()
  772:         save_stdout = sys.stdout
  772:         sys.stdout = s
  772:         dis.dis(func)
  772:         sys.stdout = save_stdout
  772:         got = s.getvalue()
               # Trim trailing blanks (if any).
  772:         lines = got.split('\n')
 4659:         lines = [line.rstrip() for line in lines]
  772:         expected = expected.split("\n")
  772:         import difflib
  772:         if expected != lines:
>>>>>>             self.fail(
>>>>>>                 "events did not match expectation:\n" +
>>>>>>                 "\n".join(difflib.ndiff(expected,
>>>>>>                                         lines)))
       
    1:     def test_opmap(self):
    1:         self.assertEqual(dis.opmap["STOP_CODE"], 0)
    1:         self.assertIn(dis.opmap["LOAD_CONST"], dis.hasconst)
    1:         self.assertIn(dis.opmap["STORE_NAME"], dis.hasname)
       
    1:     def test_opname(self):
    1:         self.assertEqual(dis.opname[dis.opmap["LOAD_FAST"]], "LOAD_FAST")
       
    1:     def test_boundaries(self):
    1:         self.assertEqual(dis.opmap["EXTENDED_ARG"], dis.EXTENDED_ARG)
    1:         self.assertEqual(dis.opmap["STORE_NAME"], dis.HAVE_ARGUMENT)
       
    1:     def test_dis(self):
    1:         self.do_disassembly_test(_f, dis_f)
       
    1:     def test_bug_708901(self):
    1:         self.do_disassembly_test(bug708901, dis_bug708901)
       
    1:     def test_bug_1333982(self):
               # This one is checking bytecodes generated for an `assert` statement,
               # so fails if the tests are run with -O.  Skip this test then.
               if __debug__:
    1:             self.do_disassembly_test(bug1333982, dis_bug1333982)
               else:
                   self.skipTest('need asserts, run without -O')
       
    1:     def test_big_linenos(self):
    1:         def func(count):
  769:             namespace = {}
  769:             func = "def foo():\n " + "".join(["\n "] * count + ["spam\n"])
  769:             exec func in namespace
  769:             return namespace['foo']
       
               # Test all small ranges
  300:         for i in xrange(1, 300):
  299:             expected = _BIG_LINENO_FORMAT % (i + 2)
  299:             self.do_disassembly_test(func(i), expected)
       
               # Test some larger ranges too
  471:         for i in xrange(300, 5000, 10):
  470:             expected = _BIG_LINENO_FORMAT % (i + 2)
  470:             self.do_disassembly_test(func(i), expected)
       
    1: def test_main():
    1:     run_unittest(DisTests)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
