    1: import unittest
    1: from ctypes import *
       
       ################################################################
       #
       # The incomplete pointer example from the tutorial
       #
       
    2: class MyTestCase(unittest.TestCase):
       
    1:     def test_incomplete_example(self):
    1:         lpcell = POINTER("cell")
    2:         class cell(Structure):
    1:             _fields_ = [("name", c_char_p),
    1:                         ("next", lpcell)]
       
    1:         SetPointerType(lpcell, cell)
       
    1:         c1 = cell()
    1:         c1.name = "foo"
    1:         c2 = cell()
    1:         c2.name = "bar"
       
    1:         c1.next = pointer(c2)
    1:         c2.next = pointer(c1)
       
    1:         p = c1
       
    1:         result = []
    9:         for i in range(8):
    8:             result.append(p.name)
    8:             p = p.next[0]
    1:         self.assertEqual(result, ["foo", "bar"] * 4)
       
               # to not leak references, we must clean _pointer_type_cache
    1:         from ctypes import _pointer_type_cache
    1:         del _pointer_type_cache[cell]
       
       ################################################################
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
