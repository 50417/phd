       """
       Python 'utf-32' Codec
    1: """
    1: import codecs, sys
       
       ### Codec APIs
       
    1: encode = codecs.utf_32_encode
       
    1: def decode(input, errors='strict'):
>>>>>>     return codecs.utf_32_decode(input, errors, True)
       
    2: class IncrementalEncoder(codecs.IncrementalEncoder):
    1:     def __init__(self, errors='strict'):
  102:         codecs.IncrementalEncoder.__init__(self, errors)
  102:         self.encoder = None
       
    1:     def encode(self, input, final=False):
   19:         if self.encoder is None:
    8:             result = codecs.utf_32_encode(input, self.errors)[0]
    8:             if sys.byteorder == 'little':
    8:                 self.encoder = codecs.utf_32_le_encode
                   else:
>>>>>>                 self.encoder = codecs.utf_32_be_encode
    8:             return result
   11:         return self.encoder(input, self.errors)[0]
       
    1:     def reset(self):
    8:         codecs.IncrementalEncoder.reset(self)
    8:         self.encoder = None
       
    1:     def getstate(self):
               # state info we return to the caller:
               # 0: stream is in natural order for this platform
               # 2: endianness hasn't been determined yet
               # (we're never writing in unnatural order)
>>>>>>         return (2 if self.encoder is None else 0)
       
    1:     def setstate(self, state):
    4:         if state:
>>>>>>             self.encoder = None
               else:
    4:             if sys.byteorder == 'little':
    4:                 self.encoder = codecs.utf_32_le_encode
                   else:
>>>>>>                 self.encoder = codecs.utf_32_be_encode
       
    2: class IncrementalDecoder(codecs.BufferedIncrementalDecoder):
    1:     def __init__(self, errors='strict'):
  187:         codecs.BufferedIncrementalDecoder.__init__(self, errors)
  187:         self.decoder = None
       
    1:     def _buffer_decode(self, input, errors, final):
 6989:         if self.decoder is None:
                   (output, consumed, byteorder) = \
  306:                 codecs.utf_32_ex_decode(input, errors, 0, final)
  306:             if byteorder == -1:
  191:                 self.decoder = codecs.utf_32_le_decode
  115:             elif byteorder == 1:
>>>>>>                 self.decoder = codecs.utf_32_be_decode
  115:             elif consumed >= 4:
>>>>>>                 raise UnicodeError("UTF-32 stream does not start with BOM")
  306:             return (output, consumed)
 6683:         return self.decoder(input, self.errors, final)
       
    1:     def reset(self):
   11:         codecs.BufferedIncrementalDecoder.reset(self)
   11:         self.decoder = None
       
    1:     def getstate(self):
               # additional state info from the base class must be None here,
               # as it isn't passed along to the caller
 3370:         state = codecs.BufferedIncrementalDecoder.getstate(self)[0]
               # additional state info we pass to the caller:
               # 0: stream is in natural order for this platform
               # 1: stream is in unnatural order
               # 2: endianness hasn't been determined yet
 3370:         if self.decoder is None:
  140:             return (state, 2)
 3230:         addstate = int((sys.byteorder == "big") !=
 3230:                        (self.decoder is codecs.utf_32_be_decode))
 3230:         return (state, addstate)
       
    1:     def setstate(self, state):
               # state[1] will be ignored by BufferedIncrementalDecoder.setstate()
    1:         codecs.BufferedIncrementalDecoder.setstate(self, state)
    1:         state = state[1]
    1:         if state == 0:
                   self.decoder = (codecs.utf_32_be_decode
    1:                             if sys.byteorder == "big"
    1:                             else codecs.utf_32_le_decode)
>>>>>>         elif state == 1:
                   self.decoder = (codecs.utf_32_le_decode
>>>>>>                             if sys.byteorder == "big"
>>>>>>                             else codecs.utf_32_be_decode)
               else:
>>>>>>             self.decoder = None
       
    2: class StreamWriter(codecs.StreamWriter):
    1:     def __init__(self, stream, errors='strict'):
    7:         self.encoder = None
    7:         codecs.StreamWriter.__init__(self, stream, errors)
       
    1:     def reset(self):
    8:         codecs.StreamWriter.reset(self)
    8:         self.encoder = None
       
    1:     def encode(self, input, errors='strict'):
   19:         if self.encoder is None:
    9:             result = codecs.utf_32_encode(input, errors)
    9:             if sys.byteorder == 'little':
    9:                 self.encoder = codecs.utf_32_le_encode
                   else:
>>>>>>                 self.encoder = codecs.utf_32_be_encode
    9:             return result
               else:
   10:             return self.encoder(input, errors)
       
    2: class StreamReader(codecs.StreamReader):
       
    1:     def reset(self):
    8:         codecs.StreamReader.reset(self)
    8:         try:
    8:             del self.decode
    7:         except AttributeError:
    7:             pass
       
    1:     def decode(self, input, errors='strict'):
               (object, consumed, byteorder) = \
  670:             codecs.utf_32_ex_decode(input, errors, 0, False)
  668:         if byteorder == -1:
  662:             self.decode = codecs.utf_32_le_decode
    6:         elif byteorder == 1:
>>>>>>             self.decode = codecs.utf_32_be_decode
    6:         elif consumed>=4:
>>>>>>             raise UnicodeError,"UTF-32 stream does not start with BOM"
  668:         return (object, consumed)
       
       ### encodings module API
       
    1: def getregentry():
    2:     return codecs.CodecInfo(
    2:         name='utf-32',
    2:         encode=encode,
    2:         decode=decode,
    2:         incrementalencoder=IncrementalEncoder,
    2:         incrementaldecoder=IncrementalDecoder,
    2:         streamreader=StreamReader,
    2:         streamwriter=StreamWriter,
           )
