       """Suite Metrowerks Shell Suite: Events supported by the Metrowerks Project Shell
       Level 1, version 1
       
       Generated from /Volumes/Sap/Applications (Mac OS 9)/Metrowerks CodeWarrior 7.0/Metrowerks CodeWarrior/CodeWarrior IDE 4.2.5
       AETE/AEUT resource version 1/0, language 0, script 0
    1: """
       
    1: import aetools
    1: import MacOS
       
    1: _code = 'MMPR'
       
    2: class Metrowerks_Shell_Suite_Events:
       
    1:     _argmap_Add_Files = {
    1:         'To_Segment' : 'Segm',
           }
       
    1:     def Add_Files(self, _object, _attributes={}, **_arguments):
               """Add Files: Add the specified file(s) to the current project
               Required argument: List of files to add
               Keyword argument To_Segment: Segment number into which to add the file(s)
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: Error code for each file added
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'AddF'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Add_Files)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Check_Syntax = {
    1:         'ExternalEditor' : 'Errs',
           }
       
    1:     def Check_Syntax(self, _object, _attributes={}, **_arguments):
               """Check Syntax: Check the syntax of the specified file(s)
               Required argument: List of files to check the syntax of
               Keyword argument ExternalEditor: Should the contents of the message window be returned to the caller?
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: Errors for each file whose syntax was checked
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'Chek'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Check_Syntax)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Close_Project(self, _no_object=None, _attributes={}, **_arguments):
               """Close Project: Close the current project
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'ClsP'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Close_Window = {
    1:         'Saving' : 'savo',
           }
       
    1:     def Close_Window(self, _object, _attributes={}, **_arguments):
               """Close Window: Close the windows showing the specified files
               Required argument: The files to close
               Keyword argument Saving: Whether to save changes to each file before closing its window
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'ClsW'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Close_Window)
>>>>>>         _arguments['----'] = _object
       
>>>>>>         aetools.enumsubst(_arguments, 'savo', _Enum_savo)
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Compile = {
    1:         'ExternalEditor' : 'Errs',
           }
       
    1:     def Compile(self, _object, _attributes={}, **_arguments):
               """Compile: Compile the specified file(s)
               Required argument: List of files to compile
               Keyword argument ExternalEditor: Should the contents of the message window be returned to the caller?
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: Errors for each file compiled
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'Comp'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Compile)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Create_Project = {
    1:         'from_stationery' : 'Tmpl',
           }
       
    1:     def Create_Project(self, _object, _attributes={}, **_arguments):
               """Create Project: Create a new project file
               Required argument: New project file specifier
               Keyword argument from_stationery: undocumented, typecode 'alis'
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'NewP'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Create_Project)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Get_Definition(self, _object, _attributes={}, **_arguments):
               """Get Definition: Returns the location(s) of a globally scoped function or data object.
               Required argument: undocumented, typecode 'TEXT'
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: undocumented, typecode 'FDef'
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'GDef'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Get_Open_Documents(self, _no_object=None, _attributes={}, **_arguments):
               """Get Open Documents: Returns the list of open documents
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: The list of documents
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'GDoc'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Get_Preferences = {
    1:         'of' : 'PRec',
    1:         'from_panel' : 'PNam',
           }
       
    1:     def Get_Preferences(self, _no_object=None, _attributes={}, **_arguments):
               """Get Preferences: Get the preferences for the current project
               Keyword argument of: Names of requested preferences
               Keyword argument from_panel: Name of the preference panel
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: The requested preferences
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'Gref'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Get_Preferences)
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Get_Project_File = {
    1:         'Segment' : 'Segm',
           }
       
    1:     def Get_Project_File(self, _object, _attributes={}, **_arguments):
               """Get Project File: Returns a description of a file in the project window.
               Required argument: The index of the file within its segment.
               Keyword argument Segment: The segment containing the file.
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: undocumented, typecode 'SrcF'
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'GFil'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Get_Project_File)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Get_Project_Specifier(self, _no_object=None, _attributes={}, **_arguments):
               """Get Project Specifier: Return the File Specifier for the current project
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: File Specifier for the current project
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'GetP'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Get_Segments(self, _no_object=None, _attributes={}, **_arguments):
               """Get Segments: Returns a description of each segment in the project.
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: undocumented, typecode 'Seg '
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'GSeg'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Get_member_function_names(self, _object, _attributes={}, **_arguments):
               """Get member function names: Returns a list containing the names of all the member functions of a class object
               Required argument: must be a class object
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: undocumented, typecode 'list'
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'MbFN'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Get_nonsimple_classes(self, _no_object=None, _attributes={}, **_arguments):
               """Get nonsimple classes: Returns an alphabetical list of classes with member functions, bases classes, or subclasses
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: undocumented, typecode 'list'
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'NsCl'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Goto_Function(self, _object, _attributes={}, **_arguments):
               """Goto Function: Goto Specified Function Name
               Required argument: undocumented, typecode 'TEXT'
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'GoFn'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Goto_Line(self, _object, _attributes={}, **_arguments):
               """Goto Line: Goto Specified Line Number
               Required argument: The requested source file line number
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'GoLn'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Is_In_Project(self, _object, _attributes={}, **_arguments):
               """Is In Project: Whether or not the specified file(s) is in the current project
               Required argument: List of files to check for project membership
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: Result code for each file
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'FInP'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Make_Project = {
    1:         'ExternalEditor' : 'Errs',
           }
       
    1:     def Make_Project(self, _no_object=None, _attributes={}, **_arguments):
               """Make Project: Make the current project
               Keyword argument ExternalEditor: Should the contents of the message window be returned to the caller?
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: Errors that occurred while making the project
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'Make'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Make_Project)
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Open_browser(self, _object, _attributes={}, **_arguments):
               """Open browser: Display a class, member function, or data member object in a single class browser window
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'Brow'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Precompile = {
    1:         'Saving_As' : 'Targ',
    1:         'ExternalEditor' : 'Errs',
           }
       
    1:     def Precompile(self, _object, _attributes={}, **_arguments):
               """Precompile: Precompile the specified file to the specified destination file
               Required argument: File to precompile
               Keyword argument Saving_As: Destination file for precompiled header
               Keyword argument ExternalEditor: Should the contents of the message window be returned to the caller?
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: Errors for the precompiled file
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'PreC'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Precompile)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Preprocess = {
    1:         'ExternalEditor' : 'Errs',
           }
       
    1:     def Preprocess(self, _object, _attributes={}, **_arguments):
               """Preprocess: Preprocesses the specified file(s)
               Required argument: undocumented, typecode 'alis'
               Keyword argument ExternalEditor: undocumented, typecode 'bool'
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: Errors for each preprocessed file
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'PreP'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Preprocess)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Remove_Binaries(self, _no_object=None, _attributes={}, **_arguments):
               """Remove Binaries: Remove the binary object code from the current project
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'RemB'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Remove_Files(self, _object, _attributes={}, **_arguments):
               """Remove Files: Remove the specified file(s) from the current project
               Required argument: List of files to remove
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: Error code for each file removed
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'RemF'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Reset_File_Paths(self, _no_object=None, _attributes={}, **_arguments):
               """Reset File Paths: Resets access paths for all files belonging to open project.
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'ReFP'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Run_Project = {
    1:         'ExternalEditor' : 'Errs',
    1:         'SourceDebugger' : 'DeBg',
           }
       
    1:     def Run_Project(self, _no_object=None, _attributes={}, **_arguments):
               """Run Project: Run the current project
               Keyword argument ExternalEditor: Should the contents of the message window be returned to the caller?
               Keyword argument SourceDebugger: Run the application under the control of the source-level debugger
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: Errors that occurred when running the project
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'RunP'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Run_Project)
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Save_Error_Window_As(self, _object, _attributes={}, **_arguments):
               """Save Error Window As: Saves the Errors & Warnings window as a text file
               Required argument: Destination file for Save Message Window As
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'SvMs'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Set_Current_Target(self, _object=None, _attributes={}, **_arguments):
               """Set Current Target: Set the current target of a project
               Required argument: Name of target
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'STrg'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Set_Default_Project(self, _object, _attributes={}, **_arguments):
               """Set Default Project: Set the default project
               Required argument: Name of project
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'SDfP'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Set_Modification_Date = {
    1:         'to' : 'MDat',
           }
       
    1:     def Set_Modification_Date(self, _object, _attributes={}, **_arguments):
               """Set Modification Date: Changes the internal modification date of the specified file(s)
               Required argument: List of files
               Keyword argument to: undocumented, typecode 'ldt '
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: Error code for each modified file
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'SMod'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Set_Modification_Date)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Set_Preferences = {
    1:         'of_panel' : 'PNam',
    1:         'to' : 'PRec',
           }
       
    1:     def Set_Preferences(self, _no_object=None, _attributes={}, **_arguments):
               """Set Preferences: Set the preferences for the current project
               Keyword argument of_panel: Name of the preference panel
               Keyword argument to: Preferences settings
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'Pref'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Set_Preferences)
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Set_Project_File = {
    1:         'to' : 'SrcS',
           }
       
    1:     def Set_Project_File(self, _object, _attributes={}, **_arguments):
               """Set Project File: Changes the settings for a given file in the project.
               Required argument: The name of the file
               Keyword argument to: The new settings for the file
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'SFil'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Set_Project_File)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Set_Segment = {
    1:         'to' : 'Segm',
           }
       
    1:     def Set_Segment(self, _object, _attributes={}, **_arguments):
               """Set Segment: Changes the name and attributes of a segment.
               Required argument: The segment to change
               Keyword argument to: The new name and attributes for the segment.
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'SSeg'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Set_Segment)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def Touch(self, _object, _attributes={}, **_arguments):
               """Touch: Force recompilation of the specified file(s)
               Required argument: List of files to compile
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: Error code for each file touched
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'Toch'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Update_Project = {
    1:         'ExternalEditor' : 'Errs',
           }
       
    1:     def Update_Project(self, _no_object=None, _attributes={}, **_arguments):
               """Update Project: Update the current project
               Keyword argument ExternalEditor: Should the contents of the message window be returned to the caller?
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: Errors that occurred while updating the project
               """
>>>>>>         _code = 'MMPR'
>>>>>>         _subcode = 'UpdP'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Update_Project)
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
       
    2: class Browser_Coloring(aetools.ComponentItem):
    1:     """Browser Coloring - Colors for Browser symbols. """
    1:     want = 'BRKW'
    2: class _Prop_Browser_Keywords(aetools.NProperty):
    1:     """Browser Keywords - Mark Browser symbols with color. """
    1:     which = 'BW00'
    1:     want = 'bool'
    2: class _Prop_Classes_Color(aetools.NProperty):
    1:     """Classes Color - The color for classes. """
    1:     which = 'BW01'
    1:     want = 'cRGB'
    2: class _Prop_Constants_Color(aetools.NProperty):
    1:     """Constants Color - The color for constants. """
    1:     which = 'BW02'
    1:     want = 'cRGB'
    2: class _Prop_Enums_Color(aetools.NProperty):
    1:     """Enums Color - The color for enums. """
    1:     which = 'BW03'
    1:     want = 'cRGB'
    2: class _Prop_Functions_Color(aetools.NProperty):
    1:     """Functions Color - Set color for functions. """
    1:     which = 'BW04'
    1:     want = 'cRGB'
    2: class _Prop_Globals_Color(aetools.NProperty):
    1:     """Globals Color - The color for globals """
    1:     which = 'BW05'
    1:     want = 'cRGB'
    2: class _Prop_Macros_Color(aetools.NProperty):
    1:     """Macros Color - The color for macros. """
    1:     which = 'BW06'
    1:     want = 'cRGB'
    2: class _Prop_Template_Commands_in_Menu(aetools.NProperty):
    1:     """Template Commands in Menu - Include template commands in context menus """
    1:     which = 'BW10'
    1:     want = 'bool'
    2: class _Prop_Templates_Color(aetools.NProperty):
    1:     """Templates Color - Set color for templates. """
    1:     which = 'BW07'
    1:     want = 'cRGB'
    2: class _Prop_Typedefs_Color(aetools.NProperty):
    1:     """Typedefs Color - The color for typedefs. """
    1:     which = 'BW08'
    1:     want = 'cRGB'
       
    2: class Build_Settings(aetools.ComponentItem):
    1:     """Build Settings - Build Settings preferences. """
    1:     want = 'BSTG'
    2: class _Prop_Build_Before_Running(aetools.NProperty):
    1:     """Build Before Running - Build the target before running. """
    1:     which = 'BX04'
    1:     want = 'BXbr'
    2: class _Prop_Compiler_Thread_Stack_Size(aetools.NProperty):
    1:     """Compiler Thread Stack Size - Compiler Thread Stack Size """
    1:     which = 'BX06'
    1:     want = 'long'
    2: class _Prop_Completion_Sound(aetools.NProperty):
    1:     """Completion Sound - Play a sound when finished a Bring Up To Date or Make command. """
    1:     which = 'BX01'
    1:     want = 'bool'
    2: class _Prop_Failure_Sound(aetools.NProperty):
    1:     """Failure Sound - The sound CodeWarrior plays when it cannot finish a Bring Up To Date or Make command. """
    1:     which = 'BX03'
    1:     want = 'TEXT'
    2: class _Prop_Include_Cache_Size(aetools.NProperty):
    1:     """Include Cache Size - Include file cache size. """
    1:     which = 'BX05'
    1:     want = 'long'
    2: class _Prop_Save_Before_Building(aetools.NProperty):
    1:     """Save Before Building - Save open editor files before build operations """
    1:     which = 'BX07'
    1:     want = 'bool'
    2: class _Prop_Success_Sound(aetools.NProperty):
    1:     """Success Sound - The sound CodeWarrior plays when it successfully finishes a Bring Up To Date or Make command. """
    1:     which = 'BX02'
    1:     want = 'TEXT'
       
    2: class base_class(aetools.ComponentItem):
    1:     """base class - A base class or super class of a class """
    1:     want = 'BsCl'
    2: class _Prop_access(aetools.NProperty):
    1:     """access -  """
    1:     which = 'Acce'
    1:     want = 'Acce'
    2: class _Prop_class_(aetools.NProperty):
    1:     """class - The class object corresponding to this base class """
    1:     which = 'Clas'
    1:     want = 'obj '
    2: class _Prop_virtual(aetools.NProperty):
    1:     """virtual -  """
    1:     which = 'Virt'
    1:     want = 'bool'
       
    1: base_classes = base_class
       
    2: class Custom_Keywords(aetools.ComponentItem):
    1:     """Custom Keywords -  """
    1:     want = 'CUKW'
    2: class _Prop_Custom_Color_1(aetools.NProperty):
    1:     """Custom Color 1 - The color for the first set of custom keywords. """
    1:     which = 'GH05'
    1:     want = 'cRGB'
    2: class _Prop_Custom_Color_2(aetools.NProperty):
    1:     """Custom Color 2 - The color for the second set custom keywords. """
    1:     which = 'GH06'
    1:     want = 'cRGB'
    2: class _Prop_Custom_Color_3(aetools.NProperty):
    1:     """Custom Color 3 - The color for the third set of custom keywords. """
    1:     which = 'GH07'
    1:     want = 'cRGB'
    2: class _Prop_Custom_Color_4(aetools.NProperty):
    1:     """Custom Color 4 - The color for the fourth set of custom keywords. """
    1:     which = 'GH08'
    1:     want = 'cRGB'
       
    2: class browser_catalog(aetools.ComponentItem):
    1:     """browser catalog - The browser symbol catalog for the current project """
    1:     want = 'Cata'
       #        element 'Clas' as ['indx', 'name']
       
    2: class class_(aetools.ComponentItem):
    1:     """class - A class, struct, or record type in the current project. """
    1:     want = 'Clas'
    2: class _Prop_all_subclasses(aetools.NProperty):
    1:     """all subclasses - the classes directly or indirectly derived from this class """
    1:     which = 'SubA'
    1:     want = 'Clas'
    2: class _Prop_declaration_end_offset(aetools.NProperty):
    1:     """declaration end offset - End of class declaration """
    1:     which = 'DcEn'
    1:     want = 'long'
    2: class _Prop_declaration_file(aetools.NProperty):
    1:     """declaration file - Source file containing the class declaration """
    1:     which = 'DcFl'
    1:     want = 'fss '
    2: class _Prop_declaration_start_offset(aetools.NProperty):
    1:     """declaration start offset - Start of class declaration source code """
    1:     which = 'DcSt'
    1:     want = 'long'
    2: class _Prop_language(aetools.NProperty):
    1:     """language - Implementation language of this class """
    1:     which = 'Lang'
    1:     want = 'Lang'
    2: class _Prop_name(aetools.NProperty):
    1:     """name -  """
    1:     which = 'pnam'
    1:     want = 'TEXT'
    2: class _Prop_subclasses(aetools.NProperty):
    1:     """subclasses - the immediate subclasses of this class """
    1:     which = 'SubC'
    1:     want = 'Clas'
       #        element 'BsCl' as ['indx']
       #        element 'DtMb' as ['indx', 'name']
       #        element 'MbFn' as ['indx', 'name']
       
    1: classes = class_
       
    2: class Debugger_Display(aetools.ComponentItem):
    1:     """Debugger Display - Debugger Display preferences """
    1:     want = 'DbDS'
    2: class _Prop_Default_Array_Size(aetools.NProperty):
    1:     """Default Array Size - Controls whether CodeWarrior uses its own integrated editor or an external application for editing text files. """
    1:     which = 'Db08'
    1:     want = 'shor'
    2: class _Prop_Show_As_Decimal(aetools.NProperty):
    1:     """Show As Decimal - Show variable values as decimal by default """
    1:     which = 'Db10'
    1:     want = 'bool'
    2: class _Prop_Show_Locals(aetools.NProperty):
    1:     """Show Locals - Show locals by default """
    1:     which = 'Db09'
    1:     want = 'bool'
    2: class _Prop_Show_Variable_Types(aetools.NProperty):
    1:     """Show Variable Types - Show variable types by default. """
    1:     which = 'Db01'
    1:     want = 'bool'
    2: class _Prop_Sort_By_Method(aetools.NProperty):
    1:     """Sort By Method - Sort functions by method. """
    1:     which = 'Db02'
    1:     want = 'bool'
    2: class _Prop_Threads_in_Window(aetools.NProperty):
    1:     """Threads in Window - Show threads in separate windows. """
    1:     which = 'Db04'
    1:     want = 'bool'
    2: class _Prop_Use_RTTI(aetools.NProperty):
    1:     """Use RTTI - Enable RunTime Type Information. """
    1:     which = 'Db03'
    1:     want = 'bool'
    2: class _Prop_Variable_Changed_Hilite(aetools.NProperty):
    1:     """Variable Changed Hilite - Variable changed hilite color. """
    1:     which = 'Db07'
    1:     want = 'cRGB'
    2: class _Prop_Variable_Hints(aetools.NProperty):
    1:     """Variable Hints - Show variable hints. """
    1:     which = 'Db05'
    1:     want = 'bool'
    2: class _Prop_Watchpoint_Hilite(aetools.NProperty):
    1:     """Watchpoint Hilite - Watchpoint hilite color. """
    1:     which = 'Db06'
    1:     want = 'cRGB'
       
    2: class Debugger_Global(aetools.ComponentItem):
    1:     """Debugger Global - Debugger Global preferences """
    1:     want = 'DbGL'
    2: class _Prop_Auto_Target_Libraries(aetools.NProperty):
    1:     """Auto Target Libraries - Automatically target libraries when debugging """
    1:     which = 'Dg11'
    1:     want = 'bool'
    2: class _Prop_Cache_Edited_Files(aetools.NProperty):
    1:     """Cache Edited Files - Cache edit files between debug sessions """
    1:     which = 'Dg12'
    1:     want = 'bool'
    2: class _Prop_Confirm_Kill(aetools.NProperty):
    1:     """Confirm Kill - Confirm the \xd4killing\xd5 of the process. """
    1:     which = 'Dg04'
    1:     want = 'bool'
    2: class _Prop_Dont_Step_in_Runtime(aetools.NProperty):
    1:     """Dont Step in Runtime - Don\xd5t step into runtime code when debugging. """
    1:     which = 'Dg07'
    1:     want = 'bool'
    2: class _Prop_File_Cache_Duration(aetools.NProperty):
    1:     """File Cache Duration - Duration to keep files in cache (in days) """
    1:     which = 'Dg13'
    1:     want = 'shor'
    2: class _Prop_Ignore_Mod_Dates(aetools.NProperty):
    1:     """Ignore Mod Dates - Ignore modification dates of files. """
    1:     which = 'Dg01'
    1:     want = 'bool'
    2: class _Prop_Launch_Apps_on_Open(aetools.NProperty):
    1:     """Launch Apps on Open - Launch applications on the opening of sym files. """
    1:     which = 'Dg03'
    1:     want = 'bool'
    2: class _Prop_Open_All_Classes(aetools.NProperty):
    1:     """Open All Classes - Open all Java class files. """
    1:     which = 'Dg02'
    1:     want = 'bool'
    2: class _Prop_Select_Stack_Crawl(aetools.NProperty):
    1:     """Select Stack Crawl - Select the stack crawl. """
    1:     which = 'Dg06'
    1:     want = 'bool'
    2: class _Prop_Stop_at_Main(aetools.NProperty):
    1:     """Stop at Main - Stop to debug on the main() function. """
    1:     which = 'Dg05'
    1:     want = 'bool'
       
    2: class Debugger_Target(aetools.ComponentItem):
    1:     """Debugger Target - Debugger Target preferences """
    1:     want = 'DbTG'
    2: class _Prop_Cache_symbolics(aetools.NProperty):
    1:     """Cache symbolics - Cache symbolics between runs when executable doesn\xd5t change, else release symbolics files after killing process. """
    1:     which = 'Dt15'
    1:     want = 'bool'
    2: class _Prop_Data_Update_Interval(aetools.NProperty):
    1:     """Data Update Interval - How often to update the data while running (in seconds) """
    1:     which = 'Dt09'
    1:     want = 'long'
    2: class _Prop_Log_System_Messages(aetools.NProperty):
    1:     """Log System Messages - Log all system messages while debugging. """
    1:     which = 'Dt02'
    1:     want = 'bool'
    2: class _Prop_Relocated_Executable_Path(aetools.NProperty):
    1:     """Relocated Executable Path - Path to location of relocated libraries, code resources or remote debugging folder """
    1:     which = 'Dt10'
    1:     want = 'RlPt'
    2: class _Prop_Stop_at_temp_breakpoint(aetools.NProperty):
    1:     """Stop at temp breakpoint - Stop at a temp breakpoint on program launch. Set breakpoint type in Temp Breakpoint Type AppleEvent. """
    1:     which = 'Dt13'
    1:     want = 'bool'
    2: class _Prop_Temp_Breakpoint_Type(aetools.NProperty):
    1:     """Temp Breakpoint Type - Type of temp breakpoint to set on program launch. """
    1:     which = 'Dt16'
    1:     want = 'TmpB'
    2: class _Prop_Temp_breakpoint_names(aetools.NProperty):
    1:     """Temp breakpoint names - Comma separated list of names to attempt to stop at on program launch. First symbol to resolve in list is the temp BP that will be set. """
    1:     which = 'Dt14'
    1:     want = 'ctxt'
    2: class _Prop_Update_Data_While_Running(aetools.NProperty):
    1:     """Update Data While Running - Should pause to update data while running """
    1:     which = 'Dt08'
    1:     want = 'bool'
       
    2: class Debugger_Windowing(aetools.ComponentItem):
    1:     """Debugger Windowing -  """
    1:     want = 'DbWN'
    2: class _Prop_Debugging_Start_Action(aetools.NProperty):
    1:     """Debugging Start Action - What action to take when debug session starts """
    1:     which = 'Dw01'
    1:     want = 'DbSA'
    2: class _Prop_Do_Nothing_To_Projects(aetools.NProperty):
    1:     """Do Nothing To Projects - Suppress debugging start action for project windows """
    1:     which = 'Dw02'
    1:     want = 'bool'
       
    2: class data_member(aetools.ComponentItem):
    1:     """data member - A class data member or field """
    1:     want = 'DtMb'
    2: class _Prop_static(aetools.NProperty):
    1:     """static -  """
    1:     which = 'Stat'
    1:     want = 'bool'
       
    1: data_members = data_member
       
    2: class Editor(aetools.ComponentItem):
    1:     """Editor -  """
    1:     want = 'EDTR'
    2: class _Prop_Background_Color(aetools.NProperty):
    1:     """Background Color - Color of the background of editor windows. """
    1:     which = 'ED13'
    1:     want = 'cRGB'
    2: class _Prop_Balance(aetools.NProperty):
    1:     """Balance - Flash the matching opening bracket when you type a closing bracket. """
    1:     which = 'ED03'
    1:     want = 'bool'
    2: class _Prop_Context_Popup_Delay(aetools.NProperty):
    1:     """Context Popup Delay - The amount of time, in sixtieths of a second, before the context popup is displayed if you click and hold on a browser symbol. """
    1:     which = 'ED14'
    1:     want = 'long'
    2: class _Prop_Default_Text_File_Format(aetools.NProperty):
    1:     """Default Text File Format - Default text file format (i.e. which type of line endings to use) """
    1:     which = 'ED17'
    1:     want = 'TxtF'
    2: class _Prop_Dynamic_Scroll(aetools.NProperty):
    1:     """Dynamic Scroll - Display a window\xd5s contents as you move the scroll box. """
    1:     which = 'ED02'
    1:     want = 'bool'
    2: class _Prop_Flash_Delay(aetools.NProperty):
    1:     """Flash Delay - The amount of time, in sixtieths of a second, the editor highlights a matching bracket. """
    1:     which = 'ED01'
    1:     want = 'long'
    2: class _Prop_Left_Margin_Line_Select(aetools.NProperty):
    1:     """Left Margin Line Select - Clicking in the left margin selects lines """
    1:     which = 'ED16'
    1:     want = 'bool'
    2: class _Prop_Main_Text_Color(aetools.NProperty):
    1:     """Main Text Color - Main, default, color for text. """
    1:     which = 'ED12'
    1:     want = 'cRGB'
    2: class _Prop_Relaxed_C_Popup_Parsing(aetools.NProperty):
    1:     """Relaxed C Popup Parsing - Relax the function parser for C source files """
    1:     which = 'ED15'
    1:     want = 'bool'
    2: class _Prop_Remember_Font(aetools.NProperty):
    1:     """Remember Font - Display a source file with its own font settings. """
    1:     which = 'ED08'
    1:     want = 'bool'
    2: class _Prop_Remember_Selection(aetools.NProperty):
    1:     """Remember Selection - Restore the previous selection in a file when you open it. """
    1:     which = 'ED09'
    1:     want = 'bool'
    2: class _Prop_Remember_Window(aetools.NProperty):
    1:     """Remember Window - Restore the last size and position for a source file window when you open it. """
    1:     which = 'ED10'
    1:     want = 'bool'
    2: class _Prop_Sort_Function_Popup(aetools.NProperty):
    1:     """Sort Function Popup -  """
    1:     which = 'ED06'
    1:     want = 'bool'
    2: class _Prop_Use_Drag__26__Drop_Editing(aetools.NProperty):
    1:     """Use Drag & Drop Editing - Use Drag & Drop text editing. """
    1:     which = 'ED04'
    1:     want = 'bool'
    2: class _Prop_Use_Multiple_Undo(aetools.NProperty):
    1:     """Use Multiple Undo -  """
    1:     which = 'ED07'
    1:     want = 'bool'
       
    2: class Environment_Variable(aetools.ComponentItem):
    1:     """Environment Variable - Environment variable for host OS """
    1:     want = 'EnvV'
    2: class _Prop_value(aetools.NProperty):
    1:     """value - Value of the environment variable """
    1:     which = 'Valu'
    1:     want = 'TEXT'
       
    2: class Error_Information(aetools.ComponentItem):
    1:     """Error Information - Describes a single error or warning from the compiler or the linker. """
    1:     want = 'ErrM'
    2: class _Prop_disk_file(aetools.NProperty):
    1:     """disk file - The file where the error occurred.  May not be returned for certain kinds of errors (eg, link errors). """
    1:     which = 'file'
    1:     want = 'fss '
    2: class _Prop_lineNumber(aetools.NProperty):
    1:     """lineNumber - The line in the file where the error occurred.  May not be returned for certain kinds of errors (eg, link errors). """
    1:     which = 'ErrL'
    1:     want = 'long'
    2: class _Prop_message(aetools.NProperty):
    1:     """message - The error or warning message. """
    1:     which = 'ErrS'
    1:     want = 'TEXT'
    2: class _Prop_messageKind(aetools.NProperty):
    1:     """messageKind - The type of error or warning. """
    1:     which = 'ErrT'
    1:     want = 'ErrT'
       
    2: class Function_Information(aetools.ComponentItem):
    1:     """Function Information - Describes the location of any function or global data definition within the current project. """
    1:     want = 'FDef'
       
    2: class File_Mappings(aetools.ComponentItem):
    1:     """File Mappings - Mappings of extensions & file types to compilers """
    1:     want = 'FLMP'
    2: class _Prop_Mappings(aetools.NProperty):
    1:     """Mappings -  """
    1:     which = 'FMps'
    1:     want = 'FMap'
       
    2: class File_Mapping(aetools.ComponentItem):
    1:     """File Mapping -  """
    1:     want = 'FMap'
    2: class _Prop_Compiler(aetools.NProperty):
    1:     """Compiler -  """
    1:     which = 'TA07'
    1:     want = 'TEXT'
    2: class _Prop_Extension(aetools.NProperty):
    1:     """Extension -  """
    1:     which = 'TA02'
    1:     want = 'TEXT'
    2: class _Prop_File_Type(aetools.NProperty):
    1:     """File Type -  """
    1:     which = 'PR04'
    1:     want = 'TEXT'
    2: class _Prop_Ignored_by_Make(aetools.NProperty):
    1:     """Ignored by Make -  """
    1:     which = 'TA06'
    1:     want = 'bool'
    2: class _Prop_Launchable(aetools.NProperty):
    1:     """Launchable -  """
    1:     which = 'TA05'
    1:     want = 'bool'
    2: class _Prop_Precompiled(aetools.NProperty):
    1:     """Precompiled -  """
    1:     which = 'TA03'
    1:     want = 'bool'
    2: class _Prop_Resource_File(aetools.NProperty):
    1:     """Resource File -  """
    1:     which = 'TA04'
    1:     want = 'bool'
       
    2: class Global_Source_Trees(aetools.ComponentItem):
    1:     """Global Source Trees - Globally-defined source tree roots """
    1:     want = 'GSTs'
    2: class _Prop_Source_Trees(aetools.NProperty):
    1:     """Source Trees - List of source tree roots """
    1:     which = 'ST01'
    1:     want = 'SrcT'
       
    2: class Extras(aetools.ComponentItem):
    1:     """Extras -  """
    1:     want = 'GXTR'
    2: class _Prop_Automatic_Toolbar_Help(aetools.NProperty):
    1:     """Automatic Toolbar Help - Automatically show balloon help in toolbar after delay """
    1:     which = 'EX19'
    1:     want = 'bool'
    2: class _Prop_External_Reference(aetools.NProperty):
    1:     """External Reference - Which on-line function reference to use. """
    1:     which = 'EX08'
    1:     want = 'RefP'
    2: class _Prop_Full_Screen_Zoom(aetools.NProperty):
    1:     """Full Screen Zoom - Zoom windows to the full screen width. """
    1:     which = 'EX07'
    1:     want = 'bool'
    2: class _Prop_Recent_Editor_Count(aetools.NProperty):
    1:     """Recent Editor Count - Maximum number of editor documents to show in the \xd2Open Recent\xd3 menu """
    1:     which = 'EX16'
    1:     want = 'shor'
    2: class _Prop_Recent_Project_Count(aetools.NProperty):
    1:     """Recent Project Count - Maximum number of project documents to show in the \xd2Open Recent\xd3 menu """
    1:     which = 'EX17'
    1:     want = 'shor'
    2: class _Prop_Use_Editor_Extensions(aetools.NProperty):
    1:     """Use Editor Extensions - Controls the use of the Editor Extensions menu """
    1:     which = 'EX10'
    1:     want = 'bool'
    2: class _Prop_Use_External_Editor(aetools.NProperty):
    1:     """Use External Editor - Controls whether CodeWarrior uses its own integrated editor or an external application for editing text files. """
    1:     which = 'EX11'
    1:     want = 'bool'
    2: class _Prop_Use_Script_Menu(aetools.NProperty):
    1:     """Use Script Menu - Controls the use of the AppleScript menu """
    1:     which = 'EX12'
    1:     want = 'bool'
    2: class _Prop_Use_ToolServer_Menu(aetools.NProperty):
    1:     """Use ToolServer Menu - Controls the use of the ToolServer menu """
    1:     which = 'EX18'
    1:     want = 'bool'
       
    2: class Build_Extras(aetools.ComponentItem):
    1:     """Build Extras -  """
    1:     want = 'LXTR'
    2: class _Prop_Browser_Active(aetools.NProperty):
    1:     """Browser Active - Allow the collection of browser information. """
    1:     which = 'EX09'
    1:     want = 'bool'
    2: class _Prop_Cache_Subproject_Data(aetools.NProperty):
    1:     """Cache Subproject Data -  """
    1:     which = 'EX31'
    1:     want = 'bool'
    2: class _Prop_Dump_Browser_Info(aetools.NProperty):
    1:     """Dump Browser Info -  """
    1:     which = 'EX30'
    1:     want = 'bool'
    2: class _Prop_Modification_Date_Caching(aetools.NProperty):
    1:     """Modification Date Caching -  """
    1:     which = 'EX04'
    1:     want = 'bool'
       
    2: class member_function(aetools.ComponentItem):
    1:     """member function - A class member function or method. """
    1:     want = 'MbFn'
    2: class _Prop_implementation_end_offset(aetools.NProperty):
    1:     """implementation end offset - end of member function definition """
    1:     which = 'DfEn'
    1:     want = 'long'
    2: class _Prop_implementation_file(aetools.NProperty):
    1:     """implementation file - Source file containing the member function definition """
    1:     which = 'DfFl'
    1:     want = 'fss '
    2: class _Prop_implementation_start_offset(aetools.NProperty):
    1:     """implementation start offset - start of member function definition source code """
    1:     which = 'DfSt'
    1:     want = 'long'
       
    1: member_functions = member_function
       
    2: class Access_Paths(aetools.ComponentItem):
    1:     """Access Paths - Contains the definitions of a project\xd5s access (search) paths. """
    1:     want = 'PATH'
    2: class _Prop_Always_Full_Search(aetools.NProperty):
    1:     """Always Full Search - To force the compiler to search for system includes like it searches for user includes. """
    1:     which = 'PA02'
    1:     want = 'bool'
    2: class _Prop_Convert_Paths(aetools.NProperty):
    1:     """Convert Paths - Enables conversion of DOS & Unix-style relative paths when searching for files. """
    1:     which = 'PA04'
    1:     want = 'bool'
    2: class _Prop_Require_Framework_Includes(aetools.NProperty):
    1:     """Require Framework Includes - Causes the IDE to only look in the framework access paths if a Mac OS X framework style include (i.e. <Carbon/Carbon.h> ) is used. """
    1:     which = 'PA05'
    1:     want = 'bool'
    2: class _Prop_System_Paths(aetools.NProperty):
    1:     """System Paths - To add an access path for the include files. (Not supported in Pascal) """
    1:     which = 'PA03'
    1:     want = 'PInf'
    2: class _Prop_User_Paths(aetools.NProperty):
    1:     """User Paths - To add an access path for the source files. """
    1:     which = 'PA01'
    1:     want = 'PInf'
       
    2: class Path_Information(aetools.ComponentItem):
    1:     """Path Information - Contains all of the parameters that describe an access path. """
    1:     want = 'PInf'
    2: class _Prop_format(aetools.NProperty):
    1:     """format - Format of the a """
    1:     which = 'Frmt'
    1:     want = 'PthF'
    2: class _Prop_framework(aetools.NProperty):
    1:     """framework - Is the path a Mac OS X framework style path?  (This flag is readable but not writeable from AppleScript.) """
    1:     which = 'Frmw'
    1:     want = 'bool'
    2: class _Prop_host_flags(aetools.NProperty):
    1:     """host flags - Bit fields enabling the access path for each host OS (1 = Mac OS, 2 = Windows) """
    1:     which = 'HstF'
    1:     want = 'long'
    2: class _Prop_origin(aetools.NProperty):
    1:     """origin -  """
    1:     which = 'Orig'
    1:     want = 'PPrm'
    2: class _Prop_recursive(aetools.NProperty):
    1:     """recursive - Will the path be searched recursively?  (Default is true) """
    1:     which = 'Recu'
    1:     want = 'bool'
    2: class _Prop_root(aetools.NProperty):
    1:     """root - Name of the root of the relative path. Pre-defined values are \xd2Absolute\xd3, \xd2Project\xd3, \xd2CodeWarrior\xd3, and  \xd2System\xd3. Anything else is a user-defined root. """
    1:     which = 'Root'
    1:     want = 'TEXT'
       
    2: class Plugin_Settings(aetools.ComponentItem):
    1:     """Plugin Settings - Settings for plugin tools """
    1:     want = 'PSTG'
    2: class _Prop_Disable_Third_Party_COM_Plugins(aetools.NProperty):
    1:     """Disable Third Party COM Plugins - Disable COM plugins from third parties """
    1:     which = 'PX02'
    1:     want = 'bool'
    2: class _Prop_Plugin_Diagnostics_Level(aetools.NProperty):
    1:     """Plugin Diagnostics Level - Plugin Diagnostics Level is for those who are developing plugins for the IDE and need to debug them. """
    1:     which = 'PX01'
    1:     want = 'PXdg'
       
    2: class Runtime_Settings(aetools.ComponentItem):
    1:     """Runtime Settings - Runtime settings """
    1:     want = 'RSTG'
    2: class _Prop_Command_Line_Arguments(aetools.NProperty):
    1:     """Command Line Arguments - Extra command line args to pass to executable """
    1:     which = 'RS02'
    1:     want = 'TEXT'
    2: class _Prop_Environment_Variables(aetools.NProperty):
    1:     """Environment Variables - Environment variables to use when running the executable """
    1:     which = 'RS04'
    1:     want = 'EnvV'
    2: class _Prop_Host_Application(aetools.NProperty):
    1:     """Host Application - Host application for running/debugging libraries and code resources """
    1:     which = 'RS01'
    1:     want = 'RlPt'
    2: class _Prop_Working_Directory(aetools.NProperty):
    1:     """Working Directory - Working directory to use when running the executable """
    1:     which = 'RS03'
    1:     want = 'TEXT'
       
    2: class Relative_Path(aetools.ComponentItem):
    1:     """Relative Path - Relative path from some root """
    1:     want = 'RlPt'
       
    2: class Shielded_Folder(aetools.ComponentItem):
    1:     """Shielded Folder -  """
    1:     want = 'SFit'
    2: class _Prop_Expression_To_Match(aetools.NProperty):
    1:     """Expression To Match - Regular expression which describes folders to skip """
    1:     which = 'SF01'
    1:     want = 'TEXT'
    2: class _Prop_Skip_Find_And_Compare_Operations(aetools.NProperty):
    1:     """Skip Find And Compare Operations - Matching folders will be skipped during find and compare operations """
    1:     which = 'SF03'
    1:     want = 'bool'
    2: class _Prop_Skip_Project_Operations(aetools.NProperty):
    1:     """Skip Project Operations - Matching folders will be skipped during project operations """
    1:     which = 'SF02'
    1:     want = 'bool'
       
    2: class Shielded_Folders(aetools.ComponentItem):
    1:     """Shielded Folders - Folders skipped when performing project and find-and-compare operations """
    1:     want = 'SHFL'
    2: class _Prop_Shielded_Items(aetools.NProperty):
    1:     """Shielded Items -  """
    1:     which = 'SFis'
    1:     want = 'SFit'
       
    2: class Syntax_Coloring(aetools.ComponentItem):
    1:     """Syntax Coloring -  """
    1:     want = 'SNTX'
    2: class _Prop_Comment_Color(aetools.NProperty):
    1:     """Comment Color - The color for comments. """
    1:     which = 'GH02'
    1:     want = 'cRGB'
    2: class _Prop_Keyword_Color(aetools.NProperty):
    1:     """Keyword Color - The color for language keywords. """
    1:     which = 'GH03'
    1:     want = 'cRGB'
    2: class _Prop_String_Color(aetools.NProperty):
    1:     """String Color - The color for strings. """
    1:     which = 'GH04'
    1:     want = 'cRGB'
    2: class _Prop_Syntax_Coloring(aetools.NProperty):
    1:     """Syntax Coloring - Mark keywords and comments with color. """
    1:     which = 'GH01'
    1:     want = 'bool'
       
    2: class Segment(aetools.ComponentItem):
    1:     """Segment - A segment or group in the project """
    1:     want = 'Seg '
    2: class _Prop_filecount(aetools.NProperty):
    1:     """filecount -  """
    1:     which = 'NumF'
    1:     want = 'shor'
    2: class _Prop_seg_2d_locked(aetools.NProperty):
    1:     """seg-locked - Is the segment locked ? [68K only] """
    1:     which = 'PLck'
    1:     want = 'bool'
    2: class _Prop_seg_2d_preloaded(aetools.NProperty):
    1:     """seg-preloaded - Is the segment preloaded ? [68K only] """
    1:     which = 'Prel'
    1:     want = 'bool'
    2: class _Prop_seg_2d_protected(aetools.NProperty):
    1:     """seg-protected - Is the segment protected ? [68K only] """
    1:     which = 'Prot'
    1:     want = 'bool'
    2: class _Prop_seg_2d_purgeable(aetools.NProperty):
    1:     """seg-purgeable - Is the segment purgeable ? [68K only] """
    1:     which = 'Purg'
    1:     want = 'bool'
    2: class _Prop_seg_2d_system_heap(aetools.NProperty):
    1:     """seg-system heap - Is the segment loaded into the system heap ? [68K only] """
    1:     which = 'SysH'
    1:     want = 'bool'
       
    2: class ProjectFile(aetools.ComponentItem):
    1:     """ProjectFile - A file contained in a project """
    1:     want = 'SrcF'
    2: class _Prop_codesize(aetools.NProperty):
    1:     """codesize - The size of this file\xd5s code. """
    1:     which = 'CSiz'
    1:     want = 'long'
    2: class _Prop_datasize(aetools.NProperty):
    1:     """datasize - The size of this file\xd5s data. """
    1:     which = 'DSiz'
    1:     want = 'long'
    2: class _Prop_filetype(aetools.NProperty):
    1:     """filetype - What kind of file is this ? """
    1:     which = 'SrcT'
    1:     want = 'SrcT'
    2: class _Prop_includes(aetools.NProperty):
    1:     """includes -  """
    1:     which = 'IncF'
    1:     want = 'fss '
    2: class _Prop_initialize_before(aetools.NProperty):
    1:     """initialize before - Initialize the shared library before the main application. """
    1:     which = 'Bfor'
    1:     want = 'bool'
    2: class _Prop_symbols(aetools.NProperty):
    1:     """symbols - Are debugging symbols generated for this file ? """
    1:     which = 'SymG'
    1:     want = 'bool'
    2: class _Prop_up_to_date(aetools.NProperty):
    1:     """up to date - Has the file been compiled since its last modification ? """
    1:     which = 'UpTD'
    1:     want = 'bool'
    2: class _Prop_weak_link(aetools.NProperty):
    1:     """weak link - Is this file imported weakly into the project ? [PowerPC only] """
    1:     which = 'Weak'
    1:     want = 'bool'
       
    2: class Source_Tree(aetools.ComponentItem):
    1:     """Source Tree - User-defined source tree root """
    1:     want = 'SrcT'
    2: class _Prop_path(aetools.NProperty):
    1:     """path - path for the user-defined source tree root """
    1:     which = 'Path'
    1:     want = 'TEXT'
    2: class _Prop_path_kind(aetools.NProperty):
    1:     """path kind - kind of path """
    1:     which = 'Kind'
    1:     want = 'STKd'
       
    2: class Target_Settings(aetools.ComponentItem):
    1:     """Target Settings - Contains the definitions of a project\xd5s target. """
    1:     want = 'TARG'
    2: class _Prop_Linker(aetools.NProperty):
    1:     """Linker - The name of the current linker. """
    1:     which = 'TA01'
    1:     want = 'TEXT'
    2: class _Prop_Output_Directory_Location(aetools.NProperty):
    1:     """Output Directory Location - Location of output directory """
    1:     which = 'TA16'
    1:     want = 'RlPt'
    2: class _Prop_Output_Directory_Origin(aetools.NProperty):
    1:     """Output Directory Origin - Origin of path to output directory. Usage of this property is deprecated. Use the \xd2Output Directory Location\xd3 property instead. """
    1:     which = 'TA12'
    1:     want = 'PPrm'
    2: class _Prop_Output_Directory_Path(aetools.NProperty):
    1:     """Output Directory Path - Path to output directory. Usage of this property is deprecated. Use the \xd2Output Directory Location\xd3 property instead. """
    1:     which = 'TA11'
    1:     want = 'TEXT'
    2: class _Prop_Post_Linker(aetools.NProperty):
    1:     """Post Linker -  """
    1:     which = 'TA09'
    1:     want = 'TEXT'
    2: class _Prop_Pre_Linker(aetools.NProperty):
    1:     """Pre Linker -  """
    1:     which = 'TA13'
    1:     want = 'TEXT'
    2: class _Prop_Target_Name(aetools.NProperty):
    1:     """Target Name -  """
    1:     which = 'TA10'
    1:     want = 'TEXT'
    2: class _Prop_Use_Relative_Paths(aetools.NProperty):
    1:     """Use Relative Paths - Save project entries using relative paths """
    1:     which = 'TA15'
    1:     want = 'bool'
       
    2: class Target_Source_Trees(aetools.ComponentItem):
    1:     """Target Source Trees - Target-specific user-defined source tree roots """
    1:     want = 'TSTs'
       
    2: class VCS_Setup(aetools.ComponentItem):
    1:     """VCS Setup - The version control system preferences. """
    1:     want = 'VCSs'
    2: class _Prop_Always_Prompt(aetools.NProperty):
    1:     """Always Prompt - Always show login dialog """
    1:     which = 'VC07'
    1:     want = 'bool'
    2: class _Prop_Auto_Connect(aetools.NProperty):
    1:     """Auto Connect - Automatically connect to database when starting. """
    1:     which = 'VC05'
    1:     want = 'bool'
    2: class _Prop_Connection_Method(aetools.NProperty):
    1:     """Connection Method - Name of Version Control System to use. """
    1:     which = 'VC02'
    1:     want = 'TEXT'
    2: class _Prop_Database_Path(aetools.NProperty):
    1:     """Database Path - Path to the VCS database. """
    1:     which = 'VC09'
    1:     want = 'RlPt'
    2: class _Prop_Local_Path(aetools.NProperty):
    1:     """Local Path - Path to the local root """
    1:     which = 'VC10'
    1:     want = 'RlPt'
    2: class _Prop_Mount_Volume(aetools.NProperty):
    1:     """Mount Volume - Attempt to mount the database volume if it isn't available. """
    1:     which = 'VC08'
    1:     want = 'bool'
    2: class _Prop_Password(aetools.NProperty):
    1:     """Password - The password for the VCS. """
    1:     which = 'VC04'
    1:     want = 'TEXT'
    2: class _Prop_Store_Password(aetools.NProperty):
    1:     """Store Password - Store the password. """
    1:     which = 'VC06'
    1:     want = 'bool'
    2: class _Prop_Use_Global_Settings(aetools.NProperty):
    1:     """Use Global Settings - Use the global VCS settings by default """
    1:     which = 'VC11'
    1:     want = 'bool'
    2: class _Prop_Username(aetools.NProperty):
    1:     """Username - The user name for the VCS. """
    1:     which = 'VC03'
    1:     want = 'TEXT'
    2: class _Prop_VCS_Active(aetools.NProperty):
    1:     """VCS Active - Use Version Control """
    1:     which = 'VC01'
    1:     want = 'bool'
       
    2: class Font(aetools.ComponentItem):
    1:     """Font -  """
    1:     want = 'mFNT'
    2: class _Prop_Auto_Indent(aetools.NProperty):
    1:     """Auto Indent - Indent new lines automatically. """
    1:     which = 'FN01'
    1:     want = 'bool'
    2: class _Prop_Tab_Indents_Selection(aetools.NProperty):
    1:     """Tab Indents Selection - Tab indents selection when multiple lines are selected """
    1:     which = 'FN03'
    1:     want = 'bool'
    2: class _Prop_Tab_Inserts_Spaces(aetools.NProperty):
    1:     """Tab Inserts Spaces - Insert spaces instead of tab character """
    1:     which = 'FN04'
    1:     want = 'bool'
    2: class _Prop_Tab_Size(aetools.NProperty):
    1:     """Tab Size -  """
    1:     which = 'FN02'
    1:     want = 'shor'
    2: class _Prop_Text_Font(aetools.NProperty):
    1:     """Text Font - The font used in editing windows. """
    1:     which = 'ptxf'
    1:     want = 'TEXT'
    2: class _Prop_Text_Size(aetools.NProperty):
    1:     """Text Size - The size of the text in an editing window. """
    1:     which = 'ptps'
    1:     want = 'shor'
    1: Browser_Coloring._superclassnames = []
    1: Browser_Coloring._privpropdict = {
    1:     'Browser_Keywords' : _Prop_Browser_Keywords,
    1:     'Classes_Color' : _Prop_Classes_Color,
    1:     'Constants_Color' : _Prop_Constants_Color,
    1:     'Enums_Color' : _Prop_Enums_Color,
    1:     'Functions_Color' : _Prop_Functions_Color,
    1:     'Globals_Color' : _Prop_Globals_Color,
    1:     'Macros_Color' : _Prop_Macros_Color,
    1:     'Template_Commands_in_Menu' : _Prop_Template_Commands_in_Menu,
    1:     'Templates_Color' : _Prop_Templates_Color,
    1:     'Typedefs_Color' : _Prop_Typedefs_Color,
       }
    1: Browser_Coloring._privelemdict = {
       }
    1: Build_Settings._superclassnames = []
    1: Build_Settings._privpropdict = {
    1:     'Build_Before_Running' : _Prop_Build_Before_Running,
    1:     'Compiler_Thread_Stack_Size' : _Prop_Compiler_Thread_Stack_Size,
    1:     'Completion_Sound' : _Prop_Completion_Sound,
    1:     'Failure_Sound' : _Prop_Failure_Sound,
    1:     'Include_Cache_Size' : _Prop_Include_Cache_Size,
    1:     'Save_Before_Building' : _Prop_Save_Before_Building,
    1:     'Success_Sound' : _Prop_Success_Sound,
       }
    1: Build_Settings._privelemdict = {
       }
    1: base_class._superclassnames = []
    1: base_class._privpropdict = {
    1:     'access' : _Prop_access,
    1:     'class_' : _Prop_class_,
    1:     'virtual' : _Prop_virtual,
       }
    1: base_class._privelemdict = {
       }
    1: Custom_Keywords._superclassnames = []
    1: Custom_Keywords._privpropdict = {
    1:     'Custom_Color_1' : _Prop_Custom_Color_1,
    1:     'Custom_Color_2' : _Prop_Custom_Color_2,
    1:     'Custom_Color_3' : _Prop_Custom_Color_3,
    1:     'Custom_Color_4' : _Prop_Custom_Color_4,
       }
    1: Custom_Keywords._privelemdict = {
       }
    1: browser_catalog._superclassnames = []
    1: browser_catalog._privpropdict = {
       }
    1: browser_catalog._privelemdict = {
    1:     'class_' : class_,
       }
    1: class_._superclassnames = []
    1: class_._privpropdict = {
    1:     'all_subclasses' : _Prop_all_subclasses,
    1:     'declaration_end_offset' : _Prop_declaration_end_offset,
    1:     'declaration_file' : _Prop_declaration_file,
    1:     'declaration_start_offset' : _Prop_declaration_start_offset,
    1:     'language' : _Prop_language,
    1:     'name' : _Prop_name,
    1:     'subclasses' : _Prop_subclasses,
       }
    1: class_._privelemdict = {
    1:     'base_class' : base_class,
    1:     'data_member' : data_member,
    1:     'member_function' : member_function,
       }
    1: Debugger_Display._superclassnames = []
    1: Debugger_Display._privpropdict = {
    1:     'Default_Array_Size' : _Prop_Default_Array_Size,
    1:     'Show_As_Decimal' : _Prop_Show_As_Decimal,
    1:     'Show_Locals' : _Prop_Show_Locals,
    1:     'Show_Variable_Types' : _Prop_Show_Variable_Types,
    1:     'Sort_By_Method' : _Prop_Sort_By_Method,
    1:     'Threads_in_Window' : _Prop_Threads_in_Window,
    1:     'Use_RTTI' : _Prop_Use_RTTI,
    1:     'Variable_Changed_Hilite' : _Prop_Variable_Changed_Hilite,
    1:     'Variable_Hints' : _Prop_Variable_Hints,
    1:     'Watchpoint_Hilite' : _Prop_Watchpoint_Hilite,
       }
    1: Debugger_Display._privelemdict = {
       }
    1: Debugger_Global._superclassnames = []
    1: Debugger_Global._privpropdict = {
    1:     'Auto_Target_Libraries' : _Prop_Auto_Target_Libraries,
    1:     'Cache_Edited_Files' : _Prop_Cache_Edited_Files,
    1:     'Confirm_Kill' : _Prop_Confirm_Kill,
    1:     'Dont_Step_in_Runtime' : _Prop_Dont_Step_in_Runtime,
    1:     'File_Cache_Duration' : _Prop_File_Cache_Duration,
    1:     'Ignore_Mod_Dates' : _Prop_Ignore_Mod_Dates,
    1:     'Launch_Apps_on_Open' : _Prop_Launch_Apps_on_Open,
    1:     'Open_All_Classes' : _Prop_Open_All_Classes,
    1:     'Select_Stack_Crawl' : _Prop_Select_Stack_Crawl,
    1:     'Stop_at_Main' : _Prop_Stop_at_Main,
       }
    1: Debugger_Global._privelemdict = {
       }
    1: Debugger_Target._superclassnames = []
    1: Debugger_Target._privpropdict = {
    1:     'Auto_Target_Libraries' : _Prop_Auto_Target_Libraries,
    1:     'Cache_symbolics' : _Prop_Cache_symbolics,
    1:     'Data_Update_Interval' : _Prop_Data_Update_Interval,
    1:     'Log_System_Messages' : _Prop_Log_System_Messages,
    1:     'Relocated_Executable_Path' : _Prop_Relocated_Executable_Path,
    1:     'Stop_at_temp_breakpoint' : _Prop_Stop_at_temp_breakpoint,
    1:     'Temp_Breakpoint_Type' : _Prop_Temp_Breakpoint_Type,
    1:     'Temp_breakpoint_names' : _Prop_Temp_breakpoint_names,
    1:     'Update_Data_While_Running' : _Prop_Update_Data_While_Running,
       }
    1: Debugger_Target._privelemdict = {
       }
    1: Debugger_Windowing._superclassnames = []
    1: Debugger_Windowing._privpropdict = {
    1:     'Debugging_Start_Action' : _Prop_Debugging_Start_Action,
    1:     'Do_Nothing_To_Projects' : _Prop_Do_Nothing_To_Projects,
       }
    1: Debugger_Windowing._privelemdict = {
       }
    1: data_member._superclassnames = []
    1: data_member._privpropdict = {
    1:     'access' : _Prop_access,
    1:     'declaration_end_offset' : _Prop_declaration_end_offset,
    1:     'declaration_start_offset' : _Prop_declaration_start_offset,
    1:     'name' : _Prop_name,
    1:     'static' : _Prop_static,
       }
    1: data_member._privelemdict = {
       }
    1: Editor._superclassnames = []
    1: Editor._privpropdict = {
    1:     'Background_Color' : _Prop_Background_Color,
    1:     'Balance' : _Prop_Balance,
    1:     'Context_Popup_Delay' : _Prop_Context_Popup_Delay,
    1:     'Default_Text_File_Format' : _Prop_Default_Text_File_Format,
    1:     'Dynamic_Scroll' : _Prop_Dynamic_Scroll,
    1:     'Flash_Delay' : _Prop_Flash_Delay,
    1:     'Left_Margin_Line_Select' : _Prop_Left_Margin_Line_Select,
    1:     'Main_Text_Color' : _Prop_Main_Text_Color,
    1:     'Relaxed_C_Popup_Parsing' : _Prop_Relaxed_C_Popup_Parsing,
    1:     'Remember_Font' : _Prop_Remember_Font,
    1:     'Remember_Selection' : _Prop_Remember_Selection,
    1:     'Remember_Window' : _Prop_Remember_Window,
    1:     'Sort_Function_Popup' : _Prop_Sort_Function_Popup,
    1:     'Use_Drag__26__Drop_Editing' : _Prop_Use_Drag__26__Drop_Editing,
    1:     'Use_Multiple_Undo' : _Prop_Use_Multiple_Undo,
       }
    1: Editor._privelemdict = {
       }
    1: Environment_Variable._superclassnames = []
    1: Environment_Variable._privpropdict = {
    1:     'name' : _Prop_name,
    1:     'value' : _Prop_value,
       }
    1: Environment_Variable._privelemdict = {
       }
    1: Error_Information._superclassnames = []
    1: Error_Information._privpropdict = {
    1:     'disk_file' : _Prop_disk_file,
    1:     'lineNumber' : _Prop_lineNumber,
    1:     'message' : _Prop_message,
    1:     'messageKind' : _Prop_messageKind,
       }
    1: Error_Information._privelemdict = {
       }
    1: Function_Information._superclassnames = []
    1: Function_Information._privpropdict = {
    1:     'disk_file' : _Prop_disk_file,
    1:     'lineNumber' : _Prop_lineNumber,
       }
    1: Function_Information._privelemdict = {
       }
    1: File_Mappings._superclassnames = []
    1: File_Mappings._privpropdict = {
    1:     'Mappings' : _Prop_Mappings,
       }
    1: File_Mappings._privelemdict = {
       }
    1: File_Mapping._superclassnames = []
    1: File_Mapping._privpropdict = {
    1:     'Compiler' : _Prop_Compiler,
    1:     'Extension' : _Prop_Extension,
    1:     'File_Type' : _Prop_File_Type,
    1:     'Ignored_by_Make' : _Prop_Ignored_by_Make,
    1:     'Launchable' : _Prop_Launchable,
    1:     'Precompiled' : _Prop_Precompiled,
    1:     'Resource_File' : _Prop_Resource_File,
       }
    1: File_Mapping._privelemdict = {
       }
    1: Global_Source_Trees._superclassnames = []
    1: Global_Source_Trees._privpropdict = {
    1:     'Source_Trees' : _Prop_Source_Trees,
       }
    1: Global_Source_Trees._privelemdict = {
       }
    1: Extras._superclassnames = []
    1: Extras._privpropdict = {
    1:     'Automatic_Toolbar_Help' : _Prop_Automatic_Toolbar_Help,
    1:     'External_Reference' : _Prop_External_Reference,
    1:     'Full_Screen_Zoom' : _Prop_Full_Screen_Zoom,
    1:     'Recent_Editor_Count' : _Prop_Recent_Editor_Count,
    1:     'Recent_Project_Count' : _Prop_Recent_Project_Count,
    1:     'Use_Editor_Extensions' : _Prop_Use_Editor_Extensions,
    1:     'Use_External_Editor' : _Prop_Use_External_Editor,
    1:     'Use_Script_Menu' : _Prop_Use_Script_Menu,
    1:     'Use_ToolServer_Menu' : _Prop_Use_ToolServer_Menu,
       }
    1: Extras._privelemdict = {
       }
    1: Build_Extras._superclassnames = []
    1: Build_Extras._privpropdict = {
    1:     'Browser_Active' : _Prop_Browser_Active,
    1:     'Cache_Subproject_Data' : _Prop_Cache_Subproject_Data,
    1:     'Dump_Browser_Info' : _Prop_Dump_Browser_Info,
    1:     'Modification_Date_Caching' : _Prop_Modification_Date_Caching,
       }
    1: Build_Extras._privelemdict = {
       }
    1: member_function._superclassnames = []
    1: member_function._privpropdict = {
    1:     'access' : _Prop_access,
    1:     'declaration_end_offset' : _Prop_declaration_end_offset,
    1:     'declaration_file' : _Prop_declaration_file,
    1:     'declaration_start_offset' : _Prop_declaration_start_offset,
    1:     'implementation_end_offset' : _Prop_implementation_end_offset,
    1:     'implementation_file' : _Prop_implementation_file,
    1:     'implementation_start_offset' : _Prop_implementation_start_offset,
    1:     'name' : _Prop_name,
    1:     'static' : _Prop_static,
    1:     'virtual' : _Prop_virtual,
       }
    1: member_function._privelemdict = {
       }
    1: Access_Paths._superclassnames = []
    1: Access_Paths._privpropdict = {
    1:     'Always_Full_Search' : _Prop_Always_Full_Search,
    1:     'Convert_Paths' : _Prop_Convert_Paths,
    1:     'Require_Framework_Includes' : _Prop_Require_Framework_Includes,
    1:     'System_Paths' : _Prop_System_Paths,
    1:     'User_Paths' : _Prop_User_Paths,
       }
    1: Access_Paths._privelemdict = {
       }
    1: Path_Information._superclassnames = []
    1: Path_Information._privpropdict = {
    1:     'format' : _Prop_format,
    1:     'framework' : _Prop_framework,
    1:     'host_flags' : _Prop_host_flags,
    1:     'name' : _Prop_name,
    1:     'origin' : _Prop_origin,
    1:     'recursive' : _Prop_recursive,
    1:     'root' : _Prop_root,
       }
    1: Path_Information._privelemdict = {
       }
    1: Plugin_Settings._superclassnames = []
    1: Plugin_Settings._privpropdict = {
    1:     'Disable_Third_Party_COM_Plugins' : _Prop_Disable_Third_Party_COM_Plugins,
    1:     'Plugin_Diagnostics_Level' : _Prop_Plugin_Diagnostics_Level,
       }
    1: Plugin_Settings._privelemdict = {
       }
    1: Runtime_Settings._superclassnames = []
    1: Runtime_Settings._privpropdict = {
    1:     'Command_Line_Arguments' : _Prop_Command_Line_Arguments,
    1:     'Environment_Variables' : _Prop_Environment_Variables,
    1:     'Host_Application' : _Prop_Host_Application,
    1:     'Working_Directory' : _Prop_Working_Directory,
       }
    1: Runtime_Settings._privelemdict = {
       }
    1: Relative_Path._superclassnames = []
    1: Relative_Path._privpropdict = {
    1:     'format' : _Prop_format,
    1:     'name' : _Prop_name,
    1:     'origin' : _Prop_origin,
    1:     'root' : _Prop_root,
       }
    1: Relative_Path._privelemdict = {
       }
    1: Shielded_Folder._superclassnames = []
    1: Shielded_Folder._privpropdict = {
    1:     'Expression_To_Match' : _Prop_Expression_To_Match,
    1:     'Skip_Find_And_Compare_Operations' : _Prop_Skip_Find_And_Compare_Operations,
    1:     'Skip_Project_Operations' : _Prop_Skip_Project_Operations,
       }
    1: Shielded_Folder._privelemdict = {
       }
    1: Shielded_Folders._superclassnames = []
    1: Shielded_Folders._privpropdict = {
    1:     'Shielded_Items' : _Prop_Shielded_Items,
       }
    1: Shielded_Folders._privelemdict = {
       }
    1: Syntax_Coloring._superclassnames = []
    1: Syntax_Coloring._privpropdict = {
    1:     'Comment_Color' : _Prop_Comment_Color,
    1:     'Custom_Color_1' : _Prop_Custom_Color_1,
    1:     'Custom_Color_2' : _Prop_Custom_Color_2,
    1:     'Custom_Color_3' : _Prop_Custom_Color_3,
    1:     'Custom_Color_4' : _Prop_Custom_Color_4,
    1:     'Keyword_Color' : _Prop_Keyword_Color,
    1:     'String_Color' : _Prop_String_Color,
    1:     'Syntax_Coloring' : _Prop_Syntax_Coloring,
       }
    1: Syntax_Coloring._privelemdict = {
       }
    1: Segment._superclassnames = []
    1: Segment._privpropdict = {
    1:     'filecount' : _Prop_filecount,
    1:     'name' : _Prop_name,
    1:     'seg_2d_locked' : _Prop_seg_2d_locked,
    1:     'seg_2d_preloaded' : _Prop_seg_2d_preloaded,
    1:     'seg_2d_protected' : _Prop_seg_2d_protected,
    1:     'seg_2d_purgeable' : _Prop_seg_2d_purgeable,
    1:     'seg_2d_system_heap' : _Prop_seg_2d_system_heap,
       }
    1: Segment._privelemdict = {
       }
    1: ProjectFile._superclassnames = []
    1: ProjectFile._privpropdict = {
    1:     'codesize' : _Prop_codesize,
    1:     'datasize' : _Prop_datasize,
    1:     'disk_file' : _Prop_disk_file,
    1:     'filetype' : _Prop_filetype,
    1:     'includes' : _Prop_includes,
    1:     'initialize_before' : _Prop_initialize_before,
    1:     'name' : _Prop_name,
    1:     'symbols' : _Prop_symbols,
    1:     'up_to_date' : _Prop_up_to_date,
    1:     'weak_link' : _Prop_weak_link,
       }
    1: ProjectFile._privelemdict = {
       }
    1: Source_Tree._superclassnames = []
    1: Source_Tree._privpropdict = {
    1:     'format' : _Prop_format,
    1:     'name' : _Prop_name,
    1:     'path' : _Prop_path,
    1:     'path_kind' : _Prop_path_kind,
       }
    1: Source_Tree._privelemdict = {
       }
    1: Target_Settings._superclassnames = []
    1: Target_Settings._privpropdict = {
    1:     'Linker' : _Prop_Linker,
    1:     'Output_Directory_Location' : _Prop_Output_Directory_Location,
    1:     'Output_Directory_Origin' : _Prop_Output_Directory_Origin,
    1:     'Output_Directory_Path' : _Prop_Output_Directory_Path,
    1:     'Post_Linker' : _Prop_Post_Linker,
    1:     'Pre_Linker' : _Prop_Pre_Linker,
    1:     'Target_Name' : _Prop_Target_Name,
    1:     'Use_Relative_Paths' : _Prop_Use_Relative_Paths,
       }
    1: Target_Settings._privelemdict = {
       }
    1: Target_Source_Trees._superclassnames = []
    1: Target_Source_Trees._privpropdict = {
    1:     'Source_Trees' : _Prop_Source_Trees,
       }
    1: Target_Source_Trees._privelemdict = {
       }
    1: VCS_Setup._superclassnames = []
    1: VCS_Setup._privpropdict = {
    1:     'Always_Prompt' : _Prop_Always_Prompt,
    1:     'Auto_Connect' : _Prop_Auto_Connect,
    1:     'Connection_Method' : _Prop_Connection_Method,
    1:     'Database_Path' : _Prop_Database_Path,
    1:     'Local_Path' : _Prop_Local_Path,
    1:     'Mount_Volume' : _Prop_Mount_Volume,
    1:     'Password' : _Prop_Password,
    1:     'Store_Password' : _Prop_Store_Password,
    1:     'Use_Global_Settings' : _Prop_Use_Global_Settings,
    1:     'Username' : _Prop_Username,
    1:     'VCS_Active' : _Prop_VCS_Active,
       }
    1: VCS_Setup._privelemdict = {
       }
    1: Font._superclassnames = []
    1: Font._privpropdict = {
    1:     'Auto_Indent' : _Prop_Auto_Indent,
    1:     'Tab_Indents_Selection' : _Prop_Tab_Indents_Selection,
    1:     'Tab_Inserts_Spaces' : _Prop_Tab_Inserts_Spaces,
    1:     'Tab_Size' : _Prop_Tab_Size,
    1:     'Text_Font' : _Prop_Text_Font,
    1:     'Text_Size' : _Prop_Text_Size,
       }
    1: Font._privelemdict = {
       }
    1: _Enum_Acce = {
    1:     'public' : 'Publ',  #
    1:     'protected' : 'Prot',       #
    1:     'private' : 'Priv', #
       }
       
    1: _Enum_BXbr = {
    1:     'Always_Build' : 'BXb1',    # Always build the target before running.
    1:     'Ask_Build' : 'BXb2',       # Ask before building the target when running.
    1:     'Never_Build' : 'BXb3',     # Never before building the target before running.
       }
       
    1: _Enum_DbSA = {
    1:     'No_Action' : 'DSA1',       # Don\xd5t do anything to non-debug windows
    1:     'Hide_Windows' : 'DSA2',    # Hide non-debugging windows
    1:     'Collapse_Windows' : 'DSA3',        # Collapse non-debugging windows
    1:     'Close_Windows' : 'DSA4',   # Close non-debugging windows
       }
       
    1: _Enum_DgBL = {
    1:     'Always' : 'DgB0',  # Always build before debugging.
    1:     'Never' : 'DgB1',   # Never build before debugging.
    1:     'Ask' : 'DgB2',     # Ask about building before debugging.
       }
       
    1: _Enum_ErrT = {
    1:     'information' : 'ErIn',     #
    1:     'compiler_warning' : 'ErCW',        #
    1:     'compiler_error' : 'ErCE',  #
    1:     'definition' : 'ErDf',      #
    1:     'linker_warning' : 'ErLW',  #
    1:     'linker_error' : 'ErLE',    #
    1:     'find_result' : 'ErFn',     #
    1:     'generic_error' : 'ErGn',   #
       }
       
    1: _Enum_Inte = {
    1:     'never_interact' : 'eNvr',  # Never allow user interactions
    1:     'interact_with_self' : 'eInS',      # Allow user interaction only when an AppleEvent is sent from within CodeWarrior
    1:     'interact_with_local' : 'eInL',     # Allow user interaction when AppleEvents are sent from applications on the same machine (default)
    1:     'interact_with_all' : 'eInA',       # Allow user interaction from both local and remote AppleEvents
       }
       
    1: _Enum_Lang = {
    1:     'C' : 'LC  ',       #
    1:     'C_2b__2b_' : 'LC++',       #
    1:     'Pascal' : 'LP  ',  #
    1:     'Object_Pascal' : 'LP++',   #
    1:     'Java' : 'LJav',    #
    1:     'Assembler' : 'LAsm',       #
    1:     'Unknown' : 'L?  ', #
       }
       
    1: _Enum_PPrm = {
    1:     'absolute' : 'Abso',        # An absolute path name, including volume name.
    1:     'project_relative' : 'PRel',        # A path relative to the current project\xd5s folder.
    1:     'shell_relative' : 'SRel',  # A path relative to the CodeWarrior\xaa folder.
    1:     'system_relative' : 'YRel', # A path relative to the system folder
    1:     'root_relative' : 'RRel',   #
       }
       
    1: _Enum_PXdg = {
    1:     'Diagnose_None' : 'PXd1',   # No Plugin Diagnostics.
    1:     'Diagnose_Errors' : 'PXd2', # Plugin Diagnostics for errors only.
    1:     'Diagnose_All' : 'PXd3',    # Plugin Diagnostics for everything.
       }
       
    1: _Enum_PthF = {
    1:     'Generic_Path' : 'PFGn',    #
    1:     'MacOS_Path' : 'PFMc',      # MacOS path using colon as separator
    1:     'Windows_Path' : 'PFWn',    # Windows path using backslash as separator
    1:     'Unix_Path' : 'PFUx',       # Unix path using slash as separator
       }
       
    1: _Enum_RefP = {
    1:     'Think_Reference' : 'DanR', #
    1:     'QuickView' : 'ALTV',       #
       }
       
    1: _Enum_STKd = {
    1:     'Absolute_Path' : 'STK0',   # The \xd2path\xd3 property is an absolute path to the location of the source tree.
    1:     'Registry_Key' : 'STK1',    # The \xd2path\xd3 property is the name of a registry key that contains the path to the root.
    1:     'Environment_Variable' : 'STK2',    # The \xd2path\xd3 property is the name of an environment variable that contains the path to the root.
       }
       
    1: _Enum_SrcT = {
    1:     'source' : 'FTxt',  # A source file (.c, .cp, .p, etc).
    1:     'unknown' : 'FUnk', # An unknown file type.
       }
       
    1: _Enum_TmpB = {
    1:     'User_Specified' : 'Usrs',  # Use user specified symbols when setting temporary breakpoints on program launch.
    1:     'Default' : 'Dflt', # Use system default symbols when setting temporary breakpoints on program launch.
       }
       
    1: _Enum_TxtF = {
    1:     'MacOS' : 'TxF0',   # MacOS text format
    1:     'DOS' : 'TxF1',     # DOS text format
    1:     'Unix' : 'TxF2',    # Unix text format
       }
       
    1: _Enum_savo = {
    1:     'yes' : 'yes ',     # Save changes
    1:     'no' : 'no  ',      # Do not save changes
    1:     'ask' : 'ask ',     # Ask the user whether to save
       }
       
       
       #
       # Indices of types declared in this module
       #
    1: _classdeclarations = {
    1:     'BRKW' : Browser_Coloring,
    1:     'BSTG' : Build_Settings,
    1:     'BsCl' : base_class,
    1:     'CUKW' : Custom_Keywords,
    1:     'Cata' : browser_catalog,
    1:     'Clas' : class_,
    1:     'DbDS' : Debugger_Display,
    1:     'DbGL' : Debugger_Global,
    1:     'DbTG' : Debugger_Target,
    1:     'DbWN' : Debugger_Windowing,
    1:     'DtMb' : data_member,
    1:     'EDTR' : Editor,
    1:     'EnvV' : Environment_Variable,
    1:     'ErrM' : Error_Information,
    1:     'FDef' : Function_Information,
    1:     'FLMP' : File_Mappings,
    1:     'FMap' : File_Mapping,
    1:     'GSTs' : Global_Source_Trees,
    1:     'GXTR' : Extras,
    1:     'LXTR' : Build_Extras,
    1:     'MbFn' : member_function,
    1:     'PATH' : Access_Paths,
    1:     'PInf' : Path_Information,
    1:     'PSTG' : Plugin_Settings,
    1:     'RSTG' : Runtime_Settings,
    1:     'RlPt' : Relative_Path,
    1:     'SFit' : Shielded_Folder,
    1:     'SHFL' : Shielded_Folders,
    1:     'SNTX' : Syntax_Coloring,
    1:     'Seg ' : Segment,
    1:     'SrcF' : ProjectFile,
    1:     'SrcT' : Source_Tree,
    1:     'TARG' : Target_Settings,
    1:     'TSTs' : Target_Source_Trees,
    1:     'VCSs' : VCS_Setup,
    1:     'mFNT' : Font,
       }
       
    1: _propdeclarations = {
    1:     'Acce' : _Prop_access,
    1:     'BW00' : _Prop_Browser_Keywords,
    1:     'BW01' : _Prop_Classes_Color,
    1:     'BW02' : _Prop_Constants_Color,
    1:     'BW03' : _Prop_Enums_Color,
    1:     'BW04' : _Prop_Functions_Color,
    1:     'BW05' : _Prop_Globals_Color,
    1:     'BW06' : _Prop_Macros_Color,
    1:     'BW07' : _Prop_Templates_Color,
    1:     'BW08' : _Prop_Typedefs_Color,
    1:     'BW10' : _Prop_Template_Commands_in_Menu,
    1:     'BX01' : _Prop_Completion_Sound,
    1:     'BX02' : _Prop_Success_Sound,
    1:     'BX03' : _Prop_Failure_Sound,
    1:     'BX04' : _Prop_Build_Before_Running,
    1:     'BX05' : _Prop_Include_Cache_Size,
    1:     'BX06' : _Prop_Compiler_Thread_Stack_Size,
    1:     'BX07' : _Prop_Save_Before_Building,
    1:     'Bfor' : _Prop_initialize_before,
    1:     'CSiz' : _Prop_codesize,
    1:     'Clas' : _Prop_class_,
    1:     'DSiz' : _Prop_datasize,
    1:     'Db01' : _Prop_Show_Variable_Types,
    1:     'Db02' : _Prop_Sort_By_Method,
    1:     'Db03' : _Prop_Use_RTTI,
    1:     'Db04' : _Prop_Threads_in_Window,
    1:     'Db05' : _Prop_Variable_Hints,
    1:     'Db06' : _Prop_Watchpoint_Hilite,
    1:     'Db07' : _Prop_Variable_Changed_Hilite,
    1:     'Db08' : _Prop_Default_Array_Size,
    1:     'Db09' : _Prop_Show_Locals,
    1:     'Db10' : _Prop_Show_As_Decimal,
    1:     'DcEn' : _Prop_declaration_end_offset,
    1:     'DcFl' : _Prop_declaration_file,
    1:     'DcSt' : _Prop_declaration_start_offset,
    1:     'DfEn' : _Prop_implementation_end_offset,
    1:     'DfFl' : _Prop_implementation_file,
    1:     'DfSt' : _Prop_implementation_start_offset,
    1:     'Dg01' : _Prop_Ignore_Mod_Dates,
    1:     'Dg02' : _Prop_Open_All_Classes,
    1:     'Dg03' : _Prop_Launch_Apps_on_Open,
    1:     'Dg04' : _Prop_Confirm_Kill,
    1:     'Dg05' : _Prop_Stop_at_Main,
    1:     'Dg06' : _Prop_Select_Stack_Crawl,
    1:     'Dg07' : _Prop_Dont_Step_in_Runtime,
    1:     'Dg11' : _Prop_Auto_Target_Libraries,
    1:     'Dg12' : _Prop_Cache_Edited_Files,
    1:     'Dg13' : _Prop_File_Cache_Duration,
    1:     'Dt02' : _Prop_Log_System_Messages,
    1:     'Dt08' : _Prop_Update_Data_While_Running,
    1:     'Dt09' : _Prop_Data_Update_Interval,
    1:     'Dt10' : _Prop_Relocated_Executable_Path,
    1:     'Dt13' : _Prop_Stop_at_temp_breakpoint,
    1:     'Dt14' : _Prop_Temp_breakpoint_names,
    1:     'Dt15' : _Prop_Cache_symbolics,
    1:     'Dt16' : _Prop_Temp_Breakpoint_Type,
    1:     'Dw01' : _Prop_Debugging_Start_Action,
    1:     'Dw02' : _Prop_Do_Nothing_To_Projects,
    1:     'ED01' : _Prop_Flash_Delay,
    1:     'ED02' : _Prop_Dynamic_Scroll,
    1:     'ED03' : _Prop_Balance,
    1:     'ED04' : _Prop_Use_Drag__26__Drop_Editing,
    1:     'ED06' : _Prop_Sort_Function_Popup,
    1:     'ED07' : _Prop_Use_Multiple_Undo,
    1:     'ED08' : _Prop_Remember_Font,
    1:     'ED09' : _Prop_Remember_Selection,
    1:     'ED10' : _Prop_Remember_Window,
    1:     'ED12' : _Prop_Main_Text_Color,
    1:     'ED13' : _Prop_Background_Color,
    1:     'ED14' : _Prop_Context_Popup_Delay,
    1:     'ED15' : _Prop_Relaxed_C_Popup_Parsing,
    1:     'ED16' : _Prop_Left_Margin_Line_Select,
    1:     'ED17' : _Prop_Default_Text_File_Format,
    1:     'EX04' : _Prop_Modification_Date_Caching,
    1:     'EX07' : _Prop_Full_Screen_Zoom,
    1:     'EX08' : _Prop_External_Reference,
    1:     'EX09' : _Prop_Browser_Active,
    1:     'EX10' : _Prop_Use_Editor_Extensions,
    1:     'EX11' : _Prop_Use_External_Editor,
    1:     'EX12' : _Prop_Use_Script_Menu,
    1:     'EX16' : _Prop_Recent_Editor_Count,
    1:     'EX17' : _Prop_Recent_Project_Count,
    1:     'EX18' : _Prop_Use_ToolServer_Menu,
    1:     'EX19' : _Prop_Automatic_Toolbar_Help,
    1:     'EX30' : _Prop_Dump_Browser_Info,
    1:     'EX31' : _Prop_Cache_Subproject_Data,
    1:     'ErrL' : _Prop_lineNumber,
    1:     'ErrS' : _Prop_message,
    1:     'ErrT' : _Prop_messageKind,
    1:     'FMps' : _Prop_Mappings,
    1:     'FN01' : _Prop_Auto_Indent,
    1:     'FN02' : _Prop_Tab_Size,
    1:     'FN03' : _Prop_Tab_Indents_Selection,
    1:     'FN04' : _Prop_Tab_Inserts_Spaces,
    1:     'Frmt' : _Prop_format,
    1:     'Frmw' : _Prop_framework,
    1:     'GH01' : _Prop_Syntax_Coloring,
    1:     'GH02' : _Prop_Comment_Color,
    1:     'GH03' : _Prop_Keyword_Color,
    1:     'GH04' : _Prop_String_Color,
    1:     'GH05' : _Prop_Custom_Color_1,
    1:     'GH06' : _Prop_Custom_Color_2,
    1:     'GH07' : _Prop_Custom_Color_3,
    1:     'GH08' : _Prop_Custom_Color_4,
    1:     'HstF' : _Prop_host_flags,
    1:     'IncF' : _Prop_includes,
    1:     'Kind' : _Prop_path_kind,
    1:     'Lang' : _Prop_language,
    1:     'NumF' : _Prop_filecount,
    1:     'Orig' : _Prop_origin,
    1:     'PA01' : _Prop_User_Paths,
    1:     'PA02' : _Prop_Always_Full_Search,
    1:     'PA03' : _Prop_System_Paths,
    1:     'PA04' : _Prop_Convert_Paths,
    1:     'PA05' : _Prop_Require_Framework_Includes,
    1:     'PLck' : _Prop_seg_2d_locked,
    1:     'PR04' : _Prop_File_Type,
    1:     'PX01' : _Prop_Plugin_Diagnostics_Level,
    1:     'PX02' : _Prop_Disable_Third_Party_COM_Plugins,
    1:     'Path' : _Prop_path,
    1:     'Prel' : _Prop_seg_2d_preloaded,
    1:     'Prot' : _Prop_seg_2d_protected,
    1:     'Purg' : _Prop_seg_2d_purgeable,
    1:     'RS01' : _Prop_Host_Application,
    1:     'RS02' : _Prop_Command_Line_Arguments,
    1:     'RS03' : _Prop_Working_Directory,
    1:     'RS04' : _Prop_Environment_Variables,
    1:     'Recu' : _Prop_recursive,
    1:     'Root' : _Prop_root,
    1:     'SF01' : _Prop_Expression_To_Match,
    1:     'SF02' : _Prop_Skip_Project_Operations,
    1:     'SF03' : _Prop_Skip_Find_And_Compare_Operations,
    1:     'SFis' : _Prop_Shielded_Items,
    1:     'ST01' : _Prop_Source_Trees,
    1:     'SrcT' : _Prop_filetype,
    1:     'Stat' : _Prop_static,
    1:     'SubA' : _Prop_all_subclasses,
    1:     'SubC' : _Prop_subclasses,
    1:     'SymG' : _Prop_symbols,
    1:     'SysH' : _Prop_seg_2d_system_heap,
    1:     'TA01' : _Prop_Linker,
    1:     'TA02' : _Prop_Extension,
    1:     'TA03' : _Prop_Precompiled,
    1:     'TA04' : _Prop_Resource_File,
    1:     'TA05' : _Prop_Launchable,
    1:     'TA06' : _Prop_Ignored_by_Make,
    1:     'TA07' : _Prop_Compiler,
    1:     'TA09' : _Prop_Post_Linker,
    1:     'TA10' : _Prop_Target_Name,
    1:     'TA11' : _Prop_Output_Directory_Path,
    1:     'TA12' : _Prop_Output_Directory_Origin,
    1:     'TA13' : _Prop_Pre_Linker,
    1:     'TA15' : _Prop_Use_Relative_Paths,
    1:     'TA16' : _Prop_Output_Directory_Location,
    1:     'UpTD' : _Prop_up_to_date,
    1:     'VC01' : _Prop_VCS_Active,
    1:     'VC02' : _Prop_Connection_Method,
    1:     'VC03' : _Prop_Username,
    1:     'VC04' : _Prop_Password,
    1:     'VC05' : _Prop_Auto_Connect,
    1:     'VC06' : _Prop_Store_Password,
    1:     'VC07' : _Prop_Always_Prompt,
    1:     'VC08' : _Prop_Mount_Volume,
    1:     'VC09' : _Prop_Database_Path,
    1:     'VC10' : _Prop_Local_Path,
    1:     'VC11' : _Prop_Use_Global_Settings,
    1:     'Valu' : _Prop_value,
    1:     'Virt' : _Prop_virtual,
    1:     'Weak' : _Prop_weak_link,
    1:     'file' : _Prop_disk_file,
    1:     'pnam' : _Prop_name,
    1:     'ptps' : _Prop_Text_Size,
    1:     'ptxf' : _Prop_Text_Font,
       }
       
    1: _compdeclarations = {
       }
       
    1: _enumdeclarations = {
    1:     'Acce' : _Enum_Acce,
    1:     'BXbr' : _Enum_BXbr,
    1:     'DbSA' : _Enum_DbSA,
    1:     'DgBL' : _Enum_DgBL,
    1:     'ErrT' : _Enum_ErrT,
    1:     'Inte' : _Enum_Inte,
    1:     'Lang' : _Enum_Lang,
    1:     'PPrm' : _Enum_PPrm,
    1:     'PXdg' : _Enum_PXdg,
    1:     'PthF' : _Enum_PthF,
    1:     'RefP' : _Enum_RefP,
    1:     'STKd' : _Enum_STKd,
    1:     'SrcT' : _Enum_SrcT,
    1:     'TmpB' : _Enum_TmpB,
    1:     'TxtF' : _Enum_TxtF,
    1:     'savo' : _Enum_savo,
       }
