       """Parser for future statements
       
    2: """
       
    2: from compiler import ast, walk
       
    2: def is_future(stmt):
           """Return true if statement is a well-formed future statement"""
   15:     if not isinstance(stmt, ast.From):
   11:         return 0
    4:     if stmt.modname == "__future__":
    4:         return 1
           else:
>>>>>>         return 0
       
    4: class FutureParser:
       
           features = ("nested_scopes", "generators", "division",
                       "absolute_import", "with_statement", "print_function",
    2:                 "unicode_literals")
       
    2:     def __init__(self):
   12:         self.found = {} # set
       
    2:     def visitModule(self, node):
   12:         stmt = node.node
   16:         for s in stmt.nodes:
   15:             if not self.check_stmt(s):
   11:                 break
       
    2:     def check_stmt(self, stmt):
   15:         if is_future(stmt):
    8:             for name, asname in stmt.names:
    4:                 if name in self.features:
    4:                     self.found[name] = 1
                       else:
>>>>>>                     raise SyntaxError, \
>>>>>>                           "future feature %s is not defined" % name
    4:             stmt.valid_future = 1
    4:             return 1
   11:         return 0
       
    2:     def get_features(self):
               """Return list of features enabled by future statements"""
   12:         return self.found.keys()
       
    4: class BadFutureParser:
    2:     """Check for invalid future statements"""
       
    2:     def visitFrom(self, node):
    4:         if hasattr(node, 'valid_future'):
    4:             return
>>>>>>         if node.modname != "__future__":
>>>>>>             return
>>>>>>         raise SyntaxError, "invalid future statement " + repr(node)
       
    2: def find_futures(node):
   12:     p1 = FutureParser()
   12:     p2 = BadFutureParser()
   12:     walk(node, p1)
   12:     walk(node, p2)
   12:     return p1.get_features()
       
    2: if __name__ == "__main__":
>>>>>>     import sys
>>>>>>     from compiler import parseFile, walk
       
>>>>>>     for file in sys.argv[1:]:
>>>>>>         print file
>>>>>>         tree = parseFile(file)
>>>>>>         v = FutureParser()
>>>>>>         walk(tree, v)
>>>>>>         print v.found
>>>>>>         print
