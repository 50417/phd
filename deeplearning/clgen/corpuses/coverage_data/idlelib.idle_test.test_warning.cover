       '''Test warnings replacement in PyShell.py and run.py.
       
       This file could be expanded to include traceback overrides
       (in same two modules). If so, change name.
       Revise if output destination changes (http://bugs.python.org/issue18318).
       Make sure warnings module is left unaltered (http://bugs.python.org/issue18081).
    1: '''
       
    1: import unittest
    1: from test.test_support import captured_stderr
       
    1: import warnings
       # Try to capture default showwarning before Idle modules are imported.
    1: showwarning = warnings.showwarning
       # But if we run this file within idle, we are in the middle of the run.main loop
       # and default showwarnings has already been replaced.
    1: running_in_idle = 'idle' in showwarning.__name__
       
    1: from idlelib import run
    1: from idlelib import PyShell as shell
       
       # The following was generated from PyShell.idle_formatwarning
       # and checked as matching expectation.
       idlemsg = '''
       Warning (from warnings module):
         File "test_warning.py", line 99
           Line of code
       UserWarning: Test
    1: '''
    1: shellmsg = idlemsg + ">>> "
       
    2: class RunWarnTest(unittest.TestCase):
       
    1:     @unittest.skipIf(running_in_idle, "Does not work when run within Idle.")
           def test_showwarnings(self):
    1:         self.assertIs(warnings.showwarning, showwarning)
    1:         run.capture_warnings(True)
    1:         self.assertIs(warnings.showwarning, run.idle_showwarning_subproc)
    1:         run.capture_warnings(False)
    1:         self.assertIs(warnings.showwarning, showwarning)
       
    1:     def test_run_show(self):
    1:         with captured_stderr() as f:
    1:             run.idle_showwarning_subproc(
    1:                     'Test', UserWarning, 'test_warning.py', 99, f, 'Line of code')
                   # The following uses .splitlines to erase line-ending differences
    1:             self.assertEqual(idlemsg.splitlines(), f.getvalue().splitlines())
       
    2: class ShellWarnTest(unittest.TestCase):
       
    1:     @unittest.skipIf(running_in_idle, "Does not work when run within Idle.")
           def test_showwarnings(self):
    1:         self.assertIs(warnings.showwarning, showwarning)
    1:         shell.capture_warnings(True)
    1:         self.assertIs(warnings.showwarning, shell.idle_showwarning)
    1:         shell.capture_warnings(False)
    1:         self.assertIs(warnings.showwarning, showwarning)
       
    1:     def test_idle_formatter(self):
               # Will fail if format changed without regenerating idlemsg
    1:         s = shell.idle_formatwarning(
    1:                 'Test', UserWarning, 'test_warning.py', 99, 'Line of code')
    1:         self.assertEqual(idlemsg, s)
       
    1:     def test_shell_show(self):
    1:         with captured_stderr() as f:
    1:             shell.idle_showwarning(
    1:                     'Test', UserWarning, 'test_warning.py', 99, f, 'Line of code')
    1:             self.assertEqual(shellmsg.splitlines(), f.getvalue().splitlines())
       
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main(verbosity=2, exit=False)
