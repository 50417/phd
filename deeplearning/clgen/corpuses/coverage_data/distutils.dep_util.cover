       """distutils.dep_util
       
       Utility functions for simple, timestamp-based dependency of files
       and groups of files; also, function based entirely on such
    2: timestamp dependency analysis."""
       
    2: __revision__ = "$Id$"
       
    2: import os
    2: from stat import ST_MTIME
    2: from distutils.errors import DistutilsFileError
       
    2: def newer(source, target):
           """Tells if the target is newer than the source.
       
           Return true if 'source' exists and is more recently modified than
           'target', or if 'source' exists and 'target' doesn't.
       
           Return false if both exist and 'target' is the same age or younger
           than 'source'. Raise DistutilsFileError if 'source' does not exist.
       
           Note that this test is not very accurate: files created in the same second
           will have the same "age".
           """
   87:     if not os.path.exists(source):
    1:         raise DistutilsFileError("file '%s' does not exist" %
    1:                                  os.path.abspath(source))
   86:     if not os.path.exists(target):
   79:         return True
       
    7:     return os.stat(source)[ST_MTIME] > os.stat(target)[ST_MTIME]
       
    2: def newer_pairwise(sources, targets):
           """Walk two filename lists in parallel, testing if each source is newer
           than its corresponding target.  Return a pair of lists (sources,
           targets) where source is newer than target, according to the semantics
           of 'newer()'.
           """
    1:     if len(sources) != len(targets):
>>>>>>         raise ValueError, "'sources' and 'targets' must be same length"
       
           # build a pair of lists (sources, targets) where  source is newer
    1:     n_sources = []
    1:     n_targets = []
    3:     for source, target in zip(sources, targets):
    2:         if newer(source, target):
    1:             n_sources.append(source)
    1:             n_targets.append(target)
       
    1:     return n_sources, n_targets
       
    2: def newer_group(sources, target, missing='error'):
           """Return true if 'target' is out-of-date with respect to any file
           listed in 'sources'.
       
           In other words, if 'target' exists and is newer
           than every file in 'sources', return false; otherwise return true.
           'missing' controls what we do when a source file is missing; the
           default ("error") is to blow up with an OSError from inside 'stat()';
           if it is "ignore", we silently drop any missing source files; if it is
           "newer", any missing source files make us assume that 'target' is
           out-of-date (this is handy in "dry-run" mode: it'll make you pretend to
           carry out commands that wouldn't work because inputs are missing, but
           that doesn't matter because you're not actually going to run the
           commands).
           """
           # If the target doesn't even exist, then it's definitely out-of-date.
   15:     if not os.path.exists(target):
   10:         return True
       
           # Otherwise we have to find out the hard way: if *any* source file
           # is more recent than 'target', then 'target' is out-of-date and
           # we can immediately return true.  If we fall through to the end
           # of the loop, then 'target' is up-to-date and we return false.
    5:     target_mtime = os.stat(target)[ST_MTIME]
       
   11:     for source in sources:
    9:         if not os.path.exists(source):
    3:             if missing == 'error':      # blow up when we stat() the file
    1:                 pass
    2:             elif missing == 'ignore':   # missing source dropped from
    1:                 continue                #  target's dependency list
    1:             elif missing == 'newer':    # missing source means target is
    1:                 return True             #  out-of-date
       
    7:         if os.stat(source)[ST_MTIME] > target_mtime:
    1:             return True
       
    2:     return False
