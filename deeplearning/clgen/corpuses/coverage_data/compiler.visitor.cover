    2: from compiler import ast
       
       # XXX should probably rename ASTVisitor to ASTWalker
       # XXX can it be made even more generic?
       
    4: class ASTVisitor:
           """Performs a depth-first walk of the AST
       
           The ASTVisitor will walk the AST, performing either a preorder or
           postorder traversal depending on which method is called.
       
           methods:
           preorder(tree, visitor)
           postorder(tree, visitor)
               tree: an instance of ast.Node
               visitor: an instance with visitXXX methods
       
           The ASTVisitor is responsible for walking over the tree in the
           correct order.  For each node, it checks the visitor argument for
           a method named 'visitNodeType' where NodeType is the name of the
           node's class, e.g. Class.  If the method exists, it is called
           with the node as its sole argument.
       
           The visitor method for a particular node type can control how
           child nodes are visited during a preorder walk.  (It can't control
           the order during a postorder walk, because it is called _after_
           the walk has occurred.)  The ASTVisitor modifies the visitor
           argument by adding a visit method to the visitor; this method can
           be used to visit a child node of arbitrary type.
    2:     """
       
    2:     VERBOSE = 0
       
    2:     def __init__(self):
  133:         self.node = None
  133:         self._cache = {}
       
    2:     def default(self, node, *args):
 1480:         for child in node.getChildNodes():
  755:             self.dispatch(child, *args)
       
    2:     def dispatch(self, node, *args):
 1175:         self.node = node
 1175:         klass = node.__class__
 1175:         meth = self._cache.get(klass, None)
 1175:         if meth is None:
  751:             className = klass.__name__
  751:             meth = getattr(self.visitor, 'visit' + className, self.default)
  751:             self._cache[klass] = meth
       ##        if self.VERBOSE > 0:
       ##            className = klass.__name__
       ##            if self.VERBOSE == 1:
       ##                if meth == 0:
       ##                    print "dispatch", className
       ##            else:
       ##                print "dispatch", className, (meth and meth.__name__ or '')
 1175:         return meth(node, *args)
       
    2:     def preorder(self, tree, visitor, *args):
               """Do preorder walk of tree using visitor"""
  133:         self.visitor = visitor
  133:         visitor.visit = self.dispatch
  133:         self.dispatch(tree, *args) # XXX *args make sense?
       
    4: class ExampleASTVisitor(ASTVisitor):
           """Prints examples of the nodes that aren't visited
       
           This visitor-driver is only useful for development, when it's
           helpful to develop a visitor incrementally, and get feedback on what
           you still have to do.
    2:     """
    2:     examples = {}
       
    2:     def dispatch(self, node, *args):
>>>>>>         self.node = node
>>>>>>         meth = self._cache.get(node.__class__, None)
>>>>>>         className = node.__class__.__name__
>>>>>>         if meth is None:
>>>>>>             meth = getattr(self.visitor, 'visit' + className, 0)
>>>>>>             self._cache[node.__class__] = meth
>>>>>>         if self.VERBOSE > 1:
>>>>>>             print "dispatch", className, (meth and meth.__name__ or '')
>>>>>>         if meth:
>>>>>>             meth(node, *args)
>>>>>>         elif self.VERBOSE > 0:
>>>>>>             klass = node.__class__
>>>>>>             if klass not in self.examples:
>>>>>>                 self.examples[klass] = klass
>>>>>>                 print
>>>>>>                 print self.visitor
>>>>>>                 print klass
>>>>>>                 for attr in dir(node):
>>>>>>                     if attr[0] != '_':
>>>>>>                         print "\t", "%-12.12s" % attr, getattr(node, attr)
>>>>>>                 print
>>>>>>             return self.default(node, *args)
       
       # XXX this is an API change
       
    2: _walker = ASTVisitor
    2: def walk(tree, visitor, walker=None, verbose=None):
  133:     if walker is None:
  133:         walker = _walker()
  133:     if verbose is not None:
   28:         walker.VERBOSE = verbose
  133:     walker.preorder(tree, visitor)
  133:     return walker.visitor
       
    2: def dumpNode(node):
>>>>>>     print node.__class__
>>>>>>     for attr in dir(node):
>>>>>>         if attr[0] != '_':
>>>>>>             print "\t", "%-10.10s" % attr, getattr(node, attr)
