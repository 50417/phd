       # Copyright (C) 2001-2010 Python Software Foundation
       # Author: Barry Warsaw
       # Contact: email-sig@python.org
       
    1: """Miscellaneous utilities."""
       
       __all__ = [
    1:     'collapse_rfc2231_value',
    1:     'decode_params',
    1:     'decode_rfc2231',
    1:     'encode_rfc2231',
    1:     'formataddr',
    1:     'formatdate',
    1:     'getaddresses',
    1:     'make_msgid',
    1:     'mktime_tz',
    1:     'parseaddr',
    1:     'parsedate',
    1:     'parsedate_tz',
    1:     'unquote',
           ]
       
    1: import os
    1: import re
    1: import time
    1: import base64
    1: import random
    1: import socket
    1: import urllib
    1: import warnings
       
    1: from email._parseaddr import quote
    1: from email._parseaddr import AddressList as _AddressList
    1: from email._parseaddr import mktime_tz
       
       # We need wormarounds for bugs in these methods in older Pythons (see below)
    1: from email._parseaddr import parsedate as _parsedate
    1: from email._parseaddr import parsedate_tz as _parsedate_tz
       
    1: from quopri import decodestring as _qdecode
       
       # Intrapackage imports
    1: from email.encoders import _bencode, _qencode
       
    1: COMMASPACE = ', '
    1: EMPTYSTRING = ''
    1: UEMPTYSTRING = u''
    1: CRLF = '\r\n'
    1: TICK = "'"
       
    1: specialsre = re.compile(r'[][\\()<>@,:;".]')
    1: escapesre = re.compile(r'[][\\()"]')
       
       
       
       # Helpers
       
    1: def _identity(s):
>>>>>>     return s
       
       
    1: def _bdecode(s):
           """Decodes a base64 string.
       
           This function is equivalent to base64.decodestring and it's retained only
           for backward compatibility. It used to remove the last \\n of the decoded
           string, if it had any (see issue 7143).
           """
   15:     if not s:
>>>>>>         return s
   15:     return base64.decodestring(s)
       
       
       
    1: def fix_eols(s):
           """Replace all line-ending characters with \\r\\n."""
           # Fix newlines with no preceding carriage return
  299:     s = re.sub(r'(?<!\r)\n', CRLF, s)
           # Fix carriage returns with no following newline
  299:     s = re.sub(r'\r(?!\n)', CRLF, s)
  299:     return s
       
       
       
    1: def formataddr(pair):
           """The inverse of parseaddr(), this takes a 2-tuple of the form
           (realname, email_address) and returns the string value suitable
           for an RFC 2822 From, To or Cc header.
       
           If the first element of pair is false, then the second element is
           returned unmodified.
           """
   24:     name, address = pair
   24:     if name:
   21:         quotes = ''
   21:         if specialsre.search(name):
   18:             quotes = '"'
   21:         name = escapesre.sub(r'\\\g<0>', name)
   21:         return '%s%s%s <%s>' % (quotes, name, quotes, address)
    3:     return address
       
       
       
    1: def getaddresses(fieldvalues):
           """Return a list of (REALNAME, EMAIL) for each fieldvalue."""
   15:     all = COMMASPACE.join(fieldvalues)
   15:     a = _AddressList(all)
   15:     return a.addresslist
       
       
       
    1: ecre = re.compile(r'''
         =\?                   # literal =?
         (?P<charset>[^?]*?)   # non-greedy up to the next ? is the charset
         \?                    # literal ?
         (?P<encoding>[qb])    # either a "q" or a "b", case insensitive
         \?                    # literal ?
         (?P<atom>.*?)         # non-greedy up to the next ?= is the atom
         \?=                   # literal ?=
    1:   ''', re.VERBOSE | re.IGNORECASE)
       
       
       
    1: def formatdate(timeval=None, localtime=False, usegmt=False):
           """Returns a date string as specified by RFC 2822, e.g.:
       
           Fri, 09 Nov 2001 01:08:47 -0000
       
           Optional timeval if given is a floating point time value as accepted by
           gmtime() and localtime(), otherwise the current time is used.
       
           Optional localtime is a flag that when True, interprets timeval, and
           returns a date relative to the local timezone instead of UTC, properly
           taking daylight savings time into account.
       
           Optional argument usegmt means that the timezone is written out as
           an ascii string, not numeric one (so "GMT" instead of "+0000"). This
           is needed for HTTP, and is only used when localtime==False.
           """
           # Note: we cannot use strftime() because that honors the locale and RFC
           # 2822 requires that day and month names be the English abbreviations.
   39:     if timeval is None:
>>>>>>         timeval = time.time()
   39:     if localtime:
    3:         now = time.localtime(timeval)
               # Calculate timezone offset, based on whether the local zone has
               # daylight savings time, and whether DST is in effect.
    3:         if time.daylight and now[-1]:
    3:             offset = time.altzone
               else:
>>>>>>             offset = time.timezone
    3:         hours, minutes = divmod(abs(offset), 3600)
               # Remember offset is in seconds west of UTC, but the timezone is in
               # minutes east of UTC, so the signs differ.
    3:         if offset > 0:
    3:             sign = '-'
               else:
>>>>>>             sign = '+'
    3:         zone = '%s%02d%02d' % (sign, hours, minutes // 60)
           else:
   36:         now = time.gmtime(timeval)
               # Timezone offset is always -0000
   36:         if usegmt:
   30:             zone = 'GMT'
               else:
    6:             zone = '-0000'
   39:     return '%s, %02d %s %04d %02d:%02d:%02d %s' % (
   39:         ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][now[6]],
   39:         now[2],
   39:         ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
   39:          'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][now[1] - 1],
   39:         now[0], now[3], now[4], now[5],
   39:         zone)
       
       
       
    1: def make_msgid(idstring=None):
           """Returns a string suitable for RFC 2822 compliant Message-ID, e.g:
       
           <142480216486.20800.16526388040877946887@nightshade.la.mastaler.com>
       
           Optional idstring if given is a string used to strengthen the
           uniqueness of the message id.
           """
 5938:     timeval = int(time.time()*100)
 5938:     pid = os.getpid()
 5938:     randint = random.getrandbits(64)
 5938:     if idstring is None:
 5938:         idstring = ''
           else:
>>>>>>         idstring = '.' + idstring
 5938:     idhost = socket.getfqdn()
 5938:     msgid = '<%d.%d.%d%s@%s>' % (timeval, pid, randint, idstring, idhost)
 5938:     return msgid
       
       
       
       # These functions are in the standalone mimelib version only because they've
       # subsequently been fixed in the latest Python versions.  We use this to worm
       # around broken older Pythons.
    1: def parsedate(data):
   18:     if not data:
    3:         return None
   15:     return _parsedate(data)
       
       
    1: def parsedate_tz(data):
   13:     if not data:
>>>>>>         return None
   13:     return _parsedate_tz(data)
       
       
    1: def parseaddr(addr):
   47:     addrs = _AddressList(addr).addresslist
   47:     if not addrs:
>>>>>>         return '', ''
   47:     return addrs[0]
       
       
       # rfc822.unquote() doesn't properly de-backslash-ify in Python pre-2.3.
    1: def unquote(str):
           """Remove quotes from a string."""
 3189:     if len(str) > 1:
 2957:         if str.startswith('"') and str.endswith('"'):
 2190:             return str[1:-1].replace('\\\\', '\\').replace('\\"', '"')
  767:         if str.startswith('<') and str.endswith('>'):
>>>>>>             return str[1:-1]
  999:     return str
       
       
       
       # RFC2231-related functions - parameter encoding and decoding
    1: def decode_rfc2231(s):
           """Decode string according to RFC 2231"""
   93:     parts = s.split(TICK, 2)
   93:     if len(parts) <= 2:
    6:         return None, None, s
   87:     return parts
       
       
    1: def encode_rfc2231(s, charset=None, language=None):
           """Encode string according to RFC 2231.
       
           If neither charset nor language is given, then s is returned as-is.  If
           charset is given but not language, the string is encoded using the empty
           string for language.
           """
   19:     import urllib
   19:     s = urllib.quote(s, safe='')
   19:     if charset is None and language is None:
>>>>>>         return s
   19:     if language is None:
>>>>>>         language = ''
   19:     return "%s'%s'%s" % (charset, language, s)
       
       
    1: rfc2231_continuation = re.compile(r'^(?P<name>\w+)\*((?P<num>[0-9]+)\*?)?$')
       
    1: def decode_params(params):
           """Decode parameters list according to RFC 2231.
       
           params is a sequence of 2-tuples containing (param name, string value).
           """
           # Copy params so we don't mess with the original
 1175:     params = params[:]
 1175:     new_params = []
           # Map parameter's name to a list of continuations.  The values are a
           # 3-tuple of the continuation number, the string value, and a flag
           # specifying whether a particular segment is %-encoded.
 1175:     rfc2231_params = {}
 1175:     name, value = params.pop(0)
 1175:     new_params.append((name, value))
 2508:     while params:
 1333:         name, value = params.pop(0)
 1333:         if name.endswith('*'):
  135:             encoded = True
               else:
 1198:             encoded = False
 1333:         value = unquote(value)
 1333:         mo = rfc2231_continuation.match(name)
 1333:         if mo:
  202:             name, num = mo.group('name', 'num')
  202:             if num is not None:
  151:                 num = int(num)
  202:             rfc2231_params.setdefault(name, []).append((num, value, encoded))
               else:
 1131:             new_params.append((name, '"%s"' % quote(value)))
 1175:     if rfc2231_params:
  199:         for name, continuations in rfc2231_params.items():
  107:             value = []
  107:             extended = False
                   # Sort by number
  107:             continuations.sort()
                   # And now append all values in numerical order, converting
                   # %-encodings for the encoded segments.  If any of the
                   # continuation names ends in a *, then the entire string, after
                   # decoding segments and concatenating, must have the charset and
                   # language specifiers at the beginning of the string.
  309:             for num, s, encoded in continuations:
  202:                 if encoded:
  135:                     s = urllib.unquote(s)
  135:                     extended = True
  202:                 value.append(s)
  107:             value = quote(EMPTYSTRING.join(value))
  107:             if extended:
   93:                 charset, language, value = decode_rfc2231(value)
   93:                 new_params.append((name, (charset, language, '"%s"' % value)))
                   else:
   14:                 new_params.append((name, '"%s"' % value))
 1175:     return new_params
       
    1: def collapse_rfc2231_value(value, errors='replace',
    1:                            fallback_charset='us-ascii'):
  577:     if isinstance(value, tuple):
   30:         rawval = unquote(value[2])
   30:         charset = value[0] or 'us-ascii'
   30:         try:
   30:             return unicode(rawval, charset, errors)
    6:         except LookupError:
                   # XXX charset is unknown to Python.
    6:             return unicode(rawval, fallback_charset, errors)
           else:
  547:         return unquote(value)
