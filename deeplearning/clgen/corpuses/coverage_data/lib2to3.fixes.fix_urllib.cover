       """Fix changes imports of urllib which are now incompatible.
          This is rather similar to fix_imports, but because of the more
          complex nature of the fixing for urllib, it has its own fixer.
    1: """
       # Author: Nick Edds
       
       # Local imports
    1: from lib2to3.fixes.fix_imports import alternates, FixImports
    1: from lib2to3 import fixer_base
    1: from lib2to3.fixer_util import (Name, Comma, FromImport, Newline,
                                       find_indentation, Node, syms)
       
    1: MAPPING = {"urllib":  [
    1:                 ("urllib.request",
    1:                     ["URLopener", "FancyURLopener", "urlretrieve",
    1:                      "_urlopener", "urlopen", "urlcleanup",
    1:                      "pathname2url", "url2pathname"]),
    1:                 ("urllib.parse",
    1:                     ["quote", "quote_plus", "unquote", "unquote_plus",
    1:                      "urlencode", "splitattr", "splithost", "splitnport",
    1:                      "splitpasswd", "splitport", "splitquery", "splittag",
    1:                      "splittype", "splituser", "splitvalue", ]),
    1:                 ("urllib.error",
    1:                     ["ContentTooShortError"])],
                  "urllib2" : [
    1:                 ("urllib.request",
    1:                     ["urlopen", "install_opener", "build_opener",
    1:                      "Request", "OpenerDirector", "BaseHandler",
    1:                      "HTTPDefaultErrorHandler", "HTTPRedirectHandler",
    1:                      "HTTPCookieProcessor", "ProxyHandler",
    1:                      "HTTPPasswordMgr",
    1:                      "HTTPPasswordMgrWithDefaultRealm",
    1:                      "AbstractBasicAuthHandler",
    1:                      "HTTPBasicAuthHandler", "ProxyBasicAuthHandler",
    1:                      "AbstractDigestAuthHandler",
    1:                      "HTTPDigestAuthHandler", "ProxyDigestAuthHandler",
    1:                      "HTTPHandler", "HTTPSHandler", "FileHandler",
    1:                      "FTPHandler", "CacheFTPHandler",
    1:                      "UnknownHandler"]),
    1:                 ("urllib.error",
    1:                     ["URLError", "HTTPError"]),
                  ]
       }
       
       # Duplicate the url parsing functions for urllib2.
    1: MAPPING["urllib2"].append(MAPPING["urllib"][1])
       
       
    1: def build_pattern():
   15:     bare = set()
   45:     for old_module, changes in MAPPING.items():
  120:         for change in changes:
   90:             new_module, members = change
   90:             members = alternates(members)
                   yield """import_name< 'import' (module=%r
                                         | dotted_as_names< any* module=%r any* >) >
   90:                   """ % (old_module, old_module)
                   yield """import_from< 'from' mod_member=%r 'import'
                              ( member=%s | import_as_name< member=%s 'as' any > |
                                import_as_names< members=any*  >) >
   90:                   """ % (old_module, members, members)
                   yield """import_from< 'from' module_star=%r 'import' star='*' >
   90:                   """ % old_module
                   yield """import_name< 'import'
                                         dotted_as_name< module_as=%r 'as' any > >
   90:                   """ % old_module
                   # bare_with_attr has a special significance for FixImports.match().
                   yield """power< bare_with_attr=%r trailer< '.' member=%s > any* >
   90:                   """ % (old_module, members)
       
       
    2: class FixUrllib(FixImports):
       
    1:     def build_pattern(self):
   15:         return "|".join(build_pattern())
       
    1:     def transform_import(self, node, results):
               """Transform for the basic import case. Replaces the old
                  import name with a comma separated list of its
                  replacements.
               """
  132:         import_mod = results.get("module")
  132:         pref = import_mod.prefix
       
  132:         names = []
       
               # create a Node list of the replacement modules
  396:         for name in MAPPING[import_mod.value][:-1]:
  264:             names.extend([Name(name[0], prefix=pref), Comma()])
  132:         names.append(Name(MAPPING[import_mod.value][-1][0], prefix=pref))
  132:         import_mod.replace(names)
       
    1:     def transform_member(self, node, results):
               """Transform for imports of specific module elements. Replaces
                  the module to be imported from with the appropriate new
                  module.
               """
  205:         mod_member = results.get("mod_member")
  205:         pref = mod_member.prefix
  205:         member = results.get("member")
       
               # Simple case with only a single member being imported
  205:         if member:
                   # this may be a list of length one, or just a node
  131:             if isinstance(member, list):
  128:                 member = member[0]
  131:             new_name = None
  231:             for change in MAPPING[mod_member.value]:
  231:                 if member.value in change[1]:
  131:                     new_name = change[0]
  131:                     break
  131:             if new_name:
  131:                 mod_member.replace(Name(new_name, prefix=pref))
                   else:
>>>>>>                 self.cannot_convert(node, "This is an invalid module element")
       
               # Multiple members being imported
               else:
                   # a dictionary for replacements, order matters
   74:             modules = []
   74:             mod_dict = {}
   74:             members = results["members"]
  526:             for member in members:
                       # we only care about the actual members
  452:                 if member.type == syms.import_as_name:
   65:                     as_name = member.children[2].value
   65:                     member_name = member.children[0].value
                       else:
  387:                     member_name = member.value
  387:                     as_name = None
  452:                 if member_name != u",":
 1052:                     for change in MAPPING[mod_member.value]:
  789:                         if member_name in change[1]:
  263:                             if change[0] not in mod_dict:
   80:                                 modules.append(change[0])
  263:                             mod_dict.setdefault(change[0], []).append(member)
       
   74:             new_nodes = []
   74:             indentation = find_indentation(node)
   74:             first = True
   74:             def handle_name(name, prefix):
  263:                 if name.type == syms.import_as_name:
   65:                     kids = [Name(name.children[0].value, prefix=prefix),
   65:                             name.children[1].clone(),
   65:                             name.children[2].clone()]
   65:                     return [Node(syms.import_as_name, kids)]
  198:                 return [Name(name.value, prefix=prefix)]
  154:             for module in modules:
   80:                 elts = mod_dict[module]
   80:                 names = []
  263:                 for elt in elts[:-1]:
  183:                     names.extend(handle_name(elt, pref))
  183:                     names.append(Comma())
   80:                 names.extend(handle_name(elts[-1], pref))
   80:                 new = FromImport(module, names)
   80:                 if not first or node.parent.prefix.endswith(indentation):
   79:                     new.prefix = indentation
   80:                 new_nodes.append(new)
   80:                 first = False
   74:             if new_nodes:
   74:                 nodes = []
   80:                 for new_node in new_nodes[:-1]:
    6:                     nodes.extend([new_node, Newline()])
   74:                 nodes.append(new_nodes[-1])
   74:                 node.replace(nodes)
                   else:
>>>>>>                 self.cannot_convert(node, "All module elements are invalid")
       
    1:     def transform_dot(self, node, results):
               """Transform for calls to module members in code."""
  195:         module_dot = results.get("bare_with_attr")
  195:         member = results.get("member")
  195:         new_name = None
  195:         if isinstance(member, list):
  192:             member = member[0]
  342:         for change in MAPPING[module_dot.value]:
  342:             if member.value in change[1]:
  195:                 new_name = change[0]
  195:                 break
  195:         if new_name:
  195:             module_dot.replace(Name(new_name,
  195:                                     prefix=module_dot.prefix))
               else:
>>>>>>             self.cannot_convert(node, "This is an invalid module element")
       
    1:     def transform(self, node, results):
  574:         if results.get("module"):
  132:             self.transform_import(node, results)
  442:         elif results.get("mod_member"):
  205:             self.transform_member(node, results)
  237:         elif results.get("bare_with_attr"):
  195:             self.transform_dot(node, results)
               # Renaming and star imports are not supported for these modules.
   42:         elif results.get("module_star"):
   24:             self.cannot_convert(node, "Cannot handle star imports.")
   18:         elif results.get("module_as"):
   18:             self.cannot_convert(node, "This module is now multiple modules")
