    1: """Unit tests for __instancecheck__ and __subclasscheck__."""
       
    1: import unittest
    1: from test import test_support
       
       
    2: class ABC(type):
       
    1:     def __instancecheck__(cls, inst):
               """Implement isinstance(inst, cls)."""
   20:         return any(cls.__subclasscheck__(c)
   16:                    for c in set([type(inst), inst.__class__]))
       
    1:     def __subclasscheck__(cls, sub):
               """Implement issubclass(sub, cls)."""
   24:         candidates = cls.__dict__.get("__subclass__", set()) | set([cls])
   74:         return any(c in candidates for c in sub.mro())
       
       
    2: class Integer:
       
    1:     __metaclass__ = ABC
       
    1:     __subclass__ = set([int])
       
       
    2: class SubInt(Integer):
       
    1:     pass
       
       
    2: class TypeChecksTest(unittest.TestCase):
       
    1:     def testIsSubclassInternal(self):
    1:         self.assertEqual(Integer.__subclasscheck__(int), True)
    1:         self.assertEqual(Integer.__subclasscheck__(float), False)
       
    1:     def testIsSubclassBuiltin(self):
    1:         self.assertEqual(issubclass(int, Integer), True)
    1:         self.assertEqual(issubclass(int, (Integer,)), True)
    1:         self.assertEqual(issubclass(float, Integer), False)
    1:         self.assertEqual(issubclass(float, (Integer,)), False)
       
    1:     def testIsInstanceBuiltin(self):
    1:         self.assertEqual(isinstance(42, Integer), True)
    1:         self.assertEqual(isinstance(42, (Integer,)), True)
    1:         self.assertEqual(isinstance(3.14, Integer), False)
    1:         self.assertEqual(isinstance(3.14, (Integer,)), False)
       
    1:     def testIsInstanceActual(self):
    1:         self.assertEqual(isinstance(Integer(), Integer), True)
    1:         self.assertEqual(isinstance(Integer(), (Integer,)), True)
       
    1:     def testIsSubclassActual(self):
    1:         self.assertEqual(issubclass(Integer, Integer), True)
    1:         self.assertEqual(issubclass(Integer, (Integer,)), True)
       
    1:     def testSubclassBehavior(self):
    1:         self.assertEqual(issubclass(SubInt, Integer), True)
    1:         self.assertEqual(issubclass(SubInt, (Integer,)), True)
    1:         self.assertEqual(issubclass(SubInt, SubInt), True)
    1:         self.assertEqual(issubclass(SubInt, (SubInt,)), True)
    1:         self.assertEqual(issubclass(Integer, SubInt), False)
    1:         self.assertEqual(issubclass(Integer, (SubInt,)), False)
    1:         self.assertEqual(issubclass(int, SubInt), False)
    1:         self.assertEqual(issubclass(int, (SubInt,)), False)
    1:         self.assertEqual(isinstance(SubInt(), Integer), True)
    1:         self.assertEqual(isinstance(SubInt(), (Integer,)), True)
    1:         self.assertEqual(isinstance(SubInt(), SubInt), True)
    1:         self.assertEqual(isinstance(SubInt(), (SubInt,)), True)
    1:         self.assertEqual(isinstance(42, SubInt), False)
    1:         self.assertEqual(isinstance(42, (SubInt,)), False)
       
    1:     def test_oldstyle(self):
               # These should just be ignored.
    2:         class X:
    1:             def __instancecheck__(self, inst):
>>>>>>                 return True
    1:             def __subclasscheck__(self, cls):
>>>>>>                 return True
    2:         class Sub(X): pass
    1:         self.assertNotIsInstance(3, X)
    1:         self.assertIsInstance(X(), X)
    1:         self.assertFalse(issubclass(int, X))
    1:         self.assertTrue(issubclass(Sub, X))
       
       
    1: def test_main():
    1:     test_support.run_unittest(TypeChecksTest)
       
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
