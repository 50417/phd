       """Fixer for except statements with named exceptions.
       
       The following cases will be converted:
       
       - "except E, T:" where T is a name:
       
           except E as T:
       
       - "except E, T:" where T is not a name, tuple or list:
       
               except E as t:
                   T = t
       
           This is done because the target of an "except" clause must be a
           name.
       
       - "except E, T:" where T is a tuple or list literal:
       
               except E as t:
                   T = t.args
    1: """
       # Author: Collin Winter
       
       # Local imports
    1: from .. import pytree
    1: from ..pgen2 import token
    1: from .. import fixer_base
    1: from ..fixer_util import Assign, Attr, Name, is_tuple, is_list, syms
       
    1: def find_excepts(nodes):
  128:     for i, n in enumerate(nodes):
   99:         if n.type == syms.except_clause:
   33:             if n.children[0].value == u'except':
   33:                 yield (n, nodes[i+2])
       
    2: class FixExcept(fixer_base.BaseFix):
    1:     BM_compatible = True
       
           PATTERN = """
           try_stmt< 'try' ':' (simple_stmt | suite)
                         cleanup=(except_clause ':' (simple_stmt | suite))+
                         tail=(['except' ':' (simple_stmt | suite)]
                               ['else' ':' (simple_stmt | suite)]
                               ['finally' ':' (simple_stmt | suite)]) >
    1:     """
       
    1:     def transform(self, node, results):
   29:         syms = self.syms
       
   62:         tail = [n.clone() for n in results["tail"]]
       
  128:         try_cleanup = [ch.clone() for ch in results["cleanup"]]
   62:         for except_clause, e_suite in find_excepts(try_cleanup):
   33:             if len(except_clause.children) == 4:
   22:                 (E, comma, N) = except_clause.children[1:4]
   22:                 comma.replace(Name(u"as", prefix=u" "))
       
   22:                 if N.type != token.NAME:
                           # Generate a new N for the except clause
    5:                     new_N = Name(self.new_name(), prefix=u" ")
    5:                     target = N.clone()
    5:                     target.prefix = u""
    5:                     N.replace(new_N)
    5:                     new_N = new_N.clone()
       
                           # Insert "old_N = new_N" as the first statement in
                           #  the except body. This loop skips leading whitespace
                           #  and indents
                           #TODO(cwinter) suite-cleanup
    5:                     suite_stmts = e_suite.children
   15:                     for i, stmt in enumerate(suite_stmts):
   15:                         if isinstance(stmt, pytree.Node):
    5:                             break
       
                           # The assignment is different if old_N is a tuple or list
                           # In that case, the assignment is old_N = new_N.args
    5:                     if is_tuple(N) or is_list(N):
    2:                         assign = Assign(target, Attr(new_N, Name(u'args')))
                           else:
    3:                         assign = Assign(target, new_N)
       
                           #TODO(cwinter) stopgap until children becomes a smart list
   15:                     for child in reversed(suite_stmts[:i]):
   10:                         e_suite.insert_child(0, child)
    5:                     e_suite.insert_child(i, assign)
   17:                 elif N.prefix == u"":
                           # No space after a comma is legal; no space after "as",
                           # not so much.
    1:                     N.prefix = u" "
       
               #TODO(cwinter) fix this when children becomes a smart list
  116:         children = [c.clone() for c in node.children[:3]] + try_cleanup + tail
   29:         return pytree.Node(node.type, children)
