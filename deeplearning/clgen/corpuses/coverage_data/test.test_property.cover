       # Test case for property
       # more tests are in test_descr
       
    1: import sys
    1: import unittest
    1: from test.test_support import run_unittest
       
    2: class PropertyBase(Exception):
    1:     pass
       
    2: class PropertyGet(PropertyBase):
    1:     pass
       
    2: class PropertySet(PropertyBase):
    1:     pass
       
    2: class PropertyDel(PropertyBase):
    1:     pass
       
    2: class BaseClass(object):
    1:     def __init__(self):
    5:         self._spam = 5
       
    1:     @property
           def spam(self):
               """BaseClass.getter"""
    4:         return self._spam
       
    1:     @spam.setter
           def spam(self, value):
    2:         self._spam = value
       
    1:     @spam.deleter
           def spam(self):
    1:         del self._spam
       
    2: class SubClass(BaseClass):
       
    1:     @BaseClass.spam.getter
           def spam(self):
               """SubClass.getter"""
    1:         raise PropertyGet(self._spam)
       
    1:     @spam.setter
           def spam(self, value):
    1:         raise PropertySet(self._spam)
       
    1:     @spam.deleter
           def spam(self):
    1:         raise PropertyDel(self._spam)
       
    2: class PropertyDocBase(object):
    1:     _spam = 1
    1:     def _get_spam(self):
>>>>>>         return self._spam
    1:     spam = property(_get_spam, doc="spam spam spam")
       
    2: class PropertyDocSub(PropertyDocBase):
    1:     @PropertyDocBase.spam.getter
           def spam(self):
               """The decorator does not use this doc string"""
>>>>>>         return self._spam
       
    2: class PropertySubNewGetter(BaseClass):
    1:     @BaseClass.spam.getter
           def spam(self):
               """new docstring"""
    1:         return 5
       
    2: class PropertyNewGetter(object):
    1:     @property
           def spam(self):
               """original docstring"""
>>>>>>         return 1
    1:     @spam.getter
           def spam(self):
               """new docstring"""
    1:         return 8
       
    2: class PropertyTests(unittest.TestCase):
    1:     def test_property_decorator_baseclass(self):
               # see #1620
    1:         base = BaseClass()
    1:         self.assertEqual(base.spam, 5)
    1:         self.assertEqual(base._spam, 5)
    1:         base.spam = 10
    1:         self.assertEqual(base.spam, 10)
    1:         self.assertEqual(base._spam, 10)
    1:         delattr(base, "spam")
    1:         self.assertTrue(not hasattr(base, "spam"))
    1:         self.assertTrue(not hasattr(base, "_spam"))
    1:         base.spam = 20
    1:         self.assertEqual(base.spam, 20)
    1:         self.assertEqual(base._spam, 20)
       
    1:     def test_property_decorator_subclass(self):
               # see #1620
    1:         sub = SubClass()
    1:         self.assertRaises(PropertyGet, getattr, sub, "spam")
    1:         self.assertRaises(PropertySet, setattr, sub, "spam", None)
    1:         self.assertRaises(PropertyDel, delattr, sub, "spam")
       
    1:     @unittest.skipIf(sys.flags.optimize >= 2,
    1:                      "Docstrings are omitted with -O2 and above")
           def test_property_decorator_subclass_doc(self):
    1:         sub = SubClass()
    1:         self.assertEqual(sub.__class__.spam.__doc__, "SubClass.getter")
       
    1:     @unittest.skipIf(sys.flags.optimize >= 2,
    1:                      "Docstrings are omitted with -O2 and above")
           def test_property_decorator_baseclass_doc(self):
    1:         base = BaseClass()
    1:         self.assertEqual(base.__class__.spam.__doc__, "BaseClass.getter")
       
    1:     def test_property_decorator_doc(self):
    1:         base = PropertyDocBase()
    1:         sub = PropertyDocSub()
    1:         self.assertEqual(base.__class__.spam.__doc__, "spam spam spam")
    1:         self.assertEqual(sub.__class__.spam.__doc__, "spam spam spam")
       
    1:     @unittest.skipIf(sys.flags.optimize >= 2,
    1:                      "Docstrings are omitted with -O2 and above")
           def test_property_getter_doc_override(self):
    1:         newgettersub = PropertySubNewGetter()
    1:         self.assertEqual(newgettersub.spam, 5)
    1:         self.assertEqual(newgettersub.__class__.spam.__doc__, "new docstring")
    1:         newgetter = PropertyNewGetter()
    1:         self.assertEqual(newgetter.spam, 8)
    1:         self.assertEqual(newgetter.__class__.spam.__doc__, "new docstring")
       
       
       # Issue 5890: subclasses of property do not preserve method __doc__ strings
    2: class PropertySub(property):
    1:     """This is a subclass of property"""
       
    2: class PropertySubSlots(property):
    1:     """This is a subclass of property that defines __slots__"""
    1:     __slots__ = ()
       
    2: class PropertySubclassTests(unittest.TestCase):
       
    1:     def test_slots_docstring_copy_exception(self):
    1:         try:
    2:             class Foo(object):
    1:                 @PropertySubSlots
                       def spam(self):
                           """Trying to copy this docstring will raise an exception"""
>>>>>>                     return 1
    1:         except AttributeError:
    1:             pass
               else:
>>>>>>             raise Exception("AttributeError not raised")
       
    1:     @unittest.skipIf(sys.flags.optimize >= 2,
    1:                      "Docstrings are omitted with -O2 and above")
           def test_docstring_copy(self):
    2:         class Foo(object):
    1:             @PropertySub
                   def spam(self):
                       """spam wrapped in property subclass"""
>>>>>>                 return 1
    1:         self.assertEqual(
    1:             Foo.spam.__doc__,
    1:             "spam wrapped in property subclass")
       
    1:     @unittest.skipIf(sys.flags.optimize >= 2,
    1:                      "Docstrings are omitted with -O2 and above")
           def test_property_setter_copies_getter_docstring(self):
    2:         class Foo(object):
    3:             def __init__(self): self._spam = 1
    1:             @PropertySub
                   def spam(self):
                       """spam wrapped in property subclass"""
    4:                 return self._spam
    1:             @spam.setter
                   def spam(self, value):
                       """this docstring is ignored"""
    1:                 self._spam = value
    1:         foo = Foo()
    1:         self.assertEqual(foo.spam, 1)
    1:         foo.spam = 2
    1:         self.assertEqual(foo.spam, 2)
    1:         self.assertEqual(
    1:             Foo.spam.__doc__,
    1:             "spam wrapped in property subclass")
    2:         class FooSub(Foo):
    1:             @Foo.spam.setter
                   def spam(self, value):
                       """another ignored docstring"""
    1:                 self._spam = 'eggs'
    1:         foosub = FooSub()
    1:         self.assertEqual(foosub.spam, 1)
    1:         foosub.spam = 7
    1:         self.assertEqual(foosub.spam, 'eggs')
    1:         self.assertEqual(
    1:             FooSub.spam.__doc__,
    1:             "spam wrapped in property subclass")
       
    1:     @unittest.skipIf(sys.flags.optimize >= 2,
    1:                      "Docstrings are omitted with -O2 and above")
           def test_property_new_getter_new_docstring(self):
       
    2:         class Foo(object):
    1:             @PropertySub
                   def spam(self):
                       """a docstring"""
>>>>>>                 return 1
    1:             @spam.getter
                   def spam(self):
                       """a new docstring"""
>>>>>>                 return 2
    1:         self.assertEqual(Foo.spam.__doc__, "a new docstring")
    2:         class FooBase(object):
    1:             @PropertySub
                   def spam(self):
                       """a docstring"""
>>>>>>                 return 1
    2:         class Foo2(FooBase):
    1:             @FooBase.spam.getter
                   def spam(self):
                       """a new docstring"""
>>>>>>                 return 2
    1:         self.assertEqual(Foo.spam.__doc__, "a new docstring")
       
       
       
    1: def test_main():
    1:     run_unittest(PropertyTests, PropertySubclassTests)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
