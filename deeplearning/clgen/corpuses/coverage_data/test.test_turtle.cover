    1: import pickle
    1: import unittest
    1: from test import test_support as support
       
    1: turtle = support.import_module('turtle')
    1: Vec2D = turtle.Vec2D
       
       test_config = """\
       width = 0.75
       height = 0.8
       canvwidth = 500
       canvheight = 200
       leftright = 100
       topbottom = 100
       mode = world
       colormode = 255
       delay = 100
       undobuffersize = 10000
       shape = circle
       pencolor  = red
       fillcolor  = blue
       resizemode  = auto
       visible  = None
       language = english
       exampleturtle = turtle
       examplescreen = screen
       title = Python Turtle Graphics
       using_IDLE = ''
    1: """
       
       test_config_two = """\
       # Comments!
       # Testing comments!
       pencolor  = red
       fillcolor  = blue
       visible  = False
       language = english
       # Some more
       # comments
       using_IDLE = False
    1: """
       
       invalid_test_config = """
       pencolor = red
       fillcolor: blue
       visible = False
    1: """
       
       
    2: class TurtleConfigTest(unittest.TestCase):
       
    1:     def get_cfg_file(self, cfg_str):
    3:         self.addCleanup(support.unlink, support.TESTFN)
    3:         with open(support.TESTFN, 'w') as f:
    3:             f.write(cfg_str)
    3:         return support.TESTFN
       
    1:     def test_config_dict(self):
       
    1:         cfg_name = self.get_cfg_file(test_config)
    1:         parsed_cfg = turtle.config_dict(cfg_name)
       
    1:         expected = {
    1:             'width' : 0.75,
    1:             'height' : 0.8,
    1:             'canvwidth' : 500,
    1:             'canvheight': 200,
    1:             'leftright': 100,
    1:             'topbottom': 100,
    1:             'mode': 'world',
    1:             'colormode': 255,
    1:             'delay': 100,
    1:             'undobuffersize': 10000,
    1:             'shape': 'circle',
    1:             'pencolor' : 'red',
    1:             'fillcolor' : 'blue',
    1:             'resizemode' : 'auto',
    1:             'visible' : None,
    1:             'language': 'english',
    1:             'exampleturtle': 'turtle',
    1:             'examplescreen': 'screen',
    1:             'title': 'Python Turtle Graphics',
    1:             'using_IDLE': '',
               }
       
    1:         self.assertEqual(parsed_cfg, expected)
       
    1:     def test_partial_config_dict_with_commments(self):
       
    1:         cfg_name = self.get_cfg_file(test_config_two)
    1:         parsed_cfg = turtle.config_dict(cfg_name)
       
    1:         expected = {
    1:             'pencolor': 'red',
    1:             'fillcolor': 'blue',
    1:             'visible': False,
    1:             'language': 'english',
    1:             'using_IDLE': False,
               }
       
    1:         self.assertEqual(parsed_cfg, expected)
       
    1:     def test_config_dict_invalid(self):
       
    1:         cfg_name = self.get_cfg_file(invalid_test_config)
       
    1:         with support.captured_stdout() as stdout:
    1:             parsed_cfg = turtle.config_dict(cfg_name)
       
    1:         err_msg = stdout.getvalue()
       
    1:         self.assertIn('Bad line in config-file ', err_msg)
    1:         self.assertIn('fillcolor: blue', err_msg)
       
    1:         self.assertEqual(parsed_cfg, {
    1:             'pencolor': 'red',
    1:             'visible': False,
               })
       
       
    2: class VectorComparisonMixin:
       
    1:     def assertVectorsAlmostEqual(self, vec1, vec2):
   21:         if len(vec1) != len(vec2):
>>>>>>             self.fail("Tuples are not of equal size")
   63:         for idx, (i, j) in enumerate(zip(vec1, vec2)):
   42:             self.assertAlmostEqual(
   42:                 i, j, msg='values at index {} do not match'.format(idx))
       
       
    2: class TestVec2D(VectorComparisonMixin, unittest.TestCase):
       
    1:     def test_constructor(self):
    1:         vec = Vec2D(0.5, 2)
    1:         self.assertEqual(vec[0], 0.5)
    1:         self.assertEqual(vec[1], 2)
    1:         self.assertIsInstance(vec, Vec2D)
       
    1:         self.assertRaises(TypeError, Vec2D)
    1:         self.assertRaises(TypeError, Vec2D, 0)
    1:         self.assertRaises(TypeError, Vec2D, (0, 1))
    1:         self.assertRaises(TypeError, Vec2D, vec)
    1:         self.assertRaises(TypeError, Vec2D, 0, 1, 2)
       
    1:     def test_repr(self):
    1:         vec = Vec2D(0.567, 1.234)
    1:         self.assertEqual(repr(vec), '(0.57,1.23)')
       
    1:     def test_equality(self):
    1:         vec1 = Vec2D(0, 1)
    1:         vec2 = Vec2D(0.0, 1)
    1:         vec3 = Vec2D(42, 1)
    1:         self.assertEqual(vec1, vec2)
    1:         self.assertEqual(vec1, tuple(vec1))
    1:         self.assertEqual(tuple(vec1), vec1)
    1:         self.assertNotEqual(vec1, vec3)
    1:         self.assertNotEqual(vec2, vec3)
       
    1:     def test_pickling(self):
    1:         vec = Vec2D(0.5, 2)
    4:         for proto in range(pickle.HIGHEST_PROTOCOL + 1):
    3:             pickled = pickle.dumps(vec, protocol=proto)
    3:             unpickled = pickle.loads(pickled)
    3:             self.assertEqual(unpickled, vec)
    3:             self.assertIsInstance(unpickled, Vec2D)
       
    1:     def _assert_arithmetic_cases(self, test_cases, lambda_operator):
    7:         for test_case in test_cases:
    5:             ((first, second), expected) = test_case
       
    5:             op1 = Vec2D(*first)
    5:             op2 = Vec2D(*second)
       
    5:             result = lambda_operator(op1, op2)
       
    5:             expected = Vec2D(*expected)
       
    5:             self.assertVectorsAlmostEqual(result, expected)
       
    1:     def test_vector_addition(self):
       
               test_cases = [
    1:             (((0, 0), (1, 1)), (1.0, 1.0)),
    1:             (((-1, 0), (2, 2)), (1, 2)),
    1:             (((1.5, 0), (1, 1)), (2.5, 1)),
               ]
       
    4:         self._assert_arithmetic_cases(test_cases, lambda x, y: x + y)
       
    1:     def test_vector_subtraction(self):
       
               test_cases = [
    1:             (((0, 0), (1, 1)), (-1, -1)),
    1:             (((10.625, 0.125), (10, 0)), (0.625, 0.125)),
               ]
       
    3:         self._assert_arithmetic_cases(test_cases, lambda x, y: x - y)
       
    1:     def test_vector_multiply(self):
       
    1:         vec1 = Vec2D(10, 10)
    1:         vec2 = Vec2D(0.5, 3)
    1:         answer = vec1 * vec2
    1:         expected = 35
    1:         self.assertAlmostEqual(answer, expected)
       
    1:         vec = Vec2D(0.5, 3)
    1:         answer = vec * 10
    1:         expected = Vec2D(5, 30)
    1:         self.assertVectorsAlmostEqual(answer, expected)
       
    1:     def test_vector_negative(self):
    1:         vec = Vec2D(10, -10)
    1:         expected = (-10, 10)
    1:         self.assertVectorsAlmostEqual(-vec, expected)
       
    1:     def test_distance(self):
    1:         vec = Vec2D(6, 8)
    1:         expected = 10
    1:         self.assertEqual(abs(vec), expected)
       
    1:         vec = Vec2D(0, 0)
    1:         expected = 0
    1:         self.assertEqual(abs(vec), expected)
       
    1:         vec = Vec2D(2.5, 6)
    1:         expected = 6.5
    1:         self.assertEqual(abs(vec), expected)
       
    1:     def test_rotate(self):
       
               cases = [
    1:             (((0, 0), 0), (0, 0)),
    1:             (((0, 1), 90), (-1, 0)),
    1:             (((0, 1), -90), (1, 0)),
    1:             (((1, 0), 180), (-1, 0)),
    1:             (((1, 0), 360), (1, 0)),
               ]
       
    6:         for case in cases:
    5:             (vec, rot), expected = case
    5:             vec = Vec2D(*vec)
    5:             got = vec.rotate(rot)
    5:             self.assertVectorsAlmostEqual(got, expected)
       
       
    2: class TestTNavigator(VectorComparisonMixin, unittest.TestCase):
       
    1:     def setUp(self):
   16:         self.nav = turtle.TNavigator()
       
    1:     def test_goto(self):
    1:         self.nav.goto(100, -100)
    1:         self.assertAlmostEqual(self.nav.xcor(), 100)
    1:         self.assertAlmostEqual(self.nav.ycor(), -100)
       
    1:     def test_pos(self):
    1:         self.assertEqual(self.nav.pos(), self.nav._position)
    1:         self.nav.goto(100, -100)
    1:         self.assertEqual(self.nav.pos(), self.nav._position)
       
    1:     def test_left(self):
    1:         self.assertEqual(self.nav._orient, (1.0, 0))
    1:         self.nav.left(90)
    1:         self.assertVectorsAlmostEqual(self.nav._orient, (0.0, 1.0))
       
    1:     def test_right(self):
    1:         self.assertEqual(self.nav._orient, (1.0, 0))
    1:         self.nav.right(90)
    1:         self.assertVectorsAlmostEqual(self.nav._orient, (0, -1.0))
       
    1:     def test_reset(self):
    1:         self.nav.goto(100, -100)
    1:         self.assertAlmostEqual(self.nav.xcor(), 100)
    1:         self.assertAlmostEqual(self.nav.ycor(), -100)
    1:         self.nav.reset()
    1:         self.assertAlmostEqual(self.nav.xcor(), 0)
    1:         self.assertAlmostEqual(self.nav.ycor(), 0)
       
    1:     def test_forward(self):
    1:         self.nav.forward(150)
    1:         expected = Vec2D(150, 0)
    1:         self.assertVectorsAlmostEqual(self.nav.position(), expected)
       
    1:         self.nav.reset()
    1:         self.nav.left(90)
    1:         self.nav.forward(150)
    1:         expected = Vec2D(0, 150)
    1:         self.assertVectorsAlmostEqual(self.nav.position(), expected)
       
    1:         self.assertRaises(TypeError, self.nav.forward, 'skldjfldsk')
       
    1:     def test_backwards(self):
    1:         self.nav.back(200)
    1:         expected = Vec2D(-200, 0)
    1:         self.assertVectorsAlmostEqual(self.nav.position(), expected)
       
    1:         self.nav.reset()
    1:         self.nav.right(90)
    1:         self.nav.back(200)
    1:         expected = Vec2D(0, 200)
    1:         self.assertVectorsAlmostEqual(self.nav.position(), expected)
       
    1:     def test_distance(self):
    1:         self.nav.forward(100)
    1:         expected = 100
    1:         self.assertAlmostEqual(self.nav.distance(Vec2D(0,0)), expected)
       
    1:     def test_radians_and_degrees(self):
    1:         self.nav.left(90)
    1:         self.assertAlmostEqual(self.nav.heading(), 90)
    1:         self.nav.radians()
    1:         self.assertAlmostEqual(self.nav.heading(), 1.57079633)
    1:         self.nav.degrees()
    1:         self.assertAlmostEqual(self.nav.heading(), 90)
       
    1:     def test_towards(self):
       
               coordinates = [
                   # coordinates, expected
    1:             ((100, 0), 0.0),
    1:             ((100, 100), 45.0),
    1:             ((0, 100), 90.0),
    1:             ((-100, 100), 135.0),
    1:             ((-100, 0), 180.0),
    1:             ((-100, -100), 225.0),
    1:             ((0, -100), 270.0),
    1:             ((100, -100), 315.0),
               ]
       
    9:         for (x, y), expected in coordinates:
    8:             self.assertEqual(self.nav.towards(x, y), expected)
    8:             self.assertEqual(self.nav.towards((x, y)), expected)
    8:             self.assertEqual(self.nav.towards(Vec2D(x, y)), expected)
       
    1:     def test_heading(self):
       
    1:         self.nav.left(90)
    1:         self.assertAlmostEqual(self.nav.heading(), 90)
    1:         self.nav.left(45)
    1:         self.assertAlmostEqual(self.nav.heading(), 135)
    1:         self.nav.right(1.6)
    1:         self.assertAlmostEqual(self.nav.heading(), 133.4)
    1:         self.assertRaises(TypeError, self.nav.right, 'sdkfjdsf')
    1:         self.nav.reset()
       
    1:         rotations = [10, 20, 170, 300]
    1:         result = sum(rotations) % 360
    5:         for num in rotations:
    4:             self.nav.left(num)
    1:         self.assertEqual(self.nav.heading(), result)
    1:         self.nav.reset()
       
    1:         result = (360-sum(rotations)) % 360
    5:         for num in rotations:
    4:             self.nav.right(num)
    1:         self.assertEqual(self.nav.heading(), result)
    1:         self.nav.reset()
       
    1:         rotations = [10, 20, -170, 300, -210, 34.3, -50.2, -10, -29.98, 500]
    1:         sum_so_far = 0
   11:         for num in rotations:
   10:             if num < 0:
    5:                 self.nav.right(abs(num))
                   else:
    5:                 self.nav.left(num)
   10:             sum_so_far += num
   10:             self.assertAlmostEqual(self.nav.heading(), sum_so_far % 360)
       
    1:     def test_setheading(self):
    1:         self.nav.setheading(102.32)
    1:         self.assertAlmostEqual(self.nav.heading(), 102.32)
    1:         self.nav.setheading(-123.23)
    1:         self.assertAlmostEqual(self.nav.heading(), (-123.23) % 360)
    1:         self.nav.setheading(-1000.34)
    1:         self.assertAlmostEqual(self.nav.heading(), (-1000.34) % 360)
    1:         self.nav.setheading(300000)
    1:         self.assertAlmostEqual(self.nav.heading(), 300000%360)
       
    1:     def test_positions(self):
    1:         self.nav.forward(100)
    1:         self.nav.left(90)
    1:         self.nav.forward(-200)
    1:         self.assertVectorsAlmostEqual(self.nav.pos(), (100.0, -200.0))
       
    1:     def test_setx_and_sety(self):
    1:         self.nav.setx(-1023.2334)
    1:         self.nav.sety(193323.234)
    1:         self.assertVectorsAlmostEqual(self.nav.pos(), (-1023.2334, 193323.234))
       
    1:     def test_home(self):
    1:         self.nav.left(30)
    1:         self.nav.forward(-100000)
    1:         self.nav.home()
    1:         self.assertVectorsAlmostEqual(self.nav.pos(), (0,0))
    1:         self.assertAlmostEqual(self.nav.heading(), 0)
       
    1:     def test_distance_method(self):
    1:         self.assertAlmostEqual(self.nav.distance(30, 40), 50)
    1:         vec = Vec2D(0.22, .001)
    1:         self.assertAlmostEqual(self.nav.distance(vec), 0.22000227271553355)
    1:         another_turtle = turtle.TNavigator()
    1:         another_turtle.left(90)
    1:         another_turtle.forward(10000)
    1:         self.assertAlmostEqual(self.nav.distance(another_turtle), 10000)
       
       
    2: class TestTPen(unittest.TestCase):
       
    1:     def test_pendown_and_penup(self):
       
    1:         tpen = turtle.TPen()
       
    1:         self.assertTrue(tpen.isdown())
    1:         tpen.penup()
    1:         self.assertFalse(tpen.isdown())
    1:         tpen.pendown()
    1:         self.assertTrue(tpen.isdown())
       
    1:     def test_showturtle_hideturtle_and_isvisible(self):
       
    1:         tpen = turtle.TPen()
       
    1:         self.assertTrue(tpen.isvisible())
    1:         tpen.hideturtle()
    1:         self.assertFalse(tpen.isvisible())
    1:         tpen.showturtle()
    1:         self.assertTrue(tpen.isvisible())
       
       
    1: def test_main():
    1:     support.run_unittest(TurtleConfigTest, TestVec2D, TestTNavigator, TestTPen)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
