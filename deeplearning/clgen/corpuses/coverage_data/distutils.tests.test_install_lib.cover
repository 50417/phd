    1: """Tests for distutils.command.install_data."""
    1: import os
    1: import sys
    1: import unittest
       
    1: from distutils.command.install_lib import install_lib
    1: from distutils.extension import Extension
    1: from distutils.tests import support
    1: from distutils.errors import DistutilsOptionError
    1: from test.test_support import run_unittest
       
    2: class InstallLibTestCase(support.TempdirManager,
    1:                          support.LoggingSilencer,
    1:                          support.EnvironGuard,
    1:                          unittest.TestCase):
       
    1:     def test_finalize_options(self):
    1:         pkg_dir, dist = self.create_dist()
    1:         cmd = install_lib(dist)
       
    1:         cmd.finalize_options()
    1:         self.assertEqual(cmd.compile, 1)
    1:         self.assertEqual(cmd.optimize, 0)
       
               # optimize must be 0, 1, or 2
    1:         cmd.optimize = 'foo'
    1:         self.assertRaises(DistutilsOptionError, cmd.finalize_options)
    1:         cmd.optimize = '4'
    1:         self.assertRaises(DistutilsOptionError, cmd.finalize_options)
       
    1:         cmd.optimize = '2'
    1:         cmd.finalize_options()
    1:         self.assertEqual(cmd.optimize, 2)
       
    1:     def _setup_byte_compile(self):
    1:         pkg_dir, dist = self.create_dist()
    1:         cmd = install_lib(dist)
    1:         cmd.compile = cmd.optimize = 1
       
    1:         f = os.path.join(pkg_dir, 'foo.py')
    1:         self.write_file(f, '# python file')
    1:         cmd.byte_compile([f])
    1:         return pkg_dir
       
    1:     @unittest.skipIf(sys.dont_write_bytecode, 'byte-compile not enabled')
           def test_byte_compile(self):
    1:         pkg_dir = self._setup_byte_compile()
    1:         if sys.flags.optimize < 1:
    1:             self.assertTrue(os.path.exists(os.path.join(pkg_dir, 'foo.pyc')))
               else:
>>>>>>             self.assertTrue(os.path.exists(os.path.join(pkg_dir, 'foo.pyo')))
       
    1:     def test_get_outputs(self):
    1:         pkg_dir, dist = self.create_dist()
    1:         cmd = install_lib(dist)
       
               # setting up a dist environment
    1:         cmd.compile = cmd.optimize = 1
    1:         cmd.install_dir = pkg_dir
    1:         f = os.path.join(pkg_dir, 'foo.py')
    1:         self.write_file(f, '# python file')
    1:         cmd.distribution.py_modules = [pkg_dir]
    1:         cmd.distribution.ext_modules = [Extension('foo', ['xxx'])]
    1:         cmd.distribution.packages = [pkg_dir]
    1:         cmd.distribution.script_name = 'setup.py'
       
               # get_output should return 4 elements
    1:         self.assertGreaterEqual(len(cmd.get_outputs()), 2)
       
    1:     def test_get_inputs(self):
    1:         pkg_dir, dist = self.create_dist()
    1:         cmd = install_lib(dist)
       
               # setting up a dist environment
    1:         cmd.compile = cmd.optimize = 1
    1:         cmd.install_dir = pkg_dir
    1:         f = os.path.join(pkg_dir, 'foo.py')
    1:         self.write_file(f, '# python file')
    1:         cmd.distribution.py_modules = [pkg_dir]
    1:         cmd.distribution.ext_modules = [Extension('foo', ['xxx'])]
    1:         cmd.distribution.packages = [pkg_dir]
    1:         cmd.distribution.script_name = 'setup.py'
       
               # get_input should return 2 elements
    1:         self.assertEqual(len(cmd.get_inputs()), 2)
       
    1:     def test_dont_write_bytecode(self):
               # makes sure byte_compile is not used
    1:         pkg_dir, dist = self.create_dist()
    1:         cmd = install_lib(dist)
    1:         cmd.compile = 1
    1:         cmd.optimize = 1
       
    1:         old_dont_write_bytecode = sys.dont_write_bytecode
    1:         sys.dont_write_bytecode = True
    1:         try:
    1:             cmd.byte_compile([])
               finally:
    1:             sys.dont_write_bytecode = old_dont_write_bytecode
       
    1:         self.assertIn('byte-compiling is disabled', self.logs[0][1])
       
    1: def test_suite():
    1:     return unittest.makeSuite(InstallLibTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     run_unittest(test_suite())
