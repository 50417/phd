       # test asynchat
       
    1: import errno
    1: import asyncore
    1: import asynchat
    1: import socket
    1: import time
    1: import unittest
    1: import sys
    1: from test import test_support
    1: try:
    1:     import threading
>>>>>> except ImportError:
>>>>>>     threading = None
       
    1: HOST = test_support.HOST
    1: SERVER_QUIT = 'QUIT\n'
       
    1: if threading:
    2:     class echo_server(threading.Thread):
               # parameter to determine the number of bytes passed back to the
               # client each send
    1:         chunk_size = 1
       
    1:         def __init__(self, event):
   34:             threading.Thread.__init__(self)
   34:             self.event = event
   34:             self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   34:             self.port = test_support.bind_port(self.sock)
                   # This will be set if the client wants us to wait before echoing data
                   # back.
   34:             self.start_resend_event = None
       
    1:         def run(self):
   34:             self.sock.listen(1)
   34:             self.event.set()
   34:             conn, client = self.sock.accept()
   34:             self.buffer = ""
                   # collect data until quit message is seen
 1270:             while SERVER_QUIT not in self.buffer:
 1236:                 data = conn.recv(1)
 1236:                 if not data:
>>>>>>                     break
 1236:                 self.buffer = self.buffer + data
       
                   # remove the SERVER_QUIT message
   34:             self.buffer = self.buffer.replace(SERVER_QUIT, '')
       
   34:             if self.start_resend_event:
    2:                 self.start_resend_event.wait()
       
                   # re-send entire set of collected data
   34:             try:
                       # this may fail on some tests, such as test_close_when_done, since
                       # the client closes the channel when it's done sending
  820:                 while self.buffer:
  788:                     n = conn.send(self.buffer[:self.chunk_size])
  786:                     time.sleep(0.001)
  786:                     self.buffer = self.buffer[n:]
    2:             except:
    2:                 pass
       
   34:             conn.close()
   34:             self.sock.close()
       
    2:     class echo_client(asynchat.async_chat):
       
    1:         def __init__(self, terminator, server_port):
   34:             asynchat.async_chat.__init__(self)
   34:             self.contents = []
   34:             self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
   34:             self.connect((HOST, server_port))
   34:             self.set_terminator(terminator)
   34:             self.buffer = ''
       
    1:         def handle_connect(self):
   34:             pass
       
    1:         if sys.platform == 'darwin':
                   # select.poll returns a select.POLLHUP at the end of the tests
                   # on darwin, so just ignore it
    1:             def handle_expt(self):
>>>>>>                 pass
       
    1:         def collect_incoming_data(self, data):
  736:             self.buffer += data
       
    1:         def found_terminator(self):
   56:             self.contents.append(self.buffer)
   56:             self.buffer = ""
       
       
    1:     def start_echo_server():
   16:         event = threading.Event()
   16:         s = echo_server(event)
   16:         s.start()
   16:         event.wait()
   16:         event.clear()
   16:         time.sleep(0.01) # Give server time to start accepting.
   16:         return s, event
       
       
    2: @unittest.skipUnless(threading, 'Threading required for this test.')
    1: class TestAsynchat(unittest.TestCase):
    1:     usepoll = False
       
    1:     def setUp (self):
   20:         self._threads = test_support.threading_setup()
       
    1:     def tearDown (self):
   20:         test_support.threading_cleanup(*self._threads)
       
    1:     def line_terminator_check(self, term, server_chunk):
   18:         event = threading.Event()
   18:         s = echo_server(event)
   18:         s.chunk_size = server_chunk
   18:         s.start()
   18:         event.wait()
   18:         event.clear()
   18:         time.sleep(0.01) # Give server time to start accepting.
   18:         c = echo_client(term, s.port)
   18:         c.push("hello ")
   18:         c.push("world%s" % term)
   18:         c.push("I'm not dead yet!%s" % term)
   18:         c.push(SERVER_QUIT)
   18:         asyncore.loop(use_poll=self.usepoll, count=300, timeout=.01)
   18:         s.join()
       
   18:         self.assertEqual(c.contents, ["hello world", "I'm not dead yet!"])
       
           # the line terminator tests below check receiving variously-sized
           # chunks back from the server in order to exercise all branches of
           # async_chat.handle_read
       
    1:     def test_line_terminator1(self):
               # test one-character terminator
    8:         for l in (1,2,3):
    6:             self.line_terminator_check('\n', l)
       
    1:     def test_line_terminator2(self):
               # test two-character terminator
    8:         for l in (1,2,3):
    6:             self.line_terminator_check('\r\n', l)
       
    1:     def test_line_terminator3(self):
               # test three-character terminator
    8:         for l in (1,2,3):
    6:             self.line_terminator_check('qqq', l)
       
    1:     def numeric_terminator_check(self, termlen):
               # Try reading a fixed number of bytes
    6:         s, event = start_echo_server()
    6:         c = echo_client(termlen, s.port)
    6:         data = "hello world, I'm not dead yet!\n"
    6:         c.push(data)
    6:         c.push(SERVER_QUIT)
    6:         asyncore.loop(use_poll=self.usepoll, count=300, timeout=.01)
    6:         s.join()
       
    6:         self.assertEqual(c.contents, [data[:termlen]])
       
    1:     def test_numeric_terminator1(self):
               # check that ints & longs both work (since type is
               # explicitly checked in async_chat.handle_read)
    2:         self.numeric_terminator_check(1)
    2:         self.numeric_terminator_check(1L)
       
    1:     def test_numeric_terminator2(self):
    2:         self.numeric_terminator_check(6L)
       
    1:     def test_none_terminator(self):
               # Try reading a fixed number of bytes
    2:         s, event = start_echo_server()
    2:         c = echo_client(None, s.port)
    2:         data = "hello world, I'm not dead yet!\n"
    2:         c.push(data)
    2:         c.push(SERVER_QUIT)
    2:         asyncore.loop(use_poll=self.usepoll, count=300, timeout=.01)
    2:         s.join()
       
    2:         self.assertEqual(c.contents, [])
    2:         self.assertEqual(c.buffer, data)
       
    1:     def test_simple_producer(self):
    2:         s, event = start_echo_server()
    2:         c = echo_client('\n', s.port)
    2:         data = "hello world\nI'm not dead yet!\n"
    2:         p = asynchat.simple_producer(data+SERVER_QUIT, buffer_size=8)
    2:         c.push_with_producer(p)
    2:         asyncore.loop(use_poll=self.usepoll, count=300, timeout=.01)
    2:         s.join()
       
    2:         self.assertEqual(c.contents, ["hello world", "I'm not dead yet!"])
       
    1:     def test_string_producer(self):
    2:         s, event = start_echo_server()
    2:         c = echo_client('\n', s.port)
    2:         data = "hello world\nI'm not dead yet!\n"
    2:         c.push_with_producer(data+SERVER_QUIT)
    2:         asyncore.loop(use_poll=self.usepoll, count=300, timeout=.01)
    2:         s.join()
       
    2:         self.assertEqual(c.contents, ["hello world", "I'm not dead yet!"])
       
    1:     def test_empty_line(self):
               # checks that empty lines are handled correctly
    2:         s, event = start_echo_server()
    2:         c = echo_client('\n', s.port)
    2:         c.push("hello world\n\nI'm not dead yet!\n")
    2:         c.push(SERVER_QUIT)
    2:         asyncore.loop(use_poll=self.usepoll, count=300, timeout=.01)
    2:         s.join()
       
    2:         self.assertEqual(c.contents, ["hello world", "", "I'm not dead yet!"])
       
    1:     def test_close_when_done(self):
    2:         s, event = start_echo_server()
    2:         s.start_resend_event = threading.Event()
    2:         c = echo_client('\n', s.port)
    2:         c.push("hello world\nI'm not dead yet!\n")
    2:         c.push(SERVER_QUIT)
    2:         c.close_when_done()
    2:         asyncore.loop(use_poll=self.usepoll, count=300, timeout=.01)
       
               # Only allow the server to start echoing data back to the client after
               # the client has closed its connection.  This prevents a race condition
               # where the server echoes all of its data before we can check that it
               # got any down below.
    2:         s.start_resend_event.set()
    2:         s.join()
       
    2:         self.assertEqual(c.contents, [])
               # the server might have been able to send a byte or two back, but this
               # at least checks that it received something and didn't just fail
               # (which could still result in the client not having received anything)
    2:         self.assertTrue(len(s.buffer) > 0)
       
       
    2: class TestAsynchat_WithPoll(TestAsynchat):
    1:     usepoll = True
       
       
    2: class TestAsynchatMocked(unittest.TestCase):
    1:     def test_blockingioerror(self):
               # Issue #16133: handle_read() must ignore blocking I/O errors like
               # EAGAIN
    2:         class fake_socket:
    1:             def fileno(self):
    1:                 return 0
       
    1:             def recv(self, size):
    1:                 raise socket.error(errno.EAGAIN, "EAGAIN")
       
    2:         class MyChat(asynchat.async_chat):
    1:             def handle_error(self):
>>>>>>                 raise Exception("error")
       
    1:         sock = fake_socket()
    1:         dispatcher = MyChat()
    1:         dispatcher.set_socket(sock)
    1:         self.addCleanup(dispatcher.del_channel)
       
               # must not call handle_error()
    1:         dispatcher.handle_read()
       
       
    2: class TestHelperFunctions(unittest.TestCase):
    1:     def test_find_prefix_at_end(self):
    1:         self.assertEqual(asynchat.find_prefix_at_end("qwerty\r", "\r\n"), 1)
    1:         self.assertEqual(asynchat.find_prefix_at_end("qwertydkjf", "\r\n"), 0)
       
    2: class TestFifo(unittest.TestCase):
    1:     def test_basic(self):
    1:         f = asynchat.fifo()
    1:         f.push(7)
    1:         f.push('a')
    1:         self.assertEqual(len(f), 2)
    1:         self.assertEqual(f.first(), 7)
    1:         self.assertEqual(f.pop(), (1, 7))
    1:         self.assertEqual(len(f), 1)
    1:         self.assertEqual(f.first(), 'a')
    1:         self.assertEqual(f.is_empty(), False)
    1:         self.assertEqual(f.pop(), (1, 'a'))
    1:         self.assertEqual(len(f), 0)
    1:         self.assertEqual(f.is_empty(), True)
    1:         self.assertEqual(f.pop(), (0, None))
       
    1:     def test_given_list(self):
    1:         f = asynchat.fifo(['x', 17, 3])
    1:         self.assertEqual(len(f), 3)
    1:         self.assertEqual(f.pop(), (1, 'x'))
    1:         self.assertEqual(f.pop(), (1, 17))
    1:         self.assertEqual(f.pop(), (1, 3))
    1:         self.assertEqual(f.pop(), (0, None))
       
       
    1: def test_main(verbose=None):
    1:     test_support.run_unittest(TestAsynchat, TestAsynchat_WithPoll,
    1:                               TestAsynchatMocked,
    1:                               TestHelperFunctions, TestFifo)
       
    1: if __name__ == "__main__":
>>>>>>     test_main(verbose=True)
