       # !/usr/bin/env python
    1: """Guess which db package to use to open a db file."""
       
    1: import os
    1: import struct
    1: import sys
       
    1: try:
    1:     import dbm
    1:     _dbmerror = dbm.error
>>>>>> except ImportError:
>>>>>>     dbm = None
           # just some sort of valid exception which might be raised in the
           # dbm test
>>>>>>     _dbmerror = IOError
       
    1: def whichdb(filename):
           """Guess which db package to use to open a db file.
       
           Return values:
       
           - None if the database file can't be read;
           - empty string if the file can be read but can't be recognized
           - the module name (e.g. "dbm" or "gdbm") if recognized.
       
           Importing the given module may still fail, and opening the
           database using that module may still fail.
           """
       
           # Check for dbm first -- this has a .pag and a .dir file
   94:     try:
   94:         f = open(filename + os.extsep + "pag", "rb")
>>>>>>         f.close()
               # dbm linked with gdbm on OS/2 doesn't have .dir file
>>>>>>         if not (dbm.library == "GNU gdbm" and sys.platform == "os2emx"):
>>>>>>             f = open(filename + os.extsep + "dir", "rb")
>>>>>>             f.close()
>>>>>>         return "dbm"
   94:     except IOError:
               # some dbm emulations based on Berkeley DB generate a .db file
               # some do not, but they should be caught by the dbhash checks
   94:         try:
   94:             f = open(filename + os.extsep + "db", "rb")
    2:             f.close()
                   # guarantee we can actually open the file using dbm
                   # kind of overkill, but since we are dealing with emulations
                   # it seems like a prudent step
    2:             if dbm is not None:
    2:                 d = dbm.open(filename)
    2:                 d.close()
    2:                 return "dbm"
   92:         except (IOError, _dbmerror):
   92:             pass
       
           # Check for dumbdbm next -- this has a .dir and a .dat file
   92:     try:
               # First check for presence of files
   92:         os.stat(filename + os.extsep + "dat")
    2:         size = os.stat(filename + os.extsep + "dir").st_size
               # dumbdbm files with no keys are empty
    2:         if size == 0:
    1:             return "dumbdbm"
    1:         f = open(filename + os.extsep + "dir", "rb")
    1:         try:
    1:             if f.read(1) in ("'", '"'):
    1:                 return "dumbdbm"
               finally:
    1:             f.close()
   90:     except (OSError, IOError):
   90:         pass
       
           # See if the file exists, return None if not
   90:     try:
   90:         f = open(filename, "rb")
   85:     except IOError:
   85:         return None
       
           # Read the start of the file -- the magic number
    5:     s16 = f.read(16)
    5:     f.close()
    5:     s = s16[0:4]
       
           # Return "" if not at least 4 bytes
    5:     if len(s) != 4:
>>>>>>         return ""
       
           # Convert to 4-byte int in native byte order -- return "" if impossible
    5:     try:
    5:         (magic,) = struct.unpack("=l", s)
>>>>>>     except struct.error:
>>>>>>         return ""
       
           # Check for GNU dbm
    5:     if magic in (0x13579ace, 0x13579acd, 0x13579acf):
>>>>>>         return "gdbm"
       
           # Check for old Berkeley db hash file format v2
    5:     if magic in (0x00061561, 0x61150600):
>>>>>>         return "bsddb185"
       
           # Later versions of Berkeley db hash file have a 12-byte pad in
           # front of the file type
    5:     try:
    5:         (magic,) = struct.unpack("=l", s16[-4:])
>>>>>>     except struct.error:
>>>>>>         return ""
       
           # Check for BSD hash
    5:     if magic in (0x00061561, 0x61150600):
    5:         return "dbhash"
       
           # Unknown
>>>>>>     return ""
       
    1: if __name__ == "__main__":
>>>>>>     for filename in sys.argv[1:]:
>>>>>>         print whichdb(filename) or "UNKNOWN", filename
