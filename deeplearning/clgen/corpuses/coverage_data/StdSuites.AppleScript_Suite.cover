       """Suite AppleScript Suite: Standard terms for AppleScript
       Level 1, version 1
       
       Generated from /Volumes/Sap/System Folder/Extensions/AppleScript
       AETE/AEUT resource version 1/0, language 0, script 0
    1: """
       
    1: import aetools
    1: import MacOS
       
    1: _code = 'ascr'
       
    2: class AppleScript_Suite_Events:
       
    1:     def _26_(self, _object, _attributes={}, **_arguments):
               """&: Concatenation
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'ccat'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def _2a_(self, _object, _attributes={}, **_arguments):
               """*: Multiplication
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = '*   '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def _2b_(self, _object, _attributes={}, **_arguments):
               """+: Addition
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = '+   '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def _2d_(self, _object, _attributes={}, **_arguments):
               """-: Subtraction
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = '-   '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def _3c_(self, _object, _attributes={}, **_arguments):
               """<: Less than
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = '<   '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def _3d_(self, _object, _attributes={}, **_arguments):
               """=: Equality
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = '=   '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def _3e_(self, _object, _attributes={}, **_arguments):
               """>: Greater than
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = '>   '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_Call_a5_subroutine = {
    1:         'at' : 'at  ',
    1:         'from_' : 'from',
    1:         'for_' : 'for ',
    1:         'to' : 'to  ',
    1:         'thru' : 'thru',
    1:         'through' : 'thgh',
    1:         'by' : 'by  ',
    1:         'on' : 'on  ',
    1:         'into' : 'into',
    1:         'onto' : 'onto',
    1:         'between' : 'btwn',
    1:         'against' : 'agst',
    1:         'out_of' : 'outo',
    1:         'instead_of' : 'isto',
    1:         'aside_from' : 'asdf',
    1:         'around' : 'arnd',
    1:         'beside' : 'bsid',
    1:         'beneath' : 'bnth',
    1:         'under' : 'undr',
    1:         'over' : 'over',
    1:         'above' : 'abve',
    1:         'below' : 'belw',
    1:         'apart_from' : 'aprt',
    1:         'about' : 'abou',
    1:         'since' : 'snce',
    1:         'given' : 'givn',
    1:         'with' : 'with',
    1:         'without' : 'wout',
           }
       
    1:     def Call_a5_subroutine(self, _object=None, _attributes={}, **_arguments):
               """Call\xa5subroutine: A subroutine call
               Required argument: anything
               Keyword argument at: a preposition
               Keyword argument from_: a preposition
               Keyword argument for_: a preposition
               Keyword argument to: a preposition
               Keyword argument thru: a preposition
               Keyword argument through: a preposition
               Keyword argument by: a preposition
               Keyword argument on: a preposition
               Keyword argument into: a preposition
               Keyword argument onto: a preposition
               Keyword argument between: a preposition
               Keyword argument against: a preposition
               Keyword argument out_of: a preposition
               Keyword argument instead_of: a preposition
               Keyword argument aside_from: a preposition
               Keyword argument around: a preposition
               Keyword argument beside: a preposition
               Keyword argument beneath: a preposition
               Keyword argument under: a preposition
               Keyword argument over: a preposition
               Keyword argument above: a preposition
               Keyword argument below: a preposition
               Keyword argument apart_from: a preposition
               Keyword argument about: a preposition
               Keyword argument since: a preposition
               Keyword argument given: parameter:value pairs, comma-separated
               Keyword argument with: formal parameter set to true if matching actual parameter is provided
               Keyword argument without: formal parameter set to false if matching actual parmeter is provided
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'psbr'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_Call_a5_subroutine)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def _5e_(self, _object, _attributes={}, **_arguments):
               """^: Exponentiation
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = '^   '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def activate(self, _no_object=None, _attributes={}, **_arguments):
               """activate: Bring the targeted application program to the front
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'misc'
>>>>>>         _subcode = 'actv'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def and_(self, _object, _attributes={}, **_arguments):
               """and: Logical conjunction
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'AND '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def as_(self, _object, _attributes={}, **_arguments):
               """as: Coercion
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'coer'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def contains(self, _object, _attributes={}, **_arguments):
               """contains: Containment
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'cont'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def div(self, _object, _attributes={}, **_arguments):
               """div: Quotient
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'div '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def end_tell(self, _no_object=None, _attributes={}, **_arguments):
               """end tell: Record or log an \xd4end tell\xd5 statement
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'tend'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def ends_with(self, _object, _attributes={}, **_arguments):
               """ends with: Ends with
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'ends'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_error = {
    1:         'number' : 'errn',
    1:         'partial_result' : 'ptlr',
    1:         'from_' : 'erob',
    1:         'to' : 'errt',
           }
       
    1:     def error(self, _object=None, _attributes={}, **_arguments):
               """error: Raise an error
               Required argument: anything
               Keyword argument number: an error number
               Keyword argument partial_result: any partial result occurring before the error
               Keyword argument from_: the object that caused the error
               Keyword argument to: the desired class for a failed coercion
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'err '
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_error)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def idle(self, _no_object=None, _attributes={}, **_arguments):
               """idle: Sent to a script application when it is idle
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: the number of seconds to wait for next idle event
               """
>>>>>>         _code = 'misc'
>>>>>>         _subcode = 'idle'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def launch(self, _no_object=None, _attributes={}, **_arguments):
               """launch: Start an application for scripting
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'noop'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def log(self, _object, _attributes={}, **_arguments):
               """log: Cause a comment to be logged
               Required argument: undocumented, typecode 'TEXT'
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'cmnt'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def mod(self, _object, _attributes={}, **_arguments):
               """mod: Remainder
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'mod '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def negate(self, _object, _attributes={}, **_arguments):
               """negate: Numeric negation
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'neg '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def not_(self, _object, _attributes={}, **_arguments):
               """not: Logical negation
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'NOT '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def or_(self, _object, _attributes={}, **_arguments):
               """or: Logical disjunction
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'OR  '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def start_log(self, _no_object=None, _attributes={}, **_arguments):
               """start log: Start event logging in the script editor
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'ToyS'
>>>>>>         _subcode = 'log1'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def starts_with(self, _object, _attributes={}, **_arguments):
               """starts with: Starts with
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'bgwt'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def stop_log(self, _no_object=None, _attributes={}, **_arguments):
               """stop log: Stop event logging in the script editor
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'ToyS'
>>>>>>         _subcode = 'log0'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def tell(self, _no_object=None, _attributes={}, **_arguments):
               """tell: Record or log a \xd4tell\xd5 statement
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = 'tell'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def _ad_(self, _object, _attributes={}, **_arguments):
               """\xad: Inequality
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = '\xad   '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def _b2_(self, _object, _attributes={}, **_arguments):
               """\xb2: Less than or equal to
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = '<=  '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def _b3_(self, _object, _attributes={}, **_arguments):
               """\xb3: Greater than or equal to
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = '>=  '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def _d6_(self, _object, _attributes={}, **_arguments):
               """\xd6: Division
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: anything
               """
>>>>>>         _code = 'ascr'
>>>>>>         _subcode = '/   '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
       
    2: class anything(aetools.ComponentItem):
    1:     """anything - any class or reference """
    1:     want = '****'
       
    2: class pictures(aetools.ComponentItem):
    1:     """pictures -  """
    1:     want = 'PICT'
       
    1: picture = pictures
       
    2: class styled_text(aetools.ComponentItem):
    1:     """styled text - text with font, size, and style information """
    1:     want = 'STXT'
       
    1: styled_text = styled_text
       
    2: class strings(aetools.ComponentItem):
    1:     """strings -  """
    1:     want = 'TEXT'
       
    1: string = strings
       
    2: class alias(aetools.ComponentItem):
    1:     """alias - a file on a disk or server.  The file must exist when you check the syntax of your script. """
    1:     want = 'alis'
    2: class _Prop_POSIX_path(aetools.NProperty):
    1:     """POSIX path - the POSIX path of the file """
    1:     which = 'psxp'
    1:     want = 'TEXT'
       
    1: aliases = alias
       
    2: class April(aetools.ComponentItem):
    1:     """April - the month of April """
    1:     want = 'apr '
       
    2: class August(aetools.ComponentItem):
    1:     """August - the month of August """
    1:     want = 'aug '
       
    2: class booleans(aetools.ComponentItem):
    1:     """booleans -  """
    1:     want = 'bool'
       
    1: boolean = booleans
       
    2: class RGB_colors(aetools.ComponentItem):
    1:     """RGB colors -  """
    1:     want = 'cRGB'
       
    1: RGB_color = RGB_colors
       
    2: class application(aetools.ComponentItem):
    1:     """application - specifies global properties of AppleScript """
    1:     want = 'capp'
    2: class _Prop_AppleScript(aetools.NProperty):
    1:     """AppleScript - the top-level script object """
    1:     which = 'ascr'
    1:     want = 'scpt'
    1: AppleScript = _Prop_AppleScript()
    2: class _Prop_days(aetools.NProperty):
    1:     """days - the number of seconds in a day """
    1:     which = 'days'
    1:     want = 'long'
    1: days = _Prop_days()
    2: class _Prop_hours(aetools.NProperty):
    1:     """hours - the number of seconds in an hour """
    1:     which = 'hour'
    1:     want = 'long'
    1: hours = _Prop_hours()
    2: class _Prop_minutes(aetools.NProperty):
    1:     """minutes - the number of seconds in a minute """
    1:     which = 'min '
    1:     want = 'long'
    1: minutes = _Prop_minutes()
    2: class _Prop_pi(aetools.NProperty):
    1:     """pi - the constant pi """
    1:     which = 'pi  '
    1:     want = 'doub'
    1: pi = _Prop_pi()
    2: class _Prop_print_depth(aetools.NProperty):
    1:     """print depth - the maximum depth to print """
    1:     which = 'prdp'
    1:     want = 'long'
    1: print_depth = _Prop_print_depth()
    2: class _Prop_print_length(aetools.NProperty):
    1:     """print length - the maximum length to print """
    1:     which = 'prln'
    1:     want = 'long'
    1: print_length = _Prop_print_length()
    2: class _Prop_result(aetools.NProperty):
    1:     """result - the last result of evaluation """
    1:     which = 'rslt'
    1:     want = '****'
    1: result = _Prop_result()
    2: class _Prop_return_(aetools.NProperty):
    1:     """return - a return character """
    1:     which = 'ret '
    1:     want = 'cha '
    1: return_ = _Prop_return_()
    2: class _Prop_space(aetools.NProperty):
    1:     """space - a space character """
    1:     which = 'spac'
    1:     want = 'cha '
    1: space = _Prop_space()
    2: class _Prop_tab(aetools.NProperty):
    1:     """tab - a tab character """
    1:     which = 'tab '
    1:     want = 'cha '
    1: tab = _Prop_tab()
    2: class _Prop_text_item_delimiters(aetools.NProperty):
    1:     """text item delimiters - the text item delimiters of a string """
    1:     which = 'txdl'
    1:     want = 'list'
    1: text_item_delimiters = _Prop_text_item_delimiters()
    2: class _Prop_weeks(aetools.NProperty):
    1:     """weeks - the number of seconds in a week """
    1:     which = 'week'
    1:     want = 'long'
    1: weeks = _Prop_weeks()
       
    1: applications = application
       
    1: app = application
       
    2: class upper_case(aetools.ComponentItem):
    1:     """upper case - Text with lower case converted to upper case """
    1:     want = 'case'
       
    2: class cubic_centimeters(aetools.ComponentItem):
    1:     """cubic centimeters - a volume measurement in SI cubic centimeters """
    1:     want = 'ccmt'
       
    1: cubic_centimetres = cubic_centimeters
       
    2: class cubic_feet(aetools.ComponentItem):
    1:     """cubic feet - a volume measurement in Imperial cubic feet """
    1:     want = 'cfet'
       
    2: class characters(aetools.ComponentItem):
    1:     """characters -  """
    1:     want = 'cha '
       
    1: character = characters
       
    2: class writing_code_info(aetools.ComponentItem):
    1:     """writing code info - script code and language code of text run """
    1:     want = 'citl'
    2: class _Prop_language_code(aetools.NProperty):
    1:     """language code - the language code for the text """
    1:     which = 'plcd'
    1:     want = 'shor'
    2: class _Prop_script_code(aetools.NProperty):
    1:     """script code - the script code for the text """
    1:     which = 'pscd'
    1:     want = 'shor'
       
    1: writing_code_infos = writing_code_info
       
    2: class text_items(aetools.ComponentItem):
    1:     """text items -  """
    1:     want = 'citm'
       
    1: text_item = text_items
       
    2: class cubic_meters(aetools.ComponentItem):
    1:     """cubic meters - a volume measurement in SI cubic meters """
    1:     want = 'cmet'
       
    1: cubic_metres = cubic_meters
       
    2: class centimeters(aetools.ComponentItem):
    1:     """centimeters - a distance measurement in SI centimeters """
    1:     want = 'cmtr'
       
    1: centimetres = centimeters
       
    2: class item(aetools.ComponentItem):
    1:     """item - An item of any type """
    1:     want = 'cobj'
    2: class _Prop_id(aetools.NProperty):
    1:     """id - the unique ID number of this object """
    1:     which = 'ID  '
    1:     want = 'long'
       
    1: items = item
       
    2: class C_strings(aetools.ComponentItem):
    1:     """C strings -  """
    1:     want = 'cstr'
       
    1: C_string = C_strings
       
    2: class text(aetools.ComponentItem):
    1:     """text - text with language and style information """
    1:     want = 'ctxt'
       
    2: class cubic_inches(aetools.ComponentItem):
    1:     """cubic inches - a volume measurement in Imperial cubic inches """
    1:     want = 'cuin'
       
    2: class cubic_yards(aetools.ComponentItem):
    1:     """cubic yards - a distance measurement in Imperial cubic yards """
    1:     want = 'cyrd'
       
    2: class December(aetools.ComponentItem):
    1:     """December - the month of December """
    1:     want = 'dec '
       
    2: class degrees_Celsius(aetools.ComponentItem):
    1:     """degrees Celsius - a temperature measurement in SI degrees Celsius """
    1:     want = 'degc'
       
    2: class degrees_Fahrenheit(aetools.ComponentItem):
    1:     """degrees Fahrenheit - a temperature measurement in degrees Fahrenheit """
    1:     want = 'degf'
       
    2: class degrees_Kelvin(aetools.ComponentItem):
    1:     """degrees Kelvin - a temperature measurement in degrees Kelvin """
    1:     want = 'degk'
       
    2: class reals(aetools.ComponentItem):
    1:     """reals -  """
    1:     want = 'doub'
       
    1: real = reals
       
    2: class encoded_strings(aetools.ComponentItem):
    1:     """encoded strings -  """
    1:     want = 'encs'
       
    1: encoded_string = encoded_strings
       
    2: class constants(aetools.ComponentItem):
    1:     """constants -  """
    1:     want = 'enum'
       
    1: constant = constants
       
    2: class events(aetools.ComponentItem):
    1:     """events -  """
    1:     want = 'evnt'
       
    1: event = events
       
    2: class February(aetools.ComponentItem):
    1:     """February - the month of February """
    1:     want = 'feb '
       
    2: class feet(aetools.ComponentItem):
    1:     """feet - a distance measurement in Imperial feet """
    1:     want = 'feet'
       
    2: class Friday(aetools.ComponentItem):
    1:     """Friday - Friday """
    1:     want = 'fri '
       
    2: class file_specification(aetools.ComponentItem):
    1:     """file specification - a file specification as used by the operating system """
    1:     want = 'fss '
       
    1: file_specifications = file_specification
       
    2: class gallons(aetools.ComponentItem):
    1:     """gallons - a volume measurement in Imperial gallons """
    1:     want = 'galn'
       
    2: class grams(aetools.ComponentItem):
    1:     """grams - a mass measurement in SI meters """
    1:     want = 'gram'
       
    2: class handlers(aetools.ComponentItem):
    1:     """handlers -  """
    1:     want = 'hand'
       
    1: handler = handlers
       
    2: class inches(aetools.ComponentItem):
    1:     """inches - a distance measurement in Imperial inches """
    1:     want = 'inch'
       
    2: class international_text(aetools.ComponentItem):
    1:     """international text - text that begins with a writing code """
    1:     want = 'itxt'
       
    1: international_text = international_text
       
    2: class January(aetools.ComponentItem):
    1:     """January - the month of January """
    1:     want = 'jan '
       
    2: class July(aetools.ComponentItem):
    1:     """July - the month of July """
    1:     want = 'jul '
       
    2: class June(aetools.ComponentItem):
    1:     """June - the month of June """
    1:     want = 'jun '
       
    2: class reference_forms(aetools.ComponentItem):
    1:     """reference forms -  """
    1:     want = 'kfrm'
       
    1: reference_form = reference_forms
       
    2: class kilograms(aetools.ComponentItem):
    1:     """kilograms - a mass measurement in SI kilograms """
    1:     want = 'kgrm'
       
    2: class kilometers(aetools.ComponentItem):
    1:     """kilometers - a distance measurement in SI kilometers """
    1:     want = 'kmtr'
       
    1: kilometres = kilometers
       
    2: class keystroke(aetools.ComponentItem):
    1:     """keystroke - a press of a key combination on a Macintosh keyboard """
    1:     want = 'kprs'
    2: class _Prop_key(aetools.NProperty):
    1:     """key - the character for the key was pressed (ignoring modifiers) """
    1:     which = 'kMsg'
    1:     want = 'cha '
    2: class _Prop_key_kind(aetools.NProperty):
    1:     """key kind - the kind of key that was pressed """
    1:     which = 'kknd'
    1:     want = 'ekst'
    2: class _Prop_modifiers(aetools.NProperty):
    1:     """modifiers - the modifier keys pressed in combination """
    1:     which = 'kMod'
    1:     want = 'eMds'
       
    1: keystrokes = keystroke
       
    2: class pounds(aetools.ComponentItem):
    1:     """pounds - a weight measurement in SI meters """
    1:     want = 'lbs '
       
    2: class date(aetools.ComponentItem):
    1:     """date - Absolute date and time values """
    1:     want = 'ldt '
    2: class _Prop_date_string(aetools.NProperty):
    1:     """date string - the date portion of a date-time value as text """
    1:     which = 'dstr'
    1:     want = 'TEXT'
    2: class _Prop_day(aetools.NProperty):
    1:     """day - the day of the month of a date """
    1:     which = 'day '
    1:     want = 'long'
    2: class _Prop_month(aetools.NProperty):
    1:     """month - the month of a date """
    1:     which = 'mnth'
    1:     want = 'mnth'
    2: class _Prop_time(aetools.NProperty):
    1:     """time - the time since midnight of a date """
    1:     which = 'time'
    1:     want = 'long'
    2: class _Prop_time_string(aetools.NProperty):
    1:     """time string - the time portion of a date-time value as text """
    1:     which = 'tstr'
    1:     want = 'TEXT'
    2: class _Prop_weekday(aetools.NProperty):
    1:     """weekday - the day of a week of a date """
    1:     which = 'wkdy'
    1:     want = 'wkdy'
    2: class _Prop_year(aetools.NProperty):
    1:     """year - the year of a date """
    1:     which = 'year'
    1:     want = 'long'
       
    1: dates = date
       
    2: class list(aetools.ComponentItem):
    1:     """list - An ordered collection of items """
    1:     want = 'list'
    2: class _Prop_length(aetools.NProperty):
    1:     """length - the length of a list """
    1:     which = 'leng'
    1:     want = 'long'
    2: class _Prop_rest(aetools.NProperty):
    1:     """rest - all items of the list excluding first """
    1:     which = 'rest'
    1:     want = 'list'
    2: class _Prop_reverse(aetools.NProperty):
    1:     """reverse - the items of the list in reverse order """
    1:     which = 'rvse'
    1:     want = 'list'
       
    1: lists = list
       
    2: class liters(aetools.ComponentItem):
    1:     """liters - a volume measurement in SI liters """
    1:     want = 'litr'
       
    1: litres = liters
       
    2: class linked_list(aetools.ComponentItem):
    1:     """linked list - An ordered collection of items """
    1:     want = 'llst'
       
    1: linked_lists = linked_list
       
    2: class integers(aetools.ComponentItem):
    1:     """integers -  """
    1:     want = 'long'
       
    1: integer = integers
       
    2: class list_or_record(aetools.ComponentItem):
    1:     """list or record - a list or record """
    1:     want = 'lr  '
       
    2: class list_2c__record_or_text(aetools.ComponentItem):
    1:     """list, record or text - a list, record or text """
    1:     want = 'lrs '
       
    2: class list_or_string(aetools.ComponentItem):
    1:     """list or string - a list or string """
    1:     want = 'ls  '
       
    2: class machines(aetools.ComponentItem):
    1:     """machines -  """
    1:     want = 'mach'
       
    1: machine = machines
       
    2: class March(aetools.ComponentItem):
    1:     """March - the month of March """
    1:     want = 'mar '
       
    2: class May(aetools.ComponentItem):
    1:     """May - the month of May """
    1:     want = 'may '
       
    2: class meters(aetools.ComponentItem):
    1:     """meters - a distance measurement in SI meters """
    1:     want = 'metr'
       
    1: metres = meters
       
    2: class miles(aetools.ComponentItem):
    1:     """miles - a distance measurement in Imperial miles """
    1:     want = 'mile'
       
    2: class months(aetools.ComponentItem):
    1:     """months -  """
    1:     want = 'mnth'
       
    1: month = months
       
    2: class Monday(aetools.ComponentItem):
    1:     """Monday - Monday """
    1:     want = 'mon '
       
    2: class missing_values(aetools.ComponentItem):
    1:     """missing values -  """
    1:     want = 'msng'
       
    1: missing_value = missing_values
       
    2: class number_or_date(aetools.ComponentItem):
    1:     """number or date - a number or date """
    1:     want = 'nd  '
       
    2: class number_2c__date_or_text(aetools.ComponentItem):
    1:     """number, date or text - a number, date or text """
    1:     want = 'nds '
       
    2: class numbers(aetools.ComponentItem):
    1:     """numbers -  """
    1:     want = 'nmbr'
       
    1: number = numbers
       
    2: class November(aetools.ComponentItem):
    1:     """November - the month of November """
    1:     want = 'nov '
       
    2: class number_or_string(aetools.ComponentItem):
    1:     """number or string - a number or string """
    1:     want = 'ns  '
       
    2: class references(aetools.ComponentItem):
    1:     """references -  """
    1:     want = 'obj '
       
    1: reference = references
       
    2: class October(aetools.ComponentItem):
    1:     """October - the month of October """
    1:     want = 'oct '
       
    2: class ounces(aetools.ComponentItem):
    1:     """ounces - a weight measurement in SI meters """
    1:     want = 'ozs '
       
    2: class class_(aetools.ComponentItem):
    1:     """class - the type of a value """
    1:     want = 'pcls'
    2: class _Prop__3c_Inheritance_3e_(aetools.NProperty):
    1:     """<Inheritance> - inherits some of its properties from this class """
    1:     which = 'c@#^'
    1:     want = 'type'
       
    1: classes = class_
       
    2: class prepositions(aetools.ComponentItem):
    1:     """prepositions -  """
    1:     want = 'prep'
       
    1: preposition = prepositions
       
    2: class properties(aetools.ComponentItem):
    1:     """properties -  """
    1:     want = 'prop'
       
    1: property = properties
       
    2: class writing_code(aetools.ComponentItem):
    1:     """writing code - codes that identify the language and script system """
    1:     want = 'psct'
       
    2: class Pascal_strings(aetools.ComponentItem):
    1:     """Pascal strings -  """
    1:     want = 'pstr'
       
    1: Pascal_string = Pascal_strings
       
    2: class quarts(aetools.ComponentItem):
    1:     """quarts - a volume measurement in Imperial quarts """
    1:     want = 'qrts'
       
    2: class data(aetools.ComponentItem):
    1:     """data - an AppleScript raw data object """
    1:     want = 'rdat'
       
    2: class records(aetools.ComponentItem):
    1:     """records -  """
    1:     want = 'reco'
       
    1: record = records
       
    2: class Saturday(aetools.ComponentItem):
    1:     """Saturday - Saturday """
    1:     want = 'sat '
       
    2: class seconds(aetools.ComponentItem):
    1:     """seconds - more than one second """
    1:     want = 'scnd'
       
    2: class script(aetools.ComponentItem):
    1:     """script - An AppleScript script """
    1:     want = 'scpt'
    2: class _Prop_name(aetools.NProperty):
    1:     """name - the name of the script """
    1:     which = 'pnam'
    1:     want = 'TEXT'
    2: class _Prop_parent(aetools.NProperty):
    1:     """parent - its parent, i.e. the script that will handle events that this script doesn\xd5t """
    1:     which = 'pare'
    1:     want = 'scpt'
       
    1: scripts = script
       
    2: class September(aetools.ComponentItem):
    1:     """September - the month of September """
    1:     want = 'sep '
       
    2: class alias_or_string(aetools.ComponentItem):
    1:     """alias or string - an alias or string """
    1:     want = 'sf  '
       
    2: class sounds(aetools.ComponentItem):
    1:     """sounds -  """
    1:     want = 'snd '
       
    1: sound = sounds
       
    2: class square_feet(aetools.ComponentItem):
    1:     """square feet - an area measurement in Imperial square feet """
    1:     want = 'sqft'
       
    2: class square_kilometers(aetools.ComponentItem):
    1:     """square kilometers - an area measurement in SI square kilometers """
    1:     want = 'sqkm'
       
    1: square_kilometres = square_kilometers
       
    2: class square_miles(aetools.ComponentItem):
    1:     """square miles - an area measurement in Imperial square miles """
    1:     want = 'sqmi'
       
    2: class square_meters(aetools.ComponentItem):
    1:     """square meters - an area measurement in SI square meters """
    1:     want = 'sqrm'
       
    1: square_metres = square_meters
       
    2: class square_yards(aetools.ComponentItem):
    1:     """square yards - an area measurement in Imperial square yards """
    1:     want = 'sqyd'
       
    2: class styled_Clipboard_text(aetools.ComponentItem):
    1:     """styled Clipboard text - clipboard text with font, size, and style information """
    1:     want = 'styl'
       
    1: styled_Clipboard_text = styled_Clipboard_text
       
    2: class Sunday(aetools.ComponentItem):
    1:     """Sunday - Sunday """
    1:     want = 'sun '
       
    2: class styled_Unicode_text(aetools.ComponentItem):
    1:     """styled Unicode text - styled text in the Unicode format """
    1:     want = 'sutx'
       
    1: styled_Unicode_text = styled_Unicode_text
       
    2: class Thursday(aetools.ComponentItem):
    1:     """Thursday - Thursday """
    1:     want = 'thu '
       
    2: class Tuesday(aetools.ComponentItem):
    1:     """Tuesday - Tuesday """
    1:     want = 'tue '
       
    2: class type_class(aetools.ComponentItem):
    1:     """type class - the name of a particular class (or any four-character code) """
    1:     want = 'type'
       
    2: class empty_ae_name_(aetools.ComponentItem):
    1:     """ - the undefined value """
    1:     want = 'undf'
       
    2: class Unicode_text(aetools.ComponentItem):
    1:     """Unicode text - text in the Unicode format (cannot be viewed without conversion) """
    1:     want = 'utxt'
       
    1: Unicode_text = Unicode_text
       
    2: class vector(aetools.ComponentItem):
    1:     """vector - An ordered collection of items """
    1:     want = 'vect'
       
    1: vectors = vector
       
    2: class version(aetools.ComponentItem):
    1:     """version - a version value """
    1:     want = 'vers'
       
    2: class Wednesday(aetools.ComponentItem):
    1:     """Wednesday - Wednesday """
    1:     want = 'wed '
       
    2: class weekdays(aetools.ComponentItem):
    1:     """weekdays -  """
    1:     want = 'wkdy'
       
    1: weekday = weekdays
       
    2: class yards(aetools.ComponentItem):
    1:     """yards - a distance measurement in Imperial yards """
    1:     want = 'yard'
       
    2: class zones(aetools.ComponentItem):
    1:     """zones -  """
    1:     want = 'zone'
       
    1: zone = zones
    1: anything._superclassnames = []
    1: anything._privpropdict = {
       }
    1: anything._privelemdict = {
       }
    1: pictures._superclassnames = []
    1: pictures._privpropdict = {
       }
    1: pictures._privelemdict = {
       }
    1: styled_text._superclassnames = []
    1: styled_text._privpropdict = {
       }
    1: styled_text._privelemdict = {
       }
    1: styled_text._superclassnames = []
    1: styled_text._privpropdict = {
       }
    1: styled_text._privelemdict = {
       }
    1: strings._superclassnames = []
    1: strings._privpropdict = {
       }
    1: strings._privelemdict = {
       }
    1: alias._superclassnames = []
    1: alias._privpropdict = {
    1:     'POSIX_path' : _Prop_POSIX_path,
       }
    1: alias._privelemdict = {
       }
    1: April._superclassnames = []
    1: April._privpropdict = {
       }
    1: April._privelemdict = {
       }
    1: August._superclassnames = []
    1: August._privpropdict = {
       }
    1: August._privelemdict = {
       }
    1: booleans._superclassnames = []
    1: booleans._privpropdict = {
       }
    1: booleans._privelemdict = {
       }
    1: RGB_colors._superclassnames = []
    1: RGB_colors._privpropdict = {
       }
    1: RGB_colors._privelemdict = {
       }
    1: application._superclassnames = []
    1: application._privpropdict = {
    1:     'AppleScript' : _Prop_AppleScript,
    1:     'days' : _Prop_days,
    1:     'hours' : _Prop_hours,
    1:     'minutes' : _Prop_minutes,
    1:     'pi' : _Prop_pi,
    1:     'print_depth' : _Prop_print_depth,
    1:     'print_length' : _Prop_print_length,
    1:     'result' : _Prop_result,
    1:     'return_' : _Prop_return_,
    1:     'space' : _Prop_space,
    1:     'tab' : _Prop_tab,
    1:     'text_item_delimiters' : _Prop_text_item_delimiters,
    1:     'weeks' : _Prop_weeks,
       }
    1: application._privelemdict = {
       }
    1: upper_case._superclassnames = []
    1: upper_case._privpropdict = {
       }
    1: upper_case._privelemdict = {
       }
    1: cubic_centimeters._superclassnames = []
    1: cubic_centimeters._privpropdict = {
       }
    1: cubic_centimeters._privelemdict = {
       }
    1: cubic_feet._superclassnames = []
    1: cubic_feet._privpropdict = {
       }
    1: cubic_feet._privelemdict = {
       }
    1: characters._superclassnames = []
    1: characters._privpropdict = {
       }
    1: characters._privelemdict = {
       }
    1: writing_code_info._superclassnames = []
    1: writing_code_info._privpropdict = {
    1:     'language_code' : _Prop_language_code,
    1:     'script_code' : _Prop_script_code,
       }
    1: writing_code_info._privelemdict = {
       }
    1: text_items._superclassnames = []
    1: text_items._privpropdict = {
       }
    1: text_items._privelemdict = {
       }
    1: cubic_meters._superclassnames = []
    1: cubic_meters._privpropdict = {
       }
    1: cubic_meters._privelemdict = {
       }
    1: centimeters._superclassnames = []
    1: centimeters._privpropdict = {
       }
    1: centimeters._privelemdict = {
       }
    1: item._superclassnames = []
    1: item._privpropdict = {
    1:     'id' : _Prop_id,
       }
    1: item._privelemdict = {
       }
    1: C_strings._superclassnames = []
    1: C_strings._privpropdict = {
       }
    1: C_strings._privelemdict = {
       }
    1: text._superclassnames = []
    1: text._privpropdict = {
       }
    1: text._privelemdict = {
       }
    1: cubic_inches._superclassnames = []
    1: cubic_inches._privpropdict = {
       }
    1: cubic_inches._privelemdict = {
       }
    1: cubic_yards._superclassnames = []
    1: cubic_yards._privpropdict = {
       }
    1: cubic_yards._privelemdict = {
       }
    1: December._superclassnames = []
    1: December._privpropdict = {
       }
    1: December._privelemdict = {
       }
    1: degrees_Celsius._superclassnames = []
    1: degrees_Celsius._privpropdict = {
       }
    1: degrees_Celsius._privelemdict = {
       }
    1: degrees_Fahrenheit._superclassnames = []
    1: degrees_Fahrenheit._privpropdict = {
       }
    1: degrees_Fahrenheit._privelemdict = {
       }
    1: degrees_Kelvin._superclassnames = []
    1: degrees_Kelvin._privpropdict = {
       }
    1: degrees_Kelvin._privelemdict = {
       }
    1: reals._superclassnames = []
    1: reals._privpropdict = {
       }
    1: reals._privelemdict = {
       }
    1: encoded_strings._superclassnames = []
    1: encoded_strings._privpropdict = {
       }
    1: encoded_strings._privelemdict = {
       }
    1: constants._superclassnames = []
    1: constants._privpropdict = {
       }
    1: constants._privelemdict = {
       }
    1: events._superclassnames = []
    1: events._privpropdict = {
       }
    1: events._privelemdict = {
       }
    1: February._superclassnames = []
    1: February._privpropdict = {
       }
    1: February._privelemdict = {
       }
    1: feet._superclassnames = []
    1: feet._privpropdict = {
       }
    1: feet._privelemdict = {
       }
    1: Friday._superclassnames = []
    1: Friday._privpropdict = {
       }
    1: Friday._privelemdict = {
       }
    1: file_specification._superclassnames = []
    1: file_specification._privpropdict = {
    1:     'POSIX_path' : _Prop_POSIX_path,
       }
    1: file_specification._privelemdict = {
       }
    1: gallons._superclassnames = []
    1: gallons._privpropdict = {
       }
    1: gallons._privelemdict = {
       }
    1: grams._superclassnames = []
    1: grams._privpropdict = {
       }
    1: grams._privelemdict = {
       }
    1: handlers._superclassnames = []
    1: handlers._privpropdict = {
       }
    1: handlers._privelemdict = {
       }
    1: inches._superclassnames = []
    1: inches._privpropdict = {
       }
    1: inches._privelemdict = {
       }
    1: international_text._superclassnames = []
    1: international_text._privpropdict = {
       }
    1: international_text._privelemdict = {
       }
    1: international_text._superclassnames = []
    1: international_text._privpropdict = {
       }
    1: international_text._privelemdict = {
       }
    1: January._superclassnames = []
    1: January._privpropdict = {
       }
    1: January._privelemdict = {
       }
    1: July._superclassnames = []
    1: July._privpropdict = {
       }
    1: July._privelemdict = {
       }
    1: June._superclassnames = []
    1: June._privpropdict = {
       }
    1: June._privelemdict = {
       }
    1: reference_forms._superclassnames = []
    1: reference_forms._privpropdict = {
       }
    1: reference_forms._privelemdict = {
       }
    1: kilograms._superclassnames = []
    1: kilograms._privpropdict = {
       }
    1: kilograms._privelemdict = {
       }
    1: kilometers._superclassnames = []
    1: kilometers._privpropdict = {
       }
    1: kilometers._privelemdict = {
       }
    1: keystroke._superclassnames = []
    1: keystroke._privpropdict = {
    1:     'key' : _Prop_key,
    1:     'key_kind' : _Prop_key_kind,
    1:     'modifiers' : _Prop_modifiers,
       }
    1: keystroke._privelemdict = {
       }
    1: pounds._superclassnames = []
    1: pounds._privpropdict = {
       }
    1: pounds._privelemdict = {
       }
    1: date._superclassnames = []
    1: date._privpropdict = {
    1:     'date_string' : _Prop_date_string,
    1:     'day' : _Prop_day,
    1:     'month' : _Prop_month,
    1:     'time' : _Prop_time,
    1:     'time_string' : _Prop_time_string,
    1:     'weekday' : _Prop_weekday,
    1:     'year' : _Prop_year,
       }
    1: date._privelemdict = {
       }
    1: list._superclassnames = []
    1: list._privpropdict = {
    1:     'length' : _Prop_length,
    1:     'rest' : _Prop_rest,
    1:     'reverse' : _Prop_reverse,
       }
    1: list._privelemdict = {
       }
    1: liters._superclassnames = []
    1: liters._privpropdict = {
       }
    1: liters._privelemdict = {
       }
    1: linked_list._superclassnames = []
    1: linked_list._privpropdict = {
    1:     'length' : _Prop_length,
       }
    1: linked_list._privelemdict = {
       }
    1: integers._superclassnames = []
    1: integers._privpropdict = {
       }
    1: integers._privelemdict = {
       }
    1: list_or_record._superclassnames = []
    1: list_or_record._privpropdict = {
       }
    1: list_or_record._privelemdict = {
       }
    1: list_2c__record_or_text._superclassnames = []
    1: list_2c__record_or_text._privpropdict = {
       }
    1: list_2c__record_or_text._privelemdict = {
       }
    1: list_or_string._superclassnames = []
    1: list_or_string._privpropdict = {
       }
    1: list_or_string._privelemdict = {
       }
    1: machines._superclassnames = []
    1: machines._privpropdict = {
       }
    1: machines._privelemdict = {
       }
    1: March._superclassnames = []
    1: March._privpropdict = {
       }
    1: March._privelemdict = {
       }
    1: May._superclassnames = []
    1: May._privpropdict = {
       }
    1: May._privelemdict = {
       }
    1: meters._superclassnames = []
    1: meters._privpropdict = {
       }
    1: meters._privelemdict = {
       }
    1: miles._superclassnames = []
    1: miles._privpropdict = {
       }
    1: miles._privelemdict = {
       }
    1: months._superclassnames = []
    1: months._privpropdict = {
       }
    1: months._privelemdict = {
       }
    1: Monday._superclassnames = []
    1: Monday._privpropdict = {
       }
    1: Monday._privelemdict = {
       }
    1: missing_values._superclassnames = []
    1: missing_values._privpropdict = {
       }
    1: missing_values._privelemdict = {
       }
    1: number_or_date._superclassnames = []
    1: number_or_date._privpropdict = {
       }
    1: number_or_date._privelemdict = {
       }
    1: number_2c__date_or_text._superclassnames = []
    1: number_2c__date_or_text._privpropdict = {
       }
    1: number_2c__date_or_text._privelemdict = {
       }
    1: numbers._superclassnames = []
    1: numbers._privpropdict = {
       }
    1: numbers._privelemdict = {
       }
    1: November._superclassnames = []
    1: November._privpropdict = {
       }
    1: November._privelemdict = {
       }
    1: number_or_string._superclassnames = []
    1: number_or_string._privpropdict = {
       }
    1: number_or_string._privelemdict = {
       }
    1: references._superclassnames = []
    1: references._privpropdict = {
       }
    1: references._privelemdict = {
       }
    1: October._superclassnames = []
    1: October._privpropdict = {
       }
    1: October._privelemdict = {
       }
    1: ounces._superclassnames = []
    1: ounces._privpropdict = {
       }
    1: ounces._privelemdict = {
       }
    1: class_._superclassnames = ['type_class']
    1: class_._privpropdict = {
    1:     '_3c_Inheritance_3e_' : _Prop__3c_Inheritance_3e_,
       }
    1: class_._privelemdict = {
       }
    1: prepositions._superclassnames = []
    1: prepositions._privpropdict = {
       }
    1: prepositions._privelemdict = {
       }
    1: properties._superclassnames = []
    1: properties._privpropdict = {
       }
    1: properties._privelemdict = {
       }
    1: writing_code._superclassnames = []
    1: writing_code._privpropdict = {
       }
    1: writing_code._privelemdict = {
       }
    1: Pascal_strings._superclassnames = []
    1: Pascal_strings._privpropdict = {
       }
    1: Pascal_strings._privelemdict = {
       }
    1: quarts._superclassnames = []
    1: quarts._privpropdict = {
       }
    1: quarts._privelemdict = {
       }
    1: data._superclassnames = []
    1: data._privpropdict = {
       }
    1: data._privelemdict = {
       }
    1: records._superclassnames = []
    1: records._privpropdict = {
       }
    1: records._privelemdict = {
       }
    1: Saturday._superclassnames = []
    1: Saturday._privpropdict = {
       }
    1: Saturday._privelemdict = {
       }
    1: seconds._superclassnames = []
    1: seconds._privpropdict = {
       }
    1: seconds._privelemdict = {
       }
    1: script._superclassnames = []
    1: script._privpropdict = {
    1:     'name' : _Prop_name,
    1:     'parent' : _Prop_parent,
       }
    1: script._privelemdict = {
       }
    1: September._superclassnames = []
    1: September._privpropdict = {
       }
    1: September._privelemdict = {
       }
    1: alias_or_string._superclassnames = []
    1: alias_or_string._privpropdict = {
       }
    1: alias_or_string._privelemdict = {
       }
    1: sounds._superclassnames = []
    1: sounds._privpropdict = {
       }
    1: sounds._privelemdict = {
       }
    1: square_feet._superclassnames = []
    1: square_feet._privpropdict = {
       }
    1: square_feet._privelemdict = {
       }
    1: square_kilometers._superclassnames = []
    1: square_kilometers._privpropdict = {
       }
    1: square_kilometers._privelemdict = {
       }
    1: square_miles._superclassnames = []
    1: square_miles._privpropdict = {
       }
    1: square_miles._privelemdict = {
       }
    1: square_meters._superclassnames = []
    1: square_meters._privpropdict = {
       }
    1: square_meters._privelemdict = {
       }
    1: square_yards._superclassnames = []
    1: square_yards._privpropdict = {
       }
    1: square_yards._privelemdict = {
       }
    1: styled_Clipboard_text._superclassnames = []
    1: styled_Clipboard_text._privpropdict = {
       }
    1: styled_Clipboard_text._privelemdict = {
       }
    1: styled_Clipboard_text._superclassnames = []
    1: styled_Clipboard_text._privpropdict = {
       }
    1: styled_Clipboard_text._privelemdict = {
       }
    1: Sunday._superclassnames = []
    1: Sunday._privpropdict = {
       }
    1: Sunday._privelemdict = {
       }
    1: styled_Unicode_text._superclassnames = []
    1: styled_Unicode_text._privpropdict = {
       }
    1: styled_Unicode_text._privelemdict = {
       }
    1: styled_Unicode_text._superclassnames = []
    1: styled_Unicode_text._privpropdict = {
       }
    1: styled_Unicode_text._privelemdict = {
       }
    1: Thursday._superclassnames = []
    1: Thursday._privpropdict = {
       }
    1: Thursday._privelemdict = {
       }
    1: Tuesday._superclassnames = []
    1: Tuesday._privpropdict = {
       }
    1: Tuesday._privelemdict = {
       }
    1: type_class._superclassnames = []
    1: type_class._privpropdict = {
       }
    1: type_class._privelemdict = {
       }
    1: empty_ae_name_._superclassnames = []
    1: empty_ae_name_._privpropdict = {
       }
    1: empty_ae_name_._privelemdict = {
       }
    1: Unicode_text._superclassnames = []
    1: Unicode_text._privpropdict = {
       }
    1: Unicode_text._privelemdict = {
       }
    1: Unicode_text._superclassnames = []
    1: Unicode_text._privpropdict = {
       }
    1: Unicode_text._privelemdict = {
       }
    1: vector._superclassnames = []
    1: vector._privpropdict = {
    1:     'length' : _Prop_length,
       }
    1: vector._privelemdict = {
       }
    1: version._superclassnames = []
    1: version._privpropdict = {
       }
    1: version._privelemdict = {
       }
    1: Wednesday._superclassnames = []
    1: Wednesday._privpropdict = {
       }
    1: Wednesday._privelemdict = {
       }
    1: weekdays._superclassnames = []
    1: weekdays._privpropdict = {
       }
    1: weekdays._privelemdict = {
       }
    1: yards._superclassnames = []
    1: yards._privpropdict = {
       }
    1: yards._privelemdict = {
       }
    1: zones._superclassnames = []
    1: zones._privpropdict = {
       }
    1: zones._privelemdict = {
       }
    1: _Enum_boov = {
    1:     'true' : 'true',    # the true boolean value
    1:     'false' : 'fals',   # the false boolean value
       }
       
    1: _Enum_cons = {
    1:     'case' : 'case',    # case
    1:     'diacriticals' : 'diac',    # diacriticals
    1:     'white_space' : 'whit',     # white space
    1:     'hyphens' : 'hyph', # hyphens
    1:     'expansion' : 'expa',       # expansion
    1:     'punctuation' : 'punc',     # punctuation
    1:     'application_responses' : 'rmte',   # remote event replies
       }
       
    1: _Enum_eMds = {
    1:     'option_down' : 'Kopt',     #
    1:     'command_down' : 'Kcmd',    #
    1:     'control_down' : 'Kctl',    #
    1:     'shift_down' : 'Ksft',      #
    1:     'caps_lock_down' : 'Kclk',  #
       }
       
    1: _Enum_ekst = {
    1:     'escape_key' : 'ks5\x00',   #
    1:     'delete_key' : 'ks3\x00',   #
    1:     'tab_key' : 'ks0\x00',      #
    1:     'return_key' : 'ks$\x00',   #
    1:     'clear_key' : 'ksG\x00',    #
    1:     'enter_key' : 'ksL\x00',    #
    1:     'up_arrow_key' : 'ks~\x00', #
    1:     'down_arrow_key' : 'ks}\x00',       #
    1:     'left_arrow_key' : 'ks{\x00',       #
    1:     'right_arrow_key' : 'ks|\x00',      #
    1:     'help_key' : 'ksr\x00',     #
    1:     'home_key' : 'kss\x00',     #
    1:     'page_up_key' : 'kst\x00',  #
    1:     'page_down_key' : 'ksy\x00',        #
    1:     'forward_del_key' : 'ksu\x00',      #
    1:     'end_key' : 'ksw\x00',      #
    1:     'F1_key' : 'ksz\x00',       #
    1:     'F2_key' : 'ksx\x00',       #
    1:     'F3_key' : 'ksc\x00',       #
    1:     'F4_key' : 'ksv\x00',       #
    1:     'F5_key' : 'ks`\x00',       #
    1:     'F6_key' : 'ksa\x00',       #
    1:     'F7_key' : 'ksb\x00',       #
    1:     'F8_key' : 'ksd\x00',       #
    1:     'F9_key' : 'kse\x00',       #
    1:     'F10_key' : 'ksm\x00',      #
    1:     'F11_key' : 'ksg\x00',      #
    1:     'F12_key' : 'kso\x00',      #
    1:     'F13_key' : 'ksi\x00',      #
    1:     'F14_key' : 'ksk\x00',      #
    1:     'F15_key' : 'ksq\x00',      #
       }
       
    1: _Enum_misc = {
    1:     'current_application' : 'cura',     # the current application
       }
       
       
       #
       # Indices of types declared in this module
       #
    1: _classdeclarations = {
    1:     '****' : anything,
    1:     'PICT' : pictures,
    1:     'STXT' : styled_text,
    1:     'TEXT' : strings,
    1:     'alis' : alias,
    1:     'apr ' : April,
    1:     'aug ' : August,
    1:     'bool' : booleans,
    1:     'cRGB' : RGB_colors,
    1:     'capp' : application,
    1:     'case' : upper_case,
    1:     'ccmt' : cubic_centimeters,
    1:     'cfet' : cubic_feet,
    1:     'cha ' : characters,
    1:     'citl' : writing_code_info,
    1:     'citm' : text_items,
    1:     'cmet' : cubic_meters,
    1:     'cmtr' : centimeters,
    1:     'cobj' : item,
    1:     'cstr' : C_strings,
    1:     'ctxt' : text,
    1:     'cuin' : cubic_inches,
    1:     'cyrd' : cubic_yards,
    1:     'dec ' : December,
    1:     'degc' : degrees_Celsius,
    1:     'degf' : degrees_Fahrenheit,
    1:     'degk' : degrees_Kelvin,
    1:     'doub' : reals,
    1:     'encs' : encoded_strings,
    1:     'enum' : constants,
    1:     'evnt' : events,
    1:     'feb ' : February,
    1:     'feet' : feet,
    1:     'fri ' : Friday,
    1:     'fss ' : file_specification,
    1:     'galn' : gallons,
    1:     'gram' : grams,
    1:     'hand' : handlers,
    1:     'inch' : inches,
    1:     'itxt' : international_text,
    1:     'jan ' : January,
    1:     'jul ' : July,
    1:     'jun ' : June,
    1:     'kfrm' : reference_forms,
    1:     'kgrm' : kilograms,
    1:     'kmtr' : kilometers,
    1:     'kprs' : keystroke,
    1:     'lbs ' : pounds,
    1:     'ldt ' : date,
    1:     'list' : list,
    1:     'litr' : liters,
    1:     'llst' : linked_list,
    1:     'long' : integers,
    1:     'lr  ' : list_or_record,
    1:     'lrs ' : list_2c__record_or_text,
    1:     'ls  ' : list_or_string,
    1:     'mach' : machines,
    1:     'mar ' : March,
    1:     'may ' : May,
    1:     'metr' : meters,
    1:     'mile' : miles,
    1:     'mnth' : months,
    1:     'mon ' : Monday,
    1:     'msng' : missing_values,
    1:     'nd  ' : number_or_date,
    1:     'nds ' : number_2c__date_or_text,
    1:     'nmbr' : numbers,
    1:     'nov ' : November,
    1:     'ns  ' : number_or_string,
    1:     'obj ' : references,
    1:     'oct ' : October,
    1:     'ozs ' : ounces,
    1:     'pcls' : class_,
    1:     'prep' : prepositions,
    1:     'prop' : properties,
    1:     'psct' : writing_code,
    1:     'pstr' : Pascal_strings,
    1:     'qrts' : quarts,
    1:     'rdat' : data,
    1:     'reco' : records,
    1:     'sat ' : Saturday,
    1:     'scnd' : seconds,
    1:     'scpt' : script,
    1:     'sep ' : September,
    1:     'sf  ' : alias_or_string,
    1:     'snd ' : sounds,
    1:     'sqft' : square_feet,
    1:     'sqkm' : square_kilometers,
    1:     'sqmi' : square_miles,
    1:     'sqrm' : square_meters,
    1:     'sqyd' : square_yards,
    1:     'styl' : styled_Clipboard_text,
    1:     'sun ' : Sunday,
    1:     'sutx' : styled_Unicode_text,
    1:     'thu ' : Thursday,
    1:     'tue ' : Tuesday,
    1:     'type' : type_class,
    1:     'undf' : empty_ae_name_,
    1:     'utxt' : Unicode_text,
    1:     'vect' : vector,
    1:     'vers' : version,
    1:     'wed ' : Wednesday,
    1:     'wkdy' : weekdays,
    1:     'yard' : yards,
    1:     'zone' : zones,
       }
       
    1: _propdeclarations = {
    1:     'ID  ' : _Prop_id,
    1:     'ascr' : _Prop_AppleScript,
    1:     'c@#^' : _Prop__3c_Inheritance_3e_,
    1:     'day ' : _Prop_day,
    1:     'days' : _Prop_days,
    1:     'dstr' : _Prop_date_string,
    1:     'hour' : _Prop_hours,
    1:     'kMod' : _Prop_modifiers,
    1:     'kMsg' : _Prop_key,
    1:     'kknd' : _Prop_key_kind,
    1:     'leng' : _Prop_length,
    1:     'min ' : _Prop_minutes,
    1:     'mnth' : _Prop_month,
    1:     'pare' : _Prop_parent,
    1:     'pi  ' : _Prop_pi,
    1:     'plcd' : _Prop_language_code,
    1:     'pnam' : _Prop_name,
    1:     'prdp' : _Prop_print_depth,
    1:     'prln' : _Prop_print_length,
    1:     'pscd' : _Prop_script_code,
    1:     'psxp' : _Prop_POSIX_path,
    1:     'rest' : _Prop_rest,
    1:     'ret ' : _Prop_return_,
    1:     'rslt' : _Prop_result,
    1:     'rvse' : _Prop_reverse,
    1:     'spac' : _Prop_space,
    1:     'tab ' : _Prop_tab,
    1:     'time' : _Prop_time,
    1:     'tstr' : _Prop_time_string,
    1:     'txdl' : _Prop_text_item_delimiters,
    1:     'week' : _Prop_weeks,
    1:     'wkdy' : _Prop_weekday,
    1:     'year' : _Prop_year,
       }
       
    1: _compdeclarations = {
       }
       
    1: _enumdeclarations = {
    1:     'boov' : _Enum_boov,
    1:     'cons' : _Enum_cons,
    1:     'eMds' : _Enum_eMds,
    1:     'ekst' : _Enum_ekst,
    1:     'misc' : _Enum_misc,
       }
