       """Filename matching with shell patterns.
       
       fnmatch(FILENAME, PATTERN) matches according to the local convention.
       fnmatchcase(FILENAME, PATTERN) always takes case in account.
       
       The functions operate by translating the pattern into a regular
       expression.  They cache the compiled regular expressions for speed.
       
       The function translate(PATTERN) returns a regular expression
       corresponding to PATTERN.  (It does not compile it.)
       """
       
>>>>>> import re
       
>>>>>> __all__ = ["filter", "fnmatch", "fnmatchcase", "translate"]
       
>>>>>> _cache = {}
>>>>>> _MAXCACHE = 100
       
>>>>>> def _purge():
           """Clear the pattern cache"""
    7:     _cache.clear()
       
>>>>>> def fnmatch(name, pat):
           """Test whether FILENAME matches PATTERN.
       
           Patterns are Unix shell style:
       
           *       matches everything
           ?       matches any single character
           [seq]   matches any character in seq
           [!seq]  matches any char not in seq
       
           An initial period in FILENAME is not special.
           Both FILENAME and PATTERN are first case-normalized
           if the operating system requires it.
           If you don't want this, use fnmatchcase(FILENAME, PATTERN).
           """
       
  346:     import os
  346:     name = os.path.normcase(name)
  346:     pat = os.path.normcase(pat)
  346:     return fnmatchcase(name, pat)
       
>>>>>> def filter(names, pat):
           """Return the subset of the list NAMES that match PAT"""
  351:     import os,posixpath
  351:     result=[]
  351:     pat=os.path.normcase(pat)
  351:     try:
  351:         re_pat = _cache[pat]
   34:     except KeyError:
   34:         res = translate(pat)
   34:         if len(_cache) >= _MAXCACHE:
>>>>>>             _cache.clear()
   34:         _cache[pat] = re_pat = re.compile(res)
  351:     match = re_pat.match
  351:     if os.path is posixpath:
               # normcase on posix is NOP. Optimize it away from the loop.
 2457:         for name in names:
 2106:             if match(name):
  765:                 result.append(name)
           else:
>>>>>>         for name in names:
>>>>>>             if match(os.path.normcase(name)):
>>>>>>                 result.append(name)
  351:     return result
       
>>>>>> def fnmatchcase(name, pat):
           """Test whether FILENAME matches PATTERN, including case.
       
           This is a version of fnmatch() which doesn't case-normalize
           its arguments.
           """
       
  514:     try:
  514:         re_pat = _cache[pat]
  137:     except KeyError:
  137:         res = translate(pat)
  137:         if len(_cache) >= _MAXCACHE:
    1:             _cache.clear()
  137:         _cache[pat] = re_pat = re.compile(res)
  514:     return re_pat.match(name) is not None
       
>>>>>> def translate(pat):
           """Translate a shell PATTERN to a regular expression.
       
           There is no way to quote meta-characters.
           """
       
  288:     i, n = 0, len(pat)
  288:     res = ''
 6007:     while i < n:
 5719:         c = pat[i]
 5719:         i = i+1
 5719:         if c == '*':
   77:             res = res + '.*'
 5642:         elif c == '?':
 5078:             res = res + '.'
  564:         elif c == '[':
   11:             j = i
   11:             if j < n and pat[j] == '!':
    3:                 j = j+1
   11:             if j < n and pat[j] == ']':
    1:                 j = j+1
   28:             while j < n and pat[j] != ']':
   17:                 j = j+1
   11:             if j >= n:
    1:                 res = res + '\\['
                   else:
   10:                 stuff = pat[i:j].replace('\\','\\\\')
   10:                 i = j+1
   10:                 if stuff[0] == '!':
    3:                     stuff = '^' + stuff[1:]
    7:                 elif stuff[0] == '^':
    1:                     stuff = '\\' + stuff
   10:                 res = '%s[%s]' % (res, stuff)
               else:
  553:             res = res + re.escape(c)
  288:     return res + '\Z(?ms)'
