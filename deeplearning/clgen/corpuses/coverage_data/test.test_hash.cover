       # test the invariant that
       #   iff a==b then hash(a)==hash(b)
       #
       # Also test that hash implementations are inherited as expected
       
    1: import os
    1: import sys
    1: import struct
    1: import datetime
    1: import unittest
    1: import subprocess
       
    1: from test import test_support
    1: from collections import Hashable
       
    1: IS_64BIT = (struct.calcsize('l') == 8)
       
       
    2: class HashEqualityTestCase(unittest.TestCase):
       
    1:     def same_hash(self, *objlist):
               # Hash each object given and fail if
               # the hash values are not all the same.
   15:         hashed = map(hash, objlist)
   47:         for h in hashed[1:]:
   32:             if h != hashed[0]:
>>>>>>                 self.fail("hashed values differ: %r" % (objlist,))
       
    1:     def test_numeric_literals(self):
    1:         self.same_hash(1, 1L, 1.0, 1.0+0.0j)
    1:         self.same_hash(0, 0L, 0.0, 0.0+0.0j)
    1:         self.same_hash(-1, -1L, -1.0, -1.0+0.0j)
    1:         self.same_hash(-2, -2L, -2.0, -2.0+0.0j)
       
    1:     def test_coerced_integers(self):
    1:         self.same_hash(int(1), long(1), float(1), complex(1),
    1:                        int('1'), float('1.0'))
    1:         self.same_hash(int(-2**31), long(-2**31), float(-2**31))
    1:         self.same_hash(int(1-2**31), long(1-2**31), float(1-2**31))
    1:         self.same_hash(int(2**31-1), long(2**31-1), float(2**31-1))
               # for 64-bit platforms
    1:         self.same_hash(int(2**31), long(2**31), float(2**31))
    1:         self.same_hash(int(-2**63), long(-2**63), float(-2**63))
    1:         self.same_hash(int(1-2**63), long(1-2**63))
    1:         self.same_hash(int(2**63-1), long(2**63-1))
    1:         self.same_hash(long(2**63), float(2**63))
       
    1:     def test_coerced_floats(self):
    1:         self.same_hash(long(1.23e300), float(1.23e300))
    1:         self.same_hash(float(0.5), complex(0.5, 0.0))
       
       
    1: _default_hash = object.__hash__
    2: class DefaultHash(object): pass
       
    1: _FIXED_HASH_VALUE = 42
    2: class FixedHash(object):
    1:     def __hash__(self):
    4:         return _FIXED_HASH_VALUE
       
    2: class OnlyEquality(object):
    1:     def __eq__(self, other):
>>>>>>         return self is other
           # Trick to suppress Py3k warning in 2.x
    1:     __hash__ = None
    1: del OnlyEquality.__hash__
       
    2: class OnlyInequality(object):
    1:     def __ne__(self, other):
>>>>>>         return self is not other
       
    2: class OnlyCmp(object):
    1:     def __cmp__(self, other):
>>>>>>         return cmp(id(self), id(other))
           # Trick to suppress Py3k warning in 2.x
    1:     __hash__ = None
    1: del OnlyCmp.__hash__
       
    2: class InheritedHashWithEquality(FixedHash, OnlyEquality): pass
    2: class InheritedHashWithInequality(FixedHash, OnlyInequality): pass
    2: class InheritedHashWithCmp(FixedHash, OnlyCmp): pass
       
    2: class NoHash(object):
    1:     __hash__ = None
       
    2: class HashInheritanceTestCase(unittest.TestCase):
    1:     default_expected = [object(),
    1:                         DefaultHash(),
    1:                         OnlyEquality(),
    1:                         OnlyInequality(),
    1:                         OnlyCmp(),
                              ]
    1:     fixed_expected = [FixedHash(),
    1:                       InheritedHashWithEquality(),
    1:                       InheritedHashWithInequality(),
    1:                       InheritedHashWithCmp(),
                             ]
    1:     error_expected = [NoHash()]
       
    1:     def test_default_hash(self):
    6:         for obj in self.default_expected:
    5:             self.assertEqual(hash(obj), _default_hash(obj))
       
    1:     def test_fixed_hash(self):
    5:         for obj in self.fixed_expected:
    4:             self.assertEqual(hash(obj), _FIXED_HASH_VALUE)
       
    1:     def test_error_hash(self):
    2:         for obj in self.error_expected:
    1:             self.assertRaises(TypeError, hash, obj)
       
    1:     def test_hashable(self):
    1:         objects = (self.default_expected +
    1:                    self.fixed_expected)
   10:         for obj in objects:
    9:             self.assertIsInstance(obj, Hashable)
       
    1:     def test_not_hashable(self):
    2:         for obj in self.error_expected:
    1:             self.assertNotIsInstance(obj, Hashable)
       
       
       # Issue #4701: Check that some builtin types are correctly hashable
       #  (This test only used to fail in Python 3.0, but has been included
       #   in 2.x along with the lazy call to PyType_Ready in PyObject_Hash)
    2: class DefaultIterSeq(object):
    1:     seq = range(10)
    1:     def __len__(self):
>>>>>>         return len(self.seq)
    1:     def __getitem__(self, index):
>>>>>>         return self.seq[index]
       
    2: class HashBuiltinsTestCase(unittest.TestCase):
    1:     hashes_to_check = [xrange(10),
    1:                        enumerate(xrange(10)),
    1:                        iter(DefaultIterSeq()),
    1:                        iter(lambda: 0, 0),
                             ]
       
    1:     def test_hashes(self):
    1:         _default_hash = object.__hash__
    5:         for obj in self.hashes_to_check:
    4:             self.assertEqual(hash(obj), _default_hash(obj))
       
    2: class HashRandomizationTests(unittest.TestCase):
       
           # Each subclass should define a field "repr_", containing the repr() of
           # an object to be tested
       
    1:     def get_hash_command(self, repr_):
   15:         return 'print(hash(%s))' % repr_
       
    1:     def get_hash(self, repr_, seed=None):
   21:         env = os.environ.copy()
   21:         if seed is not None:
   18:             env['PYTHONHASHSEED'] = str(seed)
               else:
    3:             env.pop('PYTHONHASHSEED', None)
   21:         cmd_line = [sys.executable, '-c', self.get_hash_command(repr_)]
   21:         p = subprocess.Popen(cmd_line, stdin=subprocess.PIPE,
   21:                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
   21:                              env=env)
   21:         out, err = p.communicate()
   21:         out = test_support.strip_python_stderr(out)
   21:         return int(out.strip())
       
    1:     def test_randomized_hash(self):
               # two runs should return different hashes
    6:         run1 = self.get_hash(self.repr_, seed='random')
    6:         run2 = self.get_hash(self.repr_, seed='random')
    6:         self.assertNotEqual(run1, run2)
       
    2: class StringlikeHashRandomizationTests(HashRandomizationTests):
    1:     def test_null_hash(self):
               # PYTHONHASHSEED=0 disables the randomized hash
    3:         if IS_64BIT:
    3:             known_hash_of_obj = 1453079729188098211
               else:
>>>>>>             known_hash_of_obj = -1600925533
       
               # Randomization is disabled by default:
    3:         self.assertEqual(self.get_hash(self.repr_), known_hash_of_obj)
       
               # It can also be disabled by setting the seed to 0:
    3:         self.assertEqual(self.get_hash(self.repr_, seed=0), known_hash_of_obj)
       
    1:     def test_fixed_hash(self):
               # test a fixed seed for the randomized hash
               # Note that all types share the same values:
    3:         if IS_64BIT:
    3:             if sys.byteorder == 'little':
    3:                 h = -4410911502303878509
                   else:
>>>>>>                 h = -3570150969479994130
               else:
>>>>>>             if sys.byteorder == 'little':
>>>>>>                 h = -206076799
                   else:
>>>>>>                 h = -1024014457
    3:         self.assertEqual(self.get_hash(self.repr_, seed=42), h)
       
    2: class StrHashRandomizationTests(StringlikeHashRandomizationTests):
    1:     repr_ = repr('abc')
       
    1:     def test_empty_string(self):
    1:         self.assertEqual(hash(""), 0)
       
    2: class UnicodeHashRandomizationTests(StringlikeHashRandomizationTests):
    1:     repr_ = repr(u'abc')
       
    1:     def test_empty_string(self):
    1:         self.assertEqual(hash(u""), 0)
       
    2: class BufferHashRandomizationTests(StringlikeHashRandomizationTests):
    1:     repr_ = 'buffer("abc")'
       
    1:     def test_empty_string(self):
    1:         with test_support.check_py3k_warnings():
    1:             self.assertEqual(hash(buffer("")), 0)
       
    2: class DatetimeTests(HashRandomizationTests):
    1:     def get_hash_command(self, repr_):
    6:         return 'import datetime; print(hash(%s))' % repr_
       
    2: class DatetimeDateTests(DatetimeTests):
    1:     repr_ = repr(datetime.date(1066, 10, 14))
       
    2: class DatetimeDatetimeTests(DatetimeTests):
    1:     repr_ = repr(datetime.datetime(1, 2, 3, 4, 5, 6, 7))
       
    2: class DatetimeTimeTests(DatetimeTests):
    1:     repr_ = repr(datetime.time(0))
       
       
    1: def test_main():
    1:     test_support.run_unittest(HashEqualityTestCase,
    1:                               HashInheritanceTestCase,
    1:                               HashBuiltinsTestCase,
    1:                               StrHashRandomizationTests,
    1:                               UnicodeHashRandomizationTests,
    1:                               BufferHashRandomizationTests,
    1:                               DatetimeDateTests,
    1:                               DatetimeDatetimeTests,
    1:                               DatetimeTimeTests)
       
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
