    1: from ctypes import *
    1: from ctypes.test import need_symbol
    1: import unittest
    1: import sys
       
    2: class Test(unittest.TestCase):
       
    1:     def test_array2pointer(self):
    1:         array = (c_int * 3)(42, 17, 2)
       
               # casting an array to a pointer works.
    1:         ptr = cast(array, POINTER(c_int))
    4:         self.assertEqual([ptr[i] for i in range(3)], [42, 17, 2])
       
    1:         if 2*sizeof(c_short) == sizeof(c_int):
    1:             ptr = cast(array, POINTER(c_short))
    1:             if sys.byteorder == "little":
    7:                 self.assertEqual([ptr[i] for i in range(6)],
    1:                                      [42, 0, 17, 0, 2, 0])
                   else:
>>>>>>                 self.assertEqual([ptr[i] for i in range(6)],
>>>>>>                                      [0, 42, 0, 17, 0, 2])
       
    1:     def test_address2pointer(self):
    1:         array = (c_int * 3)(42, 17, 2)
       
    1:         address = addressof(array)
    1:         ptr = cast(c_void_p(address), POINTER(c_int))
    4:         self.assertEqual([ptr[i] for i in range(3)], [42, 17, 2])
       
    1:         ptr = cast(address, POINTER(c_int))
    4:         self.assertEqual([ptr[i] for i in range(3)], [42, 17, 2])
       
    1:     def test_p2a_objects(self):
    1:         array = (c_char_p * 5)()
    1:         self.assertEqual(array._objects, None)
    1:         array[0] = "foo bar"
    1:         self.assertEqual(array._objects, {'0': "foo bar"})
       
    1:         p = cast(array, POINTER(c_char_p))
               # array and p share a common _objects attribute
    1:         self.assertIs(p._objects, array._objects)
    1:         self.assertEqual(array._objects, {'0': "foo bar", id(array): array})
    1:         p[0] = "spam spam"
    1:         self.assertEqual(p._objects, {'0': "spam spam", id(array): array})
    1:         self.assertIs(array._objects, p._objects)
    1:         p[1] = "foo bar"
    1:         self.assertEqual(p._objects, {'1': 'foo bar', '0': "spam spam", id(array): array})
    1:         self.assertIs(array._objects, p._objects)
       
    1:     def test_other(self):
    1:         p = cast((c_int * 4)(1, 2, 3, 4), POINTER(c_int))
    1:         self.assertEqual(p[:4], [1,2, 3, 4])
    1:         self.assertEqual(p[:4:], [1, 2, 3, 4])
    1:         self.assertEqual(p[3:-1:-1], [4, 3, 2, 1])
    1:         self.assertEqual(p[:4:3], [1, 4])
    1:         c_int()
    1:         self.assertEqual(p[:4], [1, 2, 3, 4])
    1:         self.assertEqual(p[:4:], [1, 2, 3, 4])
    1:         self.assertEqual(p[3:-1:-1], [4, 3, 2, 1])
    1:         self.assertEqual(p[:4:3], [1, 4])
    1:         p[2] = 96
    1:         self.assertEqual(p[:4], [1, 2, 96, 4])
    1:         self.assertEqual(p[:4:], [1, 2, 96, 4])
    1:         self.assertEqual(p[3:-1:-1], [4, 96, 2, 1])
    1:         self.assertEqual(p[:4:3], [1, 4])
    1:         c_int()
    1:         self.assertEqual(p[:4], [1, 2, 96, 4])
    1:         self.assertEqual(p[:4:], [1, 2, 96, 4])
    1:         self.assertEqual(p[3:-1:-1], [4, 96, 2, 1])
    1:         self.assertEqual(p[:4:3], [1, 4])
       
    1:     def test_char_p(self):
               # This didn't work: bad argument to internal function
    1:         s = c_char_p("hiho")
    1:         self.assertEqual(cast(cast(s, c_void_p), c_char_p).value,
    1:                              "hiho")
       
    1:     @need_symbol('c_wchar_p')
           def test_wchar_p(self):
    1:         s = c_wchar_p("hiho")
    1:         self.assertEqual(cast(cast(s, c_void_p), c_wchar_p).value,
    1:                              "hiho")
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
