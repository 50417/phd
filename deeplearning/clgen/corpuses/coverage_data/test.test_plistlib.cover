       # Copyright (C) 2003 Python Software Foundation
       
    1: import unittest
    1: import plistlib
    1: import os
    1: import datetime
    1: from test import test_support
       
       
       # This test data was generated through Cocoa's NSDictionary class
       TESTDATA = """<?xml version="1.0" encoding="UTF-8"?>
       <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" \
       "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
       <plist version="1.0">
       <dict>
               <key>aDate</key>
               <date>2004-10-26T10:33:33Z</date>
               <key>aDict</key>
               <dict>
                       <key>aFalseValue</key>
                       <false/>
                       <key>aTrueValue</key>
                       <true/>
                       <key>aUnicodeValue</key>
                       <string>M\xc3\xa4ssig, Ma\xc3\x9f</string>
                       <key>anotherString</key>
                       <string>&lt;hello &amp; 'hi' there!&gt;</string>
                       <key>deeperDict</key>
                       <dict>
                               <key>a</key>
                               <integer>17</integer>
                               <key>b</key>
                               <real>32.5</real>
                               <key>c</key>
                               <array>
                                       <integer>1</integer>
                                       <integer>2</integer>
                                       <string>text</string>
                               </array>
                       </dict>
               </dict>
               <key>aFloat</key>
               <real>0.5</real>
               <key>aList</key>
               <array>
                       <string>A</string>
                       <string>B</string>
                       <integer>12</integer>
                       <real>32.5</real>
                       <array>
                               <integer>1</integer>
                               <integer>2</integer>
                               <integer>3</integer>
                       </array>
               </array>
               <key>aString</key>
               <string>Doodah</string>
               <key>anInt</key>
               <integer>728</integer>
               <key>nestedData</key>
               <array>
                       <data>
                       PGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAzxsb3RzIG9mIGJpbmFyeSBndW5r
                       PgABAgM8bG90cyBvZiBiaW5hcnkgZ3Vuaz4AAQIDPGxvdHMgb2YgYmluYXJ5
                       IGd1bms+AAECAzxsb3RzIG9mIGJpbmFyeSBndW5rPgABAgM8bG90cyBvZiBi
                       aW5hcnkgZ3Vuaz4AAQIDPGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAzxsb3Rz
                       IG9mIGJpbmFyeSBndW5rPgABAgM8bG90cyBvZiBiaW5hcnkgZ3Vuaz4AAQID
                       PGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAw==
                       </data>
               </array>
               <key>someData</key>
               <data>
               PGJpbmFyeSBndW5rPg==
               </data>
               <key>someMoreData</key>
               <data>
               PGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAzxsb3RzIG9mIGJpbmFyeSBndW5rPgABAgM8
               bG90cyBvZiBiaW5hcnkgZ3Vuaz4AAQIDPGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAzxs
               b3RzIG9mIGJpbmFyeSBndW5rPgABAgM8bG90cyBvZiBiaW5hcnkgZ3Vuaz4AAQIDPGxv
               dHMgb2YgYmluYXJ5IGd1bms+AAECAzxsb3RzIG9mIGJpbmFyeSBndW5rPgABAgM8bG90
               cyBvZiBiaW5hcnkgZ3Vuaz4AAQIDPGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAw==
               </data>
               <key>\xc3\x85benraa</key>
               <string>That was a unicode key.</string>
       </dict>
       </plist>
    1: """.replace(" " * 8, "\t")  # Apple as well as plistlib.py output hard tabs
       
       
    2: class TestPlistlib(unittest.TestCase):
       
    1:     def tearDown(self):
   12:         try:
   12:             os.unlink(test_support.TESTFN)
   11:         except:
   11:             pass
       
    1:     def _create(self):
    6:         pl = dict(
    6:             aString="Doodah",
    6:             aList=["A", "B", 12, 32.5, [1, 2, 3]],
    6:             aFloat = 0.5,
    6:             anInt = 728,
    6:             aDict=dict(
    6:                 anotherString="<hello & 'hi' there!>",
    6:                 aUnicodeValue=u'M\xe4ssig, Ma\xdf',
    6:                 aTrueValue=True,
    6:                 aFalseValue=False,
    6:                 deeperDict=dict(a=17, b=32.5, c=[1, 2, "text"]),
                   ),
    6:             someData = plistlib.Data("<binary gunk>"),
    6:             someMoreData = plistlib.Data("<lots of binary gunk>\0\1\2\3" * 10),
    6:             nestedData = [plistlib.Data("<lots of binary gunk>\0\1\2\3" * 10)],
    6:             aDate = datetime.datetime(2004, 10, 26, 10, 33, 33),
               )
    6:         pl[u'\xc5benraa'] = "That was a unicode key."
    6:         return pl
       
    1:     def test_create(self):
    1:         pl = self._create()
    1:         self.assertEqual(pl["aString"], "Doodah")
    1:         self.assertEqual(pl["aDict"]["aFalseValue"], False)
       
    1:     def test_io(self):
    1:         pl = self._create()
    1:         plistlib.writePlist(pl, test_support.TESTFN)
    1:         pl2 = plistlib.readPlist(test_support.TESTFN)
    1:         self.assertEqual(dict(pl), dict(pl2))
       
    1:     def test_string(self):
    1:         pl = self._create()
    1:         data = plistlib.writePlistToString(pl)
    1:         pl2 = plistlib.readPlistFromString(data)
    1:         self.assertEqual(dict(pl), dict(pl2))
    1:         data2 = plistlib.writePlistToString(pl2)
    1:         self.assertEqual(data, data2)
       
    1:     def test_indentation_array(self):
    1:         data = [[[[[[[[{'test': plistlib.Data(b'aaaaaa')}]]]]]]]]
    1:         self.assertEqual(plistlib.readPlistFromString(plistlib.writePlistToString(data)), data)
       
    1:     def test_indentation_dict(self):
    1:         data = {'1': {'2': {'3': {'4': {'5': {'6': {'7': {'8': {'9': plistlib.Data(b'aaaaaa')}}}}}}}}}
    1:         self.assertEqual(plistlib.readPlistFromString(plistlib.writePlistToString(data)), data)
       
    1:     def test_indentation_dict_mix(self):
    1:         data = {'1': {'2': [{'3': [[[[[{'test': plistlib.Data(b'aaaaaa')}]]]]]}]}}
    1:         self.assertEqual(plistlib.readPlistFromString(plistlib.writePlistToString(data)), data)
       
    1:     def test_appleformatting(self):
    1:         pl = plistlib.readPlistFromString(TESTDATA)
    1:         data = plistlib.writePlistToString(pl)
    1:         self.assertEqual(data, TESTDATA,
    1:                          "generated data was not identical to Apple's output")
       
    1:     def test_appleformattingfromliteral(self):
    1:         pl = self._create()
    1:         pl2 = plistlib.readPlistFromString(TESTDATA)
    1:         self.assertEqual(dict(pl), dict(pl2),
    1:                          "generated data was not identical to Apple's output")
       
    1:     def test_stringio(self):
    1:         from StringIO import StringIO
    1:         f = StringIO()
    1:         pl = self._create()
    1:         plistlib.writePlist(pl, f)
    1:         pl2 = plistlib.readPlist(StringIO(f.getvalue()))
    1:         self.assertEqual(dict(pl), dict(pl2))
       
    1:     def test_cstringio(self):
    1:         from cStringIO import StringIO
    1:         f = StringIO()
    1:         pl = self._create()
    1:         plistlib.writePlist(pl, f)
    1:         pl2 = plistlib.readPlist(StringIO(f.getvalue()))
    1:         self.assertEqual(dict(pl), dict(pl2))
       
    1:     def test_controlcharacters(self):
  129:         for i in range(128):
  128:             c = chr(i)
  128:             testString = "string containing %s" % c
  128:             if i >= 32 or c in "\r\n\t":
                       # \r, \n and \t are the only legal control chars in XML
   99:                 plistlib.writePlistToString(testString)
                   else:
   29:                 self.assertRaises(ValueError,
   29:                                   plistlib.writePlistToString,
   29:                                   testString)
       
    1:     def test_nondictroot(self):
    1:         test1 = "abc"
    1:         test2 = [1, 2, 3, "abc"]
    1:         result1 = plistlib.readPlistFromString(plistlib.writePlistToString(test1))
    1:         result2 = plistlib.readPlistFromString(plistlib.writePlistToString(test2))
    1:         self.assertEqual(test1, result1)
    1:         self.assertEqual(test2, result2)
       
       
    1: def test_main():
    1:     test_support.run_unittest(TestPlistlib)
       
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
