    1: """Tests for distutils.version."""
    1: import unittest
    1: from distutils.version import LooseVersion
    1: from distutils.version import StrictVersion
    1: from test.test_support import run_unittest
       
    2: class VersionTestCase(unittest.TestCase):
       
    1:     def test_prerelease(self):
    1:         version = StrictVersion('1.2.3a1')
    1:         self.assertEqual(version.version, (1, 2, 3))
    1:         self.assertEqual(version.prerelease, ('a', 1))
    1:         self.assertEqual(str(version), '1.2.3a1')
       
    1:         version = StrictVersion('1.2.0')
    1:         self.assertEqual(str(version), '1.2')
       
    1:     def test_cmp_strict(self):
    1:         versions = (('1.5.1', '1.5.2b2', -1),
    1:                     ('161', '3.10a', ValueError),
    1:                     ('8.02', '8.02', 0),
    1:                     ('3.4j', '1996.07.12', ValueError),
    1:                     ('3.2.pl0', '3.1.1.6', ValueError),
    1:                     ('2g6', '11g', ValueError),
    1:                     ('0.9', '2.2', -1),
    1:                     ('1.2.1', '1.2', 1),
    1:                     ('1.1', '1.2.2', -1),
    1:                     ('1.2', '1.1', 1),
    1:                     ('1.2.1', '1.2.2', -1),
    1:                     ('1.2.2', '1.2', 1),
    1:                     ('1.2', '1.2.2', -1),
    1:                     ('0.4.0', '0.4', 0),
    1:                     ('1.13++', '5.5.kw', ValueError))
       
   16:         for v1, v2, wanted in versions:
   15:             try:
   15:                 res = StrictVersion(v1).__cmp__(StrictVersion(v2))
    5:             except ValueError:
    5:                 if wanted is ValueError:
    5:                     continue
                       else:
>>>>>>                     raise AssertionError(("cmp(%s, %s) "
                                                 "shouldn't raise ValueError")
>>>>>>                                             % (v1, v2))
   10:             self.assertEqual(res, wanted,
   10:                              'cmp(%s, %s) should be %s, got %s' %
   10:                              (v1, v2, wanted, res))
       
       
    1:     def test_cmp(self):
    1:         versions = (('1.5.1', '1.5.2b2', -1),
    1:                     ('161', '3.10a', 1),
    1:                     ('8.02', '8.02', 0),
    1:                     ('3.4j', '1996.07.12', -1),
    1:                     ('3.2.pl0', '3.1.1.6', 1),
    1:                     ('2g6', '11g', -1),
    1:                     ('0.960923', '2.2beta29', -1),
    1:                     ('1.13++', '5.5.kw', -1))
       
       
    9:         for v1, v2, wanted in versions:
    8:             res = LooseVersion(v1).__cmp__(LooseVersion(v2))
    8:             self.assertEqual(res, wanted,
    8:                              'cmp(%s, %s) should be %s, got %s' %
    8:                              (v1, v2, wanted, res))
       
    1: def test_suite():
    1:     return unittest.makeSuite(VersionTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     run_unittest(test_suite())
