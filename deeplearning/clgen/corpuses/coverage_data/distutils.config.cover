       """distutils.pypirc
       
       Provides the PyPIRCCommand class, the base class for the command classes
       that uses .pypirc in the distutils.command package.
    2: """
    2: import os
    2: from ConfigParser import ConfigParser
       
    2: from distutils.cmd import Command
       
       DEFAULT_PYPIRC = """\
       [distutils]
       index-servers =
           pypi
       
       [pypi]
       username:%s
       password:%s
    2: """
       
    4: class PyPIRCCommand(Command):
           """Base command that knows how to handle the .pypirc file
    2:     """
    2:     DEFAULT_REPOSITORY = 'https://upload.pypi.org/legacy/'
    2:     DEFAULT_REALM = 'pypi'
    2:     repository = None
    2:     realm = None
       
           user_options = [
    2:         ('repository=', 'r',
    2:          "url of repository [default: %s]" % \
    2:             DEFAULT_REPOSITORY),
               ('show-response', None,
    2:          'display full response text from server')]
       
    2:     boolean_options = ['show-response']
       
    2:     def _get_rc_file(self):
               """Returns rc file path."""
   28:         return os.path.join(os.path.expanduser('~'), '.pypirc')
       
    2:     def _store_pypirc(self, username, password):
               """Creates a default .pypirc file."""
    5:         rc = self._get_rc_file()
    5:         f = os.fdopen(os.open(rc, os.O_CREAT | os.O_WRONLY, 0600), 'w')
    5:         try:
    5:             f.write(DEFAULT_PYPIRC % (username, password))
               finally:
    5:             f.close()
       
    2:     def _read_pypirc(self):
               """Reads the .pypirc file."""
   18:         rc = self._get_rc_file()
   18:         if os.path.exists(rc):
   15:             self.announce('Using PyPI login from %s' % rc)
   15:             repository = self.repository or self.DEFAULT_REPOSITORY
   15:             config = ConfigParser()
   15:             config.read(rc)
   15:             sections = config.sections()
   15:             if 'distutils' in sections:
                       # let's get the list of servers
   11:                 index_servers = config.get('distutils', 'index-servers')
   11:                 _servers = [server.strip() for server in
   40:                             index_servers.split('\n')
   29:                             if server.strip() != '']
   11:                 if _servers == []:
                           # nothing set, let's try to get the default pypi
>>>>>>                     if 'pypi' in sections:
>>>>>>                         _servers = ['pypi']
                           else:
                               # the file is not properly defined, returning
                               # an empty dict
>>>>>>                         return {}
   11:                 for server in _servers:
   11:                     current = {'server': server}
   11:                     current['username'] = config.get(server, 'username')
       
                           # optional params
   11:                     for key, default in (('repository',
   11:                                           self.DEFAULT_REPOSITORY),
   11:                                          ('realm', self.DEFAULT_REALM),
   44:                                          ('password', None)):
   33:                         if config.has_option(server, key):
    8:                             current[key] = config.get(server, key)
                               else:
   25:                             current[key] = default
   11:                     if (current['server'] == repository or
   11:                         current['repository'] == repository):
   11:                         return current
    4:             elif 'server-login' in sections:
                       # old format
    4:                 server = 'server-login'
    4:                 if config.has_option(server, 'repository'):
>>>>>>                     repository = config.get(server, 'repository')
                       else:
    4:                     repository = self.DEFAULT_REPOSITORY
    4:                 return {'username': config.get(server, 'username'),
    4:                         'password': config.get(server, 'password'),
    4:                         'repository': repository,
    4:                         'server': server,
    4:                         'realm': self.DEFAULT_REALM}
       
    3:         return {}
       
    2:     def initialize_options(self):
               """Initialize options."""
   10:         self.repository = None
   10:         self.realm = None
   10:         self.show_response = 0
       
    2:     def finalize_options(self):
               """Finalizes options."""
   10:         if self.repository is None:
    8:             self.repository = self.DEFAULT_REPOSITORY
   10:         if self.realm is None:
    8:             self.realm = self.DEFAULT_REALM
