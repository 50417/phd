       """Fixer for operator functions.
       
       operator.isCallable(obj)       -> hasattr(obj, '__call__')
       operator.sequenceIncludes(obj) -> operator.contains(obj)
       operator.isSequenceType(obj)   -> isinstance(obj, collections.Sequence)
       operator.isMappingType(obj)    -> isinstance(obj, collections.Mapping)
       operator.isNumberType(obj)     -> isinstance(obj, numbers.Number)
       operator.repeat(obj, n)        -> operator.mul(obj, n)
       operator.irepeat(obj, n)       -> operator.imul(obj, n)
    1: """
       
       # Local imports
    1: from lib2to3 import fixer_base
    1: from lib2to3.fixer_util import Call, Name, String, touch_import
       
       
    1: def invocation(s):
    7:     def dec(f):
    7:         f.invocation = s
    7:         return f
    7:     return dec
       
       
    2: class FixOperator(fixer_base.BaseFix):
    1:     BM_compatible = True
    1:     order = "pre"
       
           methods = """
                     method=('isCallable'|'sequenceIncludes'
                            |'isSequenceType'|'isMappingType'|'isNumberType'
                            |'repeat'|'irepeat')
    1:               """
    1:     obj = "'(' obj=any ')'"
           PATTERN = """
                     power< module='operator'
                       trailer< '.' %(methods)s > trailer< %(obj)s > >
                     |
                     power< %(methods)s trailer< %(obj)s > >
    1:               """ % dict(methods=methods, obj=obj)
       
    1:     def transform(self, node, results):
   20:         method = self._check_method(node, results)
   20:         if method is not None:
   13:             return method(node, results)
       
    1:     @invocation("operator.contains(%s)")
           def _sequenceIncludes(self, node, results):
    3:         return self._handle_rename(node, results, u"contains")
       
    1:     @invocation("hasattr(%s, '__call__')")
           def _isCallable(self, node, results):
    1:         obj = results["obj"]
    1:         args = [obj.clone(), String(u", "), String(u"'__call__'")]
    1:         return Call(Name(u"hasattr"), args, prefix=node.prefix)
       
    1:     @invocation("operator.mul(%s)")
           def _repeat(self, node, results):
    3:         return self._handle_rename(node, results, u"mul")
       
    1:     @invocation("operator.imul(%s)")
           def _irepeat(self, node, results):
    3:         return self._handle_rename(node, results, u"imul")
       
    1:     @invocation("isinstance(%s, collections.Sequence)")
           def _isSequenceType(self, node, results):
    1:         return self._handle_type2abc(node, results, u"collections", u"Sequence")
       
    1:     @invocation("isinstance(%s, collections.Mapping)")
           def _isMappingType(self, node, results):
    1:         return self._handle_type2abc(node, results, u"collections", u"Mapping")
       
    1:     @invocation("isinstance(%s, numbers.Number)")
           def _isNumberType(self, node, results):
    1:         return self._handle_type2abc(node, results, u"numbers", u"Number")
       
    1:     def _handle_rename(self, node, results, name):
    9:         method = results["method"][0]
    9:         method.value = name
    9:         method.changed()
       
    1:     def _handle_type2abc(self, node, results, module, abc):
    3:         touch_import(None, module, node)
    3:         obj = results["obj"]
    3:         args = [obj.clone(), String(u", " + u".".join([module, abc]))]
    3:         return Call(Name(u"isinstance"), args, prefix=node.prefix)
       
    1:     def _check_method(self, node, results):
   20:         method = getattr(self, "_" + results["method"][0].value.encode("ascii"))
   20:         if callable(method):
   20:             if "module" in results:
   13:                 return method
                   else:
    7:                 sub = (unicode(results["obj"]),)
    7:                 invocation_str = unicode(method.invocation) % sub
    7:                 self.warning(node, u"You should use '%s' here." % invocation_str)
    7:         return None
