    1: import macpath
    1: from test import test_support, test_genericpath
    1: import unittest
       
       
    2: class MacPathTestCase(unittest.TestCase):
       
    1:     def test_abspath(self):
    1:         self.assertEqual(macpath.abspath("xx:yy"), "xx:yy")
       
    1:     def test_isabs(self):
    1:         isabs = macpath.isabs
    1:         self.assertTrue(isabs("xx:yy"))
    1:         self.assertTrue(isabs("xx:yy:"))
    1:         self.assertTrue(isabs("xx:"))
    1:         self.assertFalse(isabs("foo"))
    1:         self.assertFalse(isabs(":foo"))
    1:         self.assertFalse(isabs(":foo:bar"))
    1:         self.assertFalse(isabs(":foo:bar:"))
       
    1:     def test_split(self):
    1:         split = macpath.split
    1:         self.assertEqual(split("foo:bar"),
    1:                           ('foo:', 'bar'))
    1:         self.assertEqual(split("conky:mountpoint:foo:bar"),
    1:                           ('conky:mountpoint:foo', 'bar'))
       
    1:         self.assertEqual(split(":"), ('', ''))
    1:         self.assertEqual(split(":conky:mountpoint:"),
    1:                           (':conky:mountpoint', ''))
       
    1:     def test_join(self):
    1:         join = macpath.join
    1:         self.assertEqual(join('a', 'b'), ':a:b')
    1:         self.assertEqual(join(':a', 'b'), ':a:b')
    1:         self.assertEqual(join(':a:', 'b'), ':a:b')
    1:         self.assertEqual(join(':a::', 'b'), ':a::b')
    1:         self.assertEqual(join(':a', '::b'), ':a::b')
    1:         self.assertEqual(join('a', ':'), ':a:')
    1:         self.assertEqual(join('a:', ':'), 'a:')
    1:         self.assertEqual(join('a', ''), ':a:')
    1:         self.assertEqual(join('a:', ''), 'a:')
    1:         self.assertEqual(join('', ''), '')
    1:         self.assertEqual(join('', 'a:b'), 'a:b')
    1:         self.assertEqual(join('', 'a', 'b'), ':a:b')
    1:         self.assertEqual(join('a:b', 'c'), 'a:b:c')
    1:         self.assertEqual(join('a:b', ':c'), 'a:b:c')
    1:         self.assertEqual(join('a', ':b', ':c'), ':a:b:c')
    1:         self.assertEqual(join('a', 'b:'), 'b:')
    1:         self.assertEqual(join('a:', 'b:'), 'b:')
       
    1:     def test_splitext(self):
    1:         splitext = macpath.splitext
    1:         self.assertEqual(splitext(":foo.ext"), (':foo', '.ext'))
    1:         self.assertEqual(splitext("foo:foo.ext"), ('foo:foo', '.ext'))
    1:         self.assertEqual(splitext(".ext"), ('.ext', ''))
    1:         self.assertEqual(splitext("foo.ext:foo"), ('foo.ext:foo', ''))
    1:         self.assertEqual(splitext(":foo.ext:"), (':foo.ext:', ''))
    1:         self.assertEqual(splitext(""), ('', ''))
    1:         self.assertEqual(splitext("foo.bar.ext"), ('foo.bar', '.ext'))
       
    1:     @test_support.requires_unicode
           def test_normpath(self):
               # Issue 5827: Make sure normpath preserves unicode
    7:         for path in (u'', u'.', u'/', u'\\', u':', u'///foo/.//bar//'):
    6:             self.assertIsInstance(macpath.normpath(path), unicode,
    6:                                   'normpath() returned str instead of unicode')
       
    2: class MacCommonTest(test_genericpath.CommonTest):
    1:     pathmodule = macpath
       
       
    1: def test_main():
    1:     test_support.run_unittest(MacPathTestCase, MacCommonTest)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
