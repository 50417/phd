       # -*- coding: utf-8 -*-
       
    1: import mimetypes
    1: import StringIO
    1: import unittest
    1: import sys
       
    1: from test import test_support
       
       # Tell it we don't know about external files:
    1: mimetypes.knownfiles = []
    1: mimetypes.inited = False
    1: mimetypes._default_mime_types()
       
       
    2: class MimeTypesTestCase(unittest.TestCase):
    1:     def setUp(self):
    5:         self.db = mimetypes.MimeTypes()
       
    1:     def test_default_data(self):
    1:         eq = self.assertEqual
    1:         eq(self.db.guess_type("foo.html"), ("text/html", None))
    1:         eq(self.db.guess_type("foo.tgz"), ("application/x-tar", "gzip"))
    1:         eq(self.db.guess_type("foo.tar.gz"), ("application/x-tar", "gzip"))
    1:         eq(self.db.guess_type("foo.tar.Z"), ("application/x-tar", "compress"))
    1:         eq(self.db.guess_type("foo.tar.bz2"), ("application/x-tar", "bzip2"))
    1:         eq(self.db.guess_type("foo.tar.xz"), ("application/x-tar", "xz"))
       
    1:     def test_data_urls(self):
    1:         eq = self.assertEqual
    1:         guess_type = self.db.guess_type
    1:         eq(guess_type("data:,thisIsTextPlain"), ("text/plain", None))
    1:         eq(guess_type("data:;base64,thisIsTextPlain"), ("text/plain", None))
    1:         eq(guess_type("data:text/x-foo,thisIsTextXFoo"), ("text/x-foo", None))
       
    1:     def test_file_parsing(self):
    1:         eq = self.assertEqual
    1:         sio = StringIO.StringIO("x-application/x-unittest pyunit\n")
    1:         self.db.readfp(sio)
    1:         eq(self.db.guess_type("foo.pyunit"),
    1:            ("x-application/x-unittest", None))
    1:         eq(self.db.guess_extension("x-application/x-unittest"), ".pyunit")
       
    1:     def test_non_standard_types(self):
    1:         eq = self.assertEqual
               # First try strict
    1:         eq(self.db.guess_type('foo.xul', strict=True), (None, None))
    1:         eq(self.db.guess_extension('image/jpg', strict=True), None)
               # And then non-strict
    1:         eq(self.db.guess_type('foo.xul', strict=False), ('text/xul', None))
    1:         eq(self.db.guess_extension('image/jpg', strict=False), '.jpg')
       
    1:     def test_guess_all_types(self):
    1:         eq = self.assertEqual
    1:         unless = self.assertTrue
               # First try strict.  Use a set here for testing the results because if
               # test_urllib2 is run before test_mimetypes, global state is modified
               # such that the 'all' set will have more items in it.
    1:         all = set(self.db.guess_all_extensions('text/plain', strict=True))
    1:         unless(all >= set(['.bat', '.c', '.h', '.ksh', '.pl', '.txt']))
               # And now non-strict
    1:         all = self.db.guess_all_extensions('image/jpg', strict=False)
    1:         all.sort()
    1:         eq(all, ['.jpg'])
               # And now for no hits
    1:         all = self.db.guess_all_extensions('image/jpg', strict=True)
    1:         eq(all, [])
       
       
    2: @unittest.skipUnless(sys.platform.startswith("win"), "Windows only")
    1: class Win32MimeTypesTestCase(unittest.TestCase):
    1:     def setUp(self):
               # ensure all entries actually come from the Windows registry
>>>>>>         self.original_types_map = mimetypes.types_map.copy()
>>>>>>         mimetypes.types_map.clear()
       
    1:     def tearDown(self):
               # restore default settings
>>>>>>         mimetypes.types_map.clear()
>>>>>>         mimetypes.types_map.update(self.original_types_map)
       
    1:     def test_registry_parsing(self):
               # the original, minimum contents of the MIME database in the
               # Windows registry is undocumented AFAIK.
               # Use file types that should *always* exist:
>>>>>>         eq = self.assertEqual
>>>>>>         mimetypes.init()
>>>>>>         db = mimetypes.MimeTypes()
>>>>>>         eq(db.guess_type("foo.txt"), ("text/plain", None))
>>>>>>         eq(db.guess_type("image.jpg"), ("image/jpeg", None))
>>>>>>         eq(db.guess_type("image.png"), ("image/png", None))
       
    1:     def test_non_latin_extension(self):
>>>>>>         import _winreg
       
>>>>>>         class MockWinreg(object):
>>>>>>             def __getattr__(self, name):
>>>>>>                 if name == 'EnumKey':
>>>>>>                     return lambda key, i: _winreg.EnumKey(key, i) + "\xa3"
>>>>>>                 elif name == 'OpenKey':
>>>>>>                     return lambda key, name: _winreg.OpenKey(key, name.rstrip("\xa3"))
>>>>>>                 elif name == 'QueryValueEx':
>>>>>>                     return lambda subkey, label: (u'текст/простой' , _winreg.REG_SZ)
>>>>>>                 return getattr(_winreg, name)
       
>>>>>>         mimetypes._winreg = MockWinreg()
>>>>>>         try:
                   # this used to throw an exception if registry contained non-Latin
                   # characters in extensions (issue #9291)
>>>>>>             mimetypes.init()
               finally:
>>>>>>             mimetypes._winreg = _winreg
       
    1:     def test_non_latin_type(self):
>>>>>>         import _winreg
       
>>>>>>         class MockWinreg(object):
>>>>>>             def __getattr__(self, name):
>>>>>>                 if name == 'QueryValueEx':
>>>>>>                     return lambda subkey, label: (u'текст/простой', _winreg.REG_SZ)
>>>>>>                 return getattr(_winreg, name)
       
>>>>>>         mimetypes._winreg = MockWinreg()
>>>>>>         try:
                   # this used to throw an exception if registry contained non-Latin
                   # characters in content types (issue #9291)
>>>>>>             mimetypes.init()
               finally:
>>>>>>             mimetypes._winreg = _winreg
       
    1:     def test_type_map_values(self):
>>>>>>         import _winreg
       
>>>>>>         class MockWinreg(object):
>>>>>>             def __getattr__(self, name):
>>>>>>                 if name == 'QueryValueEx':
>>>>>>                     return lambda subkey, label: (u'text/plain', _winreg.REG_SZ)
>>>>>>                 return getattr(_winreg, name)
       
>>>>>>         mimetypes._winreg = MockWinreg()
>>>>>>         try:
>>>>>>             mimetypes.init()
>>>>>>             self.assertTrue(isinstance(mimetypes.types_map.values()[0], str))
               finally:
>>>>>>             mimetypes._winreg = _winreg
       
    1:     def test_registry_read_error(self):
>>>>>>         import _winreg
       
>>>>>>         class MockWinreg(object):
>>>>>>             def OpenKey(self, key, name):
>>>>>>                 if key != _winreg.HKEY_CLASSES_ROOT:
>>>>>>                     raise WindowsError(5, "Access is denied")
>>>>>>                 return _winreg.OpenKey(key, name)
>>>>>>             def __getattr__(self, name):
>>>>>>                 return getattr(_winreg, name)
       
>>>>>>         mimetypes._winreg = MockWinreg()
>>>>>>         try:
>>>>>>             mimetypes.init()
               finally:
>>>>>>             mimetypes._winreg = _winreg
       
    1: def test_main():
    1:     test_support.run_unittest(MimeTypesTestCase,
    1:         Win32MimeTypesTestCase
           )
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
