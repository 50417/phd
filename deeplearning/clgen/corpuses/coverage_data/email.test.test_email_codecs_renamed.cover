       # Copyright (C) 2002-2006 Python Software Foundation
       # Contact: email-sig@python.org
       # email package unit tests for (optional) Asian codecs
       
    1: import unittest
    1: from test.test_support import run_unittest
       
    1: from email.test.test_email import TestEmailBase
    1: from email.charset import Charset
    1: from email.header import Header, decode_header
    1: from email.message import Message
       
       # We're compatible with Python 2.3, but it doesn't have the built-in Asian
       # codecs, so we have to skip all these tests.
    1: try:
    1:     unicode('foo', 'euc-jp')
>>>>>> except LookupError:
>>>>>>     raise unittest.SkipTest
       
       
       
    2: class TestEmailAsianCodecs(TestEmailBase):
    1:     def test_japanese_codecs(self):
    1:         eq = self.ndiffAssertEqual
    1:         j = Charset("euc-jp")
    1:         g = Charset("iso-8859-1")
    1:         h = Header("Hello World!")
    1:         jhello = '\xa5\xcf\xa5\xed\xa1\xbc\xa5\xef\xa1\xbc\xa5\xeb\xa5\xc9\xa1\xaa'
    1:         ghello = 'Gr\xfc\xdf Gott!'
    1:         h.append(jhello, j)
    1:         h.append(ghello, g)
               # BAW: This used to -- and maybe should -- fold the two iso-8859-1
               # chunks into a single encoded word.  However it doesn't violate the
               # standard to have them as two encoded chunks and maybe it's
               # reasonable <wink> for each .append() call to result in a separate
               # encoded word.
    1:         eq(h.encode(), """\
       Hello World! =?iso-2022-jp?b?GyRCJU8lbSE8JW8hPCVrJUkhKhsoQg==?=
    1:  =?iso-8859-1?q?Gr=FC=DF?= =?iso-8859-1?q?_Gott!?=""")
    1:         eq(decode_header(h.encode()),
    1:            [('Hello World!', None),
    1:             ('\x1b$B%O%m!<%o!<%k%I!*\x1b(B', 'iso-2022-jp'),
    1:             ('Gr\xfc\xdf Gott!', 'iso-8859-1')])
    1:         long = 'test-ja \xa4\xd8\xc5\xea\xb9\xc6\xa4\xb5\xa4\xec\xa4\xbf\xa5\xe1\xa1\xbc\xa5\xeb\xa4\xcf\xbb\xca\xb2\xf1\xbc\xd4\xa4\xce\xbe\xb5\xc7\xa7\xa4\xf2\xc2\xd4\xa4\xc3\xa4\xc6\xa4\xa4\xa4\xde\xa4\xb9'
    1:         h = Header(long, j, header_name="Subject")
               # test a very long header
    1:         enc = h.encode()
               # TK: splitting point may differ by codec design and/or Header encoding
    1:         eq(enc , """\
       =?iso-2022-jp?b?dGVzdC1qYSAbJEIkWEVqOUYkNSRsJD8lYSE8JWskTztKGyhC?=
    1:  =?iso-2022-jp?b?GyRCMnE8VCROPjVHJyRyQlQkQyRGJCQkXiQ5GyhC?=""")
               # TK: full decode comparison
    1:         eq(h.__unicode__().encode('euc-jp'), long)
       
    1:     def test_payload_encoding(self):
    1:         jhello = '\xa5\xcf\xa5\xed\xa1\xbc\xa5\xef\xa1\xbc\xa5\xeb\xa5\xc9\xa1\xaa'
    1:         jcode  = 'euc-jp'
    1:         msg = Message()
    1:         msg.set_payload(jhello, jcode)
    1:         ustr = unicode(msg.get_payload(), msg.get_content_charset())
    1:         self.assertEqual(jhello, ustr.encode(jcode))
       
       
       
    1: def suite():
    1:     suite = unittest.TestSuite()
    1:     suite.addTest(unittest.makeSuite(TestEmailAsianCodecs))
    1:     return suite
       
       
    1: def test_main():
>>>>>>     run_unittest(TestEmailAsianCodecs)
       
       
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main(defaultTest='suite')
