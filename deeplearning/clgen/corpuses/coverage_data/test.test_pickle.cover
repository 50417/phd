    1: import pickle
    1: import struct
    1: from cStringIO import StringIO
       
    1: from test import test_support
       
    1: from test.pickletester import (AbstractUnpickleTests,
                                      AbstractPickleTests,
                                      AbstractPickleModuleTests,
                                      AbstractPersistentPicklerTests,
                                      AbstractPicklerUnpicklerObjectTests,
                                      BigmemPickleTests)
       
    2: class PickleTests(AbstractUnpickleTests, AbstractPickleTests,
    1:                   AbstractPickleModuleTests):
       
    1:     def dumps(self, arg, proto=0, fast=0):
               # Ignore fast
  803:         return pickle.dumps(arg, proto)
       
    1:     def loads(self, buf):
               # Ignore fast
  963:         return pickle.loads(buf)
       
    1:     module = pickle
    1:     error = KeyError
    1:     bad_stack_errors = (IndexError,)
    1:     bad_mark_errors = (IndexError, pickle.UnpicklingError,
    1:                        TypeError, AttributeError, EOFError)
    1:     truncated_errors = (pickle.UnpicklingError, EOFError,
    1:                         AttributeError, ValueError,
    1:                         struct.error, IndexError, ImportError,
    1:                         TypeError, KeyError)
       
    2: class UnpicklerTests(AbstractUnpickleTests):
       
    1:     error = KeyError
    1:     bad_stack_errors = (IndexError,)
    1:     bad_mark_errors = (IndexError, pickle.UnpicklingError,
    1:                        TypeError, AttributeError, EOFError)
    1:     truncated_errors = (pickle.UnpicklingError, EOFError,
    1:                         AttributeError, ValueError,
    1:                         struct.error, IndexError, ImportError,
    1:                         TypeError, KeyError)
       
    1:     def loads(self, buf):
  169:         f = StringIO(buf)
  169:         u = pickle.Unpickler(f)
  169:         return u.load()
       
    2: class PicklerTests(AbstractPickleTests):
       
    1:     def dumps(self, arg, proto=0, fast=0):
  803:         f = StringIO()
  803:         p = pickle.Pickler(f, proto)
  803:         if fast:
>>>>>>             p.fast = fast
  803:         p.dump(arg)
  799:         f.seek(0)
  799:         return f.read()
       
    1:     def loads(self, buf):
  794:         f = StringIO(buf)
  794:         u = pickle.Unpickler(f)
  794:         return u.load()
       
    2: class PersPicklerTests(AbstractPersistentPicklerTests):
       
    1:     def dumps(self, arg, proto=0, fast=0):
    6:         class PersPickler(pickle.Pickler):
    3:             def persistent_id(subself, obj):
   48:                 return self.persistent_id(obj)
    3:         f = StringIO()
    3:         p = PersPickler(f, proto)
    3:         if fast:
>>>>>>             p.fast = fast
    3:         p.dump(arg)
    3:         f.seek(0)
    3:         return f.read()
       
    1:     def loads(self, buf):
    6:         class PersUnpickler(pickle.Unpickler):
    3:             def persistent_load(subself, obj):
   18:                 return self.persistent_load(obj)
    3:         f = StringIO(buf)
    3:         u = PersUnpickler(f)
    3:         return u.load()
       
    2: class PicklerUnpicklerObjectTests(AbstractPicklerUnpicklerObjectTests):
       
    1:     pickler_class = pickle.Pickler
    1:     unpickler_class = pickle.Unpickler
       
    2: class PickleBigmemPickleTests(BigmemPickleTests):
       
    1:     def dumps(self, arg, proto=0, fast=0):
               # Ignore fast
    3:         return pickle.dumps(arg, proto)
       
    1:     def loads(self, buf):
               # Ignore fast
    3:         return pickle.loads(buf)
       
       
    1: def test_main():
    1:     test_support.run_unittest(
    1:         PickleTests,
    1:         UnpicklerTests,
    1:         PicklerTests,
    1:         PersPicklerTests,
    1:         PicklerUnpicklerObjectTests,
    1:         PickleBigmemPickleTests,
           )
    1:     test_support.run_doctest(pickle)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
