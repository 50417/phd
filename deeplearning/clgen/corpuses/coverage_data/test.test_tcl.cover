    1: import unittest
    1: import re
    1: import sys
    1: import os
    1: from test import test_support
    1: from subprocess import Popen, PIPE
       
       # Skip this test if the _tkinter module wasn't built.
    1: _tkinter = test_support.import_module('_tkinter')
       
    1: import Tkinter as tkinter
    1: from Tkinter import Tcl
    1: from _tkinter import TclError
       
    1: try:
    1:     from _testcapi import INT_MAX, PY_SSIZE_T_MAX
>>>>>> except ImportError:
>>>>>>     INT_MAX = PY_SSIZE_T_MAX = sys.maxsize
       
    1: tcl_version = tuple(map(int, _tkinter.TCL_VERSION.split('.')))
       
    1: _tk_patchlevel = None
    1: def get_tk_patchlevel():
           global _tk_patchlevel
   11:     if _tk_patchlevel is None:
    1:         tcl = Tcl()
    1:         patchlevel = tcl.call('info', 'patchlevel')
    1:         m = re.match(r'(\d+)\.(\d+)([ab.])(\d+)$', patchlevel)
    1:         major, minor, releaselevel, serial = m.groups()
    1:         major, minor, serial = int(major), int(minor), int(serial)
    1:         releaselevel = {'a': 'alpha', 'b': 'beta', '.': 'final'}[releaselevel]
    1:         if releaselevel == 'final':
    1:             _tk_patchlevel = major, minor, serial, releaselevel, 0
               else:
>>>>>>             _tk_patchlevel = major, minor, 0, releaselevel, serial
   11:     return _tk_patchlevel
       
       
    2: class TkinterTest(unittest.TestCase):
       
    1:     def testFlattenLen(self):
               # flatten(<object with no length>)
    1:         self.assertRaises(TypeError, _tkinter._flatten, True)
       
       
    2: class TclTest(unittest.TestCase):
       
    1:     def setUp(self):
   33:         self.interp = Tcl()
   33:         self.wantobjects = self.interp.tk.wantobjects()
       
    1:     def testEval(self):
    1:         tcl = self.interp
    1:         tcl.eval('set a 1')
    1:         self.assertEqual(tcl.eval('set a'),'1')
       
    1:     def testEvalException(self):
    1:         tcl = self.interp
    1:         self.assertRaises(TclError,tcl.eval,'set a')
       
    1:     def testEvalException2(self):
    1:         tcl = self.interp
    1:         self.assertRaises(TclError,tcl.eval,'this is wrong')
       
    1:     def testCall(self):
    1:         tcl = self.interp
    1:         tcl.call('set','a','1')
    1:         self.assertEqual(tcl.call('set','a'),'1')
       
    1:     def testCallException(self):
    1:         tcl = self.interp
    1:         self.assertRaises(TclError,tcl.call,'set','a')
       
    1:     def testCallException2(self):
    1:         tcl = self.interp
    1:         self.assertRaises(TclError,tcl.call,'this','is','wrong')
       
    1:     def testSetVar(self):
    1:         tcl = self.interp
    1:         tcl.setvar('a','1')
    1:         self.assertEqual(tcl.eval('set a'),'1')
       
    1:     def testSetVarArray(self):
    1:         tcl = self.interp
    1:         tcl.setvar('a(1)','1')
    1:         self.assertEqual(tcl.eval('set a(1)'),'1')
       
    1:     def testGetVar(self):
    1:         tcl = self.interp
    1:         tcl.eval('set a 1')
    1:         self.assertEqual(tcl.getvar('a'),'1')
       
    1:     def testGetVarArray(self):
    1:         tcl = self.interp
    1:         tcl.eval('set a(1) 1')
    1:         self.assertEqual(tcl.getvar('a(1)'),'1')
       
    1:     def testGetVarException(self):
    1:         tcl = self.interp
    1:         self.assertRaises(TclError,tcl.getvar,'a')
       
    1:     def testGetVarArrayException(self):
    1:         tcl = self.interp
    1:         self.assertRaises(TclError,tcl.getvar,'a(1)')
       
    1:     def testUnsetVar(self):
    1:         tcl = self.interp
    1:         tcl.setvar('a',1)
    1:         self.assertEqual(tcl.eval('info exists a'),'1')
    1:         tcl.unsetvar('a')
    1:         self.assertEqual(tcl.eval('info exists a'),'0')
       
    1:     def testUnsetVarArray(self):
    1:         tcl = self.interp
    1:         tcl.setvar('a(1)',1)
    1:         tcl.setvar('a(2)',2)
    1:         self.assertEqual(tcl.eval('info exists a(1)'),'1')
    1:         self.assertEqual(tcl.eval('info exists a(2)'),'1')
    1:         tcl.unsetvar('a(1)')
    1:         self.assertEqual(tcl.eval('info exists a(1)'),'0')
    1:         self.assertEqual(tcl.eval('info exists a(2)'),'1')
       
    1:     def testUnsetVarException(self):
    1:         tcl = self.interp
    1:         self.assertRaises(TclError,tcl.unsetvar,'a')
       
    1:     def get_integers(self):
    4:         integers = (0, 1, -1, 2**31-1, -2**31)
    4:         if tcl_version >= (8, 4):  # wideInt was added in Tcl 8.4
    4:             integers += (2**31, -2**31-1, 2**63-1, -2**63)
               # bignum was added in Tcl 8.5, but its support is able only since 8.5.8
    4:         if (get_tk_patchlevel() >= (8, 6, 0, 'final') or
    4:             (8, 5, 8) <= get_tk_patchlevel() < (8, 6)):
    4:             integers += (2**63, -2**63-1, 2**1000, -2**1000)
    4:         return integers
       
    1:     def test_getint(self):
    1:         tcl = self.interp.tk
   14:         for i in self.get_integers():
   13:             result = tcl.getint(' %d ' % i)
   13:             self.assertEqual(result, i)
   13:             self.assertIsInstance(result, type(int(result)))
   13:             if tcl_version >= (8, 5):
   13:                 self.assertEqual(tcl.getint(' {:#o} '.format(i)), i)
   13:             self.assertEqual(tcl.getint(' %#o ' % i), i)
   13:             self.assertEqual(tcl.getint(' %#x ' % i), i)
    1:         if tcl_version < (8, 5):  # bignum was added in Tcl 8.5
>>>>>>             self.assertRaises(TclError, tcl.getint, str(2**1000))
    1:         self.assertEqual(tcl.getint(42), 42)
    1:         self.assertRaises(TypeError, tcl.getint)
    1:         self.assertRaises(TypeError, tcl.getint, '42', '10')
    1:         self.assertRaises(TypeError, tcl.getint, 42.0)
    1:         self.assertRaises(TclError, tcl.getint, 'a')
    1:         self.assertRaises((TypeError, ValueError, TclError),
    1:                           tcl.getint, '42\0')
    1:         if test_support.have_unicode:
    1:             self.assertEqual(tcl.getint(unicode('42')), 42)
    1:             self.assertRaises((UnicodeEncodeError, ValueError, TclError),
    1:                               tcl.getint, '42' + unichr(0xd800))
       
    1:     def test_getdouble(self):
    1:         tcl = self.interp.tk
    1:         self.assertEqual(tcl.getdouble(' 42 '), 42.0)
    1:         self.assertEqual(tcl.getdouble(' 42.5 '), 42.5)
    1:         self.assertEqual(tcl.getdouble(42.5), 42.5)
    1:         self.assertRaises(TypeError, tcl.getdouble)
    1:         self.assertRaises(TypeError, tcl.getdouble, '42.5', '10')
    1:         self.assertRaises(TypeError, tcl.getdouble, 42)
    1:         self.assertRaises(TclError, tcl.getdouble, 'a')
    1:         self.assertRaises((TypeError, ValueError, TclError),
    1:                           tcl.getdouble, '42.5\0')
    1:         if test_support.have_unicode:
    1:             self.assertEqual(tcl.getdouble(unicode('42.5')), 42.5)
    1:             self.assertRaises((UnicodeEncodeError, ValueError, TclError),
    1:                               tcl.getdouble, '42.5' + unichr(0xd800))
       
    1:     def test_getboolean(self):
    1:         tcl = self.interp.tk
    1:         self.assertIs(tcl.getboolean('on'), True)
    1:         self.assertIs(tcl.getboolean('1'), True)
    1:         self.assertIs(tcl.getboolean(u'on'), True)
    1:         self.assertIs(tcl.getboolean(u'1'), True)
    1:         self.assertIs(tcl.getboolean(42), True)
    1:         self.assertIs(tcl.getboolean(0), False)
    1:         self.assertIs(tcl.getboolean(42L), True)
    1:         self.assertIs(tcl.getboolean(0L), False)
    1:         self.assertRaises(TypeError, tcl.getboolean)
    1:         self.assertRaises(TypeError, tcl.getboolean, 'on', '1')
    1:         self.assertRaises(TypeError, tcl.getboolean, 1.0)
    1:         self.assertRaises(TclError, tcl.getboolean, 'a')
    1:         self.assertRaises((TypeError, ValueError, TclError),
    1:                           tcl.getboolean, 'on\0')
    1:         if test_support.have_unicode:
    1:             self.assertIs(tcl.getboolean(unicode('on')), True)
    1:             self.assertRaises((UnicodeEncodeError, ValueError, TclError),
    1:                               tcl.getboolean, 'on' + unichr(0xd800))
       
    1:     def testEvalFile(self):
    1:         tcl = self.interp
    1:         filename = "testEvalFile.tcl"
    1:         fd = open(filename,'w')
               script = """set a 1
               set b 2
               set c [ expr $a + $b ]
    1:         """
    1:         fd.write(script)
    1:         fd.close()
    1:         tcl.evalfile(filename)
    1:         os.remove(filename)
    1:         self.assertEqual(tcl.eval('set a'),'1')
    1:         self.assertEqual(tcl.eval('set b'),'2')
    1:         self.assertEqual(tcl.eval('set c'),'3')
       
    1:     def test_evalfile_null_in_result(self):
    1:         tcl = self.interp
    1:         with open(test_support.TESTFN, 'wb') as f:
    1:             self.addCleanup(test_support.unlink, test_support.TESTFN)
    1:             f.write("""
                   set a "a\0b"
                   set b "a\\0b"
    1:             """)
    1:         tcl.evalfile(test_support.TESTFN)
    1:         self.assertEqual(tcl.eval('set a'), 'a\xc0\x80b')
    1:         self.assertEqual(tcl.eval('set b'), 'a\xc0\x80b')
       
    1:     def testEvalFileException(self):
    1:         tcl = self.interp
    1:         filename = "doesnotexists"
    1:         try:
    1:             os.remove(filename)
    1:         except Exception,e:
    1:             pass
    1:         self.assertRaises(TclError,tcl.evalfile,filename)
       
    1:     def testPackageRequireException(self):
    1:         tcl = self.interp
    1:         self.assertRaises(TclError,tcl.eval,'package require DNE')
       
    1:     @unittest.skipUnless(sys.platform == 'win32', "only applies to Windows")
           def testLoadWithUNC(self):
               # Build a UNC path from the regular path.
               # Something like
               #   \\%COMPUTERNAME%\c$\python27\python.exe
       
>>>>>>         fullname = os.path.abspath(sys.executable)
>>>>>>         if fullname[1] != ':':
>>>>>>             self.skipTest('unusable path: %r' % fullname)
>>>>>>         unc_name = r'\\%s\%s$\%s' % (os.environ['COMPUTERNAME'],
>>>>>>                                     fullname[0],
>>>>>>                                     fullname[3:])
       
>>>>>>         with test_support.EnvironmentVarGuard() as env:
>>>>>>             env.unset("TCL_LIBRARY")
>>>>>>             cmd = '%s -c "import Tkinter; print Tkinter"' % (unc_name,)
       
>>>>>>             try:
>>>>>>                 p = Popen(cmd, stdout=PIPE, stderr=PIPE)
>>>>>>             except WindowsError as e:
>>>>>>                 if e.winerror == 5 or e.winerror == 2:
>>>>>>                     self.skipTest('Not permitted to start the child process')
                       else:
>>>>>>                     raise
       
>>>>>>             out_data, err_data = p.communicate()
       
>>>>>>             msg = '\n\n'.join(['"Tkinter.py" not in output',
>>>>>>                                'Command:', cmd,
>>>>>>                                'stdout:', out_data,
>>>>>>                                'stderr:', err_data])
       
>>>>>>             self.assertIn('Tkinter.py', out_data, msg)
       
>>>>>>             self.assertEqual(p.wait(), 0, 'Non-zero exit code')
       
       
    1:     def test_exprstring(self):
    1:         tcl = self.interp
    1:         tcl.call('set', 'a', 3)
    1:         tcl.call('set', 'b', 6)
    1:         def check(expr, expected):
   20:             result = tcl.exprstring(expr)
   20:             self.assertEqual(result, expected)
   20:             self.assertIsInstance(result, str)
       
    1:         self.assertRaises(TypeError, tcl.exprstring)
    1:         self.assertRaises(TypeError, tcl.exprstring, '8.2', '+6')
    1:         self.assertRaises(TclError, tcl.exprstring, 'spam')
    1:         check('', '0')
    1:         check('8.2 + 6', '14.2')
    1:         check('3.1 + $a', '6.1')
    1:         check('2 + "$a.$b"', '5.6')
    1:         check('4*[llength "6 2"]', '8')
    1:         check('{word one} < "word $a"', '0')
    1:         check('4*2 < 7', '0')
    1:         check('hypot($a, 4)', '5.0')
    1:         check('5 / 4', '1')
    1:         check('5 / 4.0', '1.25')
    1:         check('5 / ( [string length "abcd"] + 0.0 )', '1.25')
    1:         check('20.0/5.0', '4.0')
    1:         check('"0x03" > "2"', '1')
    1:         check('[string length "a\xc2\xbd\xe2\x82\xac"]', '3')
    1:         check(r'[string length "a\xbd\u20ac"]', '3')
    1:         check('"abc"', 'abc')
    1:         check('"a\xc2\xbd\xe2\x82\xac"', 'a\xc2\xbd\xe2\x82\xac')
    1:         check(r'"a\xbd\u20ac"', 'a\xc2\xbd\xe2\x82\xac')
    1:         check(r'"a\0b"', 'a\xc0\x80b')
    1:         if tcl_version >= (8, 5):  # bignum was added in Tcl 8.5
    1:             check('2**64', str(2**64))
       
    1:     def test_exprdouble(self):
    1:         tcl = self.interp
    1:         tcl.call('set', 'a', 3)
    1:         tcl.call('set', 'b', 6)
    1:         def check(expr, expected):
   16:             result = tcl.exprdouble(expr)
   16:             self.assertEqual(result, expected)
   16:             self.assertIsInstance(result, float)
       
    1:         self.assertRaises(TypeError, tcl.exprdouble)
    1:         self.assertRaises(TypeError, tcl.exprdouble, '8.2', '+6')
    1:         self.assertRaises(TclError, tcl.exprdouble, 'spam')
    1:         check('', 0.0)
    1:         check('8.2 + 6', 14.2)
    1:         check('3.1 + $a', 6.1)
    1:         check('2 + "$a.$b"', 5.6)
    1:         check('4*[llength "6 2"]', 8.0)
    1:         check('{word one} < "word $a"', 0.0)
    1:         check('4*2 < 7', 0.0)
    1:         check('hypot($a, 4)', 5.0)
    1:         check('5 / 4', 1.0)
    1:         check('5 / 4.0', 1.25)
    1:         check('5 / ( [string length "abcd"] + 0.0 )', 1.25)
    1:         check('20.0/5.0', 4.0)
    1:         check('"0x03" > "2"', 1.0)
    1:         check('[string length "a\xc2\xbd\xe2\x82\xac"]', 3.0)
    1:         check(r'[string length "a\xbd\u20ac"]', 3.0)
    1:         self.assertRaises(TclError, tcl.exprdouble, '"abc"')
    1:         if tcl_version >= (8, 5):  # bignum was added in Tcl 8.5
    1:             check('2**64', float(2**64))
       
    1:     def test_exprlong(self):
    1:         tcl = self.interp
    1:         tcl.call('set', 'a', 3)
    1:         tcl.call('set', 'b', 6)
    1:         def check(expr, expected):
   15:             result = tcl.exprlong(expr)
   15:             self.assertEqual(result, expected)
   15:             self.assertIsInstance(result, int)
       
    1:         self.assertRaises(TypeError, tcl.exprlong)
    1:         self.assertRaises(TypeError, tcl.exprlong, '8.2', '+6')
    1:         self.assertRaises(TclError, tcl.exprlong, 'spam')
    1:         check('', 0)
    1:         check('8.2 + 6', 14)
    1:         check('3.1 + $a', 6)
    1:         check('2 + "$a.$b"', 5)
    1:         check('4*[llength "6 2"]', 8)
    1:         check('{word one} < "word $a"', 0)
    1:         check('4*2 < 7', 0)
    1:         check('hypot($a, 4)', 5)
    1:         check('5 / 4', 1)
    1:         check('5 / 4.0', 1)
    1:         check('5 / ( [string length "abcd"] + 0.0 )', 1)
    1:         check('20.0/5.0', 4)
    1:         check('"0x03" > "2"', 1)
    1:         check('[string length "a\xc2\xbd\xe2\x82\xac"]', 3)
    1:         check(r'[string length "a\xbd\u20ac"]', 3)
    1:         self.assertRaises(TclError, tcl.exprlong, '"abc"')
    1:         if tcl_version >= (8, 5):  # bignum was added in Tcl 8.5
    1:             self.assertRaises(TclError, tcl.exprlong, '2**64')
       
    1:     def test_exprboolean(self):
    1:         tcl = self.interp
    1:         tcl.call('set', 'a', 3)
    1:         tcl.call('set', 'b', 6)
    1:         def check(expr, expected):
   40:             result = tcl.exprboolean(expr)
   40:             self.assertEqual(result, expected)
   40:             self.assertIsInstance(result, int)
   40:             self.assertNotIsInstance(result, bool)
       
    1:         self.assertRaises(TypeError, tcl.exprboolean)
    1:         self.assertRaises(TypeError, tcl.exprboolean, '8.2', '+6')
    1:         self.assertRaises(TclError, tcl.exprboolean, 'spam')
    1:         check('', False)
    5:         for value in ('0', 'false', 'no', 'off'):
    4:             check(value, False)
    4:             check('"%s"' % value, False)
    4:             check('{%s}' % value, False)
    5:         for value in ('1', 'true', 'yes', 'on'):
    4:             check(value, True)
    4:             check('"%s"' % value, True)
    4:             check('{%s}' % value, True)
    1:         check('8.2 + 6', True)
    1:         check('3.1 + $a', True)
    1:         check('2 + "$a.$b"', True)
    1:         check('4*[llength "6 2"]', True)
    1:         check('{word one} < "word $a"', False)
    1:         check('4*2 < 7', False)
    1:         check('hypot($a, 4)', True)
    1:         check('5 / 4', True)
    1:         check('5 / 4.0', True)
    1:         check('5 / ( [string length "abcd"] + 0.0 )', True)
    1:         check('20.0/5.0', True)
    1:         check('"0x03" > "2"', True)
    1:         check('[string length "a\xc2\xbd\xe2\x82\xac"]', True)
    1:         check(r'[string length "a\xbd\u20ac"]', True)
    1:         self.assertRaises(TclError, tcl.exprboolean, '"abc"')
    1:         if tcl_version >= (8, 5):  # bignum was added in Tcl 8.5
    1:             check('2**64', True)
       
    1:     @unittest.skipUnless(tcl_version >= (8, 5), 'requires Tcl version >= 8.5')
           def test_booleans(self):
    1:         tcl = self.interp
    1:         def check(expr, expected):
    8:             result = tcl.call('expr', expr)
    8:             if tcl.wantobjects():
    8:                 self.assertEqual(result, expected)
    8:                 self.assertIsInstance(result, int)
                   else:
>>>>>>                 self.assertIn(result, (expr, str(int(expected))))
>>>>>>                 self.assertIsInstance(result, str)
    1:         check('true', True)
    1:         check('yes', True)
    1:         check('on', True)
    1:         check('false', False)
    1:         check('no', False)
    1:         check('off', False)
    1:         check('1 < 2', True)
    1:         check('1 > 2', False)
       
    1:     def test_expr_bignum(self):
    1:         tcl = self.interp
   14:         for i in self.get_integers():
   13:             result = tcl.call('expr', str(i))
   13:             if self.wantobjects:
   13:                 self.assertEqual(result, i)
   13:                 self.assertIsInstance(result, (int, long))
   13:                 if abs(result) < 2**31:
    4:                     self.assertIsInstance(result, int)
                   else:
>>>>>>                 self.assertEqual(result, str(i))
>>>>>>                 self.assertIsInstance(result, str)
    1:         if tcl_version < (8, 5):  # bignum was added in Tcl 8.5
>>>>>>             self.assertRaises(TclError, tcl.call, 'expr', str(2**1000))
       
    1:     def test_passing_values(self):
    1:         def passValue(value):
   39:             return self.interp.call('set', '_', value)
       
    1:         self.assertEqual(passValue(True), True if self.wantobjects else '1')
    1:         self.assertEqual(passValue(False), False if self.wantobjects else '0')
    1:         self.assertEqual(passValue('string'), 'string')
    1:         self.assertEqual(passValue('string\xbd'), 'string\xbd')
    1:         self.assertEqual(passValue('string\xe2\x82\xac'), u'string\u20ac')
    1:         self.assertEqual(passValue(u'string'), u'string')
    1:         self.assertEqual(passValue(u'string\xbd'), u'string\xbd')
    1:         self.assertEqual(passValue(u'string\u20ac'), u'string\u20ac')
    1:         self.assertEqual(passValue('str\x00ing'), 'str\x00ing')
    1:         self.assertEqual(passValue('str\xc0\x80ing'), 'str\x00ing')
    1:         self.assertEqual(passValue(u'str\x00ing'), u'str\x00ing')
    1:         self.assertEqual(passValue(u'str\x00ing\xbd'), u'str\x00ing\xbd')
    1:         self.assertEqual(passValue(u'str\x00ing\u20ac'), u'str\x00ing\u20ac')
   14:         for i in self.get_integers():
   13:             self.assertEqual(passValue(i), i if self.wantobjects else str(i))
    1:         if tcl_version < (8, 5):  # bignum was added in Tcl 8.5
>>>>>>             self.assertEqual(passValue(2**1000), str(2**1000))
    1:         for f in (0.0, 1.0, -1.0, 1//3, 1/3.0,
    1:                   sys.float_info.min, sys.float_info.max,
   10:                   -sys.float_info.min, -sys.float_info.max):
    9:             if self.wantobjects:
    9:                 self.assertEqual(passValue(f), f)
                   else:
>>>>>>                 self.assertEqual(float(passValue(f)), f)
    1:         if self.wantobjects:
    1:             f = passValue(float('nan'))
    1:             self.assertNotEqual(f, f)
    1:             self.assertEqual(passValue(float('inf')), float('inf'))
    1:             self.assertEqual(passValue(-float('inf')), -float('inf'))
               else:
>>>>>>             self.assertEqual(float(passValue(float('inf'))), float('inf'))
>>>>>>             self.assertEqual(float(passValue(-float('inf'))), -float('inf'))
                   # XXX NaN representation can be not parsable by float()
    1:         self.assertEqual(passValue((1, '2', (3.4,))),
    1:                          (1, '2', (3.4,)) if self.wantobjects else '1 2 3.4')
       
    1:     def test_user_command(self):
    1:         result = []
    1:         def testfunc(arg):
   40:             result.append(arg)
   40:             return arg
    1:         self.interp.createcommand('testfunc', testfunc)
    1:         self.addCleanup(self.interp.tk.deletecommand, 'testfunc')
    1:         def check(value, expected=None, eq=self.assertEqual):
   40:             if expected is None:
   17:                 expected = value
   40:             del result[:]
   40:             r = self.interp.call('testfunc', value)
   40:             self.assertEqual(len(result), 1)
   40:             self.assertIsInstance(result[0], (str, unicode))
   40:             eq(result[0], expected)
   40:             self.assertIsInstance(r, (str, unicode))
   40:             eq(r, expected)
    1:         def float_eq(actual, expected):
   14:             self.assertAlmostEqual(float(actual), expected,
   14:                                    delta=abs(expected) * 1e-10)
       
    1:         check(True, '1')
    1:         check(False, '0')
    1:         check('string')
    1:         check('string\xbd')
    1:         check('string\xe2\x82\xac', u'string\u20ac')
    1:         check('')
    1:         check(u'string')
    1:         check(u'string\xbd')
    1:         check(u'string\u20ac')
    1:         check(u'')
    1:         check('str\xc0\x80ing', u'str\x00ing')
    1:         check('str\xc0\x80ing\xe2\x82\xac', u'str\x00ing\u20ac')
    1:         check(u'str\x00ing')
    1:         check(u'str\x00ing\xbd')
    1:         check(u'str\x00ing\u20ac')
   14:         for i in self.get_integers():
   13:             check(i, str(i))
    1:         if tcl_version < (8, 5):  # bignum was added in Tcl 8.5
>>>>>>             check(2**1000, str(2**1000))
    4:         for f in (0.0, 1.0, -1.0):
    3:             check(f, repr(f))
    1:         for f in (1/3.0, sys.float_info.min, sys.float_info.max,
    6:                   -sys.float_info.min, -sys.float_info.max):
    5:             check(f, eq=float_eq)
    1:         check(float('inf'), eq=float_eq)
    1:         check(-float('inf'), eq=float_eq)
               # XXX NaN representation can be not parsable by float()
    1:         check((), '')
    1:         check((1, (2,), (3, 4), '5 6', ()), '1 2 {3 4} {5 6} {}')
       
    1:     def test_splitlist(self):
    1:         splitlist = self.interp.tk.splitlist
    1:         call = self.interp.tk.call
    1:         self.assertRaises(TypeError, splitlist)
    1:         self.assertRaises(TypeError, splitlist, 'a', 'b')
    1:         self.assertRaises(TypeError, splitlist, 2)
               testcases = [
    1:             ('2', ('2',)),
    1:             ('', ()),
    1:             ('{}', ('',)),
    1:             ('""', ('',)),
    1:             ('a\n b\t\r c\n ', ('a', 'b', 'c')),
    1:             (u'a\n b\t\r c\n ', ('a', 'b', 'c')),
    1:             ('a \xe2\x82\xac', ('a', '\xe2\x82\xac')),
    1:             (u'a \u20ac', ('a', '\xe2\x82\xac')),
    1:             ('a\xc0\x80b c\xc0\x80d', ('a\xc0\x80b', 'c\xc0\x80d')),
    1:             ('a {b c}', ('a', 'b c')),
    1:             (r'a b\ c', ('a', 'b c')),
    1:             (('a', 'b c'), ('a', 'b c')),
    1:             ('a 2', ('a', '2')),
    1:             (('a', 2), ('a', 2)),
    1:             ('a 3.4', ('a', '3.4')),
    1:             (('a', 3.4), ('a', 3.4)),
    1:             ((), ()),
    1:             (call('list', 1, '2', (3.4,)),
    1:                 (1, '2', (3.4,)) if self.wantobjects else
>>>>>>                 ('1', '2', '3.4')),
               ]
    1:         if tcl_version >= (8, 5):
    1:             if not self.wantobjects:
>>>>>>                 expected = ('12', '\xe2\x82\xac', '\xe2\x82\xac', '3.4')
    1:             elif get_tk_patchlevel() < (8, 5, 5):
                       # Before 8.5.5 dicts were converted to lists through string
>>>>>>                 expected = ('12', u'\u20ac', u'\u20ac', '3.4')
                   else:
    1:                 expected = (12, u'\u20ac', u'\u20ac', (3.4,))
    1:             testcases += [
    1:                 (call('dict', 'create', 12, u'\u20ac', '\xe2\x82\xac', (3.4,)),
    1:                     expected),
                   ]
   20:         for arg, res in testcases:
   19:             self.assertEqual(splitlist(arg), res)
    1:         self.assertRaises(TclError, splitlist, '{')
       
    1:     def test_split(self):
    1:         split = self.interp.tk.split
    1:         call = self.interp.tk.call
    1:         self.assertRaises(TypeError, split)
    1:         self.assertRaises(TypeError, split, 'a', 'b')
    1:         self.assertRaises(TypeError, split, 2)
               testcases = [
    1:             ('2', '2'),
    1:             ('', ''),
    1:             ('{}', ''),
    1:             ('""', ''),
    1:             ('{', '{'),
    1:             ('a\n b\t\r c\n ', ('a', 'b', 'c')),
    1:             (u'a\n b\t\r c\n ', ('a', 'b', 'c')),
    1:             ('a \xe2\x82\xac', ('a', '\xe2\x82\xac')),
    1:             (u'a \u20ac', ('a', '\xe2\x82\xac')),
    1:             ('a\xc0\x80b', 'a\xc0\x80b'),
    1:             ('a\xc0\x80b c\xc0\x80d', ('a\xc0\x80b', 'c\xc0\x80d')),
    1:             ('a {b c}', ('a', ('b', 'c'))),
    1:             (r'a b\ c', ('a', ('b', 'c'))),
    1:             (('a', 'b c'), ('a', ('b', 'c'))),
    1:             (('a', u'b c'), ('a', ('b', 'c'))),
    1:             ('a 2', ('a', '2')),
    1:             (('a', 2), ('a', 2)),
    1:             ('a 3.4', ('a', '3.4')),
    1:             (('a', 3.4), ('a', 3.4)),
    1:             (('a', (2, 3.4)), ('a', (2, 3.4))),
    1:             ((), ()),
    1:             (call('list', 1, '2', (3.4,)),
    1:                 (1, '2', (3.4,)) if self.wantobjects else
>>>>>>                 ('1', '2', '3.4')),
               ]
    1:         if tcl_version >= (8, 5):
    1:             if not self.wantobjects:
>>>>>>                 expected = ('12', '\xe2\x82\xac', '\xe2\x82\xac', '3.4')
    1:             elif get_tk_patchlevel() < (8, 5, 5):
                       # Before 8.5.5 dicts were converted to lists through string
>>>>>>                 expected = ('12', u'\u20ac', u'\u20ac', '3.4')
                   else:
    1:                 expected = (12, u'\u20ac', u'\u20ac', (3.4,))
    1:             testcases += [
    1:                 (call('dict', 'create', 12, u'\u20ac', '\xe2\x82\xac', (3.4,)),
    1:                     expected),
                   ]
   24:         for arg, res in testcases:
   23:             self.assertEqual(split(arg), res)
       
    1:     def test_splitdict(self):
    1:         splitdict = tkinter._splitdict
    1:         tcl = self.interp.tk
       
    1:         arg = '-a {1 2 3} -something foo status {}'
    1:         self.assertEqual(splitdict(tcl, arg, False),
    1:             {'-a': '1 2 3', '-something': 'foo', 'status': ''})
    1:         self.assertEqual(splitdict(tcl, arg),
    1:             {'a': '1 2 3', 'something': 'foo', 'status': ''})
       
    1:         arg = ('-a', (1, 2, 3), '-something', 'foo', 'status', '{}')
    1:         self.assertEqual(splitdict(tcl, arg, False),
    1:             {'-a': (1, 2, 3), '-something': 'foo', 'status': '{}'})
    1:         self.assertEqual(splitdict(tcl, arg),
    1:             {'a': (1, 2, 3), 'something': 'foo', 'status': '{}'})
       
    1:         self.assertRaises(RuntimeError, splitdict, tcl, '-a b -c ')
    1:         self.assertRaises(RuntimeError, splitdict, tcl, ('-a', 'b', '-c'))
       
    1:         arg = tcl.call('list',
    1:                         '-a', (1, 2, 3), '-something', 'foo', 'status', ())
    1:         self.assertEqual(splitdict(tcl, arg),
    1:             {'a': (1, 2, 3) if self.wantobjects else '1 2 3',
    1:              'something': 'foo', 'status': ''})
       
    1:         if tcl_version >= (8, 5):
    1:             arg = tcl.call('dict', 'create',
    1:                            '-a', (1, 2, 3), '-something', 'foo', 'status', ())
    1:             if not self.wantobjects or get_tk_patchlevel() < (8, 5, 5):
                       # Before 8.5.5 dicts were converted to lists through string
>>>>>>                 expected = {'a': '1 2 3', 'something': 'foo', 'status': ''}
                   else:
    1:                 expected = {'a': (1, 2, 3), 'something': 'foo', 'status': ''}
    1:             self.assertEqual(splitdict(tcl, arg), expected)
       
       
    1: character_size = 4 if sys.maxunicode > 0xFFFF else 2
       
    2: class BigmemTclTest(unittest.TestCase):
       
    1:     def setUp(self):
    4:         self.interp = Tcl()
       
    1:     @test_support.cpython_only
    1:     @unittest.skipUnless(INT_MAX < PY_SSIZE_T_MAX, "needs UINT_MAX < SIZE_MAX")
    1:     @test_support.precisionbigmemtest(size=INT_MAX + 1, memuse=5, dry_run=False)
           def test_huge_string_call(self, size):
>>>>>>         value = ' ' * size
>>>>>>         self.assertRaises(OverflowError, self.interp.call, 'set', '_', value)
       
    1:     @test_support.cpython_only
    1:     @unittest.skipUnless(test_support.have_unicode, 'requires unicode support')
    1:     @unittest.skipUnless(INT_MAX < PY_SSIZE_T_MAX, "needs UINT_MAX < SIZE_MAX")
    1:     @test_support.precisionbigmemtest(size=INT_MAX + 1,
    1:                                       memuse=2*character_size + 2,
    1:                                       dry_run=False)
           def test_huge_unicode_call(self, size):
>>>>>>         value = unicode(' ') * size
>>>>>>         self.assertRaises(OverflowError, self.interp.call, 'set', '_', value)
       
       
    1:     @test_support.cpython_only
    1:     @unittest.skipUnless(INT_MAX < PY_SSIZE_T_MAX, "needs UINT_MAX < SIZE_MAX")
    1:     @test_support.precisionbigmemtest(size=INT_MAX + 1, memuse=9, dry_run=False)
           def test_huge_string_builtins(self, size):
>>>>>>         value = '1' + ' ' * size
>>>>>>         self.check_huge_string_builtins(value)
       
    1:     @test_support.cpython_only
    1:     @unittest.skipUnless(test_support.have_unicode, 'requires unicode support')
    1:     @unittest.skipUnless(INT_MAX < PY_SSIZE_T_MAX, "needs UINT_MAX < SIZE_MAX")
    1:     @test_support.precisionbigmemtest(size=INT_MAX + 1,
    1:                                       memuse=2*character_size + 7,
    1:                                       dry_run=False)
           def test_huge_unicode_builtins(self, size):
>>>>>>         value = unicode('1' + ' ' * size)
>>>>>>         self.check_huge_string_builtins(value)
       
    1:     def check_huge_string_builtins(self, value):
>>>>>>         self.assertRaises(OverflowError, self.interp.tk.getint, value)
>>>>>>         self.assertRaises(OverflowError, self.interp.tk.getdouble, value)
>>>>>>         self.assertRaises(OverflowError, self.interp.tk.getboolean, value)
>>>>>>         self.assertRaises(OverflowError, self.interp.eval, value)
>>>>>>         self.assertRaises(OverflowError, self.interp.evalfile, value)
>>>>>>         self.assertRaises(OverflowError, self.interp.record, value)
>>>>>>         self.assertRaises(OverflowError, self.interp.adderrorinfo, value)
>>>>>>         self.assertRaises(OverflowError, self.interp.setvar, value, 'x', 'a')
>>>>>>         self.assertRaises(OverflowError, self.interp.setvar, 'x', value, 'a')
>>>>>>         self.assertRaises(OverflowError, self.interp.unsetvar, value)
>>>>>>         self.assertRaises(OverflowError, self.interp.unsetvar, 'x', value)
>>>>>>         self.assertRaises(OverflowError, self.interp.adderrorinfo, value)
>>>>>>         self.assertRaises(OverflowError, self.interp.exprstring, value)
>>>>>>         self.assertRaises(OverflowError, self.interp.exprlong, value)
>>>>>>         self.assertRaises(OverflowError, self.interp.exprboolean, value)
>>>>>>         self.assertRaises(OverflowError, self.interp.splitlist, value)
>>>>>>         self.assertRaises(OverflowError, self.interp.split, value)
>>>>>>         self.assertRaises(OverflowError, self.interp.createcommand, value, max)
>>>>>>         self.assertRaises(OverflowError, self.interp.deletecommand, value)
       
       
    1: def setUpModule():
    1:     if test_support.verbose:
>>>>>>         tcl = Tcl()
>>>>>>         print 'patchlevel =', tcl.call('info', 'patchlevel')
       
       
    1: def test_main():
    1:     test_support.run_unittest(TclTest, TkinterTest, BigmemTclTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
