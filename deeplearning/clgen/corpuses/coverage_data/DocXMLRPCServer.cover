       """Self documenting XML-RPC Server.
       
       This module can be used to create XML-RPC servers that
       serve pydoc-style documentation in response to HTTP
       GET requests. This documentation is dynamically generated
       based on the functions and methods registered with the
       server.
       
       This module is built upon the pydoc and SimpleXMLRPCServer
       modules.
    1: """
       
    1: import pydoc
    1: import inspect
    1: import re
    1: import sys
       
    1: from SimpleXMLRPCServer import (SimpleXMLRPCServer,
                   SimpleXMLRPCRequestHandler,
                   CGIXMLRPCRequestHandler,
                   resolve_dotted_attribute)
       
    2: class ServerHTMLDoc(pydoc.HTMLDoc):
    1:     """Class used to generate pydoc HTML document for a server"""
       
    1:     def markup(self, text, escape=None, funcs={}, classes={}, methods={}):
               """Mark up some plain text, given a context of symbols to look for.
               Each context dictionary maps object names to anchor names."""
   35:         escape = escape or self.escape
   35:         results = []
   35:         here = 0
       
               # XXX Note that this regular expression does not allow for the
               # hyperlinking of arbitrary strings being used as method
               # names. Only methods with names consisting of word characters
               # and '.'s are hyperlinked.
   35:         pattern = re.compile(r'\b((http|ftp)://\S+[\w/]|'
                                       r'RFC[- ]?(\d+)|'
                                       r'PEP[- ]?(\d+)|'
                                       r'(self\.)?((?:\w|\.)+))\b')
   35:         while 1:
  685:             match = pattern.search(text, here)
  685:             if not match: break
  650:             start, end = match.span()
  650:             results.append(escape(text[here:start]))
       
  650:             all, scheme, rfc, pep, selfdot, name = match.groups()
  650:             if scheme:
    5:                 url = escape(all).replace('"', '&quot;')
    5:                 results.append('<a href="%s">%s</a>' % (url, url))
  645:             elif rfc:
    5:                 url = 'http://www.rfc-editor.org/rfc/rfc%d.txt' % int(rfc)
    5:                 results.append('<a href="%s">%s</a>' % (url, escape(all)))
  640:             elif pep:
    5:                 url = 'http://www.python.org/dev/peps/pep-%04d/' % int(pep)
    5:                 results.append('<a href="%s">%s</a>' % (url, escape(all)))
  635:             elif text[end:end+1] == '(':
   15:                 results.append(self.namelink(name, methods, funcs, classes))
  620:             elif selfdot:
    5:                 results.append('self.<strong>%s</strong>' % name)
                   else:
  615:                 results.append(self.namelink(name, classes))
  650:             here = end
   35:         results.append(escape(text[here:]))
   35:         return ''.join(results)
       
    1:     def docroutine(self, object, name, mod=None,
    1:                    funcs={}, classes={}, methods={}, cl=None):
               """Produce HTML documentation for a function or method object."""
       
   30:         anchor = (cl and cl.__name__ or '') + '-' + name
   30:         note = ''
       
   30:         title = '<a name="%s"><strong>%s</strong></a>' % (
   30:             self.escape(anchor), self.escape(name))
       
   30:         if inspect.ismethod(object):
   20:             args, varargs, varkw, defaults = inspect.getargspec(object.im_func)
                   # exclude the argument bound to the instance, it will be
                   # confusing to the non-Python user
   20:             argspec = inspect.formatargspec (
   20:                     args[1:],
   20:                     varargs,
   20:                     varkw,
   20:                     defaults,
   20:                     formatvalue=self.formatvalue
                       )
   10:         elif inspect.isfunction(object):
   10:             args, varargs, varkw, defaults = inspect.getargspec(object)
   10:             argspec = inspect.formatargspec(
   10:                 args, varargs, varkw, defaults, formatvalue=self.formatvalue)
               else:
>>>>>>             argspec = '(...)'
       
   30:         if isinstance(object, tuple):
>>>>>>             argspec = object[0] or argspec
>>>>>>             docstring = object[1] or ""
               else:
   30:             docstring = pydoc.getdoc(object)
       
   30:         decl = title + argspec + (note and self.grey(
>>>>>>                '<font face="helvetica, arial">%s</font>' % note))
       
   30:         doc = self.markup(
   30:             docstring, self.preformat, funcs, classes, methods)
   30:         doc = doc and '<dd><tt>%s</tt></dd>' % doc
   30:         return '<dl><dt>%s</dt>%s</dl>\n' % (decl, doc)
       
    1:     def docserver(self, server_name, package_documentation, methods):
               """Produce HTML documentation for an XML-RPC server."""
       
    5:         fdict = {}
   35:         for key, value in methods.items():
   30:             fdict[key] = '#-' + key
   30:             fdict[value] = fdict[key]
       
    5:         server_name = self.escape(server_name)
    5:         head = '<big><big><strong>%s</strong></big></big>' % server_name
    5:         result = self.heading(head, '#ffffff', '#7799ee')
       
    5:         doc = self.markup(package_documentation, self.preformat, fdict)
    5:         doc = doc and '<tt>%s</tt>' % doc
    5:         result = result + '<p>%s</p>\n' % doc
       
    5:         contents = []
    5:         method_items = sorted(methods.items())
   35:         for key, value in method_items:
   30:             contents.append(self.docroutine(value, key, funcs=fdict))
    5:         result = result + self.bigsection(
    5:             'Methods', '#ffffff', '#eeaa77', pydoc.join(contents))
       
    5:         return result
       
    2: class XMLRPCDocGenerator:
           """Generates documentation for an XML-RPC server.
       
           This class is designed as mix-in and should not
           be constructed directly.
    1:     """
       
    1:     def __init__(self):
               # setup variables used for HTML documentation
    6:         self.server_name = 'XML-RPC Server Documentation'
               self.server_documentation = \
    6:             "This server exports the following methods through the XML-RPC "\
                   "protocol."
    6:         self.server_title = 'XML-RPC Server Documentation'
       
    1:     def set_server_title(self, server_title):
               """Set the HTML title of the generated server documentation"""
       
    6:         self.server_title = server_title
       
    1:     def set_server_name(self, server_name):
               """Set the name of the generated HTML server documentation"""
       
    6:         self.server_name = server_name
       
    1:     def set_server_documentation(self, server_documentation):
               """Set the documentation string for the entire server."""
       
    6:         self.server_documentation = server_documentation
       
    1:     def generate_html_documentation(self):
               """generate_html_documentation() => html documentation for the server
       
               Generates HTML documentation for the server using introspection for
               installed functions and instances that do not implement the
               _dispatch method. Alternatively, instances can choose to implement
               the _get_method_argstring(method_name) method to provide the
               argument string used in the documentation and the
               _methodHelp(method_name) method to provide the help text used
               in the documentation."""
       
    5:         methods = {}
       
   35:         for method_name in self.system_listMethods():
   30:             if method_name in self.funcs:
   25:                 method = self.funcs[method_name]
    5:             elif self.instance is not None:
    5:                 method_info = [None, None] # argspec, documentation
    5:                 if hasattr(self.instance, '_get_method_argstring'):
>>>>>>                     method_info[0] = self.instance._get_method_argstring(method_name)
    5:                 if hasattr(self.instance, '_methodHelp'):
>>>>>>                     method_info[1] = self.instance._methodHelp(method_name)
       
    5:                 method_info = tuple(method_info)
    5:                 if method_info != (None, None):
>>>>>>                     method = method_info
    5:                 elif not hasattr(self.instance, '_dispatch'):
    5:                     try:
    5:                         method = resolve_dotted_attribute(
    5:                                     self.instance,
    5:                                     method_name
                                           )
>>>>>>                     except AttributeError:
>>>>>>                         method = method_info
                       else:
>>>>>>                     method = method_info
                   else:
>>>>>>                 assert 0, "Could not find method in self.functions and no "\
                                 "instance installed"
       
   30:             methods[method_name] = method
       
    5:         documenter = ServerHTMLDoc()
    5:         documentation = documenter.docserver(
    5:                                 self.server_name,
    5:                                 self.server_documentation,
    5:                                 methods
                                   )
       
    5:         return documenter.page(self.server_title, documentation)
       
    2: class DocXMLRPCRequestHandler(SimpleXMLRPCRequestHandler):
           """XML-RPC and documentation request handler class.
       
           Handles all HTTP POST requests and attempts to decode them as
           XML-RPC requests.
       
           Handles all HTTP GET requests and interprets them as requests
           for documentation.
    1:     """
       
    1:     def do_GET(self):
               """Handles the HTTP GET request.
       
               Interpret all HTTP GET requests as requests for server
               documentation.
               """
               # Check that the path is legal
    6:         if not self.is_rpc_path_valid():
    1:             self.report_404()
    1:             return
       
    5:         response = self.server.generate_html_documentation()
    5:         self.send_response(200)
    5:         self.send_header("Content-type", "text/html")
    5:         self.send_header("Content-length", str(len(response)))
    5:         self.end_headers()
    5:         self.wfile.write(response)
       
    2: class DocXMLRPCServer(  SimpleXMLRPCServer,
    1:                         XMLRPCDocGenerator):
           """XML-RPC and HTML documentation server.
       
           Adds the ability to serve server documentation to the capabilities
           of SimpleXMLRPCServer.
    1:     """
       
    1:     def __init__(self, addr, requestHandler=DocXMLRPCRequestHandler,
    1:                  logRequests=1, allow_none=False, encoding=None,
    1:                  bind_and_activate=True):
    6:         SimpleXMLRPCServer.__init__(self, addr, requestHandler, logRequests,
    6:                                     allow_none, encoding, bind_and_activate)
    6:         XMLRPCDocGenerator.__init__(self)
       
    2: class DocCGIXMLRPCRequestHandler(   CGIXMLRPCRequestHandler,
    1:                                     XMLRPCDocGenerator):
           """Handler for XML-RPC data and documentation requests passed through
    1:     CGI"""
       
    1:     def handle_get(self):
               """Handles the HTTP GET request.
       
               Interpret all HTTP GET requests as requests for server
               documentation.
               """
       
>>>>>>         response = self.generate_html_documentation()
       
>>>>>>         print 'Content-Type: text/html'
>>>>>>         print 'Content-Length: %d' % len(response)
>>>>>>         print
>>>>>>         sys.stdout.write(response)
       
    1:     def __init__(self):
>>>>>>         CGIXMLRPCRequestHandler.__init__(self)
>>>>>>         XMLRPCDocGenerator.__init__(self)
