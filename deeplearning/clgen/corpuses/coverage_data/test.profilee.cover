       """
       Input for test_profile.py and test_cprofile.py.
       
       IMPORTANT: This stuff is touchy. If you modify anything above the
       test class you'll have to regenerate the stats by running the two
       test files.
       
       *ALL* NUMBERS in the expected output are relevant.  If you change
       the formatting of pstats, please don't just regenerate the expected
       output without checking very carefully that not a single number has
       changed.
    2: """
       
    2: import sys
       
       # In order to have reproducible time, we simulate a timer in the global
       # variable 'TICKS', which represents simulated time in milliseconds.
       # (We can't use a helper function increment the timer since it would be
       # included in the profile and would appear to consume all the time.)
    2: TICKS = 42000
       
    2: def timer():
   33:     return TICKS
       
    2: def testfunc():
           # 1 call
           # 1000 ticks total: 270 ticks local, 730 ticks in subfunctions
           global TICKS
    2:     TICKS += 99
    2:     helper()                            # 300
    2:     helper()                            # 300
    2:     TICKS += 171
    2:     factorial(14)                       # 130
       
    2: def factorial(n):
           # 23 calls total
           # 170 ticks total, 150 ticks local
           # 3 primitive calls, 130, 20 and 20 ticks total
           # including 116, 17, 17 ticks local
           global TICKS
   46:     if n > 0:
   40:         TICKS += n
   40:         return mul(n, factorial(n-1))
           else:
    6:         TICKS += 11
    6:         return 1
       
    2: def mul(a, b):
           # 20 calls
           # 1 tick, local
           global TICKS
   40:     TICKS += 1
   40:     return a * b
       
    2: def helper():
           # 2 calls
           # 300 ticks total: 20 ticks local, 260 ticks in subfunctions
           global TICKS
    4:     TICKS += 1
    4:     helper1()                           # 30
    4:     TICKS += 2
    4:     helper1()                           # 30
    4:     TICKS += 6
    4:     helper2()                           # 50
    4:     TICKS += 3
    4:     helper2()                           # 50
    4:     TICKS += 2
    4:     helper2()                           # 50
    4:     TICKS += 5
    4:     helper2_indirect()                  # 70
    4:     TICKS += 1
       
    2: def helper1():
           # 4 calls
           # 30 ticks total: 29 ticks local, 1 tick in subfunctions
           global TICKS
    8:     TICKS += 10
    8:     hasattr(C(), "foo")                 # 1
    8:     TICKS += 19
    8:     lst = []
    8:     lst.append(42)                      # 0
    8:     sys.exc_info()                      # 0
       
    2: def helper2_indirect():
    4:     helper2()                           # 50
    4:     factorial(3)                        # 20
       
    2: def helper2():
           # 8 calls
           # 50 ticks local: 39 ticks local, 11 ticks in subfunctions
           global TICKS
   16:     TICKS += 11
   16:     hasattr(C(), "bar")                 # 1
   16:     TICKS += 13
   16:     subhelper()                         # 10
   16:     TICKS += 15
       
    2: def subhelper():
           # 8 calls
           # 10 ticks total: 8 ticks local, 2 ticks in subfunctions
           global TICKS
   16:     TICKS += 2
   48:     for i in range(2):                  # 0
   32:         try:
   32:             C().foo                     # 1 x 2
   32:         except AttributeError:
   32:             TICKS += 3                  # 3 x 2
       
    4: class C:
    2:     def __getattr__(self, name):
               # 28 calls
               # 1 tick, local
               global TICKS
   56:         TICKS += 1
   56:         raise AttributeError
