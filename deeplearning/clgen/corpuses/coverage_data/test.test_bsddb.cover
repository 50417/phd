       """Test script for the bsddb C module by Roger E. Masse
          Adapted to unittest format and expanded scope by Raymond Hettinger
    1: """
    1: import os, sys
    1: import unittest
    1: from test import test_support
       
       # Skip test if _bsddb wasn't built.
    1: test_support.import_module('_bsddb')
       
    1: bsddb = test_support.import_module('bsddb', deprecated=True)
       # Just so we know it's imported:
    1: test_support.import_module('dbhash', deprecated=True)
       
       
    2: class TestBSDDB(unittest.TestCase):
    1:     openflag = 'c'
       
    1:     def setUp(self):
  120:         self.f = self.openmethod[0](self.fname, self.openflag, cachesize=32768)
  120:         self.d = dict(q='Guido', w='van', e='Rossum', r='invented', t='Python', y='')
  840:         for k, v in self.d.iteritems():
  720:             self.f[k] = v
       
    1:     def tearDown(self):
  120:         self.f.sync()
  120:         self.f.close()
  120:         if self.fname is None:
   71:             return
   49:         try:
   49:             os.remove(self.fname)
>>>>>>         except os.error:
>>>>>>             pass
       
    1:     def test_getitem(self):
   35:         for k, v in self.d.iteritems():
   30:             self.assertEqual(self.f[k], v)
       
    1:     def test_len(self):
    5:         self.assertEqual(len(self.f), len(self.d))
       
    1:     def test_change(self):
    5:         self.f['r'] = 'discovered'
    5:         self.assertEqual(self.f['r'], 'discovered')
    5:         self.assertIn('r', self.f.keys())
    5:         self.assertIn('discovered', self.f.values())
       
    1:     def test_close_and_reopen(self):
    2:         self.assertIsNotNone(self.fname)
    2:         self.f.close()
    2:         self.f = self.openmethod[0](self.fname, 'w')
   14:         for k, v in self.d.iteritems():
   12:             self.assertEqual(self.f[k], v)
       
    1:     def assertSetEquals(self, seqn1, seqn2):
  115:         self.assertEqual(set(seqn1), set(seqn2))
       
    1:     def test_mapping_iteration_methods(self):
   15:         f = self.f
   15:         d = self.d
   15:         self.assertSetEquals(d, f)
   15:         self.assertSetEquals(d.keys(), f.keys())
   15:         self.assertSetEquals(d.values(), f.values())
   15:         self.assertSetEquals(d.items(), f.items())
   15:         self.assertSetEquals(d.iterkeys(), f.iterkeys())
   15:         self.assertSetEquals(d.itervalues(), f.itervalues())
   15:         self.assertSetEquals(d.iteritems(), f.iteritems())
       
    1:     def test_iter_while_modifying_values(self):
    5:         di = iter(self.d)
    5:         while 1:
   35:             try:
   35:                 key = di.next()
   30:                 self.d[key] = 'modified '+key
    5:             except StopIteration:
    5:                 break
       
               # it should behave the same as a dict.  modifying values
               # of existing keys should not break iteration.  (adding
               # or removing keys should)
    5:         loops_left = len(self.f)
    5:         fi = iter(self.f)
    5:         while 1:
   35:             try:
   35:                 key = fi.next()
   30:                 self.f[key] = 'modified '+key
   30:                 loops_left -= 1
    5:             except StopIteration:
    5:                 break
    5:         self.assertEqual(loops_left, 0)
       
    5:         self.test_mapping_iteration_methods()
       
    1:     def test_iter_abort_on_changed_size(self):
    5:         def DictIterAbort():
    5:             di = iter(self.d)
    5:             while 1:
   10:                 try:
   10:                     di.next()
    5:                     self.d['newkey'] = 'SPAM'
    5:                 except StopIteration:
>>>>>>                     break
    5:         self.assertRaises(RuntimeError, DictIterAbort)
       
    5:         def DbIterAbort():
    5:             fi = iter(self.f)
    5:             while 1:
   10:                 try:
   10:                     fi.next()
    5:                     self.f['newkey'] = 'SPAM'
    5:                 except StopIteration:
>>>>>>                     break
    5:         self.assertRaises(RuntimeError, DbIterAbort)
       
    1:     def test_iteritems_abort_on_changed_size(self):
    5:         def DictIteritemsAbort():
    5:             di = self.d.iteritems()
    5:             while 1:
   10:                 try:
   10:                     di.next()
    5:                     self.d['newkey'] = 'SPAM'
    5:                 except StopIteration:
>>>>>>                     break
    5:         self.assertRaises(RuntimeError, DictIteritemsAbort)
       
    5:         def DbIteritemsAbort():
    5:             fi = self.f.iteritems()
    5:             while 1:
   10:                 try:
   10:                     key, value = fi.next()
    5:                     del self.f[key]
    5:                 except StopIteration:
>>>>>>                     break
    5:         self.assertRaises(RuntimeError, DbIteritemsAbort)
       
    1:     def test_iteritems_while_modifying_values(self):
    5:         di = self.d.iteritems()
    5:         while 1:
   35:             try:
   35:                 k, v = di.next()
   30:                 self.d[k] = 'modified '+v
    5:             except StopIteration:
    5:                 break
       
               # it should behave the same as a dict.  modifying values
               # of existing keys should not break iteration.  (adding
               # or removing keys should)
    5:         loops_left = len(self.f)
    5:         fi = self.f.iteritems()
    5:         while 1:
   35:             try:
   35:                 k, v = fi.next()
   30:                 self.f[k] = 'modified '+v
   30:                 loops_left -= 1
    5:             except StopIteration:
    5:                 break
    5:         self.assertEqual(loops_left, 0)
       
    5:         self.test_mapping_iteration_methods()
       
    1:     def test_first_next_looping(self):
    5:         items = [self.f.first()]
   30:         for i in xrange(1, len(self.f)):
   25:             items.append(self.f.next())
    5:         self.assertSetEquals(items, self.d.items())
       
    1:     def test_previous_last_looping(self):
    5:         items = [self.f.last()]
   30:         for i in xrange(1, len(self.f)):
   25:             items.append(self.f.previous())
    5:         self.assertSetEquals(items, self.d.items())
       
    1:     def test_first_while_deleting(self):
               # Test for bug 1725856
    5:         self.assertGreaterEqual(len(self.d), 2, "test requires >=2 items")
   35:         for _ in self.d:
   30:             key = self.f.first()[0]
   30:             del self.f[key]
    5:         self.assertEqual([], self.f.items(), "expected empty db after test")
       
    1:     def test_last_while_deleting(self):
               # Test for bug 1725856's evil twin
    5:         self.assertGreaterEqual(len(self.d), 2, "test requires >=2 items")
   35:         for _ in self.d:
   30:             key = self.f.last()[0]
   30:             del self.f[key]
    5:         self.assertEqual([], self.f.items(), "expected empty db after test")
       
    1:     def test_set_location(self):
    5:         self.assertEqual(self.f.set_location('e'), ('e', self.d['e']))
       
    1:     def test_contains(self):
   35:         for k in self.d:
   30:             self.assertIn(k, self.f)
    5:         self.assertNotIn('not here', self.f)
       
    1:     def test_has_key(self):
   35:         for k in self.d:
   30:             self.assertTrue(self.f.has_key(k))
    5:         self.assertFalse(self.f.has_key('not here'))
       
    1:     def test_clear(self):
    5:         self.f.clear()
    5:         self.assertEqual(len(self.f), 0)
       
    1:     def test__no_deadlock_first(self, debug=0):
               # do this so that testers can see what function we're in in
               # verbose mode when we deadlock.
    5:         sys.stdout.flush()
       
               # in pybsddb's _DBWithCursor this causes an internal DBCursor
               # object is created.  Other test_ methods in this class could
               # inadvertently cause the deadlock but an explicit test is needed.
    5:         if debug: print "A"
    5:         k,v = self.f.first()
    5:         if debug: print "B", k
    5:         self.f[k] = "deadlock.  do not pass go.  do not collect $200."
    5:         if debug: print "C"
               # if the bsddb implementation leaves the DBCursor open during
               # the database write and locking+threading support is enabled
               # the cursor's read lock will deadlock the write lock request..
       
               # test the iterator interface
    5:         if True:
    5:             if debug: print "D"
    5:             i = self.f.iteritems()
    5:             k,v = i.next()
    5:             if debug: print "E"
    5:             self.f[k] = "please don't deadlock"
    5:             if debug: print "F"
    5:             while 1:
   30:                 try:
   30:                     k,v = i.next()
    5:                 except StopIteration:
    5:                     break
    5:             if debug: print "F2"
       
    5:             i = iter(self.f)
    5:             if debug: print "G"
   40:             while i:
   35:                 try:
   35:                     if debug: print "H"
   35:                     k = i.next()
   30:                     if debug: print "I"
   30:                     self.f[k] = "deadlocks-r-us"
   30:                     if debug: print "J"
    5:                 except StopIteration:
    5:                     i = None
    5:             if debug: print "K"
       
               # test the legacy cursor interface mixed with writes
    5:         self.assertIn(self.f.first()[0], self.d)
    5:         k = self.f.next()[0]
    5:         self.assertIn(k, self.d)
    5:         self.f[k] = "be gone with ye deadlocks"
    5:         self.assertTrue(self.f[k], "be gone with ye deadlocks")
       
    1:     def test_for_cursor_memleak(self):
               # do the bsddb._DBWithCursor iterator internals leak cursors?
    5:         nc1 = len(self.f._cursor_refs)
               # create iterator
    5:         i = self.f.iteritems()
    5:         nc2 = len(self.f._cursor_refs)
               # use the iterator (should run to the first yield, creating the cursor)
    5:         k, v = i.next()
    5:         nc3 = len(self.f._cursor_refs)
               # destroy the iterator; this should cause the weakref callback
               # to remove the cursor object from self.f._cursor_refs
    5:         del i
    5:         nc4 = len(self.f._cursor_refs)
       
    5:         self.assertEqual(nc1, nc2)
    5:         self.assertEqual(nc1, nc4)
    5:         self.assertEqual(nc3, nc1+1)
       
    1:     def test_popitem(self):
    5:         k, v = self.f.popitem()
    5:         self.assertIn(k, self.d)
    5:         self.assertIn(v, self.d.values())
    5:         self.assertNotIn(k, self.f)
    5:         self.assertEqual(len(self.d)-1, len(self.f))
       
    1:     def test_pop(self):
    5:         k = 'w'
    5:         v = self.f.pop(k)
    5:         self.assertEqual(v, self.d[k])
    5:         self.assertNotIn(k, self.f)
    5:         self.assertNotIn(v, self.f.values())
    5:         self.assertEqual(len(self.d)-1, len(self.f))
       
    1:     def test_get(self):
    5:         self.assertEqual(self.f.get('NotHere'), None)
    5:         self.assertEqual(self.f.get('NotHere', 'Default'), 'Default')
    5:         self.assertEqual(self.f.get('q', 'Default'), self.d['q'])
       
    1:     def test_setdefault(self):
    5:         self.assertEqual(self.f.setdefault('new', 'dog'), 'dog')
    5:         self.assertEqual(self.f.setdefault('r', 'cat'), self.d['r'])
       
    1:     def test_update(self):
    5:         new = dict(y='life', u='of', i='brian')
    5:         self.f.update(new)
    5:         self.d.update(new)
   45:         for k, v in self.d.iteritems():
   40:             self.assertEqual(self.f[k], v)
       
    1:     def test_keyordering(self):
    3:         self.assertIs(self.openmethod[0], bsddb.btopen)
    3:         keys = self.d.keys()
    3:         keys.sort()
    3:         self.assertEqual(self.f.first()[0], keys[0])
    3:         self.assertEqual(self.f.next()[0], keys[1])
    3:         self.assertEqual(self.f.last()[0], keys[-1])
    3:         self.assertEqual(self.f.previous()[0], keys[-2])
    3:         self.assertEqual(list(self.f), keys)
       
    2: class TestBTree(TestBSDDB):
    1:     fname = test_support.TESTFN
    1:     openmethod = [bsddb.btopen]
       
    2: class TestBTree_InMemory(TestBSDDB):
    1:     fname = None
    1:     openmethod = [bsddb.btopen]
       
           # if we're using an in-memory only db, we can't reopen it
    1:     test_close_and_reopen = None
       
    2: class TestBTree_InMemory_Truncate(TestBSDDB):
    1:     fname = None
    1:     openflag = 'n'
    1:     openmethod = [bsddb.btopen]
       
           # if we're using an in-memory only db, we can't reopen it
    1:     test_close_and_reopen = None
       
    2: class TestHashTable(TestBSDDB):
    1:     fname = test_support.TESTFN
    1:     openmethod = [bsddb.hashopen]
       
           # keyordering is specific to btopen method
    1:     test_keyordering = None
       
    2: class TestHashTable_InMemory(TestBSDDB):
    1:     fname = None
    1:     openmethod = [bsddb.hashopen]
       
           # if we're using an in-memory only db, we can't reopen it
    1:     test_close_and_reopen = None
       
           # keyordering is specific to btopen method
    1:     test_keyordering = None
       
       ##         # (bsddb.rnopen,'Record Numbers'), 'put' for RECNO for bsddb 1.85
       ##         #                                   appears broken... at least on
       ##         #                                   Solaris Intel - rmasse 1/97
       
    1: def test_main(verbose=None):
    1:     test_support.run_unittest(
    1:         TestBTree,
    1:         TestHashTable,
    1:         TestBTree_InMemory,
    1:         TestHashTable_InMemory,
    1:         TestBTree_InMemory_Truncate,
           )
       
    1: if __name__ == "__main__":
>>>>>>     test_main(verbose=True)
