    1: from test import test_support
    1: import types
    1: import unittest
       
    2: class FuncAttrsTest(unittest.TestCase):
    1:     def setUp(self):
   54:         class F:
   27:             def a(self):
>>>>>>                 pass
   27:         def b():
    1:             return 3
   27:         self.f = F
   27:         self.fi = F()
   27:         self.b = b
       
    1:     def cannot_set_attr(self, obj, name, value, exceptions):
               # Helper method for other tests.
   20:         try:
   20:             setattr(obj, name, value)
   20:         except exceptions:
   20:             pass
               else:
>>>>>>             self.fail("shouldn't be able to set %s to %r" % (name, value))
   20:         try:
   20:             delattr(obj, name)
   20:         except exceptions:
   20:             pass
               else:
>>>>>>             self.fail("shouldn't be able to del %s" % name)
       
       
    2: class FunctionPropertiesTest(FuncAttrsTest):
           # Include the external setUp method that is common to all tests
    1:     def test_module(self):
    1:         self.assertEqual(self.b.__module__, __name__)
       
    1:     def test_dir_includes_correct_attrs(self):
    1:         self.b.known_attr = 7
    1:         self.assertIn('known_attr', dir(self.b),
    1:                         "set attributes not in dir listing of method")
               # Test on underlying function object of method
    1:         self.f.a.im_func.known_attr = 7
    1:         self.assertIn('known_attr', dir(self.f.a),
    1:                         "set attribute on unbound method implementation in "
                               "class not in dir")
    1:         self.assertIn('known_attr', dir(self.fi.a),
    1:                         "set attribute on unbound method implementations, "
                               "should show up in next dir")
       
    1:     def test_duplicate_function_equality(self):
               # Body of `duplicate' is the exact same as self.b
    1:         def duplicate():
                   'my docstring'
>>>>>>             return 3
    1:         self.assertNotEqual(self.b, duplicate)
       
    1:     def test_copying_func_code(self):
    2:         def test(): pass
    1:         self.assertEqual(test(), None)
    1:         test.func_code = self.b.func_code
    1:         self.assertEqual(test(), 3) # self.b always returns 3, arbitrarily
       
    1:     def test_func_globals(self):
    1:         self.assertIs(self.b.func_globals, globals())
    1:         self.cannot_set_attr(self.b, 'func_globals', 2, TypeError)
       
    1:     def test_func_closure(self):
    1:         a = 12
    1:         def f(): print a
    1:         c = f.func_closure
    1:         self.assertIsInstance(c, tuple)
    1:         self.assertEqual(len(c), 1)
               # don't have a type object handy
    1:         self.assertEqual(c[0].__class__.__name__, "cell")
    1:         self.cannot_set_attr(f, "func_closure", c, TypeError)
       
    1:     def test_empty_cell(self):
    1:         def f(): print a
    1:         try:
    1:             f.func_closure[0].cell_contents
    1:         except ValueError:
    1:             pass
               else:
>>>>>>             self.fail("shouldn't be able to read an empty cell")
    1:         a = 12
       
    1:     def test_func_name(self):
    1:         self.assertEqual(self.b.__name__, 'b')
    1:         self.assertEqual(self.b.func_name, 'b')
    1:         self.b.__name__ = 'c'
    1:         self.assertEqual(self.b.__name__, 'c')
    1:         self.assertEqual(self.b.func_name, 'c')
    1:         self.b.func_name = 'd'
    1:         self.assertEqual(self.b.__name__, 'd')
    1:         self.assertEqual(self.b.func_name, 'd')
               # __name__ and func_name must be a string
    1:         self.cannot_set_attr(self.b, '__name__', 7, TypeError)
    1:         self.cannot_set_attr(self.b, 'func_name', 7, TypeError)
               # __name__ must be available when in restricted mode. Exec will raise
               # AttributeError if __name__ is not available on f.
    1:         s = """def f(): pass\nf.__name__"""
    1:         exec s in {'__builtins__': {}}
               # Test on methods, too
    1:         self.assertEqual(self.f.a.__name__, 'a')
    1:         self.assertEqual(self.fi.a.__name__, 'a')
    1:         self.cannot_set_attr(self.f.a, "__name__", 'a', AttributeError)
    1:         self.cannot_set_attr(self.fi.a, "__name__", 'a', AttributeError)
       
    1:     def test_func_code(self):
    1:         num_one, num_two = 7, 8
    1:         def a(): pass
    1:         def b(): return 12
    3:         def c(): return num_one
    2:         def d(): return num_two
    1:         def e(): return num_one, num_two
    6:         for func in [a, b, c, d, e]:
    5:             self.assertEqual(type(func.func_code), types.CodeType)
    1:         self.assertEqual(c(), 7)
    1:         self.assertEqual(d(), 8)
    1:         d.func_code = c.func_code
    1:         self.assertEqual(c.func_code, d.func_code)
    1:         self.assertEqual(c(), 7)
               # self.assertEqual(d(), 7)
    1:         try:
    1:             b.func_code = c.func_code
    1:         except ValueError:
    1:             pass
               else:
>>>>>>             self.fail("func_code with different numbers of free vars should "
                             "not be possible")
    1:         try:
    1:             e.func_code = d.func_code
    1:         except ValueError:
    1:             pass
               else:
>>>>>>             self.fail("func_code with different numbers of free vars should "
                             "not be possible")
       
    1:     def test_blank_func_defaults(self):
    1:         self.assertEqual(self.b.func_defaults, None)
    1:         del self.b.func_defaults
    1:         self.assertEqual(self.b.func_defaults, None)
       
    1:     def test_func_default_args(self):
    1:         def first_func(a, b):
    3:             return a+b
    1:         def second_func(a=1, b=2):
>>>>>>             return a+b
    1:         self.assertEqual(first_func.func_defaults, None)
    1:         self.assertEqual(second_func.func_defaults, (1, 2))
    1:         first_func.func_defaults = (1, 2)
    1:         self.assertEqual(first_func.func_defaults, (1, 2))
    1:         self.assertEqual(first_func(), 3)
    1:         self.assertEqual(first_func(3), 5)
    1:         self.assertEqual(first_func(3, 5), 8)
    1:         del second_func.func_defaults
    1:         self.assertEqual(second_func.func_defaults, None)
    1:         try:
    1:             second_func()
    1:         except TypeError:
    1:             pass
               else:
>>>>>>             self.fail("func_defaults does not update; deleting it does not "
                             "remove requirement")
       
       
    2: class InstancemethodAttrTest(FuncAttrsTest):
    1:     def test_im_class(self):
    1:         self.assertEqual(self.f.a.im_class, self.f)
    1:         self.assertEqual(self.fi.a.im_class, self.f)
    1:         self.cannot_set_attr(self.f.a, "im_class", self.f, TypeError)
    1:         self.cannot_set_attr(self.fi.a, "im_class", self.f, TypeError)
       
    1:     def test_im_func(self):
    1:         self.f.b = self.b
    1:         self.assertEqual(self.f.b.im_func, self.b)
    1:         self.assertEqual(self.fi.b.im_func, self.b)
    1:         self.cannot_set_attr(self.f.b, "im_func", self.b, TypeError)
    1:         self.cannot_set_attr(self.fi.b, "im_func", self.b, TypeError)
       
    1:     def test_im_self(self):
    1:         self.assertEqual(self.f.a.im_self, None)
    1:         self.assertEqual(self.fi.a.im_self, self.fi)
    1:         self.cannot_set_attr(self.f.a, "im_self", None, TypeError)
    1:         self.cannot_set_attr(self.fi.a, "im_self", self.fi, TypeError)
       
    1:     def test_im_func_non_method(self):
               # Behavior should be the same when a method is added via an attr
               # assignment
    1:         self.f.id = types.MethodType(id, None, self.f)
    1:         self.assertEqual(self.fi.id(), id(self.fi))
    1:         self.assertNotEqual(self.fi.id(), id(self.f))
               # Test usage
    1:         try:
    1:             self.f.id.unknown_attr
    1:         except AttributeError:
    1:             pass
               else:
>>>>>>             self.fail("using unknown attributes should raise AttributeError")
               # Test assignment and deletion
    1:         self.cannot_set_attr(self.f.id, 'unknown_attr', 2, AttributeError)
    1:         self.cannot_set_attr(self.fi.id, 'unknown_attr', 2, AttributeError)
       
    1:     def test_implicit_method_properties(self):
    1:         self.f.a.im_func.known_attr = 7
    1:         self.assertEqual(self.f.a.known_attr, 7)
    1:         self.assertEqual(self.fi.a.known_attr, 7)
       
       
    2: class ArbitraryFunctionAttrTest(FuncAttrsTest):
    1:     def test_set_attr(self):
               # setting attributes only works on function objects
    1:         self.b.known_attr = 7
    1:         self.assertEqual(self.b.known_attr, 7)
    3:         for func in [self.f.a, self.fi.a]:
    2:             try:
    2:                 func.known_attr = 7
    2:             except AttributeError:
    2:                 pass
                   else:
>>>>>>                 self.fail("setting attributes on methods should raise error")
       
    1:     def test_delete_unknown_attr(self):
    1:         try:
    1:             del self.b.unknown_attr
    1:         except AttributeError:
    1:             pass
               else:
>>>>>>             self.fail("deleting unknown attribute should raise TypeError")
       
    1:     def test_setting_attrs_duplicates(self):
    1:         try:
    1:             self.f.a.klass = self.f
    1:         except AttributeError:
    1:             pass
               else:
>>>>>>             self.fail("setting arbitrary attribute in unbound function "
                             " should raise AttributeError")
    1:         self.f.a.im_func.klass = self.f
    4:         for method in [self.f.a, self.fi.a, self.fi.a.im_func]:
    3:             self.assertEqual(method.klass, self.f)
       
    1:     def test_unset_attr(self):
    4:         for func in [self.b, self.f.a, self.fi.a]:
    3:             try:
    3:                 func.non_existent_attr
    3:             except AttributeError:
    3:                 pass
                   else:
>>>>>>                 self.fail("using unknown attributes should raise "
                                 "AttributeError")
       
       
    2: class FunctionDictsTest(FuncAttrsTest):
    1:     def test_setting_dict_to_invalid(self):
    1:         self.cannot_set_attr(self.b, '__dict__', None, TypeError)
    1:         self.cannot_set_attr(self.b, 'func_dict', None, TypeError)
    1:         from UserDict import UserDict
    1:         d = UserDict({'known_attr': 7})
    1:         self.cannot_set_attr(self.f.a.im_func, '__dict__', d, TypeError)
    1:         self.cannot_set_attr(self.fi.a.im_func, '__dict__', d, TypeError)
       
    1:     def test_setting_dict_to_valid(self):
    1:         d = {'known_attr': 7}
    1:         self.b.__dict__ = d
               # Setting dict is only possible on the underlying function objects
    1:         self.f.a.im_func.__dict__ = d
               # Test assignment
    1:         self.assertIs(d, self.b.__dict__)
    1:         self.assertIs(d, self.b.func_dict)
               # ... and on all the different ways of referencing the method's func
    1:         self.assertIs(d, self.f.a.im_func.__dict__)
    1:         self.assertIs(d, self.f.a.__dict__)
    1:         self.assertIs(d, self.fi.a.im_func.__dict__)
    1:         self.assertIs(d, self.fi.a.__dict__)
               # Test value
    1:         self.assertEqual(self.b.known_attr, 7)
    1:         self.assertEqual(self.b.__dict__['known_attr'], 7)
    1:         self.assertEqual(self.b.func_dict['known_attr'], 7)
               # ... and again, on all the different method's names
    1:         self.assertEqual(self.f.a.im_func.known_attr, 7)
    1:         self.assertEqual(self.f.a.known_attr, 7)
    1:         self.assertEqual(self.fi.a.im_func.known_attr, 7)
    1:         self.assertEqual(self.fi.a.known_attr, 7)
       
    1:     def test_delete_func_dict(self):
    1:         try:
    1:             del self.b.__dict__
    1:         except TypeError:
    1:             pass
               else:
>>>>>>             self.fail("deleting function dictionary should raise TypeError")
    1:         try:
    1:             del self.b.func_dict
    1:         except TypeError:
    1:             pass
               else:
>>>>>>             self.fail("deleting function dictionary should raise TypeError")
       
    1:     def test_unassigned_dict(self):
    1:         self.assertEqual(self.b.__dict__, {})
       
    1:     def test_func_as_dict_key(self):
    1:         value = "Some string"
    1:         d = {}
    1:         d[self.b] = value
    1:         self.assertEqual(d[self.b], value)
       
       
    2: class FunctionDocstringTest(FuncAttrsTest):
    1:     def test_set_docstring_attr(self):
    1:         self.assertEqual(self.b.__doc__, None)
    1:         self.assertEqual(self.b.func_doc, None)
    1:         docstr = "A test method that does nothing"
    1:         self.b.__doc__ = self.f.a.im_func.__doc__ = docstr
    1:         self.assertEqual(self.b.__doc__, docstr)
    1:         self.assertEqual(self.b.func_doc, docstr)
    1:         self.assertEqual(self.f.a.__doc__, docstr)
    1:         self.assertEqual(self.fi.a.__doc__, docstr)
    1:         self.cannot_set_attr(self.f.a, "__doc__", docstr, AttributeError)
    1:         self.cannot_set_attr(self.fi.a, "__doc__", docstr, AttributeError)
       
    1:     def test_delete_docstring(self):
    1:         self.b.__doc__ = "The docstring"
    1:         del self.b.__doc__
    1:         self.assertEqual(self.b.__doc__, None)
    1:         self.assertEqual(self.b.func_doc, None)
    1:         self.b.func_doc = "The docstring"
    1:         del self.b.func_doc
    1:         self.assertEqual(self.b.__doc__, None)
    1:         self.assertEqual(self.b.func_doc, None)
       
       
    2: class StaticMethodAttrsTest(unittest.TestCase):
    1:     def test_func_attribute(self):
    1:         def f():
>>>>>>             pass
       
    1:         c = classmethod(f)
    1:         self.assertTrue(c.__func__ is f)
       
    1:         s = staticmethod(f)
    1:         self.assertTrue(s.__func__ is f)
       
       
    1: def test_main():
    1:     test_support.run_unittest(FunctionPropertiesTest, InstancemethodAttrTest,
    1:                               ArbitraryFunctionAttrTest, FunctionDictsTest,
    1:                               FunctionDocstringTest,
    1:                               StaticMethodAttrsTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
