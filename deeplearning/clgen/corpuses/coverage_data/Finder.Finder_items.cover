       """Suite Finder items: Commands used with file system items, and basic item definition
       Level 1, version 1
       
       Generated from /System/Library/CoreServices/Finder.app
       AETE/AEUT resource version 0/144, language 0, script 0
    1: """
       
    1: import aetools
    1: import MacOS
       
    1: _code = 'fndr'
       
    2: class Finder_items_Events:
       
    1:     def add_to_favorites(self, _object, _attributes={}, **_arguments):
               """add to favorites: (NOT AVAILABLE YET) Add the items to the user\xd5s Favorites
               Required argument: the items to add to the collection of Favorites
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'fndr'
>>>>>>         _subcode = 'ffav'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_clean_up = {
    1:         'by' : 'by  ',
           }
       
    1:     def clean_up(self, _object, _attributes={}, **_arguments):
               """clean up: (NOT AVAILABLE YET) Arrange items in window nicely (only applies to open windows in icon view that are not kept arranged)
               Required argument: the window to clean up
               Keyword argument by: the order in which to clean up the objects (name, index, date, etc.)
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'fndr'
>>>>>>         _subcode = 'fclu'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_clean_up)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def eject(self, _object=None, _attributes={}, **_arguments):
               """eject: Eject the specified disk(s)
               Required argument: the disk(s) to eject
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'fndr'
>>>>>>         _subcode = 'ejct'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def empty(self, _object=None, _attributes={}, **_arguments):
               """empty: Empty the trash
               Required argument: \xd2empty\xd3 and \xd2empty trash\xd3 both do the same thing
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'fndr'
>>>>>>         _subcode = 'empt'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def erase(self, _object, _attributes={}, **_arguments):
               """erase: (NOT AVAILABLE) Erase the specified disk(s)
               Required argument: the items to erase
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'fndr'
>>>>>>         _subcode = 'fera'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def reveal(self, _object, _attributes={}, **_arguments):
               """reveal: Bring the specified object(s) into view
               Required argument: the object to be made visible
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'misc'
>>>>>>         _subcode = 'mvis'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_update = {
    1:         'necessity' : 'nec?',
    1:         'registering_applications' : 'reg?',
           }
       
    1:     def update(self, _object, _attributes={}, **_arguments):
               """update: Update the display of the specified object(s) to match their on-disk representation
               Required argument: the item to update
               Keyword argument necessity: only update if necessary (i.e. a finder window is open).  default is false
               Keyword argument registering_applications: register applications. default is true
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'fndr'
>>>>>>         _subcode = 'fupd'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_update)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
       
    2: class item(aetools.ComponentItem):
    1:     """item - An item """
    1:     want = 'cobj'
    2: class _Prop_bounds(aetools.NProperty):
    1:     """bounds - the bounding rectangle of the item (can only be set for an item in a window viewed as icons or buttons) """
    1:     which = 'pbnd'
    1:     want = 'qdrt'
    2: class _Prop_comment(aetools.NProperty):
    1:     """comment - the comment of the item, displayed in the \xd2Get Info\xd3 window """
    1:     which = 'comt'
    1:     want = 'utxt'
    2: class _Prop_container(aetools.NProperty):
    1:     """container - the container of the item """
    1:     which = 'ctnr'
    1:     want = 'obj '
    2: class _Prop_creation_date(aetools.NProperty):
    1:     """creation date - the date on which the item was created """
    1:     which = 'ascd'
    1:     want = 'ldt '
    2: class _Prop_description(aetools.NProperty):
    1:     """description - a description of the item """
    1:     which = 'dscr'
    1:     want = 'utxt'
    2: class _Prop_disk(aetools.NProperty):
    1:     """disk - the disk on which the item is stored """
    1:     which = 'cdis'
    1:     want = 'obj '
    2: class _Prop_displayed_name(aetools.NProperty):
    1:     """displayed name - the user-visible name of the item """
    1:     which = 'dnam'
    1:     want = 'utxt'
    2: class _Prop_everyones_privileges(aetools.NProperty):
    1:     """everyones privileges -  """
    1:     which = 'gstp'
    1:     want = 'priv'
    2: class _Prop_extension_hidden(aetools.NProperty):
    1:     """extension hidden - Is the item's extension hidden from the user? """
    1:     which = 'hidx'
    1:     want = 'bool'
    2: class _Prop_group(aetools.NProperty):
    1:     """group - the user or group that has special access to the container """
    1:     which = 'sgrp'
    1:     want = 'utxt'
    2: class _Prop_group_privileges(aetools.NProperty):
    1:     """group privileges -  """
    1:     which = 'gppr'
    1:     want = 'priv'
    2: class _Prop_icon(aetools.NProperty):
    1:     """icon - the icon bitmap of the item """
    1:     which = 'iimg'
    1:     want = 'ifam'
    2: class _Prop_index(aetools.NProperty):
    1:     """index - the index in the front-to-back ordering within its container """
    1:     which = 'pidx'
    1:     want = 'long'
    2: class _Prop_information_window(aetools.NProperty):
    1:     """information window - the information window for the item """
    1:     which = 'iwnd'
    1:     want = 'obj '
    2: class _Prop_kind(aetools.NProperty):
    1:     """kind - the kind of the item """
    1:     which = 'kind'
    1:     want = 'utxt'
    2: class _Prop_label_index(aetools.NProperty):
    1:     """label index - the label of the item """
    1:     which = 'labi'
    1:     want = 'long'
    2: class _Prop_locked(aetools.NProperty):
    1:     """locked - Is the file locked? """
    1:     which = 'aslk'
    1:     want = 'bool'
    2: class _Prop_modification_date(aetools.NProperty):
    1:     """modification date - the date on which the item was last modified """
    1:     which = 'asmo'
    1:     want = 'ldt '
    2: class _Prop_name(aetools.NProperty):
    1:     """name - the name of the item """
    1:     which = 'pnam'
    1:     want = 'utxt'
    2: class _Prop_name_extension(aetools.NProperty):
    1:     """name extension - the name extension of the item (such as \xd2txt\xd3) """
    1:     which = 'nmxt'
    1:     want = 'utxt'
    2: class _Prop_owner(aetools.NProperty):
    1:     """owner - the user that owns the container """
    1:     which = 'sown'
    1:     want = 'utxt'
    2: class _Prop_owner_privileges(aetools.NProperty):
    1:     """owner privileges -  """
    1:     which = 'ownr'
    1:     want = 'priv'
    2: class _Prop_physical_size(aetools.NProperty):
    1:     """physical size - the actual space used by the item on disk """
    1:     which = 'phys'
    1:     want = 'comp'
    2: class _Prop_position(aetools.NProperty):
    1:     """position - the position of the item within its parent window (can only be set for an item in a window viewed as icons or buttons) """
    1:     which = 'posn'
    1:     want = 'QDpt'
    2: class _Prop_properties(aetools.NProperty):
    1:     """properties - every property of an item """
    1:     which = 'pALL'
    1:     want = 'reco'
    2: class _Prop_size(aetools.NProperty):
    1:     """size - the logical size of the item """
    1:     which = 'ptsz'
    1:     want = 'comp'
    2: class _Prop_url(aetools.NProperty):
    1:     """url - the url of the item """
    1:     which = 'pURL'
    1:     want = 'utxt'
       
    1: items = item
    1: item._superclassnames = []
    1: item._privpropdict = {
    1:     'bounds' : _Prop_bounds,
    1:     'comment' : _Prop_comment,
    1:     'container' : _Prop_container,
    1:     'creation_date' : _Prop_creation_date,
    1:     'description' : _Prop_description,
    1:     'disk' : _Prop_disk,
    1:     'displayed_name' : _Prop_displayed_name,
    1:     'everyones_privileges' : _Prop_everyones_privileges,
    1:     'extension_hidden' : _Prop_extension_hidden,
    1:     'group' : _Prop_group,
    1:     'group_privileges' : _Prop_group_privileges,
    1:     'icon' : _Prop_icon,
    1:     'index' : _Prop_index,
    1:     'information_window' : _Prop_information_window,
    1:     'kind' : _Prop_kind,
    1:     'label_index' : _Prop_label_index,
    1:     'locked' : _Prop_locked,
    1:     'modification_date' : _Prop_modification_date,
    1:     'name' : _Prop_name,
    1:     'name_extension' : _Prop_name_extension,
    1:     'owner' : _Prop_owner,
    1:     'owner_privileges' : _Prop_owner_privileges,
    1:     'physical_size' : _Prop_physical_size,
    1:     'position' : _Prop_position,
    1:     'properties' : _Prop_properties,
    1:     'size' : _Prop_size,
    1:     'url' : _Prop_url,
       }
    1: item._privelemdict = {
       }
       
       #
       # Indices of types declared in this module
       #
    1: _classdeclarations = {
    1:     'cobj' : item,
       }
       
    1: _propdeclarations = {
    1:     'ascd' : _Prop_creation_date,
    1:     'aslk' : _Prop_locked,
    1:     'asmo' : _Prop_modification_date,
    1:     'cdis' : _Prop_disk,
    1:     'comt' : _Prop_comment,
    1:     'ctnr' : _Prop_container,
    1:     'dnam' : _Prop_displayed_name,
    1:     'dscr' : _Prop_description,
    1:     'gppr' : _Prop_group_privileges,
    1:     'gstp' : _Prop_everyones_privileges,
    1:     'hidx' : _Prop_extension_hidden,
    1:     'iimg' : _Prop_icon,
    1:     'iwnd' : _Prop_information_window,
    1:     'kind' : _Prop_kind,
    1:     'labi' : _Prop_label_index,
    1:     'nmxt' : _Prop_name_extension,
    1:     'ownr' : _Prop_owner_privileges,
    1:     'pALL' : _Prop_properties,
    1:     'pURL' : _Prop_url,
    1:     'pbnd' : _Prop_bounds,
    1:     'phys' : _Prop_physical_size,
    1:     'pidx' : _Prop_index,
    1:     'pnam' : _Prop_name,
    1:     'posn' : _Prop_position,
    1:     'ptsz' : _Prop_size,
    1:     'sgrp' : _Prop_group,
    1:     'sown' : _Prop_owner,
       }
       
    1: _compdeclarations = {
       }
       
    1: _enumdeclarations = {
       }
