       """Test the arraymodule.
          Roger E. Masse
    1: """
       
    1: import unittest
    1: import warnings
    1: from test import test_support
    1: from weakref import proxy
    1: import array, cStringIO
    1: from cPickle import loads, dumps, HIGHEST_PROTOCOL
    1: import sys
       
    2: class ArraySubclass(array.array):
    1:     pass
       
    2: class ArraySubclassWithKwargs(array.array):
    1:     def __init__(self, typecode, newarg=None):
   12:         array.array.__init__(self, typecode)
       
    1: tests = [] # list to accumulate all tests
    1: typecodes = "cbBhHiIlLfd"
    1: if test_support.have_unicode:
    1:     typecodes += "u"
       
    2: class MiscTest(unittest.TestCase):
       
    1:     def test_bad_constructor(self):
    1:         self.assertRaises(TypeError, array.array)
    1:         self.assertRaises(TypeError, array.array, spam=42)
    1:         self.assertRaises(TypeError, array.array, 'xx')
    1:         self.assertRaises(TypeError, array.array, '')
    1:         self.assertRaises(TypeError, array.array, 1)
    1:         self.assertRaises(ValueError, array.array, 'x')
    1:         self.assertRaises(ValueError, array.array, '\x80')
       
    1:     @test_support.requires_unicode
           def test_unicode_constructor(self):
    1:         self.assertRaises(TypeError, array.array, u'xx')
    1:         self.assertRaises(TypeError, array.array, u'')
    1:         self.assertRaises(ValueError, array.array, u'x')
    1:         self.assertRaises(ValueError, array.array, u'\x80')
       
    1:     def test_empty(self):
               # Exercise code for handling zero-length arrays
    1:         a = array.array('B')
    1:         a[:] = a
    1:         self.assertEqual(len(a), 0)
    1:         self.assertEqual(len(a + a), 0)
    1:         self.assertEqual(len(a * 3), 0)
    1:         a += a
    1:         self.assertEqual(len(a), 0)
       
    1: tests.append(MiscTest)
       
    2: class BaseTest(unittest.TestCase):
           # Required class attributes (provided by subclasses
           # typecode: the typecode to test
           # example: an initializer usable in the constructor for this type
           # smallerexample: the same length as example, but smaller
           # biggerexample: the same length as example, but bigger
           # outside: An entry that is not in example
           # minitemsize: the minimum guaranteed itemsize
       
    1:     def assertEntryEqual(self, entry1, entry2):
  168:         self.assertEqual(entry1, entry2)
       
    1:     def badtypecode(self):
               # Return a typecode that is different from our own
   48:         return typecodes[(typecodes.index(self.typecode)+1) % len(typecodes)]
       
    1:     def test_constructor(self):
   12:         a = array.array(self.typecode)
   12:         self.assertEqual(a.typecode, self.typecode)
   12:         self.assertGreaterEqual(a.itemsize, self.minitemsize)
   12:         self.assertRaises(TypeError, array.array, self.typecode, None)
       
    1:     def test_len(self):
   12:         a = array.array(self.typecode)
   12:         a.append(self.example[0])
   12:         self.assertEqual(len(a), 1)
       
   12:         a = array.array(self.typecode, self.example)
   12:         self.assertEqual(len(a), len(self.example))
       
    1:     def test_buffer_info(self):
   12:         a = array.array(self.typecode, self.example)
   12:         self.assertRaises(TypeError, a.buffer_info, 42)
   12:         bi = a.buffer_info()
   12:         self.assertIsInstance(bi, tuple)
   12:         self.assertEqual(len(bi), 2)
   12:         self.assertIsInstance(bi[0], (int, long))
   12:         self.assertIsInstance(bi[1], int)
   12:         self.assertEqual(bi[1], len(a))
       
    1:     def test_byteswap(self):
   10:         a = array.array(self.typecode, self.example)
   10:         self.assertRaises(TypeError, a.byteswap, 42)
   10:         if a.itemsize in (1, 2, 4, 8):
   10:             b = array.array(self.typecode, self.example)
   10:             b.byteswap()
   10:             if a.itemsize==1:
    3:                 self.assertEqual(a, b)
                   else:
    7:                 self.assertNotEqual(a, b)
   10:             b.byteswap()
   10:             self.assertEqual(a, b)
       
    1:     def test_copy(self):
   12:         import copy
   12:         a = array.array(self.typecode, self.example)
   12:         b = copy.copy(a)
   12:         self.assertNotEqual(id(a), id(b))
   12:         self.assertEqual(a, b)
       
    1:     def test_deepcopy(self):
   12:         import copy
   12:         a = array.array(self.typecode, self.example)
   12:         b = copy.deepcopy(a)
   12:         self.assertNotEqual(id(a), id(b))
   12:         self.assertEqual(a, b)
       
    1:     def test_pickle(self):
   48:         for protocol in range(HIGHEST_PROTOCOL + 1):
   36:             a = array.array(self.typecode, self.example)
   36:             b = loads(dumps(a, protocol))
   36:             self.assertNotEqual(id(a), id(b))
   36:             self.assertEqual(a, b)
       
   36:             a = ArraySubclass(self.typecode, self.example)
   36:             a.x = 10
   36:             b = loads(dumps(a, protocol))
   36:             self.assertNotEqual(id(a), id(b))
   36:             self.assertEqual(a, b)
   36:             self.assertEqual(a.x, b.x)
   36:             self.assertEqual(type(a), type(b))
       
    1:     def test_pickle_for_empty_array(self):
   48:         for protocol in range(HIGHEST_PROTOCOL + 1):
   36:             a = array.array(self.typecode)
   36:             b = loads(dumps(a, protocol))
   36:             self.assertNotEqual(id(a), id(b))
   36:             self.assertEqual(a, b)
       
   36:             a = ArraySubclass(self.typecode)
   36:             a.x = 10
   36:             b = loads(dumps(a, protocol))
   36:             self.assertNotEqual(id(a), id(b))
   36:             self.assertEqual(a, b)
   36:             self.assertEqual(a.x, b.x)
   36:             self.assertEqual(type(a), type(b))
       
    1:     def test_insert(self):
   12:         a = array.array(self.typecode, self.example)
   12:         a.insert(0, self.example[0])
   12:         self.assertEqual(len(a), 1+len(self.example))
   12:         self.assertEqual(a[0], a[1])
   12:         self.assertRaises(TypeError, a.insert)
   12:         self.assertRaises(TypeError, a.insert, None)
   12:         self.assertRaises(TypeError, a.insert, 0, None)
       
   12:         a = array.array(self.typecode, self.example)
   12:         a.insert(-1, self.example[0])
   12:         self.assertEqual(
   12:             a,
   12:             array.array(
   12:                 self.typecode,
   12:                 self.example[:-1] + self.example[:1] + self.example[-1:]
                   )
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         a.insert(-1000, self.example[0])
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example[:1] + self.example)
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         a.insert(1000, self.example[0])
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example + self.example[:1])
               )
       
    1:     def test_tofromfile(self):
   12:         a = array.array(self.typecode, 2*self.example)
   12:         self.assertRaises(TypeError, a.tofile)
   12:         self.assertRaises(TypeError, a.tofile, cStringIO.StringIO())
   12:         test_support.unlink(test_support.TESTFN)
   12:         f = open(test_support.TESTFN, 'wb')
   12:         try:
   12:             a.tofile(f)
   12:             f.close()
   12:             b = array.array(self.typecode)
   12:             f = open(test_support.TESTFN, 'rb')
   12:             self.assertRaises(TypeError, b.fromfile)
   12:             self.assertRaises(
   12:                 TypeError,
   12:                 b.fromfile,
   12:                 cStringIO.StringIO(), len(self.example)
                   )
   12:             b.fromfile(f, len(self.example))
   12:             self.assertEqual(b, array.array(self.typecode, self.example))
   12:             self.assertNotEqual(a, b)
   12:             b.fromfile(f, len(self.example))
   12:             self.assertEqual(a, b)
   12:             self.assertRaises(EOFError, b.fromfile, f, 1)
   12:             f.close()
               finally:
   12:             if not f.closed:
>>>>>>                 f.close()
   12:             test_support.unlink(test_support.TESTFN)
       
    1:     def test_fromfile_ioerror(self):
               # Issue #5395: Check if fromfile raises a proper IOError
               # instead of EOFError.
   12:         a = array.array(self.typecode)
   12:         f = open(test_support.TESTFN, 'wb')
   12:         try:
   12:             self.assertRaises(IOError, a.fromfile, f, len(self.example))
               finally:
   12:             f.close()
   12:             test_support.unlink(test_support.TESTFN)
       
    1:     def test_filewrite(self):
   12:         a = array.array(self.typecode, 2*self.example)
   12:         f = open(test_support.TESTFN, 'wb')
   12:         try:
   12:             f.write(a)
   12:             f.close()
   12:             b = array.array(self.typecode)
   12:             f = open(test_support.TESTFN, 'rb')
   12:             b.fromfile(f, len(self.example))
   12:             self.assertEqual(b, array.array(self.typecode, self.example))
   12:             self.assertNotEqual(a, b)
   12:             b.fromfile(f, len(self.example))
   12:             self.assertEqual(a, b)
   12:             f.close()
               finally:
   12:             if not f.closed:
>>>>>>                 f.close()
   12:             test_support.unlink(test_support.TESTFN)
       
    1:     def test_tofromlist(self):
   12:         a = array.array(self.typecode, 2*self.example)
   12:         b = array.array(self.typecode)
   12:         self.assertRaises(TypeError, a.tolist, 42)
   12:         self.assertRaises(TypeError, b.fromlist)
   12:         self.assertRaises(TypeError, b.fromlist, 42)
   12:         self.assertRaises(TypeError, b.fromlist, [None])
   12:         b.fromlist(a.tolist())
   12:         self.assertEqual(a, b)
       
    1:     def test_tofromstring(self):
   12:         a = array.array(self.typecode, 2*self.example)
   12:         b = array.array(self.typecode)
   12:         self.assertRaises(TypeError, a.tostring, 42)
   12:         self.assertRaises(TypeError, b.fromstring)
   12:         self.assertRaises(TypeError, b.fromstring, 42)
   12:         self.assertRaises(ValueError, a.fromstring, a)
   12:         b.fromstring(a.tostring())
   12:         self.assertEqual(a, b)
   12:         if a.itemsize>1:
    9:             self.assertRaises(ValueError, b.fromstring, "x")
       
    1:     def test_repr(self):
   12:         a = array.array(self.typecode, 2*self.example)
   12:         self.assertEqual(a, eval(repr(a), {"array": array.array}))
       
   12:         a = array.array(self.typecode)
   12:         self.assertEqual(repr(a), "array('%s')" % self.typecode)
       
    1:     def test_str(self):
   12:         a = array.array(self.typecode, 2*self.example)
   12:         str(a)
       
    1:     def test_cmp(self):
   12:         a = array.array(self.typecode, self.example)
   12:         self.assertIs(a == 42, False)
   12:         self.assertIs(a != 42, True)
       
   12:         self.assertIs(a == a, True)
   12:         self.assertIs(a != a, False)
   12:         self.assertIs(a < a, False)
   12:         self.assertIs(a <= a, True)
   12:         self.assertIs(a > a, False)
   12:         self.assertIs(a >= a, True)
       
   12:         al = array.array(self.typecode, self.smallerexample)
   12:         ab = array.array(self.typecode, self.biggerexample)
       
   12:         self.assertIs(a == 2*a, False)
   12:         self.assertIs(a != 2*a, True)
   12:         self.assertIs(a < 2*a, True)
   12:         self.assertIs(a <= 2*a, True)
   12:         self.assertIs(a > 2*a, False)
   12:         self.assertIs(a >= 2*a, False)
       
   12:         self.assertIs(a == al, False)
   12:         self.assertIs(a != al, True)
   12:         self.assertIs(a < al, False)
   12:         self.assertIs(a <= al, False)
   12:         self.assertIs(a > al, True)
   12:         self.assertIs(a >= al, True)
       
   12:         self.assertIs(a == ab, False)
   12:         self.assertIs(a != ab, True)
   12:         self.assertIs(a < ab, True)
   12:         self.assertIs(a <= ab, True)
   12:         self.assertIs(a > ab, False)
   12:         self.assertIs(a >= ab, False)
       
    1:     def test_add(self):
   12:         a = array.array(self.typecode, self.example) \
   12:             + array.array(self.typecode, self.example[::-1])
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example + self.example[::-1])
               )
       
   12:         b = array.array(self.badtypecode())
   12:         self.assertRaises(TypeError, a.__add__, b)
       
   12:         self.assertRaises(TypeError, a.__add__, "bad")
       
    1:     def test_iadd(self):
   12:         a = array.array(self.typecode, self.example[::-1])
   12:         b = a
   12:         a += array.array(self.typecode, 2*self.example)
   12:         self.assertIs(a, b)
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example[::-1]+2*self.example)
               )
   12:         a = array.array(self.typecode, self.example)
   12:         a += a
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example + self.example)
               )
       
   12:         b = array.array(self.badtypecode())
   12:         self.assertRaises(TypeError, a.__add__, b)
       
   12:         self.assertRaises(TypeError, a.__iadd__, "bad")
       
    1:     def test_mul(self):
   12:         a = 5*array.array(self.typecode, self.example)
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, 5*self.example)
               )
       
   12:         a = array.array(self.typecode, self.example)*5
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example*5)
               )
       
   12:         a = 0*array.array(self.typecode, self.example)
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode)
               )
       
   12:         a = (-1)*array.array(self.typecode, self.example)
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode)
               )
       
   12:         self.assertRaises(TypeError, a.__mul__, "bad")
       
    1:     def test_imul(self):
   12:         a = array.array(self.typecode, self.example)
   12:         b = a
       
   12:         a *= 5
   12:         self.assertIs(a, b)
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, 5*self.example)
               )
       
   12:         a *= 0
   12:         self.assertIs(a, b)
   12:         self.assertEqual(a, array.array(self.typecode))
       
   12:         a *= 1000
   12:         self.assertIs(a, b)
   12:         self.assertEqual(a, array.array(self.typecode))
       
   12:         a *= -1
   12:         self.assertIs(a, b)
   12:         self.assertEqual(a, array.array(self.typecode))
       
   12:         a = array.array(self.typecode, self.example)
   12:         a *= -1
   12:         self.assertEqual(a, array.array(self.typecode))
       
   12:         self.assertRaises(TypeError, a.__imul__, "bad")
       
    1:     def test_getitem(self):
   12:         a = array.array(self.typecode, self.example)
   12:         self.assertEntryEqual(a[0], self.example[0])
   12:         self.assertEntryEqual(a[0L], self.example[0])
   12:         self.assertEntryEqual(a[-1], self.example[-1])
   12:         self.assertEntryEqual(a[-1L], self.example[-1])
   12:         self.assertEntryEqual(a[len(self.example)-1], self.example[-1])
   12:         self.assertEntryEqual(a[-len(self.example)], self.example[0])
   12:         self.assertRaises(TypeError, a.__getitem__)
   12:         self.assertRaises(IndexError, a.__getitem__, len(self.example))
   12:         self.assertRaises(IndexError, a.__getitem__, -len(self.example)-1)
       
    1:     def test_setitem(self):
   12:         a = array.array(self.typecode, self.example)
   12:         a[0] = a[-1]
   12:         self.assertEntryEqual(a[0], a[-1])
       
   12:         a = array.array(self.typecode, self.example)
   12:         a[0L] = a[-1]
   12:         self.assertEntryEqual(a[0], a[-1])
       
   12:         a = array.array(self.typecode, self.example)
   12:         a[-1] = a[0]
   12:         self.assertEntryEqual(a[0], a[-1])
       
   12:         a = array.array(self.typecode, self.example)
   12:         a[-1L] = a[0]
   12:         self.assertEntryEqual(a[0], a[-1])
       
   12:         a = array.array(self.typecode, self.example)
   12:         a[len(self.example)-1] = a[0]
   12:         self.assertEntryEqual(a[0], a[-1])
       
   12:         a = array.array(self.typecode, self.example)
   12:         a[-len(self.example)] = a[-1]
   12:         self.assertEntryEqual(a[0], a[-1])
       
   12:         self.assertRaises(TypeError, a.__setitem__)
   12:         self.assertRaises(TypeError, a.__setitem__, None)
   12:         self.assertRaises(TypeError, a.__setitem__, 0, None)
   12:         self.assertRaises(
   12:             IndexError,
   12:             a.__setitem__,
   12:             len(self.example), self.example[0]
               )
   12:         self.assertRaises(
   12:             IndexError,
   12:             a.__setitem__,
   12:             -len(self.example)-1, self.example[0]
               )
       
    1:     def test_delitem(self):
   12:         a = array.array(self.typecode, self.example)
   12:         del a[0]
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example[1:])
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         del a[-1]
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example[:-1])
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         del a[len(self.example)-1]
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example[:-1])
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         del a[-len(self.example)]
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example[1:])
               )
       
   12:         self.assertRaises(TypeError, a.__delitem__)
   12:         self.assertRaises(TypeError, a.__delitem__, None)
   12:         self.assertRaises(IndexError, a.__delitem__, len(self.example))
   12:         self.assertRaises(IndexError, a.__delitem__, -len(self.example)-1)
       
    1:     def test_getslice(self):
   12:         a = array.array(self.typecode, self.example)
   12:         self.assertEqual(a[:], a)
       
   12:         self.assertEqual(
   12:             a[1:],
   12:             array.array(self.typecode, self.example[1:])
               )
       
   12:         self.assertEqual(
   12:             a[:1],
   12:             array.array(self.typecode, self.example[:1])
               )
       
   12:         self.assertEqual(
   12:             a[:-1],
   12:             array.array(self.typecode, self.example[:-1])
               )
       
   12:         self.assertEqual(
   12:             a[-1:],
   12:             array.array(self.typecode, self.example[-1:])
               )
       
   12:         self.assertEqual(
   12:             a[-1:-1],
   12:             array.array(self.typecode)
               )
       
   12:         self.assertEqual(
   12:             a[2:1],
   12:             array.array(self.typecode)
               )
       
   12:         self.assertEqual(
   12:             a[1000:],
   12:             array.array(self.typecode)
               )
   12:         self.assertEqual(a[-1000:], a)
   12:         self.assertEqual(a[:1000], a)
   12:         self.assertEqual(
   12:             a[:-1000],
   12:             array.array(self.typecode)
               )
   12:         self.assertEqual(a[-1000:1000], a)
   12:         self.assertEqual(
   12:             a[2000:1000],
   12:             array.array(self.typecode)
               )
       
    1:     def test_extended_getslice(self):
               # Test extended slicing by comparing with list slicing
               # (Assumes list conversion works correctly, too)
   12:         a = array.array(self.typecode, self.example)
   12:         indices = (0, None, 1, 3, 19, 100, -1, -2, -31, -100)
  132:         for start in indices:
 1320:             for stop in indices:
                       # Everything except the initial 0 (invalid step)
12000:                 for step in indices[1:]:
10800:                     self.assertEqual(list(a[start:stop:step]),
10800:                                      list(a)[start:stop:step])
       
    1:     def test_setslice(self):
   12:         a = array.array(self.typecode, self.example)
   12:         a[:1] = a
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example + self.example[1:])
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         a[:-1] = a
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example + self.example[-1:])
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         a[-1:] = a
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example[:-1] + self.example)
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         a[1:] = a
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example[:1] + self.example)
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         a[1:-1] = a
   12:         self.assertEqual(
   12:             a,
   12:             array.array(
   12:                 self.typecode,
   12:                 self.example[:1] + self.example + self.example[-1:]
                   )
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         a[1000:] = a
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, 2*self.example)
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         a[-1000:] = a
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example)
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         a[:1000] = a
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example)
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         a[:-1000] = a
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, 2*self.example)
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         a[1:0] = a
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example[:1] + self.example + self.example[1:])
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         a[2000:1000] = a
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, 2*self.example)
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         self.assertRaises(TypeError, a.__setslice__, 0, 0, None)
   12:         self.assertRaises(TypeError, a.__setitem__, slice(0, 0), None)
   12:         self.assertRaises(TypeError, a.__setitem__, slice(0, 1), None)
       
   12:         b = array.array(self.badtypecode())
   12:         self.assertRaises(TypeError, a.__setslice__, 0, 0, b)
   12:         self.assertRaises(TypeError, a.__setitem__, slice(0, 0), b)
   12:         self.assertRaises(TypeError, a.__setitem__, slice(0, 1), b)
       
    1:     def test_extended_set_del_slice(self):
   12:         indices = (0, None, 1, 3, 19, 100, -1, -2, -31, -100)
  132:         for start in indices:
 1320:             for stop in indices:
                       # Everything except the initial 0 (invalid step)
12000:                 for step in indices[1:]:
10800:                     a = array.array(self.typecode, self.example)
10800:                     L = list(a)
                           # Make sure we have a slice of exactly the right length,
                           # but with (hopefully) different data.
10800:                     data = L[start:stop:step]
10800:                     data.reverse()
10800:                     L[start:stop:step] = data
10800:                     a[start:stop:step] = array.array(self.typecode, data)
10800:                     self.assertEqual(a, array.array(self.typecode, L))
       
10800:                     del L[start:stop:step]
10800:                     del a[start:stop:step]
10800:                     self.assertEqual(a, array.array(self.typecode, L))
       
    1:     def test_index(self):
   12:         example = 2*self.example
   12:         a = array.array(self.typecode, example)
   12:         self.assertRaises(TypeError, a.index)
  142:         for x in example:
  130:             self.assertEqual(a.index(x), example.index(x))
   12:         self.assertRaises(ValueError, a.index, None)
   12:         self.assertRaises(ValueError, a.index, self.outside)
       
    1:     def test_count(self):
   12:         example = 2*self.example
   12:         a = array.array(self.typecode, example)
   12:         self.assertRaises(TypeError, a.count)
  142:         for x in example:
  130:             self.assertEqual(a.count(x), example.count(x))
   12:         self.assertEqual(a.count(self.outside), 0)
   12:         self.assertEqual(a.count(None), 0)
       
    1:     def test_remove(self):
   77:         for x in self.example:
   65:             example = 2*self.example
   65:             a = array.array(self.typecode, example)
   65:             pos = example.index(x)
   65:             example2 = example[:pos] + example[pos+1:]
   65:             a.remove(x)
   65:             self.assertEqual(a, array.array(self.typecode, example2))
       
   12:         a = array.array(self.typecode, self.example)
   12:         self.assertRaises(ValueError, a.remove, self.outside)
       
   12:         self.assertRaises(ValueError, a.remove, None)
       
    1:     def test_pop(self):
   12:         a = array.array(self.typecode)
   12:         self.assertRaises(IndexError, a.pop)
       
   12:         a = array.array(self.typecode, 2*self.example)
   12:         self.assertRaises(TypeError, a.pop, 42, 42)
   12:         self.assertRaises(TypeError, a.pop, None)
   12:         self.assertRaises(IndexError, a.pop, len(a))
   12:         self.assertRaises(IndexError, a.pop, -len(a)-1)
       
   12:         self.assertEntryEqual(a.pop(0), self.example[0])
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example[1:]+self.example)
               )
   12:         self.assertEntryEqual(a.pop(1), self.example[2])
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example[1:2]+self.example[3:]+self.example)
               )
   12:         self.assertEntryEqual(a.pop(0), self.example[1])
   12:         self.assertEntryEqual(a.pop(), self.example[-1])
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example[3:]+self.example[:-1])
               )
       
    1:     def test_reverse(self):
   12:         a = array.array(self.typecode, self.example)
   12:         self.assertRaises(TypeError, a.reverse, 42)
   12:         a.reverse()
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example[::-1])
               )
       
    1:     def test_extend(self):
   12:         a = array.array(self.typecode, self.example)
   12:         self.assertRaises(TypeError, a.extend)
   12:         a.extend(array.array(self.typecode, self.example[::-1]))
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example+self.example[::-1])
               )
       
   12:         a = array.array(self.typecode, self.example)
   12:         a.extend(a)
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example+self.example)
               )
       
   12:         b = array.array(self.badtypecode())
   12:         self.assertRaises(TypeError, a.extend, b)
       
   12:         a = array.array(self.typecode, self.example)
   12:         a.extend(self.example[::-1])
   12:         self.assertEqual(
   12:             a,
   12:             array.array(self.typecode, self.example+self.example[::-1])
               )
       
    1:     def test_constructor_with_iterable_argument(self):
   12:         a = array.array(self.typecode, iter(self.example))
   12:         b = array.array(self.typecode, self.example)
   12:         self.assertEqual(a, b)
       
               # non-iterable argument
   12:         self.assertRaises(TypeError, array.array, self.typecode, 10)
       
               # pass through errors raised in __iter__
   24:         class A:
   12:             def __iter__(self):
   12:                 raise UnicodeError
   12:         self.assertRaises(UnicodeError, array.array, self.typecode, A())
       
               # pass through errors raised in next()
   12:         def B():
   12:             raise UnicodeError
>>>>>>             yield None
   12:         self.assertRaises(UnicodeError, array.array, self.typecode, B())
       
    1:     def test_coveritertraverse(self):
   12:         try:
   12:             import gc
>>>>>>         except ImportError:
>>>>>>             self.skipTest('gc module not available')
   12:         a = array.array(self.typecode)
   12:         l = [iter(a)]
   12:         l.append(l)
   12:         gc.collect()
       
    1:     def test_buffer(self):
   12:         a = array.array(self.typecode, self.example)
   12:         with test_support.check_py3k_warnings():
   12:             b = buffer(a)
   12:         self.assertEqual(b[0], a.tostring()[0])
       
    1:     def test_weakref(self):
   12:         s = array.array(self.typecode, self.example)
   12:         p = proxy(s)
   12:         self.assertEqual(p.tostring(), s.tostring())
   12:         s = None
   12:         self.assertRaises(ReferenceError, len, p)
       
    1:     @unittest.skipUnless(hasattr(sys, 'getrefcount'),
    1:                          'test needs sys.getrefcount()')
           def test_bug_782369(self):
  132:         for i in range(10):
  120:             b = array.array('B', range(64))
   12:         rc = sys.getrefcount(10)
  132:         for i in range(10):
  120:             b = array.array('B', range(64))
   12:         self.assertEqual(rc, sys.getrefcount(10))
       
    1:     def test_subclass_with_kwargs(self):
               # SF bug #1486663 -- this used to erroneously raise a TypeError
   12:         with warnings.catch_warnings():
   12:             warnings.filterwarnings("ignore", '', DeprecationWarning)
   12:             ArraySubclassWithKwargs('b', newarg=1)
       
       
    2: class StringTest(BaseTest):
       
    1:     def test_setitem(self):
    2:         super(StringTest, self).test_setitem()
    2:         a = array.array(self.typecode, self.example)
    2:         self.assertRaises(TypeError, a.__setitem__, 0, self.example[:2])
       
    2: class CharacterTest(StringTest):
    1:     typecode = 'c'
    1:     example = '\x01azAZ\x00\xfe'
    1:     smallerexample = '\x01azAY\x00\xfe'
    1:     biggerexample = '\x01azAZ\x00\xff'
    1:     outside = '\x33'
    1:     minitemsize = 1
       
    1:     def test_subbclassing(self):
    2:         class EditableString(array.array):
    1:             def __new__(cls, s, *args, **kwargs):
    1:                 return array.array.__new__(cls, 'c', s)
       
    1:             def __init__(self, s, color='blue'):
    1:                 self.color = color
       
    1:             def strip(self):
    1:                 self[:] = array.array('c', self.tostring().strip())
       
    1:             def __repr__(self):
>>>>>>                 return 'EditableString(%r)' % self.tostring()
       
    1:         s = EditableString("\ttest\r\n")
    1:         s.strip()
    1:         self.assertEqual(s.tostring(), "test")
       
    1:         self.assertEqual(s.color, "blue")
    1:         s.color = "red"
    1:         self.assertEqual(s.color, "red")
    1:         self.assertEqual(s.__dict__.keys(), ["color"])
       
    1:     @test_support.requires_unicode
           def test_nounicode(self):
    1:         a = array.array(self.typecode, self.example)
    1:         self.assertRaises(ValueError, a.fromunicode, unicode(''))
    1:         self.assertRaises(ValueError, a.tounicode)
       
    1: tests.append(CharacterTest)
       
    1: if test_support.have_unicode:
    2:     class UnicodeTest(StringTest):
    1:         typecode = 'u'
    1:         example = unicode(r'\x01\u263a\x00\ufeff', 'unicode-escape')
    1:         smallerexample = unicode(r'\x01\u263a\x00\ufefe', 'unicode-escape')
    1:         biggerexample = unicode(r'\x01\u263a\x01\ufeff', 'unicode-escape')
    1:         outside = unicode('\x33')
    1:         minitemsize = 2
       
    1:         def test_unicode(self):
    1:             self.assertRaises(TypeError, array.array, 'b', unicode('foo', 'ascii'))
       
    1:             a = array.array('u', unicode(r'\xa0\xc2\u1234', 'unicode-escape'))
    1:             a.fromunicode(unicode(' ', 'ascii'))
    1:             a.fromunicode(unicode('', 'ascii'))
    1:             a.fromunicode(unicode('', 'ascii'))
    1:             a.fromunicode(unicode(r'\x11abc\xff\u1234', 'unicode-escape'))
    1:             s = a.tounicode()
    1:             self.assertEqual(
    1:                 s,
    1:                 unicode(r'\xa0\xc2\u1234 \x11abc\xff\u1234', 'unicode-escape')
                   )
       
    1:             s = unicode(r'\x00="\'a\\b\x80\xff\u0000\u0001\u1234', 'unicode-escape')
    1:             a = array.array('u', s)
    1:             self.assertEqual(
    1:                 repr(a),
    1:                 r"""array('u', u'\x00="\'a\\b\x80\xff\x00\x01\u1234')"""
                   )
       
    1:             self.assertRaises(TypeError, a.fromunicode)
       
    1:     tests.append(UnicodeTest)
       
    2: class NumberTest(BaseTest):
       
    1:     def test_extslice(self):
   10:         a = array.array(self.typecode, range(5))
   10:         self.assertEqual(a[::], a)
   10:         self.assertEqual(a[::2], array.array(self.typecode, [0,2,4]))
   10:         self.assertEqual(a[1::2], array.array(self.typecode, [1,3]))
   10:         self.assertEqual(a[::-1], array.array(self.typecode, [4,3,2,1,0]))
   10:         self.assertEqual(a[::-2], array.array(self.typecode, [4,2,0]))
   10:         self.assertEqual(a[3::-2], array.array(self.typecode, [3,1]))
   10:         self.assertEqual(a[-100:100:], a)
   10:         self.assertEqual(a[100:-100:-1], a[::-1])
   10:         self.assertEqual(a[-100L:100L:2L], array.array(self.typecode, [0,2,4]))
   10:         self.assertEqual(a[1000:2000:2], array.array(self.typecode, []))
   10:         self.assertEqual(a[-1000:-2000:-2], array.array(self.typecode, []))
       
    1:     def test_delslice(self):
   10:         a = array.array(self.typecode, range(5))
   10:         del a[::2]
   10:         self.assertEqual(a, array.array(self.typecode, [1,3]))
   10:         a = array.array(self.typecode, range(5))
   10:         del a[1::2]
   10:         self.assertEqual(a, array.array(self.typecode, [0,2,4]))
   10:         a = array.array(self.typecode, range(5))
   10:         del a[1::-2]
   10:         self.assertEqual(a, array.array(self.typecode, [0,2,3,4]))
   10:         a = array.array(self.typecode, range(10))
   10:         del a[::1000]
   10:         self.assertEqual(a, array.array(self.typecode, [1,2,3,4,5,6,7,8,9]))
               # test issue7788
   10:         a = array.array(self.typecode, range(10))
   10:         del a[9::1<<333]
       
    1:     def test_assignment(self):
   10:         a = array.array(self.typecode, range(10))
   10:         a[::2] = array.array(self.typecode, [42]*5)
   10:         self.assertEqual(a, array.array(self.typecode, [42, 1, 42, 3, 42, 5, 42, 7, 42, 9]))
   10:         a = array.array(self.typecode, range(10))
   10:         a[::-4] = array.array(self.typecode, [10]*3)
   10:         self.assertEqual(a, array.array(self.typecode, [0, 10, 2, 3, 4, 10, 6, 7, 8 ,10]))
   10:         a = array.array(self.typecode, range(4))
   10:         a[::-1] = a
   10:         self.assertEqual(a, array.array(self.typecode, [3, 2, 1, 0]))
   10:         a = array.array(self.typecode, range(10))
   10:         b = a[:]
   10:         c = a[:]
   10:         ins = array.array(self.typecode, range(2))
   10:         a[2:3] = ins
   10:         b[slice(2,3)] = ins
   10:         c[2:3:] = ins
       
    1:     def test_iterationcontains(self):
   10:         a = array.array(self.typecode, range(10))
   10:         self.assertEqual(list(a), range(10))
   10:         b = array.array(self.typecode, [20])
   10:         self.assertEqual(a[-1] in a, True)
   10:         self.assertEqual(b[0] not in a, True)
       
    1:     def check_overflow(self, lower, upper):
               # method to be used by subclasses
       
               # should not overflow assigning lower limit
    8:         a = array.array(self.typecode, [lower])
    8:         a[0] = lower
               # should overflow assigning less than lower limit
    8:         self.assertRaises(OverflowError, array.array, self.typecode, [lower-1])
    8:         self.assertRaises(OverflowError, a.__setitem__, 0, lower-1)
               # should not overflow assigning upper limit
    8:         a = array.array(self.typecode, [upper])
    8:         a[0] = upper
               # should overflow assigning more than upper limit
    8:         self.assertRaises(OverflowError, array.array, self.typecode, [upper+1])
    8:         self.assertRaises(OverflowError, a.__setitem__, 0, upper+1)
       
    1:     def test_subclassing(self):
   10:         typecode = self.typecode
   20:         class ExaggeratingArray(array.array):
   10:             __slots__ = ['offset']
       
   10:             def __new__(cls, typecode, data, offset):
   10:                 return array.array.__new__(cls, typecode, data)
       
   10:             def __init__(self, typecode, data, offset):
   10:                 self.offset = offset
       
   10:             def __getitem__(self, i):
   10:                 return array.array.__getitem__(self, i) + self.offset
       
   10:         a = ExaggeratingArray(self.typecode, [3, 6, 7, 11], 4)
   10:         self.assertEntryEqual(a[0], 7)
       
   10:         self.assertRaises(AttributeError, setattr, a, "color", "blue")
       
    2: class SignedNumberTest(NumberTest):
    1:     example = [-1, 0, 1, 42, 0x7f]
    1:     smallerexample = [-1, 0, 1, 42, 0x7e]
    1:     biggerexample = [-1, 0, 1, 43, 0x7f]
    1:     outside = 23
       
    1:     def test_overflow(self):
    4:         a = array.array(self.typecode)
    4:         lower = -1 * long(pow(2, a.itemsize * 8 - 1))
    4:         upper = long(pow(2, a.itemsize * 8 - 1)) - 1L
    4:         self.check_overflow(lower, upper)
       
    2: class UnsignedNumberTest(NumberTest):
    1:     example = [0, 1, 17, 23, 42, 0xff]
    1:     smallerexample = [0, 1, 17, 23, 42, 0xfe]
    1:     biggerexample = [0, 1, 17, 23, 43, 0xff]
    1:     outside = 0xaa
       
    1:     def test_overflow(self):
    4:         a = array.array(self.typecode)
    4:         lower = 0
    4:         upper = long(pow(2, a.itemsize * 8)) - 1L
    4:         self.check_overflow(lower, upper)
       
    1:     @test_support.cpython_only
           def test_sizeof_with_buffer(self):
    4:         a = array.array(self.typecode, self.example)
    4:         basesize = test_support.calcvobjsize('4P')
    4:         buffer_size = a.buffer_info()[1] * a.itemsize
    4:         test_support.check_sizeof(self, a, basesize + buffer_size)
       
    1:     @test_support.cpython_only
           def test_sizeof_without_buffer(self):
    4:         a = array.array(self.typecode)
    4:         basesize = test_support.calcvobjsize('4P')
    4:         test_support.check_sizeof(self, a, basesize)
       
       
    2: class ByteTest(SignedNumberTest):
    1:     typecode = 'b'
    1:     minitemsize = 1
    1: tests.append(ByteTest)
       
    2: class UnsignedByteTest(UnsignedNumberTest):
    1:     typecode = 'B'
    1:     minitemsize = 1
    1: tests.append(UnsignedByteTest)
       
    2: class ShortTest(SignedNumberTest):
    1:     typecode = 'h'
    1:     minitemsize = 2
    1: tests.append(ShortTest)
       
    2: class UnsignedShortTest(UnsignedNumberTest):
    1:     typecode = 'H'
    1:     minitemsize = 2
    1: tests.append(UnsignedShortTest)
       
    2: class IntTest(SignedNumberTest):
    1:     typecode = 'i'
    1:     minitemsize = 2
    1: tests.append(IntTest)
       
    2: class UnsignedIntTest(UnsignedNumberTest):
    1:     typecode = 'I'
    1:     minitemsize = 2
    1: tests.append(UnsignedIntTest)
       
    2: class LongTest(SignedNumberTest):
    1:     typecode = 'l'
    1:     minitemsize = 4
    1: tests.append(LongTest)
       
    2: class UnsignedLongTest(UnsignedNumberTest):
    1:     typecode = 'L'
    1:     minitemsize = 4
    1: tests.append(UnsignedLongTest)
       
       
    2: @test_support.requires_unicode
    1: class UnicodeTypecodeTest(unittest.TestCase):
    1:     def test_unicode_typecode(self):
   13:         for typecode in typecodes:
   12:             a = array.array(unicode(typecode))
   12:             self.assertEqual(a.typecode, typecode)
   12:             self.assertIs(type(a.typecode), str)
    1: tests.append(UnicodeTypecodeTest)
       
       
    2: class FPTest(NumberTest):
    1:     example = [-42.0, 0, 42, 1e5, -1e10]
    1:     smallerexample = [-42.0, 0, 42, 1e5, -2e10]
    1:     biggerexample = [-42.0, 0, 42, 1e5, 1e10]
    1:     outside = 23
       
    1:     def assertEntryEqual(self, entry1, entry2):
   34:         self.assertAlmostEqual(entry1, entry2)
       
    1:     def test_byteswap(self):
    2:         a = array.array(self.typecode, self.example)
    2:         self.assertRaises(TypeError, a.byteswap, 42)
    2:         if a.itemsize in (1, 2, 4, 8):
    2:             b = array.array(self.typecode, self.example)
    2:             b.byteswap()
    2:             if a.itemsize==1:
>>>>>>                 self.assertEqual(a, b)
                   else:
                       # On alphas treating the byte swapped bit patters as
                       # floats/doubles results in floating point exceptions
                       # => compare the 8bit string values instead
    2:                 self.assertNotEqual(a.tostring(), b.tostring())
    2:             b.byteswap()
    2:             self.assertEqual(a, b)
       
    2: class FloatTest(FPTest):
    1:     typecode = 'f'
    1:     minitemsize = 4
    1: tests.append(FloatTest)
       
    2: class DoubleTest(FPTest):
    1:     typecode = 'd'
    1:     minitemsize = 8
       
    1:     def test_alloc_overflow(self):
    1:         from sys import maxsize
    1:         a = array.array('d', [-1]*65536)
    1:         try:
    1:             a *= maxsize//65536 + 1
    1:         except MemoryError:
    1:             pass
               else:
>>>>>>             self.fail("Array of size > maxsize created - MemoryError expected")
    1:         b = array.array('d', [ 2.71828183, 3.14159265, -1])
    1:         try:
    1:             b * (maxsize//3 + 1)
    1:         except MemoryError:
    1:             pass
               else:
>>>>>>             self.fail("Array of size > maxsize created - MemoryError expected")
       
    1: tests.append(DoubleTest)
       
    1: def test_main(verbose=None):
    1:     import sys
       
    1:     test_support.run_unittest(*tests)
       
           # verify reference counting
>>>>>>     if verbose and hasattr(sys, "gettotalrefcount"):
>>>>>>         import gc
>>>>>>         counts = [None] * 5
>>>>>>         for i in xrange(len(counts)):
>>>>>>             test_support.run_unittest(*tests)
>>>>>>             gc.collect()
>>>>>>             counts[i] = sys.gettotalrefcount()
>>>>>>         print counts
       
    1: if __name__ == "__main__":
>>>>>>     test_main(verbose=True)
