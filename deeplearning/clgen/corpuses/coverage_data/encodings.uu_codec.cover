       """ Python 'uu_codec' Codec - UU content transfer encoding
       
           Unlike most of the other codecs which target Unicode, this codec
           will return Python string objects for both encode and decode.
       
           Written by Marc-Andre Lemburg (mal@lemburg.com). Some details were
           adapted from uu.py which was written by Lance Ellinghouse and
           modified by Jack Jansen and Fredrik Lundh.
       
    1: """
    1: import codecs, binascii
       
       ### Codec APIs
       
    1: def uu_encode(input,errors='strict',filename='<data>',mode=0666):
       
           """ Encodes the object input and returns a tuple (output
               object, length consumed).
       
               errors defines the error handling to apply. It defaults to
               'strict' handling which is the only currently supported
               error handling for this codec.
       
           """
    4:     assert errors == 'strict'
    4:     from cStringIO import StringIO
    4:     from binascii import b2a_uu
           # using str() because of cStringIO's Unicode undesired Unicode behavior.
    4:     infile = StringIO(str(input))
    4:     outfile = StringIO()
    4:     read = infile.read
    4:     write = outfile.write
       
           # Encode
    4:     write('begin %o %s\n' % (mode & 0777, filename))
    4:     chunk = read(45)
    8:     while chunk:
    4:         write(b2a_uu(chunk))
    4:         chunk = read(45)
    4:     write(' \nend\n')
       
    4:     return (outfile.getvalue(), len(input))
       
    1: def uu_decode(input,errors='strict'):
       
           """ Decodes the object input and returns a tuple (output
               object, length consumed).
       
               input must be an object which provides the bf_getreadbuf
               buffer slot. Python strings, buffer objects and memory
               mapped files are examples of objects providing this slot.
       
               errors defines the error handling to apply. It defaults to
               'strict' handling which is the only currently supported
               error handling for this codec.
       
               Note: filename and file mode information in the input data is
               ignored.
       
           """
    6:     assert errors == 'strict'
    6:     from cStringIO import StringIO
    6:     from binascii import a2b_uu
    6:     infile = StringIO(str(input))
    6:     outfile = StringIO()
    6:     readline = infile.readline
    6:     write = outfile.write
       
           # Find start of encoded data
    6:     while 1:
    6:         s = readline()
    6:         if not s:
    1:             raise ValueError, 'Missing "begin" line in input data'
    5:         if s[:5] == 'begin':
    5:             break
       
           # Decode
    5:     while 1:
   15:         s = readline()
   15:         if not s or \
   15:            s == 'end\n':
    5:             break
   10:         try:
   10:             data = a2b_uu(s)
    1:         except binascii.Error, v:
                   # Workaround for broken uuencoders by /Fredrik Lundh
    1:             nbytes = (((ord(s[0])-32) & 63) * 4 + 5) // 3
    1:             data = a2b_uu(s[:nbytes])
                   #sys.stderr.write("Warning: %s\n" % str(v))
   10:         write(data)
    5:     if not s:
>>>>>>         raise ValueError, 'Truncated input data'
       
    5:     return (outfile.getvalue(), len(input))
       
    2: class Codec(codecs.Codec):
       
    1:     def encode(self,input,errors='strict'):
>>>>>>         return uu_encode(input,errors)
       
    1:     def decode(self,input,errors='strict'):
>>>>>>         return uu_decode(input,errors)
       
    2: class IncrementalEncoder(codecs.IncrementalEncoder):
    1:     def encode(self, input, final=False):
>>>>>>         return uu_encode(input, self.errors)[0]
       
    2: class IncrementalDecoder(codecs.IncrementalDecoder):
    1:     def decode(self, input, final=False):
>>>>>>         return uu_decode(input, self.errors)[0]
       
    2: class StreamWriter(Codec,codecs.StreamWriter):
    1:     pass
       
    2: class StreamReader(Codec,codecs.StreamReader):
    1:     pass
       
       ### encodings module API
       
    1: def getregentry():
    3:     return codecs.CodecInfo(
    3:         name='uu',
    3:         encode=uu_encode,
    3:         decode=uu_decode,
    3:         incrementalencoder=IncrementalEncoder,
    3:         incrementaldecoder=IncrementalDecoder,
    3:         streamreader=StreamReader,
    3:         streamwriter=StreamWriter,
    3:         _is_text_encoding=False,
           )
