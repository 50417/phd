    1: import unittest
    1: from test.test_support import requires
       
    1: import Tkinter as tk
    1: from Tkinter import Text as tkText
    1: from idlelib.idle_test.mock_tk import Text as mkText
    1: from idlelib.IdleHistory import History
    1: from idlelib.configHandler import idleConf
       
    1: line1 = 'a = 7'
    1: line2 = 'b = a'
       
    2: class StoreTest(unittest.TestCase):
    1:     '''Tests History.__init__ and History.store with mock Text'''
       
    1:     @classmethod
           def setUpClass(cls):
    1:         cls.text = mkText()
    1:         cls.history = History(cls.text)
       
    1:     def tearDown(self):
    4:         self.text.delete('1.0', 'end')
    4:         self.history.history = []
       
    1:     def test_init(self):
    1:         self.assertIs(self.history.text, self.text)
    1:         self.assertEqual(self.history.history, [])
    1:         self.assertIsNone(self.history.prefix)
    1:         self.assertIsNone(self.history.pointer)
    1:         self.assertEqual(self.history.cyclic,
    1:                 idleConf.GetOption("main", "History",  "cyclic", 1, "bool"))
       
    1:     def test_store_short(self):
    1:         self.history.store('a')
    1:         self.assertEqual(self.history.history, [])
    1:         self.history.store('  a  ')
    1:         self.assertEqual(self.history.history, [])
       
    1:     def test_store_dup(self):
    1:         self.history.store(line1)
    1:         self.assertEqual(self.history.history, [line1])
    1:         self.history.store(line2)
    1:         self.assertEqual(self.history.history, [line1, line2])
    1:         self.history.store(line1)
    1:         self.assertEqual(self.history.history, [line2, line1])
       
    1:     def test_store_reset(self):
    1:         self.history.prefix = line1
    1:         self.history.pointer = 0
    1:         self.history.store(line2)
    1:         self.assertIsNone(self.history.prefix)
    1:         self.assertIsNone(self.history.pointer)
       
       
    2: class TextWrapper:
    1:     def __init__(self, master):
>>>>>>         self.text = tkText(master=master)
>>>>>>         self._bell = False
    1:     def __getattr__(self, name):
>>>>>>         return getattr(self.text, name)
    1:     def bell(self):
>>>>>>         self._bell = True
       
    2: class FetchTest(unittest.TestCase):
           '''Test History.fetch with wrapped tk.Text.
    1:     '''
    1:     @classmethod
           def setUpClass(cls):
    1:         requires('gui')
>>>>>>         cls.root = tk.Tk()
>>>>>>         cls.root.withdraw()
       
    1:     def setUp(self):
>>>>>>         self.text = text = TextWrapper(self.root)
>>>>>>         text.insert('1.0', ">>> ")
>>>>>>         text.mark_set('iomark', '1.4')
>>>>>>         text.mark_gravity('iomark', 'left')
>>>>>>         self.history = History(text)
>>>>>>         self.history.history = [line1, line2]
       
    1:     @classmethod
           def tearDownClass(cls):
>>>>>>         cls.root.destroy()
>>>>>>         del cls.root
       
    1:     def fetch_test(self, reverse, line, prefix, index, bell=False):
               # Perform one fetch as invoked by Alt-N or Alt-P
               # Test the result. The line test is the most important.
               # The last two are diagnostic of fetch internals.
>>>>>>         History = self.history
>>>>>>         History.fetch(reverse)
       
>>>>>>         Equal = self.assertEqual
>>>>>>         Equal(self.text.get('iomark', 'end-1c'), line)
>>>>>>         Equal(self.text._bell, bell)
>>>>>>         if bell:
>>>>>>             self.text._bell = False
>>>>>>         Equal(History.prefix, prefix)
>>>>>>         Equal(History.pointer, index)
>>>>>>         Equal(self.text.compare("insert", '==', "end-1c"), 1)
       
    1:     def test_fetch_prev_cyclic(self):
>>>>>>         prefix = ''
>>>>>>         test = self.fetch_test
>>>>>>         test(True, line2, prefix, 1)
>>>>>>         test(True, line1, prefix, 0)
>>>>>>         test(True, prefix, None, None, bell=True)
       
    1:     def test_fetch_next_cyclic(self):
>>>>>>         prefix = ''
>>>>>>         test  = self.fetch_test
>>>>>>         test(False, line1, prefix, 0)
>>>>>>         test(False, line2, prefix, 1)
>>>>>>         test(False, prefix, None, None, bell=True)
       
           # Prefix 'a' tests skip line2, which starts with 'b'
    1:     def test_fetch_prev_prefix(self):
>>>>>>         prefix = 'a'
>>>>>>         self.text.insert('iomark', prefix)
>>>>>>         self.fetch_test(True, line1, prefix, 0)
>>>>>>         self.fetch_test(True, prefix, None, None, bell=True)
       
    1:     def test_fetch_next_prefix(self):
>>>>>>         prefix = 'a'
>>>>>>         self.text.insert('iomark', prefix)
>>>>>>         self.fetch_test(False, line1, prefix, 0)
>>>>>>         self.fetch_test(False, prefix, None, None, bell=True)
       
    1:     def test_fetch_prev_noncyclic(self):
>>>>>>         prefix = ''
>>>>>>         self.history.cyclic = False
>>>>>>         test = self.fetch_test
>>>>>>         test(True, line2, prefix, 1)
>>>>>>         test(True, line1, prefix, 0)
>>>>>>         test(True, line1, prefix, 0, bell=True)
       
    1:     def test_fetch_next_noncyclic(self):
>>>>>>         prefix = ''
>>>>>>         self.history.cyclic = False
>>>>>>         test  = self.fetch_test
>>>>>>         test(False, prefix, None, None, bell=True)
>>>>>>         test(True, line2, prefix, 1)
>>>>>>         test(False, prefix, None, None, bell=True)
>>>>>>         test(False, prefix, None, None, bell=True)
       
    1:     def test_fetch_cursor_move(self):
               # Move cursor after fetch
>>>>>>         self.history.fetch(reverse=True)  # initialization
>>>>>>         self.text.mark_set('insert', 'iomark')
>>>>>>         self.fetch_test(True, line2, None, None, bell=True)
       
    1:     def test_fetch_edit(self):
               # Edit after fetch
>>>>>>         self.history.fetch(reverse=True)  # initialization
>>>>>>         self.text.delete('iomark', 'insert', )
>>>>>>         self.text.insert('iomark', 'a =')
>>>>>>         self.fetch_test(True, line1, 'a =', 0)  # prefix is reset
       
    1:     def test_history_prev_next(self):
               # Minimally test functions bound to events
>>>>>>         self.history.history_prev('dummy event')
>>>>>>         self.assertEqual(self.history.pointer, 1)
>>>>>>         self.history.history_next('dummy event')
>>>>>>         self.assertEqual(self.history.pointer, None)
       
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main(verbosity=2, exit=2)
