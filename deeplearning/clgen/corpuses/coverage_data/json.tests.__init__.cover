    1: import os
    1: import sys
    1: import json
    1: import doctest
    1: import unittest
       
    1: from test import test_support
       
       # import json with and without accelerations
    1: cjson = test_support.import_fresh_module('json', fresh=['_json'])
    1: pyjson = test_support.import_fresh_module('json', blocked=['_json'])
       
       # create two base classes that will be used by the other tests
    2: class PyTest(unittest.TestCase):
    1:     json = pyjson
    1:     loads = staticmethod(pyjson.loads)
    1:     dumps = staticmethod(pyjson.dumps)
       
    2: @unittest.skipUnless(cjson, 'requires _json')
    1: class CTest(unittest.TestCase):
    1:     if cjson is not None:
    1:         json = cjson
    1:         loads = staticmethod(cjson.loads)
    1:         dumps = staticmethod(cjson.dumps)
       
       # test PyTest and CTest checking if the functions come from the right module
    2: class TestPyTest(PyTest):
    1:     def test_pyjson(self):
    1:         self.assertEqual(self.json.scanner.make_scanner.__module__,
    1:                          'json.scanner')
    1:         self.assertEqual(self.json.decoder.scanstring.__module__,
    1:                          'json.decoder')
    1:         self.assertEqual(self.json.encoder.encode_basestring_ascii.__module__,
    1:                          'json.encoder')
       
    2: class TestCTest(CTest):
    1:     def test_cjson(self):
    1:         self.assertEqual(self.json.scanner.make_scanner.__module__, '_json')
    1:         self.assertEqual(self.json.decoder.scanstring.__module__, '_json')
    1:         self.assertEqual(self.json.encoder.c_make_encoder.__module__, '_json')
    1:         self.assertEqual(self.json.encoder.encode_basestring_ascii.__module__,
    1:                          '_json')
       
       
    1: here = os.path.dirname(__file__)
       
    1: def test_suite():
    1:     suite = additional_tests()
    1:     loader = unittest.TestLoader()
   55:     for fn in os.listdir(here):
   54:         if fn.startswith("test") and fn.endswith(".py"):
   17:             modname = "json.tests." + fn[:-3]
   17:             __import__(modname)
   17:             module = sys.modules[modname]
   17:             suite.addTests(loader.loadTestsFromModule(module))
    1:     return suite
       
    1: def additional_tests():
    1:     suite = unittest.TestSuite()
    4:     for mod in (json, json.encoder, json.decoder):
    3:         suite.addTest(doctest.DocTestSuite(mod))
    1:     suite.addTest(TestPyTest('test_pyjson'))
    1:     suite.addTest(TestCTest('test_cjson'))
    1:     return suite
       
    1: def main():
>>>>>>     suite = test_suite()
>>>>>>     runner = unittest.TextTestRunner()
>>>>>>     runner.run(suite)
       
    1: if __name__ == '__main__':
>>>>>>     sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
>>>>>>     main()
