       # Copyright 2006 Google, Inc. All Rights Reserved.
       # Licensed to PSF under a Contributor Agreement.
       
       """Fixer for execfile.
       
       This converts usages of the execfile function into calls to the built-in
       exec() function.
    1: """
       
    1: from .. import fixer_base
    1: from ..fixer_util import (Comma, Name, Call, LParen, RParen, Dot, Node,
                                 ArgList, String, syms)
       
       
    2: class FixExecfile(fixer_base.BaseFix):
    1:     BM_compatible = True
       
           PATTERN = """
           power< 'execfile' trailer< '(' arglist< filename=any [',' globals=any [',' locals=any ] ] > ')' > >
           |
           power< 'execfile' trailer< '(' filename=any ')' > >
    1:     """
       
    1:     def transform(self, node, results):
    8:         assert results
    8:         filename = results["filename"]
    8:         globals = results.get("globals")
    8:         locals = results.get("locals")
       
               # Copy over the prefix from the right parentheses end of the execfile
               # call.
    8:         execfile_paren = node.children[-1].children[-1].clone()
               # Construct open().read().
    8:         open_args = ArgList([filename.clone()], rparen=execfile_paren)
    8:         open_call = Node(syms.power, [Name(u"open"), open_args])
    8:         read = [Node(syms.trailer, [Dot(), Name(u'read')]),
    8:                 Node(syms.trailer, [LParen(), RParen()])]
    8:         open_expr = [open_call] + read
               # Wrap the open call in a compile call. This is so the filename will be
               # preserved in the execed code.
    8:         filename_arg = filename.clone()
    8:         filename_arg.prefix = u" "
    8:         exec_str = String(u"'exec'", u" ")
    8:         compile_args = open_expr + [Comma(), filename_arg, Comma(), exec_str]
    8:         compile_call = Call(Name(u"compile"), compile_args, u"")
               # Finally, replace the execfile call with an exec call.
    8:         args = [compile_call]
    8:         if globals is not None:
    6:             args.extend([Comma(), globals.clone()])
    8:         if locals is not None:
    2:             args.extend([Comma(), locals.clone()])
    8:         return Call(Name(u"exec"), args, prefix=node.prefix)
