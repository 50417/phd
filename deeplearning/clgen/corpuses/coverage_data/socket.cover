       # Wrapper module for _socket, providing some additional facilities
       # implemented in Python.
       
       """\
       This module provides socket operations and some related functions.
       On Unix, it supports IP (Internet Protocol) and Unix domain sockets.
       On other systems, it only supports IP. Functions specific for a
       socket are available as methods of the socket object.
       
       Functions:
       
       socket() -- create a new socket object
       socketpair() -- create a pair of new socket objects [*]
       fromfd() -- create a socket object from an open file descriptor [*]
       gethostname() -- return the current hostname
       gethostbyname() -- map a hostname to its IP number
       gethostbyaddr() -- map an IP number or hostname to DNS info
       getservbyname() -- map a service name and a protocol name to a port number
       getprotobyname() -- map a protocol name (e.g. 'tcp') to a number
       ntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order
       htons(), htonl() -- convert 16, 32 bit int from host to network byte order
       inet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format
       inet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)
       ssl() -- secure socket layer support (only available if configured)
       socket.getdefaulttimeout() -- get the default timeout value
       socket.setdefaulttimeout() -- set the default timeout value
       create_connection() -- connects to an address, with an optional timeout and
                              optional source address.
       
        [*] not available on all platforms!
       
       Special objects:
       
       SocketType -- type object for socket objects
       error -- exception raised for I/O errors
       has_ipv6 -- boolean value indicating if IPv6 is supported
       
       Integer constants:
       
       AF_INET, AF_UNIX -- socket domains (first argument to socket() call)
       SOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)
       
       Many other constants may be defined; these may be used in calls to
       the setsockopt() and getsockopt() methods.
>>>>>> """
       
>>>>>> import _socket
>>>>>> from _socket import *
>>>>>> from functools import partial
>>>>>> from types import MethodType
       
>>>>>> try:
>>>>>>     import _ssl
>>>>>> except ImportError:
           # no SSL support
>>>>>>     pass
       else:
>>>>>>     def ssl(sock, keyfile=None, certfile=None):
               # we do an internal import here because the ssl
               # module imports the socket module
>>>>>>         import ssl as _realssl
>>>>>>         warnings.warn("socket.ssl() is deprecated.  Use ssl.wrap_socket() instead.",
>>>>>>                       DeprecationWarning, stacklevel=2)
>>>>>>         return _realssl.sslwrap_simple(sock, keyfile, certfile)
       
           # we need to import the same constants we used to...
>>>>>>     from _ssl import SSLError as sslerror
>>>>>>     from _ssl import \
                RAND_add, \
                RAND_status, \
                SSL_ERROR_ZERO_RETURN, \
                SSL_ERROR_WANT_READ, \
                SSL_ERROR_WANT_WRITE, \
                SSL_ERROR_WANT_X509_LOOKUP, \
                SSL_ERROR_SYSCALL, \
                SSL_ERROR_SSL, \
                SSL_ERROR_WANT_CONNECT, \
                SSL_ERROR_EOF, \
                SSL_ERROR_INVALID_ERROR_CODE
>>>>>>     try:
>>>>>>         from _ssl import RAND_egd
>>>>>>     except ImportError:
               # LibreSSL does not provide RAND_egd
>>>>>>         pass
       
>>>>>> import os, sys, warnings
       
>>>>>> try:
>>>>>>     from cStringIO import StringIO
>>>>>> except ImportError:
>>>>>>     from StringIO import StringIO
       
>>>>>> try:
>>>>>>     import errno
>>>>>> except ImportError:
>>>>>>     errno = None
>>>>>> EBADF = getattr(errno, 'EBADF', 9)
>>>>>> EINTR = getattr(errno, 'EINTR', 4)
       
>>>>>> __all__ = ["getfqdn", "create_connection"]
>>>>>> __all__.extend(os._get_exports_list(_socket))
       
       
>>>>>> _realsocket = socket
       
       # WSA error codes
>>>>>> if sys.platform.lower().startswith("win"):
>>>>>>     errorTab = {}
>>>>>>     errorTab[10004] = "The operation was interrupted."
>>>>>>     errorTab[10009] = "A bad file handle was passed."
>>>>>>     errorTab[10013] = "Permission denied."
>>>>>>     errorTab[10014] = "A fault occurred on the network??" # WSAEFAULT
>>>>>>     errorTab[10022] = "An invalid operation was attempted."
>>>>>>     errorTab[10035] = "The socket operation would block"
>>>>>>     errorTab[10036] = "A blocking operation is already in progress."
>>>>>>     errorTab[10048] = "The network address is in use."
>>>>>>     errorTab[10054] = "The connection has been reset."
>>>>>>     errorTab[10058] = "The network has been shut down."
>>>>>>     errorTab[10060] = "The operation timed out."
>>>>>>     errorTab[10061] = "Connection refused."
>>>>>>     errorTab[10063] = "The name is too long."
>>>>>>     errorTab[10064] = "The host is down."
>>>>>>     errorTab[10065] = "The host is unreachable."
>>>>>>     __all__.append("errorTab")
       
       
       
>>>>>> def getfqdn(name=''):
           """Get fully qualified domain name from name.
       
           An empty argument is interpreted as meaning the local host.
       
           First the hostname returned by gethostbyaddr() is checked, then
           possibly existing aliases. In case no FQDN is available, hostname
           from gethostname() is returned.
           """
 6030:     name = name.strip()
 6030:     if not name or name == '0.0.0.0':
 5993:         name = gethostname()
 6030:     try:
 6030:         hostname, aliases, ipaddrs = gethostbyaddr(name)
 5993:     except error:
 5993:         pass
           else:
   37:         aliases.insert(0, hostname)
   74:         for name in aliases:
   74:             if '.' in name:
   37:                 break
               else:
>>>>>>             name = hostname
 6030:     return name
       
       
       _socketmethods = (
>>>>>>     'bind', 'connect', 'connect_ex', 'fileno', 'listen',
>>>>>>     'getpeername', 'getsockname', 'getsockopt', 'setsockopt',
>>>>>>     'sendall', 'setblocking',
>>>>>>     'settimeout', 'gettimeout', 'shutdown')
       
>>>>>> if os.name == "nt":
>>>>>>     _socketmethods = _socketmethods + ('ioctl',)
       
>>>>>> if sys.platform == "riscos":
>>>>>>     _socketmethods = _socketmethods + ('sleeptaskw',)
       
       # All the method names that must be delegated to either the real socket
       # object or the _closedsocket object.
>>>>>> _delegate_methods = ("recv", "recvfrom", "recv_into", "recvfrom_into",
>>>>>>                      "send", "sendto")
       
>>>>>> class _closedsocket(object):
>>>>>>     __slots__ = []
>>>>>>     def _dummy(*args):
   21:         raise error(EBADF, 'Bad file descriptor')
           # All _delegate_methods must also be initialized here.
>>>>>>     send = recv = recv_into = sendto = recvfrom = recvfrom_into = _dummy
>>>>>>     __getattr__ = _dummy
       
       # Wrapper around platform socket objects. This implements
       # a platform-independent dup() functionality. The
       # implementation currently relies on reference counting
       # to close the underlying socket object.
>>>>>> class _socketobject(object):
       
>>>>>>     __doc__ = _realsocket.__doc__
       
>>>>>>     __slots__ = ["_sock", "__weakref__"] + list(_delegate_methods)
       
>>>>>>     def __init__(self, family=AF_INET, type=SOCK_STREAM, proto=0, _sock=None):
 2343:         if _sock is None:
 1435:             _sock = _realsocket(family, type, proto)
 2343:         self._sock = _sock
16401:         for method in _delegate_methods:
14058:             setattr(self, method, getattr(_sock, method))
       
>>>>>>     def close(self, _closedsocket=_closedsocket,
>>>>>>               _delegate_methods=_delegate_methods, setattr=setattr):
               # This function should not reference any globals. See issue #808164.
 1994:         self._sock = _closedsocket()
 1994:         dummy = self._sock._dummy
13958:         for method in _delegate_methods:
11964:             setattr(self, method, dummy)
>>>>>>     close.__doc__ = _realsocket.close.__doc__
       
>>>>>>     def accept(self):
  596:         sock, addr = self._sock.accept()
  590:         return _socketobject(_sock=sock), addr
>>>>>>     accept.__doc__ = _realsocket.accept.__doc__
       
>>>>>>     def dup(self):
               """dup() -> socket object
       
               Return a new socket object connected to the same system resource."""
    2:         return _socketobject(_sock=self._sock)
       
>>>>>>     def makefile(self, mode='r', bufsize=-1):
               """makefile([mode[, bufsize]]) -> file object
       
               Return a regular file object corresponding to the socket.  The mode
               and bufsize arguments are as for the built-in open() function."""
  530:         return _fileobject(self._sock, mode, bufsize)
       
  352:     family = property(lambda self: self._sock.family, doc="the socket family")
  275:     type = property(lambda self: self._sock.type, doc="the socket type")
    1:     proto = property(lambda self: self._sock.proto, doc="the socket protocol")
       
>>>>>> def meth(name,self,*args):
32848:     return getattr(self._sock,name)(*args)
       
>>>>>> for _m in _socketmethods:
>>>>>>     p = partial(meth,_m)
>>>>>>     p.__name__ = _m
>>>>>>     p.__doc__ = getattr(_realsocket,_m).__doc__
>>>>>>     m = MethodType(p,None,_socketobject)
>>>>>>     setattr(_socketobject,_m,m)
       
>>>>>> socket = SocketType = _socketobject
       
>>>>>> class _fileobject(object):
           """Faux file object attached to a socket object."""
       
>>>>>>     default_bufsize = 8192
>>>>>>     name = "<socket>"
       
>>>>>>     __slots__ = ["mode", "bufsize", "softspace",
                        # "closed" is a property, see below
>>>>>>                  "_sock", "_rbufsize", "_wbufsize", "_rbuf", "_wbuf", "_wbuf_len",
>>>>>>                  "_close"]
       
>>>>>>     def __init__(self, sock, mode='rb', bufsize=-1, close=False):
  640:         self._sock = sock
  640:         self.mode = mode # Not actually used in this version
  640:         if bufsize < 0:
  441:             bufsize = self.default_bufsize
  640:         self.bufsize = bufsize
  640:         self.softspace = False
               # _rbufsize is the suggested recv buffer size.  It is *strictly*
               # obeyed within readline() for recv calls.  If it is larger than
               # default_bufsize it will be used for recv calls within read().
  640:         if bufsize == 0:
  180:             self._rbufsize = 1
  460:         elif bufsize == 1:
    8:             self._rbufsize = self.default_bufsize
               else:
  452:             self._rbufsize = bufsize
  640:         self._wbufsize = bufsize
               # We use StringIO for the read buffer to avoid holding a list
               # of variously sized string objects which have been known to
               # fragment the heap due to how they are malloc()ed and often
               # realloc()ed down much smaller than their original allocation.
  640:         self._rbuf = StringIO()
  640:         self._wbuf = [] # A list of strings
  640:         self._wbuf_len = 0
  640:         self._close = close
       
>>>>>>     def _getclosed(self):
  161:         return self._sock is None
>>>>>>     closed = property(_getclosed, doc="True if the file is closed")
       
>>>>>>     def close(self):
 1158:         try:
 1158:             if self._sock:
  634:                 self.flush()
               finally:
 1158:             if self._close:
  164:                 self._sock.close()
 1086:             self._sock = None
       
>>>>>>     def __del__(self):
  631:         try:
  631:             self.close()
   72:         except:
                   # close() may fail if __init__ didn't complete
   72:             pass
       
>>>>>>     def flush(self):
 1423:         if self._wbuf:
  577:             data = "".join(self._wbuf)
  577:             self._wbuf = []
  577:             self._wbuf_len = 0
  577:             buffer_size = max(self._rbufsize, self.default_bufsize)
  577:             data_size = len(data)
  577:             write_offset = 0
  577:             view = memoryview(data)
  577:             try:
 1154:                 while write_offset < data_size:
  577:                     self._sock.sendall(view[write_offset:write_offset+buffer_size])
  577:                     write_offset += buffer_size
                   finally:
  577:                 if write_offset < data_size:
>>>>>>                     remainder = data[write_offset:]
>>>>>>                     del view, data  # explicit free
>>>>>>                     self._wbuf.append(remainder)
>>>>>>                     self._wbuf_len = len(remainder)
       
>>>>>>     def fileno(self):
    9:         return self._sock.fileno()
       
>>>>>>     def write(self, data):
  841:         data = str(data) # XXX Should really reject non-string non-buffers
  841:         if not data:
    1:             return
  840:         self._wbuf.append(data)
  840:         self._wbuf_len += len(data)
  840:         if (self._wbufsize == 0 or
  309:             (self._wbufsize == 1 and '\n' in data) or
  306:             (self._wbufsize > 1 and self._wbuf_len >= self._wbufsize)):
  534:             self.flush()
       
>>>>>>     def writelines(self, list):
               # XXX We could do better here for very long lists
               # XXX Should really reject non-string non-buffers
>>>>>>         lines = filter(None, map(str, list))
>>>>>>         self._wbuf_len += sum(map(len, lines))
>>>>>>         self._wbuf.extend(lines)
>>>>>>         if (self._wbufsize <= 1 or
>>>>>>             self._wbuf_len >= self._wbufsize):
>>>>>>             self.flush()
       
>>>>>>     def read(self, size=-1):
               # Use max, disallow tiny reads in a loop as they are very inefficient.
               # We never leave read() with any leftover data from a new recv() call
               # in our internal buffer.
  273:         rbufsize = max(self._rbufsize, self.default_bufsize)
               # Our use of StringIO rather than lists of string objects returned by
               # recv() minimizes memory usage and fragmentation that occurs when
               # rbufsize is large compared to the typical return value of recv().
  273:         buf = self._rbuf
  273:         buf.seek(0, 2)  # seek end
  273:         if size < 0:
                   # Read until EOF
   42:             self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.
   79:             while True:
   79:                 try:
   79:                     data = self._sock.recv(rbufsize)
    3:                 except error, e:
    3:                     if e.args[0] == EINTR:
    3:                         continue
>>>>>>                     raise
   76:                 if not data:
   42:                     break
   34:                 buf.write(data)
   42:             return buf.getvalue()
               else:
                   # Read until size bytes or EOF seen, whichever comes first
  231:             buf_len = buf.tell()
  231:             if buf_len >= size:
                       # Already have size bytes in our buffer?  Extract and return.
   68:                 buf.seek(0)
   68:                 rv = buf.read(size)
   68:                 self._rbuf = StringIO()
   68:                 self._rbuf.write(buf.read())
   68:                 return rv
       
  163:             self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.
  181:             while True:
  181:                 left = size - buf_len
                       # recv() will malloc the amount of memory given as its
                       # parameter even though it often returns much less data
                       # than that.  The returned data string is short lived
                       # as we copy it into a StringIO and free it.  This avoids
                       # fragmentation issues on many platforms.
  181:                 try:
  181:                     data = self._sock.recv(left)
    3:                 except error, e:
    3:                     if e.args[0] == EINTR:
    3:                         continue
>>>>>>                     raise
  178:                 if not data:
   33:                     break
  145:                 n = len(data)
  145:                 if n == size and not buf_len:
                           # Shortcut.  Avoid buffer data copies when:
                           # - We have no data in our buffer.
                           # AND
                           # - Our call to recv returned exactly the
                           #   number of bytes we were asked to read.
  130:                     return data
   15:                 if n == left:
>>>>>>                     buf.write(data)
>>>>>>                     del data  # explicit free
>>>>>>                     break
   15:                 assert n <= left, "recv(%d) returned %d bytes" % (left, n)
   15:                 buf.write(data)
   15:                 buf_len += n
   15:                 del data  # explicit free
                       #assert buf_len == buf.tell()
   33:             return buf.getvalue()
       
>>>>>>     def readline(self, size=-1):
 4091:         buf = self._rbuf
 4091:         buf.seek(0, 2)  # seek end
 4091:         if buf.tell() > 0:
                   # check if we already have it in our buffer
 2819:             buf.seek(0)
 2819:             bline = buf.readline(size)
 2819:             if bline.endswith('\n') or len(bline) == size:
 2810:                 self._rbuf = StringIO()
 2810:                 self._rbuf.write(buf.read())
 2810:                 return bline
    9:             del bline
 1281:         if size < 0:
                   # Read until \n or EOF, whichever comes first
   81:             if self._rbufsize <= 1:
                       # Speed up unbuffered case
   55:                 buf.seek(0)
   55:                 buffers = [buf.read()]
   55:                 self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.
   55:                 data = None
   55:                 recv = self._sock.recv
   56:                 while True:
   56:                     try:
 1086:                         while data != "\n":
 1034:                             data = recv(1)
 1033:                             if not data:
    3:                                 break
 1030:                             buffers.append(data)
    1:                     except error, e:
                               # The try..except to catch EINTR was moved outside the
                               # recv loop to avoid the per byte overhead.
    1:                         if e.args[0] == EINTR:
    1:                             continue
>>>>>>                         raise
   55:                     break
   55:                 return "".join(buffers)
       
   26:             buf.seek(0, 2)  # seek end
   26:             self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.
   66:             while True:
   66:                 try:
   66:                     data = self._sock.recv(self._rbufsize)
    2:                 except error, e:
    2:                     if e.args[0] == EINTR:
    2:                         continue
>>>>>>                     raise
   64:                 if not data:
   14:                     break
   50:                 nl = data.find('\n')
   50:                 if nl >= 0:
   12:                     nl += 1
   12:                     buf.write(data[:nl])
   12:                     self._rbuf.write(data[nl:])
   12:                     del data
   12:                     break
   38:                 buf.write(data)
   26:             return buf.getvalue()
               else:
                   # Read until size bytes or \n or EOF seen, whichever comes first
 1200:             buf.seek(0, 2)  # seek end
 1200:             buf_len = buf.tell()
 1200:             if buf_len >= size:
>>>>>>                 buf.seek(0)
>>>>>>                 rv = buf.read(size)
>>>>>>                 self._rbuf = StringIO()
>>>>>>                 self._rbuf.write(buf.read())
>>>>>>                 return rv
 1200:             self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.
10744:             while True:
10744:                 try:
10743:                     data = self._sock.recv(self._rbufsize)
    3:                 except error, e:
    3:                     if e.args[0] == EINTR:
    3:                         continue
>>>>>>                     raise
10741:                 if not data:
   19:                     break
10722:                 left = size - buf_len
                       # did we just receive a newline?
10722:                 nl = data.find('\n', 0, left)
10722:                 if nl >= 0:
 1173:                     nl += 1
                           # save the excess data to _rbuf
 1173:                     self._rbuf.write(data[nl:])
 1173:                     if buf_len:
  375:                         buf.write(data[:nl])
  375:                         break
                           else:
                               # Shortcut.  Avoid data copy through buf when returning
                               # a substring of our first recv().
  798:                         return data[:nl]
 9549:                 n = len(data)
 9549:                 if n == size and not buf_len:
                           # Shortcut.  Avoid data copy through buf when
                           # returning exactly all of our first recv().
>>>>>>                     return data
 9549:                 if n >= left:
    8:                     buf.write(data[:left])
    8:                     self._rbuf.write(data[left:])
    8:                     break
 9541:                 buf.write(data)
 9541:                 buf_len += n
                       #assert buf_len == buf.tell()
  402:             return buf.getvalue()
       
>>>>>>     def readlines(self, sizehint=0):
    3:         total = 0
    3:         list = []
    6:         while True:
    6:             line = self.readline()
    6:             if not line:
    3:                 break
    3:             list.append(line)
    3:             total += len(line)
    3:             if sizehint and total >= sizehint:
>>>>>>                 break
    3:         return list
       
           # Iterator protocols
       
>>>>>>     def __iter__(self):
    2:         return self
       
>>>>>>     def next(self):
   12:         line = self.readline()
   12:         if not line:
    2:             raise StopIteration
   10:         return line
       
>>>>>> _GLOBAL_DEFAULT_TIMEOUT = object()
       
>>>>>> def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,
>>>>>>                       source_address=None):
           """Connect to *address* and return the socket object.
       
           Convenience function.  Connect to *address* (a 2-tuple ``(host,
           port)``) and return the socket object.  Passing the optional
           *timeout* parameter will set the timeout on the socket instance
           before attempting to connect.  If no *timeout* is supplied, the
           global default timeout setting returned by :func:`getdefaulttimeout`
           is used.  If *source_address* is set it must be a tuple of (host, port)
           for the socket to bind as a source address before making the connection.
           A host of '' or port 0 tells the OS to use the default.
           """
       
  354:     host, port = address
  354:     err = None
  443:     for res in getaddrinfo(host, port, 0, SOCK_STREAM):
  439:         af, socktype, proto, canonname, sa = res
  439:         sock = None
  439:         try:
  439:             sock = socket(af, socktype, proto)
  439:             if timeout is not _GLOBAL_DEFAULT_TIMEOUT:
  148:                 sock.settimeout(timeout)
  439:             if source_address:
    1:                 sock.bind(source_address)
  439:             sock.connect(sa)
  350:             return sock
       
   89:         except error as _:
   89:             err = _
   89:             if sock is not None:
   89:                 sock.close()
       
    3:     if err is not None:
    3:         raise err
           else:
>>>>>>         raise error("getaddrinfo returns an empty list")
