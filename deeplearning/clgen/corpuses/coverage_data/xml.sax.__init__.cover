       """Simple API for XML (SAX) implementation for Python.
       
       This module provides an implementation of the SAX 2 interface;
       information about the Java version of the interface can be found at
       http://www.megginson.com/SAX/.  The Python version of the interface is
       documented at <...>.
       
       This package contains the following modules:
       
       handler -- Base classes and constants which define the SAX 2 API for
                  the 'client-side' of SAX for Python.
       
       saxutils -- Implementation of the convenience classes commonly used to
                   work with SAX.
       
       xmlreader -- Base classes and constants which define the SAX 2 API for
                    the parsers used with SAX for Python.
       
       expatreader -- Driver that allows use of the Expat parser with SAX.
    2: """
       
    2: from xmlreader import InputSource
    2: from handler import ContentHandler, ErrorHandler
    2: from _exceptions import SAXException, SAXNotRecognizedException, \
                               SAXParseException, SAXNotSupportedException, \
                               SAXReaderNotAvailable
       
       
    2: def parse(source, handler, errorHandler=ErrorHandler()):
   44:     parser = make_parser()
   44:     parser.setContentHandler(handler)
   44:     parser.setErrorHandler(errorHandler)
   44:     parser.parse(source)
       
    2: def parseString(string, handler, errorHandler=ErrorHandler()):
   14:     try:
   14:         from cStringIO import StringIO
>>>>>>     except ImportError:
>>>>>>         from StringIO import StringIO
       
   14:     if errorHandler is None:
>>>>>>         errorHandler = ErrorHandler()
   14:     parser = make_parser()
   14:     parser.setContentHandler(handler)
   14:     parser.setErrorHandler(errorHandler)
       
   14:     inpsrc = InputSource()
   14:     inpsrc.setByteStream(StringIO(string))
   14:     parser.parse(inpsrc)
       
       # this is the parser list used by the make_parser function if no
       # alternatives are given as parameters to the function
       
    2: default_parser_list = ["xml.sax.expatreader"]
       
       # tell modulefinder that importing sax potentially imports expatreader
    2: _false = 0
    2: if _false:
>>>>>>     import xml.sax.expatreader
       
    2: import os, sys
    2: if "PY_SAX_PARSER" in os.environ:
>>>>>>     default_parser_list = os.environ["PY_SAX_PARSER"].split(",")
    2: del os
       
    2: _key = "python.xml.sax.parser"
    2: if sys.platform[:4] == "java" and sys.registry.containsKey(_key):
>>>>>>     default_parser_list = sys.registry.getProperty(_key).split(",")
       
       
    2: def make_parser(parser_list = []):
           """Creates and returns a SAX parser.
       
           Creates the first parser it is able to instantiate of the ones
           given in the list created by doing parser_list +
           default_parser_list.  The lists must contain the names of Python
           modules containing both a SAX parser and a create_parser function."""
       
   71:     for parser_name in parser_list + default_parser_list:
   71:         try:
   71:             return _create_parser(parser_name)
    1:         except ImportError,e:
    1:             import sys
    1:             if parser_name in sys.modules:
                       # The parser module was found, but importing it
                       # failed unexpectedly, pass this exception through
>>>>>>                 raise
>>>>>>         except SAXReaderNotAvailable:
                   # The parser module detected that it won't work properly,
                   # so try the next one
>>>>>>             pass
       
>>>>>>     raise SAXReaderNotAvailable("No parsers found", None)
       
       # --- Internal utility methods used by make_parser
       
    2: if sys.platform[ : 4] == "java":
>>>>>>     def _create_parser(parser_name):
>>>>>>         from org.python.core import imp
>>>>>>         drv_module = imp.importName(parser_name, 0, globals())
>>>>>>         return drv_module.create_parser()
       
       else:
    2:     def _create_parser(parser_name):
   71:         drv_module = __import__(parser_name,{},{},['create_parser'])
   70:         return drv_module.create_parser()
       
    2: del sys
