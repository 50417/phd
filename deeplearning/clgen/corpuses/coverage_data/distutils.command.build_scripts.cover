       """distutils.command.build_scripts
       
    1: Implements the Distutils 'build_scripts' command."""
       
    1: __revision__ = "$Id$"
       
    1: import os, re
    1: from stat import ST_MODE
    1: from distutils.core import Command
    1: from distutils.dep_util import newer
    1: from distutils.util import convert_path
    1: from distutils import log
       
       # check if Python is called on the first line with this expression
    1: first_line_re = re.compile('^#!.*python[0-9.]*([ \t].*)?$')
       
    2: class build_scripts (Command):
       
    1:     description = "\"build\" scripts (copy and fixup #! line)"
       
           user_options = [
    1:         ('build-dir=', 'd', "directory to \"build\" (copy) to"),
    1:         ('force', 'f', "forcibly build everything (ignore file timestamps"),
    1:         ('executable=', 'e', "specify final destination interpreter path"),
               ]
       
    1:     boolean_options = ['force']
       
       
    1:     def initialize_options (self):
    6:         self.build_dir = None
    6:         self.scripts = None
    6:         self.force = None
    6:         self.executable = None
    6:         self.outfiles = None
       
    1:     def finalize_options (self):
    6:         self.set_undefined_options('build',
    6:                                    ('build_scripts', 'build_dir'),
    6:                                    ('force', 'force'),
    6:                                    ('executable', 'executable'))
    6:         self.scripts = self.distribution.scripts
       
    1:     def get_source_files(self):
    1:         return self.scripts
       
    1:     def run (self):
    4:         if not self.scripts:
>>>>>>             return
    4:         self.copy_scripts()
       
       
    1:     def copy_scripts (self):
               """Copy each script listed in 'self.scripts'; if it's marked as a
               Python script in the Unix way (first line matches 'first_line_re',
               ie. starts with "\#!" and contains "python"), then adjust the first
               line to refer to the current Python interpreter as we copy.
               """
    4:         _sysconfig = __import__('sysconfig')
    4:         self.mkpath(self.build_dir)
    4:         outfiles = []
   12:         for script in self.scripts:
    8:             adjust = 0
    8:             script = convert_path(script)
    8:             outfile = os.path.join(self.build_dir, os.path.basename(script))
    8:             outfiles.append(outfile)
       
    8:             if not self.force and not newer(script, outfile):
>>>>>>                 log.debug("not copying %s (up-to-date)", script)
>>>>>>                 continue
       
                   # Always open the file, but ignore failures in dry-run mode --
                   # that way, we'll get accurate feedback if we can read the
                   # script.
    8:             try:
    8:                 f = open(script, "r")
>>>>>>             except IOError:
>>>>>>                 if not self.dry_run:
>>>>>>                     raise
>>>>>>                 f = None
                   else:
    8:                 first_line = f.readline()
    8:                 if not first_line:
>>>>>>                     self.warn("%s is an empty file (skipping)" % script)
>>>>>>                     continue
       
    8:                 match = first_line_re.match(first_line)
    8:                 if match:
    4:                     adjust = 1
    4:                     post_interp = match.group(1) or ''
       
    8:             if adjust:
    4:                 log.info("copying and adjusting %s -> %s", script,
    4:                          self.build_dir)
    4:                 if not self.dry_run:
    4:                     outf = open(outfile, "w")
    4:                     if not _sysconfig.is_python_build():
    4:                         outf.write("#!%s%s\n" %
    4:                                    (self.executable,
    4:                                     post_interp))
                           else:
>>>>>>                         outf.write("#!%s%s\n" %
>>>>>>                                    (os.path.join(
>>>>>>                             _sysconfig.get_config_var("BINDIR"),
>>>>>>                            "python%s%s" % (_sysconfig.get_config_var("VERSION"),
>>>>>>                                            _sysconfig.get_config_var("EXE"))),
>>>>>>                                     post_interp))
    4:                     outf.writelines(f.readlines())
    4:                     outf.close()
    4:                 if f:
    4:                     f.close()
                   else:
    4:                 if f:
    4:                     f.close()
    4:                 self.copy_file(script, outfile)
       
    4:         if os.name == 'posix':
   12:             for file in outfiles:
    8:                 if self.dry_run:
>>>>>>                     log.info("changing mode of %s", file)
                       else:
    8:                     oldmode = os.stat(file)[ST_MODE] & 07777
    8:                     newmode = (oldmode | 0555) & 07777
    8:                     if newmode != oldmode:
    8:                         log.info("changing mode of %s from %o to %o",
    8:                                  file, oldmode, newmode)
    8:                         os.chmod(file, newmode)
       
           # copy_scripts ()
       
       # class build_scripts
