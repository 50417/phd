       # Tests for rich comparisons
       
    1: import unittest
    1: from test import test_support
       
    1: import operator
       
    2: class Number:
       
    1:     def __init__(self, x):
  108:         self.x = x
       
    1:     def __lt__(self, other):
  144:         return self.x < other
       
    1:     def __le__(self, other):
  144:         return self.x <= other
       
    1:     def __eq__(self, other):
  144:         return self.x == other
       
    1:     def __ne__(self, other):
  144:         return self.x != other
       
    1:     def __gt__(self, other):
  144:         return self.x > other
       
    1:     def __ge__(self, other):
  144:         return self.x >= other
       
    1:     def __cmp__(self, other):
>>>>>>         raise test_support.TestFailed, "Number.__cmp__() should not be called"
       
    1:     def __repr__(self):
>>>>>>         return "Number(%r)" % (self.x, )
       
    2: class Vector:
       
    1:     def __init__(self, data):
  114:         self.data = data
       
    1:     def __len__(self):
  108:         return len(self.data)
       
    1:     def __getitem__(self, i):
  270:         return self.data[i]
       
    1:     def __setitem__(self, i, v):
>>>>>>         self.data[i] = v
       
    1:     __hash__ = None # Vectors cannot be hashed
       
    1:     def __nonzero__(self):
   54:         raise TypeError, "Vectors cannot be used in Boolean contexts"
       
    1:     def __cmp__(self, other):
>>>>>>         raise test_support.TestFailed, "Vector.__cmp__() should not be called"
       
    1:     def __repr__(self):
>>>>>>         return "Vector(%r)" % (self.data, )
       
    1:     def __lt__(self, other):
  111:         return Vector([a < b for a, b in zip(self.data, self.__cast(other))])
       
    1:     def __le__(self, other):
  111:         return Vector([a <= b for a, b in zip(self.data, self.__cast(other))])
       
    1:     def __eq__(self, other):
  111:         return Vector([a == b for a, b in zip(self.data, self.__cast(other))])
       
    1:     def __ne__(self, other):
  111:         return Vector([a != b for a, b in zip(self.data, self.__cast(other))])
       
    1:     def __gt__(self, other):
  111:         return Vector([a > b for a, b in zip(self.data, self.__cast(other))])
       
    1:     def __ge__(self, other):
  111:         return Vector([a >= b for a, b in zip(self.data, self.__cast(other))])
       
    1:     def __cast(self, other):
  126:         if isinstance(other, Vector):
   54:             other = other.data
  126:         if len(self.data) != len(other):
   18:             raise ValueError, "Cannot compare vectors of different length"
  108:         return other
       
    1: opmap = {
   74:     "lt": (lambda a,b: a< b, operator.lt, operator.__lt__),
   74:     "le": (lambda a,b: a<=b, operator.le, operator.__le__),
   74:     "eq": (lambda a,b: a==b, operator.eq, operator.__eq__),
   74:     "ne": (lambda a,b: a!=b, operator.ne, operator.__ne__),
   74:     "gt": (lambda a,b: a> b, operator.gt, operator.__gt__),
   74:     "ge": (lambda a,b: a>=b, operator.ge, operator.__ge__)
       }
       
    2: class VectorTest(unittest.TestCase):
       
    1:     def checkfail(self, error, opname, *args):
   24:         for op in opmap[opname]:
   18:             self.assertRaises(error, op, *args)
       
    1:     def checkequal(self, opname, a, b, expres):
   72:         for op in opmap[opname]:
   54:             realres = op(a, b)
                   # can't use assertEqual(realres, expres) here
   54:             self.assertEqual(len(realres), len(expres))
  324:             for i in xrange(len(realres)):
                       # results are bool, so we can use "is" here
  270:                 self.assertTrue(realres[i] is expres[i])
       
    1:     def test_mixed(self):
               # check that comparisons involving Vector objects
               # which return rich results (i.e. Vectors with itemwise
               # comparison results) work
    1:         a = Vector(range(2))
    1:         b = Vector(range(3))
               # all comparisons should fail for different length
    7:         for opname in opmap:
    6:             self.checkfail(ValueError, opname, a, b)
       
    1:         a = range(5)
    1:         b = 5 * [2]
               # try mixed arguments (but not (a, b) as that won't return a bool vector)
    1:         args = [(a, Vector(b)), (Vector(a), b), (Vector(a), Vector(b))]
    4:         for (a, b) in args:
    3:             self.checkequal("lt", a, b, [True,  True,  False, False, False])
    3:             self.checkequal("le", a, b, [True,  True,  True,  False, False])
    3:             self.checkequal("eq", a, b, [False, False, True,  False, False])
    3:             self.checkequal("ne", a, b, [True,  True,  False, True,  True ])
    3:             self.checkequal("gt", a, b, [False, False, False, True,  True ])
    3:             self.checkequal("ge", a, b, [False, False, True,  True,  True ])
       
   21:             for ops in opmap.itervalues():
   72:                 for op in ops:
                           # calls __nonzero__, which should fail
   54:                     self.assertRaises(TypeError, bool, op(a, b))
       
    2: class NumberTest(unittest.TestCase):
       
    1:     def test_basic(self):
               # Check that comparisons involving Number objects
               # give the same results give as comparing the
               # corresponding ints
    4:         for a in xrange(3):
   12:             for b in xrange(3):
   27:                 for typea in (int, Number):
   54:                     for typeb in (int, Number):
   36:                         if typea==typeb==int:
    9:                             continue # the combination int, int is useless
   27:                         ta = typea(a)
   27:                         tb = typeb(b)
  189:                         for ops in opmap.itervalues():
  648:                             for op in ops:
  486:                                 realoutcome = op(a, b)
  486:                                 testoutcome = op(ta, tb)
  486:                                 self.assertEqual(realoutcome, testoutcome)
       
    1:     def checkvalue(self, opname, a, b, expres):
   54:         for typea in (int, Number):
  108:             for typeb in (int, Number):
   72:                 ta = typea(a)
   72:                 tb = typeb(b)
  288:                 for op in opmap[opname]:
  216:                     realres = op(ta, tb)
  216:                     realres = getattr(realres, "x", realres)
  216:                     self.assertTrue(realres is expres)
       
    1:     def test_values(self):
               # check all operators and all comparison results
    1:         self.checkvalue("lt", 0, 0, False)
    1:         self.checkvalue("le", 0, 0, True )
    1:         self.checkvalue("eq", 0, 0, True )
    1:         self.checkvalue("ne", 0, 0, False)
    1:         self.checkvalue("gt", 0, 0, False)
    1:         self.checkvalue("ge", 0, 0, True )
       
    1:         self.checkvalue("lt", 0, 1, True )
    1:         self.checkvalue("le", 0, 1, True )
    1:         self.checkvalue("eq", 0, 1, False)
    1:         self.checkvalue("ne", 0, 1, True )
    1:         self.checkvalue("gt", 0, 1, False)
    1:         self.checkvalue("ge", 0, 1, False)
       
    1:         self.checkvalue("lt", 1, 0, False)
    1:         self.checkvalue("le", 1, 0, False)
    1:         self.checkvalue("eq", 1, 0, False)
    1:         self.checkvalue("ne", 1, 0, True )
    1:         self.checkvalue("gt", 1, 0, True )
    1:         self.checkvalue("ge", 1, 0, True )
       
    2: class MiscTest(unittest.TestCase):
       
    1:     def test_misbehavin(self):
    2:         class Misb:
    2:             def __lt__(self_, other): return 0
    2:             def __gt__(self_, other): return 0
    2:             def __eq__(self_, other): return 0
    1:             def __le__(self_, other): self.fail("This shouldn't happen")
    1:             def __ge__(self_, other): self.fail("This shouldn't happen")
    1:             def __ne__(self_, other): self.fail("This shouldn't happen")
    2:             def __cmp__(self_, other): raise RuntimeError, "expected"
    1:         a = Misb()
    1:         b = Misb()
    1:         self.assertEqual(a<b, 0)
    1:         self.assertEqual(a==b, 0)
    1:         self.assertEqual(a>b, 0)
    1:         self.assertRaises(RuntimeError, cmp, a, b)
       
    1:     def test_not(self):
               # Check that exceptions in __nonzero__ are properly
               # propagated by the not operator
    1:         import operator
    2:         class Exc(Exception):
    1:             pass
    2:         class Bad:
    1:             def __nonzero__(self):
    2:                 raise Exc
       
    1:         def do(bad):
    1:             not bad
       
    3:         for func in (do, operator.not_):
    2:             self.assertRaises(Exc, func, Bad())
       
    1:     def test_recursion(self):
               # Check that comparison for recursive objects fails gracefully
    1:         from UserList import UserList
    1:         a = UserList()
    1:         b = UserList()
    1:         a.append(b)
    1:         b.append(a)
    1:         self.assertRaises(RuntimeError, operator.eq, a, b)
>>>>>>         self.assertRaises(RuntimeError, operator.ne, a, b)
>>>>>>         self.assertRaises(RuntimeError, operator.lt, a, b)
>>>>>>         self.assertRaises(RuntimeError, operator.le, a, b)
>>>>>>         self.assertRaises(RuntimeError, operator.gt, a, b)
>>>>>>         self.assertRaises(RuntimeError, operator.ge, a, b)
       
>>>>>>         b.append(17)
               # Even recursive lists of different lengths are different,
               # but they cannot be ordered
>>>>>>         self.assertTrue(not (a == b))
>>>>>>         self.assertTrue(a != b)
>>>>>>         self.assertRaises(RuntimeError, operator.lt, a, b)
>>>>>>         self.assertRaises(RuntimeError, operator.le, a, b)
>>>>>>         self.assertRaises(RuntimeError, operator.gt, a, b)
>>>>>>         self.assertRaises(RuntimeError, operator.ge, a, b)
>>>>>>         a.append(17)
>>>>>>         self.assertRaises(RuntimeError, operator.eq, a, b)
>>>>>>         self.assertRaises(RuntimeError, operator.ne, a, b)
>>>>>>         a.insert(0, 11)
>>>>>>         b.insert(0, 12)
>>>>>>         self.assertTrue(not (a == b))
>>>>>>         self.assertTrue(a != b)
>>>>>>         self.assertTrue(a < b)
       
    2: class DictTest(unittest.TestCase):
       
    1:     def test_dicts(self):
               # Verify that __eq__ and __ne__ work for dicts even if the keys and
               # values don't support anything other than __eq__ and __ne__ (and
               # __hash__).  Complex numbers are a fine example of that.
>>>>>>         import random
>>>>>>         imag1a = {}
>>>>>>         for i in range(50):
>>>>>>             imag1a[random.randrange(100)*1j] = random.randrange(100)*1j
>>>>>>         items = imag1a.items()
>>>>>>         random.shuffle(items)
>>>>>>         imag1b = {}
>>>>>>         for k, v in items:
>>>>>>             imag1b[k] = v
>>>>>>         imag2 = imag1b.copy()
>>>>>>         imag2[k] = v + 1.0
>>>>>>         self.assertTrue(imag1a == imag1a)
>>>>>>         self.assertTrue(imag1a == imag1b)
>>>>>>         self.assertTrue(imag2 == imag2)
>>>>>>         self.assertTrue(imag1a != imag2)
>>>>>>         for opname in ("lt", "le", "gt", "ge"):
>>>>>>             for op in opmap[opname]:
>>>>>>                 self.assertRaises(TypeError, op, imag1a, imag2)
       
    2: class ListTest(unittest.TestCase):
       
    1:     def test_coverage(self):
               # exercise all comparisons for lists
>>>>>>         x = [42]
>>>>>>         self.assertIs(x<x, False)
>>>>>>         self.assertIs(x<=x, True)
>>>>>>         self.assertIs(x==x, True)
>>>>>>         self.assertIs(x!=x, False)
>>>>>>         self.assertIs(x>x, False)
>>>>>>         self.assertIs(x>=x, True)
>>>>>>         y = [42, 42]
>>>>>>         self.assertIs(x<y, True)
>>>>>>         self.assertIs(x<=y, True)
>>>>>>         self.assertIs(x==y, False)
>>>>>>         self.assertIs(x!=y, True)
>>>>>>         self.assertIs(x>y, False)
>>>>>>         self.assertIs(x>=y, False)
       
    1:     def test_badentry(self):
               # make sure that exceptions for item comparison are properly
               # propagated in list comparisons
>>>>>>         class Exc(Exception):
>>>>>>             pass
>>>>>>         class Bad:
>>>>>>             def __eq__(self, other):
>>>>>>                 raise Exc
       
>>>>>>         x = [Bad()]
>>>>>>         y = [Bad()]
       
>>>>>>         for op in opmap["eq"]:
>>>>>>             self.assertRaises(Exc, op, x, y)
       
    1:     def test_goodentry(self):
               # This test exercises the final call to PyObject_RichCompare()
               # in Objects/listobject.c::list_richcompare()
>>>>>>         class Good:
>>>>>>             def __lt__(self, other):
>>>>>>                 return True
       
>>>>>>         x = [Good()]
>>>>>>         y = [Good()]
       
>>>>>>         for op in opmap["lt"]:
>>>>>>             self.assertIs(op(x, y), True)
       
    1: def test_main():
    1:     test_support.run_unittest(VectorTest, NumberTest, MiscTest, ListTest)
>>>>>>     with test_support.check_py3k_warnings(("dict inequality comparisons "
                                                    "not supported in 3.x",
>>>>>>                                              DeprecationWarning)):
>>>>>>         test_support.run_unittest(DictTest)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
