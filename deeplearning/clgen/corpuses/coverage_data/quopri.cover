       #! /usr/bin/env python
       
    1: """Conversions to/from quoted-printable transport encoding as per RFC 1521."""
       
       # (Dec 1991 version).
       
    1: __all__ = ["encode", "decode", "encodestring", "decodestring"]
       
    1: ESCAPE = '='
    1: MAXLINESIZE = 76
    1: HEX = '0123456789ABCDEF'
    1: EMPTYSTRING = ''
       
    1: try:
    1:     from binascii import a2b_qp, b2a_qp
>>>>>> except ImportError:
>>>>>>     a2b_qp = None
>>>>>>     b2a_qp = None
       
       
    1: def needsquoting(c, quotetabs, header):
           """Decide whether a particular character needs to be quoted.
       
           The 'quotetabs' flag indicates whether embedded tabs and spaces should be
           quoted.  Note that line-ending tabs and spaces are always encoded, as per
           RFC 1521.
           """
 2861:     if c in ' \t':
  123:         return quotetabs
           # if header, we have to escape _ because _ is used to escape space
 2738:     if c == '_':
    1:         return header
 2737:     return c == ESCAPE or not (' ' <= c <= '~')
       
    1: def quote(c):
           """Quote a single character."""
  334:     i = ord(c)
  334:     return ESCAPE + HEX[i//16] + HEX[i%16]
       
       
       
    1: def encode(input, output, quotetabs, header = 0):
           """Read 'input', apply quoted-printable encoding, and write to 'output'.
       
           'input' and 'output' are files with readline() and write() methods.
           The 'quotetabs' flag indicates whether embedded tabs and spaces should be
           quoted.  Note that line-ending tabs and spaces are always encoded, as per
           RFC 1521.
           The 'header' flag indicates whether we are encoding spaces as _ as per
           RFC 1522.
           """
       
   55:     if b2a_qp is not None:
   15:         data = input.read()
   15:         odata = b2a_qp(data, quotetabs = quotetabs, header = header)
   15:         output.write(odata)
   15:         return
       
   40:     def write(s, output=output, lineEnd='\n'):
               # RFC 1521 requires that the line ending in a space or tab must have
               # that trailing character encoded.
  113:         if s and s[-1:] in ' \t':
    6:             output.write(s[:-1] + quote(s[-1]) + lineEnd)
  107:         elif s == '.':
>>>>>>             output.write(quote(s) + lineEnd)
               else:
  107:             output.write(s + lineEnd)
       
   40:     prevline = None
   40:     while 1:
  141:         line = input.readline()
  141:         if not line:
   40:             break
  101:         outline = []
               # Strip off any readline induced trailing newline
  101:         stripped = ''
  101:         if line[-1:] == '\n':
   67:             line = line[:-1]
   67:             stripped = '\n'
               # Calculate the un-length-limited encoded line
 2962:         for c in line:
 2861:             if needsquoting(c, quotetabs, header):
  328:                 c = quote(c)
 2861:             if header and c == ' ':
    1:                 outline.append('_')
                   else:
 2860:                 outline.append(c)
               # First, write out the previous line
  101:         if prevline is not None:
   61:             write(prevline)
               # Now see if we need any soft line breaks because of RFC-imposed
               # length limitations.  Then do the thisline->prevline dance.
  101:         thisline = EMPTYSTRING.join(outline)
  113:         while len(thisline) > MAXLINESIZE:
                   # Don't forget to include the soft line break `=' sign in the
                   # length calculation!
   12:             write(thisline[:MAXLINESIZE-1], lineEnd='=\n')
   12:             thisline = thisline[MAXLINESIZE-1:]
               # Write out the current line
  101:         prevline = thisline
           # Write out the last line, without a trailing newline
   40:     if prevline is not None:
   40:         write(prevline, lineEnd=stripped)
       
    1: def encodestring(s, quotetabs = 0, header = 0):
   56:     if b2a_qp is not None:
   28:         return b2a_qp(s, quotetabs = quotetabs, header = header)
   28:     from cStringIO import StringIO
   28:     infp = StringIO(s)
   28:     outfp = StringIO()
   28:     encode(infp, outfp, quotetabs, header)
   28:     return outfp.getvalue()
       
       
       
    1: def decode(input, output, header = 0):
           """Read 'input', apply quoted-printable decoding, and write to 'output'.
           'input' and 'output' are files with readline() and write() methods.
           If 'header' is true, decode underscore as space (per RFC 1522)."""
       
   62:     if a2b_qp is not None:
   22:         data = input.read()
   22:         odata = a2b_qp(data, header = header)
   22:         output.write(odata)
   22:         return
       
   40:     new = ''
   40:     while 1:
  153:         line = input.readline()
  153:         if not line: break
  113:         i, n = 0, len(line)
  113:         if n > 0 and line[n-1] == '\n':
   79:             partial = 0; n = n-1
                   # Strip trailing whitespace
   79:             while n > 0 and line[n-1] in " \t\r":
>>>>>>                 n = n-1
               else:
   34:             partial = 1
 2974:         while i < n:
 2873:             c = line[i]
 2873:             if c == '_' and header:
    1:                 new = new + ' '; i = i+1
 2872:             elif c != ESCAPE:
 2526:                 new = new + c; i = i+1
  346:             elif i+1 == n and not partial:
   12:                 partial = 1; break
  334:             elif i+1 < n and line[i+1] == ESCAPE:
>>>>>>                 new = new + ESCAPE; i = i+2
  334:             elif i+2 < n and ishex(line[i+1]) and ishex(line[i+2]):
  334:                 new = new + chr(unhex(line[i+1:i+3])); i = i+3
                   else: # Bad escape sequence -- leave it in
>>>>>>                 new = new + c; i = i+1
  113:         if not partial:
   67:             output.write(new + '\n')
   67:             new = ''
   40:     if new:
   34:         output.write(new)
       
    1: def decodestring(s, header = 0):
   59:     if a2b_qp is not None:
   31:         return a2b_qp(s, header = header)
   28:     from cStringIO import StringIO
   28:     infp = StringIO(s)
   28:     outfp = StringIO()
   28:     decode(infp, outfp, header = header)
   28:     return outfp.getvalue()
       
       
       
       # Other helper functions
    1: def ishex(c):
           """Return true if the character 'c' is a hexadecimal digit."""
  668:     return '0' <= c <= '9' or 'a' <= c <= 'f' or 'A' <= c <= 'F'
       
    1: def unhex(s):
           """Get the integer value of a hexadecimal number."""
  334:     bits = 0
 1002:     for c in s:
  668:         if '0' <= c <= '9':
  264:             i = ord('0')
  404:         elif 'a' <= c <= 'f':
>>>>>>             i = ord('a')-10
  404:         elif 'A' <= c <= 'F':
  404:             i = ord('A')-10
               else:
>>>>>>             break
  668:         bits = bits*16 + (ord(c) - i)
  334:     return bits
       
       
       
    1: def main():
>>>>>>     import sys
>>>>>>     import getopt
>>>>>>     try:
>>>>>>         opts, args = getopt.getopt(sys.argv[1:], 'td')
>>>>>>     except getopt.error, msg:
>>>>>>         sys.stdout = sys.stderr
>>>>>>         print msg
>>>>>>         print "usage: quopri [-t | -d] [file] ..."
>>>>>>         print "-t: quote tabs"
>>>>>>         print "-d: decode; default encode"
>>>>>>         sys.exit(2)
>>>>>>     deco = 0
>>>>>>     tabs = 0
>>>>>>     for o, a in opts:
>>>>>>         if o == '-t': tabs = 1
>>>>>>         if o == '-d': deco = 1
>>>>>>     if tabs and deco:
>>>>>>         sys.stdout = sys.stderr
>>>>>>         print "-t and -d are mutually exclusive"
>>>>>>         sys.exit(2)
>>>>>>     if not args: args = ['-']
>>>>>>     sts = 0
>>>>>>     for file in args:
>>>>>>         if file == '-':
>>>>>>             fp = sys.stdin
               else:
>>>>>>             try:
>>>>>>                 fp = open(file)
>>>>>>             except IOError, msg:
>>>>>>                 sys.stderr.write("%s: can't open (%s)\n" % (file, msg))
>>>>>>                 sts = 1
>>>>>>                 continue
>>>>>>         if deco:
>>>>>>             decode(fp, sys.stdout)
               else:
>>>>>>             encode(fp, sys.stdout, tabs)
>>>>>>         if fp is not sys.stdin:
>>>>>>             fp.close()
>>>>>>     if sts:
>>>>>>         sys.exit(sts)
       
       
       
    1: if __name__ == '__main__':
>>>>>>     main()
