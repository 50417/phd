       """Guess the MIME type of a file.
       
       This module defines two useful functions:
       
       guess_type(url, strict=1) -- guess the MIME type and encoding of a URL.
       
       guess_extension(type, strict=1) -- guess the extension for a given MIME type.
       
       It also contains the following, for tuning the behavior:
       
       Data:
       
       knownfiles -- list of files to parse
       inited -- flag set when init() has been called
       suffix_map -- dictionary mapping suffixes to suffixes
       encodings_map -- dictionary mapping suffixes to encodings
       types_map -- dictionary mapping suffixes to types
       
       Functions:
       
       init([files]) -- parse a list of files, default knownfiles (on Windows, the
         default values are taken from the registry)
       read_mime_types(file) -- parse one file, return a dictionary or None
    1: """
       
    1: import os
    1: import sys
    1: import posixpath
    1: import urllib
    1: try:
    1:     import _winreg
    1: except ImportError:
    1:     _winreg = None
       
       __all__ = [
    1:     "guess_type","guess_extension","guess_all_extensions",
    1:     "add_type","read_mime_types","init"
       ]
       
       knownfiles = [
    1:     "/etc/mime.types",
    1:     "/etc/httpd/mime.types",                    # Mac OS X
    1:     "/etc/httpd/conf/mime.types",               # Apache
    1:     "/etc/apache/mime.types",                   # Apache 1
    1:     "/etc/apache2/mime.types",                  # Apache 2
    1:     "/usr/local/etc/httpd/conf/mime.types",
    1:     "/usr/local/lib/netscape/mime.types",
    1:     "/usr/local/etc/httpd/conf/mime.types",     # Apache 1.2
    1:     "/usr/local/etc/mime.types",                # Apache 1.3
           ]
       
    1: inited = False
    1: _db = None
       
       
    2: class MimeTypes:
           """MIME-types datastore.
       
           This datastore can handle information from mime.types-style files
           and supports basic determination of MIME type from a filename or
           URL, and can guess a reasonable extension given a MIME type.
    1:     """
       
    1:     def __init__(self, filenames=(), strict=True):
    7:         if not inited:
    1:             init()
    7:         self.encodings_map = encodings_map.copy()
    7:         self.suffix_map = suffix_map.copy()
    7:         self.types_map = ({}, {}) # dict for (non-strict, strict)
    7:         self.types_map_inv = ({}, {})
  875:         for (ext, type) in types_map.items():
  868:             self.add_type(type, ext, True)
   63:         for (ext, type) in common_types.items():
   56:             self.add_type(type, ext, False)
    7:         for name in filenames:
>>>>>>             self.read(name, strict)
       
    1:     def add_type(self, type, ext, strict=True):
               """Add a mapping between a type and an extension.
       
               When the extension is already known, the new
               type will replace the old one. When the type
               is already known the extension will be added
               to the list of known extensions.
       
               If strict is true, information will be added to
               list of standard types, else to the list of non-standard
               types.
               """
 1928:         self.types_map[strict][ext] = type
 1928:         exts = self.types_map_inv[strict].setdefault(type, [])
 1928:         if ext not in exts:
 1841:             exts.append(ext)
       
    1:     def guess_type(self, url, strict=True):
               """Guess the type of a file based on its URL.
       
               Return value is a tuple (type, encoding) where type is None if
               the type can't be guessed (no or unknown suffix) or a string
               of the form type/subtype, usable for a MIME Content-type
               header; and encoding is None for no encoding or the name of
               the program used to encode (e.g. compress or gzip).  The
               mappings are table driven.  Encoding suffixes are case
               sensitive; type suffixes are first tried case sensitive, then
               case insensitive.
       
               The suffixes .tgz, .taz and .tz (case sensitive!) are all
               mapped to '.tar.gz'.  (This is table-driven too, using the
               dictionary suffix_map.)
       
               Optional `strict' argument when False adds a bunch of commonly found,
               but non-standard types.
               """
   45:         scheme, url = urllib.splittype(url)
   45:         if scheme == 'data':
                   # syntax of data URLs:
                   # dataurl   := "data:" [ mediatype ] [ ";base64" ] "," data
                   # mediatype := [ type "/" subtype ] *( ";" parameter )
                   # data      := *urlchar
                   # parameter := attribute "=" value
                   # type/subtype defaults to "text/plain"
    3:             comma = url.find(',')
    3:             if comma < 0:
                       # bad data URL
>>>>>>                 return None, None
    3:             semi = url.find(';', 0, comma)
    3:             if semi >= 0:
    1:                 type = url[:semi]
                   else:
    2:                 type = url[:comma]
    3:             if '=' in type or '/' not in type:
    2:                 type = 'text/plain'
    3:             return type, None           # never compressed, so encoding is None
   42:         base, ext = posixpath.splitext(url)
   43:         while ext in self.suffix_map:
    1:             base, ext = posixpath.splitext(base + self.suffix_map[ext])
   42:         if ext in self.encodings_map:
    5:             encoding = self.encodings_map[ext]
    5:             base, ext = posixpath.splitext(base)
               else:
   37:             encoding = None
   42:         types_map = self.types_map[True]
   42:         if ext in types_map:
   12:             return types_map[ext], encoding
   30:         elif ext.lower() in types_map:
>>>>>>             return types_map[ext.lower()], encoding
   30:         elif strict:
   29:             return None, encoding
    1:         types_map = self.types_map[False]
    1:         if ext in types_map:
    1:             return types_map[ext], encoding
>>>>>>         elif ext.lower() in types_map:
>>>>>>             return types_map[ext.lower()], encoding
               else:
>>>>>>             return None, encoding
       
    1:     def guess_all_extensions(self, type, strict=True):
               """Guess the extensions for a file based on its MIME type.
       
               Return value is a list of strings giving the possible filename
               extensions, including the leading dot ('.').  The extension is not
               guaranteed to have been associated with any particular data stream,
               but would be mapped to the MIME type `type' by guess_type().
       
               Optional `strict' argument when false adds a bunch of commonly found,
               but non-standard types.
               """
    6:         type = type.lower()
    6:         extensions = self.types_map_inv[True].get(type, [])
    6:         if not strict:
    4:             for ext in self.types_map_inv[False].get(type, []):
    2:                 if ext not in extensions:
    2:                     extensions.append(ext)
    6:         return extensions
       
    1:     def guess_extension(self, type, strict=True):
               """Guess the extension for a file based on its MIME type.
       
               Return value is a string giving a filename extension,
               including the leading dot ('.').  The extension is not
               guaranteed to have been associated with any particular data
               stream, but would be mapped to the MIME type `type' by
               guess_type().  If no extension can be guessed for `type', None
               is returned.
       
               Optional `strict' argument when false adds a bunch of commonly found,
               but non-standard types.
               """
    3:         extensions = self.guess_all_extensions(type, strict)
    3:         if not extensions:
    1:             return None
    2:         return extensions[0]
       
    1:     def read(self, filename, strict=True):
               """
               Read a single mime.types-format file, specified by pathname.
       
               If strict is true, information will be added to
               list of standard types, else to the list of non-standard
               types.
               """
    1:         with open(filename) as fp:
    1:             self.readfp(fp, strict)
       
    1:     def readfp(self, fp, strict=True):
               """
               Read a single mime.types-format file.
       
               If strict is true, information will be added to
               list of standard types, else to the list of non-standard
               types.
               """
    2:         while 1:
 1866:             line = fp.readline()
 1866:             if not line:
    2:                 break
 1864:             words = line.split()
 3645:             for i in range(len(words)):
 2868:                 if words[i][0] == '#':
 1087:                     del words[i:]
 1087:                     break
 1864:             if not words:
 1087:                 continue
  777:             type, suffixes = words[0], words[1:]
 1781:             for suff in suffixes:
 1004:                 self.add_type(type, '.' + suff, strict)
       
    1:     def read_windows_registry(self, strict=True):
               """
               Load the MIME types database from Windows registry.
       
               If strict is true, information will be added to
               list of standard types, else to the list of non-standard
               types.
               """
       
               # Windows only
>>>>>>         if not _winreg:
>>>>>>             return
       
>>>>>>         def enum_types(mimedb):
>>>>>>             i = 0
>>>>>>             while True:
>>>>>>                 try:
>>>>>>                     ctype = _winreg.EnumKey(mimedb, i)
>>>>>>                 except EnvironmentError:
>>>>>>                     break
                       else:
>>>>>>                     if '\0' not in ctype:
>>>>>>                         yield ctype
>>>>>>                 i += 1
       
>>>>>>         default_encoding = sys.getdefaultencoding()
>>>>>>         with _winreg.OpenKey(_winreg.HKEY_CLASSES_ROOT, '') as hkcr:
>>>>>>             for subkeyname in enum_types(hkcr):
>>>>>>                 try:
>>>>>>                     with _winreg.OpenKey(hkcr, subkeyname) as subkey:
                               # Only check file extensions
>>>>>>                         if not subkeyname.startswith("."):
>>>>>>                             continue
                               # raises EnvironmentError if no 'Content Type' value
>>>>>>                         mimetype, datatype = _winreg.QueryValueEx(
>>>>>>                             subkey, 'Content Type')
>>>>>>                         if datatype != _winreg.REG_SZ:
>>>>>>                             continue
>>>>>>                         try:
>>>>>>                             mimetype = mimetype.encode(default_encoding)
>>>>>>                         except UnicodeEncodeError:
>>>>>>                             continue
>>>>>>                         self.add_type(mimetype, subkeyname, strict)
>>>>>>                 except EnvironmentError:
>>>>>>                     continue
       
    1: def guess_type(url, strict=True):
           """Guess the type of a file based on its URL.
       
           Return value is a tuple (type, encoding) where type is None if the
           type can't be guessed (no or unknown suffix) or a string of the
           form type/subtype, usable for a MIME Content-type header; and
           encoding is None for no encoding or the name of the program used
           to encode (e.g. compress or gzip).  The mappings are table
           driven.  Encoding suffixes are case sensitive; type suffixes are
           first tried case sensitive, then case insensitive.
       
           The suffixes .tgz, .taz and .tz (case sensitive!) are all mapped
           to ".tar.gz".  (This is table-driven too, using the dictionary
           suffix_map).
       
           Optional `strict' argument when false adds a bunch of commonly found, but
           non-standard types.
           """
   33:     if _db is None:
>>>>>>         init()
   33:     return _db.guess_type(url, strict)
       
       
    1: def guess_all_extensions(type, strict=True):
           """Guess the extensions for a file based on its MIME type.
       
           Return value is a list of strings giving the possible filename
           extensions, including the leading dot ('.').  The extension is not
           guaranteed to have been associated with any particular data
           stream, but would be mapped to the MIME type `type' by
           guess_type().  If no extension can be guessed for `type', None
           is returned.
       
           Optional `strict' argument when false adds a bunch of commonly found,
           but non-standard types.
           """
>>>>>>     if _db is None:
>>>>>>         init()
>>>>>>     return _db.guess_all_extensions(type, strict)
       
    1: def guess_extension(type, strict=True):
           """Guess the extension for a file based on its MIME type.
       
           Return value is a string giving a filename extension, including the
           leading dot ('.').  The extension is not guaranteed to have been
           associated with any particular data stream, but would be mapped to the
           MIME type `type' by guess_type().  If no extension can be guessed for
           `type', None is returned.
       
           Optional `strict' argument when false adds a bunch of commonly found,
           but non-standard types.
           """
>>>>>>     if _db is None:
>>>>>>         init()
>>>>>>     return _db.guess_extension(type, strict)
       
    1: def add_type(type, ext, strict=True):
           """Add a mapping between a type and an extension.
       
           When the extension is already known, the new
           type will replace the old one. When the type
           is already known the extension will be added
           to the list of known extensions.
       
           If strict is true, information will be added to
           list of standard types, else to the list of non-standard
           types.
           """
>>>>>>     if _db is None:
>>>>>>         init()
>>>>>>     return _db.add_type(type, ext, strict)
       
       
    1: def init(files=None):
           global suffix_map, types_map, encodings_map, common_types
           global inited, _db
    2:     inited = True    # so that MimeTypes.__init__() doesn't call us again
    2:     db = MimeTypes()
    2:     if files is None:
    2:         if _winreg:
>>>>>>             db.read_windows_registry()
    2:         files = knownfiles
   11:     for file in files:
    9:         if os.path.isfile(file):
    1:             db.read(file)
    2:     encodings_map = db.encodings_map
    2:     suffix_map = db.suffix_map
    2:     types_map = db.types_map[True]
    2:     common_types = db.types_map[False]
           # Make the DB a global variable now that it is fully initialized
    2:     _db = db
       
       
    1: def read_mime_types(file):
>>>>>>     try:
>>>>>>         f = open(file)
>>>>>>     except IOError:
>>>>>>         return None
>>>>>>     with f:
>>>>>>         db = MimeTypes()
>>>>>>         db.readfp(f, True)
>>>>>>         return db.types_map[True]
       
       
    1: def _default_mime_types():
           global suffix_map
           global encodings_map
           global types_map
           global common_types
       
  394:     suffix_map = {
  394:         '.svgz': '.svg.gz',
  394:         '.tgz': '.tar.gz',
  394:         '.taz': '.tar.gz',
  394:         '.tz': '.tar.gz',
  394:         '.tbz2': '.tar.bz2',
  394:         '.txz': '.tar.xz',
               }
       
  394:     encodings_map = {
  394:         '.gz': 'gzip',
  394:         '.Z': 'compress',
  394:         '.bz2': 'bzip2',
  394:         '.xz': 'xz',
               }
       
           # Before adding new types, make sure they are either registered with IANA,
           # at http://www.isi.edu/in-notes/iana/assignments/media-types
           # or extensions, i.e. using the x- prefix
       
           # If you add to these, please keep them sorted!
  394:     types_map = {
  394:         '.a'      : 'application/octet-stream',
  394:         '.ai'     : 'application/postscript',
  394:         '.aif'    : 'audio/x-aiff',
  394:         '.aifc'   : 'audio/x-aiff',
  394:         '.aiff'   : 'audio/x-aiff',
  394:         '.au'     : 'audio/basic',
  394:         '.avi'    : 'video/x-msvideo',
  394:         '.bat'    : 'text/plain',
  394:         '.bcpio'  : 'application/x-bcpio',
  394:         '.bin'    : 'application/octet-stream',
  394:         '.bmp'    : 'image/x-ms-bmp',
  394:         '.c'      : 'text/plain',
               # Duplicates :(
  394:         '.cdf'    : 'application/x-cdf',
  394:         '.cdf'    : 'application/x-netcdf',
  394:         '.cpio'   : 'application/x-cpio',
  394:         '.csh'    : 'application/x-csh',
  394:         '.css'    : 'text/css',
  394:         '.csv'    : 'text/csv',
  394:         '.dll'    : 'application/octet-stream',
  394:         '.doc'    : 'application/msword',
  394:         '.dot'    : 'application/msword',
  394:         '.dvi'    : 'application/x-dvi',
  394:         '.eml'    : 'message/rfc822',
  394:         '.eps'    : 'application/postscript',
  394:         '.etx'    : 'text/x-setext',
  394:         '.exe'    : 'application/octet-stream',
  394:         '.gif'    : 'image/gif',
  394:         '.gtar'   : 'application/x-gtar',
  394:         '.h'      : 'text/plain',
  394:         '.hdf'    : 'application/x-hdf',
  394:         '.htm'    : 'text/html',
  394:         '.html'   : 'text/html',
  394:         '.ico'    : 'image/vnd.microsoft.icon',
  394:         '.ief'    : 'image/ief',
  394:         '.jpe'    : 'image/jpeg',
  394:         '.jpeg'   : 'image/jpeg',
  394:         '.jpg'    : 'image/jpeg',
  394:         '.js'     : 'application/javascript',
  394:         '.ksh'    : 'text/plain',
  394:         '.latex'  : 'application/x-latex',
  394:         '.m1v'    : 'video/mpeg',
  394:         '.man'    : 'application/x-troff-man',
  394:         '.me'     : 'application/x-troff-me',
  394:         '.mht'    : 'message/rfc822',
  394:         '.mhtml'  : 'message/rfc822',
  394:         '.mif'    : 'application/x-mif',
  394:         '.mov'    : 'video/quicktime',
  394:         '.movie'  : 'video/x-sgi-movie',
  394:         '.mp2'    : 'audio/mpeg',
  394:         '.mp3'    : 'audio/mpeg',
  394:         '.mp4'    : 'video/mp4',
  394:         '.mpa'    : 'video/mpeg',
  394:         '.mpe'    : 'video/mpeg',
  394:         '.mpeg'   : 'video/mpeg',
  394:         '.mpg'    : 'video/mpeg',
  394:         '.ms'     : 'application/x-troff-ms',
  394:         '.nc'     : 'application/x-netcdf',
  394:         '.nws'    : 'message/rfc822',
  394:         '.o'      : 'application/octet-stream',
  394:         '.obj'    : 'application/octet-stream',
  394:         '.oda'    : 'application/oda',
  394:         '.p12'    : 'application/x-pkcs12',
  394:         '.p7c'    : 'application/pkcs7-mime',
  394:         '.pbm'    : 'image/x-portable-bitmap',
  394:         '.pdf'    : 'application/pdf',
  394:         '.pfx'    : 'application/x-pkcs12',
  394:         '.pgm'    : 'image/x-portable-graymap',
  394:         '.pl'     : 'text/plain',
  394:         '.png'    : 'image/png',
  394:         '.pnm'    : 'image/x-portable-anymap',
  394:         '.pot'    : 'application/vnd.ms-powerpoint',
  394:         '.ppa'    : 'application/vnd.ms-powerpoint',
  394:         '.ppm'    : 'image/x-portable-pixmap',
  394:         '.pps'    : 'application/vnd.ms-powerpoint',
  394:         '.ppt'    : 'application/vnd.ms-powerpoint',
  394:         '.ps'     : 'application/postscript',
  394:         '.pwz'    : 'application/vnd.ms-powerpoint',
  394:         '.py'     : 'text/x-python',
  394:         '.pyc'    : 'application/x-python-code',
  394:         '.pyo'    : 'application/x-python-code',
  394:         '.qt'     : 'video/quicktime',
  394:         '.ra'     : 'audio/x-pn-realaudio',
  394:         '.ram'    : 'application/x-pn-realaudio',
  394:         '.ras'    : 'image/x-cmu-raster',
  394:         '.rdf'    : 'application/xml',
  394:         '.rgb'    : 'image/x-rgb',
  394:         '.roff'   : 'application/x-troff',
  394:         '.rtx'    : 'text/richtext',
  394:         '.sgm'    : 'text/x-sgml',
  394:         '.sgml'   : 'text/x-sgml',
  394:         '.sh'     : 'application/x-sh',
  394:         '.shar'   : 'application/x-shar',
  394:         '.snd'    : 'audio/basic',
  394:         '.so'     : 'application/octet-stream',
  394:         '.src'    : 'application/x-wais-source',
  394:         '.sv4cpio': 'application/x-sv4cpio',
  394:         '.sv4crc' : 'application/x-sv4crc',
  394:         '.svg'    : 'image/svg+xml',
  394:         '.swf'    : 'application/x-shockwave-flash',
  394:         '.t'      : 'application/x-troff',
  394:         '.tar'    : 'application/x-tar',
  394:         '.tcl'    : 'application/x-tcl',
  394:         '.tex'    : 'application/x-tex',
  394:         '.texi'   : 'application/x-texinfo',
  394:         '.texinfo': 'application/x-texinfo',
  394:         '.tif'    : 'image/tiff',
  394:         '.tiff'   : 'image/tiff',
  394:         '.tr'     : 'application/x-troff',
  394:         '.tsv'    : 'text/tab-separated-values',
  394:         '.txt'    : 'text/plain',
  394:         '.ustar'  : 'application/x-ustar',
  394:         '.vcf'    : 'text/x-vcard',
  394:         '.wav'    : 'audio/x-wav',
  394:         '.webm'   : 'video/webm',
  394:         '.wiz'    : 'application/msword',
  394:         '.wsdl'   : 'application/xml',
  394:         '.xbm'    : 'image/x-xbitmap',
  394:         '.xlb'    : 'application/vnd.ms-excel',
               # Duplicates :(
  394:         '.xls'    : 'application/excel',
  394:         '.xls'    : 'application/vnd.ms-excel',
  394:         '.xml'    : 'text/xml',
  394:         '.xpdl'   : 'application/xml',
  394:         '.xpm'    : 'image/x-xpixmap',
  394:         '.xsl'    : 'application/xml',
  394:         '.xwd'    : 'image/x-xwindowdump',
  394:         '.zip'    : 'application/zip',
               }
       
           # These are non-standard types, commonly found in the wild.  They will
           # only match if strict=0 flag is given to the API methods.
       
           # Please sort these too
  394:     common_types = {
  394:         '.jpg' : 'image/jpg',
  394:         '.mid' : 'audio/midi',
  394:         '.midi': 'audio/midi',
  394:         '.pct' : 'image/pict',
  394:         '.pic' : 'image/pict',
  394:         '.pict': 'image/pict',
  394:         '.rtf' : 'application/rtf',
  394:         '.xul' : 'text/xul'
               }
       
       
    1: _default_mime_types()
       
       
    1: if __name__ == '__main__':
>>>>>>     import getopt
       
           USAGE = """\
       Usage: mimetypes.py [options] type
       
       Options:
           --help / -h       -- print this message and exit
           --lenient / -l    -- additionally search of some common, but non-standard
                                types.
           --extension / -e  -- guess extension instead of type
       
       More than one type argument may be given.
>>>>>> """
       
>>>>>>     def usage(code, msg=''):
>>>>>>         print USAGE
>>>>>>         if msg: print msg
>>>>>>         sys.exit(code)
       
>>>>>>     try:
>>>>>>         opts, args = getopt.getopt(sys.argv[1:], 'hle',
>>>>>>                                    ['help', 'lenient', 'extension'])
>>>>>>     except getopt.error, msg:
>>>>>>         usage(1, msg)
       
>>>>>>     strict = 1
>>>>>>     extension = 0
>>>>>>     for opt, arg in opts:
>>>>>>         if opt in ('-h', '--help'):
>>>>>>             usage(0)
>>>>>>         elif opt in ('-l', '--lenient'):
>>>>>>             strict = 0
>>>>>>         elif opt in ('-e', '--extension'):
>>>>>>             extension = 1
>>>>>>     for gtype in args:
>>>>>>         if extension:
>>>>>>             guess = guess_extension(gtype, strict)
>>>>>>             if not guess: print "I don't know anything about type", gtype
>>>>>>             else: print guess
               else:
>>>>>>             guess, encoding = guess_type(gtype, strict)
>>>>>>             if not guess: print "I don't know anything about type", gtype
>>>>>>             else: print 'type:', guess, 'encoding:', encoding
