    1: import decimal
    1: from StringIO import StringIO
    1: from collections import OrderedDict
    1: from json.tests import PyTest, CTest
       
       
    2: class TestDecode(object):
    1:     def test_decimal(self):
    2:         rval = self.loads('1.1', parse_float=decimal.Decimal)
    2:         self.assertTrue(isinstance(rval, decimal.Decimal))
    2:         self.assertEqual(rval, decimal.Decimal('1.1'))
       
    1:     def test_float(self):
    2:         rval = self.loads('1', parse_int=float)
    2:         self.assertTrue(isinstance(rval, float))
    2:         self.assertEqual(rval, 1.0)
       
    1:     def test_decoder_optimizations(self):
               # Several optimizations were made that skip over calls to
               # the whitespace regex, so this test is designed to try and
               # exercise the uncommon cases. The array cases are already covered.
    2:         rval = self.loads('{   "key"    :    "value"    ,  "k":"v"    }')
    2:         self.assertEqual(rval, {"key":"value", "k":"v"})
       
    1:     def test_empty_objects(self):
    2:         self.assertEqual(self.loads('{}'), {})
    2:         self.assertEqual(self.loads('[]'), [])
    2:         self.assertEqual(self.loads('""'), u"")
    2:         self.assertIsInstance(self.loads('""'), unicode)
       
    1:     def test_object_pairs_hook(self):
    2:         s = '{"xkd":1, "kcw":2, "art":3, "hxm":4, "qrt":5, "pad":6, "hoy":7}'
    2:         p = [("xkd", 1), ("kcw", 2), ("art", 3), ("hxm", 4),
    2:              ("qrt", 5), ("pad", 6), ("hoy", 7)]
    2:         self.assertEqual(self.loads(s), eval(s))
    4:         self.assertEqual(self.loads(s, object_pairs_hook=lambda x: x), p)
    2:         self.assertEqual(self.json.load(StringIO(s),
    4:                                         object_pairs_hook=lambda x: x), p)
    2:         od = self.loads(s, object_pairs_hook=OrderedDict)
    2:         self.assertEqual(od, OrderedDict(p))
    2:         self.assertEqual(type(od), OrderedDict)
               # the object_pairs_hook takes priority over the object_hook
    2:         self.assertEqual(self.loads(s, object_pairs_hook=OrderedDict,
    2:                                     object_hook=lambda x: None),
    2:                          OrderedDict(p))
               # check that empty object literals work (see #17368)
    2:         self.assertEqual(self.loads('{}', object_pairs_hook=OrderedDict),
    2:                          OrderedDict())
    2:         self.assertEqual(self.loads('{"empty": {}}',
    2:                                     object_pairs_hook=OrderedDict),
    2:                          OrderedDict([('empty', OrderedDict())]))
       
    1:     def test_extra_data(self):
    2:         s = '[1, 2, 3]5'
    2:         msg = 'Extra data'
    2:         self.assertRaisesRegexp(ValueError, msg, self.loads, s)
       
    1:     def test_invalid_escape(self):
    2:         s = '["abc\\y"]'
    2:         msg = 'escape'
    2:         self.assertRaisesRegexp(ValueError, msg, self.loads, s)
       
    1:     def test_negative_index(self):
    2:         d = self.json.JSONDecoder()
    2:         self.assertRaises(ValueError, d.raw_decode, 'a'*42, -50000)
    2:         self.assertRaises(ValueError, d.raw_decode, u'a'*42, -50000)
       
    2: class TestPyDecode(TestDecode, PyTest): pass
    2: class TestCDecode(TestDecode, CTest): pass
