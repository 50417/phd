       # Python test set -- part 6, built-in types
       
    1: from test.test_support import run_unittest, have_unicode, run_with_locale, \
                                     check_py3k_warnings
    1: import unittest
    1: import sys
    1: import locale
       
    2: class TypesTests(unittest.TestCase):
       
    1:     def test_truth_values(self):
    1:         if None: self.fail('None is true instead of false')
               if 0: self.fail('0 is true instead of false')
               if 0L: self.fail('0L is true instead of false')
               if 0.0: self.fail('0.0 is true instead of false')
               if '': self.fail('\'\' is true instead of false')
    1:         if not 1: self.fail('1 is false instead of true')
    1:         if not 1L: self.fail('1L is false instead of true')
    1:         if not 1.0: self.fail('1.0 is false instead of true')
    1:         if not 'x': self.fail('\'x\' is false instead of true')
    1:         if not {'x': 1}: self.fail('{\'x\': 1} is false instead of true')
    1:         def f(): pass
    2:         class C: pass
    1:         x = C()
    1:         if not f: self.fail('f is false instead of true')
    1:         if not C: self.fail('C is false instead of true')
    1:         if not sys: self.fail('sys is false instead of true')
    1:         if not x: self.fail('x is false instead of true')
       
    1:     def test_boolean_ops(self):
    1:         if 0 or 0: self.fail('0 or 0 is true instead of false')
    1:         if 1 and 1: pass
>>>>>>         else: self.fail('1 and 1 is false instead of true')
    1:         if not 1: self.fail('not 1 is true instead of false')
       
    1:     def test_comparisons(self):
    1:         if 0 < 1 <= 1 == 1 >= 1 > 0 != 1: pass
>>>>>>         else: self.fail('int comparisons failed')
    1:         if 0L < 1L <= 1L == 1L >= 1L > 0L != 1L: pass
>>>>>>         else: self.fail('long int comparisons failed')
    1:         if 0.0 < 1.0 <= 1.0 == 1.0 >= 1.0 > 0.0 != 1.0: pass
>>>>>>         else: self.fail('float comparisons failed')
    1:         if '' < 'a' <= 'a' == 'a' < 'abc' < 'abd' < 'b': pass
>>>>>>         else: self.fail('string comparisons failed')
    1:         if None is None: pass
>>>>>>         else: self.fail('identity test failed')
       
    1:     def test_float_constructor(self):
    1:         self.assertRaises(ValueError, float, '')
    1:         self.assertRaises(ValueError, float, '5\0')
       
    1:     def test_zero_division(self):
    1:         try: 5.0 / 0.0
    1:         except ZeroDivisionError: pass
>>>>>>         else: self.fail("5.0 / 0.0 didn't raise ZeroDivisionError")
       
    1:         try: 5.0 // 0.0
    1:         except ZeroDivisionError: pass
>>>>>>         else: self.fail("5.0 // 0.0 didn't raise ZeroDivisionError")
       
    1:         try: 5.0 % 0.0
    1:         except ZeroDivisionError: pass
>>>>>>         else: self.fail("5.0 % 0.0 didn't raise ZeroDivisionError")
       
    1:         try: 5 / 0L
    1:         except ZeroDivisionError: pass
>>>>>>         else: self.fail("5 / 0L didn't raise ZeroDivisionError")
       
    1:         try: 5 // 0L
    1:         except ZeroDivisionError: pass
>>>>>>         else: self.fail("5 // 0L didn't raise ZeroDivisionError")
       
    1:         try: 5 % 0L
    1:         except ZeroDivisionError: pass
>>>>>>         else: self.fail("5 % 0L didn't raise ZeroDivisionError")
       
    1:     def test_numeric_types(self):
    1:         if 0 != 0L or 0 != 0.0 or 0L != 0.0: self.fail('mixed comparisons')
    1:         if 1 != 1L or 1 != 1.0 or 1L != 1.0: self.fail('mixed comparisons')
    1:         if -1 != -1L or -1 != -1.0 or -1L != -1.0:
>>>>>>             self.fail('int/long/float value not equal')
               # calling built-in types without argument must return 0
    1:         if int() != 0: self.fail('int() does not return 0')
    1:         if long() != 0L: self.fail('long() does not return 0L')
    1:         if float() != 0.0: self.fail('float() does not return 0.0')
    1:         if int(1.9) == 1 == int(1.1) and int(-1.1) == -1 == int(-1.9): pass
>>>>>>         else: self.fail('int() does not round properly')
    1:         if long(1.9) == 1L == long(1.1) and long(-1.1) == -1L == long(-1.9): pass
>>>>>>         else: self.fail('long() does not round properly')
    1:         if float(1) == 1.0 and float(-1) == -1.0 and float(0) == 0.0: pass
>>>>>>         else: self.fail('float() does not work properly')
       
    1:     def test_float_to_string(self):
    1:         def test(f, result):
  199:             self.assertEqual(f.__format__('e'), result)
  199:             self.assertEqual('%e' % f, result)
       
               # test all 2 digit exponents, both with __format__ and with
               #  '%' formatting
  200:         for i in range(-99, 100):
  199:             test(float('1.5e'+str(i)), '1.500000e{0:+03d}'.format(i))
       
               # test some 3 digit exponents
    1:         self.assertEqual(1.5e100.__format__('e'), '1.500000e+100')
    1:         self.assertEqual('%e' % 1.5e100, '1.500000e+100')
       
    1:         self.assertEqual(1.5e101.__format__('e'), '1.500000e+101')
    1:         self.assertEqual('%e' % 1.5e101, '1.500000e+101')
       
    1:         self.assertEqual(1.5e-100.__format__('e'), '1.500000e-100')
    1:         self.assertEqual('%e' % 1.5e-100, '1.500000e-100')
       
    1:         self.assertEqual(1.5e-101.__format__('e'), '1.500000e-101')
    1:         self.assertEqual('%e' % 1.5e-101, '1.500000e-101')
       
    1:         self.assertEqual('%g' % 1.0, '1')
    1:         self.assertEqual('%#g' % 1.0, '1.00000')
       
    1:     def test_normal_integers(self):
               # Ensure the first 256 integers are shared
    1:         a = 256
    1:         b = 128*2
    1:         if a is not b: self.fail('256 is not shared')
    1:         if 12 + 24 != 36: self.fail('int op')
    1:         if 12 + (-24) != -12: self.fail('int op')
    1:         if (-12) + 24 != 12: self.fail('int op')
    1:         if (-12) + (-24) != -36: self.fail('int op')
    1:         if not 12 < 24: self.fail('int op')
    1:         if not -24 < -12: self.fail('int op')
               # Test for a particular bug in integer multiply
    1:         xsize, ysize, zsize = 238, 356, 4
    1:         if not (xsize*ysize*zsize == zsize*xsize*ysize == 338912):
>>>>>>             self.fail('int mul commutativity')
               # And another.
    1:         m = -sys.maxint - 1
    7:         for divisor in 1, 2, 4, 8, 16, 32:
    6:             j = m // divisor
    6:             prod = divisor * j
    6:             if prod != m:
>>>>>>                 self.fail("%r * %r == %r != %r" % (divisor, j, prod, m))
    6:             if type(prod) is not int:
>>>>>>                 self.fail("expected type(prod) to be int, not %r" %
>>>>>>                                    type(prod))
               # Check for expected * overflow to long.
    7:         for divisor in 1, 2, 4, 8, 16, 32:
    6:             j = m // divisor - 1
    6:             prod = divisor * j
    6:             if type(prod) is not long:
>>>>>>                 self.fail("expected type(%r) to be long, not %r" %
>>>>>>                                    (prod, type(prod)))
               # Check for expected * overflow to long.
    1:         m = sys.maxint
    7:         for divisor in 1, 2, 4, 8, 16, 32:
    6:             j = m // divisor + 1
    6:             prod = divisor * j
    6:             if type(prod) is not long:
>>>>>>                 self.fail("expected type(%r) to be long, not %r" %
>>>>>>                                    (prod, type(prod)))
       
    1:     def test_long_integers(self):
    1:         if 12L + 24L != 36L: self.fail('long op')
    1:         if 12L + (-24L) != -12L: self.fail('long op')
    1:         if (-12L) + 24L != 12L: self.fail('long op')
    1:         if (-12L) + (-24L) != -36L: self.fail('long op')
    1:         if not 12L < 24L: self.fail('long op')
    1:         if not -24L < -12L: self.fail('long op')
    1:         x = sys.maxint
    1:         if int(long(x)) != x: self.fail('long op')
    1:         try: y = int(long(x)+1L)
>>>>>>         except OverflowError: self.fail('long op')
    1:         if not isinstance(y, long): self.fail('long op')
    1:         x = -x
    1:         if int(long(x)) != x: self.fail('long op')
    1:         x = x-1
    1:         if int(long(x)) != x: self.fail('long op')
    1:         try: y = int(long(x)-1L)
>>>>>>         except OverflowError: self.fail('long op')
    1:         if not isinstance(y, long): self.fail('long op')
       
    1:         try: 5 << -5
    1:         except ValueError: pass
>>>>>>         else: self.fail('int negative shift <<')
       
    1:         try: 5L << -5L
    1:         except ValueError: pass
>>>>>>         else: self.fail('long negative shift <<')
       
    1:         try: 5 >> -5
    1:         except ValueError: pass
>>>>>>         else: self.fail('int negative shift >>')
       
    1:         try: 5L >> -5L
    1:         except ValueError: pass
>>>>>>         else: self.fail('long negative shift >>')
       
    1:     def test_floats(self):
    1:         if 12.0 + 24.0 != 36.0: self.fail('float op')
    1:         if 12.0 + (-24.0) != -12.0: self.fail('float op')
    1:         if (-12.0) + 24.0 != 12.0: self.fail('float op')
    1:         if (-12.0) + (-24.0) != -36.0: self.fail('float op')
    1:         if not 12.0 < 24.0: self.fail('float op')
    1:         if not -24.0 < -12.0: self.fail('float op')
       
    1:     def test_strings(self):
    1:         if len('') != 0: self.fail('len(\'\')')
    1:         if len('a') != 1: self.fail('len(\'a\')')
    1:         if len('abcdef') != 6: self.fail('len(\'abcdef\')')
    1:         if 'xyz' + 'abcde' != 'xyzabcde': self.fail('string concatenation')
    1:         if 'xyz'*3 != 'xyzxyzxyz': self.fail('string repetition *3')
    1:         if 0*'abcde' != '': self.fail('string repetition 0*')
    1:         if min('abc') != 'a' or max('abc') != 'c': self.fail('min/max string')
    1:         if 'a' in 'abc' and 'b' in 'abc' and 'c' in 'abc' and 'd' not in 'abc': pass
>>>>>>         else: self.fail('in/not in string')
    1:         x = 'x'*103
    1:         if '%s!'%x != x+'!': self.fail('nasty string formatting bug')
       
               #extended slices for strings
    1:         a = '0123456789'
    1:         self.assertEqual(a[::], a)
    1:         self.assertEqual(a[::2], '02468')
    1:         self.assertEqual(a[1::2], '13579')
    1:         self.assertEqual(a[::-1],'9876543210')
    1:         self.assertEqual(a[::-2], '97531')
    1:         self.assertEqual(a[3::-2], '31')
    1:         self.assertEqual(a[-100:100:], a)
    1:         self.assertEqual(a[100:-100:-1], a[::-1])
    1:         self.assertEqual(a[-100L:100L:2L], '02468')
       
    1:         if have_unicode:
    1:             a = unicode('0123456789', 'ascii')
    1:             self.assertEqual(a[::], a)
    1:             self.assertEqual(a[::2], unicode('02468', 'ascii'))
    1:             self.assertEqual(a[1::2], unicode('13579', 'ascii'))
    1:             self.assertEqual(a[::-1], unicode('9876543210', 'ascii'))
    1:             self.assertEqual(a[::-2], unicode('97531', 'ascii'))
    1:             self.assertEqual(a[3::-2], unicode('31', 'ascii'))
    1:             self.assertEqual(a[-100:100:], a)
    1:             self.assertEqual(a[100:-100:-1], a[::-1])
    1:             self.assertEqual(a[-100L:100L:2L], unicode('02468', 'ascii'))
       
       
    1:     def test_type_function(self):
    1:         self.assertRaises(TypeError, type, 1, 2)
    1:         self.assertRaises(TypeError, type, 1, 2, 3, 4)
       
    1:     def test_buffers(self):
    1:         self.assertRaises(ValueError, buffer, 'asdf', -1)
    1:         cmp(buffer("abc"), buffer("def")) # used to raise a warning: tp_compare didn't return -1, 0, or 1
       
    1:         self.assertRaises(TypeError, buffer, None)
       
    1:         a = buffer('asdf')
    1:         hash(a)
    1:         b = a * 5
    1:         if a == b:
>>>>>>             self.fail('buffers should not be equal')
    1:         if str(b) != ('asdf' * 5):
>>>>>>             self.fail('repeated buffer has wrong content')
    1:         if str(a * 0) != '':
>>>>>>             self.fail('repeated buffer zero times has wrong content')
    1:         if str(a + buffer('def')) != 'asdfdef':
>>>>>>             self.fail('concatenation of buffers yields wrong content')
    1:         if str(buffer(a)) != 'asdf':
>>>>>>             self.fail('composing buffers failed')
    1:         if str(buffer(a, 2)) != 'df':
>>>>>>             self.fail('specifying buffer offset failed')
    1:         if str(buffer(a, 0, 2)) != 'as':
>>>>>>             self.fail('specifying buffer size failed')
    1:         if str(buffer(a, 1, 2)) != 'sd':
>>>>>>             self.fail('specifying buffer offset and size failed')
    1:         self.assertRaises(ValueError, buffer, buffer('asdf', 1), -1)
    1:         if str(buffer(buffer('asdf', 0, 2), 0)) != 'as':
>>>>>>             self.fail('composing length-specified buffer failed')
    1:         if str(buffer(buffer('asdf', 0, 2), 0, 5000)) != 'as':
>>>>>>             self.fail('composing length-specified buffer failed')
    1:         if str(buffer(buffer('asdf', 0, 2), 0, -1)) != 'as':
>>>>>>             self.fail('composing length-specified buffer failed')
    1:         if str(buffer(buffer('asdf', 0, 2), 1, 2)) != 's':
>>>>>>             self.fail('composing length-specified buffer failed')
       
    1:         try: a[1] = 'g'
    1:         except TypeError: pass
>>>>>>         else: self.fail("buffer assignment should raise TypeError")
       
    1:         try: a[0:1] = 'g'
    1:         except TypeError: pass
>>>>>>         else: self.fail("buffer slice assignment should raise TypeError")
       
               # array.array() returns an object that does not implement a char buffer,
               # something which int() uses for conversion.
    1:         import array
    1:         try: int(buffer(array.array('c')))
    1:         except TypeError: pass
>>>>>>         else: self.fail("char buffer (at C level) not working")
       
    1:     def test_int__format__(self):
    1:         def test(i, format_spec, result):
                   # just make sure I'm not accidentally checking longs
   99:             assert type(i) == int
   99:             assert type(format_spec) == str
   99:             self.assertEqual(i.__format__(format_spec), result)
   99:             self.assertEqual(i.__format__(unicode(format_spec)), result)
       
    1:         test(123456789, 'd', '123456789')
    1:         test(123456789, 'd', '123456789')
       
    1:         test(1, 'c', '\01')
       
               # sign and aligning are interdependent
    1:         test(1, "-", '1')
    1:         test(-1, "-", '-1')
    1:         test(1, "-3", '  1')
    1:         test(-1, "-3", ' -1')
    1:         test(1, "+3", ' +1')
    1:         test(-1, "+3", ' -1')
    1:         test(1, " 3", '  1')
    1:         test(-1, " 3", ' -1')
    1:         test(1, " ", ' 1')
    1:         test(-1, " ", '-1')
       
               # hex
    1:         test(3, "x", "3")
    1:         test(3, "X", "3")
    1:         test(1234, "x", "4d2")
    1:         test(-1234, "x", "-4d2")
    1:         test(1234, "8x", "     4d2")
    1:         test(-1234, "8x", "    -4d2")
    1:         test(1234, "x", "4d2")
    1:         test(-1234, "x", "-4d2")
    1:         test(-3, "x", "-3")
    1:         test(-3, "X", "-3")
    1:         test(int('be', 16), "x", "be")
    1:         test(int('be', 16), "X", "BE")
    1:         test(-int('be', 16), "x", "-be")
    1:         test(-int('be', 16), "X", "-BE")
       
               # octal
    1:         test(3, "o", "3")
    1:         test(-3, "o", "-3")
    1:         test(65, "o", "101")
    1:         test(-65, "o", "-101")
    1:         test(1234, "o", "2322")
    1:         test(-1234, "o", "-2322")
    1:         test(1234, "-o", "2322")
    1:         test(-1234, "-o", "-2322")
    1:         test(1234, " o", " 2322")
    1:         test(-1234, " o", "-2322")
    1:         test(1234, "+o", "+2322")
    1:         test(-1234, "+o", "-2322")
       
               # binary
    1:         test(3, "b", "11")
    1:         test(-3, "b", "-11")
    1:         test(1234, "b", "10011010010")
    1:         test(-1234, "b", "-10011010010")
    1:         test(1234, "-b", "10011010010")
    1:         test(-1234, "-b", "-10011010010")
    1:         test(1234, " b", " 10011010010")
    1:         test(-1234, " b", "-10011010010")
    1:         test(1234, "+b", "+10011010010")
    1:         test(-1234, "+b", "-10011010010")
       
               # alternate (#) formatting
    1:         test(0, "#b", '0b0')
    1:         test(0, "-#b", '0b0')
    1:         test(1, "-#b", '0b1')
    1:         test(-1, "-#b", '-0b1')
    1:         test(-1, "-#5b", ' -0b1')
    1:         test(1, "+#5b", ' +0b1')
    1:         test(100, "+#b", '+0b1100100')
    1:         test(100, "#012b", '0b0001100100')
    1:         test(-100, "#012b", '-0b001100100')
       
    1:         test(0, "#o", '0o0')
    1:         test(0, "-#o", '0o0')
    1:         test(1, "-#o", '0o1')
    1:         test(-1, "-#o", '-0o1')
    1:         test(-1, "-#5o", ' -0o1')
    1:         test(1, "+#5o", ' +0o1')
    1:         test(100, "+#o", '+0o144')
    1:         test(100, "#012o", '0o0000000144')
    1:         test(-100, "#012o", '-0o000000144')
       
    1:         test(0, "#x", '0x0')
    1:         test(0, "-#x", '0x0')
    1:         test(1, "-#x", '0x1')
    1:         test(-1, "-#x", '-0x1')
    1:         test(-1, "-#5x", ' -0x1')
    1:         test(1, "+#5x", ' +0x1')
    1:         test(100, "+#x", '+0x64')
    1:         test(100, "#012x", '0x0000000064')
    1:         test(-100, "#012x", '-0x000000064')
    1:         test(123456, "#012x", '0x000001e240')
    1:         test(-123456, "#012x", '-0x00001e240')
       
    1:         test(0, "#X", '0X0')
    1:         test(0, "-#X", '0X0')
    1:         test(1, "-#X", '0X1')
    1:         test(-1, "-#X", '-0X1')
    1:         test(-1, "-#5X", ' -0X1')
    1:         test(1, "+#5X", ' +0X1')
    1:         test(100, "+#X", '+0X64')
    1:         test(100, "#012X", '0X0000000064')
    1:         test(-100, "#012X", '-0X000000064')
    1:         test(123456, "#012X", '0X000001E240')
    1:         test(-123456, "#012X", '-0X00001E240')
       
               # issue 5782, commas with no specifier type
    1:         test(1234, '010,', '00,001,234')
       
               # make sure these are errors
       
               # precision disallowed
    1:         self.assertRaises(ValueError, 3 .__format__, "1.3")
               # sign not allowed with 'c'
    1:         self.assertRaises(ValueError, 3 .__format__, "+c")
               # format spec must be string
    1:         self.assertRaises(TypeError, 3 .__format__, None)
    1:         self.assertRaises(TypeError, 3 .__format__, 0)
       
               # can't have ',' with 'c'
    1:         self.assertRaises(ValueError, 3 .__format__, ",c")
       
               # ensure that only int and float type specifiers work
   27:         for format_spec in ([chr(x) for x in range(ord('a'), ord('z')+1)] +
   79:                             [chr(x) for x in range(ord('A'), ord('Z')+1)]):
   52:             if not format_spec in 'bcdoxXeEfFgGn%':
   39:                 self.assertRaises(ValueError, 0 .__format__, format_spec)
   39:                 self.assertRaises(ValueError, 1 .__format__, format_spec)
   39:                 self.assertRaises(ValueError, (-1) .__format__, format_spec)
       
               # ensure that float type specifiers work; format converts
               #  the int to a float
    8:         for format_spec in 'eEfFgG%':
   56:             for value in [0, 1, -1, 100, -100, 1234567890, -1234567890]:
   49:                 self.assertEqual(value.__format__(format_spec),
   49:                                  float(value).__format__(format_spec))
       
               # Issue 6902
    1:         test(123456, "0<20", '12345600000000000000')
    1:         test(123456, "1<20", '12345611111111111111')
    1:         test(123456, "*<20", '123456**************')
    1:         test(123456, "0>20", '00000000000000123456')
    1:         test(123456, "1>20", '11111111111111123456')
    1:         test(123456, "*>20", '**************123456')
    1:         test(123456, "0=20", '00000000000000123456')
    1:         test(123456, "1=20", '11111111111111123456')
    1:         test(123456, "*=20", '**************123456')
       
    1:     def test_long__format__(self):
    1:         def test(i, format_spec, result):
                   # make sure we're not accidentally checking ints
   60:             assert type(i) == long
   60:             assert type(format_spec) == str
   60:             self.assertEqual(i.__format__(format_spec), result)
   60:             self.assertEqual(i.__format__(unicode(format_spec)), result)
       
    1:         test(10**100, 'd', '1' + '0' * 100)
    1:         test(10**100+100, 'd', '1' + '0' * 97 + '100')
       
    1:         test(123456789L, 'd', '123456789')
    1:         test(123456789L, 'd', '123456789')
       
               # sign and aligning are interdependent
    1:         test(1L, "-", '1')
    1:         test(-1L, "-", '-1')
    1:         test(1L, "-3", '  1')
    1:         test(-1L, "-3", ' -1')
    1:         test(1L, "+3", ' +1')
    1:         test(-1L, "+3", ' -1')
    1:         test(1L, " 3", '  1')
    1:         test(-1L, " 3", ' -1')
    1:         test(1L, " ", ' 1')
    1:         test(-1L, " ", '-1')
       
    1:         test(1L, 'c', '\01')
       
               # hex
    1:         test(3L, "x", "3")
    1:         test(3L, "X", "3")
    1:         test(1234L, "x", "4d2")
    1:         test(-1234L, "x", "-4d2")
    1:         test(1234L, "8x", "     4d2")
    1:         test(-1234L, "8x", "    -4d2")
    1:         test(1234L, "x", "4d2")
    1:         test(-1234L, "x", "-4d2")
    1:         test(-3L, "x", "-3")
    1:         test(-3L, "X", "-3")
    1:         test(long('be', 16), "x", "be")
    1:         test(long('be', 16), "X", "BE")
    1:         test(-long('be', 16), "x", "-be")
    1:         test(-long('be', 16), "X", "-BE")
       
               # octal
    1:         test(3L, "o", "3")
    1:         test(-3L, "o", "-3")
    1:         test(65L, "o", "101")
    1:         test(-65L, "o", "-101")
    1:         test(1234L, "o", "2322")
    1:         test(-1234L, "o", "-2322")
    1:         test(1234L, "-o", "2322")
    1:         test(-1234L, "-o", "-2322")
    1:         test(1234L, " o", " 2322")
    1:         test(-1234L, " o", "-2322")
    1:         test(1234L, "+o", "+2322")
    1:         test(-1234L, "+o", "-2322")
       
               # binary
    1:         test(3L, "b", "11")
    1:         test(-3L, "b", "-11")
    1:         test(1234L, "b", "10011010010")
    1:         test(-1234L, "b", "-10011010010")
    1:         test(1234L, "-b", "10011010010")
    1:         test(-1234L, "-b", "-10011010010")
    1:         test(1234L, " b", " 10011010010")
    1:         test(-1234L, " b", "-10011010010")
    1:         test(1234L, "+b", "+10011010010")
    1:         test(-1234L, "+b", "-10011010010")
       
               # make sure these are errors
       
               # precision disallowed
    1:         self.assertRaises(ValueError, 3L .__format__, "1.3")
               # sign not allowed with 'c'
    1:         self.assertRaises(ValueError, 3L .__format__, "+c")
               # format spec must be string
    1:         self.assertRaises(TypeError, 3L .__format__, None)
    1:         self.assertRaises(TypeError, 3L .__format__, 0)
               # alternate specifier in wrong place
    1:         self.assertRaises(ValueError, 1L .__format__, "#+5x")
    1:         self.assertRaises(ValueError, 1L .__format__, "+5#x")
       
               # ensure that only int and float type specifiers work
   27:         for format_spec in ([chr(x) for x in range(ord('a'), ord('z')+1)] +
   79:                             [chr(x) for x in range(ord('A'), ord('Z')+1)]):
   52:             if not format_spec in 'bcdoxXeEfFgGn%':
   39:                 self.assertRaises(ValueError, 0L .__format__, format_spec)
   39:                 self.assertRaises(ValueError, 1L .__format__, format_spec)
   39:                 self.assertRaises(ValueError, (-1L) .__format__, format_spec)
       
               # ensure that float type specifiers work; format converts
               #  the long to a float
    8:         for format_spec in 'eEfFgG%':
   56:             for value in [0L, 1L, -1L, 100L, -100L, 1234567890L, -1234567890L]:
   49:                 self.assertEqual(value.__format__(format_spec),
   49:                                  float(value).__format__(format_spec))
               # Issue 6902
    1:         test(123456L, "0<20", '12345600000000000000')
    1:         test(123456L, "1<20", '12345611111111111111')
    1:         test(123456L, "*<20", '123456**************')
    1:         test(123456L, "0>20", '00000000000000123456')
    1:         test(123456L, "1>20", '11111111111111123456')
    1:         test(123456L, "*>20", '**************123456')
    1:         test(123456L, "0=20", '00000000000000123456')
    1:         test(123456L, "1=20", '11111111111111123456')
    1:         test(123456L, "*=20", '**************123456')
       
    1:     @run_with_locale('LC_NUMERIC', 'en_US.UTF8')
           def test_float__format__locale(self):
               # test locale support for __format__ code 'n'
       
   21:         for i in range(-10, 10):
   20:             x = 1234567890.0 * (10.0 ** i)
   20:             self.assertEqual(locale.format('%g', x, grouping=True), format(x, 'n'))
   20:             self.assertEqual(locale.format('%.10g', x, grouping=True), format(x, '.10n'))
       
    1:     @run_with_locale('LC_NUMERIC', 'en_US.UTF8')
           def test_int__format__locale(self):
               # test locale support for __format__ code 'n' for integers
       
    1:         x = 123456789012345678901234567890
   31:         for i in range(0, 30):
   30:             self.assertEqual(locale.format('%d', x, grouping=True), format(x, 'n'))
       
                   # move to the next integer to test
   30:             x = x // 10
       
    1:         rfmt = ">20n"
    1:         lfmt = "<20n"
    1:         cfmt = "^20n"
    9:         for x in (1234, 12345, 123456, 1234567, 12345678, 123456789, 1234567890, 12345678900):
    8:             self.assertEqual(len(format(0, rfmt)), len(format(x, rfmt)))
    8:             self.assertEqual(len(format(0, lfmt)), len(format(x, lfmt)))
    8:             self.assertEqual(len(format(0, cfmt)), len(format(x, cfmt)))
       
    1:     def test_float__format__(self):
               # these should be rewritten to use both format(x, spec) and
               # x.__format__(spec)
       
    1:         def test(f, format_spec, result):
   62:             assert type(f) == float
   62:             assert type(format_spec) == str
   62:             self.assertEqual(f.__format__(format_spec), result)
   62:             self.assertEqual(f.__format__(unicode(format_spec)), result)
       
    1:         test(0.0, 'f', '0.000000')
       
               # the default is 'g', except for empty format spec
    1:         test(0.0, '', '0.0')
    1:         test(0.01, '', '0.01')
    1:         test(0.01, 'g', '0.01')
       
               # test for issue 3411
    1:         test(1.23, '1', '1.23')
    1:         test(-1.23, '1', '-1.23')
    1:         test(1.23, '1g', '1.23')
    1:         test(-1.23, '1g', '-1.23')
       
    1:         test( 1.0, ' g', ' 1')
    1:         test(-1.0, ' g', '-1')
    1:         test( 1.0, '+g', '+1')
    1:         test(-1.0, '+g', '-1')
    1:         test(1.1234e200, 'g', '1.1234e+200')
    1:         test(1.1234e200, 'G', '1.1234E+200')
       
       
    1:         test(1.0, 'f', '1.000000')
       
    1:         test(-1.0, 'f', '-1.000000')
       
    1:         test( 1.0, ' f', ' 1.000000')
    1:         test(-1.0, ' f', '-1.000000')
    1:         test( 1.0, '+f', '+1.000000')
    1:         test(-1.0, '+f', '-1.000000')
       
               # Python versions <= 2.6 switched from 'f' to 'g' formatting for
               # values larger than 1e50.  No longer.
    1:         f = 1.1234e90
    3:         for fmt in 'f', 'F':
                   # don't do a direct equality check, since on some
                   # platforms only the first few digits of dtoa
                   # will be reliable
    2:             result = f.__format__(fmt)
    2:             self.assertEqual(len(result), 98)
    2:             self.assertEqual(result[-7], '.')
    2:             self.assertIn(result[:12], ('112340000000', '112339999999'))
    1:         f = 1.1234e200
    3:         for fmt in 'f', 'F':
    2:             result = f.__format__(fmt)
    2:             self.assertEqual(len(result), 208)
    2:             self.assertEqual(result[-7], '.')
    2:             self.assertIn(result[:12], ('112340000000', '112339999999'))
       
       
    1:         test( 1.0, 'e', '1.000000e+00')
    1:         test(-1.0, 'e', '-1.000000e+00')
    1:         test( 1.0, 'E', '1.000000E+00')
    1:         test(-1.0, 'E', '-1.000000E+00')
    1:         test(1.1234e20, 'e', '1.123400e+20')
    1:         test(1.1234e20, 'E', '1.123400E+20')
       
               # No format code means use g, but must have a decimal
               # and a number after the decimal.  This is tricky, because
               # a totaly empty format specifier means something else.
               # So, just use a sign flag
    1:         test(1e200, '+g', '+1e+200')
    1:         test(1e200, '+', '+1e+200')
    1:         test(1.1e200, '+g', '+1.1e+200')
    1:         test(1.1e200, '+', '+1.1e+200')
       
    1:         test(1.1e200, '+g', '+1.1e+200')
    1:         test(1.1e200, '+', '+1.1e+200')
       
               # 0 padding
    1:         test(1234., '010f', '1234.000000')
    1:         test(1234., '011f', '1234.000000')
    1:         test(1234., '012f', '01234.000000')
    1:         test(-1234., '011f', '-1234.000000')
    1:         test(-1234., '012f', '-1234.000000')
    1:         test(-1234., '013f', '-01234.000000')
    1:         test(-1234.12341234, '013f', '-01234.123412')
    1:         test(-123456.12341234, '011.2f', '-0123456.12')
       
               # issue 5782, commas with no specifier type
    1:         test(1.2, '010,.2', '0,000,001.2')
       
               # 0 padding with commas
    1:         test(1234., '011,f', '1,234.000000')
    1:         test(1234., '012,f', '1,234.000000')
    1:         test(1234., '013,f', '01,234.000000')
    1:         test(-1234., '012,f', '-1,234.000000')
    1:         test(-1234., '013,f', '-1,234.000000')
    1:         test(-1234., '014,f', '-01,234.000000')
    1:         test(-12345., '015,f', '-012,345.000000')
    1:         test(-123456., '016,f', '-0,123,456.000000')
    1:         test(-123456., '017,f', '-0,123,456.000000')
    1:         test(-123456.12341234, '017,f', '-0,123,456.123412')
    1:         test(-123456.12341234, '013,.2f', '-0,123,456.12')
       
                # % formatting
    1:         test(-1.0, '%', '-100.000000%')
       
               # format spec must be string
    1:         self.assertRaises(TypeError, 3.0.__format__, None)
    1:         self.assertRaises(TypeError, 3.0.__format__, 0)
       
               # other format specifiers shouldn't work on floats,
               #  in particular int specifiers
   27:         for format_spec in ([chr(x) for x in range(ord('a'), ord('z')+1)] +
   79:                             [chr(x) for x in range(ord('A'), ord('Z')+1)]):
   52:             if not format_spec in 'eEfFgGn%':
   45:                 self.assertRaises(ValueError, format, 0.0, format_spec)
   45:                 self.assertRaises(ValueError, format, 1.0, format_spec)
   45:                 self.assertRaises(ValueError, format, -1.0, format_spec)
   45:                 self.assertRaises(ValueError, format, 1e100, format_spec)
   45:                 self.assertRaises(ValueError, format, -1e100, format_spec)
   45:                 self.assertRaises(ValueError, format, 1e-100, format_spec)
   45:                 self.assertRaises(ValueError, format, -1e-100, format_spec)
       
               # Alternate formatting is not supported
    1:         self.assertRaises(ValueError, format, 0.0, '#')
    1:         self.assertRaises(ValueError, format, 0.0, '#20f')
       
               # Issue 6902
    1:         test(12345.6, "0<20", '12345.60000000000000')
    1:         test(12345.6, "1<20", '12345.61111111111111')
    1:         test(12345.6, "*<20", '12345.6*************')
    1:         test(12345.6, "0>20", '000000000000012345.6')
    1:         test(12345.6, "1>20", '111111111111112345.6')
    1:         test(12345.6, "*>20", '*************12345.6')
    1:         test(12345.6, "0=20", '000000000000012345.6')
    1:         test(12345.6, "1=20", '111111111111112345.6')
    1:         test(12345.6, "*=20", '*************12345.6')
       
    1:     def test_format_spec_errors(self):
               # int, float, and string all share the same format spec
               # mini-language parser.
       
               # Check that we can't ask for too many digits. This is
               # probably a CPython specific test. It tries to put the width
               # into a C long.
    1:         self.assertRaises(ValueError, format, 0, '1'*10000 + 'd')
       
               # Similar with the precision.
    1:         self.assertRaises(ValueError, format, 0, '.' + '1'*10000 + 'd')
       
               # And may as well test both.
    1:         self.assertRaises(ValueError, format, 0, '1'*1000 + '.' + '1'*10000 + 'd')
       
               # Make sure commas aren't allowed with various type codes
    7:         for code in 'xXobns':
    6:             self.assertRaises(ValueError, format, 0, ',' + code)
       
    1:     def test_internal_sizes(self):
    1:         self.assertGreater(object.__basicsize__, 0)
    1:         self.assertGreater(tuple.__itemsize__, 0)
       
       
    1: def test_main():
    1:     with check_py3k_warnings(
    1:             ("buffer.. not supported", DeprecationWarning),
    1:             ("classic long division", DeprecationWarning)):
    1:         run_unittest(TypesTests)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
