       # Simple test suite for Cookie.py
       
    1: from test.test_support import run_unittest, run_doctest, check_warnings
    1: import unittest
    1: import Cookie
    1: import pickle
       
       
    2: class CookieTests(unittest.TestCase):
           # Currently this only tests SimpleCookie
    1:     def test_basic(self):
               cases = [
    1:             { 'data': 'chips=ahoy; vienna=finger',
    1:               'dict': {'chips':'ahoy', 'vienna':'finger'},
    1:               'repr': "<SimpleCookie: chips='ahoy' vienna='finger'>",
    1:               'output': 'Set-Cookie: chips=ahoy\nSet-Cookie: vienna=finger',
                   },
       
    1:             { 'data': 'keebler="E=mc2; L=\\"Loves\\"; fudge=\\012;"',
    1:               'dict': {'keebler' : 'E=mc2; L="Loves"; fudge=\012;'},
    1:               'repr': '''<SimpleCookie: keebler='E=mc2; L="Loves"; fudge=\\n;'>''',
    1:               'output': 'Set-Cookie: keebler="E=mc2; L=\\"Loves\\"; fudge=\\012;"',
                   },
       
                   # Check illegal cookies that have an '=' char in an unquoted value
    1:             { 'data': 'keebler=E=mc2',
    1:               'dict': {'keebler' : 'E=mc2'},
    1:               'repr': "<SimpleCookie: keebler='E=mc2'>",
    1:               'output': 'Set-Cookie: keebler=E=mc2',
                   },
       
                   # issue22931 - Adding '[' and ']' as valid characters in cookie
                   # values as defined in RFC 6265
    1:             {
    1:                 'data': 'a=b; c=[; d=r; f=h',
    1:                 'dict': {'a':'b', 'c':'[', 'd':'r', 'f':'h'},
    1:                 'repr': "<SimpleCookie: a='b' c='[' d='r' f='h'>",
    1:                 'output': '\n'.join((
                           'Set-Cookie: a=b',
                           'Set-Cookie: c=[',
                           'Set-Cookie: d=r',
    1:                     'Set-Cookie: f=h'
                       ))
                   }
               ]
       
    5:         for case in cases:
    4:             C = Cookie.SimpleCookie()
    4:             C.load(case['data'])
    4:             self.assertEqual(repr(C), case['repr'])
    4:             self.assertEqual(C.output(sep='\n'), case['output'])
   12:             for k, v in sorted(case['dict'].iteritems()):
    8:                 self.assertEqual(C[k].value, v)
       
    1:     def test_load(self):
    1:         C = Cookie.SimpleCookie()
    1:         C.load('Customer="WILE_E_COYOTE"; Version=1; Path=/acme')
       
    1:         self.assertEqual(C['Customer'].value, 'WILE_E_COYOTE')
    1:         self.assertEqual(C['Customer']['version'], '1')
    1:         self.assertEqual(C['Customer']['path'], '/acme')
       
    1:         self.assertEqual(C.output(['path']),
    1:             'Set-Cookie: Customer="WILE_E_COYOTE"; Path=/acme')
    1:         self.assertEqual(C.js_output(), r"""
               <script type="text/javascript">
               <!-- begin hiding
               document.cookie = "Customer=\"WILE_E_COYOTE\"; Path=/acme; Version=1";
               // end hiding -->
               </script>
    1:         """)
    1:         self.assertEqual(C.js_output(['path']), r"""
               <script type="text/javascript">
               <!-- begin hiding
               document.cookie = "Customer=\"WILE_E_COYOTE\"; Path=/acme";
               // end hiding -->
               </script>
    1:         """)
       
               # loading 'expires'
    1:         C = Cookie.SimpleCookie()
    1:         C.load('Customer="W"; expires=Wed, 01 Jan 2010 00:00:00 GMT')
    1:         self.assertEqual(C['Customer']['expires'],
    1:                          'Wed, 01 Jan 2010 00:00:00 GMT')
    1:         C = Cookie.SimpleCookie()
    1:         C.load('Customer="W"; expires=Wed, 01 Jan 98 00:00:00 GMT')
    1:         self.assertEqual(C['Customer']['expires'],
    1:                          'Wed, 01 Jan 98 00:00:00 GMT')
       
    1:     def test_extended_encode(self):
               # Issue 9824: some browsers don't follow the standard; we now
               # encode , and ; to keep them from tripping up.
    1:         C = Cookie.SimpleCookie()
    1:         C['val'] = "some,funky;stuff"
    1:         self.assertEqual(C.output(['val']),
    1:             'Set-Cookie: val="some\\054funky\\073stuff"')
       
    1:     def test_set_secure_httponly_attrs(self):
    1:         C = Cookie.SimpleCookie('Customer="WILE_E_COYOTE"')
    1:         C['Customer']['secure'] = True
    1:         C['Customer']['httponly'] = True
    1:         self.assertEqual(C.output(),
    1:             'Set-Cookie: Customer="WILE_E_COYOTE"; httponly; secure')
       
    1:     def test_secure_httponly_false_if_not_present(self):
    1:         C = Cookie.SimpleCookie()
    1:         C.load('eggs=scrambled; Path=/bacon')
    1:         self.assertFalse(C['eggs']['httponly'])
    1:         self.assertFalse(C['eggs']['secure'])
       
    1:     def test_secure_httponly_true_if_present(self):
               # Issue 16611
    1:         C = Cookie.SimpleCookie()
    1:         C.load('eggs=scrambled; httponly; secure; Path=/bacon')
    1:         self.assertTrue(C['eggs']['httponly'])
    1:         self.assertTrue(C['eggs']['secure'])
       
    1:     def test_secure_httponly_true_if_have_value(self):
               # This isn't really valid, but demonstrates what the current code
               # is expected to do in this case.
    1:         C = Cookie.SimpleCookie()
    1:         C.load('eggs=scrambled; httponly=foo; secure=bar; Path=/bacon')
    1:         self.assertTrue(C['eggs']['httponly'])
    1:         self.assertTrue(C['eggs']['secure'])
               # Here is what it actually does; don't depend on this behavior.  These
               # checks are testing backward compatibility for issue 16611.
    1:         self.assertEqual(C['eggs']['httponly'], 'foo')
    1:         self.assertEqual(C['eggs']['secure'], 'bar')
       
    1:     def test_bad_attrs(self):
               # Issue 16611: make sure we don't break backward compatibility.
    1:         C = Cookie.SimpleCookie()
    1:         C.load('cookie=with; invalid; version; second=cookie;')
    1:         self.assertEqual(C.output(),
    1:             'Set-Cookie: cookie=with\r\nSet-Cookie: second=cookie')
       
    1:     def test_extra_spaces(self):
    1:         C = Cookie.SimpleCookie()
    1:         C.load('eggs  =  scrambled  ;  secure  ;  path  =  bar   ; foo=foo   ')
    1:         self.assertEqual(C.output(),
    1:             'Set-Cookie: eggs=scrambled; Path=bar; secure\r\nSet-Cookie: foo=foo')
       
    1:     def test_quoted_meta(self):
               # Try cookie with quoted meta-data
    1:         C = Cookie.SimpleCookie()
    1:         C.load('Customer="WILE_E_COYOTE"; Version="1"; Path="/acme"')
    1:         self.assertEqual(C['Customer'].value, 'WILE_E_COYOTE')
    1:         self.assertEqual(C['Customer']['version'], '1')
    1:         self.assertEqual(C['Customer']['path'], '/acme')
       
    1:     def test_invalid_cookies(self):
               # Accepting these could be a security issue
    1:         C = Cookie.SimpleCookie()
    5:         for s in (']foo=x', '[foo=x', 'blah]foo=x', 'blah[foo=x'):
    4:             C.load(s)
    4:             self.assertEqual(dict(C), {})
    4:             self.assertEqual(C.output(), '')
       
    1:     def test_pickle(self):
    1:         rawdata = 'Customer="WILE_E_COYOTE"; Path=/acme; Version=1'
    1:         expected_output = 'Set-Cookie: %s' % rawdata
       
    1:         C = Cookie.SimpleCookie()
    1:         C.load(rawdata)
    1:         self.assertEqual(C.output(), expected_output)
       
    4:         for proto in range(pickle.HIGHEST_PROTOCOL + 1):
    3:             C1 = pickle.loads(pickle.dumps(C, protocol=proto))
    3:             self.assertEqual(C1.output(), expected_output)
       
       
    1: def test_main():
    1:     run_unittest(CookieTests)
    1:     if Cookie.__doc__ is not None:
    1:         with check_warnings(('.+Cookie class is insecure; do not use it',
    1:                              DeprecationWarning)):
    1:             run_doctest(Cookie)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
