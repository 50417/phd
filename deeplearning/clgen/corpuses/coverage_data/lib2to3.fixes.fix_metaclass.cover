       """Fixer for __metaclass__ = X -> (metaclass=X) methods.
       
          The various forms of classef (inherits nothing, inherits once, inherints
          many) don't parse the same in the CST so we look at ALL classes for
          a __metaclass__ and if we find one normalize the inherits to all be
          an arglist.
       
          For one-liner classes ('class X: pass') there is no indent/dedent so
          we normalize those into having a suite.
       
          Moving the __metaclass__ into the classdef can also cause the class
          body to be empty so there is some special casing for that as well.
       
          This fixer also tries very hard to keep original indenting and spacing
          in all those corner cases.
       
    1: """
       # Author: Jack Diederich
       
       # Local imports
    1: from .. import fixer_base
    1: from ..pygram import token
    1: from ..fixer_util import Name, syms, Node, Leaf
       
       
    1: def has_metaclass(parent):
           """ we have to check the cls_node without changing it.
               There are two possibilities:
                 1)  clsdef => suite => simple_stmt => expr_stmt => Leaf('__meta')
                 2)  clsdef => simple_stmt => expr_stmt => Leaf('__meta')
           """
  338:     for node in parent.children:
  317:         if node.type == syms.suite:
   20:             return has_metaclass(node)
  297:         elif node.type == syms.simple_stmt and node.children:
   28:             expr_node = node.children[0]
   28:             if expr_node.type == syms.expr_stmt and expr_node.children:
   15:                 left_side = expr_node.children[0]
   15:                 if isinstance(left_side, Leaf) and \
   14:                         left_side.value == '__metaclass__':
   13:                     return True
   21:     return False
       
       
    1: def fixup_parse_tree(cls_node):
           """ one-line classes don't get a suite in the parse tree so we add
               one to normalize the tree
           """
   79:     for node in cls_node.children:
   77:         if node.type == syms.suite:
                   # already in the preferred format, do nothing
   11:             return
       
           # !%@#! oneliners have no suite node, we have to fake one up
   12:     for i, node in enumerate(cls_node.children):
   12:         if node.type == token.COLON:
    2:             break
           else:
>>>>>>         raise ValueError("No class suite and no ':'!")
       
           # move everything into a suite node
    2:     suite = Node(syms.suite, [])
    4:     while cls_node.children[i+1:]:
    2:         move_node = cls_node.children[i+1]
    2:         suite.append_child(move_node.clone())
    2:         move_node.remove()
    2:     cls_node.append_child(suite)
    2:     node = suite
       
       
    1: def fixup_simple_stmt(parent, i, stmt_node):
           """ if there is a semi-colon all the parts count as part of the same
               simple_stmt.  We just want the __metaclass__ part so we move
               everything after the semi-colon into its own simple_stmt node
           """
   41:     for semi_ind, node in enumerate(stmt_node.children):
   28:         if node.type == token.SEMI: # *sigh*
    1:             break
           else:
   13:         return
       
    1:     node.remove() # kill the semicolon
    1:     new_expr = Node(syms.expr_stmt, [])
    1:     new_stmt = Node(syms.simple_stmt, [new_expr])
    5:     while stmt_node.children[semi_ind:]:
    4:         move_node = stmt_node.children[semi_ind]
    4:         new_expr.append_child(move_node.clone())
    4:         move_node.remove()
    1:     parent.insert_child(i, new_stmt)
    1:     new_leaf1 = new_stmt.children[0].children[0]
    1:     old_leaf1 = stmt_node.children[0].children[0]
    1:     new_leaf1.prefix = old_leaf1.prefix
       
       
    1: def remove_trailing_newline(node):
   14:     if node.children and node.children[-1].type == token.NEWLINE:
   13:         node.children[-1].remove()
       
       
    1: def find_metas(cls_node):
           # find the suite node (Mmm, sweet nodes)
   77:     for node in cls_node.children:
   77:         if node.type == syms.suite:
   13:             break
           else:
>>>>>>         raise ValueError("No class suite!")
       
           # look for simple_stmt[ expr_stmt[ Leaf('__metaclass__') ] ]
   66:     for i, simple_node in list(enumerate(node.children)):
   53:         if simple_node.type == syms.simple_stmt and simple_node.children:
   20:             expr_node = simple_node.children[0]
   20:             if expr_node.type == syms.expr_stmt and expr_node.children:
                       # Check if the expr_node is a simple assignment.
   19:                 left_node = expr_node.children[0]
   19:                 if isinstance(left_node, Leaf) and \
   18:                         left_node.value == u'__metaclass__':
                           # We found an assignment to __metaclass__.
   14:                     fixup_simple_stmt(node, i, simple_node)
   14:                     remove_trailing_newline(simple_node)
   14:                     yield (node, i, simple_node)
       
       
    1: def fixup_indent(suite):
           """ If an INDENT is followed by a thing with a prefix then nuke the prefix
               Otherwise we get in trouble when removing __metaclass__ at suite start
           """
   13:     kids = suite.children[::-1]
           # find the first indent
   24:     while kids:
   22:         node = kids.pop()
   22:         if node.type == token.INDENT:
   11:             break
       
           # find the first Leaf
   32:     while kids:
   26:         node = kids.pop()
   26:         if isinstance(node, Leaf) and node.type != token.DEDENT:
    7:             if node.prefix:
    5:                 node.prefix = u''
    7:             return
               else:
   19:             kids.extend(node.children[::-1])
       
       
    2: class FixMetaclass(fixer_base.BaseFix):
    1:     BM_compatible = True
       
           PATTERN = """
           classdef<any*>
    1:     """
       
    1:     def transform(self, node, results):
   34:         if not has_metaclass(node):
   21:             return
       
   13:         fixup_parse_tree(node)
       
               # find metaclasses, keep the last one
   13:         last_metaclass = None
   27:         for suite, i, stmt in find_metas(node):
   14:             last_metaclass = stmt
   14:             stmt.remove()
       
   13:         text_type = node.children[0].type # always Leaf(nnn, 'class')
       
               # figure out what kind of classdef we have
   13:         if len(node.children) == 7:
                   # Node(classdef, ['class', 'name', '(', arglist, ')', ':', suite])
                   #                 0        1       2    3        4    5    6
    7:             if node.children[3].type == syms.arglist:
    3:                 arglist = node.children[3]
                   # Node(classdef, ['class', 'name', '(', 'Parent', ')', ':', suite])
                   else:
    4:                 parent = node.children[3].clone()
    4:                 arglist = Node(syms.arglist, [parent])
    4:                 node.set_child(3, arglist)
    6:         elif len(node.children) == 6:
                   # Node(classdef, ['class', 'name', '(',  ')', ':', suite])
                   #                 0        1       2     3    4    5
    2:             arglist = Node(syms.arglist, [])
    2:             node.insert_child(3, arglist)
    4:         elif len(node.children) == 4:
                   # Node(classdef, ['class', 'name', ':', suite])
                   #                 0        1       2    3
    4:             arglist = Node(syms.arglist, [])
    4:             node.insert_child(2, Leaf(token.RPAR, u')'))
    4:             node.insert_child(2, arglist)
    4:             node.insert_child(2, Leaf(token.LPAR, u'('))
               else:
>>>>>>             raise ValueError("Unexpected class definition")
       
               # now stick the metaclass in the arglist
   13:         meta_txt = last_metaclass.children[0].children[0]
   13:         meta_txt.value = 'metaclass'
   13:         orig_meta_prefix = meta_txt.prefix
       
   13:         if arglist.children:
    7:             arglist.append_child(Leaf(token.COMMA, u','))
    7:             meta_txt.prefix = u' '
               else:
    6:             meta_txt.prefix = u''
       
               # compact the expression "metaclass = Meta" -> "metaclass=Meta"
   13:         expr_stmt = last_metaclass.children[0]
   13:         assert expr_stmt.type == syms.expr_stmt
   13:         expr_stmt.children[1].prefix = u''
   13:         expr_stmt.children[2].prefix = u''
       
   13:         arglist.append_child(last_metaclass)
       
   13:         fixup_indent(suite)
       
               # check for empty suite
   13:         if not suite.children:
                   # one-liner that was just __metaclass_
    2:             suite.remove()
    2:             pass_leaf = Leaf(text_type, u'pass')
    2:             pass_leaf.prefix = orig_meta_prefix
    2:             node.append_child(pass_leaf)
    2:             node.append_child(Leaf(token.NEWLINE, u'\n'))
       
   11:         elif len(suite.children) > 1 and \
   11:                  (suite.children[-2].type == token.INDENT and
    4:                   suite.children[-1].type == token.DEDENT):
                   # there was only one line in the class body and it was __metaclass__
    4:             pass_leaf = Leaf(text_type, u'pass')
    4:             suite.insert_child(-1, pass_leaf)
    4:             suite.insert_child(-1, Leaf(token.NEWLINE, u'\n'))
