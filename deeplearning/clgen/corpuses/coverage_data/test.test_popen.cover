       """Basic tests for os.popen()
       
         Particularly useful for platforms that fake popen.
    1: """
       
    1: import unittest
    1: from test import test_support
    1: import os, sys
       
       # Test that command-lines get down as we expect.
       # To do this we execute:
       #    python -c "import sys;print sys.argv" {rest_of_commandline}
       # This results in Python being spawned and printing the sys.argv list.
       # We can then eval() the result of this, and see what each argv was.
    1: python = sys.executable
       
    2: class PopenTest(unittest.TestCase):
    1:     def _do_test_commandline(self, cmdline, expected):
    3:         cmd = '%s -c "import sys;print sys.argv" %s' % (python, cmdline)
    3:         data = os.popen(cmd).read() + '\n'
    3:         got = eval(data)[1:] # strip off argv[0]
    3:         self.assertEqual(got, expected)
       
    1:     def test_popen(self):
    1:         self.assertRaises(TypeError, os.popen)
    1:         self._do_test_commandline(
    1:             "foo bar",
    1:             ["foo", "bar"]
               )
    1:         self._do_test_commandline(
    1:             'foo "spam and eggs" "silly walk"',
    1:             ["foo", "spam and eggs", "silly walk"]
               )
    1:         self._do_test_commandline(
    1:             'foo "a \\"quoted\\" arg" bar',
    1:             ["foo", 'a "quoted" arg', "bar"]
               )
    1:         test_support.reap_children()
       
    1:     def test_return_code(self):
    1:         self.assertEqual(os.popen("exit 0").close(), None)
    1:         if os.name == 'nt':
>>>>>>             self.assertEqual(os.popen("exit 42").close(), 42)
               else:
    1:             self.assertEqual(os.popen("exit 42").close(), 42 << 8)
       
    1: def test_main():
    1:     test_support.run_unittest(PopenTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
