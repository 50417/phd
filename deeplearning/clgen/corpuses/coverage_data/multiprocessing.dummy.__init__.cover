       #
       # Support for the API of the multiprocessing package using threads
       #
       # multiprocessing/dummy/__init__.py
       #
       # Copyright (c) 2006-2008, R Oudkerk
       # All rights reserved.
       #
       # Redistribution and use in source and binary forms, with or without
       # modification, are permitted provided that the following conditions
       # are met:
       #
       # 1. Redistributions of source code must retain the above copyright
       #    notice, this list of conditions and the following disclaimer.
       # 2. Redistributions in binary form must reproduce the above copyright
       #    notice, this list of conditions and the following disclaimer in the
       #    documentation and/or other materials provided with the distribution.
       # 3. Neither the name of author nor the names of any contributors may be
       #    used to endorse or promote products derived from this software
       #    without specific prior written permission.
       #
       # THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
       # ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
       # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
       # ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
       # FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
       # DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
       # OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
       # HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
       # LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
       # OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
       # SUCH DAMAGE.
       #
       
       __all__ = [
    1:     'Process', 'current_process', 'active_children', 'freeze_support',
    1:     'Lock', 'RLock', 'Semaphore', 'BoundedSemaphore', 'Condition',
    1:     'Event', 'Queue', 'Manager', 'Pipe', 'Pool', 'JoinableQueue'
           ]
       
       #
       # Imports
       #
       
    1: import threading
    1: import sys
    1: import weakref
    1: import array
    1: import itertools
       
    1: from multiprocessing import TimeoutError, cpu_count
    1: from multiprocessing.dummy.connection import Pipe
    1: from threading import Lock, RLock, Semaphore, BoundedSemaphore
    1: from threading import Event
    1: from Queue import Queue
       
       #
       #
       #
       
    2: class DummyProcess(threading.Thread):
       
    1:     def __init__(self, group=None, target=None, name=None, args=(), kwargs={}):
   38:         threading.Thread.__init__(self, group, target, name, args, kwargs)
   38:         self._pid = None
   38:         self._children = weakref.WeakKeyDictionary()
   38:         self._start_called = False
   38:         self._parent = current_process()
       
    1:     def start(self):
   38:         assert self._parent is current_process()
   38:         self._start_called = True
   38:         if hasattr(self._parent, '_children'):
   38:             self._parent._children[self] = None
   38:         threading.Thread.start(self)
       
    1:     @property
           def exitcode(self):
 1104:         if self._start_called and not self.is_alive():
    1:             return 0
               else:
 1103:             return None
       
       #
       #
       #
       
    2: class Condition(threading._Condition):
    1:     notify_all = threading._Condition.notify_all.im_func
       
       #
       #
       #
       
    1: Process = DummyProcess
    1: current_process = threading.current_thread
    1: current_process()._children = weakref.WeakKeyDictionary()
       
    1: def active_children():
    8:     children = current_process()._children
   44:     for p in list(children):
   36:         if not p.is_alive():
    2:             children.pop(p, None)
    8:     return list(children)
       
    1: def freeze_support():
>>>>>>     pass
       
       #
       #
       #
       
    2: class Namespace(object):
    1:     def __init__(self, **kwds):
>>>>>>         self.__dict__.update(kwds)
    1:     def __repr__(self):
>>>>>>         items = self.__dict__.items()
>>>>>>         temp = []
>>>>>>         for name, value in items:
>>>>>>             if not name.startswith('_'):
>>>>>>                 temp.append('%s=%r' % (name, value))
>>>>>>         temp.sort()
>>>>>>         return 'Namespace(%s)' % str.join(', ', temp)
       
    1: dict = dict
    1: list = list
       
    1: def Array(typecode, sequence, lock=True):
>>>>>>     return array.array(typecode, sequence)
       
    2: class Value(object):
    1:     def __init__(self, typecode, value, lock=True):
>>>>>>         self._typecode = typecode
>>>>>>         self._value = value
    1:     def _get(self):
>>>>>>         return self._value
    1:     def _set(self, value):
>>>>>>         self._value = value
    1:     value = property(_get, _set)
    1:     def __repr__(self):
>>>>>>         return '<%s(%r, %r)>'%(type(self).__name__,self._typecode,self._value)
       
    1: def Manager():
>>>>>>     return sys.modules[__name__]
       
    1: def shutdown():
>>>>>>     pass
       
    1: def Pool(processes=None, initializer=None, initargs=()):
    3:     from multiprocessing.pool import ThreadPool
    3:     return ThreadPool(processes, initializer, initargs)
       
    1: JoinableQueue = Queue
