       """Fixer for generator.throw(E, V, T).
       
       g.throw(E)       -> g.throw(E)
       g.throw(E, V)    -> g.throw(E(V))
       g.throw(E, V, T) -> g.throw(E(V).with_traceback(T))
       
    1: g.throw("foo"[, V[, T]]) will warn about string exceptions."""
       # Author: Collin Winter
       
       # Local imports
    1: from .. import pytree
    1: from ..pgen2 import token
    1: from .. import fixer_base
    1: from ..fixer_util import Name, Call, ArgList, Attr, is_tuple
       
    2: class FixThrow(fixer_base.BaseFix):
    1:     BM_compatible = True
           PATTERN = """
           power< any trailer< '.' 'throw' >
                  trailer< '(' args=arglist< exc=any ',' val=any [',' tb=any] > ')' >
           >
           |
           power< any trailer< '.' 'throw' > trailer< '(' exc=any ')' > >
    1:     """
       
    1:     def transform(self, node, results):
   36:         syms = self.syms
       
   36:         exc = results["exc"].clone()
   36:         if exc.type is token.STRING:
    6:             self.cannot_convert(node, "Python 3 does not support string exceptions")
    6:             return
       
               # Leave "g.throw(E)" alone
   30:         val = results.get(u"val")
   30:         if val is None:
   18:             return
       
   12:         val = val.clone()
   12:         if is_tuple(val):
    6:             args = [c.clone() for c in val.children[1:-1]]
               else:
    9:             val.prefix = u""
    9:             args = [val]
       
   12:         throw_args = results["args"]
       
   12:         if "tb" in results:
    8:             tb = results["tb"].clone()
    8:             tb.prefix = u""
       
    8:             e = Call(exc, args)
    8:             with_tb = Attr(e, Name(u'with_traceback')) + [ArgList([tb])]
    8:             throw_args.replace(pytree.Node(syms.power, with_tb))
               else:
    4:             throw_args.replace(Call(exc, args))
