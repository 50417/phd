    1: import sys
    1: from ctypes import *
       
    1: _array_type = type(Array)
       
    1: def _other_endian(typ):
           """Return the type with the 'other' byte order.  Simple types like
           c_int and so on already have __ctype_be__ and __ctype_le__
           attributes which contain the types, for more complicated types
           arrays and structures are supported.
           """
           # check _OTHER_ENDIAN attribute (present if typ is primitive type)
   66:     if hasattr(typ, _OTHER_ENDIAN):
   58:         return getattr(typ, _OTHER_ENDIAN)
           # if typ is array
    8:     if isinstance(typ, _array_type):
    3:         return _other_endian(typ._type_) * typ._length_
           # if typ is structure
    5:     if issubclass(typ, Structure):
    2:         return typ
    3:     raise TypeError("This type does not support other endian: %s" % typ)
       
    2: class _swapped_meta(type(Structure)):
    1:     def __setattr__(self, attrname, value):
   83:         if attrname == "_fields_":
   23:             fields = []
   83:             for desc in value:
   63:                 name = desc[0]
   63:                 typ = desc[1]
   63:                 rest = desc[2:]
   63:                 fields.append((name, _other_endian(typ)) + rest)
   20:             value = fields
   80:         super(_swapped_meta, self).__setattr__(attrname, value)
       
       ################################################################
       
       # Note: The Structure metaclass checks for the *presence* (not the
       # value!) of a _swapped_bytes_ attribute to determine the bit order in
       # structures containing bit fields.
       
    1: if sys.byteorder == "little":
    1:     _OTHER_ENDIAN = "__ctype_be__"
       
    1:     LittleEndianStructure = Structure
       
    2:     class BigEndianStructure(Structure):
    1:         """Structure with big endian byte order"""
    1:         __metaclass__ = _swapped_meta
    1:         _swappedbytes_ = None
       
>>>>>> elif sys.byteorder == "big":
>>>>>>     _OTHER_ENDIAN = "__ctype_le__"
       
>>>>>>     BigEndianStructure = Structure
>>>>>>     class LittleEndianStructure(Structure):
               """Structure with little endian byte order"""
>>>>>>         __metaclass__ = _swapped_meta
>>>>>>         _swappedbytes_ = None
       
       else:
>>>>>>     raise RuntimeError("Invalid byteorder")
