       # Copyright 2006 Google, Inc. All Rights Reserved.
       # Licensed to PSF under a Contributor Agreement.
       
       """Fixer for apply().
       
    1: This converts apply(func, v, k) into (func)(*v, **k)."""
       
       # Local imports
    1: from .. import pytree
    1: from ..pgen2 import token
    1: from .. import fixer_base
    1: from ..fixer_util import Call, Comma, parenthesize
       
    2: class FixApply(fixer_base.BaseFix):
    1:     BM_compatible = True
       
           PATTERN = """
           power< 'apply'
               trailer<
                   '('
                   arglist<
                       (not argument<NAME '=' any>) func=any ','
                       (not argument<NAME '=' any>) args=any [','
                       (not argument<NAME '=' any>) kwds=any] [',']
                   >
                   ')'
               >
           >
    1:     """
       
    1:     def transform(self, node, results):
   19:         syms = self.syms
   19:         assert results
   19:         func = results["func"]
   19:         args = results["args"]
   19:         kwds = results.get("kwds")
               # I feel like we should be able to express this logic in the
               # PATTERN above but I don't know how to do it so...
   19:         if args:
   19:             if args.type == self.syms.star_expr:
    2:                 return  # Make no change.
   17:             if (args.type == self.syms.argument and
    1:                 args.children[0].value == '**'):
    1:                 return  # Make no change.
   16:         if kwds and (kwds.type == self.syms.argument and
>>>>>>                      kwds.children[0].value == '**'):
>>>>>>             return  # Make no change.
   16:         prefix = node.prefix
   16:         func = func.clone()
   16:         if (func.type not in (token.NAME, syms.atom) and
    8:             (func.type != syms.power or
    6:              func.children[-2].type == token.DOUBLESTAR)):
                   # Need to parenthesize
    3:             func = parenthesize(func)
   16:         func.prefix = ""
   16:         args = args.clone()
   16:         args.prefix = ""
   16:         if kwds is not None:
    6:             kwds = kwds.clone()
    6:             kwds.prefix = ""
   16:         l_newargs = [pytree.Leaf(token.STAR, u"*"), args]
   16:         if kwds is not None:
    6:             l_newargs.extend([Comma(),
    6:                               pytree.Leaf(token.DOUBLESTAR, u"**"),
    6:                               kwds])
    6:             l_newargs[-2].prefix = u" " # that's the ** token
               # XXX Sometimes we could be cleverer, e.g. apply(f, (x, y) + t)
               # can be translated into f(x, y, *t) instead of f(*(x, y) + t)
               #new = pytree.Node(syms.power, (func, ArgList(l_newargs)))
   16:         return Call(func, l_newargs, prefix=prefix)
