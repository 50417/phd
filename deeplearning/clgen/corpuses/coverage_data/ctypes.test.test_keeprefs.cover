    1: from ctypes import *
    1: import unittest
       
    2: class SimpleTestCase(unittest.TestCase):
    1:     def test_cint(self):
    1:         x = c_int()
    1:         self.assertEqual(x._objects, None)
    1:         x.value = 42
    1:         self.assertEqual(x._objects, None)
    1:         x = c_int(99)
    1:         self.assertEqual(x._objects, None)
       
    1:     def test_ccharp(self):
    1:         x = c_char_p()
    1:         self.assertEqual(x._objects, None)
    1:         x.value = "abc"
    1:         self.assertEqual(x._objects, "abc")
    1:         x = c_char_p("spam")
    1:         self.assertEqual(x._objects, "spam")
       
    2: class StructureTestCase(unittest.TestCase):
    1:     def test_cint_struct(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_int),
    1:                         ("b", c_int)]
       
    1:         x = X()
    1:         self.assertEqual(x._objects, None)
    1:         x.a = 42
    1:         x.b = 99
    1:         self.assertEqual(x._objects, None)
       
    1:     def test_ccharp_struct(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_char_p),
    1:                         ("b", c_char_p)]
    1:         x = X()
    1:         self.assertEqual(x._objects, None)
       
    1:         x.a = "spam"
    1:         x.b = "foo"
    1:         self.assertEqual(x._objects, {"0": "spam", "1": "foo"})
       
    1:     def test_struct_struct(self):
    2:         class POINT(Structure):
    1:             _fields_ = [("x", c_int), ("y", c_int)]
    2:         class RECT(Structure):
    1:             _fields_ = [("ul", POINT), ("lr", POINT)]
       
    1:         r = RECT()
    1:         r.ul.x = 0
    1:         r.ul.y = 1
    1:         r.lr.x = 2
    1:         r.lr.y = 3
    1:         self.assertEqual(r._objects, None)
       
    1:         r = RECT()
    1:         pt = POINT(1, 2)
    1:         r.ul = pt
    1:         self.assertEqual(r._objects, {'0': {}})
    1:         r.ul.x = 22
    1:         r.ul.y = 44
    1:         self.assertEqual(r._objects, {'0': {}})
    1:         r.lr = POINT()
    1:         self.assertEqual(r._objects, {'0': {}, '1': {}})
       
    2: class ArrayTestCase(unittest.TestCase):
    1:     def test_cint_array(self):
    1:         INTARR = c_int * 3
       
    1:         ia = INTARR()
    1:         self.assertEqual(ia._objects, None)
    1:         ia[0] = 1
    1:         ia[1] = 2
    1:         ia[2] = 3
    1:         self.assertEqual(ia._objects, None)
       
    2:         class X(Structure):
    1:             _fields_ = [("x", c_int),
    1:                         ("a", INTARR)]
       
    1:         x = X()
    1:         x.x = 1000
    1:         x.a[0] = 42
    1:         x.a[1] = 96
    1:         self.assertEqual(x._objects, None)
    1:         x.a = ia
    1:         self.assertEqual(x._objects, {'1': {}})
       
    2: class PointerTestCase(unittest.TestCase):
    1:     def test_p_cint(self):
    1:         i = c_int(42)
    1:         x = pointer(i)
    1:         self.assertEqual(x._objects, {'1': i})
       
    2: class DeletePointerTestCase(unittest.TestCase):
    1:     @unittest.skip('test disabled')
           def test_X(self):
>>>>>>         class X(Structure):
>>>>>>             _fields_ = [("p", POINTER(c_char_p))]
>>>>>>         x = X()
>>>>>>         i = c_char_p("abc def")
>>>>>>         from sys import getrefcount as grc
>>>>>>         print "2?", grc(i)
>>>>>>         x.p = pointer(i)
>>>>>>         print "3?", grc(i)
>>>>>>         for i in range(320):
>>>>>>             c_int(99)
>>>>>>             x.p[0]
>>>>>>         print x.p[0]
       ##        del x
       ##        print "2?", grc(i)
       ##        del i
>>>>>>         import gc
>>>>>>         gc.collect()
>>>>>>         for i in range(320):
>>>>>>             c_int(99)
>>>>>>             x.p[0]
>>>>>>         print x.p[0]
>>>>>>         print x.p.contents
       ##        print x._objects
       
>>>>>>         x.p[0] = "spam spam"
       ##        print x.p[0]
>>>>>>         print "+" * 42
>>>>>>         print x._objects
       
    2: class PointerToStructure(unittest.TestCase):
    1:     def test(self):
    2:         class POINT(Structure):
    1:             _fields_ = [("x", c_int), ("y", c_int)]
    2:         class RECT(Structure):
    1:             _fields_ = [("a", POINTER(POINT)),
    1:                         ("b", POINTER(POINT))]
    1:         r = RECT()
    1:         p1 = POINT(1, 2)
       
    1:         r.a = pointer(p1)
    1:         r.b = pointer(p1)
       ##        from pprint import pprint as pp
       ##        pp(p1._objects)
       ##        pp(r._objects)
       
    1:         r.a[0].x = 42
    1:         r.a[0].y = 99
       
               # to avoid leaking when tests are run several times
               # clean up the types left in the cache.
    1:         from ctypes import _pointer_type_cache
    1:         del _pointer_type_cache[POINT]
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
