       # Copyright 2006 Georg Brandl.
       # Licensed to PSF under a Contributor Agreement.
       
       """Fixer for intern().
       
    1: intern(s) -> sys.intern(s)"""
       
       # Local imports
    1: from .. import pytree
    1: from .. import fixer_base
    1: from ..fixer_util import Name, Attr, touch_import
       
       
    2: class FixIntern(fixer_base.BaseFix):
    1:     BM_compatible = True
    1:     order = "pre"
       
           PATTERN = """
           power< 'intern'
                  trailer< lpar='('
                           ( not(arglist | argument<any '=' any>) obj=any
                             | obj=arglist<(not argument<any '=' any>) any ','> )
                           rpar=')' >
                  after=any*
           >
    1:     """
       
    1:     def transform(self, node, results):
    8:         if results:
                   # I feel like we should be able to express this logic in the
                   # PATTERN above but I don't know how to do it so...
    8:             obj = results['obj']
    8:             if obj:
    8:                 if obj.type == self.syms.star_expr:
    1:                     return  # Make no change.
    7:                 if (obj.type == self.syms.argument and
    1:                     obj.children[0].value == '**'):
    1:                     return  # Make no change.
    6:         syms = self.syms
    6:         obj = results["obj"].clone()
    6:         if obj.type == syms.arglist:
    2:             newarglist = obj.clone()
               else:
    4:             newarglist = pytree.Node(syms.arglist, [obj.clone()])
    6:         after = results["after"]
    6:         if after:
    3:             after = [n.clone() for n in after]
    6:         new = pytree.Node(syms.power,
                                 Attr(Name(u"sys"), Name(u"intern")) +
                                 [pytree.Node(syms.trailer,
                                              [results["lpar"].clone(),
                                               newarglist,
    6:                                         results["rpar"].clone()])] + after)
    6:         new.prefix = node.prefix
    6:         touch_import(None, u'sys', node)
    6:         return new
