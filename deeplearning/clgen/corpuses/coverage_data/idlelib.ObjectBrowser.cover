       # XXX TO DO:
       # - popup menu
       # - support partial or total redisplay
       # - more doc strings
       # - tooltips
       
       # object browser
       
       # XXX TO DO:
       # - for classes/modules, add "open source" to object browser
       
    1: import re
       
    1: from idlelib.TreeWidget import TreeItem, TreeNode, ScrolledCanvas
       
    1: from repr import Repr
       
    1: myrepr = Repr()
    1: myrepr.maxstring = 100
    1: myrepr.maxother = 100
       
    2: class ObjectTreeItem(TreeItem):
    1:     def __init__(self, labeltext, object, setfunction=None):
>>>>>>         self.labeltext = labeltext
>>>>>>         self.object = object
>>>>>>         self.setfunction = setfunction
    1:     def GetLabelText(self):
>>>>>>         return self.labeltext
    1:     def GetText(self):
>>>>>>         return myrepr.repr(self.object)
    1:     def GetIconName(self):
>>>>>>         if not self.IsExpandable():
>>>>>>             return "python"
    1:     def IsEditable(self):
>>>>>>         return self.setfunction is not None
    1:     def SetText(self, text):
>>>>>>         try:
>>>>>>             value = eval(text)
>>>>>>             self.setfunction(value)
>>>>>>         except:
>>>>>>             pass
               else:
>>>>>>             self.object = value
    1:     def IsExpandable(self):
>>>>>>         return not not dir(self.object)
    1:     def GetSubList(self):
>>>>>>         keys = dir(self.object)
>>>>>>         sublist = []
>>>>>>         for key in keys:
>>>>>>             try:
>>>>>>                 value = getattr(self.object, key)
>>>>>>             except AttributeError:
>>>>>>                 continue
>>>>>>             item = make_objecttreeitem(
>>>>>>                 str(key) + " =",
>>>>>>                 value,
>>>>>>                 lambda value, key=key, object=self.object:
>>>>>>                     setattr(object, key, value))
>>>>>>             sublist.append(item)
>>>>>>         return sublist
       
    2: class InstanceTreeItem(ObjectTreeItem):
    1:     def IsExpandable(self):
>>>>>>         return True
    1:     def GetSubList(self):
>>>>>>         sublist = ObjectTreeItem.GetSubList(self)
>>>>>>         sublist.insert(0,
>>>>>>             make_objecttreeitem("__class__ =", self.object.__class__))
>>>>>>         return sublist
       
    2: class ClassTreeItem(ObjectTreeItem):
    1:     def IsExpandable(self):
>>>>>>         return True
    1:     def GetSubList(self):
>>>>>>         sublist = ObjectTreeItem.GetSubList(self)
>>>>>>         if len(self.object.__bases__) == 1:
>>>>>>             item = make_objecttreeitem("__bases__[0] =",
>>>>>>                 self.object.__bases__[0])
               else:
>>>>>>             item = make_objecttreeitem("__bases__ =", self.object.__bases__)
>>>>>>         sublist.insert(0, item)
>>>>>>         return sublist
       
    2: class AtomicObjectTreeItem(ObjectTreeItem):
    1:     def IsExpandable(self):
>>>>>>         return 0
       
    2: class SequenceTreeItem(ObjectTreeItem):
    1:     def IsExpandable(self):
>>>>>>         return len(self.object) > 0
    1:     def keys(self):
>>>>>>         return range(len(self.object))
    1:     def GetSubList(self):
>>>>>>         sublist = []
>>>>>>         for key in self.keys():
>>>>>>             try:
>>>>>>                 value = self.object[key]
>>>>>>             except KeyError:
>>>>>>                 continue
>>>>>>             def setfunction(value, key=key, object=self.object):
>>>>>>                 object[key] = value
>>>>>>             item = make_objecttreeitem("%r:" % (key,), value, setfunction)
>>>>>>             sublist.append(item)
>>>>>>         return sublist
       
    2: class DictTreeItem(SequenceTreeItem):
    1:     def keys(self):
>>>>>>         keys = self.object.keys()
>>>>>>         try:
>>>>>>             keys.sort()
>>>>>>         except:
>>>>>>             pass
>>>>>>         return keys
       
    1: from types import *
       
    1: dispatch = {
    1:     IntType: AtomicObjectTreeItem,
    1:     LongType: AtomicObjectTreeItem,
    1:     FloatType: AtomicObjectTreeItem,
    1:     StringType: AtomicObjectTreeItem,
    1:     TupleType: SequenceTreeItem,
    1:     ListType: SequenceTreeItem,
    1:     DictType: DictTreeItem,
    1:     InstanceType: InstanceTreeItem,
    1:     ClassType: ClassTreeItem,
       }
       
    1: def make_objecttreeitem(labeltext, object, setfunction=None):
>>>>>>     t = type(object)
>>>>>>     if t in dispatch:
>>>>>>         c = dispatch[t]
           else:
>>>>>>         c = ObjectTreeItem
>>>>>>     return c(labeltext, object, setfunction)
       
       
    1: def _object_browser(parent):
>>>>>>     import sys
>>>>>>     from Tkinter import Tk
>>>>>>     root = Tk()
>>>>>>     root.title("Test ObjectBrowser")
>>>>>>     width, height, x, y = list(map(int, re.split('[x+]', parent.geometry())))
>>>>>>     root.geometry("+%d+%d"%(x, y + 150))
>>>>>>     root.configure(bd=0, bg="yellow")
>>>>>>     root.focus_set()
>>>>>>     sc = ScrolledCanvas(root, bg="white", highlightthickness=0, takefocus=1)
>>>>>>     sc.frame.pack(expand=1, fill="both")
>>>>>>     item = make_objecttreeitem("sys", sys)
>>>>>>     node = TreeNode(sc.canvas, None, item)
>>>>>>     node.update()
>>>>>>     root.mainloop()
       
    1: if __name__ == '__main__':
>>>>>>     from idlelib.idle_test.htest import run
>>>>>>     run(_object_browser)
