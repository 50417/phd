       # -*- encoding: utf8 -*-
    1: """Tests for distutils.command.check."""
    1: import textwrap
    1: import unittest
    1: from test.test_support import run_unittest
       
    1: from distutils.command.check import check, HAS_DOCUTILS
    1: from distutils.tests import support
    1: from distutils.errors import DistutilsSetupError
       
    2: class CheckTestCase(support.LoggingSilencer,
    1:                     support.TempdirManager,
    1:                     unittest.TestCase):
       
    1:     def _run(self, metadata=None, **options):
    6:         if metadata is None:
    1:             metadata = {}
    6:         pkg_info, dist = self.create_dist(**metadata)
    6:         cmd = check(dist)
    6:         cmd.initialize_options()
   10:         for name, value in options.items():
    4:             setattr(cmd, name, value)
    6:         cmd.ensure_finalized()
    6:         cmd.run()
    4:         return cmd
       
    1:     def test_check_metadata(self):
               # let's run the command with no metadata at all
               # by default, check is checking the metadata
               # should have some warnings
    1:         cmd = self._run()
    1:         self.assertEqual(cmd._warnings, 2)
       
               # now let's add the required fields
               # and run it again, to make sure we don't get
               # any warning anymore
    1:         metadata = {'url': 'xxx', 'author': 'xxx',
    1:                     'author_email': 'xxx',
    1:                     'name': 'xxx', 'version': 'xxx'}
    1:         cmd = self._run(metadata)
    1:         self.assertEqual(cmd._warnings, 0)
       
               # now with the strict mode, we should
               # get an error if there are missing metadata
    1:         self.assertRaises(DistutilsSetupError, self._run, {}, **{'strict': 1})
       
               # and of course, no error when all metadata are present
    1:         cmd = self._run(metadata, strict=1)
    1:         self.assertEqual(cmd._warnings, 0)
       
               # now a test with Unicode entries
    1:         metadata = {'url': u'xxx', 'author': u'\u00c9ric',
    1:                     'author_email': u'xxx', u'name': 'xxx',
    1:                     'version': u'xxx',
    1:                     'description': u'Something about esszet \u00df',
    1:                     'long_description': u'More things about esszet \u00df'}
    1:         cmd = self._run(metadata)
    1:         self.assertEqual(cmd._warnings, 0)
       
    1:     @unittest.skipUnless(HAS_DOCUTILS, "won't test without docutils")
           def test_check_document(self):
>>>>>>         pkg_info, dist = self.create_dist()
>>>>>>         cmd = check(dist)
       
               # let's see if it detects broken rest
>>>>>>         broken_rest = 'title\n===\n\ntest'
>>>>>>         msgs = cmd._check_rst_data(broken_rest)
>>>>>>         self.assertEqual(len(msgs), 1)
       
               # and non-broken rest
>>>>>>         rest = 'title\n=====\n\ntest'
>>>>>>         msgs = cmd._check_rst_data(rest)
>>>>>>         self.assertEqual(len(msgs), 0)
       
    1:     @unittest.skipUnless(HAS_DOCUTILS, "won't test without docutils")
           def test_check_restructuredtext(self):
               # let's see if it detects broken rest in long_description
>>>>>>         broken_rest = 'title\n===\n\ntest'
>>>>>>         pkg_info, dist = self.create_dist(long_description=broken_rest)
>>>>>>         cmd = check(dist)
>>>>>>         cmd.check_restructuredtext()
>>>>>>         self.assertEqual(cmd._warnings, 1)
       
               # let's see if we have an error with strict=1
>>>>>>         metadata = {'url': 'xxx', 'author': 'xxx',
>>>>>>                     'author_email': 'xxx',
>>>>>>                     'name': 'xxx', 'version': 'xxx',
>>>>>>                     'long_description': broken_rest}
>>>>>>         self.assertRaises(DistutilsSetupError, self._run, metadata,
>>>>>>                           **{'strict': 1, 'restructuredtext': 1})
       
               # and non-broken rest, including a non-ASCII character to test #12114
>>>>>>         metadata['long_description'] = u'title\n=====\n\ntest \u00df'
>>>>>>         cmd = self._run(metadata, strict=1, restructuredtext=1)
>>>>>>         self.assertEqual(cmd._warnings, 0)
       
    1:     @unittest.skipUnless(HAS_DOCUTILS, "won't test without docutils")
           def test_check_restructuredtext_with_syntax_highlight(self):
               # Don't fail if there is a `code` or `code-block` directive
       
>>>>>>         example_rst_docs = []
>>>>>>         example_rst_docs.append(textwrap.dedent("""\
                   Here's some code:
       
                   .. code:: python
       
                       def foo():
                           pass
>>>>>>             """))
>>>>>>         example_rst_docs.append(textwrap.dedent("""\
                   Here's some code:
       
                   .. code-block:: python
       
                       def foo():
                           pass
>>>>>>             """))
       
>>>>>>         for rest_with_code in example_rst_docs:
>>>>>>             pkg_info, dist = self.create_dist(long_description=rest_with_code)
>>>>>>             cmd = check(dist)
>>>>>>             cmd.check_restructuredtext()
>>>>>>             self.assertEqual(cmd._warnings, 0)
>>>>>>             msgs = cmd._check_rst_data(rest_with_code)
>>>>>>             self.assertEqual(len(msgs), 0)
       
    1:     def test_check_all(self):
       
    1:         metadata = {'url': 'xxx', 'author': 'xxx'}
    1:         self.assertRaises(DistutilsSetupError, self._run,
    1:                           {}, **{'strict': 1,
    1:                                  'restructuredtext': 1})
       
    1: def test_suite():
    1:     return unittest.makeSuite(CheckTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     run_unittest(test_suite())
