       """Suite Standard Suite: Common terms for most applications
       Level 1, version 1
       
       Generated from /Volumes/Sap/Applications (Mac OS 9)/Metrowerks CodeWarrior 7.0/Metrowerks CodeWarrior/CodeWarrior IDE 4.2.5
       AETE/AEUT resource version 1/0, language 0, script 0
    1: """
       
    1: import aetools
    1: import MacOS
       
    1: _code = 'CoRe'
       
    1: from StdSuites.Standard_Suite import *
    2: class Standard_Suite_Events(Standard_Suite_Events):
       
    1:     _argmap_close = {
    1:         'saving' : 'savo',
    1:         'saving_in' : 'kfil',
           }
       
    1:     def close(self, _object, _attributes={}, **_arguments):
               """close: close an object
               Required argument: the object to close
               Keyword argument saving: specifies whether or not changes should be saved before closing
               Keyword argument saving_in: the file in which to save the object
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'clos'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_close)
>>>>>>         _arguments['----'] = _object
       
>>>>>>         aetools.enumsubst(_arguments, 'savo', _Enum_savo)
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_count = {
    1:         'each' : 'kocl',
           }
       
    1:     def count(self, _object, _attributes={}, **_arguments):
               """count: return the number of elements of a particular class within an object
               Required argument: the object whose elements are to be counted
               Keyword argument each: the class of the elements to be counted. Keyword 'each' is optional in AppleScript
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: the number of elements
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'cnte'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_count)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_get = {
    1:         'as' : 'rtyp',
           }
       
    1:     def get(self, _object, _attributes={}, **_arguments):
               """get: get the data for an object
               Required argument: the object whose data is to be returned
               Keyword argument as: the desired types for the data, in order of preference
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: The data from the object
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'getd'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_get)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_make = {
    1:         'new' : 'kocl',
    1:         'as' : 'rtyp',
    1:         'at' : 'insh',
    1:         'with_data' : 'data',
    1:         'with_properties' : 'prdt',
           }
       
    1:     def make(self, _no_object=None, _attributes={}, **_arguments):
               """make: make a new element
               Keyword argument new: the class of the new element\xd1keyword 'new' is optional in AppleScript
               Keyword argument as: the desired types for the data, in order of preference
               Keyword argument at: the location at which to insert the element
               Keyword argument with_data: the initial data for the element
               Keyword argument with_properties: the initial values for the properties of the element
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: to the new object(s)
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'crel'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_make)
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def select(self, _object=None, _attributes={}, **_arguments):
               """select: select the specified object
               Required argument: the object to select
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'misc'
>>>>>>         _subcode = 'slct'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_set = {
    1:         'to' : 'data',
           }
       
    1:     def set(self, _object, _attributes={}, **_arguments):
               """set: set an object's data
               Required argument: the object to change
               Keyword argument to: the new value
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'setd'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_set)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
       
    2: class application(aetools.ComponentItem):
    1:     """application - an application program """
    1:     want = 'capp'
    2: class _Prop_user_interaction(aetools.NProperty):
    1:     """user interaction - user interaction level """
    1:     which = 'inte'
    1:     want = 'Inte'
    1: user_interaction = _Prop_user_interaction()
       #        element 'cwin' as ['indx', 'name', 'rang']
       #        element 'docu' as ['indx', 'name', 'rang']
       
    2: class character(aetools.ComponentItem):
    1:     """character - a character """
    1:     want = 'cha '
    2: class _Prop_length(aetools.NProperty):
    1:     """length - length in characters of this object """
    1:     which = 'pLen'
    1:     want = 'long'
    2: class _Prop_offset(aetools.NProperty):
    1:     """offset - offset of a text object from the beginning of the document (first char has offset 1) """
    1:     which = 'pOff'
    1:     want = 'long'
       
    2: class insertion_point(aetools.ComponentItem):
    1:     """insertion point - An insertion location between two objects """
    1:     want = 'cins'
       
    2: class line(aetools.ComponentItem):
    1:     """line - lines of text """
    1:     want = 'clin'
    2: class _Prop_index(aetools.NProperty):
    1:     """index - index of a line object from the beginning of the document (first line has index 1) """
    1:     which = 'pidx'
    1:     want = 'long'
       #        element 'cha ' as ['indx', 'rang', 'rele']
       
    1: lines = line
       
    2: class selection_2d_object(aetools.ComponentItem):
    1:     """selection-object - the selection visible to the user """
    1:     want = 'csel'
    2: class _Prop_contents(aetools.NProperty):
    1:     """contents - the contents of the selection """
    1:     which = 'pcnt'
    1:     want = 'type'
       #        element 'cha ' as ['indx', 'rele', 'rang', 'test']
       #        element 'clin' as ['indx', 'rang', 'rele']
       #        element 'ctxt' as ['rang']
       
    2: class text(aetools.ComponentItem):
    1:     """text - Text """
    1:     want = 'ctxt'
       #        element 'cha ' as ['indx', 'rele', 'rang']
       #        element 'cins' as ['rele']
       #        element 'clin' as ['indx', 'rang', 'rele']
       #        element 'ctxt' as ['rang']
       
    2: class window(aetools.ComponentItem):
    1:     """window - A window """
    1:     want = 'cwin'
    2: class _Prop_bounds(aetools.NProperty):
    1:     """bounds - the boundary rectangle for the window """
    1:     which = 'pbnd'
    1:     want = 'qdrt'
    2: class _Prop_document(aetools.NProperty):
    1:     """document - the document that owns this window """
    1:     which = 'docu'
    1:     want = 'docu'
    2: class _Prop_name(aetools.NProperty):
    1:     """name - the title of the window """
    1:     which = 'pnam'
    1:     want = 'itxt'
    2: class _Prop_position(aetools.NProperty):
    1:     """position - upper left coordinates of window """
    1:     which = 'ppos'
    1:     want = 'QDpt'
    2: class _Prop_visible(aetools.NProperty):
    1:     """visible - is the window visible? """
    1:     which = 'pvis'
    1:     want = 'bool'
    2: class _Prop_zoomed(aetools.NProperty):
    1:     """zoomed - Is the window zoomed? """
    1:     which = 'pzum'
    1:     want = 'bool'
       
    1: windows = window
       
    2: class document(aetools.ComponentItem):
    1:     """document - a document """
    1:     want = 'docu'
    2: class _Prop_file_permissions(aetools.NProperty):
    1:     """file permissions - the file permissions for the document """
    1:     which = 'PERM'
    1:     want = 'PERM'
    2: class _Prop_kind(aetools.NProperty):
    1:     """kind - the kind of document """
    1:     which = 'DKND'
    1:     want = 'DKND'
    2: class _Prop_location(aetools.NProperty):
    1:     """location - the file of the document """
    1:     which = 'FILE'
    1:     want = 'fss '
    2: class _Prop_window(aetools.NProperty):
    1:     """window - the window of the document. """
    1:     which = 'cwin'
    1:     want = 'cwin'
       
    1: documents = document
       
    2: class files(aetools.ComponentItem):
    1:     """files - Every file """
    1:     want = 'file'
       
    1: file = files
    1: application._superclassnames = []
    1: application._privpropdict = {
    1:     'user_interaction' : _Prop_user_interaction,
       }
    1: application._privelemdict = {
    1:     'document' : document,
    1:     'window' : window,
       }
    1: character._superclassnames = []
    1: character._privpropdict = {
    1:     'length' : _Prop_length,
    1:     'offset' : _Prop_offset,
       }
    1: character._privelemdict = {
       }
    1: insertion_point._superclassnames = []
    1: insertion_point._privpropdict = {
    1:     'length' : _Prop_length,
    1:     'offset' : _Prop_offset,
       }
    1: insertion_point._privelemdict = {
       }
    1: line._superclassnames = []
    1: line._privpropdict = {
    1:     'index' : _Prop_index,
    1:     'length' : _Prop_length,
    1:     'offset' : _Prop_offset,
       }
    1: line._privelemdict = {
    1:     'character' : character,
       }
    1: selection_2d_object._superclassnames = []
    1: selection_2d_object._privpropdict = {
    1:     'contents' : _Prop_contents,
    1:     'length' : _Prop_length,
    1:     'offset' : _Prop_offset,
       }
    1: selection_2d_object._privelemdict = {
    1:     'character' : character,
    1:     'line' : line,
    1:     'text' : text,
       }
    1: text._superclassnames = []
    1: text._privpropdict = {
    1:     'length' : _Prop_length,
    1:     'offset' : _Prop_offset,
       }
    1: text._privelemdict = {
    1:     'character' : character,
    1:     'insertion_point' : insertion_point,
    1:     'line' : line,
    1:     'text' : text,
       }
    1: window._superclassnames = []
    1: window._privpropdict = {
    1:     'bounds' : _Prop_bounds,
    1:     'document' : _Prop_document,
    1:     'index' : _Prop_index,
    1:     'name' : _Prop_name,
    1:     'position' : _Prop_position,
    1:     'visible' : _Prop_visible,
    1:     'zoomed' : _Prop_zoomed,
       }
    1: window._privelemdict = {
       }
    1: document._superclassnames = []
    1: document._privpropdict = {
    1:     'file_permissions' : _Prop_file_permissions,
    1:     'index' : _Prop_index,
    1:     'kind' : _Prop_kind,
    1:     'location' : _Prop_location,
    1:     'name' : _Prop_name,
    1:     'window' : _Prop_window,
       }
    1: document._privelemdict = {
       }
    1: files._superclassnames = []
    1: files._privpropdict = {
       }
    1: files._privelemdict = {
       }
       
       #
       # Indices of types declared in this module
       #
    1: _classdeclarations = {
    1:     'capp' : application,
    1:     'cha ' : character,
    1:     'cins' : insertion_point,
    1:     'clin' : line,
    1:     'csel' : selection_2d_object,
    1:     'ctxt' : text,
    1:     'cwin' : window,
    1:     'docu' : document,
    1:     'file' : files,
       }
       
    1: _propdeclarations = {
    1:     'DKND' : _Prop_kind,
    1:     'FILE' : _Prop_location,
    1:     'PERM' : _Prop_file_permissions,
    1:     'cwin' : _Prop_window,
    1:     'docu' : _Prop_document,
    1:     'inte' : _Prop_user_interaction,
    1:     'pLen' : _Prop_length,
    1:     'pOff' : _Prop_offset,
    1:     'pbnd' : _Prop_bounds,
    1:     'pcnt' : _Prop_contents,
    1:     'pidx' : _Prop_index,
    1:     'pnam' : _Prop_name,
    1:     'ppos' : _Prop_position,
    1:     'pvis' : _Prop_visible,
    1:     'pzum' : _Prop_zoomed,
       }
       
    1: _compdeclarations = {
       }
       
    1: _enumdeclarations = {
       }
