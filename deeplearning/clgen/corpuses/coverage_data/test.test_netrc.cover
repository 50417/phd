    1: import netrc, os, unittest, sys, textwrap
    1: from test import test_support
       
    1: temp_filename = test_support.TESTFN
       
    2: class NetrcTestCase(unittest.TestCase):
       
    1:     def make_nrc(self, test_data):
   11:         test_data = textwrap.dedent(test_data)
   11:         mode = 'w'
   11:         if sys.platform != 'cygwin':
   11:             mode += 't'
   11:         with open(temp_filename, mode) as fp:
   11:             fp.write(test_data)
   11:         self.addCleanup(os.unlink, temp_filename)
   11:         return netrc.netrc(temp_filename)
       
    1:     def test_default(self):
    1:         nrc = self.make_nrc("""\
                   machine host1.domain.com login log1 password pass1 account acct1
                   default login log2 password pass2
    1:             """)
    1:         self.assertEqual(nrc.hosts['host1.domain.com'],
    1:                          ('log1', 'acct1', 'pass1'))
    1:         self.assertEqual(nrc.hosts['default'], ('log2', None, 'pass2'))
       
    1:     def test_macros(self):
    1:         nrc = self.make_nrc("""\
                   macdef macro1
                   line1
                   line2
       
                   macdef macro2
                   line3
                   line4
    1:             """)
    1:         self.assertEqual(nrc.macros, {'macro1': ['line1\n', 'line2\n'],
    1:                                       'macro2': ['line3\n', 'line4\n']})
       
    1:     def _test_passwords(self, nrc, passwd):
    3:         nrc = self.make_nrc(nrc)
    3:         self.assertEqual(nrc.hosts['host.domain.com'], ('log', 'acct', passwd))
       
    1:     def test_password_with_leading_hash(self):
    1:         self._test_passwords("""\
                   machine host.domain.com login log password #pass account acct
    1:             """, '#pass')
       
    1:     def test_password_with_trailing_hash(self):
    1:         self._test_passwords("""\
                   machine host.domain.com login log password pass# account acct
    1:             """, 'pass#')
       
    1:     def test_password_with_internal_hash(self):
    1:         self._test_passwords("""\
                   machine host.domain.com login log password pa#ss account acct
    1:             """, 'pa#ss')
       
    1:     def _test_comment(self, nrc, passwd='pass'):
    6:         nrc = self.make_nrc(nrc)
    6:         self.assertEqual(nrc.hosts['foo.domain.com'], ('bar', None, passwd))
    6:         self.assertEqual(nrc.hosts['bar.domain.com'], ('foo', None, 'pass'))
       
    1:     def test_comment_before_machine_line(self):
    1:         self._test_comment("""\
                   # comment
                   machine foo.domain.com login bar password pass
                   machine bar.domain.com login foo password pass
    1:             """)
       
    1:     def test_comment_before_machine_line_no_space(self):
    1:         self._test_comment("""\
                   #comment
                   machine foo.domain.com login bar password pass
                   machine bar.domain.com login foo password pass
    1:             """)
       
    1:     def test_comment_before_machine_line_hash_only(self):
    1:         self._test_comment("""\
                   #
                   machine foo.domain.com login bar password pass
                   machine bar.domain.com login foo password pass
    1:             """)
       
    1:     def test_comment_at_end_of_machine_line(self):
    1:         self._test_comment("""\
                   machine foo.domain.com login bar password pass # comment
                   machine bar.domain.com login foo password pass
    1:             """)
       
    1:     def test_comment_at_end_of_machine_line_no_space(self):
    1:         self._test_comment("""\
                   machine foo.domain.com login bar password pass #comment
                   machine bar.domain.com login foo password pass
    1:             """)
       
    1:     def test_comment_at_end_of_machine_line_pass_has_hash(self):
    1:         self._test_comment("""\
                   machine foo.domain.com login bar password #pass #comment
                   machine bar.domain.com login foo password pass
    1:             """, '#pass')
       
       
    1:     @unittest.skipUnless(os.name == 'posix', 'POSIX only test')
           def test_security(self):
               # This test is incomplete since we are normally not run as root and
               # therefore can't test the file ownership being wrong.
    1:         d = test_support.TESTFN
    1:         os.mkdir(d)
    1:         self.addCleanup(test_support.rmtree, d)
    1:         fn = os.path.join(d, '.netrc')
    1:         with open(fn, 'wt') as f:
    1:             f.write("""\
                       machine foo.domain.com login bar password pass
                       default login foo password pass
    1:                 """)
    1:         with test_support.EnvironmentVarGuard() as environ:
    1:             environ.set('HOME', d)
    1:             os.chmod(fn, 0600)
    1:             nrc = netrc.netrc()
    1:             self.assertEqual(nrc.hosts['foo.domain.com'],
    1:                              ('bar', None, 'pass'))
    1:             os.chmod(fn, 0o622)
    1:             self.assertRaises(netrc.NetrcParseError, netrc.netrc)
       
    1: def test_main():
    1:     test_support.run_unittest(NetrcTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
