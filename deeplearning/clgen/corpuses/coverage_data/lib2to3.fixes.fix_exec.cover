       # Copyright 2006 Google, Inc. All Rights Reserved.
       # Licensed to PSF under a Contributor Agreement.
       
       """Fixer for exec.
       
       This converts usages of the exec statement into calls to a built-in
       exec() function.
       
       exec code in ns1, ns2 -> exec(code, ns1, ns2)
    1: """
       
       # Local imports
    1: from .. import pytree
    1: from .. import fixer_base
    1: from ..fixer_util import Comma, Name, Call
       
       
    2: class FixExec(fixer_base.BaseFix):
    1:     BM_compatible = True
       
           PATTERN = """
           exec_stmt< 'exec' a=any 'in' b=any [',' c=any] >
           |
           exec_stmt< 'exec' (not atom<'(' [any] ')'>) a=any >
    1:     """
       
    1:     def transform(self, node, results):
   11:         assert results
   11:         syms = self.syms
   11:         a = results["a"]
   11:         b = results.get("b")
   11:         c = results.get("c")
   11:         args = [a.clone()]
   11:         args[0].prefix = ""
   11:         if b is not None:
    7:             args.extend([Comma(), b.clone()])
   11:         if c is not None:
    3:             args.extend([Comma(), c.clone()])
       
   11:         return Call(Name(u"exec"), args, prefix=node.prefix)
