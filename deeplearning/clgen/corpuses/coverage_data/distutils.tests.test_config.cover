    1: """Tests for distutils.pypirc.pypirc."""
    1: import sys
    1: import os
    1: import unittest
    1: import tempfile
    1: import shutil
       
    1: from distutils.core import PyPIRCCommand
    1: from distutils.core import Distribution
    1: from distutils.log import set_threshold
    1: from distutils.log import WARN
       
    1: from distutils.tests import support
    1: from test.test_support import run_unittest
       
       PYPIRC = """\
       [distutils]
       
       index-servers =
           server1
           server2
       
       [server1]
       username:me
       password:secret
       
       [server2]
       username:meagain
       password: secret
       realm:acme
       repository:http://another.pypi/
    1: """
       
       PYPIRC_OLD = """\
       [server-login]
       username:tarek
       password:secret
    1: """
       
       WANTED = """\
       [distutils]
       index-servers =
           pypi
       
       [pypi]
       username:tarek
       password:xxx
    1: """
       
       
    2: class PyPIRCCommandTestCase(support.TempdirManager,
    1:                             support.LoggingSilencer,
    1:                             support.EnvironGuard,
    1:                             unittest.TestCase):
       
    1:     def setUp(self):
               """Patches the environment."""
   32:         super(PyPIRCCommandTestCase, self).setUp()
   32:         self.tmp_dir = self.mkdtemp()
   32:         os.environ['HOME'] = self.tmp_dir
   32:         self.rc = os.path.join(self.tmp_dir, '.pypirc')
   32:         self.dist = Distribution()
       
   64:         class command(PyPIRCCommand):
   32:             def __init__(self, dist):
    8:                 PyPIRCCommand.__init__(self, dist)
   32:             def initialize_options(self):
    8:                 pass
   32:             finalize_options = initialize_options
       
   32:         self._cmd = command
   32:         self.old_threshold = set_threshold(WARN)
       
    1:     def tearDown(self):
               """Removes the patch."""
   32:         set_threshold(self.old_threshold)
   32:         super(PyPIRCCommandTestCase, self).tearDown()
       
    1:     def test_server_registration(self):
               # This test makes sure PyPIRCCommand knows how to:
               # 1. handle several sections in .pypirc
               # 2. handle the old format
       
               # new format
    4:         self.write_file(self.rc, PYPIRC)
    4:         cmd = self._cmd(self.dist)
    4:         config = cmd._read_pypirc()
       
    4:         config = config.items()
    4:         config.sort()
    4:         waited = [('password', 'secret'), ('realm', 'pypi'),
    4:                   ('repository', 'https://upload.pypi.org/legacy/'),
    4:                   ('server', 'server1'), ('username', 'me')]
    4:         self.assertEqual(config, waited)
       
               # old format
    4:         self.write_file(self.rc, PYPIRC_OLD)
    4:         config = cmd._read_pypirc()
    4:         config = config.items()
    4:         config.sort()
    4:         waited = [('password', 'secret'), ('realm', 'pypi'),
    4:                   ('repository', 'https://upload.pypi.org/legacy/'),
    4:                   ('server', 'server-login'), ('username', 'tarek')]
    4:         self.assertEqual(config, waited)
       
    1:     def test_server_empty_registration(self):
    4:         cmd = self._cmd(self.dist)
    4:         rc = cmd._get_rc_file()
    4:         self.assertFalse(os.path.exists(rc))
    4:         cmd._store_pypirc('tarek', 'xxx')
    4:         self.assertTrue(os.path.exists(rc))
    4:         f = open(rc)
    4:         try:
    4:             content = f.read()
    4:             self.assertEqual(content, WANTED)
               finally:
    4:             f.close()
       
    1: def test_suite():
    1:     return unittest.makeSuite(PyPIRCCommandTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     run_unittest(test_suite())
