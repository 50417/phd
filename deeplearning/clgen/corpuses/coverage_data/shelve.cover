       """Manage shelves of pickled objects.
       
       A "shelf" is a persistent, dictionary-like object.  The difference
       with dbm databases is that the values (not the keys!) in a shelf can
       be essentially arbitrary Python objects -- anything that the "pickle"
       module can handle.  This includes most class instances, recursive data
       types, and objects containing lots of shared sub-objects.  The keys
       are ordinary strings.
       
       To summarize the interface (key is a string, data is an arbitrary
       object):
       
               import shelve
               d = shelve.open(filename) # open, with (g)dbm filename -- no suffix
       
               d[key] = data   # store data at key (overwrites old data if
                               # using an existing key)
               data = d[key]   # retrieve a COPY of the data at key (raise
                               # KeyError if no such key) -- NOTE that this
                               # access returns a *copy* of the entry!
               del d[key]      # delete data stored at key (raises KeyError
                               # if no such key)
               flag = d.has_key(key)   # true if the key exists; same as "key in d"
               list = d.keys() # a list of all existing keys (slow!)
       
               d.close()       # close it
       
       Dependent on the implementation, closing a persistent dictionary may
       or may not be necessary to flush changes to disk.
       
       Normally, d[key] returns a COPY of the entry.  This needs care when
       mutable entries are mutated: for example, if d[key] is a list,
               d[key].append(anitem)
       does NOT modify the entry d[key] itself, as stored in the persistent
       mapping -- it only modifies the copy, which is then immediately
       discarded, so that the append has NO effect whatsoever.  To append an
       item to d[key] in a way that will affect the persistent mapping, use:
               data = d[key]
               data.append(anitem)
               d[key] = data
       
       To avoid the problem with mutable entries, you may pass the keyword
       argument writeback=True in the call to shelve.open.  When you use:
               d = shelve.open(filename, writeback=True)
       then d keeps a cache of all entries you access, and writes them all back
       to the persistent mapping when you call d.close().  This ensures that
       such usage as d[key].append(anitem) works as intended.
       
       However, using keyword argument writeback=True may consume vast amount
       of memory for the cache, and it may make d.close() very slow, if you
       access many of d's entries after opening it in this way: d has no way to
       check which of the entries you access are mutable and/or which ones you
       actually mutate, so it must cache, and write back at close, all of the
       entries that you access.  You can call d.sync() to write back all the
       entries in the cache, and empty the cache (d.sync() also synchronizes
       the persistent dictionary on disk, if feasible).
    1: """
       
       # Try using cPickle and cStringIO if available.
       
    1: try:
    1:     from cPickle import Pickler, Unpickler
>>>>>> except ImportError:
>>>>>>     from pickle import Pickler, Unpickler
       
    1: try:
    1:     from cStringIO import StringIO
>>>>>> except ImportError:
>>>>>>     from StringIO import StringIO
       
    1: import UserDict
       
    1: __all__ = ["Shelf","BsdDbShelf","DbfilenameShelf","open"]
       
    2: class _ClosedDict(UserDict.DictMixin):
    1:     'Marker for a closed dict.  Access attempts raise a ValueError.'
       
    1:     def closed(self, *args):
    2:         raise ValueError('invalid operation on closed shelf')
    1:     __getitem__ = __setitem__ = __delitem__ = keys = closed
       
    1:     def __repr__(self):
>>>>>>         return '<Closed Dictionary>'
       
    2: class Shelf(UserDict.DictMixin):
           """Base class for shelf implementations.
       
           This is initialized with a dictionary-like object.
           See the module's __doc__ string for an overview of the interface.
    1:     """
       
    1:     def __init__(self, dict, protocol=None, writeback=False):
  165:         self.dict = dict
  165:         if protocol is None:
    1:             protocol = 0
  165:         self._protocol = protocol
  165:         self.writeback = writeback
  165:         self.cache = {}
       
    1:     def keys(self):
  204:         return self.dict.keys()
       
    1:     def __len__(self):
   50:         return len(self.dict)
       
    1:     def has_key(self, key):
   18:         return key in self.dict
       
    1:     def __contains__(self, key):
   42:         return key in self.dict
       
    1:     def get(self, key, default=None):
   24:         if key in self.dict:
    6:             return self[key]
   18:         return default
       
    1:     def __getitem__(self, key):
  284:         try:
  284:             value = self.cache[key]
  280:         except KeyError:
  280:             f = StringIO(self.dict[key])
  231:             value = Unpickler(f).load()
  231:             if self.writeback:
>>>>>>                 self.cache[key] = value
  235:         return value
       
    1:     def __setitem__(self, key, value):
  125:         if self.writeback:
    2:             self.cache[key] = value
  125:         f = StringIO()
  125:         p = Pickler(f, self._protocol)
  125:         p.dump(value)
  125:         self.dict[key] = f.getvalue()
       
    1:     def __delitem__(self, key):
   42:         del self.dict[key]
   42:         try:
   42:             del self.cache[key]
   42:         except KeyError:
   42:             pass
       
    1:     def close(self):
  328:         if self.dict is None:
>>>>>>             return
  328:         try:
  328:             self.sync()
  328:             try:
  328:                 self.dict.close()
  247:             except AttributeError:
  247:                 pass
               finally:
                   # Catch errors that may happen when close is called from __del__
                   # because CPython is in interpreter shutdown.
  328:             try:
  328:                 self.dict = _ClosedDict()
>>>>>>             except:
>>>>>>                 self.dict = None
       
    1:     def __del__(self):
  163:         if not hasattr(self, 'writeback'):
                   # __init__ didn't succeed, so don't bother closing
>>>>>>             return
  163:         self.close()
       
    1:     def sync(self):
  328:         if self.writeback and self.cache:
    2:             self.writeback = False
    4:             for key, entry in self.cache.iteritems():
    2:                 self[key] = entry
    2:             self.writeback = True
    2:             self.cache = {}
  328:         if hasattr(self.dict, 'sync'):
   81:             self.dict.sync()
       
       
    2: class BsdDbShelf(Shelf):
           """Shelf implementation using the "BSD" db interface.
       
           This adds methods first(), next(), previous(), last() and
           set_location() that have no counterpart in [g]dbm databases.
       
           The actual database must be opened using one of the "bsddb"
           modules "open" routines (i.e. bsddb.hashopen, bsddb.btopen or
           bsddb.rnopen) and passed to the constructor.
       
           See the module's __doc__ string for an overview of the interface.
    1:     """
       
    1:     def __init__(self, dict, protocol=None, writeback=False):
>>>>>>         Shelf.__init__(self, dict, protocol, writeback)
       
    1:     def set_location(self, key):
>>>>>>         (key, value) = self.dict.set_location(key)
>>>>>>         f = StringIO(value)
>>>>>>         return (key, Unpickler(f).load())
       
    1:     def next(self):
>>>>>>         (key, value) = self.dict.next()
>>>>>>         f = StringIO(value)
>>>>>>         return (key, Unpickler(f).load())
       
    1:     def previous(self):
>>>>>>         (key, value) = self.dict.previous()
>>>>>>         f = StringIO(value)
>>>>>>         return (key, Unpickler(f).load())
       
    1:     def first(self):
>>>>>>         (key, value) = self.dict.first()
>>>>>>         f = StringIO(value)
>>>>>>         return (key, Unpickler(f).load())
       
    1:     def last(self):
>>>>>>         (key, value) = self.dict.last()
>>>>>>         f = StringIO(value)
>>>>>>         return (key, Unpickler(f).load())
       
       
    2: class DbfilenameShelf(Shelf):
           """Shelf implementation using the "anydbm" generic dbm interface.
       
           This is initialized with the filename for the dbm database.
           See the module's __doc__ string for an overview of the interface.
    1:     """
       
    1:     def __init__(self, filename, flag='c', protocol=None, writeback=False):
   81:         import anydbm
   81:         Shelf.__init__(self, anydbm.open(filename, flag), protocol, writeback)
       
       
    1: def open(filename, flag='c', protocol=None, writeback=False):
           """Open a persistent dictionary for reading and writing.
       
           The filename parameter is the base filename for the underlying
           database.  As a side-effect, an extension may be added to the
           filename and more than one file may be created.  The optional flag
           parameter has the same interpretation as the flag parameter of
           anydbm.open(). The optional protocol parameter specifies the
           version of the pickle protocol (0, 1, or 2).
       
           See the module's __doc__ string for an overview of the interface.
           """
       
   81:     return DbfilenameShelf(filename, flag, protocol, writeback)
