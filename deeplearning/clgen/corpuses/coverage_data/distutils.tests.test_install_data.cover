    1: """Tests for distutils.command.install_data."""
    1: import sys
    1: import os
    1: import unittest
    1: import getpass
       
    1: from distutils.command.install_data import install_data
    1: from distutils.tests import support
    1: from test.test_support import run_unittest
       
    2: class InstallDataTestCase(support.TempdirManager,
    1:                           support.LoggingSilencer,
    1:                           support.EnvironGuard,
    1:                           unittest.TestCase):
       
    1:     def test_simple_run(self):
    1:         pkg_dir, dist = self.create_dist()
    1:         cmd = install_data(dist)
    1:         cmd.install_dir = inst = os.path.join(pkg_dir, 'inst')
       
               # data_files can contain
               #  - simple files
               #  - a tuple with a path, and a list of file
    1:         one = os.path.join(pkg_dir, 'one')
    1:         self.write_file(one, 'xxx')
    1:         inst2 = os.path.join(pkg_dir, 'inst2')
    1:         two = os.path.join(pkg_dir, 'two')
    1:         self.write_file(two, 'xxx')
       
    1:         cmd.data_files = [one, (inst2, [two])]
    1:         self.assertEqual(cmd.get_inputs(), [one, (inst2, [two])])
       
               # let's run the command
    1:         cmd.ensure_finalized()
    1:         cmd.run()
       
               # let's check the result
    1:         self.assertEqual(len(cmd.get_outputs()), 2)
    1:         rtwo = os.path.split(two)[-1]
    1:         self.assertTrue(os.path.exists(os.path.join(inst2, rtwo)))
    1:         rone = os.path.split(one)[-1]
    1:         self.assertTrue(os.path.exists(os.path.join(inst, rone)))
    1:         cmd.outfiles = []
       
               # let's try with warn_dir one
    1:         cmd.warn_dir = 1
    1:         cmd.ensure_finalized()
    1:         cmd.run()
       
               # let's check the result
    1:         self.assertEqual(len(cmd.get_outputs()), 2)
    1:         self.assertTrue(os.path.exists(os.path.join(inst2, rtwo)))
    1:         self.assertTrue(os.path.exists(os.path.join(inst, rone)))
    1:         cmd.outfiles = []
       
               # now using root and empty dir
    1:         cmd.root = os.path.join(pkg_dir, 'root')
    1:         inst3 = os.path.join(cmd.install_dir, 'inst3')
    1:         inst4 = os.path.join(pkg_dir, 'inst4')
    1:         three = os.path.join(cmd.install_dir, 'three')
    1:         self.write_file(three, 'xx')
    1:         cmd.data_files = [one, (inst2, [two]),
    1:                           ('inst3', [three]),
    1:                           (inst4, [])]
    1:         cmd.ensure_finalized()
    1:         cmd.run()
       
               # let's check the result
    1:         self.assertEqual(len(cmd.get_outputs()), 4)
    1:         self.assertTrue(os.path.exists(os.path.join(inst2, rtwo)))
    1:         self.assertTrue(os.path.exists(os.path.join(inst, rone)))
       
    1: def test_suite():
    1:     return unittest.makeSuite(InstallDataTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     run_unittest(test_suite())
