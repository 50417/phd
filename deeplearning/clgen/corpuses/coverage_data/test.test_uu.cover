       """
       Tests for uu module.
       Nick Mathewson
    1: """
       
    1: import unittest
    1: from test import test_support
       
    1: import sys, os, uu, cStringIO
    1: import uu
       
    1: plaintext = "The smooth-scaled python crept over the sleeping dog\n"
       
       encodedtext = """\
       M5&AE('-M;V]T:\"US8V%L960@<'ET:&]N(&-R97!T(&]V97(@=&AE('-L965P
    1: (:6YG(&1O9PH """
       
    1: encodedtextwrapped = "begin %03o %s\n" + encodedtext.replace("%", "%%") + "\n \nend\n"
       
    2: class UUTest(unittest.TestCase):
       
    1:     def test_encode(self):
    1:         inp = cStringIO.StringIO(plaintext)
    1:         out = cStringIO.StringIO()
    1:         uu.encode(inp, out, "t1")
    1:         self.assertEqual(out.getvalue(), encodedtextwrapped % (0666, "t1"))
    1:         inp = cStringIO.StringIO(plaintext)
    1:         out = cStringIO.StringIO()
    1:         uu.encode(inp, out, "t1", 0644)
    1:         self.assertEqual(out.getvalue(), encodedtextwrapped % (0644, "t1"))
       
    1:     def test_decode(self):
    1:         inp = cStringIO.StringIO(encodedtextwrapped % (0666, "t1"))
    1:         out = cStringIO.StringIO()
    1:         uu.decode(inp, out)
    1:         self.assertEqual(out.getvalue(), plaintext)
    1:         inp = cStringIO.StringIO(
                   "UUencoded files may contain many lines,\n" +
    1:             "even some that have 'begin' in them.\n" +
    1:             encodedtextwrapped % (0666, "t1")
               )
    1:         out = cStringIO.StringIO()
    1:         uu.decode(inp, out)
    1:         self.assertEqual(out.getvalue(), plaintext)
       
    1:     def test_truncatedinput(self):
    1:         inp = cStringIO.StringIO("begin 644 t1\n" + encodedtext)
    1:         out = cStringIO.StringIO()
    1:         try:
    1:             uu.decode(inp, out)
>>>>>>             self.fail("No exception raised")
    1:         except uu.Error, e:
    1:             self.assertEqual(str(e), "Truncated input file")
       
    1:     def test_missingbegin(self):
    1:         inp = cStringIO.StringIO("")
    1:         out = cStringIO.StringIO()
    1:         try:
    1:             uu.decode(inp, out)
>>>>>>             self.fail("No exception raised")
    1:         except uu.Error, e:
    1:             self.assertEqual(str(e), "No valid begin line found in input file")
       
    1:     def test_garbage_padding(self):
               # Issue #22406
               encodedtext = (
    1:             "begin 644 file\n"
                   # length 1; bits 001100 111111 111111 111111
                   "\x21\x2C\x5F\x5F\x5F\n"
                   "\x20\n"
                   "end\n"
               )
    1:         plaintext = "\x33"  # 00110011
       
    1:         inp = cStringIO.StringIO(encodedtext)
    1:         out = cStringIO.StringIO()
    1:         uu.decode(inp, out, quiet=True)
    1:         self.assertEqual(out.getvalue(), plaintext)
       
    1:         import codecs
    1:         decoded = codecs.decode(encodedtext, "uu_codec")
    1:         self.assertEqual(decoded, plaintext)
       
    2: class UUStdIOTest(unittest.TestCase):
       
    1:     def setUp(self):
    2:         self.stdin = sys.stdin
    2:         self.stdout = sys.stdout
       
    1:     def tearDown(self):
    2:         sys.stdin = self.stdin
    2:         sys.stdout = self.stdout
       
    1:     def test_encode(self):
    1:         sys.stdin = cStringIO.StringIO(plaintext)
    1:         sys.stdout = cStringIO.StringIO()
    1:         uu.encode("-", "-", "t1", 0666)
    1:         self.assertEqual(
    1:             sys.stdout.getvalue(),
    1:             encodedtextwrapped % (0666, "t1")
               )
       
    1:     def test_decode(self):
    1:         sys.stdin = cStringIO.StringIO(encodedtextwrapped % (0666, "t1"))
    1:         sys.stdout = cStringIO.StringIO()
    1:         uu.decode("-", "-")
    1:         self.assertEqual(sys.stdout.getvalue(), plaintext)
       
    2: class UUFileTest(unittest.TestCase):
       
    1:     def _kill(self, f):
               # close and remove file
    5:         try:
    5:             f.close()
>>>>>>         except (SystemExit, KeyboardInterrupt):
>>>>>>             raise
>>>>>>         except:
>>>>>>             pass
    5:         try:
    5:             os.unlink(f.name)
>>>>>>         except (SystemExit, KeyboardInterrupt):
>>>>>>             raise
>>>>>>         except:
>>>>>>             pass
       
    1:     def setUp(self):
    4:         self.tmpin  = test_support.TESTFN + "i"
    4:         self.tmpout = test_support.TESTFN + "o"
       
    1:     def tearDown(self):
    4:         del self.tmpin
    4:         del self.tmpout
       
    1:     def test_encode(self):
    1:         fin = fout = None
    1:         try:
    1:             test_support.unlink(self.tmpin)
    1:             fin = open(self.tmpin, 'wb')
    1:             fin.write(plaintext)
    1:             fin.close()
       
    1:             fin = open(self.tmpin, 'rb')
    1:             fout = open(self.tmpout, 'w')
    1:             uu.encode(fin, fout, self.tmpin, mode=0644)
    1:             fin.close()
    1:             fout.close()
       
    1:             fout = open(self.tmpout, 'r')
    1:             s = fout.read()
    1:             fout.close()
    1:             self.assertEqual(s, encodedtextwrapped % (0644, self.tmpin))
       
                   # in_file and out_file as filenames
    1:             uu.encode(self.tmpin, self.tmpout, self.tmpin, mode=0644)
    1:             fout = open(self.tmpout, 'r')
    1:             s = fout.read()
    1:             fout.close()
    1:             self.assertEqual(s, encodedtextwrapped % (0644, self.tmpin))
       
               finally:
    1:             self._kill(fin)
    1:             self._kill(fout)
       
    1:     def test_decode(self):
    1:         f = None
    1:         try:
    1:             test_support.unlink(self.tmpin)
    1:             f = open(self.tmpin, 'w')
    1:             f.write(encodedtextwrapped % (0644, self.tmpout))
    1:             f.close()
       
    1:             f = open(self.tmpin, 'r')
    1:             uu.decode(f)
    1:             f.close()
       
    1:             f = open(self.tmpout, 'r')
    1:             s = f.read()
    1:             f.close()
    1:             self.assertEqual(s, plaintext)
                   # XXX is there an xp way to verify the mode?
               finally:
    1:             self._kill(f)
       
    1:     def test_decode_filename(self):
    1:         f = None
    1:         try:
    1:             test_support.unlink(self.tmpin)
    1:             f = open(self.tmpin, 'w')
    1:             f.write(encodedtextwrapped % (0644, self.tmpout))
    1:             f.close()
       
    1:             uu.decode(self.tmpin)
       
    1:             f = open(self.tmpout, 'r')
    1:             s = f.read()
    1:             f.close()
    1:             self.assertEqual(s, plaintext)
               finally:
    1:             self._kill(f)
       
    1:     def test_decodetwice(self):
               # Verify that decode() will refuse to overwrite an existing file
    1:         f = None
    1:         try:
    1:             f = cStringIO.StringIO(encodedtextwrapped % (0644, self.tmpout))
       
    1:             f = open(self.tmpin, 'r')
    1:             uu.decode(f)
    1:             f.close()
       
    1:             f = open(self.tmpin, 'r')
    1:             self.assertRaises(uu.Error, uu.decode, f)
    1:             f.close()
               finally:
    1:             self._kill(f)
       
    1: def test_main():
    1:     test_support.run_unittest(UUTest, UUStdIOTest, UUFileTest)
       
    1: if __name__=="__main__":
>>>>>>     test_main()
