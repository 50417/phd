    1: from test import test_support
    1: from test.test_support import bigmemtest, _1G, _2G, _4G, precisionbigmemtest
       
    1: import unittest
    1: import operator
    1: import string
    1: import sys
       
       # Bigmem testing houserules:
       #
       #  - Try not to allocate too many large objects. It's okay to rely on
       #    refcounting semantics, but don't forget that 's = create_largestring()'
       #    doesn't release the old 's' (if it exists) until well after its new
       #    value has been created. Use 'del s' before the create_largestring call.
       #
       #  - Do *not* compare large objects using assertEqual or similar. It's a
       #    lengty operation and the errormessage will be utterly useless due to
       #    its size. To make sure whether a result has the right contents, better
       #    to use the strip or count methods, or compare meaningful slices.
       #
       #  - Don't forget to test for large indices, offsets and results and such,
       #    in addition to large sizes.
       #
       #  - When repeating an object (say, a substring, or a small list) to create
       #    a large object, make the subobject of a length that is not a power of
       #    2. That way, int-wrapping problems are more easily detected.
       #
       #  - While the bigmemtest decorator speaks of 'minsize', all tests will
       #    actually be called with a much smaller number too, in the normal
       #    test run (5Kb currently.) This is so the tests themselves get frequent
       #    testing. Consequently, always make all large allocations based on the
       #    passed-in 'size', and don't rely on the size being very large. Also,
       #    memuse-per-size should remain sane (less than a few thousand); if your
       #    test uses more, adjust 'size' upward, instead.
       
    1: if test_support.have_unicode:
    1:     character_size = 4 if sys.maxunicode > 0xFFFF else 2
       else:
>>>>>>     character_size = 1
       
    2: class StrTest(unittest.TestCase):
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_capitalize(self, size):
    1:         SUBSTR = ' abc def ghi'
    1:         s = '-' * size + SUBSTR
    1:         caps = s.capitalize()
    1:         self.assertEqual(caps[-len(SUBSTR):],
    1:                          SUBSTR.capitalize())
    1:         self.assertEqual(caps.lstrip('-'), SUBSTR)
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=1)
           def test_center(self, size):
    1:         SUBSTR = ' abc def ghi'
    1:         s = SUBSTR.center(size)
    1:         self.assertEqual(len(s), size)
    1:         lpadsize = rpadsize = (len(s) - len(SUBSTR)) // 2
    1:         if len(s) % 2:
    1:             lpadsize += 1
    1:         self.assertEqual(s[lpadsize:-rpadsize], SUBSTR)
    1:         self.assertEqual(s.strip(), SUBSTR.strip())
       
    1:     @test_support.requires_unicode
    1:     @precisionbigmemtest(size=_2G - 1, memuse=character_size)
           def test_center_unicode(self, size):
    1:         SUBSTR = u' abc def ghi'
    1:         try:
    1:             s = SUBSTR.center(size)
>>>>>>         except OverflowError:
>>>>>>             pass # acceptable on 32-bit
               else:
    1:             self.assertEqual(len(s), size)
    1:             lpadsize = rpadsize = (len(s) - len(SUBSTR)) // 2
    1:             if len(s) % 2:
    1:                 lpadsize += 1
    1:             self.assertEqual(s[lpadsize:-rpadsize], SUBSTR)
    1:             self.assertEqual(s.strip(), SUBSTR.strip())
    1:             del s
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_count(self, size):
    1:         SUBSTR = ' abc def ghi'
    1:         s = '.' * size + SUBSTR
    1:         self.assertEqual(s.count('.'), size)
    1:         s += '.'
    1:         self.assertEqual(s.count('.'), size + 1)
    1:         self.assertEqual(s.count(' '), 3)
    1:         self.assertEqual(s.count('i'), 1)
    1:         self.assertEqual(s.count('j'), 0)
       
    1:     @test_support.requires_unicode
    1:     @bigmemtest(minsize=_2G + 2, memuse=1 + character_size)
           def test_decode(self, size):
    1:         s = '.' * size
    1:         self.assertEqual(len(s.decode('utf-8')), size)
       
    1:     def basic_encode_test(self, size, enc, c=u'.', expectedsize=None):
    5:         if expectedsize is None:
    4:             expectedsize = size
       
    5:         s = c * size
    5:         self.assertEqual(len(s.encode(enc)), expectedsize)
       
    1:     @test_support.requires_unicode
    1:     @bigmemtest(minsize=_2G + 2, memuse=character_size + 4)
           def test_encode(self, size):
    1:         self.basic_encode_test(size, 'utf-8')
       
    1:     @test_support.requires_unicode
    1:     @precisionbigmemtest(size=_4G // 6 + 2, memuse=character_size + 6)
           def test_encode_raw_unicode_escape(self, size):
    1:         self.basic_encode_test(size, 'raw_unicode_escape')
       
    1:     @test_support.requires_unicode
    1:     @precisionbigmemtest(size=_4G // 5 + 70, memuse=character_size + 8)
           def test_encode_utf7(self, size):
    1:         self.basic_encode_test(size, 'utf7')
       
    1:     @test_support.requires_unicode
    1:     @precisionbigmemtest(size=_4G // 4 + 5, memuse=character_size + 4)
           def test_encode_utf32(self, size):
    1:         self.basic_encode_test(size, 'utf32', expectedsize=4*size+4)
       
    1:     @test_support.requires_unicode
    1:     @precisionbigmemtest(size=_2G-1, memuse=4)
           def test_decodeascii(self, size):
    1:         self.basic_encode_test(size, 'ascii', c='A')
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_endswith(self, size):
    1:         SUBSTR = ' abc def ghi'
    1:         s = '-' * size + SUBSTR
    1:         self.assertTrue(s.endswith(SUBSTR))
    1:         self.assertTrue(s.endswith(s))
    1:         s2 = '...' + s
    1:         self.assertTrue(s2.endswith(s))
    1:         self.assertFalse(s.endswith('a' + SUBSTR))
    1:         self.assertFalse(SUBSTR.endswith(s))
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=2)
           def test_expandtabs(self, size):
    1:         s = '-' * size
    1:         tabsize = 8
    1:         self.assertEqual(s.expandtabs(), s)
    1:         del s
    1:         slen, remainder = divmod(size, tabsize)
    1:         s = '       \t' * slen
    1:         s = s.expandtabs(tabsize)
    1:         self.assertEqual(len(s), size - remainder)
    1:         self.assertEqual(len(s.strip(' ')), 0)
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_find(self, size):
    1:         SUBSTR = ' abc def ghi'
    1:         sublen = len(SUBSTR)
    1:         s = ''.join([SUBSTR, '-' * size, SUBSTR])
    1:         self.assertEqual(s.find(' '), 0)
    1:         self.assertEqual(s.find(SUBSTR), 0)
    1:         self.assertEqual(s.find(' ', sublen), sublen + size)
    1:         self.assertEqual(s.find(SUBSTR, len(SUBSTR)), sublen + size)
    1:         self.assertEqual(s.find('i'), SUBSTR.find('i'))
    1:         self.assertEqual(s.find('i', sublen),
    1:                          sublen + size + SUBSTR.find('i'))
    1:         self.assertEqual(s.find('i', size),
    1:                          sublen + size + SUBSTR.find('i'))
    1:         self.assertEqual(s.find('j'), -1)
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_index(self, size):
    1:         SUBSTR = ' abc def ghi'
    1:         sublen = len(SUBSTR)
    1:         s = ''.join([SUBSTR, '-' * size, SUBSTR])
    1:         self.assertEqual(s.index(' '), 0)
    1:         self.assertEqual(s.index(SUBSTR), 0)
    1:         self.assertEqual(s.index(' ', sublen), sublen + size)
    1:         self.assertEqual(s.index(SUBSTR, sublen), sublen + size)
    1:         self.assertEqual(s.index('i'), SUBSTR.index('i'))
    1:         self.assertEqual(s.index('i', sublen),
    1:                          sublen + size + SUBSTR.index('i'))
    1:         self.assertEqual(s.index('i', size),
    1:                          sublen + size + SUBSTR.index('i'))
    1:         self.assertRaises(ValueError, s.index, 'j')
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_isalnum(self, size):
    1:         SUBSTR = '123456'
    1:         s = 'a' * size + SUBSTR
    1:         self.assertTrue(s.isalnum())
    1:         s += '.'
    1:         self.assertFalse(s.isalnum())
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_isalpha(self, size):
    1:         SUBSTR = 'zzzzzzz'
    1:         s = 'a' * size + SUBSTR
    1:         self.assertTrue(s.isalpha())
    1:         s += '.'
    1:         self.assertFalse(s.isalpha())
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_isdigit(self, size):
    1:         SUBSTR = '123456'
    1:         s = '9' * size + SUBSTR
    1:         self.assertTrue(s.isdigit())
    1:         s += 'z'
    1:         self.assertFalse(s.isdigit())
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_islower(self, size):
  256:         chars = ''.join([ chr(c) for c in range(255) if not chr(c).isupper() ])
    1:         repeats = size // len(chars) + 2
    1:         s = chars * repeats
    1:         self.assertTrue(s.islower())
    1:         s += 'A'
    1:         self.assertFalse(s.islower())
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_isspace(self, size):
    1:         whitespace = ' \f\n\r\t\v'
    1:         repeats = size // len(whitespace) + 2
    1:         s = whitespace * repeats
    1:         self.assertTrue(s.isspace())
    1:         s += 'j'
    1:         self.assertFalse(s.isspace())
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_istitle(self, size):
    1:         SUBSTR = '123456'
    1:         s = ''.join(['A', 'a' * size, SUBSTR])
    1:         self.assertTrue(s.istitle())
    1:         s += 'A'
    1:         self.assertTrue(s.istitle())
    1:         s += 'aA'
    1:         self.assertFalse(s.istitle())
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_isupper(self, size):
  256:         chars = ''.join([ chr(c) for c in range(255) if not chr(c).islower() ])
    1:         repeats = size // len(chars) + 2
    1:         s = chars * repeats
    1:         self.assertTrue(s.isupper())
    1:         s += 'a'
    1:         self.assertFalse(s.isupper())
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_join(self, size):
    1:         s = 'A' * size
    1:         x = s.join(['aaaaa', 'bbbbb'])
    1:         self.assertEqual(x.count('a'), 5)
    1:         self.assertEqual(x.count('b'), 5)
    1:         self.assertTrue(x.startswith('aaaaaA'))
    1:         self.assertTrue(x.endswith('Abbbbb'))
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=1)
           def test_ljust(self, size):
    1:         SUBSTR = ' abc def ghi'
    1:         s = SUBSTR.ljust(size)
    1:         self.assertTrue(s.startswith(SUBSTR + '  '))
    1:         self.assertEqual(len(s), size)
    1:         self.assertEqual(s.strip(), SUBSTR.strip())
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=2)
           def test_lower(self, size):
    1:         s = 'A' * size
    1:         s = s.lower()
    1:         self.assertEqual(len(s), size)
    1:         self.assertEqual(s.count('a'), size)
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=1)
           def test_lstrip(self, size):
    1:         SUBSTR = 'abc def ghi'
    1:         s = SUBSTR.rjust(size)
    1:         self.assertEqual(len(s), size)
    1:         self.assertEqual(s.lstrip(), SUBSTR.lstrip())
    1:         del s
    1:         s = SUBSTR.ljust(size)
    1:         self.assertEqual(len(s), size)
    1:         stripped = s.lstrip()
    1:         self.assertTrue(stripped is s)
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=2)
           def test_replace(self, size):
    1:         replacement = 'a'
    1:         s = ' ' * size
    1:         s = s.replace(' ', replacement)
    1:         self.assertEqual(len(s), size)
    1:         self.assertEqual(s.count(replacement), size)
    1:         s = s.replace(replacement, ' ', size - 4)
    1:         self.assertEqual(len(s), size)
    1:         self.assertEqual(s.count(replacement), 4)
    1:         self.assertEqual(s[-10:], '      aaaa')
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_rfind(self, size):
    1:         SUBSTR = ' abc def ghi'
    1:         sublen = len(SUBSTR)
    1:         s = ''.join([SUBSTR, '-' * size, SUBSTR])
    1:         self.assertEqual(s.rfind(' '), sublen + size + SUBSTR.rfind(' '))
    1:         self.assertEqual(s.rfind(SUBSTR), sublen + size)
    1:         self.assertEqual(s.rfind(' ', 0, size), SUBSTR.rfind(' '))
    1:         self.assertEqual(s.rfind(SUBSTR, 0, sublen + size), 0)
    1:         self.assertEqual(s.rfind('i'), sublen + size + SUBSTR.rfind('i'))
    1:         self.assertEqual(s.rfind('i', 0, sublen), SUBSTR.rfind('i'))
    1:         self.assertEqual(s.rfind('i', 0, sublen + size),
    1:                          SUBSTR.rfind('i'))
    1:         self.assertEqual(s.rfind('j'), -1)
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_rindex(self, size):
    1:         SUBSTR = ' abc def ghi'
    1:         sublen = len(SUBSTR)
    1:         s = ''.join([SUBSTR, '-' * size, SUBSTR])
    1:         self.assertEqual(s.rindex(' '),
    1:                           sublen + size + SUBSTR.rindex(' '))
    1:         self.assertEqual(s.rindex(SUBSTR), sublen + size)
    1:         self.assertEqual(s.rindex(' ', 0, sublen + size - 1),
    1:                          SUBSTR.rindex(' '))
    1:         self.assertEqual(s.rindex(SUBSTR, 0, sublen + size), 0)
    1:         self.assertEqual(s.rindex('i'),
    1:                          sublen + size + SUBSTR.rindex('i'))
    1:         self.assertEqual(s.rindex('i', 0, sublen), SUBSTR.rindex('i'))
    1:         self.assertEqual(s.rindex('i', 0, sublen + size),
    1:                          SUBSTR.rindex('i'))
    1:         self.assertRaises(ValueError, s.rindex, 'j')
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=1)
           def test_rjust(self, size):
    1:         SUBSTR = ' abc def ghi'
    1:         s = SUBSTR.ljust(size)
    1:         self.assertTrue(s.startswith(SUBSTR + '  '))
    1:         self.assertEqual(len(s), size)
    1:         self.assertEqual(s.strip(), SUBSTR.strip())
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=1)
           def test_rstrip(self, size):
    1:         SUBSTR = ' abc def ghi'
    1:         s = SUBSTR.ljust(size)
    1:         self.assertEqual(len(s), size)
    1:         self.assertEqual(s.rstrip(), SUBSTR.rstrip())
    1:         del s
    1:         s = SUBSTR.rjust(size)
    1:         self.assertEqual(len(s), size)
    1:         stripped = s.rstrip()
    1:         self.assertTrue(stripped is s)
       
           # The test takes about size bytes to build a string, and then about
           # sqrt(size) substrings of sqrt(size) in size and a list to
           # hold sqrt(size) items. It's close but just over 2x size.
    1:     @bigmemtest(minsize=_2G, memuse=2.1)
           def test_split_small(self, size):
               # Crudely calculate an estimate so that the result of s.split won't
               # take up an inordinate amount of memory
    1:         chunksize = int(size ** 0.5 + 2)
    1:         SUBSTR = 'a' + ' ' * chunksize
    1:         s = SUBSTR * chunksize
    1:         l = s.split()
    1:         self.assertEqual(len(l), chunksize)
    1:         self.assertEqual(set(l), set(['a']))
    1:         del l
    1:         l = s.split('a')
    1:         self.assertEqual(len(l), chunksize + 1)
    1:         self.assertEqual(set(l), set(['', ' ' * chunksize]))
       
           # Allocates a string of twice size (and briefly two) and a list of
           # size.  Because of internal affairs, the s.split() call produces a
           # list of size times the same one-character string, so we only
           # suffer for the list size. (Otherwise, it'd cost another 48 times
           # size in bytes!) Nevertheless, a list of size takes
           # 8*size bytes.
    1:     @bigmemtest(minsize=_2G + 5, memuse=10)
           def test_split_large(self, size):
    1:         s = ' a' * size + ' '
    1:         l = s.split()
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(set(l), set(['a']))
    1:         del l
    1:         l = s.split('a')
    1:         self.assertEqual(len(l), size + 1)
    1:         self.assertEqual(set(l), set([' ']))
       
    1:     @bigmemtest(minsize=_2G, memuse=2.1)
           def test_splitlines(self, size):
               # Crudely calculate an estimate so that the result of s.split won't
               # take up an inordinate amount of memory
    1:         chunksize = int(size ** 0.5 + 2) // 2
    1:         SUBSTR = ' ' * chunksize + '\n' + ' ' * chunksize + '\r\n'
    1:         s = SUBSTR * chunksize
    1:         l = s.splitlines()
    1:         self.assertEqual(len(l), chunksize * 2)
    1:         self.assertEqual(set(l), set([' ' * chunksize]))
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_startswith(self, size):
    1:         SUBSTR = ' abc def ghi'
    1:         s = '-' * size + SUBSTR
    1:         self.assertTrue(s.startswith(s))
    1:         self.assertTrue(s.startswith('-' * size))
    1:         self.assertFalse(s.startswith(SUBSTR))
       
    1:     @bigmemtest(minsize=_2G, memuse=1)
           def test_strip(self, size):
    1:         SUBSTR = '   abc def ghi   '
    1:         s = SUBSTR.rjust(size)
    1:         self.assertEqual(len(s), size)
    1:         self.assertEqual(s.strip(), SUBSTR.strip())
    1:         del s
    1:         s = SUBSTR.ljust(size)
    1:         self.assertEqual(len(s), size)
    1:         self.assertEqual(s.strip(), SUBSTR.strip())
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_swapcase(self, size):
    1:         SUBSTR = "aBcDeFG12.'\xa9\x00"
    1:         sublen = len(SUBSTR)
    1:         repeats = size // sublen + 2
    1:         s = SUBSTR * repeats
    1:         s = s.swapcase()
    1:         self.assertEqual(len(s), sublen * repeats)
    1:         self.assertEqual(s[:sublen * 3], SUBSTR.swapcase() * 3)
    1:         self.assertEqual(s[-sublen * 3:], SUBSTR.swapcase() * 3)
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_title(self, size):
    1:         SUBSTR = 'SpaaHAaaAaham'
    1:         s = SUBSTR * (size // len(SUBSTR) + 2)
    1:         s = s.title()
    1:         self.assertTrue(s.startswith((SUBSTR * 3).title()))
    1:         self.assertTrue(s.endswith(SUBSTR.lower() * 3))
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_translate(self, size):
    1:         trans = string.maketrans('.aZ', '-!$')
    1:         SUBSTR = 'aZz.z.Aaz.'
    1:         sublen = len(SUBSTR)
    1:         repeats = size // sublen + 2
    1:         s = SUBSTR * repeats
    1:         s = s.translate(trans)
    1:         self.assertEqual(len(s), repeats * sublen)
    1:         self.assertEqual(s[:sublen], SUBSTR.translate(trans))
    1:         self.assertEqual(s[-sublen:], SUBSTR.translate(trans))
    1:         self.assertEqual(s.count('.'), 0)
    1:         self.assertEqual(s.count('!'), repeats * 2)
    1:         self.assertEqual(s.count('z'), repeats * 3)
       
    1:     @bigmemtest(minsize=_2G + 5, memuse=2)
           def test_upper(self, size):
    1:         s = 'a' * size
    1:         s = s.upper()
    1:         self.assertEqual(len(s), size)
    1:         self.assertEqual(s.count('A'), size)
       
    1:     @bigmemtest(minsize=_2G + 20, memuse=1)
           def test_zfill(self, size):
    1:         SUBSTR = '-568324723598234'
    1:         s = SUBSTR.zfill(size)
    1:         self.assertTrue(s.endswith('0' + SUBSTR[1:]))
    1:         self.assertTrue(s.startswith('-0'))
    1:         self.assertEqual(len(s), size)
    1:         self.assertEqual(s.count('0'), size - len(SUBSTR))
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=2)
           def test_format(self, size):
    1:         s = '-' * size
    1:         sf = '%s' % (s,)
    1:         self.assertTrue(s == sf)
    1:         del sf
    1:         sf = '..%s..' % (s,)
    1:         self.assertEqual(len(sf), len(s) + 4)
    1:         self.assertTrue(sf.startswith('..-'))
    1:         self.assertTrue(sf.endswith('-..'))
    1:         del s, sf
       
    1:         size //= 2
    1:         edge = '-' * size
    1:         s = ''.join([edge, '%s', edge])
    1:         del edge
    1:         s = s % '...'
    1:         self.assertEqual(len(s), size * 2 + 3)
    1:         self.assertEqual(s.count('.'), 3)
    1:         self.assertEqual(s.count('-'), size * 2)
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=5)
           def test_repr_small(self, size):
    1:         s = '-' * size
    1:         s = repr(s)
    1:         self.assertEqual(len(s), size + 2)
    1:         self.assertEqual(s[0], "'")
    1:         self.assertEqual(s[-1], "'")
    1:         self.assertEqual(s.count('-'), size)
    1:         del s
               # repr() will create a string four times as large as this 'binary
               # string', but we don't want to allocate much more than twice
               # size in total.  (We do extra testing in test_repr_large())
    1:         s = '\x00' * size
    1:         s = repr(s)
    1:         self.assertEqual(len(s), size * 4 + 2)
    1:         self.assertEqual(s[0], "'")
    1:         self.assertEqual(s[-1], "'")
    1:         self.assertEqual(s.count('\\'), size)
    1:         self.assertEqual(s.count('0'), size * 2)
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=5)
           def test_repr_large(self, size):
    1:         s = '\x00' * size
    1:         s = repr(s)
    1:         self.assertEqual(len(s), size * 4 + 2)
    1:         self.assertEqual(s[0], "'")
    1:         self.assertEqual(s[-1], "'")
    1:         self.assertEqual(s.count('\\'), size)
    1:         self.assertEqual(s.count('0'), size * 2)
       
    1:     @test_support.requires_unicode
    1:     @bigmemtest(minsize=2**32 // 6, memuse=character_size + 6)
           def test_unicode_repr(self, size):
    1:         s = unichr(0xABCD) * size
    1:         try:
    1:             r = repr(s)
    1:             self.assertEqual(len(r), 3 + 6 * size)
    1:             self.assertTrue(r.endswith(r"\uabcd'"), r[-10:])
               finally:
    1:             s = r = None
       
    1:     @test_support.requires_unicode
    1:     @precisionbigmemtest(size=_4G // 6 + 1, memuse=character_size + 6)
           def test_unicode_repr_oflw(self, size):
    1:         s = unichr(0xABCD) * size
    1:         try:
    1:             r = repr(s)
    1:             self.assertEqual(len(r), 3 + 6 * size)
    1:             self.assertTrue(r.endswith(r"\uabcd'"), r[-10:])
               finally:
    1:             r = s = None
       
           # This test is meaningful even with size < 2G, as long as the
           # doubled string is > 2G (but it tests more if both are > 2G :)
    1:     @bigmemtest(minsize=_1G + 2, memuse=3)
           def test_concat(self, size):
    1:         s = '.' * size
    1:         self.assertEqual(len(s), size)
    1:         s = s + s
    1:         self.assertEqual(len(s), size * 2)
    1:         self.assertEqual(s.count('.'), size * 2)
       
           # This test is meaningful even with size < 2G, as long as the
           # repeated string is > 2G (but it tests more if both are > 2G :)
    1:     @bigmemtest(minsize=_1G + 2, memuse=3)
           def test_repeat(self, size):
    1:         s = '.' * size
    1:         self.assertEqual(len(s), size)
    1:         s = s * 2
    1:         self.assertEqual(len(s), size * 2)
    1:         self.assertEqual(s.count('.'), size * 2)
       
    1:     @bigmemtest(minsize=_2G + 20, memuse=2)
           def test_slice_and_getitem(self, size):
    1:         SUBSTR = '0123456789'
    1:         sublen = len(SUBSTR)
    1:         s = SUBSTR * (size // sublen)
    1:         stepsize = len(s) // 100
    1:         stepsize = stepsize - (stepsize % sublen)
  103:         for i in range(0, len(s) - stepsize, stepsize):
  102:             self.assertEqual(s[i], SUBSTR[0])
  102:             self.assertEqual(s[i:i + sublen], SUBSTR)
  102:             self.assertEqual(s[i:i + sublen:2], SUBSTR[::2])
  102:             if i > 0:
  101:                 self.assertEqual(s[i + sublen - 1:i - 1:-3],
  101:                                  SUBSTR[sublen::-3])
               # Make sure we do some slicing and indexing near the end of the
               # string, too.
    1:         self.assertEqual(s[len(s) - 1], SUBSTR[-1])
    1:         self.assertEqual(s[-1], SUBSTR[-1])
    1:         self.assertEqual(s[len(s) - 10], SUBSTR[0])
    1:         self.assertEqual(s[-sublen], SUBSTR[0])
    1:         self.assertEqual(s[len(s):], '')
    1:         self.assertEqual(s[len(s) - 1:], SUBSTR[-1])
    1:         self.assertEqual(s[-1:], SUBSTR[-1])
    1:         self.assertEqual(s[len(s) - sublen:], SUBSTR)
    1:         self.assertEqual(s[-sublen:], SUBSTR)
    1:         self.assertEqual(len(s[:]), len(s))
    1:         self.assertEqual(len(s[:len(s) - 5]), len(s) - 5)
    1:         self.assertEqual(len(s[5:-5]), len(s) - 10)
       
    1:         self.assertRaises(IndexError, operator.getitem, s, len(s))
    1:         self.assertRaises(IndexError, operator.getitem, s, len(s) + 1)
    1:         self.assertRaises(IndexError, operator.getitem, s, len(s) + 1<<31)
       
    1:     @bigmemtest(minsize=_2G, memuse=2)
           def test_contains(self, size):
    1:         SUBSTR = '0123456789'
    1:         edge = '-' * (size // 2)
    1:         s = ''.join([edge, SUBSTR, edge])
    1:         del edge
    1:         self.assertIn(SUBSTR, s)
    1:         self.assertNotIn(SUBSTR * 2, s)
    1:         self.assertIn('-', s)
    1:         self.assertNotIn('a', s)
    1:         s += 'a'
    1:         self.assertIn('a', s)
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=2)
           def test_compare(self, size):
    1:         s1 = '-' * size
    1:         s2 = '-' * size
    1:         self.assertTrue(s1 == s2)
    1:         del s2
    1:         s2 = s1 + 'a'
    1:         self.assertFalse(s1 == s2)
    1:         del s2
    1:         s2 = '.' * size
    1:         self.assertFalse(s1 == s2)
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=1)
           def test_hash(self, size):
               # Not sure if we can do any meaningful tests here...  Even if we
               # start relying on the exact algorithm used, the result will be
               # different depending on the size of the C 'long int'.  Even this
               # test is dodgy (there's no *guarantee* that the two things should
               # have a different hash, even if they, in the current
               # implementation, almost always do.)
    1:         s = '\x00' * size
    1:         h1 = hash(s)
    1:         del s
    1:         s = '\x00' * (size + 1)
    1:         self.assertFalse(h1 == hash(s))
       
    2: class TupleTest(unittest.TestCase):
       
           # Tuples have a small, fixed-sized head and an array of pointers to
           # data.  Since we're testing 64-bit addressing, we can assume that the
           # pointers are 8 bytes, and that thus that the tuples take up 8 bytes
           # per size.
       
           # As a side-effect of testing long tuples, these tests happen to test
           # having more than 2<<31 references to any given object. Hence the
           # use of different types of objects as contents in different tests.
       
    1:     @bigmemtest(minsize=_2G + 2, memuse=16)
           def test_compare(self, size):
    1:         t1 = (u'',) * size
    1:         t2 = (u'',) * size
    1:         self.assertTrue(t1 == t2)
    1:         del t2
    1:         t2 = (u'',) * (size + 1)
    1:         self.assertFalse(t1 == t2)
    1:         del t2
    1:         t2 = (1,) * size
    1:         self.assertFalse(t1 == t2)
       
           # Test concatenating into a single tuple of more than 2G in length,
           # and concatenating a tuple of more than 2G in length separately, so
           # the smaller test still gets run even if there isn't memory for the
           # larger test (but we still let the tester know the larger test is
           # skipped, in verbose mode.)
    1:     def basic_concat_test(self, size):
    2:         t = ((),) * size
    2:         self.assertEqual(len(t), size)
    2:         t = t + t
    2:         self.assertEqual(len(t), size * 2)
       
    1:     @bigmemtest(minsize=_2G // 2 + 2, memuse=24)
           def test_concat_small(self, size):
    1:         return self.basic_concat_test(size)
       
    1:     @bigmemtest(minsize=_2G + 2, memuse=24)
           def test_concat_large(self, size):
    1:         return self.basic_concat_test(size)
       
    1:     @bigmemtest(minsize=_2G // 5 + 10, memuse=8 * 5)
           def test_contains(self, size):
    1:         t = (1, 2, 3, 4, 5) * size
    1:         self.assertEqual(len(t), size * 5)
    1:         self.assertIn(5, t)
    1:         self.assertNotIn((1, 2, 3, 4, 5), t)
    1:         self.assertNotIn(0, t)
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=8)
           def test_hash(self, size):
    1:         t1 = (0,) * size
    1:         h1 = hash(t1)
    1:         del t1
    1:         t2 = (0,) * (size + 1)
    1:         self.assertFalse(h1 == hash(t2))
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=8)
           def test_index_and_slice(self, size):
    1:         t = (None,) * size
    1:         self.assertEqual(len(t), size)
    1:         self.assertEqual(t[-1], None)
    1:         self.assertEqual(t[5], None)
    1:         self.assertEqual(t[size - 1], None)
    1:         self.assertRaises(IndexError, operator.getitem, t, size)
    1:         self.assertEqual(t[:5], (None,) * 5)
    1:         self.assertEqual(t[-5:], (None,) * 5)
    1:         self.assertEqual(t[20:25], (None,) * 5)
    1:         self.assertEqual(t[-25:-20], (None,) * 5)
    1:         self.assertEqual(t[size - 5:], (None,) * 5)
    1:         self.assertEqual(t[size - 5:size], (None,) * 5)
    1:         self.assertEqual(t[size - 6:size - 2], (None,) * 4)
    1:         self.assertEqual(t[size:size], ())
    1:         self.assertEqual(t[size:size+5], ())
       
           # Like test_concat, split in two.
    1:     def basic_test_repeat(self, size):
    3:         t = ('',) * size
    3:         self.assertEqual(len(t), size)
    3:         t = t * 2
    3:         self.assertEqual(len(t), size * 2)
       
    1:     @bigmemtest(minsize=_2G // 2 + 2, memuse=24)
           def test_repeat_small(self, size):
    1:         return self.basic_test_repeat(size)
       
    1:     @bigmemtest(minsize=_2G + 2, memuse=24)
           def test_repeat_large(self, size):
    1:         return self.basic_test_repeat(size)
       
    1:     @bigmemtest(minsize=_1G - 1, memuse=12)
           def test_repeat_large_2(self, size):
    1:         return self.basic_test_repeat(size)
       
    1:     @precisionbigmemtest(size=_1G - 1, memuse=9)
           def test_from_2G_generator(self, size):
    1:         try:
    1:             t = tuple(xrange(size))
>>>>>>         except MemoryError:
>>>>>>             pass # acceptable on 32-bit
               else:
    1:             count = 0
 5148:             for item in t:
 5147:                 self.assertEqual(item, count)
 5147:                 count += 1
    1:             self.assertEqual(count, size)
       
    1:     @precisionbigmemtest(size=_1G - 25, memuse=9)
           def test_from_almost_2G_generator(self, size):
    1:         try:
    1:             t = tuple(xrange(size))
    1:             count = 0
 5148:             for item in t:
 5147:                 self.assertEqual(item, count)
 5147:                 count += 1
    1:             self.assertEqual(count, size)
>>>>>>         except MemoryError:
>>>>>>             pass # acceptable, expected on 32-bit
       
           # Like test_concat, split in two.
    1:     def basic_test_repr(self, size):
    2:         t = (0,) * size
    2:         s = repr(t)
               # The repr of a tuple of 0's is exactly three times the tuple length.
    2:         self.assertEqual(len(s), size * 3)
    2:         self.assertEqual(s[:5], '(0, 0')
    2:         self.assertEqual(s[-5:], '0, 0)')
    2:         self.assertEqual(s.count('0'), size)
       
    1:     @bigmemtest(minsize=_2G // 3 + 2, memuse=8 + 3)
           def test_repr_small(self, size):
    1:         return self.basic_test_repr(size)
       
    1:     @bigmemtest(minsize=_2G + 2, memuse=8 + 3)
           def test_repr_large(self, size):
    1:         return self.basic_test_repr(size)
       
    2: class ListTest(unittest.TestCase):
       
           # Like tuples, lists have a small, fixed-sized head and an array of
           # pointers to data, so 8 bytes per size. Also like tuples, we make the
           # lists hold references to various objects to test their refcount
           # limits.
       
    1:     @bigmemtest(minsize=_2G + 2, memuse=16)
           def test_compare(self, size):
    1:         l1 = [u''] * size
    1:         l2 = [u''] * size
    1:         self.assertTrue(l1 == l2)
    1:         del l2
    1:         l2 = [u''] * (size + 1)
    1:         self.assertFalse(l1 == l2)
    1:         del l2
    1:         l2 = [2] * size
    1:         self.assertFalse(l1 == l2)
       
           # Test concatenating into a single list of more than 2G in length,
           # and concatenating a list of more than 2G in length separately, so
           # the smaller test still gets run even if there isn't memory for the
           # larger test (but we still let the tester know the larger test is
           # skipped, in verbose mode.)
    1:     def basic_test_concat(self, size):
    2:         l = [[]] * size
    2:         self.assertEqual(len(l), size)
    2:         l = l + l
    2:         self.assertEqual(len(l), size * 2)
       
    1:     @bigmemtest(minsize=_2G // 2 + 2, memuse=24)
           def test_concat_small(self, size):
    1:         return self.basic_test_concat(size)
       
    1:     @bigmemtest(minsize=_2G + 2, memuse=24)
           def test_concat_large(self, size):
    1:         return self.basic_test_concat(size)
       
    1:     def basic_test_inplace_concat(self, size):
    2:         l = [sys.stdout] * size
    2:         l += l
    2:         self.assertEqual(len(l), size * 2)
    2:         self.assertTrue(l[0] is l[-1])
    2:         self.assertTrue(l[size - 1] is l[size + 1])
       
    1:     @bigmemtest(minsize=_2G // 2 + 2, memuse=24)
           def test_inplace_concat_small(self, size):
    1:         return self.basic_test_inplace_concat(size)
       
    1:     @bigmemtest(minsize=_2G + 2, memuse=24)
           def test_inplace_concat_large(self, size):
    1:         return self.basic_test_inplace_concat(size)
       
    1:     @bigmemtest(minsize=_2G // 5 + 10, memuse=8 * 5)
           def test_contains(self, size):
    1:         l = [1, 2, 3, 4, 5] * size
    1:         self.assertEqual(len(l), size * 5)
    1:         self.assertIn(5, l)
    1:         self.assertNotIn([1, 2, 3, 4, 5], l)
    1:         self.assertNotIn(0, l)
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=8)
           def test_hash(self, size):
    1:         l = [0] * size
    1:         self.assertRaises(TypeError, hash, l)
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=8)
           def test_index_and_slice(self, size):
    1:         l = [None] * size
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(l[-1], None)
    1:         self.assertEqual(l[5], None)
    1:         self.assertEqual(l[size - 1], None)
    1:         self.assertRaises(IndexError, operator.getitem, l, size)
    1:         self.assertEqual(l[:5], [None] * 5)
    1:         self.assertEqual(l[-5:], [None] * 5)
    1:         self.assertEqual(l[20:25], [None] * 5)
    1:         self.assertEqual(l[-25:-20], [None] * 5)
    1:         self.assertEqual(l[size - 5:], [None] * 5)
    1:         self.assertEqual(l[size - 5:size], [None] * 5)
    1:         self.assertEqual(l[size - 6:size - 2], [None] * 4)
    1:         self.assertEqual(l[size:size], [])
    1:         self.assertEqual(l[size:size+5], [])
       
    1:         l[size - 2] = 5
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(l[-3:], [None, 5, None])
    1:         self.assertEqual(l.count(5), 1)
    1:         self.assertRaises(IndexError, operator.setitem, l, size, 6)
    1:         self.assertEqual(len(l), size)
       
    1:         l[size - 7:] = [1, 2, 3, 4, 5]
    1:         size -= 2
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(l[-7:], [None, None, 1, 2, 3, 4, 5])
       
    1:         l[:7] = [1, 2, 3, 4, 5]
    1:         size -= 2
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(l[:7], [1, 2, 3, 4, 5, None, None])
       
    1:         del l[size - 1]
    1:         size -= 1
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(l[-1], 4)
       
    1:         del l[-2:]
    1:         size -= 2
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(l[-1], 2)
       
    1:         del l[0]
    1:         size -= 1
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(l[0], 2)
       
    1:         del l[:2]
    1:         size -= 2
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(l[0], 4)
       
           # Like test_concat, split in two.
    1:     def basic_test_repeat(self, size):
    2:         l = [] * size
    2:         self.assertFalse(l)
    2:         l = [''] * size
    2:         self.assertEqual(len(l), size)
    2:         l = l * 2
    2:         self.assertEqual(len(l), size * 2)
       
    1:     @bigmemtest(minsize=_2G // 2 + 2, memuse=24)
           def test_repeat_small(self, size):
    1:         return self.basic_test_repeat(size)
       
    1:     @bigmemtest(minsize=_2G + 2, memuse=24)
           def test_repeat_large(self, size):
    1:         return self.basic_test_repeat(size)
       
    1:     def basic_test_inplace_repeat(self, size):
    2:         l = ['']
    2:         l *= size
    2:         self.assertEqual(len(l), size)
    2:         self.assertTrue(l[0] is l[-1])
    2:         del l
       
    2:         l = [''] * size
    2:         l *= 2
    2:         self.assertEqual(len(l), size * 2)
    2:         self.assertTrue(l[size - 1] is l[-1])
       
    1:     @bigmemtest(minsize=_2G // 2 + 2, memuse=16)
           def test_inplace_repeat_small(self, size):
    1:         return self.basic_test_inplace_repeat(size)
       
    1:     @bigmemtest(minsize=_2G + 2, memuse=16)
           def test_inplace_repeat_large(self, size):
    1:         return self.basic_test_inplace_repeat(size)
       
    1:     def basic_test_repr(self, size):
    2:         l = [0] * size
    2:         s = repr(l)
               # The repr of a list of 0's is exactly three times the list length.
    2:         self.assertEqual(len(s), size * 3)
    2:         self.assertEqual(s[:5], '[0, 0')
    2:         self.assertEqual(s[-5:], '0, 0]')
    2:         self.assertEqual(s.count('0'), size)
       
    1:     @bigmemtest(minsize=_2G // 3 + 2, memuse=8 + 3)
           def test_repr_small(self, size):
    1:         return self.basic_test_repr(size)
       
    1:     @bigmemtest(minsize=_2G + 2, memuse=8 + 3)
           def test_repr_large(self, size):
    1:         return self.basic_test_repr(size)
       
           # list overallocates ~1/8th of the total size (on first expansion) so
           # the single list.append call puts memuse at 9 bytes per size.
    1:     @bigmemtest(minsize=_2G, memuse=9)
           def test_append(self, size):
    1:         l = [object()] * size
    1:         l.append(object())
    1:         self.assertEqual(len(l), size+1)
    1:         self.assertTrue(l[-3] is l[-2])
    1:         self.assertFalse(l[-2] is l[-1])
       
    1:     @bigmemtest(minsize=_2G // 5 + 2, memuse=8 * 5)
           def test_count(self, size):
    1:         l = [1, 2, 3, 4, 5] * size
    1:         self.assertEqual(l.count(1), size)
    1:         self.assertEqual(l.count("1"), 0)
       
    1:     def basic_test_extend(self, size):
    2:         l = [file] * size
    2:         l.extend(l)
    2:         self.assertEqual(len(l), size * 2)
    2:         self.assertTrue(l[0] is l[-1])
    2:         self.assertTrue(l[size - 1] is l[size + 1])
       
    1:     @bigmemtest(minsize=_2G // 2 + 2, memuse=16)
           def test_extend_small(self, size):
    1:         return self.basic_test_extend(size)
       
    1:     @bigmemtest(minsize=_2G + 2, memuse=16)
           def test_extend_large(self, size):
    1:         return self.basic_test_extend(size)
       
    1:     @bigmemtest(minsize=_2G // 5 + 2, memuse=8 * 5)
           def test_index(self, size):
    1:         l = [1L, 2L, 3L, 4L, 5L] * size
    1:         size *= 5
    1:         self.assertEqual(l.index(1), 0)
    1:         self.assertEqual(l.index(5, size - 5), size - 1)
    1:         self.assertEqual(l.index(5, size - 5, size), size - 1)
    1:         self.assertRaises(ValueError, l.index, 1, size - 4, size)
    1:         self.assertRaises(ValueError, l.index, 6L)
       
           # This tests suffers from overallocation, just like test_append.
    1:     @bigmemtest(minsize=_2G + 10, memuse=9)
           def test_insert(self, size):
    1:         l = [1.0] * size
    1:         l.insert(size - 1, "A")
    1:         size += 1
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(l[-3:], [1.0, "A", 1.0])
       
    1:         l.insert(size + 1, "B")
    1:         size += 1
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(l[-3:], ["A", 1.0, "B"])
       
    1:         l.insert(1, "C")
    1:         size += 1
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(l[:3], [1.0, "C", 1.0])
    1:         self.assertEqual(l[size - 3:], ["A", 1.0, "B"])
       
    1:     @bigmemtest(minsize=_2G // 5 + 4, memuse=8 * 5)
           def test_pop(self, size):
    1:         l = [u"a", u"b", u"c", u"d", u"e"] * size
    1:         size *= 5
    1:         self.assertEqual(len(l), size)
       
    1:         item = l.pop()
    1:         size -= 1
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(item, u"e")
    1:         self.assertEqual(l[-2:], [u"c", u"d"])
       
    1:         item = l.pop(0)
    1:         size -= 1
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(item, u"a")
    1:         self.assertEqual(l[:2], [u"b", u"c"])
       
    1:         item = l.pop(size - 2)
    1:         size -= 1
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(item, u"c")
    1:         self.assertEqual(l[-2:], [u"b", u"d"])
       
    1:     @bigmemtest(minsize=_2G + 10, memuse=8)
           def test_remove(self, size):
    1:         l = [10] * size
    1:         self.assertEqual(len(l), size)
       
    1:         l.remove(10)
    1:         size -= 1
    1:         self.assertEqual(len(l), size)
       
               # Because of the earlier l.remove(), this append doesn't trigger
               # a resize.
    1:         l.append(5)
    1:         size += 1
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(l[-2:], [10, 5])
    1:         l.remove(5)
    1:         size -= 1
    1:         self.assertEqual(len(l), size)
    1:         self.assertEqual(l[-2:], [10, 10])
       
    1:     @bigmemtest(minsize=_2G // 5 + 2, memuse=8 * 5)
           def test_reverse(self, size):
    1:         l = [1, 2, 3, 4, 5] * size
    1:         l.reverse()
    1:         self.assertEqual(len(l), size * 5)
    1:         self.assertEqual(l[-5:], [5, 4, 3, 2, 1])
    1:         self.assertEqual(l[:5], [5, 4, 3, 2, 1])
       
    1:     @bigmemtest(minsize=_2G // 5 + 2, memuse=8 * 5)
           def test_sort(self, size):
    1:         l = [1, 2, 3, 4, 5] * size
    1:         l.sort()
    1:         self.assertEqual(len(l), size * 5)
    1:         self.assertEqual(l.count(1), size)
    1:         self.assertEqual(l[:10], [1] * 10)
    1:         self.assertEqual(l[-10:], [5] * 10)
       
    2: class BufferTest(unittest.TestCase):
       
    1:     @precisionbigmemtest(size=_1G, memuse=4)
           def test_repeat(self, size):
    1:         try:
    1:             with test_support.check_py3k_warnings():
    1:                 b = buffer("AAAA")*size
>>>>>>         except MemoryError:
>>>>>>             pass # acceptable on 32-bit
               else:
    1:             count = 0
20589:             for c in b:
20588:                 self.assertEqual(c, 'A')
20588:                 count += 1
    1:             self.assertEqual(count, size*4)
       
    1: def test_main():
    1:     test_support.run_unittest(StrTest, TupleTest, ListTest, BufferTest)
       
    1: if __name__ == '__main__':
>>>>>>     if len(sys.argv) > 1:
>>>>>>         test_support.set_memlimit(sys.argv[1])
>>>>>>     test_main()
