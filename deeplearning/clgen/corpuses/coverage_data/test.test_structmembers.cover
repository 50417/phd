    1: import unittest
    1: from test import test_support
       
       # Skip this test if the _testcapi module isn't available.
    1: test_support.import_module('_testcapi')
    1: from _testcapi import _test_structmembersType, \
           CHAR_MAX, CHAR_MIN, UCHAR_MAX, \
           SHRT_MAX, SHRT_MIN, USHRT_MAX, \
           INT_MAX, INT_MIN, UINT_MAX, \
           LONG_MAX, LONG_MIN, ULONG_MAX, \
           LLONG_MAX, LLONG_MIN, ULLONG_MAX
       
    1: ts=_test_structmembersType(False, 1, 2, 3, 4, 5, 6, 7, 8,
    1:                           9.99999, 10.1010101010, "hi")
       
    2: class ReadWriteTests(unittest.TestCase):
       
    1:     def test_bool(self):
    1:         ts.T_BOOL = True
    1:         self.assertEqual(ts.T_BOOL, True)
    1:         ts.T_BOOL = False
    1:         self.assertEqual(ts.T_BOOL, False)
    1:         self.assertRaises(TypeError, setattr, ts, 'T_BOOL', 1)
       
    1:     def test_byte(self):
    1:         ts.T_BYTE = CHAR_MAX
    1:         self.assertEqual(ts.T_BYTE, CHAR_MAX)
    1:         ts.T_BYTE = CHAR_MIN
    1:         self.assertEqual(ts.T_BYTE, CHAR_MIN)
    1:         ts.T_UBYTE = UCHAR_MAX
    1:         self.assertEqual(ts.T_UBYTE, UCHAR_MAX)
       
    1:     def test_short(self):
    1:         ts.T_SHORT = SHRT_MAX
    1:         self.assertEqual(ts.T_SHORT, SHRT_MAX)
    1:         ts.T_SHORT = SHRT_MIN
    1:         self.assertEqual(ts.T_SHORT, SHRT_MIN)
    1:         ts.T_USHORT = USHRT_MAX
    1:         self.assertEqual(ts.T_USHORT, USHRT_MAX)
       
    1:     def test_int(self):
    1:         ts.T_INT = INT_MAX
    1:         self.assertEqual(ts.T_INT, INT_MAX)
    1:         ts.T_INT = INT_MIN
    1:         self.assertEqual(ts.T_INT, INT_MIN)
    1:         ts.T_UINT = UINT_MAX
    1:         self.assertEqual(ts.T_UINT, UINT_MAX)
       
    1:     def test_long(self):
    1:         ts.T_LONG = LONG_MAX
    1:         self.assertEqual(ts.T_LONG, LONG_MAX)
    1:         ts.T_LONG = LONG_MIN
    1:         self.assertEqual(ts.T_LONG, LONG_MIN)
    1:         ts.T_ULONG = ULONG_MAX
    1:         self.assertEqual(ts.T_ULONG, ULONG_MAX)
       
    1:     @unittest.skipUnless(hasattr(ts, "T_LONGLONG"), "long long not present")
           def test_longlong(self):
    1:         ts.T_LONGLONG = LLONG_MAX
    1:         self.assertEqual(ts.T_LONGLONG, LLONG_MAX)
    1:         ts.T_LONGLONG = LLONG_MIN
    1:         self.assertEqual(ts.T_LONGLONG, LLONG_MIN)
       
    1:         ts.T_ULONGLONG = ULLONG_MAX
    1:         self.assertEqual(ts.T_ULONGLONG, ULLONG_MAX)
       
               ## make sure these will accept a plain int as well as a long
    1:         ts.T_LONGLONG = 3
    1:         self.assertEqual(ts.T_LONGLONG, 3)
    1:         ts.T_ULONGLONG = 4
    1:         self.assertEqual(ts.T_ULONGLONG, 4)
       
    1:     def test_inplace_string(self):
    1:         self.assertEqual(ts.T_STRING_INPLACE, "hi")
    1:         self.assertRaises(TypeError, setattr, ts, "T_STRING_INPLACE", "s")
    1:         self.assertRaises(TypeError, delattr, ts, "T_STRING_INPLACE")
       
       
    2: class TestWarnings(unittest.TestCase):
       
    1:     def test_byte_max(self):
    1:         with test_support.check_warnings(('', RuntimeWarning)):
    1:             ts.T_BYTE = CHAR_MAX+1
       
    1:     def test_byte_min(self):
    1:         with test_support.check_warnings(('', RuntimeWarning)):
    1:             ts.T_BYTE = CHAR_MIN-1
       
    1:     def test_ubyte_max(self):
    1:         with test_support.check_warnings(('', RuntimeWarning)):
    1:             ts.T_UBYTE = UCHAR_MAX+1
       
    1:     def test_short_max(self):
    1:         with test_support.check_warnings(('', RuntimeWarning)):
    1:             ts.T_SHORT = SHRT_MAX+1
       
    1:     def test_short_min(self):
    1:         with test_support.check_warnings(('', RuntimeWarning)):
    1:             ts.T_SHORT = SHRT_MIN-1
       
    1:     def test_ushort_max(self):
    1:         with test_support.check_warnings(('', RuntimeWarning)):
    1:             ts.T_USHORT = USHRT_MAX+1
       
       
    1: def test_main(verbose=None):
    1:     test_support.run_unittest(__name__)
       
    1: if __name__ == "__main__":
>>>>>>     test_main(verbose=True)
