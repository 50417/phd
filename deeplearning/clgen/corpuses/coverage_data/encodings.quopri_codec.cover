       """Codec for quoted-printable encoding.
       
       Like base64 and rot13, this returns Python strings, not Unicode.
    1: """
       
    1: import codecs, quopri
    1: try:
    1:     from cStringIO import StringIO
>>>>>> except ImportError:
>>>>>>     from StringIO import StringIO
       
    1: def quopri_encode(input, errors='strict'):
           """Encode the input, returning a tuple (output object, length consumed).
       
           errors defines the error handling to apply. It defaults to
           'strict' handling which is the only currently supported
           error handling for this codec.
       
           """
    2:     assert errors == 'strict'
           # using str() because of cStringIO's Unicode undesired Unicode behavior.
    2:     f = StringIO(str(input))
    2:     g = StringIO()
    2:     quopri.encode(f, g, quotetabs=True)
    2:     output = g.getvalue()
    2:     return (output, len(input))
       
    1: def quopri_decode(input, errors='strict'):
           """Decode the input, returning a tuple (output object, length consumed).
       
           errors defines the error handling to apply. It defaults to
           'strict' handling which is the only currently supported
           error handling for this codec.
       
           """
    9:     assert errors == 'strict'
    9:     f = StringIO(str(input))
    9:     g = StringIO()
    9:     quopri.decode(f, g)
    9:     output = g.getvalue()
    9:     return (output, len(input))
       
    2: class Codec(codecs.Codec):
       
    1:     def encode(self, input,errors='strict'):
>>>>>>         return quopri_encode(input,errors)
    1:     def decode(self, input,errors='strict'):
>>>>>>         return quopri_decode(input,errors)
       
    2: class IncrementalEncoder(codecs.IncrementalEncoder):
    1:     def encode(self, input, final=False):
>>>>>>         return quopri_encode(input, self.errors)[0]
       
    2: class IncrementalDecoder(codecs.IncrementalDecoder):
    1:     def decode(self, input, final=False):
    7:         return quopri_decode(input, self.errors)[0]
       
    2: class StreamWriter(Codec, codecs.StreamWriter):
    1:     pass
       
    2: class StreamReader(Codec,codecs.StreamReader):
    1:     pass
       
       # encodings module API
       
    1: def getregentry():
    2:     return codecs.CodecInfo(
    2:         name='quopri',
    2:         encode=quopri_encode,
    2:         decode=quopri_decode,
    2:         incrementalencoder=IncrementalEncoder,
    2:         incrementaldecoder=IncrementalDecoder,
    2:         streamwriter=StreamWriter,
    2:         streamreader=StreamReader,
    2:         _is_text_encoding=False,
           )
