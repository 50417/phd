    1: from Tkinter import *
    1: from idlelib import macosxSupport
       
    2: class ScrolledList:
       
    1:     default = "(None)"
       
    1:     def __init__(self, master, **options):
               # Create top frame, with scrollbar and listbox
>>>>>>         self.master = master
>>>>>>         self.frame = frame = Frame(master)
>>>>>>         self.frame.pack(fill="both", expand=1)
>>>>>>         self.vbar = vbar = Scrollbar(frame, name="vbar")
>>>>>>         self.vbar.pack(side="right", fill="y")
>>>>>>         self.listbox = listbox = Listbox(frame, exportselection=0,
>>>>>>             background="white")
>>>>>>         if options:
>>>>>>             listbox.configure(options)
>>>>>>         listbox.pack(expand=1, fill="both")
               # Tie listbox and scrollbar together
>>>>>>         vbar["command"] = listbox.yview
>>>>>>         listbox["yscrollcommand"] = vbar.set
               # Bind events to the list box
>>>>>>         listbox.bind("<ButtonRelease-1>", self.click_event)
>>>>>>         listbox.bind("<Double-ButtonRelease-1>", self.double_click_event)
>>>>>>         if macosxSupport.isAquaTk():
>>>>>>             listbox.bind("<ButtonPress-2>", self.popup_event)
>>>>>>             listbox.bind("<Control-Button-1>", self.popup_event)
               else:
>>>>>>             listbox.bind("<ButtonPress-3>", self.popup_event)
>>>>>>         listbox.bind("<Key-Up>", self.up_event)
>>>>>>         listbox.bind("<Key-Down>", self.down_event)
               # Mark as empty
>>>>>>         self.clear()
       
    1:     def close(self):
>>>>>>         self.frame.destroy()
       
    1:     def clear(self):
>>>>>>         self.listbox.delete(0, "end")
>>>>>>         self.empty = 1
>>>>>>         self.listbox.insert("end", self.default)
       
    1:     def append(self, item):
>>>>>>         if self.empty:
>>>>>>             self.listbox.delete(0, "end")
>>>>>>             self.empty = 0
>>>>>>         self.listbox.insert("end", str(item))
       
    1:     def get(self, index):
>>>>>>         return self.listbox.get(index)
       
    1:     def click_event(self, event):
>>>>>>         self.listbox.activate("@%d,%d" % (event.x, event.y))
>>>>>>         index = self.listbox.index("active")
>>>>>>         self.select(index)
>>>>>>         self.on_select(index)
>>>>>>         return "break"
       
    1:     def double_click_event(self, event):
>>>>>>         index = self.listbox.index("active")
>>>>>>         self.select(index)
>>>>>>         self.on_double(index)
>>>>>>         return "break"
       
    1:     menu = None
       
    1:     def popup_event(self, event):
>>>>>>         if not self.menu:
>>>>>>             self.make_menu()
>>>>>>         menu = self.menu
>>>>>>         self.listbox.activate("@%d,%d" % (event.x, event.y))
>>>>>>         index = self.listbox.index("active")
>>>>>>         self.select(index)
>>>>>>         menu.tk_popup(event.x_root, event.y_root)
       
    1:     def make_menu(self):
>>>>>>         menu = Menu(self.listbox, tearoff=0)
>>>>>>         self.menu = menu
>>>>>>         self.fill_menu()
       
    1:     def up_event(self, event):
>>>>>>         index = self.listbox.index("active")
>>>>>>         if self.listbox.selection_includes(index):
>>>>>>             index = index - 1
               else:
>>>>>>             index = self.listbox.size() - 1
>>>>>>         if index < 0:
>>>>>>             self.listbox.bell()
               else:
>>>>>>             self.select(index)
>>>>>>             self.on_select(index)
>>>>>>         return "break"
       
    1:     def down_event(self, event):
>>>>>>         index = self.listbox.index("active")
>>>>>>         if self.listbox.selection_includes(index):
>>>>>>             index = index + 1
               else:
>>>>>>             index = 0
>>>>>>         if index >= self.listbox.size():
>>>>>>             self.listbox.bell()
               else:
>>>>>>             self.select(index)
>>>>>>             self.on_select(index)
>>>>>>         return "break"
       
    1:     def select(self, index):
>>>>>>         self.listbox.focus_set()
>>>>>>         self.listbox.activate(index)
>>>>>>         self.listbox.selection_clear(0, "end")
>>>>>>         self.listbox.selection_set(index)
>>>>>>         self.listbox.see(index)
       
           # Methods to override for specific actions
       
    1:     def fill_menu(self):
>>>>>>         pass
       
    1:     def on_select(self, index):
>>>>>>         pass
       
    1:     def on_double(self, index):
>>>>>>         pass
       
       
    1: def _scrolled_list(parent):
>>>>>>     root = Tk()
>>>>>>     root.title("Test ScrolledList")
>>>>>>     width, height, x, y = list(map(int, re.split('[x+]', parent.geometry())))
>>>>>>     root.geometry("+%d+%d"%(x, y + 150))
>>>>>>     class MyScrolledList(ScrolledList):
>>>>>>         def fill_menu(self): self.menu.add_command(label="right click")
>>>>>>         def on_select(self, index): print "select", self.get(index)
>>>>>>         def on_double(self, index): print "double", self.get(index)
       
>>>>>>     scrolled_list = MyScrolledList(root)
>>>>>>     for i in range(30):
>>>>>>         scrolled_list.append("Item %02d" % i)
       
>>>>>>     root.mainloop()
       
    1: if __name__ == '__main__':
>>>>>>     from idlelib.idle_test.htest import run
>>>>>>     run(_scrolled_list)
