       # Test the module type
    1: import unittest
    1: from test.test_support import run_unittest, gc_collect
       
    1: import sys
    1: ModuleType = type(sys)
       
    2: class ModuleTests(unittest.TestCase):
    1:     def test_uninitialized(self):
               # An uninitialized module has no __dict__ or __name__,
               # and __doc__ is None
    1:         foo = ModuleType.__new__(ModuleType)
    1:         self.assertTrue(foo.__dict__ is None)
    1:         self.assertRaises(SystemError, dir, foo)
    1:         try:
    1:             s = foo.__name__
>>>>>>             self.fail("__name__ = %s" % repr(s))
    1:         except AttributeError:
    1:             pass
    1:         self.assertEqual(foo.__doc__, ModuleType.__doc__)
       
    1:     def test_no_docstring(self):
               # Regularly initialized module, no docstring
    1:         foo = ModuleType("foo")
    1:         self.assertEqual(foo.__name__, "foo")
    1:         self.assertEqual(foo.__doc__, None)
    1:         self.assertEqual(foo.__dict__, {"__name__": "foo", "__doc__": None})
       
    1:     def test_ascii_docstring(self):
               # ASCII docstring
    1:         foo = ModuleType("foo", "foodoc")
    1:         self.assertEqual(foo.__name__, "foo")
    1:         self.assertEqual(foo.__doc__, "foodoc")
    1:         self.assertEqual(foo.__dict__,
    1:                          {"__name__": "foo", "__doc__": "foodoc"})
       
    1:     def test_unicode_docstring(self):
               # Unicode docstring
    1:         foo = ModuleType("foo", u"foodoc\u1234")
    1:         self.assertEqual(foo.__name__, "foo")
    1:         self.assertEqual(foo.__doc__, u"foodoc\u1234")
    1:         self.assertEqual(foo.__dict__,
    1:                          {"__name__": "foo", "__doc__": u"foodoc\u1234"})
       
    1:     def test_reinit(self):
               # Reinitialization should not replace the __dict__
    1:         foo = ModuleType("foo", u"foodoc\u1234")
    1:         foo.bar = 42
    1:         d = foo.__dict__
    1:         foo.__init__("foo", "foodoc")
    1:         self.assertEqual(foo.__name__, "foo")
    1:         self.assertEqual(foo.__doc__, "foodoc")
    1:         self.assertEqual(foo.bar, 42)
    1:         self.assertEqual(foo.__dict__,
    1:               {"__name__": "foo", "__doc__": "foodoc", "bar": 42})
    1:         self.assertTrue(foo.__dict__ is d)
       
    1:     @unittest.expectedFailure
           def test_dont_clear_dict(self):
               # See issue 7140.
    1:         def f():
    1:             foo = ModuleType("foo")
    1:             foo.bar = 4
    1:             return foo
    1:         gc_collect()
    1:         self.assertEqual(f().__dict__["bar"], 4)
       
    1:     def test_clear_dict_in_ref_cycle(self):
    1:         destroyed = []
    1:         m = ModuleType("foo")
    1:         m.destroyed = destroyed
               s = """class A:
           def __del__(self, destroyed=destroyed):
               destroyed.append(1)
    1: a = A()"""
    1:         exec(s, m.__dict__)
    1:         del m
    1:         gc_collect()
    1:         self.assertEqual(destroyed, [1])
       
    1: def test_main():
    1:     run_unittest(ModuleTests)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
