       """
          Test cases for codeop.py
          Nick Mathewson
    1: """
    1: import unittest
    1: from test.test_support import run_unittest, is_jython
       
    1: from codeop import compile_command, PyCF_DONT_IMPLY_DEDENT
       
    1: if is_jython:
>>>>>>     import sys
>>>>>>     import cStringIO
       
>>>>>>     def unify_callables(d):
>>>>>>         for n,v in d.items():
>>>>>>             if callable(v):
>>>>>>                 d[n] = callable
>>>>>>         return d
       
    2: class CodeopTests(unittest.TestCase):
       
    1:     def assertValid(self, str, symbol='single'):
               '''succeed iff str is a valid piece of code'''
   37:         if is_jython:
>>>>>>             code = compile_command(str, "<input>", symbol)
>>>>>>             self.assertTrue(code)
>>>>>>             if symbol == "single":
>>>>>>                 d,r = {},{}
>>>>>>                 saved_stdout = sys.stdout
>>>>>>                 sys.stdout = cStringIO.StringIO()
>>>>>>                 try:
>>>>>>                     exec code in d
>>>>>>                     exec compile(str,"<input>","single") in r
                       finally:
>>>>>>                     sys.stdout = saved_stdout
>>>>>>             elif symbol == 'eval':
>>>>>>                 ctx = {'a': 2}
>>>>>>                 d = { 'value': eval(code,ctx) }
>>>>>>                 r = { 'value': eval(str,ctx) }
>>>>>>             self.assertEqual(unify_callables(r),unify_callables(d))
               else:
   37:             expected = compile(str, "<input>", symbol, PyCF_DONT_IMPLY_DEDENT)
   37:             self.assertEqual(compile_command(str, "<input>", symbol), expected)
       
    1:     def assertIncomplete(self, str, symbol='single'):
               '''succeed iff str is the start of a valid piece of code'''
  102:         self.assertEqual(compile_command(str, symbol=symbol), None)
       
    1:     def assertInvalid(self, str, symbol='single', is_syntax=1):
               '''succeed iff str is the start of an invalid piece of code'''
   27:         try:
   27:             compile_command(str,symbol=symbol)
>>>>>>             self.fail("No exception raised for invalid code")
   27:         except SyntaxError:
   27:             self.assertTrue(is_syntax)
>>>>>>         except OverflowError:
>>>>>>             self.assertTrue(not is_syntax)
       
    1:     def test_valid(self):
    1:         av = self.assertValid
       
               # special case
    1:         if not is_jython:
    1:             self.assertEqual(compile_command(""),
    1:                              compile("pass", "<input>", 'single',
    1:                                      PyCF_DONT_IMPLY_DEDENT))
    1:             self.assertEqual(compile_command("\n"),
    1:                              compile("pass", "<input>", 'single',
    1:                                      PyCF_DONT_IMPLY_DEDENT))
               else:
>>>>>>             av("")
>>>>>>             av("\n")
       
    1:         av("a = 1")
    1:         av("\na = 1")
    1:         av("a = 1\n")
    1:         av("a = 1\n\n")
    1:         av("\n\na = 1\n\n")
       
    1:         av("def x():\n  pass\n")
    1:         av("if 1:\n pass\n")
       
    1:         av("\n\nif 1: pass\n")
    1:         av("\n\nif 1: pass\n\n")
       
    1:         av("def x():\n\n pass\n")
    1:         av("def x():\n  pass\n  \n")
    1:         av("def x():\n  pass\n \n")
       
    1:         av("pass\n")
    1:         av("3**3\n")
       
    1:         av("if 9==3:\n   pass\nelse:\n   pass\n")
    1:         av("if 1:\n pass\n if 1:\n  pass\n else:\n  pass\n")
       
    1:         av("#a\n#b\na = 3\n")
    1:         av("#a\n\n   \na=3\n")
    1:         av("a=3\n\n")
    1:         av("a = 9+ \\\n3")
       
    1:         av("3**3","eval")
    1:         av("(lambda z: \n z**3)","eval")
       
    1:         av("9+ \\\n3","eval")
    1:         av("9+ \\\n3\n","eval")
       
    1:         av("\n\na**3","eval")
    1:         av("\n \na**3","eval")
    1:         av("#a\n#b\na**3","eval")
       
    1:         av("\n\na = 1\n\n")
    1:         av("\n\nif 1: a=1\n\n")
       
    1:         av("if 1:\n pass\n if 1:\n  pass\n else:\n  pass\n")
    1:         av("#a\n\n   \na=3\n\n")
       
    1:         av("\n\na**3","eval")
    1:         av("\n \na**3","eval")
    1:         av("#a\n#b\na**3","eval")
       
    1:         av("def f():\n try: pass\n finally: [x for x in (1,2)]\n")
    1:         av("def f():\n pass\n#foo\n")
    1:         av("@a.b.c\ndef f():\n pass\n")
       
    1:     def test_incomplete(self):
    1:         ai = self.assertIncomplete
       
    1:         ai("(a **")
    1:         ai("(a,b,")
    1:         ai("(a,b,(")
    1:         ai("(a,b,(")
    1:         ai("a = (")
    1:         ai("a = {")
    1:         ai("b + {")
       
    1:         ai("if 9==3:\n   pass\nelse:")
    1:         ai("if 9==3:\n   pass\nelse:\n")
    1:         ai("if 9==3:\n   pass\nelse:\n   pass")
    1:         ai("if 1:")
    1:         ai("if 1:\n")
    1:         ai("if 1:\n pass\n if 1:\n  pass\n else:")
    1:         ai("if 1:\n pass\n if 1:\n  pass\n else:\n")
    1:         ai("if 1:\n pass\n if 1:\n  pass\n else:\n  pass")
       
    1:         ai("def x():")
    1:         ai("def x():\n")
    1:         ai("def x():\n\n")
       
    1:         ai("def x():\n  pass")
    1:         ai("def x():\n  pass\n ")
    1:         ai("def x():\n  pass\n  ")
    1:         ai("\n\ndef x():\n  pass")
       
    1:         ai("a = 9+ \\")
    1:         ai("a = 'a\\")
    1:         ai("a = '''xy")
       
    1:         ai("","eval")
    1:         ai("\n","eval")
    1:         ai("(","eval")
    1:         ai("(\n\n\n","eval")
    1:         ai("(9+","eval")
    1:         ai("9+ \\","eval")
    1:         ai("lambda z: \\","eval")
       
    1:         ai("if True:\n if True:\n  if True:   \n")
       
    1:         ai("@a(")
    1:         ai("@a(b")
    1:         ai("@a(b,")
    1:         ai("@a(b,c")
    1:         ai("@a(b,c,")
       
    1:         ai("from a import (")
    1:         ai("from a import (b")
    1:         ai("from a import (b,")
    1:         ai("from a import (b,c")
    1:         ai("from a import (b,c,")
       
    1:         ai("[");
    1:         ai("[a");
    1:         ai("[a,");
    1:         ai("[a,b");
    1:         ai("[a,b,");
       
    1:         ai("{");
    1:         ai("{a");
    1:         ai("{a:");
    1:         ai("{a:b");
    1:         ai("{a:b,");
    1:         ai("{a:b,c");
    1:         ai("{a:b,c:");
    1:         ai("{a:b,c:d");
    1:         ai("{a:b,c:d,");
       
    1:         ai("a(")
    1:         ai("a(b")
    1:         ai("a(b,")
    1:         ai("a(b,c")
    1:         ai("a(b,c,")
       
    1:         ai("a[")
    1:         ai("a[b")
    1:         ai("a[b,")
    1:         ai("a[b:")
    1:         ai("a[b:c")
    1:         ai("a[b:c:")
    1:         ai("a[b:c:d")
       
    1:         ai("def a(")
    1:         ai("def a(b")
    1:         ai("def a(b,")
    1:         ai("def a(b,c")
    1:         ai("def a(b,c,")
       
    1:         ai("(")
    1:         ai("(a")
    1:         ai("(a,")
    1:         ai("(a,b")
    1:         ai("(a,b,")
       
    1:         ai("if a:\n pass\nelif b:")
    1:         ai("if a:\n pass\nelif b:\n pass\nelse:")
       
    1:         ai("while a:")
    1:         ai("while a:\n pass\nelse:")
       
    1:         ai("for a in b:")
    1:         ai("for a in b:\n pass\nelse:")
       
    1:         ai("try:")
    1:         ai("try:\n pass\nexcept:")
    1:         ai("try:\n pass\nfinally:")
    1:         ai("try:\n pass\nexcept:\n pass\nfinally:")
       
    1:         ai("with a:")
    1:         ai("with a as b:")
       
    1:         ai("class a:")
    1:         ai("class a(")
    1:         ai("class a(b")
    1:         ai("class a(b,")
    1:         ai("class a():")
       
    1:         ai("[x for")
    1:         ai("[x for x in")
    1:         ai("[x for x in (")
       
    1:         ai("(x for")
    1:         ai("(x for x in")
    1:         ai("(x for x in (")
       
    1:     def test_invalid(self):
    1:         ai = self.assertInvalid
    1:         ai("a b")
       
    1:         ai("a @")
    1:         ai("a b @")
    1:         ai("a ** @")
       
    1:         ai("a = ")
    1:         ai("a = 9 +")
       
    1:         ai("def x():\n\npass\n")
       
    1:         ai("\n\n if 1: pass\n\npass")
       
    1:         ai("a = 9+ \\\n")
    1:         ai("a = 'a\\ ")
    1:         ai("a = 'a\\\n")
       
    1:         ai("a = 1","eval")
    1:         ai("a = (","eval")
    1:         ai("]","eval")
    1:         ai("())","eval")
    1:         ai("[}","eval")
    1:         ai("9+","eval")
    1:         ai("lambda z:","eval")
    1:         ai("a b","eval")
       
    1:         ai("return 2.3")
    1:         ai("if (a == 1 and b = 2): pass")
       
    1:         ai("del 1")
    1:         ai("del ()")
    1:         ai("del (1,)")
    1:         ai("del [1]")
    1:         ai("del '1'")
       
    1:         ai("[i for i in range(10)] = (1, 2, 3)")
       
    1:     def test_filename(self):
    1:         self.assertEqual(compile_command("a = 1\n", "abc").co_filename,
    1:                          compile("a = 1\n", "abc", 'single').co_filename)
    1:         self.assertNotEqual(compile_command("a = 1\n", "abc").co_filename,
    1:                             compile("a = 1\n", "def", 'single').co_filename)
       
       
    1: def test_main():
    1:     run_unittest(CodeopTests)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
