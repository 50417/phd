       """Parse a Python module and describe its classes and methods.
       
       Parse enough of a Python file to recognize imports and class and
       method definitions, and to find out the superclasses of a class.
       
       The interface consists of a single function:
               readmodule_ex(module [, path])
       where module is the name of a Python module, and path is an optional
       list of directories where the module is to be searched.  If present,
       path is prepended to the system search path sys.path.  The return
       value is a dictionary.  The keys of the dictionary are the names of
       the classes defined in the module (including classes that are defined
       via the from XXX import YYY construct).  The values are class
       instances of the class Class defined here.  One special key/value pair
       is present for packages: the key '__path__' has a list as its value
       which contains the package search path.
       
       A class is described by the class Class in this module.  Instances
       of this class have the following instance variables:
               module -- the module name
               name -- the name of the class
               super -- a list of super classes (Class instances)
               methods -- a dictionary of methods
               file -- the file in which the class was defined
               lineno -- the line in the file on which the class statement occurred
       The dictionary of methods uses the method names as keys and the line
       numbers on which the method was defined as values.
       If the name of a super class is not recognized, the corresponding
       entry in the list of super classes is not a class instance but a
       string giving the name of the super class.  Since import statements
       are recognized and imported modules are scanned as well, this
       shouldn't happen often.
       
       A function is described by the class Function in this module.
       Instances of this class have the following instance variables:
               module -- the module name
               name -- the name of the class
               file -- the file in which the class was defined
               lineno -- the line in the file on which the class statement occurred
    1: """
       
    1: import sys
    1: import imp
    1: import tokenize
    1: from token import NAME, DEDENT, OP
    1: from operator import itemgetter
       
    1: __all__ = ["readmodule", "readmodule_ex", "Class", "Function"]
       
    1: _modules = {}                           # cache of modules we've seen
       
       # each Python class is represented by an instance of this class
    2: class Class:
    1:     '''Class to represent a Python class.'''
    1:     def __init__(self, module, name, super, file, lineno):
  165:         self.module = module
  165:         self.name = name
  165:         if super is None:
   66:             super = []
  165:         self.super = super
  165:         self.methods = {}
  165:         self.file = file
  165:         self.lineno = lineno
       
    1:     def _addmethod(self, name, lineno):
 1183:         self.methods[name] = lineno
       
    2: class Function:
    1:     '''Class to represent a top-level Python function'''
    1:     def __init__(self, module, name, file, lineno):
  536:         self.module = module
  536:         self.name = name
  536:         self.file = file
  536:         self.lineno = lineno
       
    1: def readmodule(module, path=None):
           '''Backwards compatible interface.
       
           Call readmodule_ex() and then only keep Class objects from the
           resulting dictionary.'''
       
>>>>>>     res = {}
>>>>>>     for key, value in _readmodule(module, path or []).items():
>>>>>>         if isinstance(value, Class):
>>>>>>             res[key] = value
>>>>>>     return res
       
    1: def readmodule_ex(module, path=None):
           '''Read a module file and return a dictionary of classes.
       
           Search for MODULE in PATH and sys.path, read and parse the
           module and return a dictionary with one entry for each class
           found in the module.
           '''
   17:     return _readmodule(module, path or [])
       
    1: def _readmodule(module, path, inpackage=None):
           '''Do the hard work for readmodule[_ex].
       
           If INPACKAGE is given, it must be the dotted name of the package in
           which we are searching for a submodule, and then PATH must be the
           package search path; otherwise, we are searching for a top-level
           module, and PATH is combined with sys.path.
           '''
           # Compute the full module name (prepending inpackage if set)
  237:     if inpackage is not None:
   17:         fullmodule = "%s.%s" % (inpackage, module)
           else:
  220:         fullmodule = module
       
           # Check in the cache
  237:     if fullmodule in _modules:
  138:         return _modules[fullmodule]
       
           # Initialize the dict for this module's contents
   99:     dict = {}
       
           # Check if it is a built-in module; we don't do much for these
   99:     if module in sys.builtin_module_names and inpackage is None:
    7:         _modules[module] = dict
    7:         return dict
       
           # Check for a dotted module name
   92:     i = module.rfind('.')
   92:     if i >= 0:
   10:         package = module[:i]
   10:         submodule = module[i+1:]
   10:         parent = _readmodule(package, path, inpackage)
    7:         if inpackage is not None:
>>>>>>             package = "%s.%s" % (inpackage, package)
    7:         if not '__path__' in parent:
    3:             raise ImportError('No package named {}'.format(package))
    4:         return _readmodule(submodule, parent['__path__'], package)
       
           # Search the path for the module
   82:     f = None
   82:     if inpackage is not None:
   14:         f, fname, (_s, _m, ty) = imp.find_module(module, path)
           else:
   68:         f, fname, (_s, _m, ty) = imp.find_module(module, path + sys.path)
   72:     if ty == imp.PKG_DIRECTORY:
    4:         dict['__path__'] = [fname]
    4:         path = [fname] + path
    4:         f, fname, (_s, _m, ty) = imp.find_module('__init__', [fname])
   72:     _modules[fullmodule] = dict
   72:     if ty != imp.PY_SOURCE:
               # not Python source, can't do anything with this module
   12:         f.close()
   12:         return dict
       
   60:     stack = [] # stack of (class, indent) pairs
       
   60:     g = tokenize.generate_tokens(f.readline)
   60:     try:
173489:         for tokentype, token, start, _end, _line in g:
173429:             if tokentype == DEDENT:
 6727:                 lineno, thisindent = start
                       # close nested classes and defs
 8626:                 while stack and stack[-1][1] >= thisindent:
 1899:                     del stack[-1]
166702:             elif token == 'def':
 1759:                 lineno, thisindent = start
                       # close previous nested classes and defs
 1781:                 while stack and stack[-1][1] >= thisindent:
   22:                     del stack[-1]
 1759:                 tokentype, meth_name, start = g.next()[0:3]
 1759:                 if tokentype != NAME:
>>>>>>                     continue # Syntax error
 1759:                 if stack:
 1223:                     cur_class = stack[-1][0]
 1223:                     if isinstance(cur_class, Class):
                               # it's a method
 1183:                         cur_class._addmethod(meth_name, lineno)
                           # else it's a nested def
                       else:
                           # it's a function
  536:                     dict[meth_name] = Function(fullmodule, meth_name,
  536:                                                fname, lineno)
 1759:                 stack.append((None, thisindent)) # Marker for nested fns
164943:             elif token == 'class':
  165:                 lineno, thisindent = start
                       # close previous nested classes and defs
  168:                 while stack and stack[-1][1] >= thisindent:
    3:                     del stack[-1]
  165:                 tokentype, class_name, start = g.next()[0:3]
  165:                 if tokentype != NAME:
>>>>>>                     continue # Syntax error
                       # parse what follows the class name
  165:                 tokentype, token, start = g.next()[0:3]
  165:                 inherit = None
  165:                 if token == '(':
   99:                     names = [] # List of superclasses
                           # there's a list of superclasses
   99:                     level = 1
   99:                     super = [] # Tokens making up current superclass
  278:                     while True:
  278:                         tokentype, token, start = g.next()[0:3]
  278:                         if token in (')', ',') and level == 1:
  114:                             n = "".join(super)
  114:                             if n in dict:
                                       # we know this super class
   57:                                 n = dict[n]
                                   else:
   57:                                 c = n.split('.')
   57:                                 if len(c) > 1:
                                           # super class is of the form
                                           # module.class: look in module for
                                           # class
   15:                                     m = c[-2]
   15:                                     c = c[-1]
   15:                                     if m in _modules:
   10:                                         d = _modules[m]
   10:                                         if c in d:
    4:                                             n = d[c]
  114:                             names.append(n)
  114:                             super = []
  278:                         if token == '(':
    4:                             level += 1
  274:                         elif token == ')':
  103:                             level -= 1
  103:                             if level == 0:
   99:                                 break
  171:                         elif token == ',' and level == 1:
   15:                             pass
                               # only use NAME and OP (== dot) tokens for type name
  156:                         elif tokentype in (NAME, OP) and level == 1:
  144:                             super.append(token)
                               # expressions in the base list are not supported
   99:                     inherit = names
  165:                 cur_class = Class(fullmodule, class_name, inherit,
  165:                                   fname, lineno)
  165:                 if not stack:
  156:                     dict[class_name] = cur_class
  165:                 stack.append((cur_class, thisindent))
164778:             elif token == 'import' and start[1] == 0:
  115:                 modules = _getnamelist(g)
  252:                 for mod, _mod2 in modules:
  137:                     try:
                               # Recursively read the imported module
  137:                         if inpackage is None:
  134:                             _readmodule(mod, path)
                               else:
    3:                             try:
    3:                                 _readmodule(mod, path, inpackage)
    3:                             except ImportError:
    3:                                 _readmodule(mod, [])
    1:                     except:
                               # If we can't find or parse the imported module,
                               # too bad -- don't die here.
    1:                         pass
164663:             elif token == 'from' and start[1] == 0:
   73:                 mod, token = _getname(g)
   73:                 if not mod or token != "import":
>>>>>>                     continue
   66:                 names = _getnamelist(g)
   66:                 try:
                           # Recursively read the imported module
   66:                     d = _readmodule(mod, path, inpackage)
    8:                 except:
                           # If we can't find or parse the imported module,
                           # too bad -- don't die here.
    8:                     continue
                       # add any classes that were defined in the imported module
                       # to our name space if they were mentioned in the list
  160:                 for n, n2 in names:
  102:                     if n in d:
   27:                         dict[n2 or n] = d[n]
   75:                     elif n == '*':
                               # don't add names that start with _
   44:                         for n in d:
   36:                             if n[0] != '_':
   32:                                 dict[n] = d[n]
>>>>>>     except StopIteration:
>>>>>>         pass
       
   60:     f.close()
   60:     return dict
       
    1: def _getnamelist(g):
           # Helper to get a comma-separated list of dotted names plus 'as'
           # clauses.  Return a list of pairs (name, name2) where name2 is
           # the 'as' name, or None if there is no 'as' clause.
  181:     names = []
  252:     while True:
  252:         name, token = _getname(g)
  252:         if not name:
    2:             break
  250:         if token == 'as':
   36:             name2, token = _getname(g)
               else:
  214:             name2 = None
  250:         names.append((name, name2))
  250:         while token != "," and "\n" not in token:
>>>>>>             token = g.next()[1]
  250:         if token != ",":
  179:             break
  181:     return names
       
    1: def _getname(g):
           # Helper to get a dotted name, return a pair (name, token) where
           # name is the dotted name, or None if there was no dotted name,
           # and token is the next input token.
  361:     parts = []
  361:     tokentype, token = g.next()[0:2]
  361:     if tokentype != NAME and token != '*':
    9:         return (None, token)
  352:     parts.append(token)
  358:     while True:
  358:         tokentype, token = g.next()[0:2]
  358:         if token != '.':
  352:             break
    6:         tokentype, token = g.next()[0:2]
    6:         if tokentype != NAME:
>>>>>>             break
    6:         parts.append(token)
  352:     return (".".join(parts), token)
       
    1: def _main():
           # Main program for testing.
>>>>>>     import os
>>>>>>     mod = sys.argv[1]
>>>>>>     if os.path.exists(mod):
>>>>>>         path = [os.path.dirname(mod)]
>>>>>>         mod = os.path.basename(mod)
>>>>>>         if mod.lower().endswith(".py"):
>>>>>>             mod = mod[:-3]
           else:
>>>>>>         path = []
>>>>>>     dict = readmodule_ex(mod, path)
>>>>>>     objs = dict.values()
>>>>>>     objs.sort(lambda a, b: cmp(getattr(a, 'lineno', 0),
>>>>>>                                getattr(b, 'lineno', 0)))
>>>>>>     for obj in objs:
>>>>>>         if isinstance(obj, Class):
>>>>>>             print "class", obj.name, obj.super, obj.lineno
>>>>>>             methods = sorted(obj.methods.iteritems(), key=itemgetter(1))
>>>>>>             for name, lineno in methods:
>>>>>>                 if name != "__path__":
>>>>>>                     print "  def", name, lineno
>>>>>>         elif isinstance(obj, Function):
>>>>>>             print "def", obj.name, obj.lineno
       
    1: if __name__ == "__main__":
>>>>>>     _main()
