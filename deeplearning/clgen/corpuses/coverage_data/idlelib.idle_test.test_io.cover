    1: import unittest
    1: import io
    1: from idlelib.PyShell import PseudoInputFile, PseudoOutputFile
    1: from test import test_support as support
       
       
    2: class Base(object):
    1:     def __str__(self):
>>>>>>         return '%s:str' % type(self).__name__
    1:     def __unicode__(self):
>>>>>>         return '%s:unicode' % type(self).__name__
    1:     def __len__(self):
>>>>>>         return 3
    1:     def __iter__(self):
>>>>>>         return iter('abc')
    1:     def __getitem__(self, *args):
>>>>>>         return '%s:item' % type(self).__name__
    1:     def __getslice__(self, *args):
>>>>>>         return '%s:slice' % type(self).__name__
       
    2: class S(Base, str):
    1:     pass
       
    2: class U(Base, unicode):
    1:     pass
       
    2: class BA(Base, bytearray):
    1:     pass
       
    2: class MockShell:
    1:     def __init__(self):
   11:         self.reset()
       
    1:     def write(self, *args):
   16:         self.written.append(args)
       
    1:     def readline(self):
   39:         return self.lines.pop()
       
    1:     def close(self):
    7:         pass
       
    1:     def reset(self):
   24:         self.written = []
       
    1:     def push(self, lines):
   18:         self.lines = list(lines)[::-1]
       
       
    2: class PseudeOutputFilesTest(unittest.TestCase):
    1:     def test_misc(self):
    1:         shell = MockShell()
    1:         f = PseudoOutputFile(shell, 'stdout', 'utf-8')
    1:         self.assertIsInstance(f, io.TextIOBase)
    1:         self.assertEqual(f.encoding, 'utf-8')
    1:         self.assertIsNone(f.errors)
    1:         self.assertIsNone(f.newlines)
    1:         self.assertEqual(f.name, '<stdout>')
    1:         self.assertFalse(f.closed)
    1:         self.assertTrue(f.isatty())
    1:         self.assertFalse(f.readable())
    1:         self.assertTrue(f.writable())
    1:         self.assertFalse(f.seekable())
       
    1:     def test_unsupported(self):
    1:         shell = MockShell()
    1:         f = PseudoOutputFile(shell, 'stdout', 'utf-8')
    1:         self.assertRaises(IOError, f.fileno)
    1:         self.assertRaises(IOError, f.tell)
    1:         self.assertRaises(IOError, f.seek, 0)
    1:         self.assertRaises(IOError, f.read, 0)
    1:         self.assertRaises(IOError, f.readline, 0)
       
    1:     def test_write(self):
    1:         shell = MockShell()
    1:         f = PseudoOutputFile(shell, 'stdout', 'utf-8')
    1:         f.write('test')
    1:         self.assertEqual(shell.written, [('test', 'stdout')])
    1:         shell.reset()
    1:         f.write('t\xe8st')
    1:         self.assertEqual(shell.written, [('t\xe8st', 'stdout')])
    1:         shell.reset()
    1:         f.write(u't\xe8st')
    1:         self.assertEqual(shell.written, [(u't\xe8st', 'stdout')])
    1:         shell.reset()
       
    1:         f.write(S('t\xe8st'))
    1:         self.assertEqual(shell.written, [('t\xe8st', 'stdout')])
    1:         self.assertEqual(type(shell.written[0][0]), str)
    1:         shell.reset()
    1:         f.write(BA('t\xe8st'))
    1:         self.assertEqual(shell.written, [('t\xe8st', 'stdout')])
    1:         self.assertEqual(type(shell.written[0][0]), str)
    1:         shell.reset()
    1:         f.write(U(u't\xe8st'))
    1:         self.assertEqual(shell.written, [(u't\xe8st', 'stdout')])
    1:         self.assertEqual(type(shell.written[0][0]), unicode)
    1:         shell.reset()
       
    1:         self.assertRaises(TypeError, f.write)
    1:         self.assertEqual(shell.written, [])
    1:         self.assertRaises(TypeError, f.write, 123)
    1:         self.assertEqual(shell.written, [])
    1:         self.assertRaises(TypeError, f.write, 'test', 'spam')
    1:         self.assertEqual(shell.written, [])
       
    1:     def test_writelines(self):
    1:         shell = MockShell()
    1:         f = PseudoOutputFile(shell, 'stdout', 'utf-8')
    1:         f.writelines([])
    1:         self.assertEqual(shell.written, [])
    1:         shell.reset()
    1:         f.writelines(['one\n', 'two'])
    1:         self.assertEqual(shell.written,
    1:                          [('one\n', 'stdout'), ('two', 'stdout')])
    1:         shell.reset()
    1:         f.writelines(['on\xe8\n', 'tw\xf2'])
    1:         self.assertEqual(shell.written,
    1:                          [('on\xe8\n', 'stdout'), ('tw\xf2', 'stdout')])
    1:         shell.reset()
    1:         f.writelines([u'on\xe8\n', u'tw\xf2'])
    1:         self.assertEqual(shell.written,
    1:                          [(u'on\xe8\n', 'stdout'), (u'tw\xf2', 'stdout')])
    1:         shell.reset()
       
    1:         f.writelines([S('t\xe8st')])
    1:         self.assertEqual(shell.written, [('t\xe8st', 'stdout')])
    1:         self.assertEqual(type(shell.written[0][0]), str)
    1:         shell.reset()
    1:         f.writelines([BA('t\xe8st')])
    1:         self.assertEqual(shell.written, [('t\xe8st', 'stdout')])
    1:         self.assertEqual(type(shell.written[0][0]), str)
    1:         shell.reset()
    1:         f.writelines([U(u't\xe8st')])
    1:         self.assertEqual(shell.written, [(u't\xe8st', 'stdout')])
    1:         self.assertEqual(type(shell.written[0][0]), unicode)
    1:         shell.reset()
       
    1:         self.assertRaises(TypeError, f.writelines)
    1:         self.assertEqual(shell.written, [])
    1:         self.assertRaises(TypeError, f.writelines, 123)
    1:         self.assertEqual(shell.written, [])
    1:         self.assertRaises(TypeError, f.writelines, [123])
    1:         self.assertEqual(shell.written, [])
    1:         self.assertRaises(TypeError, f.writelines, [], [])
    1:         self.assertEqual(shell.written, [])
       
    1:     def test_close(self):
    1:         shell = MockShell()
    1:         f = PseudoOutputFile(shell, 'stdout', 'utf-8')
    1:         self.assertFalse(f.closed)
    1:         f.write('test')
    1:         f.close()
    1:         self.assertTrue(f.closed)
    1:         self.assertRaises(ValueError, f.write, 'x')
    1:         self.assertEqual(shell.written, [('test', 'stdout')])
    1:         f.close()
    1:         self.assertRaises(TypeError, f.close, 1)
       
       
    2: class PseudeInputFilesTest(unittest.TestCase):
    1:     def test_misc(self):
    1:         shell = MockShell()
    1:         f = PseudoInputFile(shell, 'stdin', 'utf-8')
    1:         self.assertIsInstance(f, io.TextIOBase)
    1:         self.assertEqual(f.encoding, 'utf-8')
    1:         self.assertIsNone(f.errors)
    1:         self.assertIsNone(f.newlines)
    1:         self.assertEqual(f.name, '<stdin>')
    1:         self.assertFalse(f.closed)
    1:         self.assertTrue(f.isatty())
    1:         self.assertTrue(f.readable())
    1:         self.assertFalse(f.writable())
    1:         self.assertFalse(f.seekable())
       
    1:     def test_unsupported(self):
    1:         shell = MockShell()
    1:         f = PseudoInputFile(shell, 'stdin', 'utf-8')
    1:         self.assertRaises(IOError, f.fileno)
    1:         self.assertRaises(IOError, f.tell)
    1:         self.assertRaises(IOError, f.seek, 0)
    1:         self.assertRaises(IOError, f.write, 'x')
    1:         self.assertRaises(IOError, f.writelines, ['x'])
       
    1:     def test_read(self):
    1:         shell = MockShell()
    1:         f = PseudoInputFile(shell, 'stdin', 'utf-8')
    1:         shell.push(['one\n', 'two\n', ''])
    1:         self.assertEqual(f.read(), 'one\ntwo\n')
    1:         shell.push(['one\n', 'two\n', ''])
    1:         self.assertEqual(f.read(-1), 'one\ntwo\n')
    1:         shell.push(['one\n', 'two\n', ''])
    1:         self.assertEqual(f.read(None), 'one\ntwo\n')
    1:         shell.push(['one\n', 'two\n', 'three\n', ''])
    1:         self.assertEqual(f.read(2), 'on')
    1:         self.assertEqual(f.read(3), 'e\nt')
    1:         self.assertEqual(f.read(10), 'wo\nthree\n')
       
    1:         shell.push(['one\n', 'two\n'])
    1:         self.assertEqual(f.read(0), '')
    1:         self.assertRaises(TypeError, f.read, 1.5)
    1:         self.assertRaises(TypeError, f.read, '1')
    1:         self.assertRaises(TypeError, f.read, 1, 1)
       
    1:     def test_readline(self):
    1:         shell = MockShell()
    1:         f = PseudoInputFile(shell, 'stdin', 'utf-8')
    1:         shell.push(['one\n', 'two\n', 'three\n', 'four\n'])
    1:         self.assertEqual(f.readline(), 'one\n')
    1:         self.assertEqual(f.readline(-1), 'two\n')
    1:         self.assertEqual(f.readline(None), 'three\n')
    1:         shell.push(['one\ntwo\n'])
    1:         self.assertEqual(f.readline(), 'one\n')
    1:         self.assertEqual(f.readline(), 'two\n')
    1:         shell.push(['one', 'two', 'three'])
    1:         self.assertEqual(f.readline(), 'one')
    1:         self.assertEqual(f.readline(), 'two')
    1:         shell.push(['one\n', 'two\n', 'three\n'])
    1:         self.assertEqual(f.readline(2), 'on')
    1:         self.assertEqual(f.readline(1), 'e')
    1:         self.assertEqual(f.readline(1), '\n')
    1:         self.assertEqual(f.readline(10), 'two\n')
       
    1:         shell.push(['one\n', 'two\n'])
    1:         self.assertEqual(f.readline(0), '')
    1:         self.assertRaises(TypeError, f.readlines, 1.5)
    1:         self.assertRaises(TypeError, f.readlines, '1')
    1:         self.assertRaises(TypeError, f.readlines, 1, 1)
       
    1:     def test_readlines(self):
    1:         shell = MockShell()
    1:         f = PseudoInputFile(shell, 'stdin', 'utf-8')
    1:         shell.push(['one\n', 'two\n', ''])
    1:         self.assertEqual(f.readlines(), ['one\n', 'two\n'])
    1:         shell.push(['one\n', 'two\n', ''])
    1:         self.assertEqual(f.readlines(-1), ['one\n', 'two\n'])
    1:         shell.push(['one\n', 'two\n', ''])
    1:         self.assertEqual(f.readlines(None), ['one\n', 'two\n'])
    1:         shell.push(['one\n', 'two\n', ''])
    1:         self.assertEqual(f.readlines(0), ['one\n', 'two\n'])
    1:         shell.push(['one\n', 'two\n', ''])
    1:         self.assertEqual(f.readlines(3), ['one\n'])
    1:         shell.push(['one\n', 'two\n', ''])
    1:         self.assertEqual(f.readlines(4), ['one\n', 'two\n'])
       
    1:         shell.push(['one\n', 'two\n', ''])
    1:         self.assertRaises(TypeError, f.readlines, 1.5)
    1:         self.assertRaises(TypeError, f.readlines, '1')
    1:         self.assertRaises(TypeError, f.readlines, 1, 1)
       
    1:     def test_close(self):
    1:         shell = MockShell()
    1:         f = PseudoInputFile(shell, 'stdin', 'utf-8')
    1:         shell.push(['one\n', 'two\n', ''])
    1:         self.assertFalse(f.closed)
    1:         self.assertEqual(f.readline(), 'one\n')
    1:         f.close()
    1:         self.assertFalse(f.closed)
    1:         self.assertEqual(f.readline(), 'two\n')
    1:         self.assertRaises(TypeError, f.close, 1)
       
       
    1: def test_main():
>>>>>>     support.run_unittest(PseudeOutputFilesTest, PseudeInputFilesTest)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
