    1: from test import test_support
    1: import unittest
    1: import select
    1: import os
    1: import sys
       
    2: @unittest.skipIf(sys.platform[:3] in ('win', 'os2', 'riscos'),
    1:                  "can't easily test on this system")
    1: class SelectTestCase(unittest.TestCase):
       
    2:     class Nope:
    1:         pass
       
    2:     class Almost:
    1:         def fileno(self):
    1:             return 'fileno'
       
    1:     def test_error_conditions(self):
    1:         self.assertRaises(TypeError, select.select, 1, 2, 3)
    1:         self.assertRaises(TypeError, select.select, [self.Nope()], [], [])
    1:         self.assertRaises(TypeError, select.select, [self.Almost()], [], [])
    1:         self.assertRaises(TypeError, select.select, [], [], [], "not a number")
       
    1:     def test_returned_list_identity(self):
               # See issue #8329
    1:         r, w, x = select.select([], [], [], 1)
    1:         self.assertIsNot(r, w)
    1:         self.assertIsNot(r, x)
    1:         self.assertIsNot(w, x)
       
    1:     def test_select(self):
    1:         cmd = 'for i in 0 1 2 3 4 5 6 7 8 9; do echo testing...; sleep 1; done'
    1:         p = os.popen(cmd, 'r')
   12:         for tout in (0, 1, 2, 4, 8, 16) + (None,)*10:
   12:             if test_support.verbose:
>>>>>>                 print 'timeout =', tout
   12:             rfd, wfd, xfd = select.select([p], [], [], tout)
   12:             if (rfd, wfd, xfd) == ([], [], []):
    1:                 continue
   11:             if (rfd, wfd, xfd) == ([p], [], []):
   11:                 line = p.readline()
   11:                 if test_support.verbose:
>>>>>>                     print repr(line)
   11:                 if not line:
    1:                     if test_support.verbose:
>>>>>>                         print 'EOF'
    1:                     break
>>>>>>                 continue
>>>>>>             self.fail('Unexpected return values from select():', rfd, wfd, xfd)
    1:         p.close()
       
           # Issue 16230: Crash on select resized list
    1:     def test_select_mutated(self):
    1:         a = []
    2:         class F:
    1:             def fileno(self):
    5:                 del a[-1]
    5:                 return sys.__stdout__.fileno()
    1:         a[:] = [F()] * 10
    1:         self.assertEqual(select.select([], a, []), ([], a[:5], []))
       
    1: def test_main():
    1:     test_support.run_unittest(SelectTestCase)
    1:     test_support.reap_children()
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
