       """distutils.command.install_scripts
       
       Implements the Distutils 'install_scripts' command, for installing
    1: Python scripts."""
       
       # contributed by Bastian Kleineidam
       
    1: __revision__ = "$Id$"
       
    1: import os
    1: from distutils.core import Command
    1: from distutils import log
    1: from stat import ST_MODE
       
    2: class install_scripts (Command):
       
    1:     description = "install scripts (Python or otherwise)"
       
           user_options = [
    1:         ('install-dir=', 'd', "directory to install scripts to"),
    1:         ('build-dir=','b', "build directory (where to install from)"),
    1:         ('force', 'f', "force installation (overwrite existing files)"),
    1:         ('skip-build', None, "skip the build steps"),
           ]
       
    1:     boolean_options = ['force', 'skip-build']
       
       
    1:     def initialize_options (self):
    4:         self.install_dir = None
    4:         self.force = 0
    4:         self.build_dir = None
    4:         self.skip_build = None
       
    1:     def finalize_options (self):
    4:         self.set_undefined_options('build', ('build_scripts', 'build_dir'))
    4:         self.set_undefined_options('install',
    4:                                    ('install_scripts', 'install_dir'),
    4:                                    ('force', 'force'),
    4:                                    ('skip_build', 'skip_build'),
                                         )
       
    1:     def run (self):
    3:         if not self.skip_build:
    2:             self.run_command('build_scripts')
    3:         self.outfiles = self.copy_tree(self.build_dir, self.install_dir)
    3:         if os.name == 'posix':
                   # Set the executable bits (owner, group, and world) on
                   # all the scripts we just installed.
    8:             for file in self.get_outputs():
    5:                 if self.dry_run:
>>>>>>                     log.info("changing mode of %s", file)
                       else:
    5:                     mode = ((os.stat(file)[ST_MODE]) | 0555) & 07777
    5:                     log.info("changing mode of %s to %o", file, mode)
    5:                     os.chmod(file, mode)
       
    1:     def get_inputs (self):
>>>>>>         return self.distribution.scripts or []
       
    1:     def get_outputs(self):
    5:         return self.outfiles or []
       
       # class install_scripts
