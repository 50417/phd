       """
       dyld emulation
    1: """
       
    1: import os
    1: from framework import framework_info
    1: from dylib import dylib_info
    1: from itertools import *
       
       __all__ = [
    1:     'dyld_find', 'framework_find',
    1:     'framework_info', 'dylib_info',
       ]
       
       # These are the defaults as per man dyld(1)
       #
       DEFAULT_FRAMEWORK_FALLBACK = [
    1:     os.path.expanduser("~/Library/Frameworks"),
    1:     "/Library/Frameworks",
    1:     "/Network/Library/Frameworks",
    1:     "/System/Library/Frameworks",
       ]
       
       DEFAULT_LIBRARY_FALLBACK = [
    1:     os.path.expanduser("~/lib"),
    1:     "/usr/local/lib",
    1:     "/lib",
    1:     "/usr/lib",
       ]
       
    1: def ensure_utf8(s):
           """Not all of PyObjC and Python understand unicode paths very well yet"""
   38:     if isinstance(s, unicode):
>>>>>>         return s.encode('utf8')
   38:     return s
       
    1: def dyld_env(env, var):
   44:     if env is None:
   44:         env = os.environ
   44:     rval = env.get(var)
   44:     if rval is None:
   44:         return []
>>>>>>     return rval.split(':')
       
    1: def dyld_image_suffix(env=None):
   19:     if env is None:
   19:         env = os.environ
   19:     return env.get('DYLD_IMAGE_SUFFIX')
       
    1: def dyld_framework_path(env=None):
    3:     return dyld_env(env, 'DYLD_FRAMEWORK_PATH')
       
    1: def dyld_library_path(env=None):
   19:     return dyld_env(env, 'DYLD_LIBRARY_PATH')
       
    1: def dyld_fallback_framework_path(env=None):
    3:     return dyld_env(env, 'DYLD_FALLBACK_FRAMEWORK_PATH')
       
    1: def dyld_fallback_library_path(env=None):
   19:     return dyld_env(env, 'DYLD_FALLBACK_LIBRARY_PATH')
       
    1: def dyld_image_suffix_search(iterator, env=None):
           """For a potential path iterator, add DYLD_IMAGE_SUFFIX semantics"""
   19:     suffix = dyld_image_suffix(env)
   19:     if suffix is None:
   19:         return iterator
>>>>>>     def _inject(iterator=iterator, suffix=suffix):
>>>>>>         for path in iterator:
>>>>>>             if path.endswith('.dylib'):
>>>>>>                 yield path[:-len('.dylib')] + suffix + '.dylib'
                   else:
>>>>>>                 yield path + suffix
>>>>>>             yield path
>>>>>>     return _inject()
       
    1: def dyld_override_search(name, env=None):
           # If DYLD_FRAMEWORK_PATH is set and this dylib_name is a
           # framework name, use the first file that exists in the framework
           # path if any.  If there is none go on to search the DYLD_LIBRARY_PATH
           # if any.
       
   19:     framework = framework_info(name)
       
   19:     if framework is not None:
    3:         for path in dyld_framework_path(env):
>>>>>>             yield os.path.join(path, framework['name'])
       
           # If DYLD_LIBRARY_PATH is set then use the first file that exists
           # in the path.  If none use the original name.
   19:     for path in dyld_library_path(env):
>>>>>>         yield os.path.join(path, os.path.basename(name))
       
    1: def dyld_executable_path_search(name, executable_path=None):
           # If we haven't done any searching and found a library and the
           # dylib_name starts with "@executable_path/" then construct the
           # library name.
   19:     if name.startswith('@executable_path/') and executable_path is not None:
>>>>>>         yield os.path.join(executable_path, name[len('@executable_path/'):])
       
    1: def dyld_default_search(name, env=None):
   19:     yield name
       
   19:     framework = framework_info(name)
       
   19:     if framework is not None:
    3:         fallback_framework_path = dyld_fallback_framework_path(env)
    3:         for path in fallback_framework_path:
>>>>>>             yield os.path.join(path, framework['name'])
       
   19:     fallback_library_path = dyld_fallback_library_path(env)
   19:     for path in fallback_library_path:
>>>>>>         yield os.path.join(path, os.path.basename(name))
       
   19:     if framework is not None and not fallback_framework_path:
   13:         for path in DEFAULT_FRAMEWORK_FALLBACK:
   12:             yield os.path.join(path, framework['name'])
       
   17:     if not fallback_library_path:
   78:         for path in DEFAULT_LIBRARY_FALLBACK:
   68:             yield os.path.join(path, os.path.basename(name))
       
    1: def dyld_find(name, executable_path=None, env=None):
           """
           Find a library or framework using dyld semantics
           """
   19:     name = ensure_utf8(name)
   19:     executable_path = ensure_utf8(executable_path)
   19:     for path in dyld_image_suffix_search(chain(
   19:                 dyld_override_search(name, env),
   19:                 dyld_executable_path_search(name, executable_path),
   19:                 dyld_default_search(name, env),
  109:             ), env):
   99:         if os.path.isfile(path):
    9:             return path
   10:     raise ValueError("dylib %s could not be found" % (name,))
       
    1: def framework_find(fn, executable_path=None, env=None):
           """
           Find a framework using dyld semantics in a very loose manner.
       
           Will take input such as:
               Python
               Python.framework
               Python.framework/Versions/Current
           """
>>>>>>     try:
>>>>>>         return dyld_find(fn, executable_path=executable_path, env=env)
>>>>>>     except ValueError, e:
>>>>>>         pass
>>>>>>     fmwk_index = fn.rfind('.framework')
>>>>>>     if fmwk_index == -1:
>>>>>>         fmwk_index = len(fn)
>>>>>>         fn += '.framework'
>>>>>>     fn = os.path.join(fn, os.path.basename(fn[:fmwk_index]))
>>>>>>     try:
>>>>>>         return dyld_find(fn, executable_path=executable_path, env=env)
>>>>>>     except ValueError:
>>>>>>         raise e
       
    1: def test_dyld_find():
>>>>>>     env = {}
>>>>>>     assert dyld_find('libSystem.dylib') == '/usr/lib/libSystem.dylib'
>>>>>>     assert dyld_find('System.framework/System') == '/System/Library/Frameworks/System.framework/System'
       
    1: if __name__ == '__main__':
>>>>>>     test_dyld_find()
