    1: import unittest
    1: from ctypes import *
       
    2: class StructFieldsTestCase(unittest.TestCase):
           # Structure/Union classes must get 'finalized' sooner or
           # later, when one of these things happen:
           #
           # 1. _fields_ is set.
           # 2. An instance is created.
           # 3. The type is used as field of another Structure/Union.
           # 4. The type is subclassed
           #
           # When they are finalized, assigning _fields_ is no longer allowed.
       
    1:     def test_1_A(self):
    2:         class X(Structure):
    1:             pass
    1:         self.assertEqual(sizeof(X), 0) # not finalized
    1:         X._fields_ = [] # finalized
    1:         self.assertRaises(AttributeError, setattr, X, "_fields_", [])
       
    1:     def test_1_B(self):
    2:         class X(Structure):
    1:             _fields_ = [] # finalized
    1:         self.assertRaises(AttributeError, setattr, X, "_fields_", [])
       
    1:     def test_2(self):
    2:         class X(Structure):
    1:             pass
    1:         X()
    1:         self.assertRaises(AttributeError, setattr, X, "_fields_", [])
       
    1:     def test_3(self):
    2:         class X(Structure):
    1:             pass
    2:         class Y(Structure):
    1:             _fields_ = [("x", X)] # finalizes X
    1:         self.assertRaises(AttributeError, setattr, X, "_fields_", [])
       
    1:     def test_4(self):
    2:         class X(Structure):
    1:             pass
    2:         class Y(X):
    1:             pass
    1:         self.assertRaises(AttributeError, setattr, X, "_fields_", [])
    1:         Y._fields_ = []
    1:         self.assertRaises(AttributeError, setattr, X, "_fields_", [])
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
