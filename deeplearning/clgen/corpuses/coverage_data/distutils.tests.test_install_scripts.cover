    1: """Tests for distutils.command.install_scripts."""
       
    1: import os
    1: import unittest
       
    1: from distutils.command.install_scripts import install_scripts
    1: from distutils.core import Distribution
       
    1: from distutils.tests import support
    1: from test.test_support import run_unittest
       
       
    2: class InstallScriptsTestCase(support.TempdirManager,
    1:                              support.LoggingSilencer,
    1:                              unittest.TestCase):
       
    1:     def test_default_settings(self):
    1:         dist = Distribution()
    1:         dist.command_obj["build"] = support.DummyCommand(
    1:             build_scripts="/foo/bar")
    1:         dist.command_obj["install"] = support.DummyCommand(
    1:             install_scripts="/splat/funk",
    1:             force=1,
    1:             skip_build=1,
                   )
    1:         cmd = install_scripts(dist)
    1:         self.assertFalse(cmd.force)
    1:         self.assertFalse(cmd.skip_build)
    1:         self.assertIsNone(cmd.build_dir)
    1:         self.assertIsNone(cmd.install_dir)
       
    1:         cmd.finalize_options()
       
    1:         self.assertTrue(cmd.force)
    1:         self.assertTrue(cmd.skip_build)
    1:         self.assertEqual(cmd.build_dir, "/foo/bar")
    1:         self.assertEqual(cmd.install_dir, "/splat/funk")
       
    1:     def test_installation(self):
    1:         source = self.mkdtemp()
    1:         expected = []
       
    1:         def write_script(name, text):
    3:             expected.append(name)
    3:             f = open(os.path.join(source, name), "w")
    3:             try:
    3:                 f.write(text)
                   finally:
    3:                 f.close()
       
    1:         write_script("script1.py", ("#! /usr/bin/env python2.3\n"
                                           "# bogus script w/ Python sh-bang\n"
                                           "pass\n"))
    1:         write_script("script2.py", ("#!/usr/bin/python\n"
                                           "# bogus script w/ Python sh-bang\n"
                                           "pass\n"))
    1:         write_script("shell.sh", ("#!/bin/sh\n"
                                         "# bogus shell script w/ sh-bang\n"
                                         "exit 0\n"))
       
    1:         target = self.mkdtemp()
    1:         dist = Distribution()
    1:         dist.command_obj["build"] = support.DummyCommand(build_scripts=source)
    1:         dist.command_obj["install"] = support.DummyCommand(
    1:             install_scripts=target,
    1:             force=1,
    1:             skip_build=1,
                   )
    1:         cmd = install_scripts(dist)
    1:         cmd.finalize_options()
    1:         cmd.run()
       
    1:         installed = os.listdir(target)
    4:         for name in expected:
    3:             self.assertIn(name, installed)
       
       
    1: def test_suite():
    1:     return unittest.makeSuite(InstallScriptsTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     run_unittest(test_suite())
