       # This tests the internal _objects attribute
    1: import unittest
    1: from ctypes import *
    1: from sys import getrefcount as grc
       
       # XXX This test must be reviewed for correctness!!!
       
       """
       ctypes' types are container types.
       
       They have an internal memory block, which only consists of some bytes,
       but it has to keep references to other objects as well. This is not
       really needed for trivial C types like int or char, but it is important
       for aggregate types like strings or pointers in particular.
       
       What about pointers?
       
       """
       
    2: class ObjectsTestCase(unittest.TestCase):
    1:     def assertSame(self, a, b):
    1:         self.assertEqual(id(a), id(b))
       
    1:     def test_ints(self):
    1:         i = 42000123
    1:         refcnt = grc(i)
    1:         ci = c_int(i)
    1:         self.assertEqual(refcnt, grc(i))
    1:         self.assertEqual(ci._objects, None)
       
    1:     def test_c_char_p(self):
    1:         s = "Hello, World"
    1:         refcnt = grc(s)
    1:         cs = c_char_p(s)
    1:         self.assertEqual(refcnt + 1, grc(s))
    1:         self.assertSame(cs._objects, s)
       
    1:     def test_simple_struct(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_int), ("b", c_int)]
       
    1:         a = 421234
    1:         b = 421235
    1:         x = X()
    1:         self.assertEqual(x._objects, None)
    1:         x.a = a
    1:         x.b = b
    1:         self.assertEqual(x._objects, None)
       
    1:     def test_embedded_structs(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_int), ("b", c_int)]
       
    2:         class Y(Structure):
    1:             _fields_ = [("x", X), ("y", X)]
       
    1:         y = Y()
    1:         self.assertEqual(y._objects, None)
       
    1:         x1, x2 = X(), X()
    1:         y.x, y.y = x1, x2
    1:         self.assertEqual(y._objects, {"0": {}, "1": {}})
    1:         x1.a, x2.b = 42, 93
    1:         self.assertEqual(y._objects, {"0": {}, "1": {}})
       
    1:     def test_xxx(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_char_p), ("b", c_char_p)]
       
    2:         class Y(Structure):
    1:             _fields_ = [("x", X), ("y", X)]
       
    1:         s1 = "Hello, World"
    1:         s2 = "Hallo, Welt"
       
    1:         x = X()
    1:         x.a = s1
    1:         x.b = s2
    1:         self.assertEqual(x._objects, {"0": s1, "1": s2})
       
    1:         y = Y()
    1:         y.x = x
    1:         self.assertEqual(y._objects, {"0": {"0": s1, "1": s2}})
       ##        x = y.x
       ##        del y
       ##        print x._b_base_._objects
       
    1:     def test_ptr_struct(self):
    2:         class X(Structure):
    1:             _fields_ = [("data", POINTER(c_int))]
       
    1:         A = c_int*4
    1:         a = A(11, 22, 33, 44)
    1:         self.assertEqual(a._objects, None)
       
    1:         x = X()
    1:         x.data = a
       ##XXX        print x._objects
       ##XXX        print x.data[0]
       ##XXX        print x.data._objects
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
