       # Test the Unicode versions of normal file functions
       # open, os.open, os.stat. os.listdir, os.rename, os.remove, os.mkdir, os.chdir, os.rmdir
    1: import sys, os, unittest
    1: from unicodedata import normalize
    1: from test import test_support
       
       filenames = [
    1:     '1_abc',
    1:     u'2_ascii',
    1:     u'3_Gr\xfc\xdf-Gott',
    1:     u'4_\u0393\u03b5\u03b9\u03ac-\u03c3\u03b1\u03c2',
    1:     u'5_\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435',
    1:     u'6_\u306b\u307d\u3093',
    1:     u'7_\u05d4\u05e9\u05e7\u05e6\u05e5\u05e1',
    1:     u'8_\u66e8\u66e9\u66eb',
    1:     u'9_\u66e8\u05e9\u3093\u0434\u0393\xdf',
           # Specific code points: fn, NFC(fn) and NFKC(fn) all differents
    1:     u'10_\u1fee\u1ffd',
           ]
       
       # Mac OS X decomposes Unicode names, using Normal Form D.
       # http://developer.apple.com/mac/library/qa/qa2001/qa1173.html
       # "However, most volume formats do not follow the exact specification for
       # these normal forms.  For example, HFS Plus uses a variant of Normal Form D
       # in which U+2000 through U+2FFF, U+F900 through U+FAFF, and U+2F800 through
       # U+2FAFF are not decomposed."
    1: if sys.platform != 'darwin':
>>>>>>     filenames.extend([
               # Specific code points: NFC(fn), NFD(fn), NFKC(fn) and NFKD(fn) all differents
>>>>>>         u'11_\u0385\u03d3\u03d4',
>>>>>>         u'12_\u00a8\u0301\u03d2\u0301\u03d2\u0308',    # == NFD(u'\u0385\u03d3\u03d4')
>>>>>>         u'13_\u0020\u0308\u0301\u038e\u03ab',          # == NFKC(u'\u0385\u03d3\u03d4')
>>>>>>         u'14_\u1e9b\u1fc1\u1fcd\u1fce\u1fcf\u1fdd\u1fde\u1fdf\u1fed',
       
               # Specific code points: fn, NFC(fn) and NFKC(fn) all differents
>>>>>>         u'15_\u1fee\u1ffd\ufad1',
>>>>>>         u'16_\u2000\u2000\u2000A',
>>>>>>         u'17_\u2001\u2001\u2001A',
>>>>>>         u'18_\u2003\u2003\u2003A', # == NFC(u'\u2001\u2001\u2001A')
>>>>>>         u'19_\u0020\u0020\u0020A', # u'\u0020' == u' ' == NFKC(u'\u2000') ==
                                          #   NFKC(u'\u2001') == NFKC(u'\u2003')
       ])
       
       
       # Is it Unicode-friendly?
    1: if not os.path.supports_unicode_filenames:
>>>>>>     fsencoding = sys.getfilesystemencoding() or sys.getdefaultencoding()
>>>>>>     try:
>>>>>>         for name in filenames:
>>>>>>             name.encode(fsencoding)
>>>>>>     except UnicodeEncodeError:
>>>>>>         raise unittest.SkipTest("only NT+ and systems with "
                                       "Unicode-friendly filesystem encoding")
       
       
       # Destroy directory dirname and all files under it, to one level.
    1: def deltree(dirname):
           # Don't hide legitimate errors:  if one of these suckers exists, it's
           # an error if we can't remove it.
   21:     if os.path.exists(dirname):
               # must pass unicode to os.listdir() so we get back unicode results.
  220:         for fname in os.listdir(unicode(dirname)):
  200:             os.unlink(os.path.join(dirname, fname))
   20:         os.rmdir(dirname)
       
       
    2: class UnicodeFileTests(unittest.TestCase):
    1:     files = set(filenames)
    1:     normal_form = None
       
    1:     def setUp(self):
   20:         try:
   20:             os.mkdir(test_support.TESTFN)
>>>>>>         except OSError:
>>>>>>             pass
   20:         files = set()
  220:         for name in self.files:
  200:             name = os.path.join(test_support.TESTFN, self.norm(name))
  200:             with open(name, 'w') as f:
  200:                 f.write((name+'\n').encode("utf-8"))
  200:             os.stat(name)
  200:             files.add(name)
   20:         self.files = files
       
    1:     def tearDown(self):
   20:         deltree(test_support.TESTFN)
       
    1:     def norm(self, s):
  200:         if self.normal_form and isinstance(s, unicode):
  144:             return normalize(self.normal_form, s)
   56:         return s
       
           def _apply_failure(self, fn, filename, expected_exception,
    1:                        check_fn_in_exception = True):
  300:         with self.assertRaises(expected_exception) as c:
  300:             fn(filename)
  300:         exc_filename = c.exception.filename
               # the "filename" exception attribute may be encoded
  300:         if isinstance(exc_filename, str):
  255:             filename = filename.encode(sys.getfilesystemencoding())
  300:         if check_fn_in_exception:
  250:             self.assertEqual(exc_filename, filename, "Function '%s(%r) failed "
                                    "with bad filename in the exception: %r" %
  250:                              (fn.__name__, filename, exc_filename))
       
    1:     def test_failures(self):
               # Pass non-existing Unicode filenames all over the place.
   55:         for name in self.files:
   50:             name = "not_" + name
   50:             self._apply_failure(open, name, IOError)
   50:             self._apply_failure(os.stat, name, OSError)
   50:             self._apply_failure(os.chdir, name, OSError)
   50:             self._apply_failure(os.rmdir, name, OSError)
   50:             self._apply_failure(os.remove, name, OSError)
                   # listdir may append a wildcard to the filename, so dont check
   50:             self._apply_failure(os.listdir, name, OSError, False)
       
    1:     def test_open(self):
   55:         for name in self.files:
   50:             f = open(name, 'w')
   50:             f.write((name+'\n').encode("utf-8"))
   50:             f.close()
   50:             os.stat(name)
       
           # Skip the test on darwin, because darwin does normalize the filename to
           # NFD (a variant of Unicode NFD form). Normalize the filename to NFC, NFKC,
           # NFKD in Python is useless, because darwin will normalize it later and so
           # open(), os.stat(), etc. don't raise any exception.
    1:     @unittest.skipIf(sys.platform == 'darwin', 'irrelevant test on Mac OS X')
           def test_normalize(self):
>>>>>>         files = set(f for f in self.files if isinstance(f, unicode))
>>>>>>         others = set()
>>>>>>         for nf in set(['NFC', 'NFD', 'NFKC', 'NFKD']):
>>>>>>             others |= set(normalize(nf, file) for file in files)
>>>>>>         others -= files
>>>>>>         for name in others:
>>>>>>             self._apply_failure(open, name, IOError)
>>>>>>             self._apply_failure(os.stat, name, OSError)
>>>>>>             self._apply_failure(os.chdir, name, OSError)
>>>>>>             self._apply_failure(os.rmdir, name, OSError)
>>>>>>             self._apply_failure(os.remove, name, OSError)
                   # listdir may append a wildcard to the filename, so dont check
>>>>>>             self._apply_failure(os.listdir, name, OSError, False)
       
           # Skip the test on darwin, because darwin uses a normalization different
           # than Python NFD normalization: filenames are different even if we use
           # Python NFD normalization.
    1:     @unittest.skipIf(sys.platform == 'darwin', 'irrelevant test on Mac OS X')
           def test_listdir(self):
>>>>>>         sf0 = set(self.files)
>>>>>>         f1 = os.listdir(test_support.TESTFN)
>>>>>>         f2 = os.listdir(unicode(test_support.TESTFN,
>>>>>>                                 sys.getfilesystemencoding()))
>>>>>>         sf2 = set(os.path.join(unicode(test_support.TESTFN), f) for f in f2)
>>>>>>         self.assertEqual(sf0, sf2)
>>>>>>         self.assertEqual(len(f1), len(f2))
       
    1:     def test_rename(self):
   55:         for name in self.files:
   50:             os.rename(name, "tmp")
   50:             os.rename("tmp", name)
       
    1:     def test_directory(self):
    5:         dirname = os.path.join(test_support.TESTFN,
    5:                                u'Gr\xfc\xdf-\u66e8\u66e9\u66eb')
    5:         filename = u'\xdf-\u66e8\u66e9\u66eb'
    5:         with test_support.temp_cwd(dirname):
    5:             with open(filename, 'w') as f:
    5:                 f.write((filename + '\n').encode("utf-8"))
    5:             os.access(filename,os.R_OK)
    5:             os.remove(filename)
       
       
    2: class UnicodeNFCFileTests(UnicodeFileTests):
    1:     normal_form = 'NFC'
       
       
    2: class UnicodeNFDFileTests(UnicodeFileTests):
    1:     normal_form = 'NFD'
       
       
    2: class UnicodeNFKCFileTests(UnicodeFileTests):
    1:     normal_form = 'NFKC'
       
       
    2: class UnicodeNFKDFileTests(UnicodeFileTests):
    1:     normal_form = 'NFKD'
       
       
    1: def test_main():
    1:     try:
    1:         test_support.run_unittest(
    1:             UnicodeFileTests,
    1:             UnicodeNFCFileTests,
    1:             UnicodeNFDFileTests,
    1:             UnicodeNFKCFileTests,
    1:             UnicodeNFKDFileTests,
               )
           finally:
    1:         deltree(test_support.TESTFN)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
