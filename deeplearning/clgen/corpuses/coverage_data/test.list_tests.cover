       """
       Tests common to list and UserList.UserList
    1: """
       
    1: import sys
    1: import os
       
    1: from test import test_support, seq_tests
       
    2: class CommonTest(seq_tests.CommonTest):
       
    1:     def test_init(self):
               # Iterable arg is optional
    2:         self.assertEqual(self.type2test([]), self.type2test())
       
               # Init clears previous values
    2:         a = self.type2test([1, 2, 3])
    2:         a.__init__()
    2:         self.assertEqual(a, self.type2test([]))
       
               # Init overwrites previous values
    2:         a = self.type2test([1, 2, 3])
    2:         a.__init__([4, 5, 6])
    2:         self.assertEqual(a, self.type2test([4, 5, 6]))
       
               # Mutables always return a new object
    2:         b = self.type2test(a)
    2:         self.assertNotEqual(id(a), id(b))
    2:         self.assertEqual(a, b)
       
    1:     def test_repr(self):
    2:         l0 = []
    2:         l2 = [0, 1, 2]
    2:         a0 = self.type2test(l0)
    2:         a2 = self.type2test(l2)
       
    2:         self.assertEqual(str(a0), str(l0))
    2:         self.assertEqual(repr(a0), repr(l0))
    2:         self.assertEqual(repr(a2), repr(l2))
    2:         self.assertEqual(str(a2), "[0, 1, 2]")
    2:         self.assertEqual(repr(a2), "[0, 1, 2]")
       
    2:         a2.append(a2)
    2:         a2.append(3)
    2:         self.assertEqual(str(a2), "[0, 1, 2, [...], 3]")
    2:         self.assertEqual(repr(a2), "[0, 1, 2, [...], 3]")
       
    2:         l0 = []
 2202:         for i in xrange(sys.getrecursionlimit() + 100):
 2200:             l0 = [l0]
    2:         self.assertRaises(RuntimeError, repr, l0)
       
    1:     def test_print(self):
    2:         d = self.type2test(xrange(200))
    2:         d.append(d)
    2:         d.extend(xrange(200,400))
    2:         d.append(d)
    2:         d.append(400)
    2:         try:
    2:             with open(test_support.TESTFN, "wb") as fo:
    2:                 print >> fo, d,
    2:             with open(test_support.TESTFN, "rb") as fo:
    2:                 self.assertEqual(fo.read(), repr(d))
               finally:
    2:             os.remove(test_support.TESTFN)
       
    1:     def test_set_subscript(self):
    2:         a = self.type2test(range(20))
    2:         self.assertRaises(ValueError, a.__setitem__, slice(0, 10, 0), [1,2,3])
    2:         self.assertRaises(TypeError, a.__setitem__, slice(0, 10), 1)
    2:         self.assertRaises(ValueError, a.__setitem__, slice(0, 10, 2), [1,2])
    2:         self.assertRaises(TypeError, a.__getitem__, 'x', 1)
    2:         a[slice(2,10,3)] = [1,2,3]
    2:         self.assertEqual(a, self.type2test([0, 1, 1, 3, 4, 2, 6, 7, 3,
    2:                                             9, 10, 11, 12, 13, 14, 15,
    2:                                             16, 17, 18, 19]))
       
    1:     def test_reversed(self):
    2:         a = self.type2test(range(20))
    2:         r = reversed(a)
    2:         self.assertEqual(list(r), self.type2test(range(19, -1, -1)))
    2:         self.assertRaises(StopIteration, r.next)
    2:         self.assertEqual(list(reversed(self.type2test())),
    2:                          self.type2test())
               # Bug 3689: make sure list-reversed-iterator doesn't have __len__
    2:         self.assertRaises(TypeError, len, reversed([1,2,3]))
       
    1:     def test_setitem(self):
    2:         a = self.type2test([0, 1])
    2:         a[0] = 0
    2:         a[1] = 100
    2:         self.assertEqual(a, self.type2test([0, 100]))
    2:         a[-1] = 200
    2:         self.assertEqual(a, self.type2test([0, 200]))
    2:         a[-2] = 100
    2:         self.assertEqual(a, self.type2test([100, 200]))
    2:         self.assertRaises(IndexError, a.__setitem__, -3, 200)
    2:         self.assertRaises(IndexError, a.__setitem__, 2, 200)
       
    2:         a = self.type2test([])
    2:         self.assertRaises(IndexError, a.__setitem__, 0, 200)
    2:         self.assertRaises(IndexError, a.__setitem__, -1, 200)
    2:         self.assertRaises(TypeError, a.__setitem__)
       
    2:         a = self.type2test([0,1,2,3,4])
    2:         a[0L] = 1
    2:         a[1L] = 2
    2:         a[2L] = 3
    2:         self.assertEqual(a, self.type2test([1,2,3,3,4]))
    2:         a[0] = 5
    2:         a[1] = 6
    2:         a[2] = 7
    2:         self.assertEqual(a, self.type2test([5,6,7,3,4]))
    2:         a[-2L] = 88
    2:         a[-1L] = 99
    2:         self.assertEqual(a, self.type2test([5,6,7,88,99]))
    2:         a[-2] = 8
    2:         a[-1] = 9
    2:         self.assertEqual(a, self.type2test([5,6,7,8,9]))
       
    1:     def test_delitem(self):
    2:         a = self.type2test([0, 1])
    2:         del a[1]
    2:         self.assertEqual(a, [0])
    2:         del a[0]
    2:         self.assertEqual(a, [])
       
    2:         a = self.type2test([0, 1])
    2:         del a[-2]
    2:         self.assertEqual(a, [1])
    2:         del a[-1]
    2:         self.assertEqual(a, [])
       
    2:         a = self.type2test([0, 1])
    2:         self.assertRaises(IndexError, a.__delitem__, -3)
    2:         self.assertRaises(IndexError, a.__delitem__, 2)
       
    2:         a = self.type2test([])
    2:         self.assertRaises(IndexError, a.__delitem__, 0)
       
    2:         self.assertRaises(TypeError, a.__delitem__)
       
    1:     def test_setslice(self):
    2:         l = [0, 1]
    2:         a = self.type2test(l)
       
   16:         for i in range(-3, 4):
   14:             a[:i] = l[:i]
   14:             self.assertEqual(a, l)
   14:             a2 = a[:]
   14:             a2[:i] = a[:i]
   14:             self.assertEqual(a2, a)
   14:             a[i:] = l[i:]
   14:             self.assertEqual(a, l)
   14:             a2 = a[:]
   14:             a2[i:] = a[i:]
   14:             self.assertEqual(a2, a)
  112:             for j in range(-3, 4):
   98:                 a[i:j] = l[i:j]
   98:                 self.assertEqual(a, l)
   98:                 a2 = a[:]
   98:                 a2[i:j] = a[i:j]
   98:                 self.assertEqual(a2, a)
       
    2:         aa2 = a2[:]
    2:         aa2[:0] = [-2, -1]
    2:         self.assertEqual(aa2, [-2, -1, 0, 1])
    2:         aa2[0:] = []
    2:         self.assertEqual(aa2, [])
       
    2:         a = self.type2test([1, 2, 3, 4, 5])
    2:         a[:-1] = a
    2:         self.assertEqual(a, self.type2test([1, 2, 3, 4, 5, 5]))
    2:         a = self.type2test([1, 2, 3, 4, 5])
    2:         a[1:] = a
    2:         self.assertEqual(a, self.type2test([1, 1, 2, 3, 4, 5]))
    2:         a = self.type2test([1, 2, 3, 4, 5])
    2:         a[1:-1] = a
    2:         self.assertEqual(a, self.type2test([1, 1, 2, 3, 4, 5, 5]))
       
    2:         a = self.type2test([])
    2:         a[:] = tuple(range(10))
    2:         self.assertEqual(a, self.type2test(range(10)))
       
    2:         self.assertRaises(TypeError, a.__setslice__, 0, 1, 5)
    2:         self.assertRaises(TypeError, a.__setitem__, slice(0, 1, 5))
       
    2:         self.assertRaises(TypeError, a.__setslice__)
    2:         self.assertRaises(TypeError, a.__setitem__)
       
    1:     def test_delslice(self):
    2:         a = self.type2test([0, 1])
    2:         del a[1:2]
    2:         del a[0:1]
    2:         self.assertEqual(a, self.type2test([]))
       
    2:         a = self.type2test([0, 1])
    2:         del a[1L:2L]
    2:         del a[0L:1L]
    2:         self.assertEqual(a, self.type2test([]))
       
    2:         a = self.type2test([0, 1])
    2:         del a[-2:-1]
    2:         self.assertEqual(a, self.type2test([1]))
       
    2:         a = self.type2test([0, 1])
    2:         del a[-2L:-1L]
    2:         self.assertEqual(a, self.type2test([1]))
       
    2:         a = self.type2test([0, 1])
    2:         del a[1:]
    2:         del a[:1]
    2:         self.assertEqual(a, self.type2test([]))
       
    2:         a = self.type2test([0, 1])
    2:         del a[1L:]
    2:         del a[:1L]
    2:         self.assertEqual(a, self.type2test([]))
       
    2:         a = self.type2test([0, 1])
    2:         del a[-1:]
    2:         self.assertEqual(a, self.type2test([0]))
       
    2:         a = self.type2test([0, 1])
    2:         del a[-1L:]
    2:         self.assertEqual(a, self.type2test([0]))
       
    2:         a = self.type2test([0, 1])
    2:         del a[:]
    2:         self.assertEqual(a, self.type2test([]))
       
    1:     def test_append(self):
    2:         a = self.type2test([])
    2:         a.append(0)
    2:         a.append(1)
    2:         a.append(2)
    2:         self.assertEqual(a, self.type2test([0, 1, 2]))
       
    2:         self.assertRaises(TypeError, a.append)
       
    1:     def test_extend(self):
    2:         a1 = self.type2test([0])
    2:         a2 = self.type2test((0, 1))
    2:         a = a1[:]
    2:         a.extend(a2)
    2:         self.assertEqual(a, a1 + a2)
       
    2:         a.extend(self.type2test([]))
    2:         self.assertEqual(a, a1 + a2)
       
    2:         a.extend(a)
    2:         self.assertEqual(a, self.type2test([0, 0, 1, 0, 0, 1]))
       
    2:         a = self.type2test("spam")
    2:         a.extend("eggs")
    2:         self.assertEqual(a, list("spameggs"))
       
    2:         self.assertRaises(TypeError, a.extend, None)
       
    2:         self.assertRaises(TypeError, a.extend)
       
    1:     def test_insert(self):
    2:         a = self.type2test([0, 1, 2])
    2:         a.insert(0, -2)
    2:         a.insert(1, -1)
    2:         a.insert(2, 0)
    2:         self.assertEqual(a, [-2, -1, 0, 0, 1, 2])
       
    2:         b = a[:]
    2:         b.insert(-2, "foo")
    2:         b.insert(-200, "left")
    2:         b.insert(200, "right")
    2:         self.assertEqual(b, self.type2test(["left",-2,-1,0,0,"foo",1,2,"right"]))
       
    2:         self.assertRaises(TypeError, a.insert)
       
    1:     def test_pop(self):
    2:         a = self.type2test([-1, 0, 1])
    2:         a.pop()
    2:         self.assertEqual(a, [-1, 0])
    2:         a.pop(0)
    2:         self.assertEqual(a, [0])
    2:         self.assertRaises(IndexError, a.pop, 5)
    2:         a.pop(0)
    2:         self.assertEqual(a, [])
    2:         self.assertRaises(IndexError, a.pop)
    2:         self.assertRaises(TypeError, a.pop, 42, 42)
    2:         a = self.type2test([0, 10, 20, 30, 40])
       
    1:     def test_remove(self):
    2:         a = self.type2test([0, 0, 1])
    2:         a.remove(1)
    2:         self.assertEqual(a, [0, 0])
    2:         a.remove(0)
    2:         self.assertEqual(a, [0])
    2:         a.remove(0)
    2:         self.assertEqual(a, [])
       
    2:         self.assertRaises(ValueError, a.remove, 0)
       
    2:         self.assertRaises(TypeError, a.remove)
       
    4:         class BadExc(Exception):
    2:             pass
       
    4:         class BadCmp:
    2:             def __eq__(self, other):
    6:                 if other == 2:
    2:                     raise BadExc()
    4:                 return False
       
    2:         a = self.type2test([0, 1, 2, 3])
    2:         self.assertRaises(BadExc, a.remove, BadCmp())
       
    4:         class BadCmp2:
    2:             def __eq__(self, other):
    2:                 raise BadExc()
       
    2:         d = self.type2test('abcdefghcij')
    2:         d.remove('c')
    2:         self.assertEqual(d, self.type2test('abdefghcij'))
    2:         d.remove('c')
    2:         self.assertEqual(d, self.type2test('abdefghij'))
    2:         self.assertRaises(ValueError, d.remove, 'c')
    2:         self.assertEqual(d, self.type2test('abdefghij'))
       
               # Handle comparison errors
    2:         d = self.type2test(['a', 'b', BadCmp2(), 'c'])
    2:         e = self.type2test(d)
    2:         self.assertRaises(BadExc, d.remove, 'c')
   10:         for x, y in zip(d, e):
                   # verify that original order and values are retained.
    8:             self.assertIs(x, y)
       
    1:     def test_count(self):
    2:         a = self.type2test([0, 1, 2])*3
    2:         self.assertEqual(a.count(0), 3)
    2:         self.assertEqual(a.count(1), 3)
    2:         self.assertEqual(a.count(3), 0)
       
    2:         self.assertRaises(TypeError, a.count)
       
    4:         class BadExc(Exception):
    2:             pass
       
    4:         class BadCmp:
    2:             def __eq__(self, other):
    6:                 if other == 2:
    2:                     raise BadExc()
    4:                 return False
       
    2:         self.assertRaises(BadExc, a.count, BadCmp())
       
    1:     def test_index(self):
    2:         u = self.type2test([0, 1])
    2:         self.assertEqual(u.index(0), 0)
    2:         self.assertEqual(u.index(1), 1)
    2:         self.assertRaises(ValueError, u.index, 2)
       
    2:         u = self.type2test([-2, -1, 0, 0, 1, 2])
    2:         self.assertEqual(u.count(0), 2)
    2:         self.assertEqual(u.index(0), 2)
    2:         self.assertEqual(u.index(0, 2), 2)
    2:         self.assertEqual(u.index(-2, -10), 0)
    2:         self.assertEqual(u.index(0, 3), 3)
    2:         self.assertEqual(u.index(0, 3, 4), 3)
    2:         self.assertRaises(ValueError, u.index, 2, 0, -10)
       
    2:         self.assertRaises(TypeError, u.index)
       
    4:         class BadExc(Exception):
    2:             pass
       
    4:         class BadCmp:
    2:             def __eq__(self, other):
    6:                 if other == 2:
    2:                     raise BadExc()
    4:                 return False
       
    2:         a = self.type2test([0, 1, 2, 3])
    2:         self.assertRaises(BadExc, a.index, BadCmp())
       
    2:         a = self.type2test([-2, -1, 0, 0, 1, 2])
    2:         self.assertEqual(a.index(0), 2)
    2:         self.assertEqual(a.index(0, 2), 2)
    2:         self.assertEqual(a.index(0, -4), 2)
    2:         self.assertEqual(a.index(-2, -10), 0)
    2:         self.assertEqual(a.index(0, 3), 3)
    2:         self.assertEqual(a.index(0, -3), 3)
    2:         self.assertEqual(a.index(0, 3, 4), 3)
    2:         self.assertEqual(a.index(0, -3, -2), 3)
    2:         self.assertEqual(a.index(0, -4*sys.maxint, 4*sys.maxint), 2)
    2:         self.assertRaises(ValueError, a.index, 0, 4*sys.maxint,-4*sys.maxint)
    2:         self.assertRaises(ValueError, a.index, 2, 0, -10)
    2:         a.remove(0)
    2:         self.assertRaises(ValueError, a.index, 2, 0, 4)
    2:         self.assertEqual(a, self.type2test([-2, -1, 0, 1, 2]))
       
               # Test modifying the list during index's iteration
    4:         class EvilCmp:
    2:             def __init__(self, victim):
  200:                 self.victim = victim
    2:             def __eq__(self, other):
    2:                 del self.victim[:]
    2:                 return False
    2:         a = self.type2test()
  202:         a[:] = [EvilCmp(a) for _ in xrange(100)]
               # This used to seg fault before patch #1005778
    2:         self.assertRaises(ValueError, a.index, None)
       
    1:     def test_reverse(self):
    2:         u = self.type2test([-2, -1, 0, 1, 2])
    2:         u2 = u[:]
    2:         u.reverse()
    2:         self.assertEqual(u, [2, 1, 0, -1, -2])
    2:         u.reverse()
    2:         self.assertEqual(u, u2)
       
    2:         self.assertRaises(TypeError, u.reverse, 42)
       
    1:     def test_sort(self):
    2:         with test_support.check_py3k_warnings(
    2:                 ("the cmp argument is not supported", DeprecationWarning)):
    2:             self._test_sort()
       
    1:     def _test_sort(self):
    2:         u = self.type2test([1, 0])
    2:         u.sort()
    2:         self.assertEqual(u, [0, 1])
       
    2:         u = self.type2test([2,1,0,-1,-2])
    2:         u.sort()
    2:         self.assertEqual(u, self.type2test([-2,-1,0,1,2]))
       
    2:         self.assertRaises(TypeError, u.sort, 42, 42)
       
    2:         def revcmp(a, b):
    8:             return cmp(b, a)
    2:         u.sort(revcmp)
    2:         self.assertEqual(u, self.type2test([2,1,0,-1,-2]))
       
               # The following dumps core in unpatched Python 1.5:
    2:         def myComparison(x,y):
   60:             return cmp(x%3, y%7)
    2:         z = self.type2test(range(12))
    2:         z.sort(myComparison)
       
    2:         self.assertRaises(TypeError, z.sort, 2)
       
    2:         def selfmodifyingComparison(x,y):
   60:             z.append(1)
   60:             return cmp(x, y)
    2:         self.assertRaises(ValueError, z.sort, selfmodifyingComparison)
       
    4:         self.assertRaises(TypeError, z.sort, lambda x, y: 's')
       
    2:         self.assertRaises(TypeError, z.sort, 42, 42, 42, 42)
       
    1:     def test_slice(self):
    2:         u = self.type2test("spam")
    2:         u[:2] = "h"
    2:         self.assertEqual(u, list("ham"))
       
    1:     def test_iadd(self):
    2:         super(CommonTest, self).test_iadd()
    2:         u = self.type2test([0, 1])
    2:         u2 = u
    2:         u += [2, 3]
    2:         self.assertIs(u, u2)
       
    2:         u = self.type2test("spam")
    2:         u += "eggs"
    2:         self.assertEqual(u, self.type2test("spameggs"))
       
    2:         self.assertRaises(TypeError, u.__iadd__, None)
       
    1:     def test_imul(self):
    2:         u = self.type2test([0, 1])
    2:         u *= 3
    2:         self.assertEqual(u, self.type2test([0, 1, 0, 1, 0, 1]))
    2:         u *= 0
    2:         self.assertEqual(u, self.type2test([]))
    2:         s = self.type2test([])
    2:         oldid = id(s)
    2:         s *= 10
    2:         self.assertEqual(id(s), oldid)
       
    1:     def test_extendedslicing(self):
               #  subscript
    2:         a = self.type2test([0,1,2,3,4])
       
               #  deletion
    2:         del a[::2]
    2:         self.assertEqual(a, self.type2test([1,3]))
    2:         a = self.type2test(range(5))
    2:         del a[1::2]
    2:         self.assertEqual(a, self.type2test([0,2,4]))
    2:         a = self.type2test(range(5))
    2:         del a[1::-2]
    2:         self.assertEqual(a, self.type2test([0,2,3,4]))
    2:         a = self.type2test(range(10))
    2:         del a[::1000]
    2:         self.assertEqual(a, self.type2test([1, 2, 3, 4, 5, 6, 7, 8, 9]))
               #  assignment
    2:         a = self.type2test(range(10))
    2:         a[::2] = [-1]*5
    2:         self.assertEqual(a, self.type2test([-1, 1, -1, 3, -1, 5, -1, 7, -1, 9]))
    2:         a = self.type2test(range(10))
    2:         a[::-4] = [10]*3
    2:         self.assertEqual(a, self.type2test([0, 10, 2, 3, 4, 10, 6, 7, 8 ,10]))
    2:         a = self.type2test(range(4))
    2:         a[::-1] = a
    2:         self.assertEqual(a, self.type2test([3, 2, 1, 0]))
    2:         a = self.type2test(range(10))
    2:         b = a[:]
    2:         c = a[:]
    2:         a[2:3] = self.type2test(["two", "elements"])
    2:         b[slice(2,3)] = self.type2test(["two", "elements"])
    2:         c[2:3:] = self.type2test(["two", "elements"])
    2:         self.assertEqual(a, b)
    2:         self.assertEqual(a, c)
    2:         a = self.type2test(range(10))
    2:         a[::2] = tuple(range(5))
    2:         self.assertEqual(a, self.type2test([0, 1, 1, 3, 2, 5, 3, 7, 4, 9]))
               # test issue7788
    2:         a = self.type2test(range(10))
    2:         del a[9::1<<333]
       
    1:     def test_constructor_exception_handling(self):
               # Bug #1242657
    4:         class F(object):
    2:             def __iter__(self):
    2:                 raise KeyboardInterrupt
    2:         self.assertRaises(KeyboardInterrupt, list, F())
       
    1:     def test_exhausted_iterator(self):
    2:         a = self.type2test([1, 2, 3])
    2:         exhit = iter(a)
    2:         empit = iter(a)
    8:         for x in exhit:  # exhaust the iterator
    6:             next(empit)  # not exhausted
    2:         a.append(9)
    2:         self.assertEqual(list(exhit), [])
    2:         self.assertEqual(list(empit), [9])
    2:         self.assertEqual(a, self.type2test([1, 2, 3, 9]))
