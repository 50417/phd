    1: import unittest
    1: from test import test_support
    1: import sys
    1: new = test_support.import_module('new', deprecated=True)
       
    2: class NewTest(unittest.TestCase):
    1:     def test_spam(self):
    2:         class Eggs:
    1:             def get_yolks(self):
    3:                 return self.yolks
       
    1:         m = new.module('Spam')
    1:         m.Eggs = Eggs
    1:         sys.modules['Spam'] = m
    1:         import Spam
       
    1:         def get_more_yolks(self):
    2:             return self.yolks + 3
       
               # new.classobj()
    1:         C = new.classobj('Spam', (Spam.Eggs,), {'get_more_yolks': get_more_yolks})
       
               # new.instance()
    1:         c = new.instance(C, {'yolks': 3})
       
    1:         o = new.instance(C)
    1:         self.assertEqual(o.__dict__, {}, "new __dict__ should be empty")
    1:         del o
    1:         o = new.instance(C, None)
    1:         self.assertEqual(o.__dict__, {}, "new __dict__ should be empty")
    1:         del o
       
    1:         def break_yolks(self):
    2:             self.yolks = self.yolks - 2
       
               # new.instancemethod()
    1:         im = new.instancemethod(break_yolks, c, C)
       
    1:         self.assertEqual(c.get_yolks(), 3,
    1:             'Broken call of hand-crafted class instance')
    1:         self.assertEqual(c.get_more_yolks(), 6,
    1:             'Broken call of hand-crafted class instance')
       
    1:         im()
    1:         self.assertEqual(c.get_yolks(), 1,
    1:             'Broken call of hand-crafted instance method')
    1:         self.assertEqual(c.get_more_yolks(), 4,
    1:             'Broken call of hand-crafted instance method')
       
    1:         im = new.instancemethod(break_yolks, c)
    1:         im()
    1:         self.assertEqual(c.get_yolks(), -1)
       
               # Verify that dangerous instance method creation is forbidden
    1:         self.assertRaises(TypeError, new.instancemethod, break_yolks, None)
       
               # Verify that instancemethod() doesn't allow keyword args
    1:         self.assertRaises(TypeError, new.instancemethod, break_yolks, c, kw=1)
       
    1:     def test_scope(self):
               # It's unclear what the semantics should be for a code object compiled
               # at module scope, but bound and run in a function.  In CPython, `c' is
               # global (by accident?) while in Jython, `c' is local.  The intent of
               # the test clearly is to make `c' global, so let's be explicit about it.
               codestr = '''
               global c
               a = 1
               b = 2
               c = a + b
    1:         '''
       
    8:         codestr = "\n".join(l.strip() for l in codestr.splitlines())
       
    1:         ccode = compile(codestr, '<string>', 'exec')
               # Jython doesn't have a __builtins__, so use a portable alternative
    1:         import __builtin__
    1:         g = {'c': 0, '__builtins__': __builtin__}
       
               # this test could be more robust
    1:         func = new.function(ccode, g)
    1:         func()
    1:         self.assertEqual(g['c'], 3, 'Could not create a proper function object')
       
    1:     def test_function(self):
               # test the various extended flavors of function.new
    1:         def f(x):
    1:             def g(y):
>>>>>>                 return x + y
    1:             return g
    1:         g = f(4)
    1:         new.function(f.func_code, {}, "blah")
    1:         g2 = new.function(g.func_code, {}, "blah", (2,), g.func_closure)
    1:         self.assertEqual(g2(), 6)
    1:         g3 = new.function(g.func_code, {}, "blah", None, g.func_closure)
    1:         self.assertEqual(g3(5), 9)
    1:         def test_closure(func, closure, exc):
    4:             self.assertRaises(exc, new.function, func.func_code, {}, "", None, closure)
       
    1:         test_closure(g, None, TypeError) # invalid closure
    1:         test_closure(g, (1,), TypeError) # non-cell in closure
    1:         test_closure(g, (1, 1), ValueError) # closure is wrong size
    1:         test_closure(f, g.func_closure, ValueError) # no closure needed
       
           # Note: Jython will never have new.code()
    1:     if hasattr(new, 'code'):
    1:         def test_code(self):
                   # bogus test of new.code()
    1:             def f(a): pass
       
    1:             c = f.func_code
    1:             argcount = c.co_argcount
    1:             nlocals = c.co_nlocals
    1:             stacksize = c.co_stacksize
    1:             flags = c.co_flags
    1:             codestring = c.co_code
    1:             constants = c.co_consts
    1:             names = c.co_names
    1:             varnames = c.co_varnames
    1:             filename = c.co_filename
    1:             name = c.co_name
    1:             firstlineno = c.co_firstlineno
    1:             lnotab = c.co_lnotab
    1:             freevars = c.co_freevars
    1:             cellvars = c.co_cellvars
       
    1:             d = new.code(argcount, nlocals, stacksize, flags, codestring,
    1:                          constants, names, varnames, filename, name,
    1:                          firstlineno, lnotab, freevars, cellvars)
       
                   # test backwards-compatibility version with no freevars or cellvars
    1:             d = new.code(argcount, nlocals, stacksize, flags, codestring,
    1:                          constants, names, varnames, filename, name,
    1:                          firstlineno, lnotab)
       
                   # negative co_argcount used to trigger a SystemError
    1:             self.assertRaises(ValueError, new.code,
    1:                 -argcount, nlocals, stacksize, flags, codestring,
    1:                 constants, names, varnames, filename, name, firstlineno, lnotab)
       
                   # negative co_nlocals used to trigger a SystemError
    1:             self.assertRaises(ValueError, new.code,
    1:                 argcount, -nlocals, stacksize, flags, codestring,
    1:                 constants, names, varnames, filename, name, firstlineno, lnotab)
       
                   # non-string co_name used to trigger a Py_FatalError
    1:             self.assertRaises(TypeError, new.code,
    1:                 argcount, nlocals, stacksize, flags, codestring,
    1:                 constants, (5,), varnames, filename, name, firstlineno, lnotab)
       
                   # new.code used to be a way to mutate a tuple...
    2:             class S(str):
    1:                 pass
    1:             t = (S("ab"),)
    1:             d = new.code(argcount, nlocals, stacksize, flags, codestring,
    1:                          constants, t, varnames, filename, name,
    1:                          firstlineno, lnotab)
    1:             self.assertTrue(type(t[0]) is S, "eek, tuple changed under us!")
       
    1: def test_main():
    1:     test_support.run_unittest(NewTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
