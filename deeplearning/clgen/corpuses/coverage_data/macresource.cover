    1: """macresource - Locate and open the resources needed for a script."""
       
    1: from warnings import warnpy3k
    1: warnpy3k("In 3.x, the macresource module is removed.", stacklevel=2)
       
    1: from Carbon import Res
    1: import os
    1: import sys
    1: import MacOS
    1: import macostools
       
    2: class ArgumentError(TypeError): pass
    2: class ResourceFileNotFoundError(ImportError): pass
       
    1: def need(restype, resid, filename=None, modname=None):
           """Open a resource file, if needed. restype and resid
           are required parameters, and identify the resource for which to test. If it
           is available we are done. If it is not available we look for a file filename
           (default: modname with .rsrc appended) either in the same folder as
           where modname was loaded from, or otherwise across sys.path.
       
           Returns the refno of the resource file opened (or None)"""
       
    1:     if modname is None and filename is None:
>>>>>>         raise ArgumentError, "Either filename or modname argument (or both) must be given"
       
    1:     if type(resid) is type(1):
    1:         try:
    1:             h = Res.GetResource(restype, resid)
    1:         except Res.Error:
    1:             pass
               else:
>>>>>>             return None
           else:
>>>>>>         try:
>>>>>>             h = Res.GetNamedResource(restype, resid)
>>>>>>         except Res.Error:
>>>>>>             pass
               else:
>>>>>>             return None
       
           # Construct a filename if we don't have one
    1:     if not filename:
>>>>>>         if '.' in modname:
>>>>>>             filename = modname.split('.')[-1] + '.rsrc'
               else:
>>>>>>             filename = modname + '.rsrc'
       
           # Now create a list of folders to search
    1:     searchdirs = []
    1:     if modname == '__main__':
               # If we're main we look in the current directory
>>>>>>         searchdirs = [os.curdir]
    1:     if modname in sys.modules:
    1:         mod = sys.modules[modname]
    1:         if hasattr(mod, '__file__'):
    1:             searchdirs = [os.path.dirname(mod.__file__)]
    1:     searchdirs.extend(sys.path)
       
           # And look for the file
    1:     for dir in searchdirs:
    1:         pathname = os.path.join(dir, filename)
    1:         if os.path.exists(pathname):
    1:             break
           else:
>>>>>>         raise ResourceFileNotFoundError, filename
       
    1:     refno = open_pathname(pathname)
       
           # And check that the resource exists now
    1:     if type(resid) is type(1):
    1:         h = Res.GetResource(restype, resid)
           else:
>>>>>>         h = Res.GetNamedResource(restype, resid)
    1:     return refno
       
    1: def open_pathname(pathname, verbose=0):
           """Open a resource file given by pathname, possibly decoding an
           AppleSingle file"""
           # No resource fork. We may be on OSX, and this may be either
           # a data-fork based resource file or an AppleSingle file
           # from the CVS repository.
    1:     try:
    1:         refno = Res.FSOpenResourceFile(pathname, u'', 1)
    1:     except Res.Error, arg:
    1:         if arg[0] != -199:
                   # -199 is "bad resource map"
>>>>>>             raise
           else:
>>>>>>         return refno
           # Finally try decoding an AppleSingle file
    1:     pathname = _decode(pathname, verbose=verbose)
    1:     refno = Res.FSOpenResourceFile(pathname, u'', 1)
       
    1: def resource_pathname(pathname, verbose=0):
           """Return the pathname for a resource file (either DF or RF based).
           If the pathname given already refers to such a file simply return it,
           otherwise first decode it."""
           # No resource fork. We may be on OSX, and this may be either
           # a data-fork based resource file or an AppleSingle file
           # from the CVS repository.
>>>>>>     try:
>>>>>>         refno = Res.FSOpenResourceFile(pathname, u'', 1)
>>>>>>     except Res.Error, arg:
>>>>>>         if arg[0] != -199:
                   # -199 is "bad resource map"
>>>>>>             raise
           else:
>>>>>>         return refno
           # Finally try decoding an AppleSingle file
>>>>>>     pathname = _decode(pathname, verbose=verbose)
>>>>>>     return pathname
       
    1: def open_error_resource():
           """Open the resource file containing the error code to error message
           mapping."""
    1:     need('Estr', 1, filename="errors.rsrc", modname=__name__)
       
    1: def _decode(pathname, verbose=0):
           # Decode an AppleSingle resource file, return the new pathname.
    1:     newpathname = pathname + '.df.rsrc'
    1:     if os.path.exists(newpathname) and \
    1:         os.stat(newpathname).st_mtime >= os.stat(pathname).st_mtime:
    1:         return newpathname
>>>>>>     if hasattr(os, 'access') and not \
>>>>>>         os.access(os.path.dirname(pathname), os.W_OK|os.X_OK):
               # The destination directory isn't writeable. Create the file in
               # a temporary directory
>>>>>>         import tempfile
>>>>>>         fd, newpathname = tempfile.mkstemp(".rsrc")
>>>>>>     if verbose:
>>>>>>         print 'Decoding', pathname, 'to', newpathname
>>>>>>     import applesingle
>>>>>>     applesingle.decode(pathname, newpathname, resonly=1)
>>>>>>     return newpathname
