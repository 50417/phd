    1: from test.test_support import run_unittest, open_urlresource
    1: import unittest
       
    1: from httplib import HTTPException
    1: import sys
    1: import os
    1: from unicodedata import normalize, unidata_version
       
    1: TESTDATAFILE = "NormalizationTest.txt"
    1: TESTDATAURL = "http://www.pythontest.net/unicode/" + unidata_version + "/" + TESTDATAFILE
       
    1: def check_version(testfile):
>>>>>>     hdr = testfile.readline()
>>>>>>     return unidata_version in hdr
       
    2: class RangeError(Exception):
    1:     pass
       
    1: def NFC(str):
>>>>>>     return normalize("NFC", str)
       
    1: def NFKC(str):
>>>>>>     return normalize("NFKC", str)
       
    1: def NFD(str):
>>>>>>     return normalize("NFD", str)
       
    1: def NFKD(str):
>>>>>>     return normalize("NFKD", str)
       
    1: def unistr(data):
>>>>>>     data = [int(x, 16) for x in data.split(" ")]
>>>>>>     for x in data:
>>>>>>         if x > sys.maxunicode:
>>>>>>             raise RangeError
>>>>>>     return u"".join([unichr(x) for x in data])
       
    2: class NormalizationTest(unittest.TestCase):
    1:     def test_main(self):
    1:         part = None
    1:         part1_data = {}
               # Hit the exception early
    1:         try:
    1:             testdata = open_urlresource(TESTDATAURL, check_version)
    1:         except (IOError, HTTPException):
>>>>>>             self.skipTest("Could not retrieve " + TESTDATAURL)
>>>>>>         for line in testdata:
>>>>>>             if '#' in line:
>>>>>>                 line = line.split('#')[0]
>>>>>>             line = line.strip()
>>>>>>             if not line:
>>>>>>                 continue
>>>>>>             if line.startswith("@Part"):
>>>>>>                 part = line.split()[0]
>>>>>>                 continue
>>>>>>             try:
>>>>>>                 c1,c2,c3,c4,c5 = [unistr(x) for x in line.split(';')[:-1]]
>>>>>>             except RangeError:
                       # Skip unsupported characters;
                       # try at least adding c1 if we are in part1
>>>>>>                 if part == "@Part1":
>>>>>>                     try:
>>>>>>                         c1 = unistr(line.split(';')[0])
>>>>>>                     except RangeError:
>>>>>>                         pass
                           else:
>>>>>>                         part1_data[c1] = 1
>>>>>>                 continue
       
                   # Perform tests
>>>>>>             self.assertTrue(c2 ==  NFC(c1) ==  NFC(c2) ==  NFC(c3), line)
>>>>>>             self.assertTrue(c4 ==  NFC(c4) ==  NFC(c5), line)
>>>>>>             self.assertTrue(c3 ==  NFD(c1) ==  NFD(c2) ==  NFD(c3), line)
>>>>>>             self.assertTrue(c5 ==  NFD(c4) ==  NFD(c5), line)
>>>>>>             self.assertTrue(c4 == NFKC(c1) == NFKC(c2) == \
>>>>>>                             NFKC(c3) == NFKC(c4) == NFKC(c5),
>>>>>>                             line)
>>>>>>             self.assertTrue(c5 == NFKD(c1) == NFKD(c2) == \
>>>>>>                             NFKD(c3) == NFKD(c4) == NFKD(c5),
>>>>>>                             line)
       
                   # Record part 1 data
>>>>>>             if part == "@Part1":
>>>>>>                 part1_data[c1] = 1
       
               # Perform tests for all other data
>>>>>>         for c in range(sys.maxunicode+1):
>>>>>>             X = unichr(c)
>>>>>>             if X in part1_data:
>>>>>>                 continue
>>>>>>             self.assertTrue(X == NFC(X) == NFD(X) == NFKC(X) == NFKD(X), c)
       
    1:     def test_bug_834676(self):
               # Check for bug 834676
    1:         normalize('NFC', u'\ud55c\uae00')
       
       
    1: def test_main():
    1:     run_unittest(NormalizationTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
