       # Copyright 2006 Google, Inc. All Rights Reserved.
       # Licensed to PSF under a Contributor Agreement.
       
       """
       Python parse tree definitions.
       
       This is a very concrete parse tree; we need to keep every token and
       even the comments and whitespace between tokens.
       
       There's also a pattern matching implementation here.
    1: """
       
    1: __author__ = "Guido van Rossum <guido@python.org>"
       
    1: import sys
    1: import warnings
    1: from StringIO import StringIO
       
    1: HUGE = 0x7FFFFFFF  # maximum repeat count, default max
       
    1: _type_reprs = {}
    1: def type_repr(type_num):
           global _type_reprs
    1:     if not _type_reprs:
    1:         from .pygram import python_symbols
               # printing tokens is possible but not as useful
               # from .pgen2 import token // token.__dict__.items():
   92:         for name, val in python_symbols.__dict__.items():
   91:             if type(val) == int: _type_reprs[val] = name
    1:     return _type_reprs.setdefault(type_num, type_num)
       
    2: class Base(object):
       
           """
           Abstract base class for Node and Leaf.
       
           This provides some default functionality and boilerplate using the
           template pattern.
       
           A node may be a subnode of at most one parent.
    1:     """
       
           # Default values for instance variables
    1:     type = None    # int: token number (< 256) or symbol number (>= 256)
    1:     parent = None  # Parent node pointer, or None
    1:     children = ()  # Tuple of subnodes
    1:     was_changed = False
    1:     was_checked = False
       
    1:     def __new__(cls, *args, **kwds):
               """Constructor that prevents Base from being instantiated."""
379935:         assert cls is not Base, "Cannot instantiate Base"
379934:         return object.__new__(cls)
       
    1:     def __eq__(self, other):
               """
               Compare two nodes for equality.
       
               This calls the method _eq().
               """
1772494:         if self.__class__ is not other.__class__:
840216:             return NotImplemented
932278:         return self._eq(other)
       
    1:     __hash__ = None # For Py3 compatibility.
       
    1:     def __ne__(self, other):
               """
               Compare two nodes for inequality.
       
               This calls the method _eq().
               """
    4:         if self.__class__ is not other.__class__:
>>>>>>             return NotImplemented
    4:         return not self._eq(other)
       
    1:     def _eq(self, other):
               """
               Compare two nodes for equality.
       
               This is called by __eq__ and __ne__.  It is only called if the two nodes
               have the same type.  This must be implemented by the concrete subclass.
               Nodes should be considered equal if they have the same structure,
               ignoring the prefix string and other context information.
               """
>>>>>>         raise NotImplementedError
       
    1:     def clone(self):
               """
               Return a cloned (deep) copy of self.
       
               This must be implemented by the concrete subclass.
               """
>>>>>>         raise NotImplementedError
       
    1:     def post_order(self):
               """
               Return a post-order iterator for the tree.
       
               This must be implemented by the concrete subclass.
               """
>>>>>>         raise NotImplementedError
       
    1:     def pre_order(self):
               """
               Return a pre-order iterator for the tree.
       
               This must be implemented by the concrete subclass.
               """
>>>>>>         raise NotImplementedError
       
    1:     def set_prefix(self, prefix):
               """
               Set the prefix for the node (see Leaf class).
       
               DEPRECATED; use the prefix property directly.
               """
    1:         warnings.warn("set_prefix() is deprecated; use the prefix property",
    1:                       DeprecationWarning, stacklevel=2)
    1:         self.prefix = prefix
       
    1:     def get_prefix(self):
               """
               Return the prefix for the node (see Leaf class).
       
               DEPRECATED; use the prefix property directly.
               """
    1:         warnings.warn("get_prefix() is deprecated; use the prefix property",
    1:                       DeprecationWarning, stacklevel=2)
    1:         return self.prefix
       
    1:     def replace(self, new):
               """Replace this node with a new one in the parent."""
 2464:         assert self.parent is not None, str(self)
 2464:         assert new is not None
 2464:         if not isinstance(new, list):
 2254:             new = [new]
 2464:         l_children = []
 2464:         found = False
10252:         for ch in self.parent.children:
 7788:             if ch is self:
 2464:                 assert not found, (self.parent.children, self, new)
 2464:                 if new is not None:
 2464:                     l_children.extend(new)
 2464:                 found = True
                   else:
 5324:                 l_children.append(ch)
 2464:         assert found, (self.children, self, new)
 2464:         self.parent.changed()
 2464:         self.parent.children = l_children
 5470:         for x in new:
 3006:             x.parent = self.parent
 2464:         self.parent = None
       
    1:     def get_lineno(self):
               """Return the line number which generated the invocant node."""
 6214:         node = self
12440:         while not isinstance(node, Leaf):
 6226:             if not node.children:
>>>>>>                 return
 6226:             node = node.children[0]
 6214:         return node.lineno
       
    1:     def changed(self):
14078:         if self.parent:
 9989:             self.parent.changed()
14078:         self.was_changed = True
       
    1:     def remove(self):
               """
               Remove the node from the tree. Returns the position of the node in its
               parent's children before it was removed.
               """
  573:         if self.parent:
  254:             for i, node in enumerate(self.parent.children):
  254:                 if node is self:
  116:                     self.parent.changed()
  116:                     del self.parent.children[i]
  116:                     self.parent = None
  116:                     return i
       
    1:     @property
           def next_sibling(self):
               """
               The node immediately following the invocant in their parent's children
               list. If the invocant does not have a next sibling, it is None
               """
   34:         if self.parent is None:
    4:             return None
       
               # Can't use index(); we need to test by identity
   56:         for i, child in enumerate(self.parent.children):
   56:             if child is self:
   30:                 try:
   30:                     return self.parent.children[i+1]
    4:                 except IndexError:
    4:                     return None
       
    1:     @property
           def prev_sibling(self):
               """
               The node immediately preceding the invocant in their parent's children
               list. If the invocant does not have a previous sibling, it is None.
               """
   17:         if self.parent is None:
    2:             return None
       
               # Can't use index(); we need to test by identity
   29:         for i, child in enumerate(self.parent.children):
   29:             if child is self:
   15:                 if i == 0:
    5:                     return None
   10:                 return self.parent.children[i-1]
       
    1:     def leaves(self):
61470:         for child in self.children:
191732:             for x in child.leaves():
146674:                 yield x
       
    1:     def depth(self):
31360:         if self.parent is None:
 8305:             return 0
23055:         return 1 + self.parent.depth()
       
    1:     def get_suffix(self):
               """
               Return the string immediately following the invocant node. This is
               effectively equivalent to node.next_sibling.prefix
               """
    6:         next_sib = self.next_sibling
    6:         if next_sib is None:
    4:             return u""
    2:         return next_sib.prefix
       
    1:     if sys.version_info < (3, 0):
    1:         def __str__(self):
  146:             return unicode(self).encode("ascii")
       
    2: class Node(Base):
       
    1:     """Concrete implementation for interior nodes."""
       
           def __init__(self,type, children,
    1:                  context=None,
    1:                  prefix=None,
    1:                  fixers_applied=None):
               """
               Initializer.
       
               Takes a type constant (a symbol number >= 256), a sequence of
               child nodes, and an optional context keyword argument.
       
               As a side effect, the parent pointers of the children are updated.
               """
145105:         assert type >= 256, type
145105:         self.type = type
145105:         self.children = list(children)
518116:         for ch in self.children:
373011:             assert ch.parent is None, repr(ch)
373011:             ch.parent = self
145105:         if prefix is not None:
   18:             self.prefix = prefix
145105:         if fixers_applied:
    8:             self.fixers_applied = fixers_applied[:]
               else:
145097:             self.fixers_applied = None
       
    1:     def __repr__(self):
               """Return a canonical string representation."""
    1:         return "%s(%s, %r)" % (self.__class__.__name__,
    1:                                type_repr(self.type),
    1:                                self.children)
       
    1:     def __unicode__(self):
               """
               Return a pretty string representation.
       
               This reproduces the input source exactly.
               """
67804:         return u"".join(map(unicode, self.children))
       
    1:     if sys.version_info > (3, 0):
>>>>>>         __str__ = __unicode__
       
    1:     def _eq(self, other):
               """Compare two nodes for equality."""
428005:         return (self.type, self.children) == (other.type, other.children)
       
    1:     def clone(self):
               """Return a cloned (deep) copy of self."""
 3610:         return Node(self.type, [ch.clone() for ch in self.children],
  961:                     fixers_applied=self.fixers_applied)
       
    1:     def post_order(self):
               """Return a post-order iterator for the tree."""
61707:         for child in self.children:
245151:             for node in child.post_order():
199915:                 yield node
16471:         yield self
       
    1:     def pre_order(self):
               """Return a pre-order iterator for the tree."""
14886:         yield self
55844:         for child in self.children:
228945:             for node in child.pre_order():
187987:                 yield node
       
    1:     def _prefix_getter(self):
               """
               The whitespace and comments preceding this node in the input.
               """
  568:         if not self.children:
>>>>>>             return ""
  568:         return self.children[0].prefix
       
    1:     def _prefix_setter(self, prefix):
  765:         if self.children:
  765:             self.children[0].prefix = prefix
       
    1:     prefix = property(_prefix_getter, _prefix_setter)
       
    1:     def set_child(self, i, child):
               """
               Equivalent to 'node.children[i] = child'. This method also sets the
               child's parent attribute appropriately.
               """
    8:         child.parent = self
    7:         self.children[i].parent = None
    6:         self.children[i] = child
    6:         self.changed()
       
    1:     def insert_child(self, i, child):
               """
               Equivalent to 'node.children.insert(i, child)'. This method also sets
               the child's parent attribute appropriately.
               """
  341:         child.parent = self
  340:         self.children.insert(i, child)
  340:         self.changed()
       
    1:     def append_child(self, child):
               """
               Equivalent to 'node.children.append(child)'. This method also sets the
               child's parent attribute appropriately.
               """
   49:         child.parent = self
   48:         self.children.append(child)
   48:         self.changed()
       
       
    2: class Leaf(Base):
       
    1:     """Concrete implementation for leaf nodes."""
       
           # Default values for instance variables
    1:     _prefix = ""  # Whitespace and comments preceding this token in the input
    1:     lineno = 0    # Line where this token starts in the input
    1:     column = 0    # Column where this token tarts in the input
       
           def __init__(self, type, value,
    1:                  context=None,
    1:                  prefix=None,
    1:                  fixers_applied=[]):
               """
               Initializer.
       
               Takes a type constant (a token number < 256), a string value, and an
               optional context keyword argument.
               """
234829:         assert 0 <= type < 256, type
234829:         if context is not None:
230396:             self._prefix, (self.lineno, self.column) = context
234829:         self.type = type
234829:         self.value = value
234829:         if prefix is not None:
 2558:             self._prefix = prefix
234829:         self.fixers_applied = fixers_applied[:]
       
    1:     def __repr__(self):
               """Return a canonical string representation."""
    5:         return "%s(%r, %r)" % (self.__class__.__name__,
    5:                                self.type,
    5:                                self.value)
       
    1:     def __unicode__(self):
               """
               Return a pretty string representation.
       
               This reproduces the input source exactly.
               """
139938:         return self.prefix + unicode(self.value)
       
    1:     if sys.version_info > (3, 0):
>>>>>>         __str__ = __unicode__
       
    1:     def _eq(self, other):
               """Compare two nodes for equality."""
504277:         return (self.type, self.value) == (other.type, other.value)
       
    1:     def clone(self):
               """Return a cloned (deep) copy of self."""
 3564:         return Leaf(self.type, self.value,
 3564:                     (self.prefix, (self.lineno, self.column)),
 3564:                     fixers_applied=self.fixers_applied)
       
    1:     def leaves(self):
31296:         yield self
       
    1:     def post_order(self):
               """Return a post-order iterator for the tree."""
31426:         yield self
       
    1:     def pre_order(self):
               """Return a pre-order iterator for the tree."""
28131:         yield self
       
    1:     def _prefix_getter(self):
               """
               The whitespace and comments preceding this token in the input.
               """
145861:         return self._prefix
       
    1:     def _prefix_setter(self, prefix):
 1069:         self.changed()
 1069:         self._prefix = prefix
       
    1:     prefix = property(_prefix_getter, _prefix_setter)
       
    1: def convert(gr, raw_node):
           """
           Convert raw node information to a Node or Leaf instance.
       
           This is passed to the parser driver which calls it whenever a reduction of a
           grammar rule produces a new complete node, so that the tree is build
           strictly bottom-up.
           """
804896:     type, value, context, children = raw_node
804896:     if children or type in gr.number2symbol:
               # If there's exactly one child, return that child instead of
               # creating a new node.
663226:         if len(children) == 1:
594627:             return children[0]
68599:         return Node(type, children, context=context)
           else:
141670:         return Leaf(type, value, context=context)
       
       
    2: class BasePattern(object):
       
           """
           A pattern is a tree matching pattern.
       
           It looks for a specific node type (token or symbol), and
           optionally for a specific content.
       
           This is an abstract base class.  There are three concrete
           subclasses:
       
           - LeafPattern matches a single leaf node;
           - NodePattern matches a single node (usually non-leaf);
           - WildcardPattern matches a sequence of nodes of variable length.
    1:     """
       
           # Defaults for instance variables
    1:     type = None     # Node type (token if < 256, symbol if >= 256)
    1:     content = None  # Optional content matching pattern
    1:     name = None     # Optional name used to store match in results dict
       
    1:     def __new__(cls, *args, **kwds):
               """Constructor that prevents BasePattern from being instantiated."""
42014:         assert cls is not BasePattern, "Cannot instantiate BasePattern"
42014:         return object.__new__(cls)
       
    1:     def __repr__(self):
>>>>>>         args = [type_repr(self.type), self.content, self.name]
>>>>>>         while args and args[-1] is None:
>>>>>>             del args[-1]
>>>>>>         return "%s(%s)" % (self.__class__.__name__, ", ".join(map(repr, args)))
       
    1:     def optimize(self):
               """
               A subclass can define this as a hook for optimizations.
       
               Returns either self or another node with the same effect.
               """
31158:         return self
       
    1:     def match(self, node, results=None):
               """
               Does this pattern exactly match a node?
       
               Returns True if it matches, False if not.
       
               If results is not None, it must be a dict which will be
               updated with the nodes matching named subpatterns.
       
               Default implementation for non-wildcard patterns.
               """
350872:         if self.type is not None and node.type != self.type:
125693:             return False
225179:         if self.content is not None:
212214:             r = None
212214:             if results is not None:
212206:                 r = {}
212214:             if not self._submatch(node, r):
154173:                 return False
58041:             if r:
 4236:                 results.update(r)
71006:         if results is not None and self.name:
 3719:             results[self.name] = node
71006:         return True
       
    1:     def match_seq(self, nodes, results=None):
               """
               Does this pattern exactly match a sequence of nodes?
       
               Default implementation for non-wildcard patterns.
               """
>>>>>>         if len(nodes) != 1:
>>>>>>             return False
>>>>>>         return self.match(nodes[0], results)
       
    1:     def generate_matches(self, nodes):
               """
               Generator yielding all matches for this pattern.
       
               Default implementation for non-wildcard patterns.
               """
384515:         r = {}
384515:         if nodes and self.match(nodes[0], r):
70376:             yield 1, r
       
       
    2: class LeafPattern(BasePattern):
       
    1:     def __init__(self, type=None, content=None, name=None):
               """
               Initializer.  Takes optional type, content, and name.
       
               The type, if given must be a token type (< 256).  If not given,
               this matches any *leaf* node; the content may still be required.
       
               The content, if given, must be a string.
       
               If a name is given, the matching node is stored in the results
               dict under that key.
               """
20396:         if type is not None:
19896:             assert 0 <= type < 256, type
20396:         if content is not None:
20104:             assert isinstance(content, basestring), repr(content)
20396:         self.type = type
20396:         self.content = content
20396:         self.name = name
       
    1:     def match(self, node, results=None):
               """Override match() to insist on a leaf node."""
196157:         if not isinstance(node, Leaf):
23190:             return False
172967:         return BasePattern.match(self, node, results)
       
    1:     def _submatch(self, node, results=None):
               """
               Match the pattern's content to the node's children.
       
               This assumes the node type matches and self.content is not None.
       
               Returns True if it matches, False if not.
       
               If results is not None, it must be a dict which will be
               updated with the nodes matching named subpatterns.
       
               When returning False, the results dict may still be updated.
               """
158205:         return self.content == node.value
       
       
    2: class NodePattern(BasePattern):
       
    1:     wildcards = False
       
    1:     def __init__(self, type=None, content=None, name=None):
               """
               Initializer.  Takes optional type, content, and name.
       
               The type, if given, must be a symbol type (>= 256).  If the
               type is None this matches *any* single node (leaf or not),
               except if content is not None, in which it only matches
               non-leaf nodes that also match the content pattern.
       
               The content, if not None, must be a sequence of Patterns that
               must match the node's children exactly.  If the content is
               given, the type must not be None.
       
               If a name is given, the matching node is stored in the results
               dict under that key.
               """
10398:         if type is not None:
 5968:             assert type >= 256, type
10398:         if content is not None:
 5687:             assert not isinstance(content, basestring), repr(content)
 5687:             content = list(content)
11376:             for i, item in enumerate(content):
 5689:                 assert isinstance(item, BasePattern), (i, item)
 5689:                 if isinstance(item, WildcardPattern):
 5685:                     self.wildcards = True
10398:         self.type = type
10398:         self.content = content
10398:         self.name = name
       
    1:     def _submatch(self, node, results=None):
               """
               Match the pattern's content to the node's children.
       
               This assumes the node type matches and self.content is not None.
       
               Returns True if it matches, False if not.
       
               If results is not None, it must be a dict which will be
               updated with the nodes matching named subpatterns.
       
               When returning False, the results dict may still be updated.
               """
54009:         if self.wildcards:
55502:             for c, r in generate_matches(self.content, node.children):
 6448:                 if c == len(node.children):
 4949:                     if results is not None:
 4942:                         results.update(r)
 4949:                     return True
49054:             return False
    6:         if len(self.content) != len(node.children):
    4:             return False
    4:         for subpattern, child in zip(self.content, node.children):
    2:             if not subpattern.match(child, results):
>>>>>>                 return False
    2:         return True
       
       
    2: class WildcardPattern(BasePattern):
       
           """
           A wildcard pattern can match zero or more nodes.
       
           This has all the flexibility needed to implement patterns like:
       
           .*      .+      .?      .{m,n}
           (a b c | d e | f)
           (...)*  (...)+  (...)?  (...){m,n}
       
           except it always uses non-greedy matching.
    1:     """
       
    1:     def __init__(self, content=None, min=0, max=HUGE, name=None):
               """
               Initializer.
       
               Args:
                   content: optional sequence of subsequences of patterns;
                            if absent, matches one node;
                            if present, each subsequence is an alternative [*]
                   min: optional minimum number of times to match, default 0
                   max: optional maximum number of times to match, default HUGE
                   name: optional name assigned to this match
       
               [*] Thus, if content is [[a, b, c], [d, e], [f, g, h]] this is
                   equivalent to (a b c | d e | f g h); if content is None,
                   this is equivalent to '.' in regular expression terms.
                   The min and max parameters work as follows:
                       min=0, max=maxint: .*
                       min=1, max=maxint: .+
                       min=0, max=1: .?
                       min=1, max=1: .
                   If content is not None, replace the dot with the parenthesized
                   list of alternatives, e.g. (a b c | d e | f g h)*
               """
10834:         assert 0 <= min <= max <= HUGE, (min, max)
10834:         if content is not None:
10833:             content = tuple(map(tuple, content))  # Protect against alterations
                   # Check sanity of alternatives
10833:             assert len(content), repr(content)  # Can't have zero alternatives
34886:             for alt in content:
24053:                 assert len(alt), repr(alt) # Can have empty alternatives
10834:         self.content = content
10834:         self.min = min
10834:         self.max = max
10834:         self.name = name
       
    1:     def optimize(self):
               """Optimize certain stacked wildcard patterns."""
12137:         subpattern = None
12137:         if (self.content is not None and
12137:             len(self.content) == 1 and len(self.content[0]) == 1):
 2562:             subpattern = self.content[0][0]
12137:         if self.min == 1 and self.max == 1:
 9575:             if self.content is None:
>>>>>>                 return NodePattern(name=self.name)
 9575:             if subpattern is not None and  self.name == subpattern.name:
>>>>>>                 return subpattern.optimize()
12137:         if (self.min <= 1 and isinstance(subpattern, WildcardPattern) and
  401:             subpattern.min <= 1 and self.name == subpattern.name):
  377:             return WildcardPattern(subpattern.content,
  377:                                    self.min*subpattern.min,
  377:                                    self.max*subpattern.max,
  377:                                    subpattern.name)
11760:         return self
       
    1:     def match(self, node, results=None):
               """Does this pattern exactly match a node?"""
 9768:         return self.match_seq([node], results)
       
    1:     def match_seq(self, nodes, results=None):
               """Does this pattern exactly match a sequence of nodes?"""
 9776:         for c, r in self.generate_matches(nodes):
 2416:             if c == len(nodes):
 2412:                 if results is not None:
 2411:                     results.update(r)
 2411:                     if self.name:
    2:                         results[self.name] = list(nodes)
 2412:                 return True
 7360:         return False
       
    1:     def generate_matches(self, nodes):
               """
               Generator yielding matches for a sequence of nodes.
       
               Args:
                   nodes: sequence of nodes
       
               Yields:
                   (count, results) tuples where:
                   count: the match comprises nodes[:count];
                   results: dict containing named submatches.
               """
81265:         if self.content is None:
                   # Shortcut for special case (see __init__.__doc__)
    2:             for count in xrange(self.min, 1 + min(len(nodes), self.max)):
    2:                 r = {}
    2:                 if self.name:
    2:                     r[self.name] = nodes[:count]
    2:                 yield count, r
81264:         elif self.name == "bare_name":
>>>>>>             yield self._bare_name_matches(nodes)
               else:
                   # The reason for this is that hitting the recursion limit usually
                   # results in some ugly messages about how RuntimeErrors are being
                   # ignored. We don't do this on non-CPython implementation because
                   # they don't have this problem.
81264:             if hasattr(sys, "getrefcount"):
81264:                 save_stderr = sys.stderr
81264:                 sys.stderr = StringIO()
81264:             try:
95228:                 for count, r in self._recursive_matches(nodes, 0):
27025:                     if self.name:
 1951:                         r[self.name] = nodes[:count]
27025:                     yield count, r
13061:             except RuntimeError:
                       # We fall back to the iterative pattern matching scheme if the recursive
                       # scheme hits the recursion limit.
>>>>>>                 for count, r in self._iterative_matches(nodes):
>>>>>>                     if self.name:
>>>>>>                         r[self.name] = nodes[:count]
>>>>>>                     yield count, r
                   finally:
81264:                 if hasattr(sys, "getrefcount"):
81264:                     sys.stderr = save_stderr
       
    1:     def _iterative_matches(self, nodes):
               """Helper to iteratively yield the matches."""
>>>>>>         nodelen = len(nodes)
>>>>>>         if 0 >= self.min:
>>>>>>             yield 0, {}
       
>>>>>>         results = []
               # generate matches that use just one alt from self.content
>>>>>>         for alt in self.content:
>>>>>>             for c, r in generate_matches(alt, nodes):
>>>>>>                 yield c, r
>>>>>>                 results.append((c, r))
       
               # for each match, iterate down the nodes
>>>>>>         while results:
>>>>>>             new_results = []
>>>>>>             for c0, r0 in results:
                       # stop if the entire set of nodes has been matched
>>>>>>                 if c0 < nodelen and c0 <= self.max:
>>>>>>                     for alt in self.content:
>>>>>>                         for c1, r1 in generate_matches(alt, nodes[c0:]):
>>>>>>                             if c1 > 0:
>>>>>>                                 r = {}
>>>>>>                                 r.update(r0)
>>>>>>                                 r.update(r1)
>>>>>>                                 yield c0 + c1, r
>>>>>>                                 new_results.append((c0 + c1, r))
>>>>>>             results = new_results
       
    1:     def _bare_name_matches(self, nodes):
               """Special optimized matcher for bare_name."""
>>>>>>         count = 0
>>>>>>         r = {}
>>>>>>         done = False
>>>>>>         max = len(nodes)
>>>>>>         while not done and count < max:
>>>>>>             done = True
>>>>>>             for leaf in self.content:
>>>>>>                 if leaf[0].match(nodes[count], r):
>>>>>>                     count += 1
>>>>>>                     done = False
>>>>>>                     break
>>>>>>         r[self.name] = nodes[:count]
>>>>>>         return count, r
       
    1:     def _recursive_matches(self, nodes, count):
               """Helper to recursively yield the matches."""
103141:         assert self.content is not None
103141:         if count >= self.min:
27025:             yield 0, {}
90080:         if count < self.max:
411847:             for alt in self.content:
344657:                 for c0, r0 in generate_matches(alt, nodes):
108418:                     for c1, r1 in self._recursive_matches(nodes[c0:], count+1):
98996:                         r = {}
98996:                         r.update(r0)
98996:                         r.update(r1)
98996:                         yield c0 + c1, r
       
       
    2: class NegatedPattern(BasePattern):
       
    1:     def __init__(self, content=None):
               """
               Initializer.
       
               The argument is either a pattern or None.  If it is None, this
               only matches an empty sequence (effectively '$' in regex
               lingo).  If it is not None, this matches whenever the argument
               pattern doesn't have any matches.
               """
  386:         if content is not None:
  386:             assert isinstance(content, BasePattern), repr(content)
  386:         self.content = content
       
    1:     def match(self, node):
               # We never match a node in its entirety
>>>>>>         return False
       
    1:     def match_seq(self, nodes):
               # We only match an empty sequence of nodes in its entirety
>>>>>>         return len(nodes) == 0
       
    1:     def generate_matches(self, nodes):
  146:         if self.content is None:
                   # Return a match if there is an empty sequence
>>>>>>             if len(nodes) == 0:
>>>>>>                 yield 0, {}
               else:
                   # Return a match if the argument pattern has no matches
  146:             for c, r in self.content.generate_matches(nodes):
   17:                 return
  129:             yield 0, {}
       
       
    1: def generate_matches(patterns, nodes):
           """
           Generator yielding matches for a sequence of patterns and nodes.
       
           Args:
               patterns: a sequence of patterns
               nodes: a sequence of nodes
       
           Yields:
               (count, results) tuples where:
               count: the entire sequence of patterns matches nodes[:count];
               results: dict containing named submatches.
               """
456007:     if not patterns:
>>>>>>         yield 0, {}
           else:
456007:         p, rest = patterns[0], patterns[1:]
523518:         for c0, r0 in p.generate_matches(nodes):
95094:             if not rest:
28326:                 yield c0, r0
                   else:
69012:                 for c1, r1 in generate_matches(rest, nodes[c0:]):
12423:                     r = {}
12423:                     r.update(r0)
12423:                     r.update(r1)
12423:                     yield c0 + c1, r
