    1: import unittest
    1: from ctypes import *
    1: import os
       
    1: import _ctypes_test
       
    2: class ReturnFuncPtrTestCase(unittest.TestCase):
       
    1:     def test_with_prototype(self):
               # The _ctypes_test shared lib/dll exports quite some functions for testing.
               # The get_strchr function returns a *pointer* to the C strchr function.
    1:         dll = CDLL(_ctypes_test.__file__)
    1:         get_strchr = dll.get_strchr
    1:         get_strchr.restype = CFUNCTYPE(c_char_p, c_char_p, c_char)
    1:         strchr = get_strchr()
    1:         self.assertEqual(strchr("abcdef", "b"), "bcdef")
    1:         self.assertEqual(strchr("abcdef", "x"), None)
    1:         self.assertRaises(ArgumentError, strchr, "abcdef", 3)
    1:         self.assertRaises(TypeError, strchr, "abcdef")
       
    1:     def test_without_prototype(self):
    1:         dll = CDLL(_ctypes_test.__file__)
    1:         get_strchr = dll.get_strchr
               # the default 'c_int' would not work on systems where sizeof(int) != sizeof(void *)
    1:         get_strchr.restype = c_void_p
    1:         addr = get_strchr()
               # _CFuncPtr instances are now callable with an integer argument
               # which denotes a function address:
    1:         strchr = CFUNCTYPE(c_char_p, c_char_p, c_char)(addr)
    1:         self.assertTrue(strchr("abcdef", "b"), "bcdef")
    1:         self.assertEqual(strchr("abcdef", "x"), None)
    1:         self.assertRaises(ArgumentError, strchr, "abcdef", 3)
    1:         self.assertRaises(TypeError, strchr, "abcdef")
       
    1:     def test_from_dll(self):
    1:         dll = CDLL(_ctypes_test.__file__)
               # _CFuncPtr instances are now callable with a tuple argument
               # which denotes a function name and a dll:
    1:         strchr = CFUNCTYPE(c_char_p, c_char_p, c_char)(("my_strchr", dll))
    1:         self.assertTrue(strchr(b"abcdef", b"b"), "bcdef")
    1:         self.assertEqual(strchr(b"abcdef", b"x"), None)
    1:         self.assertRaises(ArgumentError, strchr, b"abcdef", 3.0)
    1:         self.assertRaises(TypeError, strchr, b"abcdef")
       
           # Issue 6083: Reference counting bug
    1:     def test_from_dll_refcount(self):
    2:         class BadSequence(tuple):
    1:             def __getitem__(self, key):
>>>>>>                 if key == 0:
>>>>>>                     return "my_strchr"
>>>>>>                 if key == 1:
>>>>>>                     return CDLL(_ctypes_test.__file__)
>>>>>>                 raise IndexError
       
               # _CFuncPtr instances are now callable with a tuple argument
               # which denotes a function name and a dll:
    1:         strchr = CFUNCTYPE(c_char_p, c_char_p, c_char)(
    1:                 BadSequence(("my_strchr", CDLL(_ctypes_test.__file__))))
    1:         self.assertTrue(strchr(b"abcdef", b"b"), "bcdef")
    1:         self.assertEqual(strchr(b"abcdef", b"x"), None)
    1:         self.assertRaises(ArgumentError, strchr, b"abcdef", 3.0)
    1:         self.assertRaises(TypeError, strchr, b"abcdef")
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
