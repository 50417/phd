    1: from test.test_support import run_unittest, verbose
    1: import unittest
    1: import locale
    1: import sys
    1: import codecs
       
       
    1: enUS_locale = None
       
    1: def get_enUS_locale():
           global enUS_locale
    1:     if sys.platform == 'darwin':
    1:         import os
    1:         tlocs = ("en_US.UTF-8", "en_US.ISO8859-1", "en_US")
    1:         if int(os.uname()[2].split('.')[0]) < 10:
                   # The locale test work fine on OSX 10.6, I (ronaldoussoren)
                   # haven't had time yet to verify if tests work on OSX 10.5
                   # (10.4 is known to be bad)
>>>>>>             raise unittest.SkipTest("Locale support on MacOSX is minimal")
    1:     if sys.platform.startswith("win"):
>>>>>>         tlocs = ("En", "English")
           else:
    1:         tlocs = ("en_US.UTF-8", "en_US.US-ASCII", "en_US")
    1:     oldlocale = locale.setlocale(locale.LC_NUMERIC)
    1:     for tloc in tlocs:
    1:         try:
    1:             locale.setlocale(locale.LC_NUMERIC, tloc)
>>>>>>         except locale.Error:
>>>>>>             continue
    1:         break
           else:
>>>>>>         raise unittest.SkipTest(
>>>>>>             "Test locale not supported (tried %s)" % (', '.join(tlocs)))
    1:     enUS_locale = tloc
    1:     locale.setlocale(locale.LC_NUMERIC, oldlocale)
       
       
    2: class BaseLocalizedTest(unittest.TestCase):
           #
           # Base class for tests using a real locale
           #
       
    1:     def setUp(self):
   16:         self.oldlocale = locale.setlocale(self.locale_type)
   16:         locale.setlocale(self.locale_type, enUS_locale)
   16:         if verbose:
>>>>>>             print "testing with \"%s\"..." % enUS_locale,
       
    1:     def tearDown(self):
   16:         locale.setlocale(self.locale_type, self.oldlocale)
       
       
    2: class BaseCookedTest(unittest.TestCase):
           #
           # Base class for tests using cooked localeconv() values
           #
       
    1:     def setUp(self):
   16:         locale._override_localeconv = self.cooked_values
       
    1:     def tearDown(self):
   16:         locale._override_localeconv = {}
       
       
    2: class CCookedTest(BaseCookedTest):
           # A cooked "C" locale
       
    1:     cooked_values = {
    1:         'currency_symbol': '',
    1:         'decimal_point': '.',
    1:         'frac_digits': 127,
    1:         'grouping': [],
    1:         'int_curr_symbol': '',
    1:         'int_frac_digits': 127,
    1:         'mon_decimal_point': '',
    1:         'mon_grouping': [],
    1:         'mon_thousands_sep': '',
    1:         'n_cs_precedes': 127,
    1:         'n_sep_by_space': 127,
    1:         'n_sign_posn': 127,
    1:         'negative_sign': '',
    1:         'p_cs_precedes': 127,
    1:         'p_sep_by_space': 127,
    1:         'p_sign_posn': 127,
    1:         'positive_sign': '',
    1:         'thousands_sep': ''
           }
       
    2: class EnUSCookedTest(BaseCookedTest):
           # A cooked "en_US" locale
       
    1:     cooked_values = {
    1:         'currency_symbol': '$',
    1:         'decimal_point': '.',
    1:         'frac_digits': 2,
    1:         'grouping': [3, 3, 0],
    1:         'int_curr_symbol': 'USD ',
    1:         'int_frac_digits': 2,
    1:         'mon_decimal_point': '.',
    1:         'mon_grouping': [3, 3, 0],
    1:         'mon_thousands_sep': ',',
    1:         'n_cs_precedes': 1,
    1:         'n_sep_by_space': 0,
    1:         'n_sign_posn': 1,
    1:         'negative_sign': '-',
    1:         'p_cs_precedes': 1,
    1:         'p_sep_by_space': 0,
    1:         'p_sign_posn': 1,
    1:         'positive_sign': '',
    1:         'thousands_sep': ','
           }
       
       
    2: class FrFRCookedTest(BaseCookedTest):
           # A cooked "fr_FR" locale with a space character as decimal separator
           # and a non-ASCII currency symbol.
       
    1:     cooked_values = {
    1:         'currency_symbol': '\xe2\x82\xac',
    1:         'decimal_point': ',',
    1:         'frac_digits': 2,
    1:         'grouping': [3, 3, 0],
    1:         'int_curr_symbol': 'EUR ',
    1:         'int_frac_digits': 2,
    1:         'mon_decimal_point': ',',
    1:         'mon_grouping': [3, 3, 0],
    1:         'mon_thousands_sep': ' ',
    1:         'n_cs_precedes': 0,
    1:         'n_sep_by_space': 1,
    1:         'n_sign_posn': 1,
    1:         'negative_sign': '-',
    1:         'p_cs_precedes': 0,
    1:         'p_sep_by_space': 1,
    1:         'p_sign_posn': 1,
    1:         'positive_sign': '',
    1:         'thousands_sep': ' '
           }
       
       
    2: class BaseFormattingTest(object):
           #
           # Utility functions for formatting tests
           #
       
    1:     def _test_formatfunc(self, format, value, out, func, **format_opts):
   75:         self.assertEqual(
   75:             func(format, value, **format_opts), out)
       
    1:     def _test_format(self, format, value, out, **format_opts):
   61:         self._test_formatfunc(format, value, out,
   61:             func=locale.format, **format_opts)
       
    1:     def _test_format_string(self, format, value, out, **format_opts):
   14:         self._test_formatfunc(format, value, out,
   14:             func=locale.format_string, **format_opts)
       
    1:     def _test_currency(self, value, out, **format_opts):
    6:         self.assertEqual(locale.currency(value, **format_opts), out)
       
       
    2: class EnUSNumberFormatting(BaseFormattingTest):
           # XXX there is a grouping + padding bug when the thousands separator
           # is empty but the grouping array contains values (e.g. Solaris 10)
       
    1:     def setUp(self):
   15:         self.sep = locale.localeconv()['thousands_sep']
       
    1:     def test_grouping(self):
    2:         self._test_format("%f", 1024, grouping=1, out='1%s024.000000' % self.sep)
    2:         self._test_format("%f", 102, grouping=1, out='102.000000')
    2:         self._test_format("%f", -42, grouping=1, out='-42.000000')
    2:         self._test_format("%+f", -42, grouping=1, out='-42.000000')
       
    1:     def test_grouping_and_padding(self):
    2:         self._test_format("%20.f", -42, grouping=1, out='-42'.rjust(20))
    2:         if self.sep:
    2:             self._test_format("%+10.f", -4200, grouping=1,
    2:                 out=('-4%s200' % self.sep).rjust(10))
    2:             self._test_format("%-10.f", -4200, grouping=1,
    2:                 out=('-4%s200' % self.sep).ljust(10))
       
    1:     def test_integer_grouping(self):
    2:         self._test_format("%d", 4200, grouping=True, out='4%s200' % self.sep)
    2:         self._test_format("%+d", 4200, grouping=True, out='+4%s200' % self.sep)
    2:         self._test_format("%+d", -4200, grouping=True, out='-4%s200' % self.sep)
       
    1:     def test_integer_grouping_and_padding(self):
    2:         self._test_format("%10d", 4200, grouping=True,
    2:             out=('4%s200' % self.sep).rjust(10))
    2:         self._test_format("%-10d", -4200, grouping=True,
    2:             out=('-4%s200' % self.sep).ljust(10))
       
    1:     def test_simple(self):
    2:         self._test_format("%f", 1024, grouping=0, out='1024.000000')
    2:         self._test_format("%f", 102, grouping=0, out='102.000000')
    2:         self._test_format("%f", -42, grouping=0, out='-42.000000')
    2:         self._test_format("%+f", -42, grouping=0, out='-42.000000')
       
    1:     def test_padding(self):
    2:         self._test_format("%20.f", -42, grouping=0, out='-42'.rjust(20))
    2:         self._test_format("%+10.f", -4200, grouping=0, out='-4200'.rjust(10))
    2:         self._test_format("%-10.f", 4200, grouping=0, out='4200'.ljust(10))
       
    1:     def test_complex_formatting(self):
               # Spaces in formatting string
    2:         self._test_format_string("One million is %i", 1000000, grouping=1,
    2:             out='One million is 1%s000%s000' % (self.sep, self.sep))
    2:         self._test_format_string("One  million is %i", 1000000, grouping=1,
    2:             out='One  million is 1%s000%s000' % (self.sep, self.sep))
               # Dots in formatting string
    2:         self._test_format_string(".%f.", 1000.0, out='.1000.000000.')
               # Padding
    2:         if self.sep:
    2:             self._test_format_string("-->  %10.2f", 4200, grouping=1,
    2:                 out='-->  ' + ('4%s200.00' % self.sep).rjust(10))
               # Asterisk formats
    2:         self._test_format_string("%10.*f", (2, 1000), grouping=0,
    2:             out='1000.00'.rjust(10))
    2:         if self.sep:
    2:             self._test_format_string("%*.*f", (10, 2, 1000), grouping=1,
    2:                 out=('1%s000.00' % self.sep).rjust(10))
               # Test more-in-one
    2:         if self.sep:
    2:             self._test_format_string("int %i float %.2f str %s",
    2:                 (1000, 1000.0, 'str'), grouping=1,
    2:                 out='int 1%s000 float 1%s000.00 str str' %
    2:                 (self.sep, self.sep))
       
       
    2: class TestFormatPatternArg(unittest.TestCase):
           # Test handling of pattern argument of format
       
    1:     def test_onlyOnePattern(self):
               # Issue 2522: accept exactly one % pattern, and no extra chars.
    1:         self.assertRaises(ValueError, locale.format, "%f\n", 'foo')
    1:         self.assertRaises(ValueError, locale.format, "%f\r", 'foo')
    1:         self.assertRaises(ValueError, locale.format, "%f\r\n", 'foo')
    1:         self.assertRaises(ValueError, locale.format, " %f", 'foo')
    1:         self.assertRaises(ValueError, locale.format, "%fg", 'foo')
    1:         self.assertRaises(ValueError, locale.format, "%^g", 'foo')
    1:         self.assertRaises(ValueError, locale.format, "%f%%", 'foo')
       
       
    2: class TestLocaleFormatString(unittest.TestCase):
    1:     """General tests on locale.format_string"""
       
    1:     def test_percent_escape(self):
    1:         self.assertEqual(locale.format_string('%f%%', 1.0), '%f%%' % 1.0)
    1:         self.assertEqual(locale.format_string('%d %f%%d', (1, 1.0)),
    1:             '%d %f%%d' % (1, 1.0))
    1:         self.assertEqual(locale.format_string('%(foo)s %%d', {'foo': 'bar'}),
    1:             ('%(foo)s %%d' % {'foo': 'bar'}))
       
    1:     def test_mapping(self):
    1:         self.assertEqual(locale.format_string('%(foo)s bing.', {'foo': 'bar'}),
    1:             ('%(foo)s bing.' % {'foo': 'bar'}))
    1:         self.assertEqual(locale.format_string('%(foo)s', {'foo': 'bar'}),
    1:             ('%(foo)s' % {'foo': 'bar'}))
       
       
       
    2: class TestNumberFormatting(BaseLocalizedTest, EnUSNumberFormatting):
           # Test number formatting with a real English locale.
       
    1:     locale_type = locale.LC_NUMERIC
       
    1:     def setUp(self):
    7:         BaseLocalizedTest.setUp(self)
    7:         EnUSNumberFormatting.setUp(self)
       
       
    2: class TestEnUSNumberFormatting(EnUSCookedTest, EnUSNumberFormatting):
           # Test number formatting with a cooked "en_US" locale.
       
    1:     def setUp(self):
    8:         EnUSCookedTest.setUp(self)
    8:         EnUSNumberFormatting.setUp(self)
       
    1:     def test_currency(self):
    1:         self._test_currency(50000, "$50000.00")
    1:         self._test_currency(50000, "$50,000.00", grouping=True)
    1:         self._test_currency(50000, "USD 50,000.00",
    1:             grouping=True, international=True)
       
       
    2: class TestCNumberFormatting(CCookedTest, BaseFormattingTest):
           # Test number formatting with a cooked "C" locale.
       
    1:     def test_grouping(self):
    1:         self._test_format("%.2f", 12345.67, grouping=True, out='12345.67')
       
    1:     def test_grouping_and_padding(self):
    1:         self._test_format("%9.2f", 12345.67, grouping=True, out=' 12345.67')
       
       
    2: class TestFrFRNumberFormatting(FrFRCookedTest, BaseFormattingTest):
           # Test number formatting with a cooked "fr_FR" locale.
       
    1:     def test_decimal_point(self):
    1:         self._test_format("%.2f", 12345.67, out='12345,67')
       
    1:     def test_grouping(self):
    1:         self._test_format("%.2f", 345.67, grouping=True, out='345,67')
    1:         self._test_format("%.2f", 12345.67, grouping=True, out='12 345,67')
       
    1:     def test_grouping_and_padding(self):
    1:         self._test_format("%6.2f", 345.67, grouping=True, out='345,67')
    1:         self._test_format("%7.2f", 345.67, grouping=True, out=' 345,67')
    1:         self._test_format("%8.2f", 12345.67, grouping=True, out='12 345,67')
    1:         self._test_format("%9.2f", 12345.67, grouping=True, out='12 345,67')
    1:         self._test_format("%10.2f", 12345.67, grouping=True, out=' 12 345,67')
    1:         self._test_format("%-6.2f", 345.67, grouping=True, out='345,67')
    1:         self._test_format("%-7.2f", 345.67, grouping=True, out='345,67 ')
    1:         self._test_format("%-8.2f", 12345.67, grouping=True, out='12 345,67')
    1:         self._test_format("%-9.2f", 12345.67, grouping=True, out='12 345,67')
    1:         self._test_format("%-10.2f", 12345.67, grouping=True, out='12 345,67 ')
       
    1:     def test_integer_grouping(self):
    1:         self._test_format("%d", 200, grouping=True, out='200')
    1:         self._test_format("%d", 4200, grouping=True, out='4 200')
       
    1:     def test_integer_grouping_and_padding(self):
    1:         self._test_format("%4d", 4200, grouping=True, out='4 200')
    1:         self._test_format("%5d", 4200, grouping=True, out='4 200')
    1:         self._test_format("%10d", 4200, grouping=True, out='4 200'.rjust(10))
    1:         self._test_format("%-4d", 4200, grouping=True, out='4 200')
    1:         self._test_format("%-5d", 4200, grouping=True, out='4 200')
    1:         self._test_format("%-10d", 4200, grouping=True, out='4 200'.ljust(10))
       
    1:     def test_currency(self):
    1:         euro = u'\u20ac'.encode('utf-8')
    1:         self._test_currency(50000, "50000,00 " + euro)
    1:         self._test_currency(50000, "50 000,00 " + euro, grouping=True)
               # XXX is the trailing space a bug?
    1:         self._test_currency(50000, "50 000,00 EUR ",
    1:             grouping=True, international=True)
       
       
    2: class TestStringMethods(BaseLocalizedTest):
    1:     locale_type = locale.LC_CTYPE
       
    1:     if sys.platform != 'sunos5' and not sys.platform.startswith("win"):
               # Test BSD Rune locale's bug for isctype functions.
       
    1:         def test_isspace(self):
    1:             self.assertEqual('\x20'.isspace(), True)
    1:             self.assertEqual('\xa0'.isspace(), False)
    1:             self.assertEqual('\xa1'.isspace(), False)
       
    1:         def test_isalpha(self):
    1:             self.assertEqual('\xc0'.isalpha(), False)
       
    1:         def test_isalnum(self):
    1:             self.assertEqual('\xc0'.isalnum(), False)
       
    1:         def test_isupper(self):
    1:             self.assertEqual('\xc0'.isupper(), False)
       
    1:         def test_islower(self):
    1:             self.assertEqual('\xc0'.islower(), False)
       
    1:         def test_lower(self):
    1:             self.assertEqual('\xcc\x85'.lower(), '\xcc\x85')
       
    1:         def test_upper(self):
    1:             self.assertEqual('\xed\x95\xa0'.upper(), '\xed\x95\xa0')
       
    1:         def test_strip(self):
    1:             self.assertEqual('\xed\x95\xa0'.strip(), '\xed\x95\xa0')
       
    1:         def test_split(self):
    1:             self.assertEqual('\xec\xa0\xbc'.split(), ['\xec\xa0\xbc'])
       
       
    2: class NormalizeTest(unittest.TestCase):
    1:     def check(self, localename, expected):
>>>>>>         self.assertEqual(locale.normalize(localename), expected, msg=localename)
       
    1:     def test_locale_alias(self):
>>>>>>         for localename, alias in locale.locale_alias.items():
>>>>>>             self.check(localename, alias)
       
    1:     def test_empty(self):
>>>>>>         self.check('', '')
       
    1:     def test_c(self):
>>>>>>         self.check('c', 'C')
>>>>>>         self.check('posix', 'C')
       
    1:     def test_english(self):
>>>>>>         self.check('en', 'en_US.ISO8859-1')
>>>>>>         self.check('EN', 'en_US.ISO8859-1')
>>>>>>         self.check('en_US', 'en_US.ISO8859-1')
>>>>>>         self.check('en_us', 'en_US.ISO8859-1')
>>>>>>         self.check('en_GB', 'en_GB.ISO8859-1')
>>>>>>         self.check('en_US.UTF-8', 'en_US.UTF-8')
>>>>>>         self.check('en_US.utf8', 'en_US.UTF-8')
>>>>>>         self.check('en_US:UTF-8', 'en_US.UTF-8')
>>>>>>         self.check('en_US.ISO8859-1', 'en_US.ISO8859-1')
>>>>>>         self.check('en_US.US-ASCII', 'en_US.ISO8859-1')
>>>>>>         self.check('english', 'en_EN.ISO8859-1')
       
    1:     def test_hyphenated_encoding(self):
>>>>>>         self.check('az_AZ.iso88599e', 'az_AZ.ISO8859-9E')
>>>>>>         self.check('az_AZ.ISO8859-9E', 'az_AZ.ISO8859-9E')
>>>>>>         self.check('tt_RU.koi8c', 'tt_RU.KOI8-C')
>>>>>>         self.check('tt_RU.KOI8-C', 'tt_RU.KOI8-C')
>>>>>>         self.check('lo_LA.cp1133', 'lo_LA.IBM-CP1133')
>>>>>>         self.check('lo_LA.ibmcp1133', 'lo_LA.IBM-CP1133')
>>>>>>         self.check('lo_LA.IBM-CP1133', 'lo_LA.IBM-CP1133')
>>>>>>         self.check('uk_ua.microsoftcp1251', 'uk_UA.CP1251')
>>>>>>         self.check('uk_ua.microsoft-cp1251', 'uk_UA.CP1251')
>>>>>>         self.check('ka_ge.georgianacademy', 'ka_GE.GEORGIAN-ACADEMY')
>>>>>>         self.check('ka_GE.GEORGIAN-ACADEMY', 'ka_GE.GEORGIAN-ACADEMY')
>>>>>>         self.check('cs_CZ.iso88592', 'cs_CZ.ISO8859-2')
>>>>>>         self.check('cs_CZ.ISO8859-2', 'cs_CZ.ISO8859-2')
       
    1:     def test_euro_modifier(self):
>>>>>>         self.check('de_DE@euro', 'de_DE.ISO8859-15')
>>>>>>         self.check('en_US.ISO8859-15@euro', 'en_US.ISO8859-15')
       
    1:     def test_latin_modifier(self):
>>>>>>         self.check('be_BY.UTF-8@latin', 'be_BY.UTF-8@latin')
>>>>>>         self.check('sr_RS.UTF-8@latin', 'sr_RS.UTF-8@latin')
       
    1:     def test_valencia_modifier(self):
>>>>>>         self.check('ca_ES.UTF-8@valencia', 'ca_ES.UTF-8@valencia')
>>>>>>         self.check('ca_ES@valencia', 'ca_ES.ISO8859-15@valencia')
>>>>>>         self.check('ca@valencia', 'ca_ES.ISO8859-1@valencia')
       
    1:     def test_devanagari_modifier(self):
>>>>>>         self.check('ks_IN.UTF-8@devanagari', 'ks_IN.UTF-8@devanagari')
>>>>>>         self.check('ks_IN@devanagari', 'ks_IN.UTF-8@devanagari')
>>>>>>         self.check('ks@devanagari', 'ks_IN.UTF-8@devanagari')
>>>>>>         self.check('ks_IN.UTF-8', 'ks_IN.UTF-8')
>>>>>>         self.check('ks_IN', 'ks_IN.UTF-8')
>>>>>>         self.check('ks', 'ks_IN.UTF-8')
>>>>>>         self.check('sd_IN.UTF-8@devanagari', 'sd_IN.UTF-8@devanagari')
>>>>>>         self.check('sd_IN@devanagari', 'sd_IN.UTF-8@devanagari')
>>>>>>         self.check('sd@devanagari', 'sd_IN.UTF-8@devanagari')
>>>>>>         self.check('sd_IN.UTF-8', 'sd_IN.UTF-8')
>>>>>>         self.check('sd_IN', 'sd_IN.UTF-8')
>>>>>>         self.check('sd', 'sd_IN.UTF-8')
       
       
    2: class TestMiscellaneous(unittest.TestCase):
    1:     def test_getpreferredencoding(self):
               # Invoke getpreferredencoding to make sure it does not cause exceptions.
    1:         enc = locale.getpreferredencoding()
    1:         if enc:
                   # If encoding non-empty, make sure it is valid
    1:             codecs.lookup(enc)
       
    1:     if hasattr(locale, "strcoll"):
    1:         def test_strcoll_3303(self):
                   # test crasher from bug #3303
    1:             self.assertRaises(TypeError, locale.strcoll, u"a", None)
       
    1:     def test_setlocale_category(self):
    1:         locale.setlocale(locale.LC_ALL)
    1:         locale.setlocale(locale.LC_TIME)
    1:         locale.setlocale(locale.LC_CTYPE)
    1:         locale.setlocale(locale.LC_COLLATE)
    1:         locale.setlocale(locale.LC_MONETARY)
    1:         locale.setlocale(locale.LC_NUMERIC)
       
               # crasher from bug #7419
    1:         self.assertRaises(locale.Error, locale.setlocale, 12345)
       
    1:     def test_getsetlocale_issue1813(self):
               # Issue #1813: setting and getting the locale under a Turkish locale
    1:         oldlocale = locale.getlocale()
    1:         self.addCleanup(locale.setlocale, locale.LC_CTYPE, oldlocale)
    1:         for loc in ('tr_TR', 'tr_TR.UTF-8', 'tr_TR.ISO8859-9'):
    1:             try:
    1:                 locale.setlocale(locale.LC_CTYPE, loc)
    1:                 break
>>>>>>             except locale.Error:
>>>>>>                 continue
               else:
                   # Unsupported locale on this system
>>>>>>             self.skipTest('test needs Turkish locale')
    1:         loc = locale.getlocale()
    1:         try:
    1:             locale.setlocale(locale.LC_CTYPE, loc)
>>>>>>         except Exception as e:
>>>>>>             self.fail("Failed to set locale %r (default locale is %r): %r" %
>>>>>>                       (loc, oldlocale, e))
    1:         self.assertEqual(loc, locale.getlocale())
       
    1:     def test_normalize_issue12752(self):
               # Issue #1813 caused a regression where locale.normalize() would no
               # longer accept unicode strings.
    1:         self.assertEqual(locale.normalize(u'en_US'), 'en_US.ISO8859-1')
       
    1:     def test_setlocale_unicode(self):
    1:         oldlocale = locale.getlocale()
    1:         self.addCleanup(locale.setlocale, locale.LC_CTYPE, oldlocale)
       
    1:         user_locale = locale.setlocale(locale.LC_CTYPE, '')
    1:         unicode_locale = user_locale.decode('utf-8')
       
    1:         user_locale2 = locale.setlocale(locale.LC_CTYPE, unicode_locale)
    1:         self.assertEqual(user_locale, user_locale2)
       
       
    1: def test_main():
           tests = [
    1:         TestMiscellaneous,
    1:         TestFormatPatternArg,
    1:         TestLocaleFormatString,
    1:         TestEnUSNumberFormatting,
    1:         TestCNumberFormatting,
    1:         TestFrFRNumberFormatting,
           ]
           # SkipTest can't be raised inside unittests, handle it manually instead
    1:     try:
    1:         get_enUS_locale()
>>>>>>     except unittest.SkipTest as e:
>>>>>>         if verbose:
>>>>>>             print "Some tests will be disabled: %s" % e
           else:
    1:         tests += [TestNumberFormatting, TestStringMethods]
    1:     run_unittest(*tests)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
