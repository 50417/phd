    1: import unittest
    1: from ctypes import *
    1: from ctypes.test import need_symbol
    1: from struct import calcsize
    1: import _testcapi
       
    2: class SubclassesTest(unittest.TestCase):
    1:     def test_subclass(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_int)]
       
    2:         class Y(X):
    1:             _fields_ = [("b", c_int)]
       
    2:         class Z(X):
    1:             pass
       
    1:         self.assertEqual(sizeof(X), sizeof(c_int))
    1:         self.assertEqual(sizeof(Y), sizeof(c_int)*2)
    1:         self.assertEqual(sizeof(Z), sizeof(c_int))
    1:         self.assertEqual(X._fields_, [("a", c_int)])
    1:         self.assertEqual(Y._fields_, [("b", c_int)])
    1:         self.assertEqual(Z._fields_, [("a", c_int)])
       
    1:     def test_subclass_delayed(self):
    2:         class X(Structure):
    1:             pass
    1:         self.assertEqual(sizeof(X), 0)
    1:         X._fields_ = [("a", c_int)]
       
    2:         class Y(X):
    1:             pass
    1:         self.assertEqual(sizeof(Y), sizeof(X))
    1:         Y._fields_ = [("b", c_int)]
       
    2:         class Z(X):
    1:             pass
       
    1:         self.assertEqual(sizeof(X), sizeof(c_int))
    1:         self.assertEqual(sizeof(Y), sizeof(c_int)*2)
    1:         self.assertEqual(sizeof(Z), sizeof(c_int))
    1:         self.assertEqual(X._fields_, [("a", c_int)])
    1:         self.assertEqual(Y._fields_, [("b", c_int)])
    1:         self.assertEqual(Z._fields_, [("a", c_int)])
       
    2: class StructureTestCase(unittest.TestCase):
    1:     formats = {"c": c_char,
    1:                "b": c_byte,
    1:                "B": c_ubyte,
    1:                "h": c_short,
    1:                "H": c_ushort,
    1:                "i": c_int,
    1:                "I": c_uint,
    1:                "l": c_long,
    1:                "L": c_ulong,
    1:                "q": c_longlong,
    1:                "Q": c_ulonglong,
    1:                "f": c_float,
    1:                "d": c_double,
                      }
       
    1:     def test_simple_structs(self):
   14:         for code, tp in self.formats.items():
   26:             class X(Structure):
   13:                 _fields_ = [("x", c_char),
   13:                             ("y", tp)]
   13:             self.assertEqual((sizeof(X), code),
   13:                                  (calcsize("c%c0%c" % (code, code)), code))
       
    1:     def test_unions(self):
   14:         for code, tp in self.formats.items():
   26:             class X(Union):
   13:                 _fields_ = [("x", c_char),
   13:                             ("y", tp)]
   13:             self.assertEqual((sizeof(X), code),
   13:                                  (calcsize("%c" % (code)), code))
       
    1:     def test_struct_alignment(self):
    2:         class X(Structure):
    1:             _fields_ = [("x", c_char * 3)]
    1:         self.assertEqual(alignment(X), calcsize("s"))
    1:         self.assertEqual(sizeof(X), calcsize("3s"))
       
    2:         class Y(Structure):
    1:             _fields_ = [("x", c_char * 3),
    1:                         ("y", c_int)]
    1:         self.assertEqual(alignment(Y), alignment(c_int))
    1:         self.assertEqual(sizeof(Y), calcsize("3si"))
       
    2:         class SI(Structure):
    1:             _fields_ = [("a", X),
    1:                         ("b", Y)]
    1:         self.assertEqual(alignment(SI), max(alignment(Y), alignment(X)))
    1:         self.assertEqual(sizeof(SI), calcsize("3s0i 3si 0i"))
       
    2:         class IS(Structure):
    1:             _fields_ = [("b", Y),
    1:                         ("a", X)]
       
    1:         self.assertEqual(alignment(SI), max(alignment(X), alignment(Y)))
    1:         self.assertEqual(sizeof(IS), calcsize("3si 3s 0i"))
       
    2:         class XX(Structure):
    1:             _fields_ = [("a", X),
    1:                         ("b", X)]
    1:         self.assertEqual(alignment(XX), alignment(X))
    1:         self.assertEqual(sizeof(XX), calcsize("3s 3s 0s"))
       
    1:     def test_empty(self):
               # I had problems with these
               #
               # Although these are pathological cases: Empty Structures!
    2:         class X(Structure):
    1:             _fields_ = []
       
    2:         class Y(Union):
    1:             _fields_ = []
       
               # Is this really the correct alignment, or should it be 0?
    1:         self.assertTrue(alignment(X) == alignment(Y) == 1)
    1:         self.assertTrue(sizeof(X) == sizeof(Y) == 0)
       
    2:         class XX(Structure):
    1:             _fields_ = [("a", X),
    1:                         ("b", X)]
       
    1:         self.assertEqual(alignment(XX), 1)
    1:         self.assertEqual(sizeof(XX), 0)
       
    1:     def test_fields(self):
               # test the offset and size attributes of Structure/Unoin fields.
    2:         class X(Structure):
    1:             _fields_ = [("x", c_int),
    1:                         ("y", c_char)]
       
    1:         self.assertEqual(X.x.offset, 0)
    1:         self.assertEqual(X.x.size, sizeof(c_int))
       
    1:         self.assertEqual(X.y.offset, sizeof(c_int))
    1:         self.assertEqual(X.y.size, sizeof(c_char))
       
               # readonly
    1:         self.assertRaises((TypeError, AttributeError), setattr, X.x, "offset", 92)
    1:         self.assertRaises((TypeError, AttributeError), setattr, X.x, "size", 92)
       
    2:         class X(Union):
    1:             _fields_ = [("x", c_int),
    1:                         ("y", c_char)]
       
    1:         self.assertEqual(X.x.offset, 0)
    1:         self.assertEqual(X.x.size, sizeof(c_int))
       
    1:         self.assertEqual(X.y.offset, 0)
    1:         self.assertEqual(X.y.size, sizeof(c_char))
       
               # readonly
    1:         self.assertRaises((TypeError, AttributeError), setattr, X.x, "offset", 92)
    1:         self.assertRaises((TypeError, AttributeError), setattr, X.x, "size", 92)
       
               # XXX Should we check nested data types also?
               # offset is always relative to the class...
       
    1:     def test_packed(self):
    2:         class X(Structure):
    1:             _fields_ = [("a", c_byte),
    1:                         ("b", c_longlong)]
    1:             _pack_ = 1
       
    1:         self.assertEqual(sizeof(X), 9)
    1:         self.assertEqual(X.b.offset, 1)
       
    2:         class X(Structure):
    1:             _fields_ = [("a", c_byte),
    1:                         ("b", c_longlong)]
    1:             _pack_ = 2
    1:         self.assertEqual(sizeof(X), 10)
    1:         self.assertEqual(X.b.offset, 2)
       
    1:         import struct
    1:         longlong_size = struct.calcsize("q")
    1:         longlong_align = struct.calcsize("bq") - longlong_size
       
    2:         class X(Structure):
    1:             _fields_ = [("a", c_byte),
    1:                         ("b", c_longlong)]
    1:             _pack_ = 4
    1:         self.assertEqual(sizeof(X), min(4, longlong_align) + longlong_size)
    1:         self.assertEqual(X.b.offset, min(4, longlong_align))
       
    2:         class X(Structure):
    1:             _fields_ = [("a", c_byte),
    1:                         ("b", c_longlong)]
    1:             _pack_ = 8
       
    1:         self.assertEqual(sizeof(X), min(8, longlong_align) + longlong_size)
    1:         self.assertEqual(X.b.offset, min(8, longlong_align))
       
       
    1:         d = {"_fields_": [("a", "b"),
    1:                           ("b", "q")],
    1:              "_pack_": -1}
    1:         self.assertRaises(ValueError, type(Structure), "X", (Structure,), d)
       
               # Issue 15989
    1:         d = {"_fields_": [("a", c_byte)],
    1:              "_pack_": _testcapi.INT_MAX + 1}
    1:         self.assertRaises(ValueError, type(Structure), "X", (Structure,), d)
    1:         d = {"_fields_": [("a", c_byte)],
    1:              "_pack_": _testcapi.UINT_MAX + 2}
    1:         self.assertRaises(ValueError, type(Structure), "X", (Structure,), d)
       
    1:     def test_initializers(self):
    2:         class Person(Structure):
    1:             _fields_ = [("name", c_char*6),
    1:                         ("age", c_int)]
       
    1:         self.assertRaises(TypeError, Person, 42)
    1:         self.assertRaises(ValueError, Person, "asldkjaslkdjaslkdj")
    1:         self.assertRaises(TypeError, Person, "Name", "HI")
       
               # short enough
    1:         self.assertEqual(Person("12345", 5).name, "12345")
               # exact fit
    1:         self.assertEqual(Person("123456", 5).name, "123456")
               # too long
    1:         self.assertRaises(ValueError, Person, "1234567", 5)
       
    1:     def test_conflicting_initializers(self):
    2:         class POINT(Structure):
    1:             _fields_ = [("x", c_int), ("y", c_int)]
               # conflicting positional and keyword args
    1:         self.assertRaises(TypeError, POINT, 2, 3, x=4)
    1:         self.assertRaises(TypeError, POINT, 2, 3, y=4)
       
               # too many initializers
    1:         self.assertRaises(TypeError, POINT, 2, 3, 4)
       
    1:     def test_keyword_initializers(self):
    2:         class POINT(Structure):
    1:             _fields_ = [("x", c_int), ("y", c_int)]
    1:         pt = POINT(1, 2)
    1:         self.assertEqual((pt.x, pt.y), (1, 2))
       
    1:         pt = POINT(y=2, x=1)
    1:         self.assertEqual((pt.x, pt.y), (1, 2))
       
    1:     def test_invalid_field_types(self):
    2:         class POINT(Structure):
    1:             pass
    1:         self.assertRaises(TypeError, setattr, POINT, "_fields_", [("x", 1), ("y", 2)])
       
    1:     def test_invalid_name(self):
               # field name must be string
    1:         def declare_with_name(name):
    2:             class S(Structure):
    1:                 _fields_ = [(name, c_int)]
       
    1:         self.assertRaises(TypeError, declare_with_name, u"x\xe9")
       
    1:     def test_intarray_fields(self):
    2:         class SomeInts(Structure):
    1:             _fields_ = [("a", c_int * 4)]
       
               # can use tuple to initialize array (but not list!)
    1:         self.assertEqual(SomeInts((1, 2)).a[:], [1, 2, 0, 0])
    1:         self.assertEqual(SomeInts((1, 2)).a[::], [1, 2, 0, 0])
    1:         self.assertEqual(SomeInts((1, 2)).a[::-1], [0, 0, 2, 1])
    1:         self.assertEqual(SomeInts((1, 2)).a[::2], [1, 0])
    1:         self.assertEqual(SomeInts((1, 2)).a[1:5:6], [2])
    1:         self.assertEqual(SomeInts((1, 2)).a[6:4:-1], [])
    1:         self.assertEqual(SomeInts((1, 2, 3, 4)).a[:], [1, 2, 3, 4])
    1:         self.assertEqual(SomeInts((1, 2, 3, 4)).a[::], [1, 2, 3, 4])
               # too long
               # XXX Should raise ValueError?, not RuntimeError
    1:         self.assertRaises(RuntimeError, SomeInts, (1, 2, 3, 4, 5))
       
    1:     def test_nested_initializers(self):
               # test initializing nested structures
    2:         class Phone(Structure):
    1:             _fields_ = [("areacode", c_char*6),
    1:                         ("number", c_char*12)]
       
    2:         class Person(Structure):
    1:             _fields_ = [("name", c_char * 12),
    1:                         ("phone", Phone),
    1:                         ("age", c_int)]
       
    1:         p = Person("Someone", ("1234", "5678"), 5)
       
    1:         self.assertEqual(p.name, "Someone")
    1:         self.assertEqual(p.phone.areacode, "1234")
    1:         self.assertEqual(p.phone.number, "5678")
    1:         self.assertEqual(p.age, 5)
       
    1:     @need_symbol('c_wchar')
           def test_structures_with_wchar(self):
    2:         class PersonW(Structure):
    1:             _fields_ = [("name", c_wchar * 12),
    1:                         ("age", c_int)]
       
    1:         p = PersonW(u"Someone")
    1:         self.assertEqual(p.name, "Someone")
       
    1:         self.assertEqual(PersonW(u"1234567890").name, u"1234567890")
    1:         self.assertEqual(PersonW(u"12345678901").name, u"12345678901")
               # exact fit
    1:         self.assertEqual(PersonW(u"123456789012").name, u"123456789012")
               #too long
    1:         self.assertRaises(ValueError, PersonW, u"1234567890123")
       
    1:     def test_init_errors(self):
    2:         class Phone(Structure):
    1:             _fields_ = [("areacode", c_char*6),
    1:                         ("number", c_char*12)]
       
    2:         class Person(Structure):
    1:             _fields_ = [("name", c_char * 12),
    1:                         ("phone", Phone),
    1:                         ("age", c_int)]
       
    1:         cls, msg = self.get_except(Person, "Someone", (1, 2))
    1:         self.assertEqual(cls, RuntimeError)
               # In Python 2.5, Exception is a new-style class, and the repr changed
    1:         if issubclass(Exception, object):
    1:             self.assertEqual(msg,
    1:                                  "(Phone) <type 'exceptions.TypeError'>: "
                                        "expected string or Unicode object, int found")
               else:
                   # Compatibility no longer strictly required
>>>>>>             self.assertEqual(msg,
>>>>>>                                  "(Phone) exceptions.TypeError: "
                                        "expected string or Unicode object, int found")
       
    1:         cls, msg = self.get_except(Person, "Someone", ("a", "b", "c"))
    1:         self.assertEqual(cls, RuntimeError)
    1:         if issubclass(Exception, object):
    1:             self.assertEqual(msg,
    1:                                  "(Phone) <type 'exceptions.TypeError'>: too many initializers")
               else:
>>>>>>             self.assertEqual(msg, "(Phone) exceptions.TypeError: too many initializers")
       
    1:     def test_huge_field_name(self):
               # issue12881: segfault with large structure field names
    1:         def create_class(length):
   16:             class S(Structure):
    8:                 _fields_ = [('x' * length, c_int)]
       
   17:         for length in [10 ** i for i in range(0, 8)]:
    8:             try:
    8:                 create_class(length)
>>>>>>             except MemoryError:
                       # MemoryErrors are OK, we just don't want to segfault
>>>>>>                 pass
       
    1:     def get_except(self, func, *args):
    3:         try:
    3:             func(*args)
    3:         except Exception, detail:
    3:             return detail.__class__, str(detail)
       
    1:     @unittest.skip('test disabled')
           def test_subclass_creation(self):
>>>>>>         meta = type(Structure)
               # same as 'class X(Structure): pass'
               # fails, since we need either a _fields_ or a _abstract_ attribute
>>>>>>         cls, msg = self.get_except(meta, "X", (Structure,), {})
>>>>>>         self.assertEqual((cls, msg),
>>>>>>                 (AttributeError, "class must define a '_fields_' attribute"))
       
    1:     def test_abstract_class(self):
    2:         class X(Structure):
    1:             _abstract_ = "something"
               # try 'X()'
    1:         cls, msg = self.get_except(eval, "X()", locals())
    1:         self.assertEqual((cls, msg), (TypeError, "abstract class"))
       
    1:     def test_methods(self):
       ##        class X(Structure):
       ##            _fields_ = []
       
    1:         self.assertIn("in_dll", dir(type(Structure)))
    1:         self.assertIn("from_address", dir(type(Structure)))
    1:         self.assertIn("in_dll", dir(type(Structure)))
       
    1:     def test_positional_args(self):
               # see also http://bugs.python.org/issue5042
    2:         class W(Structure):
    1:             _fields_ = [("a", c_int), ("b", c_int)]
    2:         class X(W):
    1:             _fields_ = [("c", c_int)]
    2:         class Y(X):
    1:             pass
    2:         class Z(Y):
    1:             _fields_ = [("d", c_int), ("e", c_int), ("f", c_int)]
       
    1:         z = Z(1, 2, 3, 4, 5, 6)
    1:         self.assertEqual((z.a, z.b, z.c, z.d, z.e, z.f),
    1:                          (1, 2, 3, 4, 5, 6))
    1:         z = Z(1)
    1:         self.assertEqual((z.a, z.b, z.c, z.d, z.e, z.f),
    1:                          (1, 0, 0, 0, 0, 0))
    2:         self.assertRaises(TypeError, lambda: Z(1, 2, 3, 4, 5, 6, 7))
       
    2: class PointerMemberTestCase(unittest.TestCase):
       
    1:     def test(self):
               # a Structure with a POINTER field
    2:         class S(Structure):
    1:             _fields_ = [("array", POINTER(c_int))]
       
    1:         s = S()
               # We can assign arrays of the correct type
    1:         s.array = (c_int * 3)(1, 2, 3)
    4:         items = [s.array[i] for i in range(3)]
    1:         self.assertEqual(items, [1, 2, 3])
       
               # The following are bugs, but are included here because the unittests
               # also describe the current behaviour.
               #
               # This fails with SystemError: bad arg to internal function
               # or with IndexError (with a patch I have)
       
    1:         s.array[0] = 42
       
    4:         items = [s.array[i] for i in range(3)]
    1:         self.assertEqual(items, [42, 2, 3])
       
    1:         s.array[0] = 1
       
       ##        s.array[1] = 42
       
    4:         items = [s.array[i] for i in range(3)]
    1:         self.assertEqual(items, [1, 2, 3])
       
    1:     def test_none_to_pointer_fields(self):
    2:         class S(Structure):
    1:             _fields_ = [("x", c_int),
    1:                         ("p", POINTER(c_int))]
       
    1:         s = S()
    1:         s.x = 12345678
    1:         s.p = None
    1:         self.assertEqual(s.x, 12345678)
       
    2: class TestRecursiveStructure(unittest.TestCase):
    1:     def test_contains_itself(self):
    2:         class Recursive(Structure):
    1:             pass
       
    1:         try:
    1:             Recursive._fields_ = [("next", Recursive)]
    1:         except AttributeError, details:
    1:             self.assertIn("Structure or union cannot contain itself",
    1:                           str(details))
               else:
>>>>>>             self.fail("Structure or union cannot contain itself")
       
       
    1:     def test_vice_versa(self):
    2:         class First(Structure):
    1:             pass
    2:         class Second(Structure):
    1:             pass
       
    1:         First._fields_ = [("second", Second)]
       
    1:         try:
    1:             Second._fields_ = [("first", First)]
    1:         except AttributeError, details:
    1:             self.assertIn("_fields_ is final", str(details))
               else:
>>>>>>             self.fail("AttributeError not raised")
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
