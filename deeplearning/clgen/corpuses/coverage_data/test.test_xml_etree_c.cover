       # xml.etree test for cElementTree
       
    1: from test import test_support
    1: from test.test_support import precisionbigmemtest, _2G
    1: import unittest
       
    1: cET = test_support.import_module('xml.etree.cElementTree')
       
       
    2: @unittest.skipUnless(cET, 'requires _elementtree')
    1: class MiscTests(unittest.TestCase):
           # Issue #8651.
    1:     @precisionbigmemtest(size=_2G + 100, memuse=1)
           def test_length_overflow(self, size):
    1:         if size < _2G + 100:
    1:             self.skipTest("not enough free memory, need at least 2 GB")
>>>>>>         data = b'x' * size
>>>>>>         parser = cET.XMLParser()
>>>>>>         try:
>>>>>>             self.assertRaises(OverflowError, parser.feed, data)
               finally:
>>>>>>             data = None
       
    1:     def test_del_attribute(self):
    1:         element = cET.Element('tag')
       
    1:         element.tag = 'TAG'
    1:         with self.assertRaises(AttributeError):
    1:             del element.tag
    1:         self.assertEqual(element.tag, 'TAG')
       
    1:         with self.assertRaises(AttributeError):
    1:             del element.text
    1:         self.assertIsNone(element.text)
    1:         element.text = 'TEXT'
    1:         with self.assertRaises(AttributeError):
    1:             del element.text
    1:         self.assertEqual(element.text, 'TEXT')
       
    1:         with self.assertRaises(AttributeError):
    1:             del element.tail
    1:         self.assertIsNone(element.tail)
    1:         element.tail = 'TAIL'
    1:         with self.assertRaises(AttributeError):
    1:             del element.tail
    1:         self.assertEqual(element.tail, 'TAIL')
       
    1:         with self.assertRaises(AttributeError):
    1:             del element.attrib
    1:         self.assertEqual(element.attrib, {})
    1:         element.attrib = {'A': 'B', 'C': 'D'}
    1:         with self.assertRaises(AttributeError):
    1:             del element.attrib
    1:         self.assertEqual(element.attrib, {'A': 'B', 'C': 'D'})
       
       
    1: def test_main():
    1:     from test import test_xml_etree, test_xml_etree_c
       
           # Run the tests specific to the C implementation
    1:     test_support.run_unittest(MiscTests)
       
           # Run the same test suite as the Python module
    1:     test_xml_etree.test_main(module=cET)
       
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
