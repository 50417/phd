    1: import unittest
    1: from test import test_support
    1: import io
    1: import os
    1: import uuid
       
    1: def importable(name):
    6:     try:
    6:         __import__(name)
    4:         return True
    2:     except:
    2:         return False
       
    2: class TestUUID(unittest.TestCase):
    1:     def test_UUID(self):
    1:         equal = self.assertEqual
    1:         ascending = []
    1:         for (string, curly, hex, bytes, bytes_le, fields, integer, urn,
                    time, clock_seq, variant, version) in [
    1:             ('00000000-0000-0000-0000-000000000000',
    1:              '{00000000-0000-0000-0000-000000000000}',
    1:              '00000000000000000000000000000000',
    1:              '\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0',
    1:              '\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0',
    1:              (0, 0, 0, 0, 0, 0),
    1:              0,
    1:              'urn:uuid:00000000-0000-0000-0000-000000000000',
    1:              0, 0, uuid.RESERVED_NCS, None),
    1:             ('00010203-0405-0607-0809-0a0b0c0d0e0f',
    1:              '{00010203-0405-0607-0809-0a0b0c0d0e0f}',
    1:              '000102030405060708090a0b0c0d0e0f',
    1:              '\0\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\x0d\x0e\x0f',
    1:              '\x03\x02\x01\0\x05\x04\x07\x06\x08\t\n\x0b\x0c\x0d\x0e\x0f',
    1:              (0x00010203L, 0x0405, 0x0607, 8, 9, 0x0a0b0c0d0e0fL),
    1:              0x000102030405060708090a0b0c0d0e0fL,
    1:              'urn:uuid:00010203-0405-0607-0809-0a0b0c0d0e0f',
    1:              0x607040500010203L, 0x809, uuid.RESERVED_NCS, None),
    1:             ('02d9e6d5-9467-382e-8f9b-9300a64ac3cd',
    1:              '{02d9e6d5-9467-382e-8f9b-9300a64ac3cd}',
    1:              '02d9e6d59467382e8f9b9300a64ac3cd',
    1:              '\x02\xd9\xe6\xd5\x94\x67\x38\x2e\x8f\x9b\x93\x00\xa6\x4a\xc3\xcd',
    1:              '\xd5\xe6\xd9\x02\x67\x94\x2e\x38\x8f\x9b\x93\x00\xa6\x4a\xc3\xcd',
    1:              (0x02d9e6d5L, 0x9467, 0x382e, 0x8f, 0x9b, 0x9300a64ac3cdL),
    1:              0x02d9e6d59467382e8f9b9300a64ac3cdL,
    1:              'urn:uuid:02d9e6d5-9467-382e-8f9b-9300a64ac3cd',
    1:              0x82e946702d9e6d5L, 0xf9b, uuid.RFC_4122, 3),
    1:             ('12345678-1234-5678-1234-567812345678',
    1:              '{12345678-1234-5678-1234-567812345678}',
    1:              '12345678123456781234567812345678',
    1:              '\x12\x34\x56\x78'*4,
    1:              '\x78\x56\x34\x12\x34\x12\x78\x56\x12\x34\x56\x78\x12\x34\x56\x78',
    1:              (0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678),
    1:              0x12345678123456781234567812345678,
    1:              'urn:uuid:12345678-1234-5678-1234-567812345678',
    1:              0x678123412345678L, 0x1234, uuid.RESERVED_NCS, None),
    1:             ('6ba7b810-9dad-11d1-80b4-00c04fd430c8',
    1:              '{6ba7b810-9dad-11d1-80b4-00c04fd430c8}',
    1:              '6ba7b8109dad11d180b400c04fd430c8',
    1:              '\x6b\xa7\xb8\x10\x9d\xad\x11\xd1\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
    1:              '\x10\xb8\xa7\x6b\xad\x9d\xd1\x11\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
    1:              (0x6ba7b810L, 0x9dad, 0x11d1, 0x80, 0xb4, 0x00c04fd430c8L),
    1:              0x6ba7b8109dad11d180b400c04fd430c8L,
    1:              'urn:uuid:6ba7b810-9dad-11d1-80b4-00c04fd430c8',
    1:              0x1d19dad6ba7b810L, 0xb4, uuid.RFC_4122, 1),
    1:             ('6ba7b811-9dad-11d1-80b4-00c04fd430c8',
    1:              '{6ba7b811-9dad-11d1-80b4-00c04fd430c8}',
    1:              '6ba7b8119dad11d180b400c04fd430c8',
    1:              '\x6b\xa7\xb8\x11\x9d\xad\x11\xd1\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
    1:              '\x11\xb8\xa7\x6b\xad\x9d\xd1\x11\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
    1:              (0x6ba7b811L, 0x9dad, 0x11d1, 0x80, 0xb4, 0x00c04fd430c8L),
    1:              0x6ba7b8119dad11d180b400c04fd430c8L,
    1:              'urn:uuid:6ba7b811-9dad-11d1-80b4-00c04fd430c8',
    1:              0x1d19dad6ba7b811L, 0xb4, uuid.RFC_4122, 1),
    1:             ('6ba7b812-9dad-11d1-80b4-00c04fd430c8',
    1:              '{6ba7b812-9dad-11d1-80b4-00c04fd430c8}',
    1:              '6ba7b8129dad11d180b400c04fd430c8',
    1:              '\x6b\xa7\xb8\x12\x9d\xad\x11\xd1\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
    1:              '\x12\xb8\xa7\x6b\xad\x9d\xd1\x11\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
    1:              (0x6ba7b812L, 0x9dad, 0x11d1, 0x80, 0xb4, 0x00c04fd430c8L),
    1:              0x6ba7b8129dad11d180b400c04fd430c8L,
    1:              'urn:uuid:6ba7b812-9dad-11d1-80b4-00c04fd430c8',
    1:              0x1d19dad6ba7b812L, 0xb4, uuid.RFC_4122, 1),
    1:             ('6ba7b814-9dad-11d1-80b4-00c04fd430c8',
    1:              '{6ba7b814-9dad-11d1-80b4-00c04fd430c8}',
    1:              '6ba7b8149dad11d180b400c04fd430c8',
    1:              '\x6b\xa7\xb8\x14\x9d\xad\x11\xd1\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
    1:              '\x14\xb8\xa7\x6b\xad\x9d\xd1\x11\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
    1:              (0x6ba7b814L, 0x9dad, 0x11d1, 0x80, 0xb4, 0x00c04fd430c8L),
    1:              0x6ba7b8149dad11d180b400c04fd430c8L,
    1:              'urn:uuid:6ba7b814-9dad-11d1-80b4-00c04fd430c8',
    1:              0x1d19dad6ba7b814L, 0xb4, uuid.RFC_4122, 1),
    1:             ('7d444840-9dc0-11d1-b245-5ffdce74fad2',
    1:              '{7d444840-9dc0-11d1-b245-5ffdce74fad2}',
    1:              '7d4448409dc011d1b2455ffdce74fad2',
    1:              '\x7d\x44\x48\x40\x9d\xc0\x11\xd1\xb2\x45\x5f\xfd\xce\x74\xfa\xd2',
    1:              '\x40\x48\x44\x7d\xc0\x9d\xd1\x11\xb2\x45\x5f\xfd\xce\x74\xfa\xd2',
    1:              (0x7d444840L, 0x9dc0, 0x11d1, 0xb2, 0x45, 0x5ffdce74fad2L),
    1:              0x7d4448409dc011d1b2455ffdce74fad2L,
    1:              'urn:uuid:7d444840-9dc0-11d1-b245-5ffdce74fad2',
    1:              0x1d19dc07d444840L, 0x3245, uuid.RFC_4122, 1),
    1:             ('e902893a-9d22-3c7e-a7b8-d6e313b71d9f',
    1:              '{e902893a-9d22-3c7e-a7b8-d6e313b71d9f}',
    1:              'e902893a9d223c7ea7b8d6e313b71d9f',
    1:              '\xe9\x02\x89\x3a\x9d\x22\x3c\x7e\xa7\xb8\xd6\xe3\x13\xb7\x1d\x9f',
    1:              '\x3a\x89\x02\xe9\x22\x9d\x7e\x3c\xa7\xb8\xd6\xe3\x13\xb7\x1d\x9f',
    1:              (0xe902893aL, 0x9d22, 0x3c7e, 0xa7, 0xb8, 0xd6e313b71d9fL),
    1:              0xe902893a9d223c7ea7b8d6e313b71d9fL,
    1:              'urn:uuid:e902893a-9d22-3c7e-a7b8-d6e313b71d9f',
    1:              0xc7e9d22e902893aL, 0x27b8, uuid.RFC_4122, 3),
    1:             ('eb424026-6f54-4ef8-a4d0-bb658a1fc6cf',
    1:              '{eb424026-6f54-4ef8-a4d0-bb658a1fc6cf}',
    1:              'eb4240266f544ef8a4d0bb658a1fc6cf',
    1:              '\xeb\x42\x40\x26\x6f\x54\x4e\xf8\xa4\xd0\xbb\x65\x8a\x1f\xc6\xcf',
    1:              '\x26\x40\x42\xeb\x54\x6f\xf8\x4e\xa4\xd0\xbb\x65\x8a\x1f\xc6\xcf',
    1:              (0xeb424026L, 0x6f54, 0x4ef8, 0xa4, 0xd0, 0xbb658a1fc6cfL),
    1:              0xeb4240266f544ef8a4d0bb658a1fc6cfL,
    1:              'urn:uuid:eb424026-6f54-4ef8-a4d0-bb658a1fc6cf',
    1:              0xef86f54eb424026L, 0x24d0, uuid.RFC_4122, 4),
    1:             ('f81d4fae-7dec-11d0-a765-00a0c91e6bf6',
    1:              '{f81d4fae-7dec-11d0-a765-00a0c91e6bf6}',
    1:              'f81d4fae7dec11d0a76500a0c91e6bf6',
    1:              '\xf8\x1d\x4f\xae\x7d\xec\x11\xd0\xa7\x65\x00\xa0\xc9\x1e\x6b\xf6',
    1:              '\xae\x4f\x1d\xf8\xec\x7d\xd0\x11\xa7\x65\x00\xa0\xc9\x1e\x6b\xf6',
    1:              (0xf81d4faeL, 0x7dec, 0x11d0, 0xa7, 0x65, 0x00a0c91e6bf6L),
    1:              0xf81d4fae7dec11d0a76500a0c91e6bf6L,
    1:              'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6',
    1:              0x1d07decf81d4faeL, 0x2765, uuid.RFC_4122, 1),
    1:             ('fffefdfc-fffe-fffe-fffe-fffefdfcfbfa',
    1:              '{fffefdfc-fffe-fffe-fffe-fffefdfcfbfa}',
    1:              'fffefdfcfffefffefffefffefdfcfbfa',
    1:              '\xff\xfe\xfd\xfc\xff\xfe\xff\xfe\xff\xfe\xff\xfe\xfd\xfc\xfb\xfa',
    1:              '\xfc\xfd\xfe\xff\xfe\xff\xfe\xff\xff\xfe\xff\xfe\xfd\xfc\xfb\xfa',
    1:              (0xfffefdfcL, 0xfffe, 0xfffe, 0xff, 0xfe, 0xfffefdfcfbfaL),
    1:              0xfffefdfcfffefffefffefffefdfcfbfaL,
    1:              'urn:uuid:fffefdfc-fffe-fffe-fffe-fffefdfcfbfa',
    1:              0xffefffefffefdfcL, 0x3ffe, uuid.RESERVED_FUTURE, None),
    1:             ('ffffffff-ffff-ffff-ffff-ffffffffffff',
    1:              '{ffffffff-ffff-ffff-ffff-ffffffffffff}',
    1:              'ffffffffffffffffffffffffffffffff',
    1:              '\xff'*16,
    1:              '\xff'*16,
    1:              (0xffffffffL, 0xffffL, 0xffffL, 0xff, 0xff, 0xffffffffffffL),
    1:              0xffffffffffffffffffffffffffffffffL,
    1:              'urn:uuid:ffffffff-ffff-ffff-ffff-ffffffffffff',
   15:              0xfffffffffffffffL, 0x3fff, uuid.RESERVED_FUTURE, None),
                   ]:
   14:             equivalents = []
                   # Construct each UUID in several different ways.
   14:             for u in [uuid.UUID(string), uuid.UUID(curly), uuid.UUID(hex),
   14:                       uuid.UUID(bytes=bytes), uuid.UUID(bytes_le=bytes_le),
   14:                       uuid.UUID(fields=fields), uuid.UUID(int=integer),
  126:                       uuid.UUID(urn)]:
                       # Test all conversions and properties of the UUID object.
  112:                 equal(str(u), string)
  112:                 equal(int(u), integer)
  112:                 equal(u.bytes, bytes)
  112:                 equal(u.bytes_le, bytes_le)
  112:                 equal(u.fields, fields)
  112:                 equal(u.time_low, fields[0])
  112:                 equal(u.time_mid, fields[1])
  112:                 equal(u.time_hi_version, fields[2])
  112:                 equal(u.clock_seq_hi_variant, fields[3])
  112:                 equal(u.clock_seq_low, fields[4])
  112:                 equal(u.node, fields[5])
  112:                 equal(u.hex, hex)
  112:                 equal(u.int, integer)
  112:                 equal(u.urn, urn)
  112:                 equal(u.time, time)
  112:                 equal(u.clock_seq, clock_seq)
  112:                 equal(u.variant, variant)
  112:                 equal(u.version, version)
  112:                 equivalents.append(u)
       
                   # Different construction methods should give the same UUID.
  126:             for u in equivalents:
 1008:                 for v in equivalents:
  896:                     equal(u, v)
   14:             ascending.append(u)
       
               # Test comparison of UUIDs.
   15:         for i in range(len(ascending)):
  210:             for j in range(len(ascending)):
  196:                 equal(cmp(i, j), cmp(ascending[i], ascending[j]))
       
               # Test sorting of UUIDs (above list is in ascending order).
    1:         resorted = ascending[:]
    1:         resorted.reverse()
    1:         resorted.sort()
    1:         equal(ascending, resorted)
       
    1:     def test_exceptions(self):
   31:         badvalue = lambda f: self.assertRaises(ValueError, f)
   76:         badtype = lambda f: self.assertRaises(TypeError, f)
       
               # Badly formed hex strings.
    2:         badvalue(lambda: uuid.UUID(''))
    2:         badvalue(lambda: uuid.UUID('abc'))
    2:         badvalue(lambda: uuid.UUID('1234567812345678123456781234567'))
    2:         badvalue(lambda: uuid.UUID('123456781234567812345678123456789'))
    2:         badvalue(lambda: uuid.UUID('123456781234567812345678z2345678'))
       
               # Badly formed bytes.
    2:         badvalue(lambda: uuid.UUID(bytes='abc'))
    2:         badvalue(lambda: uuid.UUID(bytes='\0'*15))
    2:         badvalue(lambda: uuid.UUID(bytes='\0'*17))
       
               # Badly formed bytes_le.
    2:         badvalue(lambda: uuid.UUID(bytes_le='abc'))
    2:         badvalue(lambda: uuid.UUID(bytes_le='\0'*15))
    2:         badvalue(lambda: uuid.UUID(bytes_le='\0'*17))
       
               # Badly formed fields.
    2:         badvalue(lambda: uuid.UUID(fields=(1,)))
    2:         badvalue(lambda: uuid.UUID(fields=(1, 2, 3, 4, 5)))
    2:         badvalue(lambda: uuid.UUID(fields=(1, 2, 3, 4, 5, 6, 7)))
       
               # Field values out of range.
    2:         badvalue(lambda: uuid.UUID(fields=(-1, 0, 0, 0, 0, 0)))
    2:         badvalue(lambda: uuid.UUID(fields=(0x100000000L, 0, 0, 0, 0, 0)))
    2:         badvalue(lambda: uuid.UUID(fields=(0, -1, 0, 0, 0, 0)))
    2:         badvalue(lambda: uuid.UUID(fields=(0, 0x10000L, 0, 0, 0, 0)))
    2:         badvalue(lambda: uuid.UUID(fields=(0, 0, -1, 0, 0, 0)))
    2:         badvalue(lambda: uuid.UUID(fields=(0, 0, 0x10000L, 0, 0, 0)))
    2:         badvalue(lambda: uuid.UUID(fields=(0, 0, 0, -1, 0, 0)))
    2:         badvalue(lambda: uuid.UUID(fields=(0, 0, 0, 0x100L, 0, 0)))
    2:         badvalue(lambda: uuid.UUID(fields=(0, 0, 0, 0, -1, 0)))
    2:         badvalue(lambda: uuid.UUID(fields=(0, 0, 0, 0, 0x100L, 0)))
    2:         badvalue(lambda: uuid.UUID(fields=(0, 0, 0, 0, 0, -1)))
    2:         badvalue(lambda: uuid.UUID(fields=(0, 0, 0, 0, 0, 0x1000000000000L)))
       
               # Version number out of range.
    2:         badvalue(lambda: uuid.UUID('00'*16, version=0))
    2:         badvalue(lambda: uuid.UUID('00'*16, version=6))
       
               # Integer value out of range.
    2:         badvalue(lambda: uuid.UUID(int=-1))
    2:         badvalue(lambda: uuid.UUID(int=1<<128L))
       
               # Must supply exactly one of hex, bytes, fields, int.
    1:         h, b, f, i = '00'*16, '\0'*16, (0, 0, 0, 0, 0, 0), 0
    1:         uuid.UUID(h)
    1:         uuid.UUID(hex=h)
    1:         uuid.UUID(bytes=b)
    1:         uuid.UUID(bytes_le=b)
    1:         uuid.UUID(fields=f)
    1:         uuid.UUID(int=i)
       
               # Wrong number of arguments (positional).
    2:         badtype(lambda: uuid.UUID())
    2:         badtype(lambda: uuid.UUID(h, b))
    2:         badtype(lambda: uuid.UUID(h, b, b))
    2:         badtype(lambda: uuid.UUID(h, b, b, f))
    2:         badtype(lambda: uuid.UUID(h, b, b, f, i))
       
               # Duplicate arguments.
    3:         for hh in [[], [('hex', h)]]:
    6:             for bb in [[], [('bytes', b)]]:
   12:                 for bble in [[], [('bytes_le', b)]]:
   24:                     for ii in [[], [('int', i)]]:
   48:                         for ff in [[], [('fields', f)]]:
   32:                             args = dict(hh + bb + bble + ii + ff)
   32:                             if len(args) != 0:
   62:                                 badtype(lambda: uuid.UUID(h, **args))
   32:                             if len(args) != 1:
   54:                                 badtype(lambda: uuid.UUID(**args))
       
               # Immutability.
    1:         u = uuid.UUID(h)
    2:         badtype(lambda: setattr(u, 'hex', h))
    2:         badtype(lambda: setattr(u, 'bytes', b))
    2:         badtype(lambda: setattr(u, 'bytes_le', b))
    2:         badtype(lambda: setattr(u, 'fields', f))
    2:         badtype(lambda: setattr(u, 'int', i))
    2:         badtype(lambda: setattr(u, 'time_low', 0))
    2:         badtype(lambda: setattr(u, 'time_mid', 0))
    2:         badtype(lambda: setattr(u, 'time_hi_version', 0))
    2:         badtype(lambda: setattr(u, 'time_hi_version', 0))
    2:         badtype(lambda: setattr(u, 'clock_seq_hi_variant', 0))
    2:         badtype(lambda: setattr(u, 'clock_seq_low', 0))
    2:         badtype(lambda: setattr(u, 'node', 0))
       
    1:     def test_getnode(self):
    1:         node1 = uuid.getnode()
    1:         self.assertTrue(0 < node1 < (1 << 48), '%012x' % node1)
       
               # Test it again to ensure consistency.
    1:         node2 = uuid.getnode()
    1:         self.assertEqual(node1, node2, '%012x != %012x' % (node1, node2))
       
    1:     @unittest.skipUnless(importable('ctypes'), 'requires ctypes')
           def test_uuid1(self):
    1:         equal = self.assertEqual
       
               # Make sure uuid1() generates UUIDs that are actually version 1.
   21:         for u in [uuid.uuid1() for i in range(10)]:
   10:             equal(u.variant, uuid.RFC_4122)
   10:             equal(u.version, 1)
       
               # Make sure the generated UUIDs are actually unique.
    1:         uuids = {}
 2001:         for u in [uuid.uuid1() for i in range(1000)]:
 1000:             uuids[u] = 1
    1:         equal(len(uuids.keys()), 1000)
       
               # Make sure the supplied node ID appears in the UUID.
    1:         u = uuid.uuid1(0)
    1:         equal(u.node, 0)
    1:         u = uuid.uuid1(0x123456789abc)
    1:         equal(u.node, 0x123456789abc)
    1:         u = uuid.uuid1(0xffffffffffff)
    1:         equal(u.node, 0xffffffffffff)
       
               # Make sure the supplied clock sequence appears in the UUID.
    1:         u = uuid.uuid1(0x123456789abc, 0)
    1:         equal(u.node, 0x123456789abc)
    1:         equal(((u.clock_seq_hi_variant & 0x3f) << 8) | u.clock_seq_low, 0)
    1:         u = uuid.uuid1(0x123456789abc, 0x1234)
    1:         equal(u.node, 0x123456789abc)
    1:         equal(((u.clock_seq_hi_variant & 0x3f) << 8) |
    1:                          u.clock_seq_low, 0x1234)
    1:         u = uuid.uuid1(0x123456789abc, 0x3fff)
    1:         equal(u.node, 0x123456789abc)
    1:         equal(((u.clock_seq_hi_variant & 0x3f) << 8) |
    1:                          u.clock_seq_low, 0x3fff)
       
    1:     def test_uuid3(self):
    1:         equal = self.assertEqual
       
               # Test some known version-3 UUIDs.
    1:         for u, v in [(uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org'),
    1:                       '6fa459ea-ee8a-3ca4-894e-db77e160355e'),
    1:                      (uuid.uuid3(uuid.NAMESPACE_URL, 'http://python.org/'),
    1:                       '9fe8e8c4-aaa8-32a9-a55c-4535a88b748d'),
    1:                      (uuid.uuid3(uuid.NAMESPACE_OID, '1.3.6.1'),
    1:                       'dd1a1cef-13d5-368a-ad82-eca71acd4cd1'),
    1:                      (uuid.uuid3(uuid.NAMESPACE_X500, 'c=ca'),
    5:                       '658d3002-db6b-3040-a1d1-8ddd7d189a4d'),
                           ]:
    4:             equal(u.variant, uuid.RFC_4122)
    4:             equal(u.version, 3)
    4:             equal(u, uuid.UUID(v))
    4:             equal(str(u), v)
       
    1:     @unittest.skipUnless(importable('ctypes'), 'requires ctypes')
           def test_uuid4(self):
    1:         equal = self.assertEqual
       
               # Make sure uuid4() generates UUIDs that are actually version 4.
   21:         for u in [uuid.uuid4() for i in range(10)]:
   10:             equal(u.variant, uuid.RFC_4122)
   10:             equal(u.version, 4)
       
               # Make sure the generated UUIDs are actually unique.
    1:         uuids = {}
 2001:         for u in [uuid.uuid4() for i in range(1000)]:
 1000:             uuids[u] = 1
    1:         equal(len(uuids.keys()), 1000)
       
    1:     def test_uuid5(self):
    1:         equal = self.assertEqual
       
               # Test some known version-5 UUIDs.
    1:         for u, v in [(uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org'),
    1:                       '886313e1-3b8a-5372-9b90-0c9aee199e5d'),
    1:                      (uuid.uuid5(uuid.NAMESPACE_URL, 'http://python.org/'),
    1:                       '4c565f0d-3f5a-5890-b41b-20cf47701c5e'),
    1:                      (uuid.uuid5(uuid.NAMESPACE_OID, '1.3.6.1'),
    1:                       '1447fa61-5277-5fef-a9b3-fbc6e44f4af3'),
    1:                      (uuid.uuid5(uuid.NAMESPACE_X500, 'c=ca'),
    5:                       'cc957dd1-a972-5349-98cd-874190002798'),
                           ]:
    4:             equal(u.variant, uuid.RFC_4122)
    4:             equal(u.version, 5)
    4:             equal(u, uuid.UUID(v))
    4:             equal(str(u), v)
       
    1:     @unittest.skipUnless(os.name == 'posix', 'requires Posix')
           def testIssue8621(self):
               # On at least some versions of OSX uuid.uuid4 generates
               # the same sequence of UUIDs in the parent and any
               # children started using fork.
    1:         fds = os.pipe()
    1:         pid = os.fork()
    1:         if pid == 0:
>>>>>>             os.close(fds[0])
>>>>>>             value = uuid.uuid4()
>>>>>>             os.write(fds[1], value.hex)
>>>>>>             os._exit(0)
       
               else:
    1:             os.close(fds[1])
    1:             self.addCleanup(os.close, fds[0])
    1:             parent_value = uuid.uuid4().hex
    1:             os.waitpid(pid, 0)
    1:             child_value = os.read(fds[0], 100)
       
    1:             self.assertNotEqual(parent_value, child_value)
       
       
    2: class TestInternals(unittest.TestCase):
    1:     @unittest.skipUnless(os.name == 'posix', 'requires Posix')
           def test_find_mac(self):
               data = '''\
       
       fake hwaddr
       cscotun0  Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00
       eth0      Link encap:Ethernet  HWaddr 12:34:56:78:90:ab
    1: '''
    1:         def mock_popen(cmd):
    1:             return io.BytesIO(data)
       
    1:         path = os.environ.get("PATH", os.defpath).split(os.pathsep)
    1:         path.extend(('/sbin', '/usr/sbin'))
   10:         for dir in path:
   10:             executable = os.path.join(dir, 'ifconfig')
   10:             if (os.path.exists(executable) and
    1:                 os.access(executable, os.F_OK | os.X_OK) and
    1:                 not os.path.isdir(executable)):
    1:                 break
               else:
>>>>>>             self.skipTest('requires ifconfig')
       
    1:         with test_support.swap_attr(os, 'popen', mock_popen):
    1:             mac = uuid._find_mac(
    1:                 command='ifconfig',
    1:                 args='',
    1:                 hw_identifiers=['hwaddr'],
    4:                 get_index=lambda x: x + 1,
                   )
    1:             self.assertEqual(mac, 0x1234567890ab)
       
    1:     def check_node(self, node, requires=None, network=False):
    5:         if requires and node is None:
    2:             self.skipTest('requires ' + requires)
    3:         hex = '%012x' % node
    3:         if test_support.verbose >= 2:
>>>>>>             print hex + ' ',
    3:         if network:
                   # 47 bit will never be set in IEEE 802 addresses obtained
                   # from network cards.
    2:             self.assertFalse(node & 0x010000000000, hex)
    3:         self.assertTrue(0 < node < (1L << 48),
    3:                         "%s is not an RFC 4122 node ID" % hex)
       
    1:     @unittest.skipUnless(os.name == 'posix', 'requires Posix')
           def test_ifconfig_getnode(self):
    1:         node = uuid._ifconfig_getnode()
    1:         self.check_node(node, 'ifconfig', True)
       
    1:     @unittest.skipUnless(os.name == 'posix', 'requires Posix')
           def test_arp_getnode(self):
    1:         node = uuid._arp_getnode()
    1:         self.check_node(node, 'arp', True)
       
    1:     @unittest.skipUnless(os.name == 'posix', 'requires Posix')
           def test_lanscan_getnode(self):
    1:         node = uuid._lanscan_getnode()
    1:         self.check_node(node, 'lanscan', True)
       
    1:     @unittest.skipUnless(os.name == 'posix', 'requires Posix')
           def test_netstat_getnode(self):
    1:         node = uuid._netstat_getnode()
    1:         self.check_node(node, 'netstat', True)
       
    1:     @unittest.skipUnless(os.name == 'nt', 'requires Windows')
           def test_ipconfig_getnode(self):
>>>>>>         node = uuid._ipconfig_getnode()
>>>>>>         self.check_node(node, 'ipconfig', True)
       
    1:     @unittest.skipUnless(importable('win32wnet'), 'requires win32wnet')
    1:     @unittest.skipUnless(importable('netbios'), 'requires netbios')
           def test_netbios_getnode(self):
>>>>>>         node = uuid._netbios_getnode()
>>>>>>         self.check_node(node, network=True)
       
    1:     def test_random_getnode(self):
    1:         node = uuid._random_getnode()
               # Least significant bit of first octet must be set.
    1:         self.assertTrue(node & 0x010000000000, '%012x' % node)
    1:         self.check_node(node)
       
    1:     @unittest.skipUnless(os.name == 'posix', 'requires Posix')
    1:     @unittest.skipUnless(importable('ctypes'), 'requires ctypes')
           def test_unixdll_getnode(self):
    1:         try: # Issues 1481, 3581: _uuid_generate_time() might be None.
    1:             node = uuid._unixdll_getnode()
    1:         except TypeError:
    1:             self.skipTest('requires uuid_generate_time')
>>>>>>         self.check_node(node)
       
    1:     @unittest.skipUnless(os.name == 'nt', 'requires Windows')
    1:     @unittest.skipUnless(importable('ctypes'), 'requires ctypes')
           def test_windll_getnode(self):
>>>>>>         node = uuid._windll_getnode()
>>>>>>         self.check_node(node)
       
       
    1: def test_main():
    1:     test_support.run_unittest(TestUUID, TestInternals)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
