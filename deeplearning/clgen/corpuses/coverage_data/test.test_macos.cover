    1: import unittest
    1: from test import test_support
    1: import os
    1: import subprocess
       
    1: MacOS = test_support.import_module('MacOS')
       
    1: TESTFN2 = test_support.TESTFN + '2'
       
    2: class TestMacOS(unittest.TestCase):
    1:     @unittest.skipUnless(os.path.exists('/Developer/Tools/SetFile'),
    1:                          '/Developer/Tools/SetFile does not exist')
           def testGetCreatorAndType(self):
>>>>>>         try:
>>>>>>             fp = open(test_support.TESTFN, 'w')
>>>>>>             fp.write('\n')
>>>>>>             fp.close()
       
>>>>>>             subprocess.call(
>>>>>>                     ['/Developer/Tools/SetFile', '-t', 'ABCD', '-c', 'EFGH',
>>>>>>                         test_support.TESTFN])
       
>>>>>>             cr, tp = MacOS.GetCreatorAndType(test_support.TESTFN)
>>>>>>             self.assertEqual(tp, 'ABCD')
>>>>>>             self.assertEqual(cr, 'EFGH')
       
               finally:
>>>>>>             os.unlink(test_support.TESTFN)
       
    1:     @unittest.skipUnless(os.path.exists('/Developer/Tools/GetFileInfo'),
    1:                          '/Developer/Tools/GetFileInfo does not exist')
           def testSetCreatorAndType(self):
>>>>>>         try:
>>>>>>             fp = open(test_support.TESTFN, 'w')
>>>>>>             fp.write('\n')
>>>>>>             fp.close()
       
>>>>>>             MacOS.SetCreatorAndType(test_support.TESTFN,
>>>>>>                     'ABCD', 'EFGH')
       
>>>>>>             cr, tp = MacOS.GetCreatorAndType(test_support.TESTFN)
>>>>>>             self.assertEqual(cr, 'ABCD')
>>>>>>             self.assertEqual(tp, 'EFGH')
       
>>>>>>             data = subprocess.Popen(["/Developer/Tools/GetFileInfo", test_support.TESTFN],
>>>>>>                     stdout=subprocess.PIPE).communicate()[0]
       
>>>>>>             tp = None
>>>>>>             cr = None
>>>>>>             for  ln in data.splitlines():
>>>>>>                 if ln.startswith('type:'):
>>>>>>                     tp = ln.split()[-1][1:-1]
>>>>>>                 if ln.startswith('creator:'):
>>>>>>                     cr = ln.split()[-1][1:-1]
       
>>>>>>             self.assertEqual(cr, 'ABCD')
>>>>>>             self.assertEqual(tp, 'EFGH')
       
               finally:
>>>>>>             os.unlink(test_support.TESTFN)
       
       
    1:     def testOpenRF(self):
    1:         try:
    1:             fp = open(test_support.TESTFN, 'w')
    1:             fp.write('hello world\n')
    1:             fp.close()
       
    1:             rfp = MacOS.openrf(test_support.TESTFN, '*wb')
    1:             rfp.write('goodbye world\n')
    1:             rfp.close()
       
       
    1:             fp = open(test_support.TESTFN, 'r')
    1:             data = fp.read()
    1:             fp.close()
    1:             self.assertEqual(data, 'hello world\n')
       
    1:             rfp = MacOS.openrf(test_support.TESTFN, '*rb')
    1:             data = rfp.read(100)
    1:             data2 = rfp.read(100)
    1:             rfp.close()
    1:             self.assertEqual(data, 'goodbye world\n')
    1:             self.assertEqual(data2, '')
       
       
               finally:
    1:             os.unlink(test_support.TESTFN)
       
    1: def test_main():
    1:     test_support.run_unittest(TestMacOS)
       
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
