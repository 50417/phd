       """\
       A library of useful helper classes to the SAX classes, for the
       convenience of application and driver writers.
    2: """
       
    2: import os, urlparse, urllib, types
    2: import io
    2: import sys
    2: import handler
    2: import xmlreader
       
    2: try:
    2:     _StringTypes = [types.StringType, types.UnicodeType]
>>>>>> except AttributeError:
>>>>>>     _StringTypes = [types.StringType]
       
    2: def __dict_replace(s, d):
           """Replace substrings of a string using a dictionary."""
  542:     for key, value in d.items():
  405:         s = s.replace(key, value)
  137:     return s
       
    2: def escape(data, entities={}):
           """Escape &, <, and > in a string of data.
       
           You can escape other strings of data by passing a dictionary as
           the optional entities parameter.  The keys and values must all be
           strings; each key will be replaced with its corresponding value.
           """
       
           # must do ampersand first
 2008:     data = data.replace("&", "&amp;")
 2008:     data = data.replace(">", "&gt;")
 2008:     data = data.replace("<", "&lt;")
 2008:     if entities:
  135:         data = __dict_replace(data, entities)
 2008:     return data
       
    2: def unescape(data, entities={}):
           """Unescape &amp;, &lt;, and &gt; in a string of data.
       
           You can unescape other strings of data by passing a dictionary as
           the optional entities parameter.  The keys and values must all be
           strings; each key will be replaced with its corresponding value.
           """
    4:     data = data.replace("&lt;", "<")
    4:     data = data.replace("&gt;", ">")
    4:     if entities:
    2:         data = __dict_replace(data, entities)
           # must do ampersand last
    4:     return data.replace("&amp;", "&")
       
    2: def quoteattr(data, entities={}):
           """Escape and quote an attribute value.
       
           Escape &, <, and > in a string of data, then quote it for use as
           an attribute value.  The \" character will be escaped as well, if
           necessary.
       
           You can escape other strings of data by passing a dictionary as
           the optional entities parameter.  The keys and values must all be
           strings; each key will be replaced with its corresponding value.
           """
  134:     entities = entities.copy()
  134:     entities.update({'\n': '&#10;', '\r': '&#13;', '\t':'&#9;'})
  134:     data = escape(data, entities)
  134:     if '"' in data:
    8:         if "'" in data:
    4:             data = '"%s"' % data.replace('"', "&quot;")
               else:
    4:             data = "'%s'" % data
           else:
  126:         data = '"%s"' % data
  134:     return data
       
       
    2: def _gettextwriter(out, encoding):
  152:     if out is None:
>>>>>>         import sys
>>>>>>         out = sys.stdout
       
  152:     if isinstance(out, io.RawIOBase):
>>>>>>         buffer = io.BufferedIOBase(out)
               # Keep the original file open when the TextIOWrapper is
               # destroyed
>>>>>>         buffer.close = lambda: None
           else:
               # This is to handle passed objects that aren't in the
               # IOBase hierarchy, but just have a write method
  152:         buffer = io.BufferedIOBase()
  304:         buffer.writable = lambda: True
  152:         buffer.write = out.write
  152:         try:
                   # TextIOWrapper uses this methods to determine
                   # if BOM (for UTF-16, etc) should be added
  152:             buffer.seekable = out.seekable
   27:             buffer.tell = out.tell
  125:         except AttributeError:
  125:             pass
           # wrap a binary writer with TextIOWrapper
  152:     return _UnbufferedTextIOWrapper(buffer, encoding=encoding,
  152:                                    errors='xmlcharrefreplace',
  152:                                    newline='\n')
       
       
    4: class _UnbufferedTextIOWrapper(io.TextIOWrapper):
    2:     def write(self, s):
 3652:         super(_UnbufferedTextIOWrapper, self).write(s)
 3652:         self.flush()
       
       
    4: class XMLGenerator(handler.ContentHandler):
       
    2:     def __init__(self, out=None, encoding="iso-8859-1"):
  152:         handler.ContentHandler.__init__(self)
  152:         out = _gettextwriter(out, encoding)
  152:         self._write = out.write
  152:         self._flush = out.flush
  152:         self._ns_contexts = [{}] # contains uri -> prefix dicts
  152:         self._current_context = self._ns_contexts[-1]
  152:         self._undeclared_ns_maps = []
  152:         self._encoding = encoding
       
    2:     def _qname(self, name):
               """Builds a qualified name from a (ns_url, localname) pair"""
   66:         if name[0]:
                   # Per http://www.w3.org/XML/1998/namespace, The 'xml' prefix is
                   # bound by definition to http://www.w3.org/XML/1998/namespace.  It
                   # does not need to be declared and will not usually be found in
                   # self._current_context.
   48:             if 'http://www.w3.org/XML/1998/namespace' == name[0]:
    6:                 return 'xml:' + name[1]
                   # The name is in a non-empty namespace
   42:             prefix = self._current_context[name[0]]
   42:             if prefix:
                       # If it is not the default namespace, prepend the prefix
   36:                 return prefix + ":" + name[1]
               # Return the unqualified name
   24:         return name[1]
       
           # ContentHandler methods
       
    2:     def startDocument(self):
  149:         self._write(u'<?xml version="1.0" encoding="%s"?>\n' %
  149:                         self._encoding)
       
    2:     def endDocument(self):
  140:         self._flush()
       
    2:     def startPrefixMapping(self, prefix, uri):
   15:         self._ns_contexts.append(self._current_context.copy())
   15:         self._current_context[uri] = prefix
   15:         self._undeclared_ns_maps.append((prefix, uri))
       
    2:     def endPrefixMapping(self, prefix):
   15:         self._current_context = self._ns_contexts[-1]
   15:         del self._ns_contexts[-1]
       
    2:     def startElement(self, name, attrs):
  462:         self._write(u'<' + name)
  580:         for (name, value) in attrs.items():
  118:             self._write(u' %s=%s' % (name, quoteattr(value)))
  462:         self._write(u'>')
       
    2:     def endElement(self, name):
  458:         self._write(u'</%s>' % name)
       
    2:     def startElementNS(self, name, qname, attrs):
   27:         self._write(u'<' + self._qname(name))
       
   42:         for prefix, uri in self._undeclared_ns_maps:
   15:             if prefix:
   12:                 self._write(u' xmlns:%s="%s"' % (prefix, uri))
                   else:
    3:                 self._write(u' xmlns="%s"' % uri)
   27:         self._undeclared_ns_maps = []
       
   39:         for (name, value) in attrs.items():
   12:             self._write(u' %s=%s' % (self._qname(name), quoteattr(value)))
   27:         self._write(u'>')
       
    2:     def endElementNS(self, name, qname):
   27:         self._write(u'</%s>' % self._qname(name))
       
    2:     def characters(self, content):
 1871:         if not isinstance(content, unicode):
   30:             content = unicode(content, self._encoding)
 1871:         self._write(escape(content))
       
    2:     def ignorableWhitespace(self, content):
   21:         if not isinstance(content, unicode):
   21:             content = unicode(content, self._encoding)
   21:         self._write(content)
       
    2:     def processingInstruction(self, target, data):
    3:         self._write(u'<?%s %s?>' % (target, data))
       
       
    4: class XMLFilterBase(xmlreader.XMLReader):
           """This class is designed to sit between an XMLReader and the
           client application's event handlers.  By default, it does nothing
           but pass requests up to the reader and events on to the handlers
           unmodified, but subclasses can override specific methods to modify
           the event stream or the configuration requests as they pass
    2:     through."""
       
    2:     def __init__(self, parent = None):
>>>>>>         xmlreader.XMLReader.__init__(self)
>>>>>>         self._parent = parent
       
           # ErrorHandler methods
       
    2:     def error(self, exception):
>>>>>>         self._err_handler.error(exception)
       
    2:     def fatalError(self, exception):
>>>>>>         self._err_handler.fatalError(exception)
       
    2:     def warning(self, exception):
>>>>>>         self._err_handler.warning(exception)
       
           # ContentHandler methods
       
    2:     def setDocumentLocator(self, locator):
>>>>>>         self._cont_handler.setDocumentLocator(locator)
       
    2:     def startDocument(self):
>>>>>>         self._cont_handler.startDocument()
       
    2:     def endDocument(self):
>>>>>>         self._cont_handler.endDocument()
       
    2:     def startPrefixMapping(self, prefix, uri):
>>>>>>         self._cont_handler.startPrefixMapping(prefix, uri)
       
    2:     def endPrefixMapping(self, prefix):
>>>>>>         self._cont_handler.endPrefixMapping(prefix)
       
    2:     def startElement(self, name, attrs):
>>>>>>         self._cont_handler.startElement(name, attrs)
       
    2:     def endElement(self, name):
>>>>>>         self._cont_handler.endElement(name)
       
    2:     def startElementNS(self, name, qname, attrs):
>>>>>>         self._cont_handler.startElementNS(name, qname, attrs)
       
    2:     def endElementNS(self, name, qname):
>>>>>>         self._cont_handler.endElementNS(name, qname)
       
    2:     def characters(self, content):
>>>>>>         self._cont_handler.characters(content)
       
    2:     def ignorableWhitespace(self, chars):
>>>>>>         self._cont_handler.ignorableWhitespace(chars)
       
    2:     def processingInstruction(self, target, data):
>>>>>>         self._cont_handler.processingInstruction(target, data)
       
    2:     def skippedEntity(self, name):
>>>>>>         self._cont_handler.skippedEntity(name)
       
           # DTDHandler methods
       
    2:     def notationDecl(self, name, publicId, systemId):
>>>>>>         self._dtd_handler.notationDecl(name, publicId, systemId)
       
    2:     def unparsedEntityDecl(self, name, publicId, systemId, ndata):
>>>>>>         self._dtd_handler.unparsedEntityDecl(name, publicId, systemId, ndata)
       
           # EntityResolver methods
       
    2:     def resolveEntity(self, publicId, systemId):
>>>>>>         return self._ent_handler.resolveEntity(publicId, systemId)
       
           # XMLReader methods
       
    2:     def parse(self, source):
>>>>>>         self._parent.setContentHandler(self)
>>>>>>         self._parent.setErrorHandler(self)
>>>>>>         self._parent.setEntityResolver(self)
>>>>>>         self._parent.setDTDHandler(self)
>>>>>>         self._parent.parse(source)
       
    2:     def setLocale(self, locale):
>>>>>>         self._parent.setLocale(locale)
       
    2:     def getFeature(self, name):
>>>>>>         return self._parent.getFeature(name)
       
    2:     def setFeature(self, name, state):
>>>>>>         self._parent.setFeature(name, state)
       
    2:     def getProperty(self, name):
>>>>>>         return self._parent.getProperty(name)
       
    2:     def setProperty(self, name, value):
>>>>>>         self._parent.setProperty(name, value)
       
           # XMLFilter methods
       
    2:     def getParent(self):
>>>>>>         return self._parent
       
    2:     def setParent(self, parent):
>>>>>>         self._parent = parent
       
       # --- Utility functions
       
    2: def prepare_input_source(source, base = ""):
           """This function takes an InputSource and an optional base URL and
           returns a fully resolved InputSource object ready for reading."""
       
  150:     if type(source) in _StringTypes:
   19:         source = xmlreader.InputSource(source)
  131:     elif hasattr(source, "read"):
   36:         f = source
   36:         source = xmlreader.InputSource()
   36:         source.setByteStream(f)
   36:         if hasattr(f, "name"):
   16:             source.setSystemId(f.name)
       
  150:     if source.getByteStream() is None:
   22:         try:
   22:             sysid = source.getSystemId()
   22:             basehead = os.path.dirname(os.path.normpath(base))
   22:             encoding = sys.getfilesystemencoding()
   22:             if isinstance(sysid, unicode):
    2:                 if not isinstance(basehead, unicode):
    2:                     try:
    2:                         basehead = basehead.decode(encoding)
>>>>>>                     except UnicodeDecodeError:
>>>>>>                         sysid = sysid.encode(encoding)
                   else:
   20:                 if isinstance(basehead, unicode):
>>>>>>                     try:
>>>>>>                         sysid = sysid.decode(encoding)
>>>>>>                     except UnicodeDecodeError:
>>>>>>                         basehead = basehead.encode(encoding)
   22:             sysidfilename = os.path.join(basehead, sysid)
   22:             isfile = os.path.isfile(sysidfilename)
>>>>>>         except UnicodeError:
>>>>>>             isfile = False
   22:         if isfile:
   22:             source.setSystemId(sysidfilename)
   22:             f = open(sysidfilename, "rb")
               else:
>>>>>>             source.setSystemId(urlparse.urljoin(base, source.getSystemId()))
>>>>>>             f = urllib.urlopen(source.getSystemId())
       
   22:         source.setByteStream(f)
       
  150:     return source
