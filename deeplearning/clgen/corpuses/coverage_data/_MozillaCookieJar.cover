    1: """Mozilla / Netscape cookie loading / saving."""
       
    1: import re, time
       
    1: from cookielib import (_warn_unhandled_exception, FileCookieJar, LoadError,
                              Cookie, MISSING_FILENAME_TEXT)
       
    2: class MozillaCookieJar(FileCookieJar):
           """
       
           WARNING: you may want to backup your browser's cookies file if you use
           this class to save cookies.  I *think* it works, but there have been
           bugs in the past!
       
           This class differs from CookieJar only in the format it uses to save and
           load cookies to and from a file.  This class uses the Mozilla/Netscape
           `cookies.txt' format.  lynx uses this file format, too.
       
           Don't expect cookies saved while the browser is running to be noticed by
           the browser (in fact, Mozilla on unix will overwrite your saved cookies if
           you change them on disk while it's running; on Windows, you probably can't
           save at all while the browser is running).
       
           Note that the Mozilla/Netscape format will downgrade RFC2965 cookies to
           Netscape cookies on saving.
       
           In particular, the cookie version and port number information is lost,
           together with information about whether or not Path, Port and Discard were
           specified by the Set-Cookie2 (or Set-Cookie) header, and whether or not the
           domain as set in the HTTP header started with a dot (yes, I'm aware some
           domains in Netscape files start with a dot and some don't -- trust me, you
           really don't want to know any more about this).
       
           Note that though Mozilla and Netscape use the same format, they use
           slightly different headers.  The class saves cookies using the Netscape
           header by default (Mozilla can cope with that).
       
    1:     """
    1:     magic_re = "#( Netscape)? HTTP Cookie File"
           header = """\
       # Netscape HTTP Cookie File
       # http://curl.haxx.se/rfc/cookie_spec.html
       # This is a generated file!  Do not edit.
       
    1: """
       
    1:     def _really_load(self, f, filename, ignore_discard, ignore_expires):
    4:         now = time.time()
       
    4:         magic = f.readline()
    4:         if not re.search(self.magic_re, magic):
    1:             f.close()
    1:             raise LoadError(
    1:                 "%r does not look like a Netscape format cookies file" %
    1:                 filename)
       
    3:         try:
    3:             while 1:
   24:                 line = f.readline()
   24:                 if line == "": break
       
                       # last field may be absent, so keep any trailing tab
   21:                 if line.endswith("\n"): line = line[:-1]
       
                       # skip comments and blank lines XXX what is $ for?
   21:                 if (line.strip().startswith(("#", "$")) or
   15:                     line.strip() == ""):
    3:                     continue
       
                       domain, domain_specified, path, secure, expires, name, value = \
   12:                         line.split("\t")
   12:                 secure = (secure == "TRUE")
   12:                 domain_specified = (domain_specified == "TRUE")
   12:                 if name == "":
                           # cookies.txt regards 'Set-Cookie: foo' as a cookie
                           # with no name, whereas cookielib regards it as a
                           # cookie with no value.
    2:                     name = value
    2:                     value = None
       
   12:                 initial_dot = domain.startswith(".")
   12:                 assert domain_specified == initial_dot
       
   12:                 discard = False
   12:                 if expires == "":
    3:                     expires = None
    3:                     discard = True
       
                       # assume path_specified is false
   12:                 c = Cookie(0, name, value,
   12:                            None, False,
   12:                            domain, domain_specified, initial_dot,
   12:                            path, False,
   12:                            secure,
   12:                            expires,
   12:                            discard,
   12:                            None,
   12:                            None,
   12:                            {})
   12:                 if not ignore_discard and c.discard:
>>>>>>                     continue
   12:                 if not ignore_expires and c.is_expired(now):
>>>>>>                     continue
   12:                 self.set_cookie(c)
       
>>>>>>         except IOError:
>>>>>>             raise
>>>>>>         except Exception:
>>>>>>             _warn_unhandled_exception()
>>>>>>             raise LoadError("invalid Netscape format cookies file %r: %r" %
>>>>>>                             (filename, line))
       
    1:     def save(self, filename=None, ignore_discard=False, ignore_expires=False):
    3:         if filename is None:
    3:             if self.filename is not None: filename = self.filename
>>>>>>             else: raise ValueError(MISSING_FILENAME_TEXT)
       
    3:         f = open(filename, "w")
    3:         try:
    3:             f.write(self.header)
    3:             now = time.time()
   17:             for cookie in self:
   14:                 if not ignore_discard and cookie.discard:
    2:                     continue
   12:                 if not ignore_expires and cookie.is_expired(now):
>>>>>>                     continue
   12:                 if cookie.secure: secure = "TRUE"
   11:                 else: secure = "FALSE"
   12:                 if cookie.domain.startswith("."): initial_dot = "TRUE"
    8:                 else: initial_dot = "FALSE"
   12:                 if cookie.expires is not None:
    9:                     expires = str(cookie.expires)
                       else:
    3:                     expires = ""
   12:                 if cookie.value is None:
                           # cookies.txt regards 'Set-Cookie: foo' as a cookie
                           # with no name, whereas cookielib regards it as a
                           # cookie with no value.
    2:                     name = ""
    2:                     value = cookie.name
                       else:
   10:                     name = cookie.name
   10:                     value = cookie.value
   12:                 f.write(
   12:                     "\t".join([cookie.domain, initial_dot, cookie.path,
   12:                                secure, expires, name, value])+
   12:                     "\n")
               finally:
    3:             f.close()
