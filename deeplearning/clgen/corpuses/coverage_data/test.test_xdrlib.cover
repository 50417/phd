    1: from test import test_support
    1: import unittest
       
    1: import xdrlib
       
    2: class XDRTest(unittest.TestCase):
       
    1:     def test_xdr(self):
    1:         p = xdrlib.Packer()
       
    1:         s = 'hello world'
    1:         a = ['what', 'is', 'hapnin', 'doctor']
       
    1:         p.pack_int(42)
    1:         p.pack_int(-17)
    1:         p.pack_uint(9)
    1:         p.pack_bool(True)
    1:         p.pack_bool(False)
    1:         p.pack_uhyper(45L)
    1:         p.pack_float(1.9)
    1:         p.pack_double(1.9)
    1:         p.pack_string(s)
    1:         p.pack_list(range(5), p.pack_uint)
    1:         p.pack_array(a, p.pack_string)
       
               # now verify
    1:         data = p.get_buffer()
    1:         up = xdrlib.Unpacker(data)
       
    1:         self.assertEqual(up.get_position(), 0)
       
    1:         self.assertEqual(up.unpack_int(), 42)
    1:         self.assertEqual(up.unpack_int(), -17)
    1:         self.assertEqual(up.unpack_uint(), 9)
    1:         self.assertTrue(up.unpack_bool() is True)
       
               # remember position
    1:         pos = up.get_position()
    1:         self.assertTrue(up.unpack_bool() is False)
       
               # rewind and unpack again
    1:         up.set_position(pos)
    1:         self.assertTrue(up.unpack_bool() is False)
       
    1:         self.assertEqual(up.unpack_uhyper(), 45L)
    1:         self.assertAlmostEqual(up.unpack_float(), 1.9)
    1:         self.assertAlmostEqual(up.unpack_double(), 1.9)
    1:         self.assertEqual(up.unpack_string(), s)
    1:         self.assertEqual(up.unpack_list(up.unpack_uint), range(5))
    1:         self.assertEqual(up.unpack_array(up.unpack_string), a)
    1:         up.done()
    1:         self.assertRaises(EOFError, up.unpack_uint)
       
    2: class ConversionErrorTest(unittest.TestCase):
       
    1:     def setUp(self):
    5:         self.packer = xdrlib.Packer()
       
    1:     def assertRaisesConversion(self, *args):
    5:         self.assertRaises(xdrlib.ConversionError, *args)
       
    1:     def test_pack_int(self):
    1:         self.assertRaisesConversion(self.packer.pack_int, 'string')
       
    1:     def test_pack_uint(self):
    1:         self.assertRaisesConversion(self.packer.pack_uint, 'string')
       
    1:     def test_float(self):
    1:         self.assertRaisesConversion(self.packer.pack_float, 'string')
       
    1:     def test_double(self):
    1:         self.assertRaisesConversion(self.packer.pack_double, 'string')
       
    1:     def test_uhyper(self):
    1:         self.assertRaisesConversion(self.packer.pack_uhyper, 'string')
       
    1: def test_main():
    1:     test_support.run_unittest(XDRTest)
    1:     test_support.run_unittest(ConversionErrorTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
