       """
       A testcase which accesses *values* in a dll.
    1: """
       
    1: import unittest
    1: import sys
    1: from ctypes import *
       
    1: import _ctypes_test
       
    2: class ValuesTestCase(unittest.TestCase):
       
    1:     def test_an_integer(self):
    1:         ctdll = CDLL(_ctypes_test.__file__)
    1:         an_integer = c_int.in_dll(ctdll, "an_integer")
    1:         x = an_integer.value
    1:         self.assertEqual(x, ctdll.get_an_integer())
    1:         an_integer.value *= 2
    1:         self.assertEqual(x*2, ctdll.get_an_integer())
       
    1:     def test_undefined(self):
    1:         ctdll = CDLL(_ctypes_test.__file__)
    1:         self.assertRaises(ValueError, c_int.in_dll, ctdll, "Undefined_Symbol")
       
    2: class PythonValuesTestCase(unittest.TestCase):
    1:     """This test only works when python itself is a dll/shared library"""
       
    1:     def test_optimizeflag(self):
               # This test accesses the Py_OptimizeFlag intger, which is
               # exported by the Python dll.
       
               # It's value is set depending on the -O and -OO flags:
               # if not given, it is 0 and __debug__ is 1.
               # If -O is given, the flag is 1, for -OO it is 2.
               # docstrings are also removed in the latter case.
    1:         opt = c_int.in_dll(pythonapi, "Py_OptimizeFlag").value
               if __debug__:
    1:             self.assertEqual(opt, 0)
               elif ValuesTestCase.__doc__ is not None:
                   self.assertEqual(opt, 1)
               else:
                   self.assertEqual(opt, 2)
       
    1:     def test_frozentable(self):
               # Python exports a PyImport_FrozenModules symbol. This is a
               # pointer to an array of struct _frozen entries.  The end of the
               # array is marked by an entry containing a NULL name and zero
               # size.
       
               # In standard Python, this table contains a __hello__
               # module, and a __phello__ package containing a spam
               # module.
    2:         class struct_frozen(Structure):
    1:             _fields_ = [("name", c_char_p),
    1:                         ("code", POINTER(c_ubyte)),
    1:                         ("size", c_int)]
    1:         FrozenTable = POINTER(struct_frozen)
       
    1:         ft = FrozenTable.in_dll(pythonapi, "PyImport_FrozenModules")
               # ft is a pointer to the struct_frozen entries:
    1:         items = []
    4:         for entry in ft:
                   # This is dangerous. We *can* iterate over a pointer, but
                   # the loop will not terminate (maybe with an access
                   # violation;-) because the pointer instance has no size.
    4:             if entry.name is None:
    1:                 break
    3:             items.append((entry.name, entry.size))
       
    1:         expected = [("__hello__", 104),
    1:                     ("__phello__", -104),
    1:                     ("__phello__.spam", 104)]
    1:         self.assertEqual(items, expected)
       
    1:         from ctypes import _pointer_type_cache
    1:         del _pointer_type_cache[struct_frozen]
       
    1:     def test_undefined(self):
    1:         self.assertRaises(ValueError, c_int.in_dll, pythonapi,
    1:                           "Undefined_Symbol")
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
