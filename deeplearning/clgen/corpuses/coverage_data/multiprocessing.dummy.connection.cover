       #
       # Analogue of `multiprocessing.connection` which uses queues instead of sockets
       #
       # multiprocessing/dummy/connection.py
       #
       # Copyright (c) 2006-2008, R Oudkerk
       # All rights reserved.
       #
       # Redistribution and use in source and binary forms, with or without
       # modification, are permitted provided that the following conditions
       # are met:
       #
       # 1. Redistributions of source code must retain the above copyright
       #    notice, this list of conditions and the following disclaimer.
       # 2. Redistributions in binary form must reproduce the above copyright
       #    notice, this list of conditions and the following disclaimer in the
       #    documentation and/or other materials provided with the distribution.
       # 3. Neither the name of author nor the names of any contributors may be
       #    used to endorse or promote products derived from this software
       #    without specific prior written permission.
       #
       # THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
       # ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
       # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
       # ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
       # FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
       # DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
       # OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
       # HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
       # LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
       # OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
       # SUCH DAMAGE.
       #
       
    1: __all__ = [ 'Client', 'Listener', 'Pipe' ]
       
    1: from Queue import Queue
       
       
    1: families = [None]
       
       
    2: class Listener(object):
       
    1:     def __init__(self, address=None, family=None, backlog=1):
    2:         self._backlog_queue = Queue(backlog)
       
    1:     def accept(self):
    2:         return Connection(*self._backlog_queue.get())
       
    1:     def close(self):
    2:         self._backlog_queue = None
       
    3:     address = property(lambda self: self._backlog_queue)
       
       
    1: def Client(address):
    2:     _in, _out = Queue(), Queue()
    2:     address.put((_out, _in))
    2:     return Connection(_in, _out)
       
       
    1: def Pipe(duplex=True):
    4:     a, b = Queue(), Queue()
    4:     return Connection(a, b), Connection(b, a)
       
       
    2: class Connection(object):
       
    1:     def __init__(self, _in, _out):
   12:         self._out = _out
   12:         self._in = _in
   12:         self.send = self.send_bytes = _out.put
   12:         self.recv = self.recv_bytes = _in.get
       
    1:     def poll(self, timeout=0.0):
   11:         if self._in.qsize() > 0:
    8:             return True
    3:         if timeout <= 0.0:
    2:             return False
    1:         self._in.not_empty.acquire()
    1:         self._in.not_empty.wait(timeout)
    1:         self._in.not_empty.release()
    1:         return self._in.qsize() > 0
       
    1:     def close(self):
    8:         pass
