       """distutils.command.bdist
       
       Implements the Distutils 'bdist' command (create a built [binary]
    1: distribution)."""
       
    1: __revision__ = "$Id$"
       
    1: import os
       
    1: from distutils.util import get_platform
    1: from distutils.core import Command
    1: from distutils.errors import DistutilsPlatformError, DistutilsOptionError
       
       
    1: def show_formats():
           """Print list of available formats (arguments to "--format" option).
           """
>>>>>>     from distutils.fancy_getopt import FancyGetopt
>>>>>>     formats = []
>>>>>>     for format in bdist.format_commands:
>>>>>>         formats.append(("formats=" + format, None,
>>>>>>                         bdist.format_command[format][1]))
>>>>>>     pretty_printer = FancyGetopt(formats)
>>>>>>     pretty_printer.print_help("List of available distribution formats:")
       
       
    2: class bdist(Command):
       
    1:     description = "create a built (binary) distribution"
       
           user_options = [('bdist-base=', 'b',
    1:                      "temporary directory for creating built distributions"),
    1:                     ('plat-name=', 'p',
    1:                      "platform name to embed in generated filenames "
    1:                      "(default: %s)" % get_platform()),
                           ('formats=', None,
    1:                      "formats for distribution (comma-separated list)"),
                           ('dist-dir=', 'd',
    1:                      "directory to put final built distributions in "
                            "[default: dist]"),
                           ('skip-build', None,
    1:                      "skip rebuilding everything (for testing/debugging)"),
                           ('owner=', 'u',
    1:                      "Owner name used when creating a tar file"
                            " [default: current user]"),
                           ('group=', 'g',
    1:                      "Group name used when creating a tar file"
                            " [default: current group]"),
                          ]
       
    1:     boolean_options = ['skip-build']
       
           help_options = [
    1:         ('help-formats', None,
    1:          "lists available distribution formats", show_formats),
               ]
       
           # The following commands do not take a format option from bdist
    1:     no_format_option = ('bdist_rpm',)
       
           # This won't do in reality: will need to distinguish RPM-ish Linux,
           # Debian-ish Linux, Solaris, FreeBSD, ..., Windows, Mac OS.
    1:     default_format = {'posix': 'gztar',
    1:                       'nt': 'zip',
    1:                       'os2': 'zip'}
       
           # Establish the preferred order (for the --help-formats option).
    1:     format_commands = ['rpm', 'gztar', 'bztar', 'ztar', 'tar',
    1:                        'wininst', 'zip', 'msi']
       
           # And the real information.
    1:     format_command = {'rpm':   ('bdist_rpm',  "RPM distribution"),
    1:                       'gztar': ('bdist_dumb', "gzip'ed tar file"),
    1:                       'bztar': ('bdist_dumb', "bzip2'ed tar file"),
    1:                       'ztar':  ('bdist_dumb', "compressed tar file"),
    1:                       'tar':   ('bdist_dumb', "tar file"),
                             'wininst': ('bdist_wininst',
    1:                                   "Windows executable installer"),
    1:                       'zip':   ('bdist_dumb', "ZIP file"),
    1:                       'msi':   ('bdist_msi',  "Microsoft Installer")
                             }
       
       
    1:     def initialize_options(self):
    6:         self.bdist_base = None
    6:         self.plat_name = None
    6:         self.formats = None
    6:         self.dist_dir = None
    6:         self.skip_build = 0
    6:         self.group = None
    6:         self.owner = None
       
    1:     def finalize_options(self):
               # have to finalize 'plat_name' before 'bdist_base'
    6:         if self.plat_name is None:
    6:             if self.skip_build:
    1:                 self.plat_name = get_platform()
                   else:
    5:                 self.plat_name = self.get_finalized_command('build').plat_name
       
               # 'bdist_base' -- parent of per-built-distribution-format
               # temporary directories (eg. we'll probably have
               # "build/bdist.<plat>/dumb", "build/bdist.<plat>/rpm", etc.)
    6:         if self.bdist_base is None:
    6:             build_base = self.get_finalized_command('build').build_base
    6:             self.bdist_base = os.path.join(build_base,
    6:                                            'bdist.' + self.plat_name)
       
    6:         self.ensure_string_list('formats')
    6:         if self.formats is None:
    5:             try:
    5:                 self.formats = [self.default_format[os.name]]
>>>>>>             except KeyError:
>>>>>>                 raise DistutilsPlatformError, \
>>>>>>                       "don't know how to create built distributions " + \
>>>>>>                       "on platform %s" % os.name
       
    6:         if self.dist_dir is None:
    6:             self.dist_dir = "dist"
       
    1:     def run(self):
               # Figure out which sub-commands we need to run.
>>>>>>         commands = []
>>>>>>         for format in self.formats:
>>>>>>             try:
>>>>>>                 commands.append(self.format_command[format][0])
>>>>>>             except KeyError:
>>>>>>                 raise DistutilsOptionError, "invalid format '%s'" % format
       
               # Reinitialize and run each command.
>>>>>>         for i in range(len(self.formats)):
>>>>>>             cmd_name = commands[i]
>>>>>>             sub_cmd = self.reinitialize_command(cmd_name)
>>>>>>             if cmd_name not in self.no_format_option:
>>>>>>                 sub_cmd.format = self.formats[i]
       
                   # passing the owner and group names for tar archiving
>>>>>>             if cmd_name == 'bdist_dumb':
>>>>>>                 sub_cmd.owner = self.owner
>>>>>>                 sub_cmd.group = self.group
       
                   # If we're going to need to run this command again, tell it to
                   # keep its temporary files around so subsequent runs go faster.
>>>>>>             if cmd_name in commands[i+1:]:
>>>>>>                 sub_cmd.keep_temp = 1
>>>>>>             self.run_command(cmd_name)
