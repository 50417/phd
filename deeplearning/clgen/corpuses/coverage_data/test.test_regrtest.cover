       """
       Tests of regrtest.py.
       
       Note: test_regrtest cannot be run twice in parallel.
    1: """
    1: from __future__ import print_function
       
    1: import collections
    1: import errno
    1: import os.path
    1: import platform
    1: import re
    1: import subprocess
    1: import sys
    1: import sysconfig
    1: import tempfile
    1: import textwrap
    1: import unittest
    1: from test import support
       
       
    1: Py_DEBUG = hasattr(sys, 'getobjects')
    1: ROOT_DIR = os.path.join(os.path.dirname(__file__), '..', '..')
    1: ROOT_DIR = os.path.abspath(os.path.normpath(ROOT_DIR))
       
    1: TEST_INTERRUPTED = textwrap.dedent("""
           from signal import SIGINT
           try:
               from _testcapi import raise_signal
               raise_signal(SIGINT)
           except ImportError:
               import os
               os.kill(os.getpid(), SIGINT)
    1:     """)
       
       
    1: SubprocessRun = collections.namedtuple('SubprocessRun',
    1:                                        'returncode stdout stderr')
       
       
    2: class BaseTestCase(unittest.TestCase):
    1:     TEST_UNIQUE_ID = 1
    1:     TESTNAME_PREFIX = 'test_regrtest_'
    1:     TESTNAME_REGEX = r'test_[a-zA-Z0-9_]+'
       
    1:     def setUp(self):
   20:         self.testdir = os.path.realpath(os.path.dirname(__file__))
       
   20:         self.tmptestdir = tempfile.mkdtemp()
   20:         self.addCleanup(support.rmtree, self.tmptestdir)
       
    1:     def create_test(self, name=None, code=''):
   51:         if not name:
   40:             name = 'noop%s' % BaseTestCase.TEST_UNIQUE_ID
   40:             BaseTestCase.TEST_UNIQUE_ID += 1
       
               # test_regrtest cannot be run twice in parallel because
               # of setUp() and create_test()
   51:         name = self.TESTNAME_PREFIX + name
   51:         path = os.path.join(self.tmptestdir, name + '.py')
       
   51:         self.addCleanup(support.unlink, path)
               # Use O_EXCL to ensure that we do not override existing tests
   51:         try:
   51:             fd = os.open(path, os.O_WRONLY | os.O_CREAT | os.O_EXCL)
>>>>>>         except OSError as exc:
>>>>>>             if (exc.errno in (errno.EACCES, errno.EPERM)
>>>>>>                and not sysconfig.is_python_build()):
>>>>>>                 self.skipTest("cannot write %s: %s" % (path, exc))
                   else:
>>>>>>                 raise
               else:
   51:             with os.fdopen(fd, 'w') as fp:
   51:                 fp.write(code)
   51:         return name
       
    1:     def regex_search(self, regex, output):
   10:         match = re.search(regex, output, re.MULTILINE)
   10:         if not match:
>>>>>>             self.fail("%r not found in %r" % (regex, output))
   10:         return match
       
    1:     def check_line(self, output, regex):
   51:         regex = re.compile(r'^' + regex, re.MULTILINE)
   51:         self.assertRegexpMatches(output, regex)
       
    1:     def parse_executed_tests(self, output):
   20:         regex = (r'^[0-9]+:[0-9]+:[0-9]+ (?:load avg: [0-9]+\.[0-9]{2} )?\[ *[0-9]+(?:/ *[0-9]+)*\] (%s)'
   20:                  % self.TESTNAME_REGEX)
   20:         parser = re.finditer(regex, output, re.MULTILINE)
   91:         return list(match.group(1) for match in parser)
       
    1:     def check_executed_tests(self, output, tests, skipped=(), failed=(),
    1:                              env_changed=(), omitted=(),
    1:                              randomize=False, interrupted=False,
    1:                              fail_env_changed=False):
   20:         if isinstance(tests, str):
    3:             tests = [tests]
   20:         if isinstance(skipped, str):
    1:             skipped = [skipped]
   20:         if isinstance(failed, str):
    3:             failed = [failed]
   20:         if isinstance(env_changed, str):
    2:             env_changed = [env_changed]
   20:         if isinstance(omitted, str):
    3:             omitted = [omitted]
       
   20:         executed = self.parse_executed_tests(output)
   20:         if randomize:
    7:             self.assertEqual(set(executed), set(tests), output)
               else:
   13:             self.assertEqual(executed, tests, (executed, tests, output))
       
   20:         def plural(count):
   24:             return 's' if count != 1 else ''
       
   20:         def list_regex(line_format, tests):
   10:             count = len(tests)
   10:             names = ' '.join(sorted(tests))
   10:             regex = line_format % (count, plural(count))
   10:             regex = r'%s:\n    %s$' % (regex, names)
   10:             return regex
       
   20:         if skipped:
    2:             regex = list_regex('%s test%s skipped', skipped)
    2:             self.check_line(output, regex)
       
   20:         if failed:
    3:             regex = list_regex('%s test%s failed', failed)
    3:             self.check_line(output, regex)
       
   20:         if env_changed:
    2:             regex = list_regex('%s test%s altered the execution environment',
    2:                                env_changed)
    2:             self.check_line(output, regex)
       
   20:         if omitted:
    3:             regex = list_regex('%s test%s omitted', omitted)
    3:             self.check_line(output, regex)
       
               good = (len(tests) - len(skipped) - len(failed)
   20:                 - len(omitted) - len(env_changed))
   20:         if good:
   14:             regex = r'%s test%s OK\.$' % (good, plural(good))
   14:             if not skipped and not failed and good > 1:
    9:                 regex = 'All %s' % regex
   14:             self.check_line(output, regex)
       
   20:         if interrupted:
    3:             self.check_line(output, 'Test suite interrupted by signal SIGINT.')
       
   20:         if failed:
    3:             result = 'FAILURE'
   17:         elif interrupted:
    3:             result = 'INTERRUPTED'
   14:         elif fail_env_changed and env_changed:
    1:             result = 'ENV CHANGED'
               else:
   13:             result = 'SUCCESS'
   20:         self.check_line(output, 'Tests result: %s' % result)
       
    1:     def parse_random_seed(self, output):
    8:         match = self.regex_search(r'Using random seed ([0-9]+)', output)
    8:         randseed = int(match.group(1))
    8:         self.assertTrue(0 <= randseed <= 10000000, randseed)
    8:         return randseed
       
    1:     def run_command(self, args, input=None, exitcode=0, **kw):
   27:         if not input:
   27:             input = ''
   27:         if 'stderr' not in kw:
   27:             kw['stderr'] = subprocess.PIPE
   27:         proc = subprocess.Popen(args,
   27:                                 universal_newlines=True,
   27:                                 stdout=subprocess.PIPE,
   27:                                 **kw)
   27:         stdout, stderr = proc.communicate(input=input)
   27:         if proc.returncode != exitcode:
>>>>>>             msg = ("Command %s failed with exit code %s\n"
                          "\n"
                          "stdout:\n"
                          "---\n"
                          "%s\n"
                          "---\n"
>>>>>>                    % (str(args), proc.returncode, stdout))
>>>>>>             if proc.stderr:
>>>>>>                 msg += ("\n"
                               "stderr:\n"
                               "---\n"
                               "%s"
                               "---\n"
>>>>>>                         % stderr)
>>>>>>             self.fail(msg)
   27:         return SubprocessRun(proc.returncode, stdout, stderr)
       
    1:     def run_python(self, args, **kw):
   27:         args = [sys.executable] + list(args)
   27:         proc = self.run_command(args, **kw)
   27:         return proc.stdout
       
       
    2: class ProgramsTestCase(BaseTestCase):
           """
           Test various ways to run the Python test suite. Use options close
           to options used on the buildbot.
    1:     """
       
    1:     NTEST = 4
       
    1:     def setUp(self):
    6:         super(ProgramsTestCase, self).setUp()
       
               # Create NTEST tests doing nothing
   30:         self.tests = [self.create_test() for index in range(self.NTEST)]
       
    6:         self.python_args = ['-Wd', '-3', '-E', '-bb', '-tt']
    6:         self.regrtest_args = ['-uall', '-rwW',
    6:                               '--testdir=%s' % self.tmptestdir]
       
    1:     def check_output(self, output):
    6:         self.parse_random_seed(output)
    6:         self.check_executed_tests(output, self.tests, randomize=True)
       
    1:     def run_tests(self, args):
    6:         output = self.run_python(args)
    6:         self.check_output(output)
       
    1:     def test_script_regrtest(self):
               # Lib/test/regrtest.py
    1:         script = os.path.join(self.testdir, 'regrtest.py')
       
    1:         args = self.python_args + [script] + self.regrtest_args + self.tests
    1:         self.run_tests(args)
       
    1:     def test_module_test(self):
               # -m test
    1:         args = self.python_args + ['-m', 'test'] + self.regrtest_args + self.tests
    1:         self.run_tests(args)
       
    1:     def test_module_regrtest(self):
               # -m test.regrtest
    1:         args = self.python_args + ['-m', 'test.regrtest'] + self.regrtest_args + self.tests
    1:         self.run_tests(args)
       
    1:     def test_module_autotest(self):
               # -m test.autotest
    1:         args = self.python_args + ['-m', 'test.autotest'] + self.regrtest_args + self.tests
    1:         self.run_tests(args)
       
    1:     def test_module_from_test_autotest(self):
               # from test import autotest
    1:         code = 'from test import autotest'
    1:         args = self.python_args + ['-c', code] + self.regrtest_args + self.tests
    1:         self.run_tests(args)
       
    1:     def test_script_autotest(self):
               # Lib/test/autotest.py
    1:         script = os.path.join(self.testdir, 'autotest.py')
    1:         args = self.python_args + [script] + self.regrtest_args + self.tests
    1:         self.run_tests(args)
       
    1:     def run_batch(self, *args):
>>>>>>         proc = self.run_command(args)
>>>>>>         self.check_output(proc.stdout)
       
    1:     def need_pcbuild(self):
>>>>>>         exe = os.path.normpath(os.path.abspath(sys.executable))
>>>>>>         parts = exe.split(os.path.sep)
>>>>>>         if len(parts) < 3:
                   # it's not a python build, python is likely to be installed
>>>>>>             return
       
>>>>>>         build_dir = parts[-3]
>>>>>>         if build_dir.lower() != 'pcbuild':
>>>>>>             self.skipTest("Tools/buildbot/test.bat requires PCbuild build, "
>>>>>>                           "found %s" % build_dir)
       
    1:     @unittest.skipUnless(sysconfig.is_python_build(),
    1:                          'test.bat script is not installed')
    1:     @unittest.skipUnless(sys.platform == 'win32', 'Windows only')
           def test_tools_buildbot_test(self):
>>>>>>         self.need_pcbuild()
       
               # Tools\buildbot\test.bat
>>>>>>         script = os.path.join(ROOT_DIR, 'Tools', 'buildbot', 'test.bat')
>>>>>>         test_args = ['--testdir=%s' % self.tmptestdir]
>>>>>>         if platform.architecture()[0] == '64bit':
>>>>>>             test_args.append('-x64')   # 64-bit build
>>>>>>         if not Py_DEBUG:
>>>>>>             test_args.append('+d')     # Release build, use python.exe
       
>>>>>>         args = [script] + test_args + self.tests
>>>>>>         self.run_batch(*args)
       
    1:     @unittest.skipUnless(sys.platform == 'win32', 'Windows only')
           def test_pcbuild_rt(self):
>>>>>>         self.need_pcbuild()
       
               # PCbuild\rt.bat
>>>>>>         script = os.path.join(ROOT_DIR, r'PCbuild\rt.bat')
>>>>>>         rt_args = ["-q"]             # Quick, don't run tests twice
>>>>>>         if platform.architecture()[0] == '64bit':
>>>>>>             rt_args.append('-x64')   # 64-bit build
>>>>>>         if Py_DEBUG:
>>>>>>             rt_args.append('-d')     # Debug build, use python_d.exe
>>>>>>         args = [script] + rt_args + self.regrtest_args + self.tests
>>>>>>         self.run_batch(*args)
       
       
    2: class ArgsTestCase(BaseTestCase):
           """
           Test arguments of the Python test suite.
    1:     """
       
    1:     def run_tests(self, *testargs, **kw):
   21:         cmdargs = ('-m', 'test', '--testdir=%s' % self.tmptestdir) + testargs
   21:         return self.run_python(cmdargs, **kw)
       
    1:     def test_failing_test(self):
               # test a failing test
    1:         code = textwrap.dedent("""
                   import unittest
                   from test import support
       
                   class FailingTest(unittest.TestCase):
                       def test_failing(self):
                           self.fail("bug")
       
                   def test_main():
                       support.run_unittest(FailingTest)
    1:         """)
    1:         test_ok = self.create_test('ok')
    1:         test_failing = self.create_test('failing', code=code)
    1:         tests = [test_ok, test_failing]
       
    1:         output = self.run_tests(*tests, exitcode=2)
    1:         self.check_executed_tests(output, tests, failed=test_failing)
       
    1:     def test_resources(self):
               # test -u command line option
    1:         tests = {}
    3:         for resource in ('audio', 'network'):
    2:             code = 'from test import support\nsupport.requires(%r)' % resource
    2:             tests[resource] = self.create_test(resource, code)
    1:         test_names = sorted(tests.values())
       
               # -u all: 2 resources enabled
    1:         output = self.run_tests('-u', 'all', *test_names)
    1:         self.check_executed_tests(output, test_names)
       
               # -u audio: 1 resource enabled
    1:         output = self.run_tests('-uaudio', *test_names)
    1:         self.check_executed_tests(output, test_names,
    1:                                   skipped=tests['network'])
       
               # no option: 0 resources enabled
    1:         output = self.run_tests(*test_names)
    1:         self.check_executed_tests(output, test_names,
    1:                                   skipped=test_names)
       
    1:     def test_random(self):
               # test -r and --randseed command line option
    1:         code = textwrap.dedent("""
                   import random
                   print("TESTRANDOM: %s" % random.randint(1, 1000))
    1:         """)
    1:         test = self.create_test('random', code)
       
               # first run to get the output with the random seed
    1:         output = self.run_tests('-r', '-v', test)
    1:         randseed = self.parse_random_seed(output)
    1:         match = self.regex_search(r'TESTRANDOM: ([0-9]+)', output)
    1:         test_random = int(match.group(1))
       
               # try to reproduce with the random seed
    1:         output = self.run_tests('-r', '-v', '--randseed=%s' % randseed, test)
    1:         randseed2 = self.parse_random_seed(output)
    1:         self.assertEqual(randseed2, randseed)
       
    1:         match = self.regex_search(r'TESTRANDOM: ([0-9]+)', output)
    1:         test_random2 = int(match.group(1))
    1:         self.assertEqual(test_random2, test_random)
       
    1:     def test_fromfile(self):
               # test --fromfile
    6:         tests = [self.create_test() for index in range(5)]
       
               # Write the list of files using a format similar to regrtest output:
               # [1/2] test_1
               # [2/2] test_2
    1:         filename = support.TESTFN
    1:         self.addCleanup(support.unlink, filename)
       
               # test format 'test_opcodes'
    1:         with open(filename, "w") as fp:
    6:             for name in tests:
    5:                 print(name, file=fp)
       
    1:         output = self.run_tests('--fromfile', filename)
    1:         self.check_executed_tests(output, tests)
       
    1:     def test_interrupted(self):
    1:         code = TEST_INTERRUPTED
    1:         test = self.create_test('sigint', code=code)
    1:         output = self.run_tests(test, exitcode=130)
    1:         self.check_executed_tests(output, test, omitted=test,
    1:                                   interrupted=True)
       
    1:     def test_slowest(self):
               # test --slow
    4:         tests = [self.create_test() for index in range(3)]
    1:         output = self.run_tests("--slowest", *tests)
    1:         self.check_executed_tests(output, tests)
    1:         regex = ('10 slowest tests:\n'
                        '(?:- %s: .*\n){%s}'
    1:                  % (self.TESTNAME_REGEX, len(tests)))
    1:         self.check_line(output, regex)
       
    1:     def test_slow_interrupted(self):
               # Issue #25373: test --slowest with an interrupted test
    1:         code = TEST_INTERRUPTED
    1:         test = self.create_test("sigint", code=code)
       
    1:         try:
    1:             import threading
    1:             tests = (False, True)
>>>>>>         except ImportError:
>>>>>>             tests = (False,)
    3:         for multiprocessing in tests:
    2:             if multiprocessing:
    1:                 args = ("--slowest", "-j2", test)
                   else:
    1:                 args = ("--slowest", test)
    2:             output = self.run_tests(*args, exitcode=130)
    2:             self.check_executed_tests(output, test,
    2:                                       omitted=test, interrupted=True)
       
    2:             regex = ('10 slowest tests:\n')
    2:             self.check_line(output, regex)
       
    1:     def test_coverage(self):
               # test --coverage
    1:         test = self.create_test('coverage')
    1:         output = self.run_tests("--coverage", test)
    1:         self.check_executed_tests(output, [test])
    1:         regex = (r'lines +cov% +module +\(path\)\n'
                        r'(?: *[0-9]+ *[0-9]{1,2}% *[^ ]+ +\([^)]+\)+)+')
    1:         self.check_line(output, regex)
       
    1:     def test_forever(self):
               # test --forever
    1:         code = textwrap.dedent("""
                   import __builtin__
                   import unittest
                   from test import support
       
                   class ForeverTester(unittest.TestCase):
                       def test_run(self):
                           # Store the state in the __builtin__ module, because the test
                           # module is reload at each run
                           if 'RUN' in __builtin__.__dict__:
                               __builtin__.__dict__['RUN'] += 1
                               if __builtin__.__dict__['RUN'] >= 3:
                                   self.fail("fail at the 3rd runs")
                           else:
                               __builtin__.__dict__['RUN'] = 1
       
                   def test_main():
                       support.run_unittest(ForeverTester)
    1:         """)
    1:         test = self.create_test('forever', code=code)
    1:         output = self.run_tests('--forever', test, exitcode=2)
    1:         self.check_executed_tests(output, [test]*3, failed=test)
       
    1:     def check_leak(self, code, what):
>>>>>>         test = self.create_test('huntrleaks', code=code)
       
>>>>>>         filename = 'reflog.txt'
>>>>>>         self.addCleanup(support.unlink, filename)
>>>>>>         output = self.run_tests('--huntrleaks', '3:3:', test,
>>>>>>                                 exitcode=2,
>>>>>>                                 stderr=subprocess.STDOUT)
>>>>>>         self.check_executed_tests(output, [test], failed=test)
       
>>>>>>         line = 'beginning 6 repetitions\n123456\n......\n'
>>>>>>         self.check_line(output, re.escape(line))
       
>>>>>>         line2 = '%s leaked [1, 1, 1] %s, sum=3\n' % (test, what)
>>>>>>         self.assertIn(line2, output)
       
>>>>>>         with open(filename) as fp:
>>>>>>             reflog = fp.read()
>>>>>>             self.assertIn(line2, reflog)
       
    1:     @unittest.skipUnless(Py_DEBUG, 'need a debug build')
           def test_huntrleaks(self):
               # test --huntrleaks
>>>>>>         code = textwrap.dedent("""
                   import unittest
                   from test import support
       
                   GLOBAL_LIST = []
       
                   class RefLeakTest(unittest.TestCase):
                       def test_leak(self):
                           GLOBAL_LIST.append(object())
       
                   def test_main():
                       support.run_unittest(RefLeakTest)
>>>>>>         """)
>>>>>>         self.check_leak(code, 'references')
       
    1:     def test_list_tests(self):
               # test --list-tests
    6:         tests = [self.create_test() for i in range(5)]
    1:         output = self.run_tests('--list-tests', *tests)
    1:         self.assertEqual(output.rstrip().splitlines(),
    1:                          tests)
       
    1:     def test_list_cases(self):
               # test --list-cases
    1:         code = textwrap.dedent("""
                   import unittest
       
                   class Tests(unittest.TestCase):
                       def test_method1(self):
                           pass
                       def test_method2(self):
                           pass
    1:         """)
    1:         testname = self.create_test(code=code)
       
               # Test --list-cases
    1:         all_methods = ['%s.Tests.test_method1' % testname,
    1:                        '%s.Tests.test_method2' % testname]
    1:         output = self.run_tests('--list-cases', testname)
    1:         self.assertEqual(output.splitlines(), all_methods)
       
               # Test --list-cases with --match
    1:         all_methods = ['%s.Tests.test_method1' % testname]
    1:         output = self.run_tests('--list-cases',
    1:                                 '-m', 'test_method1',
    1:                                 testname)
    1:         self.assertEqual(output.splitlines(), all_methods)
       
    1:     def test_crashed(self):
               # Any code which causes a crash
    1:         code = 'import test.support; test.support._crash_python()'
    1:         crash_test = self.create_test(name="crash", code=code)
    1:         ok_test = self.create_test(name="ok")
       
    1:         tests = [crash_test, ok_test]
    1:         output = self.run_tests("-j2", *tests, exitcode=2)
    1:         self.check_executed_tests(output, tests, failed=crash_test,
    1:                                   randomize=True)
       
    1:     def parse_methods(self, output):
    2:         regex = re.compile("^(test[^ ]+).*ok$", flags=re.MULTILINE)
    8:         return [match.group(1) for match in regex.finditer(output)]
       
    1:     def test_matchfile(self):
               # Any code which causes a crash
    1:         code = textwrap.dedent("""
                   import unittest
                   from test import support
       
                   class Tests(unittest.TestCase):
                       def test_method1(self):
                           pass
                       def test_method2(self):
                           pass
                       def test_method3(self):
                           pass
                       def test_method4(self):
                           pass
       
                   def test_main():
                       support.run_unittest(Tests)
    1:         """)
    1:         all_methods = ['test_method1', 'test_method2',
    1:                        'test_method3', 'test_method4']
    1:         testname = self.create_test(code=code)
       
               # by default, all methods should be run
    1:         output = self.run_tests("-v", testname)
    1:         methods = self.parse_methods(output)
    1:         self.assertEqual(methods, all_methods)
       
               # only run a subset
    1:         filename = support.TESTFN
    1:         self.addCleanup(support.unlink, filename)
       
               subset = [
                   # only match the method name
    1:             'test_method1',
                   # match the full identifier
    1:             '%s.Tests.test_method3' % testname]
    1:         with open(filename, "w") as fp:
    3:             for name in subset:
    2:                 print(name, file=fp)
       
    1:         output = self.run_tests("-v", "--matchfile", filename, testname)
    1:         methods = self.parse_methods(output)
    1:         subset = ['test_method1', 'test_method3']
    1:         self.assertEqual(methods, subset)
       
    1:     def test_env_changed(self):
    1:         code = textwrap.dedent("""
                   import unittest
                   from test import support
       
                   class Tests(unittest.TestCase):
                       def test_env_changed(self):
                           open("env_changed", "w").close()
       
                   def test_main():
                       support.run_unittest(Tests)
    1:         """)
    1:         testname = self.create_test(code=code)
       
               # don't fail by default
    1:         output = self.run_tests(testname)
    1:         self.check_executed_tests(output, [testname], env_changed=testname)
       
               # fail with --fail-env-changed
    1:         output = self.run_tests("--fail-env-changed", testname, exitcode=3)
    1:         self.check_executed_tests(output, [testname], env_changed=testname,
    1:                                   fail_env_changed=True)
       
       
    1: def test_main():
    1:     support.run_unittest(ProgramsTestCase, ArgsTestCase)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
