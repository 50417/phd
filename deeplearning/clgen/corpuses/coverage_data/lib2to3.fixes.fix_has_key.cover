       # Copyright 2006 Google, Inc. All Rights Reserved.
       # Licensed to PSF under a Contributor Agreement.
       
       """Fixer for has_key().
       
       Calls to .has_key() methods are expressed in terms of the 'in'
       operator:
       
           d.has_key(k) -> k in d
       
       CAVEATS:
       1) While the primary target of this fixer is dict.has_key(), the
          fixer will change any has_key() method call, regardless of its
          class.
       
       2) Cases like this will not be converted:
       
           m = d.has_key
           if m(k):
               ...
       
          Only *calls* to has_key() are converted. While it is possible to
          convert the above to something like
       
           m = d.__contains__
           if m(k):
               ...
       
          this is currently not done.
    1: """
       
       # Local imports
    1: from .. import pytree
    1: from ..pgen2 import token
    1: from .. import fixer_base
    1: from ..fixer_util import Name, parenthesize
       
       
    2: class FixHasKey(fixer_base.BaseFix):
    1:     BM_compatible = True
       
           PATTERN = """
           anchor=power<
               before=any+
               trailer< '.' 'has_key' >
               trailer<
                   '('
                   ( not(arglist | argument<any '=' any>) arg=any
                   | arglist<(not argument<any '=' any>) arg=any ','>
                   )
                   ')'
               >
               after=any*
           >
           |
           negation=not_test<
               'not'
               anchor=power<
                   before=any+
                   trailer< '.' 'has_key' >
                   trailer<
                       '('
                       ( not(arglist | argument<any '=' any>) arg=any
                       | arglist<(not argument<any '=' any>) arg=any ','>
                       )
                       ')'
                   >
               >
           >
    1:     """
       
    1:     def transform(self, node, results):
   16:         assert results
   16:         syms = self.syms
   16:         if (node.parent.type == syms.not_test and
    3:             self.pattern.match(node.parent)):
                   # Don't transform a node matching the first alternative of the
                   # pattern when its parent matches the second alternative
    1:             return None
   15:         negation = results.get("negation")
   15:         anchor = results["anchor"]
   15:         prefix = node.prefix
   35:         before = [n.clone() for n in results["before"]]
   15:         arg = results["arg"].clone()
   15:         after = results.get("after")
   15:         if after:
   17:             after = [n.clone() for n in after]
   15:         if arg.type in (syms.comparison, syms.not_test, syms.and_test,
   15:                         syms.or_test, syms.test, syms.lambdef, syms.argument):
    3:             arg = parenthesize(arg)
   15:         if len(before) == 1:
   12:             before = before[0]
               else:
    3:             before = pytree.Node(syms.power, before)
   15:         before.prefix = u" "
   15:         n_op = Name(u"in", prefix=u" ")
   15:         if negation:
    1:             n_not = Name(u"not", prefix=u" ")
    1:             n_op = pytree.Node(syms.comp_op, (n_not, n_op))
   15:         new = pytree.Node(syms.comparison, (arg, n_op, before))
   15:         if after:
    5:             new = parenthesize(new)
    5:             new = pytree.Node(syms.power, (new,) + tuple(after))
   15:         if node.parent.type in (syms.comparison, syms.expr, syms.xor_expr,
   15:                                 syms.and_expr, syms.shift_expr,
   15:                                 syms.arith_expr, syms.term,
   15:                                 syms.factor, syms.power):
    1:             new = parenthesize(new)
   15:         new.prefix = prefix
   15:         return new
