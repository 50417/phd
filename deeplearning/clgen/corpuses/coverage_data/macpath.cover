    1: """Pathname and path-related operations for the Macintosh."""
       
    1: import os
    1: import warnings
    1: from stat import *
    1: import genericpath
    1: from genericpath import *
    1: from genericpath import _unicode
       
    1: __all__ = ["normcase","isabs","join","splitdrive","split","splitext",
    1:            "basename","dirname","commonprefix","getsize","getmtime",
    1:            "getatime","getctime", "islink","exists","lexists","isdir","isfile",
    1:            "walk","expanduser","expandvars","normpath","abspath",
    1:            "curdir","pardir","sep","pathsep","defpath","altsep","extsep",
    1:            "devnull","realpath","supports_unicode_filenames"]
       
       # strings representing various path-related bits and pieces
    1: curdir = ':'
    1: pardir = '::'
    1: extsep = '.'
    1: sep = ':'
    1: pathsep = '\n'
    1: defpath = ':'
    1: altsep = None
    1: devnull = 'Dev:Null'
       
       # Normalize the case of a pathname.  Dummy in Posix, but <s>.lower() here.
       
    1: def normcase(path):
    2:     return path.lower()
       
       
    1: def isabs(s):
           """Return true if a path is absolute.
           On the Mac, relative paths begin with a colon,
           but as a special case, paths with no colons at all are also relative.
           Anything else is absolute (the string up to the first colon is the
           volume name)."""
       
   57:     return ':' in s and s[0] != ':'
       
       
    1: def join(s, *p):
   33:     path = s
   68:     for t in p:
   35:         if (not path) or isabs(t):
    5:             path = t
    5:             continue
   30:         if t[:1] == ':':
    6:             t = t[1:]
   30:         if ':' not in path:
   19:             path = ':' + path
   30:         if path[-1:] != ':':
   25:             path = path + ':'
   30:         path = path + t
   33:     return path
       
       
    1: def split(s):
           """Split a pathname into two parts: the directory leading up to the final
           bit, and the basename (the filename, without colons, in that directory).
           The result (s, t) is such that join(s, t) yields the original argument."""
       
    4:     if ':' not in s: return '', s
    4:     colon = 0
   54:     for i in range(len(s)):
   50:         if s[i] == ':': colon = i + 1
    4:     path, file = s[:colon-1], s[colon:]
    4:     if path and not ':' in path:
    1:         path = path + ':'
    4:     return path, file
       
       
    1: def splitext(p):
    7:     return genericpath._splitext(p, sep, altsep, extsep)
    1: splitext.__doc__ = genericpath._splitext.__doc__
       
    1: def splitdrive(p):
           """Split a pathname into a drive specification and the rest of the
           path.  Useful on DOS/Windows/NT; on the Mac, the drive is always
           empty (don't use the volume name -- it doesn't have the same
           syntactic and semantic oddities as DOS drive letters, such as there
           being a separate current directory per drive)."""
       
    3:     return '', p
       
       
       # Short interfaces to split()
       
    1: def dirname(s): return split(s)[0]
    1: def basename(s): return split(s)[1]
       
    1: def ismount(s):
>>>>>>     if not isabs(s):
>>>>>>         return False
>>>>>>     components = split(s)
>>>>>>     return len(components) == 2 and components[1] == ''
       
    1: def islink(s):
           """Return true if the pathname refers to a symbolic link."""
       
>>>>>>     try:
>>>>>>         import Carbon.File
>>>>>>         return Carbon.File.ResolveAliasFile(s, 0)[2]
>>>>>>     except:
>>>>>>         return False
       
       # Is `stat`/`lstat` a meaningful difference on the Mac?  This is safe in any
       # case.
       
    1: def lexists(path):
           """Test whether a path exists.  Returns True for broken symbolic links"""
       
    1:     try:
    1:         st = os.lstat(path)
>>>>>>     except os.error:
>>>>>>         return False
    1:     return True
       
    1: def expandvars(path):
           """Dummy to retain interface-compatibility with other operating systems."""
>>>>>>     return path
       
       
    1: def expanduser(path):
           """Dummy to retain interface-compatibility with other operating systems."""
>>>>>>     return path
       
    2: class norm_error(Exception):
    1:     """Path cannot be normalized"""
       
    1: def normpath(s):
           """Normalize a pathname.  Will return the same result for
           equivalent paths."""
       
   29:     if ":" not in s:
   10:         return ":"+s
       
   19:     comps = s.split(":")
   19:     i = 1
   33:     while i < len(comps)-1:
   14:         if comps[i] == "" and comps[i-1] != "":
>>>>>>             if i > 1:
>>>>>>                 del comps[i-1:i+1]
>>>>>>                 i = i - 1
                   else:
                       # best way to handle this is to raise an exception
>>>>>>                 raise norm_error, 'Cannot use :: immediately after volume name'
               else:
   14:             i = i + 1
       
   19:     s = ":".join(comps)
       
           # remove trailing ":" except for ":" and "Volume:"
   19:     if s[-1] == ":" and len(comps) > 2 and s != ":"*len(s):
    3:         s = s[:-1]
   19:     return s
       
       
    1: def walk(top, func, arg):
           """Directory tree walk with callback function.
       
           For each directory in the directory tree rooted at top (including top
           itself, but excluding '.' and '..'), call func(arg, dirname, fnames).
           dirname is the name of the directory, and fnames a list of the names of
           the files and subdirectories in dirname (excluding '.' and '..').  func
           may modify the fnames list in-place (e.g. via del or slice assignment),
           and walk will only recurse into the subdirectories whose names remain in
           fnames; this can be used to implement a filter, or to impose a specific
           order of visiting.  No semantics are defined for, or required of, arg,
           beyond that arg is always passed to func.  It can be used, e.g., to pass
           a filename pattern, or a mutable object designed to accumulate
           statistics.  Passing None for arg is common."""
>>>>>>     warnings.warnpy3k("In 3.x, os.path.walk is removed in favor of os.walk.",
>>>>>>                       stacklevel=2)
>>>>>>     try:
>>>>>>         names = os.listdir(top)
>>>>>>     except os.error:
>>>>>>         return
>>>>>>     func(arg, top, names)
>>>>>>     for name in names:
>>>>>>         name = join(top, name)
>>>>>>         if isdir(name) and not islink(name):
>>>>>>             walk(name, func, arg)
       
       
    1: def abspath(path):
           """Return an absolute path."""
   18:     if not isabs(path):
   14:         if isinstance(path, _unicode):
    8:             cwd = os.getcwdu()
               else:
    6:             cwd = os.getcwd()
   14:         path = join(cwd, path)
   18:     return normpath(path)
       
       # realpath is a no-op on systems without islink support
    1: def realpath(path):
    1:     path = abspath(path)
    1:     try:
    1:         import Carbon.File
>>>>>>     except ImportError:
>>>>>>         return path
    1:     if not path:
>>>>>>         return path
    1:     components = path.split(':')
    1:     path = components[0] + ':'
    3:     for c in components[1:]:
    2:         path = join(path, c)
    2:         try:
    2:             path = Carbon.File.FSResolveAliasFile(path, 1)[0].as_pathname()
    2:         except Carbon.File.Error:
    2:             pass
    1:     return path
       
    1: supports_unicode_filenames = True
