    1: """High-perfomance logging profiler, mostly written in C."""
       
    1: import _hotshot
    1: from _hotshot import ProfilerError
       
    1: from warnings import warnpy3k as _warnpy3k
    1: _warnpy3k("The 'hotshot' module is not supported in 3.x, "
    1:           "use the 'profile' module instead.", stacklevel=2)
       
    2: class Profile:
    1:     def __init__(self, logfn, lineevents=0, linetimings=1):
    3:         self.lineevents = lineevents and 1 or 0
    3:         self.linetimings = (linetimings and lineevents) and 1 or 0
    3:         self._prof = p = _hotshot.profiler(
    3:             logfn, self.lineevents, self.linetimings)
       
               # Attempt to avoid confusing results caused by the presence of
               # Python wrappers around these functions, but only if we can
               # be sure the methods have not been overridden or extended.
    3:         if self.__class__ is Profile:
    3:             self.close = p.close
    3:             self.start = p.start
    3:             self.stop = p.stop
    3:             self.addinfo = p.addinfo
       
    1:     def close(self):
               """Close the logfile and terminate the profiler."""
>>>>>>         self._prof.close()
       
    1:     def fileno(self):
               """Return the file descriptor of the profiler's log file."""
>>>>>>         return self._prof.fileno()
       
    1:     def start(self):
               """Start the profiler."""
>>>>>>         self._prof.start()
       
    1:     def stop(self):
               """Stop the profiler."""
>>>>>>         self._prof.stop()
       
    1:     def addinfo(self, key, value):
               """Add an arbitrary labelled value to the profile log."""
>>>>>>         self._prof.addinfo(key, value)
       
           # These methods offer the same interface as the profile.Profile class,
           # but delegate most of the work to the C implementation underneath.
       
    1:     def run(self, cmd):
               """Profile an exec-compatible string in the script
               environment.
       
               The globals from the __main__ module are used as both the
               globals and locals for the script.
               """
>>>>>>         import __main__
>>>>>>         dict = __main__.__dict__
>>>>>>         return self.runctx(cmd, dict, dict)
       
    1:     def runctx(self, cmd, globals, locals):
               """Evaluate an exec-compatible string in a specific
               environment.
       
               The string is compiled before profiling begins.
               """
>>>>>>         code = compile(cmd, "<string>", "exec")
>>>>>>         self._prof.runcode(code, globals, locals)
>>>>>>         return self
       
    1:     def runcall(self, func, *args, **kw):
               """Profile a single call of a callable.
       
               Additional positional and keyword arguments may be passed
               along; the result of the call is returned, and exceptions are
               allowed to propagate cleanly, while ensuring that profiling is
               disabled on the way out.
               """
    2:         return self._prof.runcall(func, args, kw)
