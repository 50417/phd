       """Common operations on Posix pathnames.
       
       Instead of importing this module directly, import os and refer to
       this module as os.path.  The "os.path" name is an alias for this
       module on Posix systems; on other systems (e.g. Mac, Windows),
       os.path provides the same operations in a manner specific to that
       platform, and is an alias to another module (e.g. macpath, ntpath).
       
       Some of this can actually be useful on non-Posix systems too, e.g.
       for manipulation of the pathname component of URLs.
       """
       
>>>>>> import os
>>>>>> import sys
>>>>>> import stat
>>>>>> import genericpath
>>>>>> import warnings
>>>>>> from genericpath import *
>>>>>> from genericpath import _unicode
       
>>>>>> __all__ = ["normcase","isabs","join","splitdrive","split","splitext",
>>>>>>            "basename","dirname","commonprefix","getsize","getmtime",
>>>>>>            "getatime","getctime","islink","exists","lexists","isdir","isfile",
>>>>>>            "ismount","walk","expanduser","expandvars","normpath","abspath",
>>>>>>            "samefile","sameopenfile","samestat",
>>>>>>            "curdir","pardir","sep","pathsep","defpath","altsep","extsep",
>>>>>>            "devnull","realpath","supports_unicode_filenames","relpath"]
       
       # strings representing various path-related bits and pieces
>>>>>> curdir = '.'
>>>>>> pardir = '..'
>>>>>> extsep = '.'
>>>>>> sep = '/'
>>>>>> pathsep = ':'
>>>>>> defpath = ':/bin:/usr/bin'
>>>>>> altsep = None
>>>>>> devnull = '/dev/null'
       
       # Normalize the case of a pathname.  Trivial in Posix, string.lower on Mac.
       # On MS-DOS this may also turn slashes into backslashes; however, other
       # normalizations (such as optimizing '../' away) are not allowed
       # (another function should be defined to do that).
       
>>>>>> def normcase(s):
           """Normalize case of pathname.  Has no effect under Posix"""
 4296:     return s
       
       
       # Return whether a path is absolute.
       # Trivial in Posix, harder on the Mac or MS-DOS.
       
>>>>>> def isabs(s):
           """Test whether a path is absolute"""
108393:     return s.startswith('/')
       
       
       # Join pathnames.
       # Ignore the previous parts if a part is absolute.
       # Insert a '/' unless the first part is empty or already ends in '/'.
       
>>>>>> def join(a, *p):
           """Join two or more pathname components, inserting '/' as needed.
           If any component is an absolute path, all previous path components
           will be discarded.  An empty last part will result in a path that
           ends with a separator."""
446546:     path = a
1017402:     for b in p:
570860:         if b.startswith('/'):
   22:             path = b
570836:         elif path == '' or path.endswith('/'):
51190:             path +=  b
               else:
519648:             path += '/' + b
446546:     return path
       
       
       # Split a path in head (everything up to the last '/') and tail (the
       # rest).  If the path ends in '/', tail will be empty.  If there is no
       # '/' in the path, head  will be empty.
       # Trailing '/'es are stripped from head unless it is the root.
       
>>>>>> def split(p):
           """Split a pathname.  Returns tuple "(head, tail)" where "tail" is
           everything after the final slash.  Either part may be empty."""
 2609:     i = p.rfind('/') + 1
 2609:     head, tail = p[:i], p[i:]
 2609:     if head and head != '/'*len(head):
 2147:         head = head.rstrip('/')
 2609:     return head, tail
       
       
       # Split a path in root and extension.
       # The extension is everything starting at the last dot in the last
       # pathname component; the root is everything before that.
       # It is always true that root + ext == p.
       
>>>>>> def splitext(p):
 2597:     return genericpath._splitext(p, sep, altsep, extsep)
>>>>>> splitext.__doc__ = genericpath._splitext.__doc__
       
       # Split a pathname into a drive specification and the rest of the
       # path.  Useful on DOS/Windows/NT; on Unix, the drive is always empty.
       
>>>>>> def splitdrive(p):
           """Split a pathname into drive and path. On Posix, drive is always
           empty."""
  790:     return '', p
       
       
       # Return the tail (basename) part of a path, same as split(path)[1].
       
>>>>>> def basename(p):
           """Returns the final component of a pathname"""
 3701:     i = p.rfind('/') + 1
 3701:     return p[i:]
       
       
       # Return the head (dirname) part of a path, same as split(path)[0].
       
>>>>>> def dirname(p):
           """Returns the directory component of a pathname"""
 1222:     i = p.rfind('/') + 1
 1222:     head = p[:i]
 1222:     if head and head != '/'*len(head):
  980:         head = head.rstrip('/')
 1222:     return head
       
       
       # Is a path a symbolic link?
       # This will always return false on systems where os.lstat doesn't exist.
       
>>>>>> def islink(path):
           """Test whether a path is a symbolic link"""
358740:     try:
358740:         st = os.lstat(path)
   65:     except (os.error, AttributeError):
   65:         return False
358675:     return stat.S_ISLNK(st.st_mode)
       
       # Being true for dangling symbolic links is also useful.
       
>>>>>> def lexists(path):
           """Test whether a path exists.  Returns True for broken symbolic links"""
   91:     try:
   91:         os.lstat(path)
   47:     except os.error:
   47:         return False
   44:     return True
       
       
       # Are two filenames really pointing to the same file?
       
>>>>>> def samefile(f1, f2):
           """Test whether two pathnames reference the same actual file"""
   61:     s1 = os.stat(f1)
   57:     s2 = os.stat(f2)
   13:     return samestat(s1, s2)
       
       
       # Are two open files really referencing the same file?
       # (Not necessarily the same file descriptor!)
       
>>>>>> def sameopenfile(fp1, fp2):
           """Test whether two open file objects reference the same file"""
>>>>>>     s1 = os.fstat(fp1)
>>>>>>     s2 = os.fstat(fp2)
>>>>>>     return samestat(s1, s2)
       
       
       # Are two stat buffers (obtained from stat, fstat or lstat)
       # describing the same file?
       
>>>>>> def samestat(s1, s2):
           """Test whether two stat buffers reference the same file"""
   20:     return s1.st_ino == s2.st_ino and \
   10:            s1.st_dev == s2.st_dev
       
       
       # Is a path a mount point?
       # (Does this work for all UNIXes?  Is it even guaranteed to work by Posix?)
       
>>>>>> def ismount(path):
           """Test whether a path is a mount point"""
    6:     if islink(path):
               # A symlink can never be a mount point
    1:         return False
    5:     try:
    5:         s1 = os.lstat(path)
    4:         s2 = os.lstat(realpath(join(path, '..')))
    1:     except os.error:
    1:         return False # It doesn't exist -- so not a mount point :-)
    4:     dev1 = s1.st_dev
    4:     dev2 = s2.st_dev
    4:     if dev1 != dev2:
    2:         return True     # path/.. on a different device as path
    2:     ino1 = s1.st_ino
    2:     ino2 = s2.st_ino
    2:     if ino1 == ino2:
    1:         return True     # path/.. is the same i-node as path
    1:     return False
       
       
       # Directory tree walk.
       # For each directory under top (including top itself, but excluding
       # '.' and '..'), func(arg, dirname, filenames) is called, where
       # dirname is the name of the directory and filenames is the list
       # of files (and subdirectories etc.) in the directory.
       # The func may modify the filenames list, to implement a filter,
       # or to impose a different order of visiting.
       
>>>>>> def walk(top, func, arg):
           """Directory tree walk with callback function.
       
           For each directory in the directory tree rooted at top (including top
           itself, but excluding '.' and '..'), call func(arg, dirname, fnames).
           dirname is the name of the directory, and fnames a list of the names of
           the files and subdirectories in dirname (excluding '.' and '..').  func
           may modify the fnames list in-place (e.g. via del or slice assignment),
           and walk will only recurse into the subdirectories whose names remain in
           fnames; this can be used to implement a filter, or to impose a specific
           order of visiting.  No semantics are defined for, or required of, arg,
           beyond that arg is always passed to func.  It can be used, e.g., to pass
           a filename pattern, or a mutable object designed to accumulate
           statistics.  Passing None for arg is common."""
>>>>>>     warnings.warnpy3k("In 3.x, os.path.walk is removed in favor of os.walk.",
>>>>>>                       stacklevel=2)
>>>>>>     try:
>>>>>>         names = os.listdir(top)
>>>>>>     except os.error:
>>>>>>         return
>>>>>>     func(arg, top, names)
>>>>>>     for name in names:
>>>>>>         name = join(top, name)
>>>>>>         try:
>>>>>>             st = os.lstat(name)
>>>>>>         except os.error:
>>>>>>             continue
>>>>>>         if stat.S_ISDIR(st.st_mode):
>>>>>>             walk(name, func, arg)
       
       
       # Expand paths beginning with '~' or '~user'.
       # '~' means $HOME; '~user' means that user's home directory.
       # If the path doesn't begin with '~', or if the user or $HOME is unknown,
       # the path is returned unchanged (leaving error reporting to whatever
       # function is called with the expanded path as argument).
       # See also module 'glob' for expansion of *, ? and [...] in pathnames.
       # (A function should also be defined to do full *sh-style environment
       # variable expansion.)
       
>>>>>> def expanduser(path):
           """Expand ~ and ~user constructions.  If user or $HOME is unknown,
           do nothing."""
  971:     if not path.startswith('~'):
  916:         return path
   55:     i = path.find('/', 1)
   55:     if i < 0:
   41:         i = len(path)
   55:     if i == 1:
   53:         if 'HOME' not in os.environ:
    1:             import pwd
    1:             userhome = pwd.getpwuid(os.getuid()).pw_dir
               else:
   52:             userhome = os.environ['HOME']
           else:
    2:         import pwd
    2:         try:
    2:             pwent = pwd.getpwnam(path[1:i])
    1:         except KeyError:
    1:             return path
    1:         userhome = pwent.pw_dir
   54:     userhome = userhome.rstrip('/')
   54:     return (userhome + path[i:]) or '/'
       
       
       # Expand paths containing shell variable substitutions.
       # This expands the forms $variable and ${variable} only.
       # Non-existent variables are left unchanged.
       
>>>>>> _varprog = None
>>>>>> _uvarprog = None
       
>>>>>> def expandvars(path):
           """Expand shell variables of form $var and ${var}.  Unknown variables
           are left unchanged."""
           global _varprog, _uvarprog
   24:     if '$' not in path:
    3:         return path
   21:     if isinstance(path, _unicode):
    6:         if not _uvarprog:
    1:             import re
    1:             _uvarprog = re.compile(ur'\$(\w+|\{[^}]*\})', re.UNICODE)
    6:         varprog = _uvarprog
    6:         encoding = sys.getfilesystemencoding()
           else:
   15:         if not _varprog:
    1:             import re
    1:             _varprog = re.compile(r'\$(\w+|\{[^}]*\})')
   15:         varprog = _varprog
   15:         encoding = None
   21:     i = 0
   41:     while True:
   41:         m = varprog.search(path, i)
   41:         if not m:
   21:             break
   20:         i, j = m.span(0)
   20:         name = m.group(1)
   20:         if name.startswith('{') and name.endswith('}'):
    6:             name = name[1:-1]
   20:         if encoding:
    6:             name = name.encode(encoding)
   20:         if name in os.environ:
   15:             tail = path[j:]
   15:             value = os.environ[name]
   15:             if encoding:
    5:                 value = value.decode(encoding)
   15:             path = path[:i] + value
   15:             i = len(path)
   15:             path += tail
               else:
    5:             i = j
   21:     return path
       
       
       # Normalize a path, e.g. A//B, A/./B and A/foo/../B all become A/B.
       # It should be understood that this may change the meaning of the path
       # if it contains symbolic links!
       
>>>>>> def normpath(path):
           """Normalize path, eliminating double slashes, etc."""
           # Preserve unicode (if path is unicode)
59142:     slash, dot = (u'/', u'.') if isinstance(path, _unicode) else ('/', '.')
59142:     if path == '':
   35:         return dot
59106:     initial_slashes = path.startswith('/')
           # POSIX allows one or two initial slashes, but treats three or more
           # as single slash.
59107:     if (initial_slashes and
58162:         path.startswith('//') and not path.startswith('///')):
    5:         initial_slashes = 2
59107:     comps = path.split('/')
59107:     new_comps = []
538515:     for comp in comps:
479401:         if comp in ('', '.'):
58641:             continue
420767:         if (comp != '..' or (not initial_slashes and not new_comps) or
  122:              (new_comps and new_comps[-1] == '..')):
420645:             new_comps.append(comp)
  122:         elif new_comps:
   27:             new_comps.pop()
59107:     comps = new_comps
59107:     path = slash.join(comps)
59107:     if initial_slashes:
58163:         path = slash*initial_slashes + path
59107:     return path or dot
       
       
>>>>>> def abspath(path):
           """Return an absolute path."""
57213:     if not isabs(path):
 1181:         if isinstance(path, _unicode):
   37:             cwd = os.getcwdu()
               else:
 1144:             cwd = os.getcwd()
 1181:         path = join(cwd, path)
57218:     return normpath(path)
       
       
       # Return a canonical path (i.e. the absolute location of a file on the
       # filesystem).
       
>>>>>> def realpath(filename):
           """Return the canonical path of the specified filename, eliminating any
       symbolic links encountered in the path."""
50727:     path, ok = _joinrealpath('', filename, {})
50727:     return abspath(path)
       
       # Join two paths, normalizing and eliminating any symbolic links
       # encountered in the second path.
>>>>>> def _joinrealpath(path, rest, seen):
50856:     if isabs(rest):
50734:         rest = rest[1:]
50734:         path = sep
       
408224:     while rest:
357398:         name, _, rest = rest.partition(sep)
357398:         if not name or name == curdir:
                   # current dir
  105:             continue
357293:         if name == pardir:
                   # parent dir
  111:             if path:
  108:                 path, name = split(path)
  108:                 if name == pardir:
  100:                     path = join(path, pardir, pardir)
                   else:
    3:                 path = pardir
  111:             continue
357182:         newpath = join(path, name)
357182:         if not islink(newpath):
356860:             path = newpath
356860:             continue
               # Resolve the symbolic link
  322:         if newpath in seen:
                   # Already seen this path
  193:             path = seen[newpath]
  193:             if path is not None:
                       # use cached value
  182:                 continue
                   # The symlink is not resolved, so we must have a symlink loop.
                   # Return already resolved part + rest of the path unchanged.
   11:             return join(newpath, rest), False
  129:         seen[newpath] = None # not resolved symlink
  129:         path, ok = _joinrealpath(path, os.readlink(newpath), seen)
  129:         if not ok:
   19:             return join(path, rest), False
  110:         seen[newpath] = path # resolved symlink
       
50826:     return path, True
       
       
>>>>>> supports_unicode_filenames = (sys.platform == 'darwin')
       
>>>>>> def relpath(path, start=curdir):
           """Return a relative version of a path"""
       
   53:     if not path:
    1:         raise ValueError("no path specified")
       
  347:     start_list = [x for x in abspath(start).split(sep) if x]
  435:     path_list = [x for x in abspath(path).split(sep) if x]
       
           # Work out how much of the filepath is shared by start and path.
   52:     i = len(commonprefix([start_list, path_list]))
       
   52:     rel_list = [pardir] * (len(start_list)-i) + path_list[i:]
   52:     if not rel_list:
    4:         return curdir
   48:     return join(*rel_list)
