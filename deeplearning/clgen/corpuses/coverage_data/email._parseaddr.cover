       # Copyright (C) 2002-2007 Python Software Foundation
       # Contact: email-sig@python.org
       
       """Email address parsing code.
       
       Lifted directly from rfc822.py.  This should eventually be rewritten.
    1: """
       
       __all__ = [
    1:     'mktime_tz',
    1:     'parsedate',
    1:     'parsedate_tz',
    1:     'quote',
           ]
       
    1: import time, calendar
       
    1: SPACE = ' '
    1: EMPTYSTRING = ''
    1: COMMASPACE = ', '
       
       # Parse a date field
    1: _monthnames = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul',
    1:                'aug', 'sep', 'oct', 'nov', 'dec',
    1:                'january', 'february', 'march', 'april', 'may', 'june', 'july',
    1:                'august', 'september', 'october', 'november', 'december']
       
    1: _daynames = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']
       
       # The timezone table does not include the military time zones defined
       # in RFC822, other than Z.  According to RFC1123, the description in
       # RFC822 gets the signs wrong, so we can't rely on any such time
       # zones.  RFC1123 recommends that numeric timezone indicators be used
       # instead of timezone names.
       
    1: _timezones = {'UT':0, 'UTC':0, 'GMT':0, 'Z':0,
    1:               'AST': -400, 'ADT': -300,  # Atlantic (used in Canada)
    1:               'EST': -500, 'EDT': -400,  # Eastern
    1:               'CST': -600, 'CDT': -500,  # Central
    1:               'MST': -700, 'MDT': -600,  # Mountain
    1:               'PST': -800, 'PDT': -700   # Pacific
                     }
       
       
    1: def parsedate_tz(data):
           """Convert a date string to a time tuple.
       
           Accounts for military timezones.
           """
   28:     data = data.split()
           # The FWS after the comma after the day-of-week is optional, so search and
           # adjust for this.
   28:     if data[0].endswith(',') or data[0].lower() in _daynames:
               # There's a dayname here. Skip it
    9:         del data[0]
           else:
   19:         i = data[0].rfind(',')
   19:         if i >= 0:
    3:             data[0] = data[0][i+1:]
   28:     if len(data) == 3: # RFC 850 date, deprecated
>>>>>>         stuff = data[0].split('-')
>>>>>>         if len(stuff) == 3:
>>>>>>             data = stuff + data[1:]
   28:     if len(data) == 4:
>>>>>>         s = data[3]
>>>>>>         i = s.find('+')
>>>>>>         if i > 0:
>>>>>>             data[3:] = [s[:i], s[i+1:]]
               else:
>>>>>>             data.append('') # Dummy tz
   28:     if len(data) < 5:
>>>>>>         return None
   28:     data = data[:5]
   28:     [dd, mm, yy, tm, tz] = data
   28:     mm = mm.lower()
   28:     if mm not in _monthnames:
>>>>>>         dd, mm = mm, dd.lower()
>>>>>>         if mm not in _monthnames:
>>>>>>             return None
   28:     mm = _monthnames.index(mm) + 1
   28:     if mm > 12:
>>>>>>         mm -= 12
   28:     if dd[-1] == ',':
>>>>>>         dd = dd[:-1]
   28:     i = yy.find(':')
   28:     if i > 0:
>>>>>>         yy, tm = tm, yy
   28:     if yy[-1] == ',':
>>>>>>         yy = yy[:-1]
   28:     if not yy[0].isdigit():
>>>>>>         yy, tz = tz, yy
   28:     if tm[-1] == ',':
>>>>>>         tm = tm[:-1]
   28:     tm = tm.split(':')
   28:     if len(tm) == 2:
>>>>>>         [thh, tmm] = tm
>>>>>>         tss = '0'
   28:     elif len(tm) == 3:
   28:         [thh, tmm, tss] = tm
           else:
>>>>>>         return None
   28:     try:
   28:         yy = int(yy)
   28:         dd = int(dd)
   28:         thh = int(thh)
   28:         tmm = int(tmm)
   28:         tss = int(tss)
>>>>>>     except ValueError:
>>>>>>         return None
           # Check for a yy specified in two-digit format, then convert it to the
           # appropriate four-digit format, according to the POSIX standard. RFC 822
           # calls for a two-digit yy, but RFC 2822 (which obsoletes RFC 822)
           # mandates a 4-digit yy. For more information, see the documentation for
           # the time module.
   28:     if yy < 100:
               # The year is between 1969 and 1999 (inclusive).
    2:         if yy > 68:
    1:             yy += 1900
               # The year is between 2000 and 2068 (inclusive).
               else:
    1:             yy += 2000
   28:     tzoffset = None
   28:     tz = tz.upper()
   28:     if tz in _timezones:
>>>>>>         tzoffset = _timezones[tz]
           else:
   28:         try:
   28:             tzoffset = int(tz)
>>>>>>         except ValueError:
>>>>>>             pass
           # Convert a timezone offset into seconds ; -0500 -> -18000
   28:     if tzoffset:
   25:         if tzoffset < 0:
   19:             tzsign = -1
   19:             tzoffset = -tzoffset
               else:
    6:             tzsign = 1
   25:         tzoffset = tzsign * ( (tzoffset//100)*3600 + (tzoffset % 100)*60)
           # Daylight Saving Time flag is set to -1, since DST is unknown.
   28:     return yy, mm, dd, thh, tmm, tss, 0, 1, -1, tzoffset
       
       
    1: def parsedate(data):
           """Convert a time string to a time tuple."""
   15:     t = parsedate_tz(data)
   15:     if isinstance(t, tuple):
   15:         return t[:9]
           else:
>>>>>>         return t
       
       
    1: def mktime_tz(data):
           """Turn a 10-tuple as returned by parsedate_tz() into a POSIX timestamp."""
    2:     if data[9] is None:
               # No zone info, so localtime is better assumption than GMT
>>>>>>         return time.mktime(data[:8] + (-1,))
           else:
    2:         t = calendar.timegm(data)
    2:         return t - data[9]
       
       
    1: def quote(str):
           """Prepare string to be used in a quoted string.
       
           Turns backslash and double quote characters into quoted pairs.  These
           are the only characters that need to be quoted inside a quoted string.
           Does not add the surrounding double quotes.
           """
 1735:     return str.replace('\\', '\\\\').replace('"', '\\"')
       
       
    2: class AddrlistClass:
           """Address parser class by Ben Escoto.
       
           To understand what this class does, it helps to have a copy of RFC 2822 in
           front of you.
       
           Note: this class interface is deprecated and may be removed in the future.
           Use rfc822.AddressList instead.
    1:     """
       
    1:     def __init__(self, field):
               """Initialize a new instance.
       
               `field' is an unparsed address header field, containing
               one or more addresses.
               """
   62:         self.specials = '()<>@,:;.\"[]'
   62:         self.pos = 0
   62:         self.LWS = ' \t'
   62:         self.CR = '\r\n'
   62:         self.FWS = self.LWS + self.CR
   62:         self.atomends = self.specials + self.LWS + self.CR
               # Note that RFC 2822 now specifies `.' as obs-phrase, meaning that it
               # is obsolete syntax.  RFC 2822 requires that we recognize obsolete
               # syntax, so allow dots in phrases.
   62:         self.phraseends = self.atomends.replace('.', '')
   62:         self.field = field
   62:         self.commentlist = []
       
    1:     def gotonext(self):
               """Parse up to the start of the next address."""
  448:         while self.pos < len(self.field):
  378:             if self.field[self.pos] in self.LWS + '\n\r':
   12:                 self.pos += 1
  366:             elif self.field[self.pos] == '(':
>>>>>>                 self.commentlist.append(self.getcomment())
                   else:
  366:                 break
       
    1:     def getaddrlist(self):
               """Parse all addresses.
       
               Returns a list containing all of the addresses.
               """
   62:         result = []
  136:         while self.pos < len(self.field):
   74:             ad = self.getaddress()
   74:             if ad:
   62:                 result += ad
                   else:
   12:                 result.append(('', ''))
   62:         return result
       
    1:     def getaddress(self):
               """Parse the next address."""
   74:         self.commentlist = []
   74:         self.gotonext()
       
   74:         oldpos = self.pos
   74:         oldcl = self.commentlist
   74:         plist = self.getphraselist()
       
   74:         self.gotonext()
   74:         returnlist = []
       
   74:         if self.pos >= len(self.field):
                   # Bad email address technically, no domain.
    8:             if plist:
    8:                 returnlist = [(SPACE.join(self.commentlist), plist[0])]
       
   66:         elif self.field[self.pos] in '.@':
                   # email address is just an addrspec
                   # this isn't very efficient since we start over
   24:             self.pos = oldpos
   24:             self.commentlist = oldcl
   24:             addrspec = self.getaddrspec()
   24:             returnlist = [(SPACE.join(self.commentlist), addrspec)]
       
   42:         elif self.field[self.pos] == ':':
                   # address is a group
    6:             returnlist = []
       
    6:             fieldlen = len(self.field)
    6:             self.pos += 1
    6:             while self.pos < len(self.field):
    6:                 self.gotonext()
    6:                 if self.pos < fieldlen and self.field[self.pos] == ';':
    6:                     self.pos += 1
    6:                     break
>>>>>>                 returnlist = returnlist + self.getaddress()
       
   36:         elif self.field[self.pos] == '<':
                   # Address is a phrase then a route addr
   30:             routeaddr = self.getrouteaddr()
       
   30:             if self.commentlist:
                       returnlist = [(SPACE.join(plist) + ' (' +
    3:                                ' '.join(self.commentlist) + ')', routeaddr)]
                   else:
   27:                 returnlist = [(SPACE.join(plist), routeaddr)]
       
               else:
    6:             if plist:
>>>>>>                 returnlist = [(SPACE.join(self.commentlist), plist[0])]
    6:             elif self.field[self.pos] in self.specials:
    6:                 self.pos += 1
       
   74:         self.gotonext()
   74:         if self.pos < len(self.field) and self.field[self.pos] == ',':
    6:             self.pos += 1
   74:         return returnlist
       
    1:     def getrouteaddr(self):
               """Parse a route address (Return-path value).
       
               This method just skips all the route stuff and returns the addrspec.
               """
   30:         if self.field[self.pos] != '<':
>>>>>>             return
       
   30:         expectroute = False
   30:         self.pos += 1
   30:         self.gotonext()
   30:         adlist = ''
   30:         while self.pos < len(self.field):
   30:             if expectroute:
>>>>>>                 self.getdomain()
>>>>>>                 expectroute = False
   30:             elif self.field[self.pos] == '>':
    6:                 self.pos += 1
    6:                 break
   24:             elif self.field[self.pos] == '@':
>>>>>>                 self.pos += 1
>>>>>>                 expectroute = True
   24:             elif self.field[self.pos] == ':':
>>>>>>                 self.pos += 1
                   else:
   24:                 adlist = self.getaddrspec()
   24:                 self.pos += 1
   24:                 break
>>>>>>             self.gotonext()
       
   30:         return adlist
       
    1:     def getaddrspec(self):
               """Parse an RFC 2822 addr-spec."""
   48:         aslist = []
       
   48:         self.gotonext()
  130:         while self.pos < len(self.field):
  130:             if self.field[self.pos] == '.':
   15:                 aslist.append('.')
   15:                 self.pos += 1
  115:             elif self.field[self.pos] == '"':
    5:                 aslist.append('"%s"' % quote(self.getquote()))
  110:             elif self.field[self.pos] in self.atomends:
   48:                 break
                   else:
   62:                 aslist.append(self.getatom())
   82:             self.gotonext()
       
   48:         if self.pos >= len(self.field) or self.field[self.pos] != '@':
>>>>>>             return EMPTYSTRING.join(aslist)
       
   48:         aslist.append('@')
   48:         self.pos += 1
   48:         self.gotonext()
   48:         return EMPTYSTRING.join(aslist) + self.getdomain()
       
    1:     def getdomain(self):
               """Get the complete domain name from an address."""
   48:         sdlist = []
  198:         while self.pos < len(self.field):
  177:             if self.field[self.pos] in self.LWS:
    3:                 self.pos += 1
  174:             elif self.field[self.pos] == '(':
    3:                 self.commentlist.append(self.getcomment())
  171:             elif self.field[self.pos] == '[':
>>>>>>                 sdlist.append(self.getdomainliteral())
  171:             elif self.field[self.pos] == '.':
   48:                 self.pos += 1
   48:                 sdlist.append('.')
  123:             elif self.field[self.pos] in self.atomends:
   27:                 break
                   else:
   96:                 sdlist.append(self.getatom())
   48:         return EMPTYSTRING.join(sdlist)
       
    1:     def getdelimited(self, beginchar, endchars, allowcomments=True):
               """Parse a header fragment delimited by special characters.
       
               `beginchar' is the start character for the fragment.
               If self is not looking at an instance of `beginchar' then
               getdelimited returns the empty string.
       
               `endchars' is a sequence of allowable end-delimiting characters.
               Parsing stops when one of these is encountered.
       
               If `allowcomments' is non-zero, embedded RFC 2822 comments are allowed
               within the parsed fragment.
               """
   31:         if self.field[self.pos] != beginchar:
>>>>>>             return ''
       
   31:         slist = ['']
   31:         quote = False
   31:         self.pos += 1
  414:         while self.pos < len(self.field):
  414:             if quote:
   24:                 slist.append(self.field[self.pos])
   24:                 quote = False
  390:             elif self.field[self.pos] in endchars:
   31:                 self.pos += 1
   31:                 break
  359:             elif allowcomments and self.field[self.pos] == '(':
    3:                 slist.append(self.getcomment())
    3:                 continue        # have already advanced pos from getcomment
  356:             elif self.field[self.pos] == '\\':
   24:                 quote = True
                   else:
  332:                 slist.append(self.field[self.pos])
  380:             self.pos += 1
       
   31:         return EMPTYSTRING.join(slist)
       
    1:     def getquote(self):
               """Get a quote-delimited fragment from self's field."""
   22:         return self.getdelimited('"', '"\r', False)
       
    1:     def getcomment(self):
               """Get a parenthesis-delimited fragment from self's field."""
    9:         return self.getdelimited('(', ')\r', True)
       
    1:     def getdomainliteral(self):
               """Parse an RFC 2822 domain-literal."""
>>>>>>         return '[%s]' % self.getdelimited('[', ']\r', False)
       
    1:     def getatom(self, atomends=None):
               """Parse an RFC 2822 atom.
       
               Optional atomends specifies a different set of end token delimiters
               (the default is to use self.atomends).  This is used e.g. in
               getphraselist() since phrase endings must not include the `.' (which
               is legal in phrases)."""
  222:         atomlist = ['']
  222:         if atomends is None:
  158:             atomends = self.atomends
       
 1170:         while self.pos < len(self.field):
 1141:             if self.field[self.pos] in atomends:
  193:                 break
                   else:
  948:                 atomlist.append(self.field[self.pos])
  948:             self.pos += 1
       
  222:         return EMPTYSTRING.join(atomlist)
       
    1:     def getphraselist(self):
               """Parse a sequence of RFC 2822 phrases.
       
               A phrase is a sequence of words, which are in turn either RFC 2822
               atoms or quoted-strings.  Phrases are canonicalized by squeezing all
               runs of continuous whitespace into one space.
               """
   74:         plist = []
       
  203:         while self.pos < len(self.field):
  195:             if self.field[self.pos] in self.FWS:
   45:                 self.pos += 1
  150:             elif self.field[self.pos] == '"':
   17:                 plist.append(self.getquote())
  133:             elif self.field[self.pos] == '(':
    3:                 self.commentlist.append(self.getcomment())
  130:             elif self.field[self.pos] in self.phraseends:
   66:                 break
                   else:
   64:                 plist.append(self.getatom(self.phraseends))
       
   74:         return plist
       
    2: class AddressList(AddrlistClass):
    1:     """An AddressList encapsulates a list of parsed RFC 2822 addresses."""
    1:     def __init__(self, field):
   62:         AddrlistClass.__init__(self, field)
   62:         if field:
   62:             self.addresslist = self.getaddrlist()
               else:
>>>>>>             self.addresslist = []
       
    1:     def __len__(self):
>>>>>>         return len(self.addresslist)
       
    1:     def __add__(self, other):
               # Set union
>>>>>>         newaddr = AddressList(None)
>>>>>>         newaddr.addresslist = self.addresslist[:]
>>>>>>         for x in other.addresslist:
>>>>>>             if not x in self.addresslist:
>>>>>>                 newaddr.addresslist.append(x)
>>>>>>         return newaddr
       
    1:     def __iadd__(self, other):
               # Set union, in-place
>>>>>>         for x in other.addresslist:
>>>>>>             if not x in self.addresslist:
>>>>>>                 self.addresslist.append(x)
>>>>>>         return self
       
    1:     def __sub__(self, other):
               # Set difference
>>>>>>         newaddr = AddressList(None)
>>>>>>         for x in self.addresslist:
>>>>>>             if not x in other.addresslist:
>>>>>>                 newaddr.addresslist.append(x)
>>>>>>         return newaddr
       
    1:     def __isub__(self, other):
               # Set difference, in-place
>>>>>>         for x in other.addresslist:
>>>>>>             if x in self.addresslist:
>>>>>>                 self.addresslist.remove(x)
>>>>>>         return self
       
    1:     def __getitem__(self, index):
               # Make indexing, slices, and 'in' work
>>>>>>         return self.addresslist[index]
