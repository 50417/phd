    1: import os
    1: import unittest
    1: import shelve
    1: import glob
    1: from test import test_support
       
    1: test_support.import_module('anydbm', deprecated=True)
       
    2: class TestCase(unittest.TestCase):
       
    1:     fn = "shelftemp" + os.extsep + "db"
       
    1:     def test_close(self):
    1:         d1 = {}
    1:         s = shelve.Shelf(d1, protocol=2, writeback=False)
    1:         s['key1'] = [1,2,3,4]
    1:         self.assertEqual(s['key1'], [1,2,3,4])
    1:         self.assertEqual(len(s), 1)
    1:         s.close()
    1:         self.assertRaises(ValueError, len, s)
    1:         try:
    1:             s['key1']
    1:         except ValueError:
    1:             pass
               else:
>>>>>>             self.fail('Closed shelf should not find a key')
       
    1:     def test_ascii_file_shelf(self):
    1:         try:
    1:             s = shelve.open(self.fn, protocol=0)
    1:             s['key1'] = (1,2,3,4)
    1:             self.assertEqual(s['key1'], (1,2,3,4))
    1:             s.close()
               finally:
    2:             for f in glob.glob(self.fn+"*"):
    1:                 os.unlink(f)
       
    1:     def test_binary_file_shelf(self):
    1:         try:
    1:             s = shelve.open(self.fn, protocol=1)
    1:             s['key1'] = (1,2,3,4)
    1:             self.assertEqual(s['key1'], (1,2,3,4))
    1:             s.close()
               finally:
    2:             for f in glob.glob(self.fn+"*"):
    1:                 os.unlink(f)
       
    1:     def test_proto2_file_shelf(self):
    1:         try:
    1:             s = shelve.open(self.fn, protocol=2)
    1:             s['key1'] = (1,2,3,4)
    1:             self.assertEqual(s['key1'], (1,2,3,4))
    1:             s.close()
               finally:
    2:             for f in glob.glob(self.fn+"*"):
    1:                 os.unlink(f)
       
    1:     def test_in_memory_shelf(self):
    1:         d1 = {}
    1:         s = shelve.Shelf(d1, protocol=0)
    1:         s['key1'] = (1,2,3,4)
    1:         self.assertEqual(s['key1'], (1,2,3,4))
    1:         s.close()
    1:         d2 = {}
    1:         s = shelve.Shelf(d2, protocol=1)
    1:         s['key1'] = (1,2,3,4)
    1:         self.assertEqual(s['key1'], (1,2,3,4))
    1:         s.close()
       
    1:         self.assertEqual(len(d1), 1)
    1:         self.assertNotEqual(d1, d2)
       
    1:     def test_mutable_entry(self):
    1:         d1 = {}
    1:         s = shelve.Shelf(d1, protocol=2, writeback=False)
    1:         s['key1'] = [1,2,3,4]
    1:         self.assertEqual(s['key1'], [1,2,3,4])
    1:         s['key1'].append(5)
    1:         self.assertEqual(s['key1'], [1,2,3,4])
    1:         s.close()
       
    1:         d2 = {}
    1:         s = shelve.Shelf(d2, protocol=2, writeback=True)
    1:         s['key1'] = [1,2,3,4]
    1:         self.assertEqual(s['key1'], [1,2,3,4])
    1:         s['key1'].append(5)
    1:         self.assertEqual(s['key1'], [1,2,3,4,5])
    1:         s.close()
       
    1:         self.assertEqual(len(d1), 1)
    1:         self.assertEqual(len(d2), 1)
       
    1:     def test_writeback_also_writes_immediately(self):
               # Issue 5754
    1:         d = {}
    1:         s = shelve.Shelf(d, writeback=True)
    1:         s['key'] = [1]
    1:         p1 = d['key']  # Will give a KeyError if backing store not updated
    1:         s['key'].append(2)
    1:         s.close()
    1:         p2 = d['key']
    1:         self.assertNotEqual(p1, p2)  # Write creates new object in store
       
       
    1: from test import mapping_tests
       
    2: class TestShelveBase(mapping_tests.BasicTestMappingProtocol):
    1:     fn = "shelftemp.db"
    1:     counter = 0
    1:     def __init__(self, *args, **kw):
   84:         self._db = []
   84:         mapping_tests.BasicTestMappingProtocol.__init__(self, *args, **kw)
    1:     type2test = shelve.Shelf
    1:     def _reference(self):
   84:         return {"key1":"value1", "key2":2, "key3":(1,2,3)}
    1:     def _empty_mapping(self):
  156:         if self._in_mem:
   78:             x= shelve.Shelf({}, **self._args)
               else:
   78:             self.counter+=1
   78:             x= shelve.open(self.fn+str(self.counter), **self._args)
  156:         self._db.append(x)
  156:         return x
    1:     def tearDown(self):
  240:         for db in self._db:
  156:             db.close()
   84:         self._db = []
   84:         if not self._in_mem:
  120:             for f in glob.glob(self.fn+"*"):
   78:                 test_support.unlink(f)
       
    2: class TestAsciiFileShelve(TestShelveBase):
    1:     _args={'protocol':0}
    1:     _in_mem = False
    2: class TestBinaryFileShelve(TestShelveBase):
    1:     _args={'protocol':1}
    1:     _in_mem = False
    2: class TestProto2FileShelve(TestShelveBase):
    1:     _args={'protocol':2}
    1:     _in_mem = False
    2: class TestAsciiMemShelve(TestShelveBase):
    1:     _args={'protocol':0}
    1:     _in_mem = True
    2: class TestBinaryMemShelve(TestShelveBase):
    1:     _args={'protocol':1}
    1:     _in_mem = True
    2: class TestProto2MemShelve(TestShelveBase):
    1:     _args={'protocol':2}
    1:     _in_mem = True
       
    1: def test_main():
    1:     test_support.run_unittest(
    1:         TestAsciiFileShelve,
    1:         TestBinaryFileShelve,
    1:         TestProto2FileShelve,
    1:         TestAsciiMemShelve,
    1:         TestBinaryMemShelve,
    1:         TestProto2MemShelve,
    1:         TestCase
           )
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
