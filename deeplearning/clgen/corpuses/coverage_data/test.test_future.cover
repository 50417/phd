       # Test various flavors of legal and illegal future statements
       
    1: import unittest
    1: from test import test_support
    1: import re
       
    1: rx = re.compile('\((\S+).py, line (\d+)')
       
    1: def get_error_location(msg):
    7:     mo = rx.search(str(msg))
    7:     return mo.group(1, 2)
       
    2: class FutureTest(unittest.TestCase):
       
    1:     def test_future1(self):
    1:         test_support.unload('test_future1')
    1:         from test import test_future1
    1:         self.assertEqual(test_future1.result, 6)
       
    1:     def test_future2(self):
    1:         test_support.unload('test_future2')
    1:         from test import test_future2
    1:         self.assertEqual(test_future2.result, 6)
       
    1:     def test_future3(self):
    1:         test_support.unload('test_future3')
    1:         from test import test_future3
       
    1:     def test_badfuture3(self):
    1:         try:
    1:             from test import badsyntax_future3
    1:         except SyntaxError, msg:
    1:             self.assertEqual(get_error_location(msg), ("badsyntax_future3", '3'))
               else:
>>>>>>             self.fail("expected exception didn't occur")
       
    1:     def test_badfuture4(self):
    1:         try:
    1:             from test import badsyntax_future4
    1:         except SyntaxError, msg:
    1:             self.assertEqual(get_error_location(msg), ("badsyntax_future4", '3'))
               else:
>>>>>>             self.fail("expected exception didn't occur")
       
    1:     def test_badfuture5(self):
    1:         try:
    1:             from test import badsyntax_future5
    1:         except SyntaxError, msg:
    1:             self.assertEqual(get_error_location(msg), ("badsyntax_future5", '4'))
               else:
>>>>>>             self.fail("expected exception didn't occur")
       
    1:     def test_badfuture6(self):
    1:         try:
    1:             from test import badsyntax_future6
    1:         except SyntaxError, msg:
    1:             self.assertEqual(get_error_location(msg), ("badsyntax_future6", '3'))
               else:
>>>>>>             self.fail("expected exception didn't occur")
       
    1:     def test_badfuture7(self):
    1:         try:
    1:             from test import badsyntax_future7
    1:         except SyntaxError, msg:
    1:             self.assertEqual(get_error_location(msg), ("badsyntax_future7", '3'))
               else:
>>>>>>             self.fail("expected exception didn't occur")
       
    1:     def test_badfuture8(self):
    1:         try:
    1:             from test import badsyntax_future8
    1:         except SyntaxError, msg:
    1:             self.assertEqual(get_error_location(msg), ("badsyntax_future8", '3'))
               else:
>>>>>>             self.fail("expected exception didn't occur")
       
    1:     def test_badfuture9(self):
    1:         try:
    1:             from test import badsyntax_future9
    1:         except SyntaxError, msg:
    1:             self.assertEqual(get_error_location(msg), ("badsyntax_future9", '3'))
               else:
>>>>>>             self.fail("expected exception didn't occur")
       
    1:     def test_parserhack(self):
               # test that the parser.c::future_hack function works as expected
               # Note: although this test must pass, it's not testing the original
               #       bug as of 2.6 since the with statement is not optional and
               #       the parser hack disabled. If a new keyword is introduced in
               #       2.6, change this to refer to the new future import.
    1:         try:
    1:             exec "from __future__ import print_function; print 0"
    1:         except SyntaxError:
    1:             pass
               else:
>>>>>>             self.fail("syntax error didn't occur")
       
    1:         try:
    1:             exec "from __future__ import (print_function); print 0"
    1:         except SyntaxError:
    1:             pass
               else:
>>>>>>             self.fail("syntax error didn't occur")
       
    1:     def test_multiple_features(self):
    1:         test_support.unload("test.test_future5")
    1:         from test import test_future5
       
    1:     def test_unicode_literals_exec(self):
    1:         scope = {}
    1:         exec "from __future__ import unicode_literals; x = ''" in scope
    1:         self.assertIsInstance(scope["x"], unicode)
       
       
    1: def test_main():
    1:     test_support.run_unittest(FutureTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
