    1: from test.test_support import run_unittest
    1: from _locale import (setlocale, LC_NUMERIC, localeconv, Error)
    1: try:
    1:     from _locale import (RADIXCHAR, THOUSEP, nl_langinfo)
>>>>>> except ImportError:
>>>>>>     nl_langinfo = None
       
    1: import unittest
    1: import sys
    1: from platform import uname
       
    1: if uname()[0] == "Darwin":
    4:     maj, min, mic = [int(part) for part in uname()[2].split(".")]
    1:     if (maj, min, mic) < (8, 0, 0):
>>>>>>         raise unittest.SkipTest("locale support broken for OS X < 10.4")
       
    1: candidate_locales = ['es_UY', 'fr_FR', 'fi_FI', 'es_CO', 'pt_PT', 'it_IT',
    1:     'et_EE', 'es_PY', 'no_NO', 'nl_NL', 'lv_LV', 'el_GR', 'be_BY', 'fr_BE',
    1:     'ro_RO', 'ru_UA', 'ru_RU', 'es_VE', 'ca_ES', 'se_NO', 'es_EC', 'id_ID',
    1:     'ka_GE', 'es_CL', 'hu_HU', 'wa_BE', 'lt_LT', 'sl_SI', 'hr_HR', 'es_AR',
    1:     'es_ES', 'oc_FR', 'gl_ES', 'bg_BG', 'is_IS', 'mk_MK', 'de_AT', 'pt_BR',
    1:     'da_DK', 'nn_NO', 'cs_CZ', 'de_LU', 'es_BO', 'sq_AL', 'sk_SK', 'fr_CH',
    1:     'de_DE', 'sr_YU', 'br_FR', 'nl_BE', 'sv_FI', 'pl_PL', 'fr_CA', 'fo_FO',
    1:     'bs_BA', 'fr_LU', 'kl_GL', 'fa_IR', 'de_BE', 'sv_SE', 'it_CH', 'uk_UA',
    1:     'eu_ES', 'vi_VN', 'af_ZA', 'nb_NO', 'en_DK', 'tg_TJ', 'ps_AF.UTF-8', 'en_US',
    1:     'fr_FR.ISO8859-1', 'fr_FR.UTF-8', 'fr_FR.ISO8859-15@euro',
    1:     'ru_RU.KOI8-R', 'ko_KR.eucKR']
       
       # Workaround for MSVC6(debug) crash bug
    1: if "MSC v.1200" in sys.version:
>>>>>>     def accept(loc):
>>>>>>         a = loc.split(".")
>>>>>>         return not(len(a) == 2 and len(a[-1]) >= 9)
>>>>>>     candidate_locales = [loc for loc in candidate_locales if accept(loc)]
       
       # List known locale values to test against when available.
       # Dict formatted as ``<locale> : (<decimal_point>, <thousands_sep>)``.  If a
       # value is not known, use '' .
    1: known_numerics = {
    1:     'en_US': ('.', ','),
    1:     'de_DE' : (',', '.'),
           # The French thousands separator may be a breaking or non-breaking space
           # depending on the platform, so do not test it
    1:     'fr_FR' : (',', ''),
    1:     'ps_AF.UTF-8' : ('\xd9\xab', '\xd9\xac'),
       }
       
    2: class _LocaleTests(unittest.TestCase):
       
    1:     def setUp(self):
    4:         self.oldlocale = setlocale(LC_NUMERIC)
       
    1:     def tearDown(self):
    4:         setlocale(LC_NUMERIC, self.oldlocale)
       
           # Want to know what value was calculated, what it was compared against,
           # what function was used for the calculation, what type of data was used,
           # the locale that was supposedly set, and the actual locale that is set.
    1:     lc_numeric_err_msg = "%s != %s (%s for %s; set to %s, using %s)"
       
    1:     def numeric_tester(self, calc_type, calc_value, data_type, used_locale):
               """Compare calculation against known value, if available"""
  164:         try:
  164:             set_locale = setlocale(LC_NUMERIC)
>>>>>>         except Error:
>>>>>>             set_locale = "<not able to determine>"
  164:         known_value = known_numerics.get(used_locale,
  164:                                     ('', ''))[data_type == 'thousands_sep']
  164:         if known_value and calc_value:
    8:             self.assertEqual(calc_value, known_value,
    8:                                 self.lc_numeric_err_msg % (
    8:                                     calc_value, known_value,
    8:                                     calc_type, data_type, set_locale,
    8:                                     used_locale))
    8:             return True
       
    1:     @unittest.skipUnless(nl_langinfo, "nl_langinfo is not available")
           def test_lc_numeric_nl_langinfo(self):
               # Test nl_langinfo against known values
    1:         tested = False
   76:         for loc in candidate_locales:
   75:             try:
   75:                 setlocale(LC_NUMERIC, loc)
   34:             except Error:
   34:                 continue
   41:             for li, lc in ((RADIXCHAR, "decimal_point"),
  123:                             (THOUSEP, "thousands_sep")):
   82:                 if self.numeric_tester('nl_langinfo', nl_langinfo(li), lc, loc):
    4:                     tested = True
    1:         if not tested:
>>>>>>             self.skipTest('no suitable locales')
       
    1:     def test_lc_numeric_localeconv(self):
               # Test localeconv against known values
    1:         tested = False
   76:         for loc in candidate_locales:
   75:             try:
   75:                 setlocale(LC_NUMERIC, loc)
   34:             except Error:
   34:                 continue
   41:             formatting = localeconv()
  123:             for lc in ("decimal_point", "thousands_sep"):
   82:                 if self.numeric_tester('localeconv', formatting[lc], lc, loc):
    4:                     tested = True
    1:         if not tested:
>>>>>>             self.skipTest('no suitable locales')
       
    1:     @unittest.skipUnless(nl_langinfo, "nl_langinfo is not available")
           def test_lc_numeric_basic(self):
               # Test nl_langinfo against localeconv
    1:         tested = False
   76:         for loc in candidate_locales:
   75:             try:
   75:                 setlocale(LC_NUMERIC, loc)
   34:             except Error:
   34:                 continue
   41:             for li, lc in ((RADIXCHAR, "decimal_point"),
  123:                             (THOUSEP, "thousands_sep")):
   82:                 nl_radixchar = nl_langinfo(li)
   82:                 li_radixchar = localeconv()[lc]
   82:                 try:
   82:                     set_locale = setlocale(LC_NUMERIC)
>>>>>>                 except Error:
>>>>>>                     set_locale = "<not able to determine>"
   82:                 self.assertEqual(nl_radixchar, li_radixchar,
   82:                                 "%s (nl_langinfo) != %s (localeconv) "
                                       "(set to %s, using %s)" % (
   82:                                                 nl_radixchar, li_radixchar,
   82:                                                 loc, set_locale))
   82:                 tested = True
    1:         if not tested:
>>>>>>             self.skipTest('no suitable locales')
       
    1:     def test_float_parsing(self):
               # Bug #1391872: Test whether float parsing is okay on European
               # locales.
    1:         tested = False
   76:         for loc in candidate_locales:
   75:             try:
   75:                 setlocale(LC_NUMERIC, loc)
   34:             except Error:
   34:                 continue
       
                   # Ignore buggy locale databases. (Mac OS 10.4 and some other BSDs)
   41:             if loc == 'eu_ES' and localeconv()['decimal_point'] == "' ":
>>>>>>                 continue
       
   41:             self.assertEqual(int(eval('3.14') * 100), 314,
   41:                                 "using eval('3.14') failed for %s" % loc)
   41:             self.assertEqual(int(float('3.14') * 100), 314,
   41:                                 "using float('3.14') failed for %s" % loc)
   41:             if localeconv()['decimal_point'] != '.':
   39:                 self.assertRaises(ValueError, float,
   39:                                   localeconv()['decimal_point'].join(['1', '23']))
   41:             tested = True
    1:         if not tested:
>>>>>>             self.skipTest('no suitable locales')
       
       
    1: def test_main():
    1:     run_unittest(_LocaleTests)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
