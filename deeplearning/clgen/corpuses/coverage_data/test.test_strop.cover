    1: import warnings
    1: warnings.filterwarnings("ignore", "strop functions are obsolete;",
    1:                         DeprecationWarning,
    1:                         r'test.test_strop|unittest')
    1: import strop
    1: import unittest
    1: import sys
    1: from test import test_support
       
       
    2: class StropFunctionTestCase(unittest.TestCase):
       
    1:     def test_atoi(self):
    1:         self.assertTrue(strop.atoi(" 1 ") == 1)
    1:         self.assertRaises(ValueError, strop.atoi, " 1x")
    1:         self.assertRaises(ValueError, strop.atoi, " x1 ")
       
    1:     def test_atol(self):
    1:         self.assertTrue(strop.atol(" 1 ") == 1L)
    1:         self.assertRaises(ValueError, strop.atol, " 1x")
    1:         self.assertRaises(ValueError, strop.atol, " x1 ")
       
    1:     def test_atof(self):
    1:         self.assertTrue(strop.atof(" 1 ") == 1.0)
    1:         self.assertRaises(ValueError, strop.atof, " 1x")
    1:         self.assertRaises(ValueError, strop.atof, " x1 ")
       
    1:     def test_capitalize(self):
    1:         self.assertTrue(strop.capitalize(" hello ") == " hello ")
    1:         self.assertTrue(strop.capitalize("hello ") == "Hello ")
       
    1:     def test_find(self):
    1:         self.assertTrue(strop.find("abcdefghiabc", "abc") == 0)
    1:         self.assertTrue(strop.find("abcdefghiabc", "abc", 1) == 9)
    1:         self.assertTrue(strop.find("abcdefghiabc", "def", 4) == -1)
       
    1:     def test_rfind(self):
    1:         self.assertTrue(strop.rfind("abcdefghiabc", "abc") == 9)
       
    1:     def test_lower(self):
    1:         self.assertTrue(strop.lower("HeLLo") == "hello")
       
    1:     def test_upper(self):
    1:         self.assertTrue(strop.upper("HeLLo") == "HELLO")
       
    1:     def test_swapcase(self):
    1:         self.assertTrue(strop.swapcase("HeLLo cOmpUteRs") == "hEllO CoMPuTErS")
       
    1:     def test_strip(self):
    1:         self.assertTrue(strop.strip(" \t\n hello \t\n ") == "hello")
       
    1:     def test_lstrip(self):
    1:         self.assertTrue(strop.lstrip(" \t\n hello \t\n ") == "hello \t\n ")
       
    1:     def test_rstrip(self):
    1:         self.assertTrue(strop.rstrip(" \t\n hello \t\n ") == " \t\n hello")
       
    1:     def test_replace(self):
    1:         replace = strop.replace
    1:         self.assertTrue(replace("one!two!three!", '!', '@', 1)
    1:                      == "one@two!three!")
    1:         self.assertTrue(replace("one!two!three!", '!', '@', 2)
    1:                      == "one@two@three!")
    1:         self.assertTrue(replace("one!two!three!", '!', '@', 3)
    1:                      == "one@two@three@")
    1:         self.assertTrue(replace("one!two!three!", '!', '@', 4)
    1:                      == "one@two@three@")
       
               # CAUTION: a replace count of 0 means infinity only to strop,
               # not to the string .replace() method or to the
               # string.replace() function.
       
    1:         self.assertTrue(replace("one!two!three!", '!', '@', 0)
    1:                      == "one@two@three@")
    1:         self.assertTrue(replace("one!two!three!", '!', '@')
    1:                      == "one@two@three@")
    1:         self.assertTrue(replace("one!two!three!", 'x', '@')
    1:                      == "one!two!three!")
    1:         self.assertTrue(replace("one!two!three!", 'x', '@', 2)
    1:                      == "one!two!three!")
       
    1:     def test_split(self):
    1:         split = strop.split
    1:         self.assertTrue(split("this is the split function")
    1:                      == ['this', 'is', 'the', 'split', 'function'])
    1:         self.assertTrue(split("a|b|c|d", '|') == ['a', 'b', 'c', 'd'])
    1:         self.assertTrue(split("a|b|c|d", '|', 2) == ['a', 'b', 'c|d'])
    1:         self.assertTrue(split("a b c d", None, 1) == ['a', 'b c d'])
    1:         self.assertTrue(split("a b c d", None, 2) == ['a', 'b', 'c d'])
    1:         self.assertTrue(split("a b c d", None, 3) == ['a', 'b', 'c', 'd'])
    1:         self.assertTrue(split("a b c d", None, 4) == ['a', 'b', 'c', 'd'])
    1:         self.assertTrue(split("a b c d", None, 0) == ['a', 'b', 'c', 'd'])
    1:         self.assertTrue(split("a  b  c  d", None, 2) ==  ['a', 'b', 'c  d'])
       
    1:     def test_join(self):
    1:         self.assertTrue(strop.join(['a', 'b', 'c', 'd']) == 'a b c d')
    1:         self.assertTrue(strop.join(('a', 'b', 'c', 'd'), '') == 'abcd')
    1:         self.assertTrue(strop.join(Sequence()) == 'w x y z')
       
               # try a few long ones
    1:         self.assertTrue(strop.join(['x' * 100] * 100, ':')
    1:                      == (('x' * 100) + ":") * 99 + "x" * 100)
    1:         self.assertTrue(strop.join(('x' * 100,) * 100, ':')
    1:                      == (('x' * 100) + ":") * 99 + "x" * 100)
       
    1:     def test_maketrans(self):
    1:         self.assertTrue(strop.maketrans("abc", "xyz") == transtable)
    1:         self.assertRaises(ValueError, strop.maketrans, "abc", "xyzq")
       
    1:     def test_translate(self):
    1:         self.assertTrue(strop.translate("xyzabcdef", transtable, "def")
    1:                      == "xyzxyz")
       
    1:     def test_data_attributes(self):
    1:         strop.lowercase
    1:         strop.uppercase
    1:         strop.whitespace
       
    1:     @unittest.skipUnless(sys.maxsize == 2147483647, "only for 32-bit")
           def test_expandtabs_overflow(self):
>>>>>>         s = '\t\n' * 0x10000 + 'A' * 0x1000000
>>>>>>         self.assertRaises(OverflowError, strop.expandtabs, s, 0x10001)
       
    1:     @test_support.precisionbigmemtest(size=test_support._2G - 1, memuse=5)
           def test_stropjoin_huge_list(self, size):
    1:         a = "A" * size
    1:         try:
    1:             r = strop.join([a, a], a)
>>>>>>         except OverflowError:
>>>>>>             pass
               else:
    1:             self.assertEqual(len(r), len(a) * 3)
       
    1:     @test_support.precisionbigmemtest(size=test_support._2G - 1, memuse=1)
           def test_stropjoin_huge_tup(self, size):
    1:         a = "A" * size
    1:         try:
    1:             r = strop.join((a, a), a)
>>>>>>         except OverflowError:
>>>>>>             pass # acceptable on 32-bit
               else:
    1:             self.assertEqual(len(r), len(a) * 3)
       
    1:     @unittest.skipUnless(sys.maxsize == 2147483647, "only for 32-bit")
           def test_stropreplace_overflow(self):
>>>>>>         a = "A" * 0x10000
>>>>>>         self.assertRaises(MemoryError, strop.replace, a, "A", a)
       
    1: transtable = '\000\001\002\003\004\005\006\007\010\011\012\013\014\015\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037 !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`xyzdefghijklmnopqrstuvwxyz{|}~
       
       
       # join() now works with any sequence type.
    2: class Sequence:
    2:     def __init__(self): self.seq = 'wxyz'
    2:     def __len__(self): return len(self.seq)
    5:     def __getitem__(self, i): return self.seq[i]
       
       
    1: def test_main():
    1:     test_support.run_unittest(StropFunctionTestCase)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
