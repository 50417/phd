       """Temporary files.
       
       This module provides generic, low- and high-level interfaces for
       creating temporary files and directories.  All of the interfaces
       provided by this module can be used without fear of race conditions
       except for 'mktemp'.  'mktemp' is subject to race conditions and
       should not be used; it is provided for backward compatibility only.
       
       This module also provides some data items to the user:
       
         TMP_MAX  - maximum number of names that will be tried before
                    giving up.
         template - the default prefix for all temporary names.
                    You may change this to control the default prefix.
         tempdir  - If this is set to a string before the first use of
                    any routine from this module, it will be considered as
                    another candidate location to store temporary files.
       """
       
       __all__ = [
>>>>>>     "NamedTemporaryFile", "TemporaryFile", # high level safe interfaces
>>>>>>     "SpooledTemporaryFile",
>>>>>>     "mkstemp", "mkdtemp",                  # low level safe interfaces
>>>>>>     "mktemp",                              # deprecated unsafe interface
>>>>>>     "TMP_MAX", "gettempprefix",            # constants
>>>>>>     "tempdir", "gettempdir"
          ]
       
       
       # Imports.
       
>>>>>> import io as _io
>>>>>> import os as _os
>>>>>> import errno as _errno
>>>>>> from random import Random as _Random
       
>>>>>> try:
>>>>>>     from cStringIO import StringIO as _StringIO
>>>>>> except ImportError:
>>>>>>     from StringIO import StringIO as _StringIO
       
>>>>>> try:
>>>>>>     import fcntl as _fcntl
>>>>>> except ImportError:
>>>>>>     def _set_cloexec(fd):
>>>>>>         pass
       else:
>>>>>>     def _set_cloexec(fd):
 1320:         try:
 1319:             flags = _fcntl.fcntl(fd, _fcntl.F_GETFD, 0)
>>>>>>         except IOError:
>>>>>>             pass
               else:
                   # flags read successfully, modify
 1318:             flags |= _fcntl.FD_CLOEXEC
 1320:             _fcntl.fcntl(fd, _fcntl.F_SETFD, flags)
       
       
>>>>>> try:
>>>>>>     import thread as _thread
>>>>>> except ImportError:
>>>>>>     import dummy_thread as _thread
>>>>>> _allocate_lock = _thread.allocate_lock
       
>>>>>> _text_openflags = _os.O_RDWR | _os.O_CREAT | _os.O_EXCL
>>>>>> if hasattr(_os, 'O_NOINHERIT'):
>>>>>>     _text_openflags |= _os.O_NOINHERIT
>>>>>> if hasattr(_os, 'O_NOFOLLOW'):
>>>>>>     _text_openflags |= _os.O_NOFOLLOW
       
>>>>>> _bin_openflags = _text_openflags
>>>>>> if hasattr(_os, 'O_BINARY'):
>>>>>>     _bin_openflags |= _os.O_BINARY
       
>>>>>> if hasattr(_os, 'TMP_MAX'):
>>>>>>     TMP_MAX = _os.TMP_MAX
       else:
>>>>>>     TMP_MAX = 10000
       
>>>>>> template = "tmp"
       
       # Internal routines.
       
>>>>>> _once_lock = _allocate_lock()
       
>>>>>> if hasattr(_os, "lstat"):
>>>>>>     _stat = _os.lstat
>>>>>> elif hasattr(_os, "stat"):
>>>>>>     _stat = _os.stat
       else:
           # Fallback.  All we need is something that raises os.error if the
           # file doesn't exist.
>>>>>>     def _stat(fn):
>>>>>>         try:
>>>>>>             f = open(fn)
>>>>>>         except IOError:
>>>>>>             raise _os.error
>>>>>>         f.close()
       
>>>>>> def _exists(fn):
  118:     try:
  118:         _stat(fn)
  118:     except _os.error:
  118:         return False
           else:
>>>>>>         return True
       
>>>>>> class _RandomNameSequence:
           """An instance of _RandomNameSequence generates an endless
           sequence of unpredictable strings which can safely be incorporated
           into file names.  Each string is six characters long.  Multiple
           threads can safely use the same instance at the same time.
       
           _RandomNameSequence is an iterator."""
       
           characters = ("abcdefghijklmnopqrstuvwxyz" +
>>>>>>                   "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
>>>>>>                   "0123456789_")
       
>>>>>>     def __init__(self):
    8:         self.mutex = _allocate_lock()
    8:         self.normcase = _os.path.normcase
       
>>>>>>     @property
           def rng(self):
 2143:         cur_pid = _os.getpid()
 2143:         if cur_pid != getattr(self, '_rng_pid', None):
    8:             self._rng = _Random()
    8:             self._rng_pid = cur_pid
 2143:         return self._rng
       
>>>>>>     def __iter__(self):
    1:         return self
       
>>>>>>     def next(self):
 2143:         m = self.mutex
 2143:         c = self.characters
 2143:         choose = self.rng.choice
       
 2143:         m.acquire()
 2143:         try:
15001:             letters = [choose(c) for dummy in "123456"]
               finally:
 2143:             m.release()
       
 2079:         return self.normcase(''.join(letters))
       
>>>>>> def _candidate_tempdir_list():
           """Generate a list of candidate temporary directories which
           _get_default_tempdir will try."""
       
    2:     dirlist = []
       
           # First, try the environment.
    8:     for envname in 'TMPDIR', 'TEMP', 'TMP':
    6:         dirname = _os.getenv(envname)
    6:         if dirname: dirlist.append(dirname)
       
           # Failing that, try OS-specific locations.
    2:     if _os.name == 'riscos':
>>>>>>         dirname = _os.getenv('Wimp$ScrapDir')
>>>>>>         if dirname: dirlist.append(dirname)
    2:     elif _os.name == 'nt':
>>>>>>         dirlist.extend([ r'c:\temp', r'c:\tmp', r'\temp', r'\tmp' ])
           else:
    2:         dirlist.extend([ '/tmp', '/var/tmp', '/usr/tmp' ])
       
           # As a last resort, the current directory.
    2:     try:
    2:         dirlist.append(_os.getcwd())
>>>>>>     except (AttributeError, _os.error):
>>>>>>         dirlist.append(_os.curdir)
       
    2:     return dirlist
       
>>>>>> def _get_default_tempdir():
           """Calculate the default directory to use for temporary files.
           This routine should be called exactly once.
       
           We determine whether or not a candidate temp dir is usable by
           trying to create and write to a file in that directory.  If this
           is successful, the test file is deleted.  To prevent denial of
           service, the name of the test file must be randomized."""
       
    3:     namer = _RandomNameSequence()
    3:     dirlist = _candidate_tempdir_list()
    3:     flags = _text_openflags
       
    5:     for dir in dirlist:
    3:         if dir != _os.curdir:
    3:             dir = _os.path.normcase(_os.path.abspath(dir))
               # Try only a few names per directory.
    3:         for seq in xrange(100):
    3:             name = namer.next()
    3:             filename = _os.path.join(dir, name)
    3:             try:
    3:                 fd = _os.open(filename, flags, 0o600)
    3:                 try:
    3:                     try:
    3:                         with _io.open(fd, 'wb', closefd=False) as fp:
    2:                             fp.write(b'blat')
                           finally:
    3:                         _os.close(fd)
                       finally:
    3:                     _os.unlink(filename)
    1:                 return dir
    2:             except (OSError, IOError) as e:
    2:                 if e.args[0] == _errno.EEXIST:
>>>>>>                     continue
    2:                 if (_os.name == 'nt' and e.args[0] == _errno.EACCES and
>>>>>>                     _os.path.isdir(dir) and _os.access(dir, _os.W_OK)):
                           # On windows, when a directory with the chosen name already
                           # exists, EACCES error code is returned instead of EEXIST.
>>>>>>                     continue
    2:                 break # no point trying more names in this directory
    2:     raise IOError, (_errno.ENOENT,
    2:                     ("No usable temporary directory found in %s" % dirlist))
       
>>>>>> _name_sequence = None
       
>>>>>> def _get_candidate_names():
           """Common setup sequence for all user-callable interfaces."""
       
           global _name_sequence
 2020:     if _name_sequence is None:
    1:         _once_lock.acquire()
    1:         try:
    1:             if _name_sequence is None:
    1:                 _name_sequence = _RandomNameSequence()
               finally:
    1:             _once_lock.release()
 2021:     return _name_sequence
       
       
>>>>>> def _mkstemp_inner(dir, pre, suf, flags):
           """Code common to mkstemp, TemporaryFile, and NamedTemporaryFile."""
       
 1323:     names = _get_candidate_names()
       
 1324:     for seq in xrange(TMP_MAX):
 1326:         name = names.next()
 1327:         file = _os.path.join(dir, pre + name + suf)
 1327:         try:
 1327:             fd = _os.open(file, flags, 0600)
 1319:             _set_cloexec(fd)
 1320:             return (fd, _os.path.abspath(file))
    7:         except OSError, e:
    7:             if e.errno == _errno.EEXIST:
    4:                 continue # try again
    3:             if (_os.name == 'nt' and e.errno == _errno.EACCES and
>>>>>>                 _os.path.isdir(dir) and _os.access(dir, _os.W_OK)):
                       # On windows, when a directory with the chosen name already
                       # exists, EACCES error code is returned instead of EEXIST.
>>>>>>                 continue
    3:             raise
       
>>>>>>     raise IOError, (_errno.EEXIST, "No usable temporary file name found")
       
       
       # User visible interfaces.
       
>>>>>> def gettempprefix():
           """Accessor for tempdir.template."""
    2:     return template
       
>>>>>> tempdir = None
       
>>>>>> def gettempdir():
           """Accessor for tempfile.tempdir."""
           global tempdir
 1910:     if tempdir is None:
>>>>>>         _once_lock.acquire()
>>>>>>         try:
>>>>>>             if tempdir is None:
>>>>>>                 tempdir = _get_default_tempdir()
               finally:
>>>>>>             _once_lock.release()
 1910:     return tempdir
       
>>>>>> def mkstemp(suffix="", prefix=template, dir=None, text=False):
           """User-callable function to create and return a unique temporary
           file.  The return value is a pair (fd, name) where fd is the
           file descriptor returned by os.open, and name is the filename.
       
           If 'suffix' is specified, the file name will end with that suffix,
           otherwise there will be no suffix.
       
           If 'prefix' is specified, the file name will begin with that prefix,
           otherwise a default prefix is used.
       
           If 'dir' is specified, the file will be created in that directory,
           otherwise a default directory is used.
       
           If 'text' is specified and true, the file is opened in text
           mode.  Else (the default) the file is opened in binary mode.  On
           some operating systems, this makes no difference.
       
           The file is readable and writable only by the creating user ID.
           If the operating system uses permission bits to indicate whether a
           file is executable, the file is executable by no one. The file
           descriptor is not inherited by children of this process.
       
           Caller is responsible for deleting the file when done with it.
           """
       
  114:     if dir is None:
  107:         dir = gettempdir()
       
  114:     if text:
>>>>>>         flags = _text_openflags
           else:
  114:         flags = _bin_openflags
       
  114:     return _mkstemp_inner(dir, prefix, suffix, flags)
       
       
>>>>>> def mkdtemp(suffix="", prefix=template, dir=None):
           """User-callable function to create and return a unique temporary
           directory.  The return value is the pathname of the directory.
       
           Arguments are as for mkstemp, except that the 'text' argument is
           not accepted.
       
           The directory is readable, writable, and searchable only by the
           creating user.
       
           Caller is responsible for deleting the directory when done with it.
           """
       
  585:     if dir is None:
  461:         dir = gettempdir()
       
  585:     names = _get_candidate_names()
       
  589:     for seq in xrange(TMP_MAX):
  589:         name = names.next()
  589:         file = _os.path.join(dir, prefix + name + suffix)
  589:         try:
  589:             _os.mkdir(file, 0700)
  582:             return file
    7:         except OSError, e:
    7:             if e.errno == _errno.EEXIST:
    4:                 continue # try again
    3:             if (_os.name == 'nt' and e.errno == _errno.EACCES and
>>>>>>                 _os.path.isdir(dir) and _os.access(dir, _os.W_OK)):
                       # On windows, when a directory with the chosen name already
                       # exists, EACCES error code is returned instead of EEXIST.
>>>>>>                 continue
    3:             raise
       
>>>>>>     raise IOError, (_errno.EEXIST, "No usable temporary directory name found")
       
>>>>>> def mktemp(suffix="", prefix=template, dir=None):
           """User-callable function to return a unique temporary file name.  The
           file is not created.
       
           Arguments are as for mkstemp, except that the 'text' argument is
           not accepted.
       
           This function is unsafe and should not be used.  The file name
           refers to a file that did not exist at some point, but by the time
           you get around to creating it, someone else may have beaten you to
           the punch.
           """
       
       ##    from warnings import warn as _warn
       ##    _warn("mktemp is a potential security risk to your program",
       ##          RuntimeWarning, stacklevel=2)
       
  118:     if dir is None:
   10:         dir = gettempdir()
       
  118:     names = _get_candidate_names()
  118:     for seq in xrange(TMP_MAX):
  118:         name = names.next()
  118:         file = _os.path.join(dir, prefix + name + suffix)
  118:         if not _exists(file):
  118:             return file
       
>>>>>>     raise IOError, (_errno.EEXIST, "No usable temporary filename found")
       
       
>>>>>> class _TemporaryFileWrapper:
           """Temporary file wrapper
       
           This class provides a wrapper around files opened for
           temporary use.  In particular, it seeks to automatically
           remove the file when it is no longer needed.
           """
       
>>>>>>     def __init__(self, file, name, delete=True):
   14:         self.file = file
   14:         self.name = name
   14:         self.close_called = False
   14:         self.delete = delete
       
>>>>>>     def __getattr__(self, name):
               # Attribute lookups are delegated to the underlying file
               # and cached for non-numeric results
               # (i.e. methods are cached, closed and friends are not)
    6:         file = self.__dict__['file']
    6:         a = getattr(file, name)
    6:         if not issubclass(type(a), type(0)):
    6:             setattr(self, name, a)
    6:         return a
       
           # The underlying __enter__ method returns the wrong object
           # (self.file) so override it to return the wrapper
>>>>>>     def __enter__(self):
    2:         self.file.__enter__()
    1:         return self
       
           # NT provides delete-on-close as a primitive, so we don't need
           # the wrapper to do anything special.  We still use it so that
           # file.name is useful (i.e. not "(fdopen)") with NamedTemporaryFile.
>>>>>>     if _os.name != 'nt':
               # Cache the unlinker so we don't get spurious errors at
               # shutdown when the module-level "os" is None'd out.  Note
               # that this must be referenced as self.unlink, because the
               # name TemporaryFileWrapper may also get None'd out before
               # __del__ is called.
>>>>>>         unlink = _os.unlink
       
>>>>>>         def close(self):
   24:             if not self.close_called:
   14:                 self.close_called = True
   14:                 try:
   14:                     self.file.close()
                       finally:
   14:                     if self.delete:
   12:                         self.unlink(self.name)
       
>>>>>>         def __del__(self):
   14:             self.close()
       
               # Need to trap __exit__ as well to ensure the file gets
               # deleted when used in a with statement
>>>>>>         def __exit__(self, exc, value, tb):
    1:             result = self.file.__exit__(exc, value, tb)
    1:             self.close()
    1:             return result
           else:
>>>>>>         def __exit__(self, exc, value, tb):
>>>>>>             self.file.__exit__(exc, value, tb)
       
       
>>>>>> def NamedTemporaryFile(mode='w+b', bufsize=-1, suffix="",
>>>>>>                        prefix=template, dir=None, delete=True):
           """Create and return a temporary file.
           Arguments:
           'prefix', 'suffix', 'dir' -- as for mkstemp.
           'mode' -- the mode argument to os.fdopen (default "w+b").
           'bufsize' -- the buffer size argument to os.fdopen (default -1).
           'delete' -- whether the file is deleted on close (default True).
           The file is created as mkstemp() would do it.
       
           Returns an object with a file-like interface; the name of the file
           is accessible as its 'name' attribute.  The file will be automatically
           deleted when it is closed unless the 'delete' argument is set to False.
           """
       
   16:     if dir is None:
    8:         dir = gettempdir()
       
   16:     if 'b' in mode:
   15:         flags = _bin_openflags
           else:
    1:         flags = _text_openflags
       
           # Setting O_TEMPORARY in the flags causes the OS to delete
           # the file when it is closed.  This is only supported by Windows.
   16:     if _os.name == 'nt' and delete:
>>>>>>         flags |= _os.O_TEMPORARY
       
   16:     (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags)
   16:     try:
   16:         file = _os.fdopen(fd, mode, bufsize)
   14:         return _TemporaryFileWrapper(file, name, delete)
    2:     except BaseException:
    2:         _os.unlink(name)
    2:         _os.close(fd)
    2:         raise
       
>>>>>> if _os.name != 'posix' or _os.sys.platform == 'cygwin':
           # On non-POSIX and Cygwin systems, assume that we cannot unlink a file
           # while it is open.
>>>>>>     TemporaryFile = NamedTemporaryFile
       
       else:
>>>>>>     def TemporaryFile(mode='w+b', bufsize=-1, suffix="",
>>>>>>                       prefix=template, dir=None):
               """Create and return a temporary file.
               Arguments:
               'prefix', 'suffix', 'dir' -- as for mkstemp.
               'mode' -- the mode argument to os.fdopen (default "w+b").
               'bufsize' -- the buffer size argument to os.fdopen (default -1).
               The file is created as mkstemp() would do it.
       
               Returns an object with a file-like interface.  The file has no
               name, and will cease to exist when it is closed.
               """
       
 1079:         if dir is None:
 1071:             dir = gettempdir()
       
 1079:         if 'b' in mode:
 1074:             flags = _bin_openflags
               else:
    5:             flags = _text_openflags
       
 1079:         (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags)
 1079:         try:
 1079:             _os.unlink(name)
 1079:             return _os.fdopen(fd, mode, bufsize)
>>>>>>         except:
>>>>>>             _os.close(fd)
>>>>>>             raise
       
>>>>>> class SpooledTemporaryFile:
           """Temporary file wrapper, specialized to switch from
           StringIO to a real file when it exceeds a certain size or
           when a fileno is needed.
           """
>>>>>>     _rolled = False
       
>>>>>>     def __init__(self, max_size=0, mode='w+b', bufsize=-1,
>>>>>>                  suffix="", prefix=template, dir=None):
   17:         self._file = _StringIO()
   17:         self._max_size = max_size
   17:         self._rolled = False
   17:         self._TemporaryFileArgs = (mode, bufsize, suffix, prefix, dir)
       
>>>>>>     def _check(self, file):
   23:         if self._rolled: return
   22:         max_size = self._max_size
   22:         if max_size and file.tell() > max_size:
   10:             self.rollover()
       
>>>>>>     def rollover(self):
   11:         if self._rolled: return
   11:         file = self._file
   11:         newfile = self._file = TemporaryFile(*self._TemporaryFileArgs)
   11:         del self._TemporaryFileArgs
       
   11:         newfile.write(file.getvalue())
   11:         newfile.seek(file.tell(), 0)
       
   11:         self._rolled = True
       
           # The method caching trick from NamedTemporaryFile
           # won't work here, because _file may change from a
           # _StringIO instance to a real file. So we list
           # all the methods directly.
       
           # Context management protocol
>>>>>>     def __enter__(self):
    6:         if self._file.closed:
    3:             raise ValueError("Cannot enter context with closed file")
    3:         return self
       
>>>>>>     def __exit__(self, exc, value, tb):
    3:         self._file.close()
       
           # file protocol
>>>>>>     def __iter__(self):
>>>>>>         return self._file.__iter__()
       
>>>>>>     def close(self):
    7:         self._file.close()
       
>>>>>>     @property
           def closed(self):
    6:         return self._file.closed
       
>>>>>>     def fileno(self):
    1:         self.rollover()
    1:         return self._file.fileno()
       
>>>>>>     def flush(self):
    2:         self._file.flush()
       
>>>>>>     def isatty(self):
>>>>>>         return self._file.isatty()
       
>>>>>>     @property
           def mode(self):
    2:         try:
    2:             return self._file.mode
    1:         except AttributeError:
    1:             return self._TemporaryFileArgs[0]
       
>>>>>>     @property
           def name(self):
    3:         try:
    3:             return self._file.name
    1:         except AttributeError:
    1:             return None
       
>>>>>>     def next(self):
>>>>>>         return self._file.next
       
>>>>>>     def read(self, *args):
    2:         return self._file.read(*args)
       
>>>>>>     def readline(self, *args):
>>>>>>         return self._file.readline(*args)
       
>>>>>>     def readlines(self, *args):
>>>>>>         return self._file.readlines(*args)
       
>>>>>>     def seek(self, *args):
   10:         self._file.seek(*args)
       
>>>>>>     @property
           def softspace(self):
>>>>>>         return self._file.softspace
       
>>>>>>     def tell(self):
>>>>>>         return self._file.tell()
       
>>>>>>     def truncate(self):
>>>>>>         self._file.truncate()
       
>>>>>>     def write(self, s):
   21:         file = self._file
   21:         rv = file.write(s)
   21:         self._check(file)
   21:         return rv
       
>>>>>>     def writelines(self, iterable):
    2:         file = self._file
    2:         rv = file.writelines(iterable)
    2:         self._check(file)
    2:         return rv
       
>>>>>>     def xreadlines(self, *args):
    2:         if hasattr(self._file, 'xreadlines'):  # real file
    1:             return iter(self._file)
               else:  # StringIO()
    1:             return iter(self._file.readlines(*args))
