>>>>>> import signal
>>>>>> import weakref
       
>>>>>> from functools import wraps
       
>>>>>> __unittest = True
       
       
>>>>>> class _InterruptHandler(object):
>>>>>>     def __init__(self, default_handler):
   34:         self.called = False
   34:         self.original_handler = default_handler
   34:         if isinstance(default_handler, (int, long)):
   16:             if default_handler == signal.SIG_DFL:
                       # Pretend it's signal.default_int_handler instead.
    9:                 default_handler = signal.default_int_handler
    7:             elif default_handler == signal.SIG_IGN:
                       # Not quite the same thing as SIG_IGN, but the closest we
                       # can make it: do nothing.
    7:                 def default_handler(unused_signum, unused_frame):
>>>>>>                     pass
                   else:
>>>>>>                 raise TypeError("expected SIGINT signal handler to be "
                                       "signal.SIG_IGN, signal.SIG_DFL, or a "
                                       "callable object")
   34:         self.default_handler = default_handler
       
>>>>>>     def __call__(self, signum, frame):
   25:         installed_handler = signal.getsignal(signal.SIGINT)
   25:         if installed_handler is not self:
                   # if we aren't the installed handler, then delegate immediately
                   # to the default handler
    3:             self.default_handler(signum, frame)
       
   22:         if self.called:
    3:             self.default_handler(signum, frame)
   19:         self.called = True
   34:         for result in _results.keys():
   15:             result.stop()
       
>>>>>> _results = weakref.WeakKeyDictionary()
>>>>>> def registerResult(result):
   54:     _results[result] = 1
       
>>>>>> def removeResult(result):
    8:     return bool(_results.pop(result, None))
       
>>>>>> _interrupt_handler = None
>>>>>> def installHandler():
           global _interrupt_handler
   34:     if _interrupt_handler is None:
   34:         default_handler = signal.getsignal(signal.SIGINT)
   34:         _interrupt_handler = _InterruptHandler(default_handler)
   34:         signal.signal(signal.SIGINT, _interrupt_handler)
       
       
>>>>>> def removeHandler(method=None):
   16:     if method is not None:
    4:         @wraps(method)
               def inner(*args, **kwargs):
    4:             initial = signal.getsignal(signal.SIGINT)
    4:             removeHandler()
    4:             try:
    4:                 return method(*args, **kwargs)
                   finally:
    4:                 signal.signal(signal.SIGINT, initial)
    4:         return inner
       
           global _interrupt_handler
   12:     if _interrupt_handler is not None:
   12:         signal.signal(signal.SIGINT, _interrupt_handler.original_handler)
