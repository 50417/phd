    1: import unittest
    1: import pickle
    1: from ctypes import *
    1: import _ctypes_test
    1: dll = CDLL(_ctypes_test.__file__)
       
    2: class X(Structure):
    1:     _fields_ = [("a", c_int), ("b", c_double)]
    1:     init_called = 0
    1:     def __init__(self, *args, **kw):
    6:         X.init_called += 1
    6:         self.x = 42
       
    2: class Y(X):
    1:     _fields_ = [("str", c_char_p)]
       
    2: class PickleTest:
    1:     def dumps(self, item):
   36:         return pickle.dumps(item, self.proto)
       
    1:     def loads(self, item):
    9:         return pickle.loads(item)
       
    1:     def test_simple(self):
    3:         for src in [
    3:             c_int(42),
    9:             c_double(3.14),
                   ]:
    6:             dst = self.loads(self.dumps(src))
    6:             self.assertEqual(src.__dict__, dst.__dict__)
    6:             self.assertEqual(memoryview(src).tobytes(),
    6:                                  memoryview(dst).tobytes())
       
    1:     def test_struct(self):
    3:         X.init_called = 0
       
    3:         x = X()
    3:         x.a = 42
    3:         self.assertEqual(X.init_called, 1)
       
    3:         y = self.loads(self.dumps(x))
       
               # loads must NOT call __init__
    3:         self.assertEqual(X.init_called, 1)
       
               # ctypes instances are identical when the instance __dict__
               # and the memory buffer are identical
    3:         self.assertEqual(y.__dict__, x.__dict__)
    3:         self.assertEqual(memoryview(y).tobytes(),
    3:                              memoryview(x).tobytes())
       
    1:     def test_unpickable(self):
               # ctypes objects that are pointers or contain pointers are
               # unpickable.
    6:         self.assertRaises(ValueError, lambda: self.dumps(Y()))
       
    3:         prototype = CFUNCTYPE(c_int)
       
    3:         for item in [
    3:             c_char_p(),
    3:             c_wchar_p(),
    3:             c_void_p(),
    3:             pointer(c_int(42)),
    3:             dll._testfunc_p_p,
   21:             prototype(lambda: 42),
                   ]:
   36:             self.assertRaises(ValueError, lambda: self.dumps(item))
       
    1:     def test_wchar(self):
    3:         self.dumps(c_char(b"x"))
               # Issue 5049
    3:         self.dumps(c_wchar(u"x"))
       
    4: for proto in range(pickle.HIGHEST_PROTOCOL + 1):
    3:     name = 'PickleTest_%s' % proto
    3:     globals()[name] = type(name,
    3:                            (PickleTest, unittest.TestCase),
    3:                            {'proto': proto})
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
