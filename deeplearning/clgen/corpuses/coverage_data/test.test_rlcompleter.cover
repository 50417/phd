    1: from test import test_support as support
    1: import unittest
    1: import __builtin__ as builtins
    1: import rlcompleter
       
    2: class CompleteMe(object):
    1:     """ Trivial class used in testing rlcompleter.Completer. """
    1:     spam = 1
       
       
    2: class TestRlcompleter(unittest.TestCase):
    1:     def setUp(self):
    4:         self.stdcompleter = rlcompleter.Completer()
    4:         self.completer = rlcompleter.Completer(dict(spam=int,
    4:                                                     egg=str,
    4:                                                     CompleteMe=CompleteMe))
       
               # forces stdcompleter to bind builtins namespace
    4:         self.stdcompleter.complete('', 0)
       
    1:     def test_namespace(self):
    2:         class A(dict):
    1:             pass
    2:         class B(list):
    1:             pass
       
    1:         self.assertTrue(self.stdcompleter.use_main_ns)
    1:         self.assertFalse(self.completer.use_main_ns)
    1:         self.assertFalse(rlcompleter.Completer(A()).use_main_ns)
    1:         self.assertRaises(TypeError, rlcompleter.Completer, B((1,)))
       
    1:     def test_global_matches(self):
               # test with builtins namespace
    1:         self.assertEqual(sorted(self.stdcompleter.global_matches('di')),
  145:                          [x+'(' for x in dir(builtins) if x.startswith('di')])
    1:         self.assertEqual(sorted(self.stdcompleter.global_matches('st')),
  145:                          [x+'(' for x in dir(builtins) if x.startswith('st')])
    1:         self.assertEqual(self.stdcompleter.global_matches('akaksajadhak'), [])
       
               # test with a customized namespace
    1:         self.assertEqual(self.completer.global_matches('CompleteM'),
    1:                          ['CompleteMe('])
    1:         self.assertEqual(self.completer.global_matches('eg'),
    1:                          ['egg('])
               # XXX: see issue5256
    1:         self.assertEqual(self.completer.global_matches('CompleteM'),
    1:                          ['CompleteMe('])
       
    1:     def test_attr_matches(self):
               # test with builtins namespace
    1:         self.assertEqual(self.stdcompleter.attr_matches('str.s'),
   72:                          ['str.{}('.format(x) for x in dir(str)
   71:                           if x.startswith('s')])
    1:         self.assertEqual(self.stdcompleter.attr_matches('tuple.foospamegg'), [])
       
               # test with a customized namespace
    1:         self.assertEqual(self.completer.attr_matches('CompleteMe.sp'),
    1:                          ['CompleteMe.spam'])
    1:         self.assertEqual(self.completer.attr_matches('Completeme.egg'), [])
       
    1:         CompleteMe.me = CompleteMe
    1:         self.assertEqual(self.completer.attr_matches('CompleteMe.me.me.sp'),
    1:                          ['CompleteMe.me.me.spam'])
    1:         self.assertEqual(self.completer.attr_matches('egg.s'),
   72:                          ['egg.{}('.format(x) for x in dir(str)
   71:                           if x.startswith('s')])
       
    1:     def test_excessive_getattr(self):
               # Ensure getattr() is invoked no more than once per attribute
    2:         class Foo:
    1:             calls = 0
    1:             @property
                   def bar(self):
    1:                 self.calls += 1
    1:                 return None
    1:         f = Foo()
    1:         completer = rlcompleter.Completer(dict(f=f))
    1:         self.assertEqual(completer.complete('f.b', 0), 'f.bar')
    1:         self.assertEqual(f.calls, 1)
       
    1: def test_main():
    1:     support.run_unittest(TestRlcompleter)
       
    1:     def test_duplicate_globals(self):
>>>>>>         namespace = {
>>>>>>             'False': None,  # Keyword vs builtin vs namespace
>>>>>>             'assert': None,  # Keyword vs namespace
>>>>>>             'try': lambda: None,  # Keyword vs callable
>>>>>>             'memoryview': None,  # Callable builtin vs non-callable
>>>>>>             'Ellipsis': lambda: None,  # Non-callable builtin vs callable
               }
>>>>>>         completer = rlcompleter.Completer(namespace)
>>>>>>         self.assertEqual(completer.complete('False', 0), 'False')
>>>>>>         self.assertIsNone(completer.complete('False', 1))  # No duplicates
>>>>>>         self.assertEqual(completer.complete('assert', 0), 'assert')
>>>>>>         self.assertIsNone(completer.complete('assert', 1))
>>>>>>         self.assertEqual(completer.complete('try', 0), 'try')
>>>>>>         self.assertIsNone(completer.complete('try', 1))
               # No opening bracket "(" because we overrode the built-in class
>>>>>>         self.assertEqual(completer.complete('memoryview', 0), 'memoryview')
>>>>>>         self.assertIsNone(completer.complete('memoryview', 1))
>>>>>>         self.assertEqual(completer.complete('Ellipsis', 0), 'Ellipsis(')
>>>>>>         self.assertIsNone(completer.complete('Ellipsis', 1))
       
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
