    1: """Tests for distutils.text_file."""
    1: import os
    1: import unittest
    1: from distutils.text_file import TextFile
    1: from distutils.tests import support
    1: from test.test_support import run_unittest
       
       TEST_DATA = """# test file
       
       line 3 \\
       # intervening comment
         continues on next line
    1: """
       
    2: class TextFileTestCase(support.TempdirManager, unittest.TestCase):
       
    1:     def test_class(self):
               # old tests moved from text_file.__main__
               # so they are really called by the buildbots
       
               # result 1: no fancy options
    1:         result1 = ['# test file\n', '\n', 'line 3 \\\n',
    1:                    '# intervening comment\n',
    1:                    '  continues on next line\n']
       
               # result 2: just strip comments
    1:         result2 = ["\n",
    1:                    "line 3 \\\n",
    1:                    "  continues on next line\n"]
       
               # result 3: just strip blank lines
    1:         result3 = ["# test file\n",
    1:                    "line 3 \\\n",
    1:                    "# intervening comment\n",
    1:                    "  continues on next line\n"]
       
               # result 4: default, strip comments, blank lines,
               # and trailing whitespace
    1:         result4 = ["line 3 \\",
    1:                    "  continues on next line"]
       
               # result 5: strip comments and blanks, plus join lines (but don't
               # "collapse" joined lines
    1:         result5 = ["line 3   continues on next line"]
       
               # result 6: strip comments and blanks, plus join lines (and
               # "collapse" joined lines
    1:         result6 = ["line 3 continues on next line"]
       
    1:         def test_input(count, description, file, expected_result):
    6:             result = file.readlines()
    6:             self.assertEqual(result, expected_result)
       
    1:         tmpdir = self.mkdtemp()
    1:         filename = os.path.join(tmpdir, "test.txt")
    1:         out_file = open(filename, "w")
    1:         try:
    1:             out_file.write(TEST_DATA)
               finally:
    1:             out_file.close()
       
    1:         in_file = TextFile(filename, strip_comments=0, skip_blanks=0,
    1:                            lstrip_ws=0, rstrip_ws=0)
    1:         try:
    1:             test_input(1, "no processing", in_file, result1)
               finally:
    1:             in_file.close()
       
    1:         in_file = TextFile(filename, strip_comments=1, skip_blanks=0,
    1:                            lstrip_ws=0, rstrip_ws=0)
    1:         try:
    1:             test_input(2, "strip comments", in_file, result2)
               finally:
    1:             in_file.close()
       
    1:         in_file = TextFile(filename, strip_comments=0, skip_blanks=1,
    1:                            lstrip_ws=0, rstrip_ws=0)
    1:         try:
    1:             test_input(3, "strip blanks", in_file, result3)
               finally:
    1:             in_file.close()
       
    1:         in_file = TextFile(filename)
    1:         try:
    1:             test_input(4, "default processing", in_file, result4)
               finally:
    1:             in_file.close()
       
    1:         in_file = TextFile(filename, strip_comments=1, skip_blanks=1,
    1:                            join_lines=1, rstrip_ws=1)
    1:         try:
    1:             test_input(5, "join lines without collapsing", in_file, result5)
               finally:
    1:             in_file.close()
       
    1:         in_file = TextFile(filename, strip_comments=1, skip_blanks=1,
    1:                            join_lines=1, rstrip_ws=1, collapse_join=1)
    1:         try:
    1:             test_input(6, "join lines with collapsing", in_file, result6)
               finally:
    1:             in_file.close()
       
    1: def test_suite():
    1:     return unittest.makeSuite(TextFileTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     run_unittest(test_suite())
