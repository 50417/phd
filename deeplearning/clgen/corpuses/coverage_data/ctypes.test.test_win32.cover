       # Windows specific tests
       
    1: from ctypes import *
    1: from ctypes.test import requires
    1: import unittest, sys
    1: from test import test_support as support
       
    1: import _ctypes_test
       
       # Only windows 32-bit has different calling conventions.
    2: @unittest.skipUnless(sys.platform == "win32", 'Windows-specific test')
    1: @unittest.skipUnless(sizeof(c_void_p) == sizeof(c_int),
    1:                      "sizeof c_void_p and c_int differ")
    1: class WindowsTestCase(unittest.TestCase):
    1:     def test_callconv_1(self):
               # Testing stdcall function
       
>>>>>>         IsWindow = windll.user32.IsWindow
               # ValueError: Procedure probably called with not enough arguments
               # (4 bytes missing)
>>>>>>         self.assertRaises(ValueError, IsWindow)
       
               # This one should succeed...
>>>>>>         self.assertEqual(0, IsWindow(0))
       
               # ValueError: Procedure probably called with too many arguments
               # (8 bytes in excess)
>>>>>>         self.assertRaises(ValueError, IsWindow, 0, 0, 0)
       
    1:     def test_callconv_2(self):
               # Calling stdcall function as cdecl
       
>>>>>>         IsWindow = cdll.user32.IsWindow
       
               # ValueError: Procedure called with not enough arguments
               # (4 bytes missing) or wrong calling convention
>>>>>>         self.assertRaises(ValueError, IsWindow, None)
       
    2: @unittest.skipUnless(sys.platform == "win32", 'Windows-specific test')
    1: class FunctionCallTestCase(unittest.TestCase):
    1:     @unittest.skipUnless('MSC' in sys.version, "SEH only supported by MSC")
    1:     @unittest.skipIf(sys.executable.endswith('_d.exe'),
    1:                      "SEH not enabled in debug builds")
           def test_SEH(self):
>>>>>>         requires("SEH")
               # Call functions with invalid arguments, and make sure
               # that access violations are trapped and raise an
               # exception.
>>>>>>         self.assertRaises(WindowsError, windll.kernel32.GetModuleHandleA, 32)
       
    1:     def test_noargs(self):
               # This is a special case on win32 x64
>>>>>>         windll.user32.GetDesktopWindow()
       
    2: @unittest.skipUnless(sys.platform == "win32", 'Windows-specific test')
    1: class TestWintypes(unittest.TestCase):
    1:     def test_HWND(self):
>>>>>>         from ctypes import wintypes
>>>>>>         self.assertEqual(sizeof(wintypes.HWND), sizeof(c_void_p))
       
    1:     def test_PARAM(self):
>>>>>>         from ctypes import wintypes
>>>>>>         self.assertEqual(sizeof(wintypes.WPARAM),
>>>>>>                              sizeof(c_void_p))
>>>>>>         self.assertEqual(sizeof(wintypes.LPARAM),
>>>>>>                              sizeof(c_void_p))
       
    1:     def test_COMError(self):
>>>>>>         from _ctypes import COMError
>>>>>>         if support.HAVE_DOCSTRINGS:
>>>>>>             self.assertEqual(COMError.__doc__,
>>>>>>                              "Raised when a COM method call failed.")
       
>>>>>>         ex = COMError(-1, "text", ("details",))
>>>>>>         self.assertEqual(ex.hresult, -1)
>>>>>>         self.assertEqual(ex.text, "text")
>>>>>>         self.assertEqual(ex.details, ("details",))
       
    2: class Structures(unittest.TestCase):
    1:     def test_struct_by_value(self):
    2:         class POINT(Structure):
    1:             _fields_ = [("x", c_long),
    1:                         ("y", c_long)]
       
    2:         class RECT(Structure):
    1:             _fields_ = [("left", c_long),
    1:                         ("top", c_long),
    1:                         ("right", c_long),
    1:                         ("bottom", c_long)]
       
    1:         dll = CDLL(_ctypes_test.__file__)
       
    1:         pt = POINT(15, 25)
    1:         left = c_long.in_dll(dll, 'left')
    1:         top = c_long.in_dll(dll, 'top')
    1:         right = c_long.in_dll(dll, 'right')
    1:         bottom = c_long.in_dll(dll, 'bottom')
    1:         rect = RECT(left, top, right, bottom)
    1:         PointInRect = dll.PointInRect
    1:         PointInRect.argtypes = [POINTER(RECT), POINT]
    1:         self.assertEqual(1, PointInRect(byref(rect), pt))
       
    1:         ReturnRect = dll.ReturnRect
    1:         ReturnRect.argtypes = [c_int, RECT, POINTER(RECT), POINT, RECT,
    1:                                POINTER(RECT), POINT, RECT]
    1:         ReturnRect.restype = RECT
    5:         for i in range(4):
    4:             ret = ReturnRect(i, rect, pointer(rect), pt, rect,
    4:                          byref(rect), pt, rect)
                   # the c function will check and modify ret if something is
                   # passed in improperly
    4:             self.assertEqual(ret.left, left.value)
    4:             self.assertEqual(ret.right, right.value)
    4:             self.assertEqual(ret.top, top.value)
    4:             self.assertEqual(ret.bottom, bottom.value)
       
               # to not leak references, we must clean _pointer_type_cache
    1:         from ctypes import _pointer_type_cache
    1:         del _pointer_type_cache[RECT]
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
