       # Copyright 2007 Google, Inc. All Rights Reserved.
       # Licensed to PSF under a Contributor Agreement.
       
       """Fixer for removing uses of the types module.
       
       These work for only the known names in the types module.  The forms above
       can include types. or not.  ie, It is assumed the module is imported either as:
       
           import types
           from types import ... # either * or specific types
       
       The import statements are not modified.
       
       There should be another fixer that handles at least the following constants:
       
          type([]) -> list
          type(()) -> tuple
          type('') -> str
       
    1: """
       
       # Local imports
    1: from ..pgen2 import token
    1: from .. import fixer_base
    1: from ..fixer_util import Name
       
    1: _TYPE_MAPPING = {
    1:         'BooleanType' : 'bool',
    1:         'BufferType' : 'memoryview',
    1:         'ClassType' : 'type',
    1:         'ComplexType' : 'complex',
    1:         'DictType': 'dict',
    1:         'DictionaryType' : 'dict',
    1:         'EllipsisType' : 'type(Ellipsis)',
               #'FileType' : 'io.IOBase',
    1:         'FloatType': 'float',
    1:         'IntType': 'int',
    1:         'ListType': 'list',
    1:         'LongType': 'int',
    1:         'ObjectType' : 'object',
    1:         'NoneType': 'type(None)',
    1:         'NotImplementedType' : 'type(NotImplemented)',
    1:         'SliceType' : 'slice',
    1:         'StringType': 'bytes', # XXX ?
    1:         'StringTypes' : '(str,)', # XXX ?
    1:         'TupleType': 'tuple',
    1:         'TypeType' : 'type',
    1:         'UnicodeType': 'str',
    1:         'XRangeType' : 'range',
           }
       
   22: _pats = ["power< 'types' trailer< '.' name='%s' > >" % t for t in _TYPE_MAPPING]
       
    2: class FixTypes(fixer_base.BaseFix):
    1:     BM_compatible = True
    1:     PATTERN = '|'.join(_pats)
       
    1:     def transform(self, node, results):
    7:         new_value = unicode(_TYPE_MAPPING.get(results["name"].value))
    7:         if new_value:
    7:             return Name(new_value, prefix=node.prefix)
>>>>>>         return None
