       """JSON token scanner
    2: """
    2: import re
    2: try:
    2:     from _json import make_scanner as c_make_scanner
    1: except ImportError:
    1:     c_make_scanner = None
       
    2: __all__ = ['make_scanner']
       
    2: NUMBER_RE = re.compile(
    2:     r'(-?(?:0|[1-9]\d*))(\.\d+)?([eE][-+]?\d+)?',
    2:     (re.VERBOSE | re.MULTILINE | re.DOTALL))
       
    2: def py_make_scanner(context):
   15:     parse_object = context.parse_object
   15:     parse_array = context.parse_array
   15:     parse_string = context.parse_string
   15:     match_number = NUMBER_RE.match
   15:     encoding = context.encoding
   15:     strict = context.strict
   15:     parse_float = context.parse_float
   15:     parse_int = context.parse_int
   15:     parse_constant = context.parse_constant
   15:     object_hook = context.object_hook
   15:     object_pairs_hook = context.object_pairs_hook
       
   15:     def _scan_once(string, idx):
55462:         try:
55462:             nextchar = string[idx]
    2:         except IndexError:
    2:             raise StopIteration
       
55460:         if nextchar == '"':
55337:             return parse_string(string, idx + 1, encoding, strict)
  123:         elif nextchar == '{':
   27:             return parse_object((string, idx + 1), encoding, strict,
   27:                 _scan_once, object_hook, object_pairs_hook)
   96:         elif nextchar == '[':
   20:             return parse_array((string, idx + 1), _scan_once)
   76:         elif nextchar == 'n' and string[idx:idx + 4] == 'null':
>>>>>>             return None, idx + 4
   76:         elif nextchar == 't' and string[idx:idx + 4] == 'true':
>>>>>>             return True, idx + 4
   76:         elif nextchar == 'f' and string[idx:idx + 5] == 'false':
    4:             return False, idx + 5
       
   72:         m = match_number(string, idx)
   72:         if m is not None:
   72:             integer, frac, exp = m.groups()
   72:             if frac or exp:
    1:                 res = parse_float(integer + (frac or '') + (exp or ''))
                   else:
   71:                 res = parse_int(integer)
   72:             return res, m.end()
>>>>>>         elif nextchar == 'N' and string[idx:idx + 3] == 'NaN':
>>>>>>             return parse_constant('NaN'), idx + 3
>>>>>>         elif nextchar == 'I' and string[idx:idx + 8] == 'Infinity':
>>>>>>             return parse_constant('Infinity'), idx + 8
>>>>>>         elif nextchar == '-' and string[idx:idx + 9] == '-Infinity':
>>>>>>             return parse_constant('-Infinity'), idx + 9
               else:
>>>>>>             raise StopIteration
       
   15:     return _scan_once
       
    2: make_scanner = c_make_scanner or py_make_scanner
