    1: '''Test the functions and main class method of textView.py.'''
       
    1: import unittest
    1: import os
    1: from test.test_support import requires
    1: from Tkinter import Tk
    1: from idlelib import textView as tv
    1: from idlelib.idle_test.mock_idle import Func
    1: from idlelib.idle_test.mock_tk import Mbox
       
       
    2: class TV(tv.TextViewer):  # Use in TextViewTest
    1:     transient = Func()
    1:     grab_set = Func()
    1:     wait_window = Func()
       
    2: class textviewClassTest(unittest.TestCase):
       
    1:     @classmethod
           def setUpClass(cls):
    1:         requires('gui')
>>>>>>         cls.root = Tk()
>>>>>>         cls.root.withdraw()
       
    1:     @classmethod
           def tearDownClass(cls):
>>>>>>         cls.root.destroy()
>>>>>>         del cls.root
       
    1:     def setUp(self):
>>>>>>         TV.transient.__init__()
>>>>>>         TV.grab_set.__init__()
>>>>>>         TV.wait_window.__init__()
       
    1:     def test_init_modal(self):
>>>>>>         view = TV(self.root, 'Title', 'test text')
>>>>>>         self.assertTrue(TV.transient.called)
>>>>>>         self.assertTrue(TV.grab_set.called)
>>>>>>         self.assertTrue(TV.wait_window.called)
>>>>>>         view.Ok()
       
    1:     def test_init_nonmodal(self):
>>>>>>         view = TV(self.root, 'Title', 'test text', modal=False)
>>>>>>         self.assertFalse(TV.transient.called)
>>>>>>         self.assertFalse(TV.grab_set.called)
>>>>>>         self.assertFalse(TV.wait_window.called)
>>>>>>         view.Ok()
       
    1:     def test_ok(self):
>>>>>>         view = TV(self.root, 'Title', 'test text', modal=False)
>>>>>>         view.destroy = Func()
>>>>>>         view.Ok()
>>>>>>         self.assertTrue(view.destroy.called)
>>>>>>         del view.destroy  # Unmask the real function.
>>>>>>         view.destroy()
       
       
    2: class ViewFunctionTest(unittest.TestCase):
       
    1:     @classmethod
           def setUpClass(cls):
    1:         requires('gui')
>>>>>>         cls.root = Tk()
>>>>>>         cls.root.withdraw()
>>>>>>         cls.orig_mbox = tv.tkMessageBox
>>>>>>         tv.tkMessageBox = Mbox
       
    1:     @classmethod
           def tearDownClass(cls):
>>>>>>         cls.root.destroy()
>>>>>>         del cls.root
>>>>>>         tv.tkMessageBox = cls.orig_mbox
>>>>>>         del cls.orig_mbox
       
    1:     def test_view_text(self):
               # If modal True, get tkinter error 'can't invoke "event" command'.
>>>>>>         view = tv.view_text(self.root, 'Title', 'test text', modal=False)
>>>>>>         self.assertIsInstance(view, tv.TextViewer)
>>>>>>         view.Ok()
       
    1:     def test_view_file(self):
>>>>>>         test_dir = os.path.dirname(__file__)
>>>>>>         testfile = os.path.join(test_dir, 'test_textview.py')
>>>>>>         view = tv.view_file(self.root, 'Title', testfile, modal=False)
>>>>>>         self.assertIsInstance(view, tv.TextViewer)
>>>>>>         self.assertIn('Test', view.textView.get('1.0', '1.end'))
>>>>>>         view.Ok()
       
               # Mock messagebox will be used; view_file will return None.
>>>>>>         testfile = os.path.join(test_dir, '../notthere.py')
>>>>>>         view = tv.view_file(self.root, 'Title', testfile, modal=False)
>>>>>>         self.assertIsNone(view)
       
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main(verbosity=2)
