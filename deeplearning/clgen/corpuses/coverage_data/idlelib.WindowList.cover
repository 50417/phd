    1: from Tkinter import *
       
    2: class WindowList:
       
    1:     def __init__(self):
    1:         self.dict = {}
    1:         self.callbacks = []
       
    1:     def add(self, window):
>>>>>>         window.after_idle(self.call_callbacks)
>>>>>>         self.dict[str(window)] = window
       
    1:     def delete(self, window):
>>>>>>         try:
>>>>>>             del self.dict[str(window)]
>>>>>>         except KeyError:
                   # Sometimes, destroy() is called twice
>>>>>>             pass
>>>>>>         self.call_callbacks()
       
    1:     def add_windows_to_menu(self,  menu):
>>>>>>         list = []
>>>>>>         for key in self.dict.keys():
>>>>>>             window = self.dict[key]
>>>>>>             try:
>>>>>>                 title = window.get_title()
>>>>>>             except TclError:
>>>>>>                 continue
>>>>>>             list.append((title, window))
>>>>>>         list.sort()
>>>>>>         for title, window in list:
>>>>>>             menu.add_command(label=title, command=window.wakeup)
       
    1:     def register_callback(self, callback):
>>>>>>         self.callbacks.append(callback)
       
    1:     def unregister_callback(self, callback):
>>>>>>         try:
>>>>>>             self.callbacks.remove(callback)
>>>>>>         except ValueError:
>>>>>>             pass
       
    1:     def call_callbacks(self):
>>>>>>         for callback in self.callbacks:
>>>>>>             try:
>>>>>>                 callback()
>>>>>>             except:
>>>>>>                 print "warning: callback failed in WindowList", \
>>>>>>                       sys.exc_type, ":", sys.exc_value
       
    1: registry = WindowList()
       
    1: add_windows_to_menu = registry.add_windows_to_menu
    1: register_callback = registry.register_callback
    1: unregister_callback = registry.unregister_callback
       
       
    2: class ListedToplevel(Toplevel):
       
    1:     def __init__(self, master, **kw):
>>>>>>         Toplevel.__init__(self, master, kw)
>>>>>>         registry.add(self)
>>>>>>         self.focused_widget = self
       
    1:     def destroy(self):
>>>>>>         registry.delete(self)
>>>>>>         Toplevel.destroy(self)
               # If this is Idle's last window then quit the mainloop
               # (Needed for clean exit on Windows 98)
>>>>>>         if not registry.dict:
>>>>>>             self.quit()
       
    1:     def update_windowlist_registry(self, window):
>>>>>>         registry.call_callbacks()
       
    1:     def get_title(self):
               # Subclass can override
>>>>>>         return self.wm_title()
       
    1:     def wakeup(self):
>>>>>>         try:
>>>>>>             if self.wm_state() == "iconic":
>>>>>>                 self.wm_withdraw()
>>>>>>                 self.wm_deiconify()
>>>>>>             self.tkraise()
>>>>>>             self.focused_widget.focus_set()
>>>>>>         except TclError:
                   # This can happen when the window menu was torn off.
                   # Simply ignore it.
>>>>>>             pass
