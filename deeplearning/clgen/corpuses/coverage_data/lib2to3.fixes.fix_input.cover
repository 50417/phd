    1: """Fixer that changes input(...) into eval(input(...))."""
       # Author: Andre Roberge
       
       # Local imports
    1: from .. import fixer_base
    1: from ..fixer_util import Call, Name
    1: from .. import patcomp
       
       
    1: context = patcomp.compile_pattern("power< 'eval' trailer< '(' any ')' > >")
       
       
    2: class FixInput(fixer_base.BaseFix):
    1:     BM_compatible = True
           PATTERN = """
                     power< 'input' args=trailer< '(' [any] ')' > >
    1:               """
       
    1:     def transform(self, node, results):
               # If we're already wrapped in an eval() call, we're done.
   10:         if context.match(node.parent.parent):
    3:             return
       
    7:         new = node.clone()
    7:         new.prefix = u""
    7:         return Call(Name(u"eval"), [new], prefix=node.prefix)
