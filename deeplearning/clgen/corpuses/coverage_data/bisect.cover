    3: """Bisection algorithms."""
       
    3: def insort_right(a, x, lo=0, hi=None):
           """Insert item x in list a, and keep it sorted assuming a is sorted.
       
           If x is already in a, insert it to the right of the rightmost x.
       
           Optional args lo (default 0) and hi (default len(a)) bound the
           slice of a to be searched.
           """
       
  536:     if lo < 0:
    1:         raise ValueError('lo must be non-negative')
  535:     if hi is None:
  532:         hi = len(a)
 4494:     while lo < hi:
 3963:         mid = (lo+hi)//2
 3963:         if x < a[mid]: hi = mid
 2262:         else: lo = mid+1
  531:     a.insert(lo, x)
       
    3: insort = insort_right   # backward compatibility
       
    3: def bisect_right(a, x, lo=0, hi=None):
           """Return the index where to insert item x in list a, assuming a is sorted.
       
           The return value i is such that all e in a[:i] have e <= x, and all e in
           a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
           insert just after the rightmost x already there.
       
           Optional args lo (default 0) and hi (default len(a)) bound the
           slice of a to be searched.
           """
       
  894:     if lo < 0:
    1:         raise ValueError('lo must be non-negative')
  893:     if hi is None:
  109:         hi = len(a)
 2245:     while lo < hi:
 1356:         mid = (lo+hi)//2
 1356:         if x < a[mid]: hi = mid
  733:         else: lo = mid+1
  889:     return lo
       
    3: bisect = bisect_right   # backward compatibility
       
    3: def insort_left(a, x, lo=0, hi=None):
           """Insert item x in list a, and keep it sorted assuming a is sorted.
       
           If x is already in a, insert it to the left of the leftmost x.
       
           Optional args lo (default 0) and hi (default len(a)) bound the
           slice of a to be searched.
           """
       
  481:     if lo < 0:
    1:         raise ValueError('lo must be non-negative')
  480:     if hi is None:
  478:         hi = len(a)
 4107:     while lo < hi:
 3631:         mid = (lo+hi)//2
 3631:         if a[mid] < x: lo = mid+1
 2290:         else: hi = mid
  476:     a.insert(lo, x)
       
       
    3: def bisect_left(a, x, lo=0, hi=None):
           """Return the index where to insert item x in list a, assuming a is sorted.
       
           The return value i is such that all e in a[:i] have e < x, and all e in
           a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
           insert just before the leftmost x already there.
       
           Optional args lo (default 0) and hi (default len(a)) bound the
           slice of a to be searched.
           """
       
  893:     if lo < 0:
    1:         raise ValueError('lo must be non-negative')
  892:     if hi is None:
  109:         hi = len(a)
 2306:     while lo < hi:
 1418:         mid = (lo+hi)//2
 1418:         if a[mid] < x: lo = mid+1
  873:         else: hi = mid
  888:     return lo
       
       # Overwrite above definitions with a fast C implementation
    3: try:
    3:     from _bisect import *
    1: except ImportError:
    1:     pass
