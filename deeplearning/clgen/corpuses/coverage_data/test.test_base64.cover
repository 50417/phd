    1: import unittest
    1: from test import test_support
    1: import base64
       
       
       
    2: class LegacyBase64TestCase(unittest.TestCase):
    1:     def test_encodestring(self):
    1:         eq = self.assertEqual
    1:         eq(base64.encodestring("www.python.org"), "d3d3LnB5dGhvbi5vcmc=\n")
    1:         eq(base64.encodestring("a"), "YQ==\n")
    1:         eq(base64.encodestring("ab"), "YWI=\n")
    1:         eq(base64.encodestring("abc"), "YWJj\n")
    1:         eq(base64.encodestring(""), "")
    1:         eq(base64.encodestring("abcdefghijklmnopqrstuvwxyz"
                                      "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                      "0123456789!@#0^&*();:<>,. []{}"),
    1:            "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNE"
                  "RUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0\nNT"
                  "Y3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ==\n")
               # Non-bytes
    1:         eq(base64.encodestring(bytearray('abc')), 'YWJj\n')
       
    1:     def test_decodestring(self):
    1:         eq = self.assertEqual
    1:         eq(base64.decodestring("d3d3LnB5dGhvbi5vcmc=\n"), "www.python.org")
    1:         eq(base64.decodestring("YQ==\n"), "a")
    1:         eq(base64.decodestring("YWI=\n"), "ab")
    1:         eq(base64.decodestring("YWJj\n"), "abc")
    1:         eq(base64.decodestring("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNE"
                                      "RUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0\nNT"
                                      "Y3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ==\n"),
    1:            "abcdefghijklmnopqrstuvwxyz"
                  "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                  "0123456789!@#0^&*();:<>,. []{}")
    1:         eq(base64.decodestring(''), '')
               # Non-bytes
    1:         eq(base64.decodestring(bytearray("YWJj\n")), "abc")
       
    1:     def test_encode(self):
    1:         eq = self.assertEqual
    1:         from cStringIO import StringIO
    1:         infp = StringIO('abcdefghijklmnopqrstuvwxyz'
                               'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
                               '0123456789!@#0^&*();:<>,. []{}')
    1:         outfp = StringIO()
    1:         base64.encode(infp, outfp)
    1:         eq(outfp.getvalue(),
    1:            'YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNE'
                  'RUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0\nNT'
                  'Y3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ==\n')
       
    1:     def test_decode(self):
    1:         from cStringIO import StringIO
    1:         infp = StringIO('d3d3LnB5dGhvbi5vcmc=')
    1:         outfp = StringIO()
    1:         base64.decode(infp, outfp)
    1:         self.assertEqual(outfp.getvalue(), 'www.python.org')
       
       
       
    2: class BaseXYTestCase(unittest.TestCase):
    1:     def test_b64encode(self):
    1:         eq = self.assertEqual
               # Test default alphabet
    1:         eq(base64.b64encode("www.python.org"), "d3d3LnB5dGhvbi5vcmc=")
    1:         eq(base64.b64encode('\x00'), 'AA==')
    1:         eq(base64.b64encode("a"), "YQ==")
    1:         eq(base64.b64encode("ab"), "YWI=")
    1:         eq(base64.b64encode("abc"), "YWJj")
    1:         eq(base64.b64encode(""), "")
    1:         eq(base64.b64encode("abcdefghijklmnopqrstuvwxyz"
                                   "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                   "0123456789!@#0^&*();:<>,. []{}"),
    1:            "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNE"
                  "RUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0NT"
                  "Y3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ==")
               # Test with arbitrary alternative characters
    1:         eq(base64.b64encode('\xd3V\xbeo\xf7\x1d', altchars='*$'), '01a*b$cd')
               # Non-bytes
    1:         eq(base64.b64encode(bytearray('abcd')), 'YWJjZA==')
    1:         self.assertRaises(TypeError, base64.b64encode,
    1:                           '\xd3V\xbeo\xf7\x1d', altchars=bytearray('*$'))
               # Test standard alphabet
    1:         eq(base64.standard_b64encode("www.python.org"), "d3d3LnB5dGhvbi5vcmc=")
    1:         eq(base64.standard_b64encode("a"), "YQ==")
    1:         eq(base64.standard_b64encode("ab"), "YWI=")
    1:         eq(base64.standard_b64encode("abc"), "YWJj")
    1:         eq(base64.standard_b64encode(""), "")
    1:         eq(base64.standard_b64encode("abcdefghijklmnopqrstuvwxyz"
                                            "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                            "0123456789!@#0^&*();:<>,. []{}"),
    1:            "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNE"
                  "RUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0NT"
                  "Y3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ==")
               # Non-bytes
    1:         eq(base64.standard_b64encode(bytearray('abcd')), 'YWJjZA==')
               # Test with 'URL safe' alternative characters
    1:         eq(base64.urlsafe_b64encode('\xd3V\xbeo\xf7\x1d'), '01a-b_cd')
               # Non-bytes
    1:         eq(base64.urlsafe_b64encode(bytearray('\xd3V\xbeo\xf7\x1d')), '01a-b_cd')
       
    1:     def test_b64decode(self):
    1:         eq = self.assertEqual
    1:         eq(base64.b64decode("d3d3LnB5dGhvbi5vcmc="), "www.python.org")
    1:         eq(base64.b64decode('AA=='), '\x00')
    1:         eq(base64.b64decode("YQ=="), "a")
    1:         eq(base64.b64decode("YWI="), "ab")
    1:         eq(base64.b64decode("YWJj"), "abc")
    1:         eq(base64.b64decode("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNE"
                                   "RUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0\nNT"
                                   "Y3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ=="),
    1:            "abcdefghijklmnopqrstuvwxyz"
                  "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                  "0123456789!@#0^&*();:<>,. []{}")
    1:         eq(base64.b64decode(''), '')
               # Test with arbitrary alternative characters
    1:         eq(base64.b64decode('01a*b$cd', altchars='*$'), '\xd3V\xbeo\xf7\x1d')
               # Non-bytes
    1:         eq(base64.b64decode(bytearray("YWJj")), "abc")
               # Test standard alphabet
    1:         eq(base64.standard_b64decode("d3d3LnB5dGhvbi5vcmc="), "www.python.org")
    1:         eq(base64.standard_b64decode("YQ=="), "a")
    1:         eq(base64.standard_b64decode("YWI="), "ab")
    1:         eq(base64.standard_b64decode("YWJj"), "abc")
    1:         eq(base64.standard_b64decode(""), "")
    1:         eq(base64.standard_b64decode("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNE"
                                            "RUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0NT"
                                            "Y3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ=="),
    1:            "abcdefghijklmnopqrstuvwxyz"
                  "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                  "0123456789!@#0^&*();:<>,. []{}")
               # Non-bytes
    1:         eq(base64.standard_b64decode(bytearray("YWJj")), "abc")
               # Test with 'URL safe' alternative characters
    1:         eq(base64.urlsafe_b64decode('01a-b_cd'), '\xd3V\xbeo\xf7\x1d')
               # Non-bytes
    1:         eq(base64.urlsafe_b64decode(bytearray('01a-b_cd')), '\xd3V\xbeo\xf7\x1d')
       
    1:     def test_b64decode_padding_error(self):
    1:         self.assertRaises(TypeError, base64.b64decode, 'abc')
       
    1:     def test_b64decode_invalid_chars(self):
               # issue 1466065: Test some invalid characters.
    1:         tests = ((b'%3d==', b'\xdd'),
    1:                  (b'$3d==', b'\xdd'),
    1:                  (b'[==', b''),
    1:                  (b'YW]3=', b'am'),
    1:                  (b'3{d==', b'\xdd'),
    1:                  (b'3d}==', b'\xdd'),
    1:                  (b'@@', b''),
    1:                  (b'!', b''),
    1:                  (b'YWJj\nYWI=', b'abcab'))
   10:         for bstr, res in tests:
    9:             self.assertEqual(base64.b64decode(bstr), res)
    9:             self.assertEqual(base64.standard_b64decode(bstr), res)
    9:             self.assertEqual(base64.urlsafe_b64decode(bstr), res)
       
               # Normal alphabet characters not discarded when alternative given
    1:         res = b'\xFB\xEF\xBE\xFF\xFF\xFF'
    1:         self.assertEqual(base64.b64decode(b'++[[//]]', b'[]'), res)
    1:         self.assertEqual(base64.urlsafe_b64decode(b'++--//__'), res)
       
    1:     def test_b32encode(self):
    1:         eq = self.assertEqual
    1:         eq(base64.b32encode(''), '')
    1:         eq(base64.b32encode('\x00'), 'AA======')
    1:         eq(base64.b32encode('a'), 'ME======')
    1:         eq(base64.b32encode('ab'), 'MFRA====')
    1:         eq(base64.b32encode('abc'), 'MFRGG===')
    1:         eq(base64.b32encode('abcd'), 'MFRGGZA=')
    1:         eq(base64.b32encode('abcde'), 'MFRGGZDF')
               # Non-bytes
    1:         eq(base64.b32encode(bytearray('abcd')), 'MFRGGZA=')
       
    1:     def test_b32decode(self):
    1:         eq = self.assertEqual
    1:         eq(base64.b32decode(''), '')
    1:         eq(base64.b32decode('AA======'), '\x00')
    1:         eq(base64.b32decode('ME======'), 'a')
    1:         eq(base64.b32decode('MFRA===='), 'ab')
    1:         eq(base64.b32decode('MFRGG==='), 'abc')
    1:         eq(base64.b32decode('MFRGGZA='), 'abcd')
    1:         eq(base64.b32decode('MFRGGZDF'), 'abcde')
               # Non-bytes
    1:         self.assertRaises(TypeError, base64.b32decode, bytearray('MFRGG==='))
       
    1:     def test_b32decode_casefold(self):
    1:         eq = self.assertEqual
    1:         eq(base64.b32decode('', True), '')
    1:         eq(base64.b32decode('ME======', True), 'a')
    1:         eq(base64.b32decode('MFRA====', True), 'ab')
    1:         eq(base64.b32decode('MFRGG===', True), 'abc')
    1:         eq(base64.b32decode('MFRGGZA=', True), 'abcd')
    1:         eq(base64.b32decode('MFRGGZDF', True), 'abcde')
               # Lower cases
    1:         eq(base64.b32decode('me======', True), 'a')
    1:         eq(base64.b32decode('mfra====', True), 'ab')
    1:         eq(base64.b32decode('mfrgg===', True), 'abc')
    1:         eq(base64.b32decode('mfrggza=', True), 'abcd')
    1:         eq(base64.b32decode('mfrggzdf', True), 'abcde')
               # Expected exceptions
    1:         self.assertRaises(TypeError, base64.b32decode, 'me======')
               # Mapping zero and one
    1:         eq(base64.b32decode('MLO23456'), 'b\xdd\xad\xf3\xbe')
    1:         eq(base64.b32decode('M1023456', map01='L'), 'b\xdd\xad\xf3\xbe')
    1:         eq(base64.b32decode('M1023456', map01='I'), 'b\x1d\xad\xf3\xbe')
       
    1:     def test_b32decode_error(self):
    1:         self.assertRaises(TypeError, base64.b32decode, 'abc')
    1:         self.assertRaises(TypeError, base64.b32decode, 'ABCDEF==')
       
    1:     def test_b16encode(self):
    1:         eq = self.assertEqual
    1:         eq(base64.b16encode('\x01\x02\xab\xcd\xef'), '0102ABCDEF')
    1:         eq(base64.b16encode('\x00'), '00')
               # Non-bytes
    1:         eq(base64.b16encode(bytearray('\x01\x02\xab\xcd\xef')), '0102ABCDEF')
       
    1:     def test_b16decode(self):
    1:         eq = self.assertEqual
    1:         eq(base64.b16decode('0102ABCDEF'), '\x01\x02\xab\xcd\xef')
    1:         eq(base64.b16decode('00'), '\x00')
               # Lower case is not allowed without a flag
    1:         self.assertRaises(TypeError, base64.b16decode, '0102abcdef')
               # Case fold
    1:         eq(base64.b16decode('0102abcdef', True), '\x01\x02\xab\xcd\xef')
               # Non-bytes
    1:         eq(base64.b16decode(bytearray("0102ABCDEF")), '\x01\x02\xab\xcd\xef')
               # Non-alphabet characters
    1:         self.assertRaises(TypeError, base64.b16decode, '0102AG')
               # Incorrect "padding"
    1:         self.assertRaises(TypeError, base64.b16decode, '010')
       
       
       
    1: def test_main():
    1:     test_support.run_unittest(__name__)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
