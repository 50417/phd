    1: "Test posix functions"
       
    1: from test import test_support
       
       # Skip these tests if there is no posix module.
    1: posix = test_support.import_module('posix')
       
    1: import errno
    1: import sys
    1: import time
    1: import os
    1: import platform
    1: import pwd
    1: import shutil
    1: import stat
    1: import sys
    1: import tempfile
    1: import unittest
    1: import warnings
       
    1: _DUMMY_SYMLINK = os.path.join(tempfile.gettempdir(),
    1:                               test_support.TESTFN + '-dummy-symlink')
       
    1: warnings.filterwarnings('ignore', '.* potential security risk .*',
    1:                         RuntimeWarning)
       
    2: class PosixTester(unittest.TestCase):
       
    1:     def setUp(self):
               # create empty file
   35:         fp = open(test_support.TESTFN, 'w+')
   35:         fp.close()
   35:         self.teardown_files = [ test_support.TESTFN ]
       
    1:     def tearDown(self):
   71:         for teardown_file in self.teardown_files:
   36:             os.unlink(teardown_file)
       
    1:     def testNoArgFunctions(self):
               # test posix functions which take no arguments and have
               # no side-effects which we need to cleanup (e.g., fork, wait, abort)
    1:         NO_ARG_FUNCTIONS = [ "ctermid", "getcwd", "getcwdu", "uname",
    1:                              "times", "getloadavg", "tmpnam",
    1:                              "getegid", "geteuid", "getgid", "getgroups",
    1:                              "getpid", "getpgrp", "getppid", "getuid",
                                  ]
       
    1:         with warnings.catch_warnings():
    1:             warnings.filterwarnings("ignore", "", DeprecationWarning)
   16:             for name in NO_ARG_FUNCTIONS:
   15:                 posix_func = getattr(posix, name, None)
   15:                 if posix_func is not None:
   15:                     posix_func()
   15:                     self.assertRaises(TypeError, posix_func, 1)
       
    1:     @unittest.skipUnless(hasattr(posix, 'getresuid'),
    1:                          'test needs posix.getresuid()')
           def test_getresuid(self):
>>>>>>         user_ids = posix.getresuid()
>>>>>>         self.assertEqual(len(user_ids), 3)
>>>>>>         for val in user_ids:
>>>>>>             self.assertGreaterEqual(val, 0)
       
    1:     @unittest.skipUnless(hasattr(posix, 'getresgid'),
    1:                          'test needs posix.getresgid()')
           def test_getresgid(self):
>>>>>>         group_ids = posix.getresgid()
>>>>>>         self.assertEqual(len(group_ids), 3)
>>>>>>         for val in group_ids:
>>>>>>             self.assertGreaterEqual(val, 0)
       
    1:     @unittest.skipUnless(hasattr(posix, 'setresuid'),
    1:                          'test needs posix.setresuid()')
           def test_setresuid(self):
>>>>>>         current_user_ids = posix.getresuid()
>>>>>>         self.assertIsNone(posix.setresuid(*current_user_ids))
               # -1 means don't change that value.
>>>>>>         self.assertIsNone(posix.setresuid(-1, -1, -1))
       
    1:     @unittest.skipUnless(hasattr(posix, 'setresuid'),
    1:                          'test needs posix.setresuid()')
           def test_setresuid_exception(self):
               # Don't do this test if someone is silly enough to run us as root.
>>>>>>         current_user_ids = posix.getresuid()
>>>>>>         if 0 not in current_user_ids:
>>>>>>             new_user_ids = (current_user_ids[0]+1, -1, -1)
>>>>>>             self.assertRaises(OSError, posix.setresuid, *new_user_ids)
       
    1:     @unittest.skipUnless(hasattr(posix, 'setresgid'),
    1:                          'test needs posix.setresgid()')
           def test_setresgid(self):
>>>>>>         current_group_ids = posix.getresgid()
>>>>>>         self.assertIsNone(posix.setresgid(*current_group_ids))
               # -1 means don't change that value.
>>>>>>         self.assertIsNone(posix.setresgid(-1, -1, -1))
       
    1:     @unittest.skipUnless(hasattr(posix, 'setresgid'),
    1:                          'test needs posix.setresgid()')
           def test_setresgid_exception(self):
               # Don't do this test if someone is silly enough to run us as root.
>>>>>>         current_group_ids = posix.getresgid()
>>>>>>         if 0 not in current_group_ids:
>>>>>>             new_group_ids = (current_group_ids[0]+1, -1, -1)
>>>>>>             self.assertRaises(OSError, posix.setresgid, *new_group_ids)
       
    1:     @unittest.skipUnless(hasattr(posix, 'initgroups'),
    1:                          "test needs os.initgroups()")
           def test_initgroups(self):
               # It takes a string and an integer; check that it raises a TypeError
               # for other argument lists.
    1:         self.assertRaises(TypeError, posix.initgroups)
    1:         self.assertRaises(TypeError, posix.initgroups, None)
    1:         self.assertRaises(TypeError, posix.initgroups, 3, "foo")
    1:         self.assertRaises(TypeError, posix.initgroups, "foo", 3, object())
       
               # If a non-privileged user invokes it, it should fail with OSError
               # EPERM.
    1:         if os.getuid() != 0:
    1:             try:
    1:                 name = pwd.getpwuid(posix.getuid()).pw_name
>>>>>>             except KeyError:
                       # the current UID may not have a pwd entry
>>>>>>                 raise unittest.SkipTest("need a pwd entry")
    1:             try:
    1:                 posix.initgroups(name, 13)
    1:             except OSError as e:
    1:                 self.assertEqual(e.errno, errno.EPERM)
                   else:
>>>>>>                 self.fail("Expected OSError to be raised by initgroups")
       
    1:     @unittest.skipUnless(hasattr(posix, 'statvfs'),
    1:                          'test needs posix.statvfs()')
           def test_statvfs(self):
    1:         self.assertTrue(posix.statvfs(os.curdir))
       
    1:     @unittest.skipUnless(hasattr(posix, 'fstatvfs'),
    1:                          'test needs posix.fstatvfs()')
           def test_fstatvfs(self):
    1:         fp = open(test_support.TESTFN)
    1:         try:
    1:             self.assertTrue(posix.fstatvfs(fp.fileno()))
               finally:
    1:             fp.close()
       
    1:     @unittest.skipUnless(hasattr(posix, 'ftruncate'),
    1:                          'test needs posix.ftruncate()')
           def test_ftruncate(self):
    1:         fp = open(test_support.TESTFN, 'w+')
    1:         try:
                   # we need to have some data to truncate
    1:             fp.write('test')
    1:             fp.flush()
    1:             posix.ftruncate(fp.fileno(), 0)
               finally:
    1:             fp.close()
       
    1:     @unittest.skipUnless(hasattr(posix, 'dup'),
    1:                          'test needs posix.dup()')
           def test_dup(self):
    1:         fp = open(test_support.TESTFN)
    1:         try:
    1:             fd = posix.dup(fp.fileno())
    1:             self.assertIsInstance(fd, int)
    1:             os.close(fd)
               finally:
    1:             fp.close()
       
    1:     @unittest.skipUnless(hasattr(posix, 'confstr'),
    1:                          'test needs posix.confstr()')
           def test_confstr(self):
    1:         self.assertRaises(ValueError, posix.confstr, "CS_garbage")
    1:         self.assertEqual(len(posix.confstr("CS_PATH")) > 0, True)
       
    1:     @unittest.skipUnless(hasattr(posix, 'dup2'),
    1:                          'test needs posix.dup2()')
           def test_dup2(self):
    1:         fp1 = open(test_support.TESTFN)
    1:         fp2 = open(test_support.TESTFN)
    1:         try:
    1:             posix.dup2(fp1.fileno(), fp2.fileno())
               finally:
    1:             fp1.close()
    1:             fp2.close()
       
    1:     def fdopen_helper(self, *args):
    3:         fd = os.open(test_support.TESTFN, os.O_RDONLY)
    3:         fp2 = posix.fdopen(fd, *args)
    3:         fp2.close()
       
    1:     @unittest.skipUnless(hasattr(posix, 'fdopen'),
    1:                          'test needs posix.fdopen()')
           def test_fdopen(self):
    1:         self.fdopen_helper()
    1:         self.fdopen_helper('r')
    1:         self.fdopen_helper('r', 100)
       
    1:     @unittest.skipUnless(hasattr(posix, 'fdopen'),
    1:                          'test needs posix.fdopen()')
           def test_fdopen_directory(self):
    1:         try:
    1:             fd = os.open('.', os.O_RDONLY)
>>>>>>         except OSError as e:
>>>>>>             self.assertEqual(e.errno, errno.EACCES)
>>>>>>             self.skipTest("system cannot open directories")
    1:         with self.assertRaises(IOError) as cm:
    1:             os.fdopen(fd, 'r')
    1:         self.assertEqual(cm.exception.errno, errno.EISDIR)
       
    1:     @unittest.skipUnless(hasattr(posix, 'fdopen') and
    1:                          not sys.platform.startswith("sunos"),
    1:                          'test needs posix.fdopen()')
           def test_fdopen_keeps_fd_open_on_errors(self):
    1:         fd = os.open(test_support.TESTFN, os.O_RDONLY)
    1:         self.assertRaises(OSError, posix.fdopen, fd, 'w')
    1:         os.close(fd) # fd should not be closed.
       
    1:     @unittest.skipUnless(hasattr(posix, 'O_EXLOCK'),
    1:                          'test needs posix.O_EXLOCK')
           def test_osexlock(self):
    1:         fd = os.open(test_support.TESTFN,
    1:                      os.O_WRONLY|os.O_EXLOCK|os.O_CREAT)
    1:         self.assertRaises(OSError, os.open, test_support.TESTFN,
    1:                           os.O_WRONLY|os.O_EXLOCK|os.O_NONBLOCK)
    1:         os.close(fd)
       
    1:         if hasattr(posix, "O_SHLOCK"):
    1:             fd = os.open(test_support.TESTFN,
    1:                          os.O_WRONLY|os.O_SHLOCK|os.O_CREAT)
    1:             self.assertRaises(OSError, os.open, test_support.TESTFN,
    1:                               os.O_WRONLY|os.O_EXLOCK|os.O_NONBLOCK)
    1:             os.close(fd)
       
    1:     @unittest.skipUnless(hasattr(posix, 'O_SHLOCK'),
    1:                          'test needs posix.O_SHLOCK')
           def test_osshlock(self):
    1:         fd1 = os.open(test_support.TESTFN,
    1:                       os.O_WRONLY|os.O_SHLOCK|os.O_CREAT)
    1:         fd2 = os.open(test_support.TESTFN,
    1:                       os.O_WRONLY|os.O_SHLOCK|os.O_CREAT)
    1:         os.close(fd2)
    1:         os.close(fd1)
       
    1:         if hasattr(posix, "O_EXLOCK"):
    1:             fd = os.open(test_support.TESTFN,
    1:                          os.O_WRONLY|os.O_SHLOCK|os.O_CREAT)
    1:             self.assertRaises(OSError, os.open, test_support.TESTFN,
    1:                               os.O_RDONLY|os.O_EXLOCK|os.O_NONBLOCK)
    1:             os.close(fd)
       
    1:     @unittest.skipUnless(hasattr(posix, 'fstat'),
    1:                          'test needs posix.fstat()')
           def test_fstat(self):
    1:         fp = open(test_support.TESTFN)
    1:         try:
    1:             self.assertTrue(posix.fstat(fp.fileno()))
               finally:
    1:             fp.close()
       
    1:     @unittest.skipUnless(hasattr(posix, 'stat'),
    1:                          'test needs posix.stat()')
           def test_stat(self):
    1:         self.assertTrue(posix.stat(test_support.TESTFN))
       
    1:     @unittest.skipUnless(hasattr(posix, 'stat'), 'test needs posix.stat()')
    1:     @unittest.skipUnless(hasattr(posix, 'makedev'), 'test needs posix.makedev()')
           def test_makedev(self):
    1:         st = posix.stat(test_support.TESTFN)
    1:         dev = st.st_dev
    1:         self.assertIsInstance(dev, (int, long))
    1:         self.assertGreaterEqual(dev, 0)
       
    1:         major = posix.major(dev)
    1:         self.assertIsInstance(major, (int, long))
    1:         self.assertGreaterEqual(major, 0)
    1:         self.assertEqual(posix.major(int(dev)), major)
    1:         self.assertEqual(posix.major(long(dev)), major)
    1:         self.assertRaises(TypeError, posix.major, float(dev))
    1:         self.assertRaises(TypeError, posix.major)
    1:         self.assertRaises((ValueError, OverflowError), posix.major, -1)
       
    1:         minor = posix.minor(dev)
    1:         self.assertIsInstance(minor, (int, long))
    1:         self.assertGreaterEqual(minor, 0)
    1:         self.assertEqual(posix.minor(int(dev)), minor)
    1:         self.assertEqual(posix.minor(long(dev)), minor)
    1:         self.assertRaises(TypeError, posix.minor, float(dev))
    1:         self.assertRaises(TypeError, posix.minor)
    1:         self.assertRaises((ValueError, OverflowError), posix.minor, -1)
       
    1:         if sys.platform.startswith('freebsd') and dev >= 0x100000000:
>>>>>>             self.skipTest("bpo-31044: on FreeBSD CURRENT, minor() truncates "
                                 "64-bit dev to 32-bit")
       
    1:         self.assertEqual(posix.makedev(major, minor), dev)
    1:         self.assertEqual(posix.makedev(int(major), int(minor)), dev)
    1:         self.assertEqual(posix.makedev(long(major), long(minor)), dev)
    1:         self.assertRaises(TypeError, posix.makedev, float(major), minor)
    1:         self.assertRaises(TypeError, posix.makedev, major, float(minor))
    1:         self.assertRaises(TypeError, posix.makedev, major)
    1:         self.assertRaises(TypeError, posix.makedev)
       
    1:     def _test_all_chown_common(self, chown_func, first_param, stat_func):
               """Common code for chown, fchown and lchown tests."""
    3:         def check_stat(uid, gid):
   30:             if stat_func is not None:
   30:                 stat = stat_func(first_param)
   30:                 self.assertEqual(stat.st_uid, uid)
   30:                 self.assertEqual(stat.st_gid, gid)
    3:         uid = os.getuid()
    3:         gid = os.getgid()
               # test a successful chown call
    3:         chown_func(first_param, uid, gid)
    3:         check_stat(uid, gid)
    3:         chown_func(first_param, -1, gid)
    3:         check_stat(uid, gid)
    3:         chown_func(first_param, uid, -1)
    3:         check_stat(uid, gid)
       
    3:         if uid == 0:
                   # Try an amusingly large uid/gid to make sure we handle
                   # large unsigned values.  (chown lets you use any
                   # uid/gid you like, even if they aren't defined.)
                   #
                   # This problem keeps coming up:
                   #   http://bugs.python.org/issue1747858
                   #   http://bugs.python.org/issue4591
                   #   http://bugs.python.org/issue15301
                   # Hopefully the fix in 4591 fixes it for good!
                   #
                   # This part of the test only runs when run as root.
                   # Only scary people run their tests as root.
       
>>>>>>             big_value = 2**31
>>>>>>             chown_func(first_param, big_value, big_value)
>>>>>>             check_stat(big_value, big_value)
>>>>>>             chown_func(first_param, -1, -1)
>>>>>>             check_stat(big_value, big_value)
>>>>>>             chown_func(first_param, uid, gid)
>>>>>>             check_stat(uid, gid)
    3:         elif platform.system() in ('HP-UX', 'SunOS'):
                   # HP-UX and Solaris can allow a non-root user to chown() to root
                   # (issue #5113)
>>>>>>             raise unittest.SkipTest("Skipping because of non-standard chown() "
                                           "behavior")
               else:
                   # non-root cannot chown to root, raises OSError
    3:             self.assertRaises(OSError, chown_func, first_param, 0, 0)
    3:             check_stat(uid, gid)
    3:             self.assertRaises(OSError, chown_func, first_param, 0, -1)
    3:             check_stat(uid, gid)
    3:             if 0 not in os.getgroups():
    3:                 self.assertRaises(OSError, chown_func, first_param, -1, 0)
    3:                 check_stat(uid, gid)
               # test illegal types
    9:         for t in str, float:
    6:             self.assertRaises(TypeError, chown_func, first_param, t(uid), gid)
    6:             check_stat(uid, gid)
    6:             self.assertRaises(TypeError, chown_func, first_param, uid, t(gid))
    6:             check_stat(uid, gid)
       
    1:     @unittest.skipUnless(hasattr(posix, 'chown'), "test needs os.chown()")
           def test_chown(self):
               # raise an OSError if the file does not exist
    1:         os.unlink(test_support.TESTFN)
    1:         self.assertRaises(OSError, posix.chown, test_support.TESTFN, -1, -1)
       
               # re-create the file
    1:         open(test_support.TESTFN, 'w').close()
    1:         self._test_all_chown_common(posix.chown, test_support.TESTFN,
    1:                                     getattr(posix, 'stat', None))
       
    1:     @unittest.skipUnless(hasattr(posix, 'fchown'), "test needs os.fchown()")
           def test_fchown(self):
    1:         os.unlink(test_support.TESTFN)
       
               # re-create the file
    1:         test_file = open(test_support.TESTFN, 'w')
    1:         try:
    1:             fd = test_file.fileno()
    1:             self._test_all_chown_common(posix.fchown, fd,
    1:                                         getattr(posix, 'fstat', None))
               finally:
    1:             test_file.close()
       
    1:     @unittest.skipUnless(hasattr(posix, 'lchown'), "test needs os.lchown()")
           def test_lchown(self):
    1:         os.unlink(test_support.TESTFN)
               # create a symlink
    1:         os.symlink(_DUMMY_SYMLINK, test_support.TESTFN)
    1:         self._test_all_chown_common(posix.lchown, test_support.TESTFN,
    1:                                     getattr(posix, 'lstat', None))
       
    1:     @unittest.skipUnless(hasattr(posix, 'chdir'), 'test needs posix.chdir()')
           def test_chdir(self):
    1:         posix.chdir(os.curdir)
    1:         self.assertRaises(OSError, posix.chdir, test_support.TESTFN)
       
    1:     @unittest.skipUnless(hasattr(posix, 'lsdir'), 'test needs posix.lsdir()')
           def test_lsdir(self):
>>>>>>         self.assertIn(test_support.TESTFN, posix.lsdir(os.curdir))
       
    1:     @unittest.skipUnless(hasattr(posix, 'access'), 'test needs posix.access()')
           def test_access(self):
    1:         self.assertTrue(posix.access(test_support.TESTFN, os.R_OK))
       
    1:     @unittest.skipUnless(hasattr(posix, 'umask'), 'test needs posix.umask()')
           def test_umask(self):
    1:         old_mask = posix.umask(0)
    1:         self.assertIsInstance(old_mask, int)
    1:         posix.umask(old_mask)
       
    1:     @unittest.skipUnless(hasattr(posix, 'strerror'),
    1:                          'test needs posix.strerror()')
           def test_strerror(self):
    1:         self.assertTrue(posix.strerror(0))
       
    1:     @unittest.skipUnless(hasattr(posix, 'pipe'), 'test needs posix.pipe()')
           def test_pipe(self):
    1:         reader, writer = posix.pipe()
    1:         os.close(reader)
    1:         os.close(writer)
       
    1:     @unittest.skipUnless(hasattr(posix, 'tempnam'),
    1:                          'test needs posix.tempnam()')
           def test_tempnam(self):
    1:         with warnings.catch_warnings():
    1:             warnings.filterwarnings("ignore", "tempnam", DeprecationWarning)
    1:             self.assertTrue(posix.tempnam())
    1:             self.assertTrue(posix.tempnam(os.curdir))
    1:             self.assertTrue(posix.tempnam(os.curdir, 'blah'))
       
    1:     @unittest.skipUnless(hasattr(posix, 'tmpfile'),
    1:                          'test needs posix.tmpfile()')
           def test_tmpfile(self):
    1:         with warnings.catch_warnings():
    1:             warnings.filterwarnings("ignore", "tmpfile", DeprecationWarning)
    1:             fp = posix.tmpfile()
    1:             fp.close()
       
    1:     @unittest.skipUnless(hasattr(posix, 'utime'), 'test needs posix.utime()')
           def test_utime(self):
    1:         now = time.time()
    1:         posix.utime(test_support.TESTFN, None)
    1:         self.assertRaises(TypeError, posix.utime, test_support.TESTFN, (None, None))
    1:         self.assertRaises(TypeError, posix.utime, test_support.TESTFN, (now, None))
    1:         self.assertRaises(TypeError, posix.utime, test_support.TESTFN, (None, now))
    1:         posix.utime(test_support.TESTFN, (int(now), int(now)))
    1:         posix.utime(test_support.TESTFN, (now, now))
       
    1:     def _test_chflags_regular_file(self, chflags_func, target_file):
    2:         st = os.stat(target_file)
    2:         self.assertTrue(hasattr(st, 'st_flags'))
       
               # ZFS returns EOPNOTSUPP when attempting to set flag UF_IMMUTABLE.
    2:         try:
    2:             chflags_func(target_file, st.st_flags | stat.UF_IMMUTABLE)
>>>>>>         except OSError as err:
>>>>>>             if err.errno != errno.EOPNOTSUPP:
>>>>>>                 raise
>>>>>>             msg = 'chflag UF_IMMUTABLE not supported by underlying fs'
>>>>>>             self.skipTest(msg)
       
    2:         try:
    2:             new_st = os.stat(target_file)
    2:             self.assertEqual(st.st_flags | stat.UF_IMMUTABLE, new_st.st_flags)
    2:             try:
    2:                 fd = open(target_file, 'w+')
    2:             except IOError as e:
    2:                 self.assertEqual(e.errno, errno.EPERM)
               finally:
    2:             posix.chflags(target_file, st.st_flags)
       
    1:     @unittest.skipUnless(hasattr(posix, 'chflags'), 'test needs os.chflags()')
           def test_chflags(self):
    1:         self._test_chflags_regular_file(posix.chflags, test_support.TESTFN)
       
    1:     @unittest.skipUnless(hasattr(posix, 'lchflags'), 'test needs os.lchflags()')
           def test_lchflags_regular_file(self):
    1:         self._test_chflags_regular_file(posix.lchflags, test_support.TESTFN)
       
    1:     @unittest.skipUnless(hasattr(posix, 'lchflags'), 'test needs os.lchflags()')
           def test_lchflags_symlink(self):
    1:         testfn_st = os.stat(test_support.TESTFN)
       
    1:         self.assertTrue(hasattr(testfn_st, 'st_flags'))
       
    1:         os.symlink(test_support.TESTFN, _DUMMY_SYMLINK)
    1:         self.teardown_files.append(_DUMMY_SYMLINK)
    1:         dummy_symlink_st = os.lstat(_DUMMY_SYMLINK)
       
               # ZFS returns EOPNOTSUPP when attempting to set flag UF_IMMUTABLE.
    1:         try:
    1:             posix.lchflags(_DUMMY_SYMLINK,
    1:                            dummy_symlink_st.st_flags | stat.UF_IMMUTABLE)
>>>>>>         except OSError as err:
>>>>>>             if err.errno != errno.EOPNOTSUPP:
>>>>>>                 raise
>>>>>>             msg = 'chflag UF_IMMUTABLE not supported by underlying fs'
>>>>>>             self.skipTest(msg)
       
    1:         try:
    1:             new_testfn_st = os.stat(test_support.TESTFN)
    1:             new_dummy_symlink_st = os.lstat(_DUMMY_SYMLINK)
       
    1:             self.assertEqual(testfn_st.st_flags, new_testfn_st.st_flags)
    1:             self.assertEqual(dummy_symlink_st.st_flags | stat.UF_IMMUTABLE,
    1:                              new_dummy_symlink_st.st_flags)
               finally:
    1:             posix.lchflags(_DUMMY_SYMLINK, dummy_symlink_st.st_flags)
       
    1:     @unittest.skipUnless(hasattr(os, "putenv"), "requires os.putenv()")
           def test_putenv(self):
    1:         with self.assertRaises(TypeError):
    1:             os.putenv('FRUIT\0VEGETABLE', 'cabbage')
    1:         with self.assertRaises(TypeError):
    1:             os.putenv('FRUIT', 'orange\0VEGETABLE=cabbage')
    1:         with self.assertRaises(ValueError):
    1:             os.putenv('FRUIT=ORANGE', 'lemon')
       
    1:     @unittest.skipUnless(hasattr(posix, 'getcwd'),
    1:                          'test needs posix.getcwd()')
           def test_getcwd_long_pathnames(self):
    1:         dirname = 'getcwd-test-directory-0123456789abcdef-01234567890abcdef'
    1:         curdir = os.getcwd()
    1:         base_path = os.path.abspath(test_support.TESTFN) + '.getcwd'
       
    1:         try:
    1:             os.mkdir(base_path)
    1:             os.chdir(base_path)
>>>>>>         except:
>>>>>>             self.skipTest("cannot create directory for testing")
       
    1:         try:
    1:             def _create_and_do_getcwd(dirname, current_path_length = 0):
   73:                 try:
   73:                     os.mkdir(dirname)
>>>>>>                 except:
>>>>>>                     self.skipTest("mkdir cannot create directory sufficiently "
                                         "deep for getcwd test")
       
   73:                 os.chdir(dirname)
   73:                 try:
   73:                     os.getcwd()
   73:                     if current_path_length < 4099:
   72:                         _create_and_do_getcwd(dirname, current_path_length + len(dirname) + 1)
>>>>>>                 except OSError as e:
>>>>>>                     expected_errno = errno.ENAMETOOLONG
                           # The following platforms have quirky getcwd()
                           # behaviour -- see issue 9185 and 15765 for
                           # more information.
                           quirky_platform = (
>>>>>>                         'sunos' in sys.platform or
>>>>>>                         'netbsd' in sys.platform or
>>>>>>                         'openbsd' in sys.platform
                           )
>>>>>>                     if quirky_platform:
>>>>>>                         expected_errno = errno.ERANGE
>>>>>>                     self.assertEqual(e.errno, expected_errno)
                       finally:
   73:                     os.chdir('..')
   73:                     os.rmdir(dirname)
       
    1:             _create_and_do_getcwd(dirname)
       
               finally:
    1:             os.chdir(curdir)
    1:             shutil.rmtree(base_path)
       
    1:     @unittest.skipUnless(hasattr(os, 'getegid'), "test needs os.getegid()")
           def test_getgroups(self):
    1:         with os.popen('id -G 2>/dev/null') as idg:
    1:             groups = idg.read().strip()
    1:             ret = idg.close()
       
    1:         if ret != None or not groups:
>>>>>>             raise unittest.SkipTest("need working 'id -G'")
       
               # Issues 16698: OS X ABIs prior to 10.6 have limits on getgroups()
    1:         if sys.platform == 'darwin':
    1:             import sysconfig
    1:             dt = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET') or '10.0'
    4:             if tuple(int(n) for n in dt.split('.')[0:2]) < (10, 6):
>>>>>>                 raise unittest.SkipTest("getgroups(2) is broken prior to 10.6")
       
               # 'id -G' and 'os.getgroups()' should return the same
               # groups, ignoring order and duplicates.
               # #10822 - it is implementation defined whether posix.getgroups()
               # includes the effective gid so we include it anyway, since id -G does
    1:         self.assertEqual(
   18:                 set([int(x) for x in groups.split()]),
    1:                 set(posix.getgroups() + [posix.getegid()]))
       
    1:     @test_support.requires_unicode
           def test_path_with_null_unicode(self):
    1:         fn = test_support.TESTFN_UNICODE
    1:         try:
    1:             fn.encode(test_support.TESTFN_ENCODING)
>>>>>>         except (UnicodeError, TypeError):
>>>>>>             self.skipTest("Requires unicode filenames support")
    1:         fn_with_NUL = fn + u'\0'
    1:         self.addCleanup(test_support.unlink, fn)
    1:         test_support.unlink(fn)
    1:         fd = None
    1:         try:
    1:             with self.assertRaises(TypeError):
    1:                 fd = os.open(fn_with_NUL, os.O_WRONLY | os.O_CREAT) # raises
               finally:
    1:             if fd is not None:
>>>>>>                 os.close(fd)
    1:         self.assertFalse(os.path.exists(fn))
    1:         self.assertRaises(TypeError, os.mkdir, fn_with_NUL)
    1:         self.assertFalse(os.path.exists(fn))
    1:         open(fn, 'wb').close()
    1:         self.assertRaises(TypeError, os.stat, fn_with_NUL)
       
    1:     def test_path_with_null_byte(self):
    1:         fn = test_support.TESTFN
    1:         fn_with_NUL = fn + '\0'
    1:         self.addCleanup(test_support.unlink, fn)
    1:         test_support.unlink(fn)
    1:         fd = None
    1:         try:
    1:             with self.assertRaises(TypeError):
    1:                 fd = os.open(fn_with_NUL, os.O_WRONLY | os.O_CREAT) # raises
               finally:
    1:             if fd is not None:
>>>>>>                 os.close(fd)
    1:         self.assertFalse(os.path.exists(fn))
    1:         self.assertRaises(TypeError, os.mkdir, fn_with_NUL)
    1:         self.assertFalse(os.path.exists(fn))
    1:         open(fn, 'wb').close()
    1:         self.assertRaises(TypeError, os.stat, fn_with_NUL)
       
       
    2: class PosixGroupsTester(unittest.TestCase):
       
    1:     def setUp(self):
    2:         if posix.getuid() != 0:
    2:             raise unittest.SkipTest("not enough privileges")
>>>>>>         if not hasattr(posix, 'getgroups'):
>>>>>>             raise unittest.SkipTest("need posix.getgroups")
>>>>>>         if sys.platform == 'darwin':
>>>>>>             raise unittest.SkipTest("getgroups(2) is broken on OSX")
>>>>>>         self.saved_groups = posix.getgroups()
       
    1:     def tearDown(self):
>>>>>>         if hasattr(posix, 'setgroups'):
>>>>>>             posix.setgroups(self.saved_groups)
>>>>>>         elif hasattr(posix, 'initgroups'):
>>>>>>             name = pwd.getpwuid(posix.getuid()).pw_name
>>>>>>             posix.initgroups(name, self.saved_groups[0])
       
    1:     @unittest.skipUnless(hasattr(posix, 'initgroups'),
    1:                          'test needs posix.initgroups()')
           def test_initgroups(self):
               # find missing group
       
>>>>>>         g = max(self.saved_groups or [0]) + 1
>>>>>>         name = pwd.getpwuid(posix.getuid()).pw_name
>>>>>>         posix.initgroups(name, g)
>>>>>>         self.assertIn(g, posix.getgroups())
       
    1:     @unittest.skipUnless(hasattr(posix, 'setgroups'),
    1:                          'test needs posix.setgroups()')
           def test_setgroups(self):
>>>>>>         for groups in [[0], range(16)]:
>>>>>>             posix.setgroups(groups)
>>>>>>             self.assertListEqual(groups, posix.getgroups())
       
       
    1: def test_main():
    1:     test_support.run_unittest(PosixTester, PosixGroupsTester)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
