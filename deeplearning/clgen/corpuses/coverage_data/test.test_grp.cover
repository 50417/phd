    1: """Test script for the grp module."""
       
    1: import unittest
    1: from test import test_support
       
    1: grp = test_support.import_module('grp')
       
    2: class GroupDatabaseTestCase(unittest.TestCase):
       
    1:     def check_value(self, value):
               # check that a grp tuple has the entries and
               # attributes promised by the docs
  762:         self.assertEqual(len(value), 4)
  762:         self.assertEqual(value[0], value.gr_name)
  762:         self.assertIsInstance(value.gr_name, basestring)
  762:         self.assertEqual(value[1], value.gr_passwd)
  762:         self.assertIsInstance(value.gr_passwd, basestring)
  762:         self.assertEqual(value[2], value.gr_gid)
  762:         self.assertIsInstance(value.gr_gid, (long, int))
  762:         self.assertEqual(value[3], value.gr_mem)
  762:         self.assertIsInstance(value.gr_mem, list)
       
    1:     def test_values(self):
    1:         entries = grp.getgrall()
       
  255:         for e in entries:
  254:             self.check_value(e)
       
    1:     def test_values_extended(self):
    1:         entries = grp.getgrall()
    1:         if len(entries) > 1000:  # Huge group file (NIS?) -- skip the rest
>>>>>>             self.skipTest('huge group file, extended test skipped')
       
  255:         for e in entries:
  254:             e2 = grp.getgrgid(e.gr_gid)
  254:             self.check_value(e2)
  254:             self.assertEqual(e2.gr_gid, e.gr_gid)
  254:             name = e.gr_name
  254:             if name.startswith('+') or name.startswith('-'):
                       # NIS-related entry
>>>>>>                 continue
  254:             e2 = grp.getgrnam(name)
  254:             self.check_value(e2)
                   # There are instances where getgrall() returns group names in
                   # lowercase while getgrgid() returns proper casing.
                   # Discovered on Ubuntu 5.04 (custom).
  254:             self.assertEqual(e2.gr_name.lower(), name.lower())
       
    1:     def test_errors(self):
    1:         self.assertRaises(TypeError, grp.getgrgid)
    1:         self.assertRaises(TypeError, grp.getgrnam)
    1:         self.assertRaises(TypeError, grp.getgrall, 42)
       
               # try to get some errors
    1:         bynames = {}
    1:         bygids = {}
  255:         for (n, p, g, mem) in grp.getgrall():
  254:             if not n or n == '+':
>>>>>>                 continue # skip NIS entries etc.
  254:             bynames[n] = g
  254:             bygids[g] = n
       
    1:         allnames = bynames.keys()
    1:         namei = 0
    1:         fakename = allnames[namei]
    2:         while fakename in bynames:
    1:             chars = list(fakename)
    1:             for i in xrange(len(chars)):
    1:                 if chars[i] == 'z':
>>>>>>                     chars[i] = 'A'
>>>>>>                     break
    1:                 elif chars[i] == 'Z':
>>>>>>                     continue
                       else:
    1:                     chars[i] = chr(ord(chars[i]) + 1)
    1:                     break
                   else:
>>>>>>                 namei = namei + 1
>>>>>>                 try:
>>>>>>                     fakename = allnames[namei]
>>>>>>                 except IndexError:
                           # should never happen... if so, just forget it
>>>>>>                     break
    1:             fakename = ''.join(chars)
       
    1:         self.assertRaises(KeyError, grp.getgrnam, fakename)
       
               # Choose a non-existent gid.
    1:         fakegid = 4127
    1:         while fakegid in bygids:
>>>>>>             fakegid = (fakegid * 3) % 0x10000
       
    1:         self.assertRaises(KeyError, grp.getgrgid, fakegid)
       
    1: def test_main():
    1:     test_support.run_unittest(GroupDatabaseTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
