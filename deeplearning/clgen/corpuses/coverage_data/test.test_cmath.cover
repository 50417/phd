    1: from test.test_support import run_unittest, cpython_only
    1: from test.test_math import parse_testfile, test_file
    1: import unittest
    1: import cmath, math
    1: from cmath import phase, polar, rect, pi
       
    1: INF = float('inf')
    1: NAN = float('nan')
       
    7: complex_zeros = [complex(x, y) for x in [0.0, -0.0] for y in [0.0, -0.0]]
    1: complex_infinities = [complex(x, y) for x, y in [
    1:         (INF, 0.0),  # 1st quadrant
    1:         (INF, 2.3),
    1:         (INF, INF),
    1:         (2.3, INF),
    1:         (0.0, INF),
    1:         (-0.0, INF), # 2nd quadrant
    1:         (-2.3, INF),
    1:         (-INF, INF),
    1:         (-INF, 2.3),
    1:         (-INF, 0.0),
    1:         (-INF, -0.0), # 3rd quadrant
    1:         (-INF, -2.3),
    1:         (-INF, -INF),
    1:         (-2.3, -INF),
    1:         (-0.0, -INF),
    1:         (0.0, -INF), # 4th quadrant
    1:         (2.3, -INF),
    1:         (INF, -INF),
    1:         (INF, -2.3),
   21:         (INF, -0.0)
               ]]
    1: complex_nans = [complex(x, y) for x, y in [
    1:         (NAN, -INF),
    1:         (NAN, -2.3),
    1:         (NAN, -0.0),
    1:         (NAN, 0.0),
    1:         (NAN, 2.3),
    1:         (NAN, INF),
    1:         (-INF, NAN),
    1:         (-2.3, NAN),
    1:         (-0.0, NAN),
    1:         (0.0, NAN),
    1:         (2.3, NAN),
   13:         (INF, NAN)
               ]]
       
    2: class CMathTests(unittest.TestCase):
           # list of all functions in cmath
    1:     test_functions = [getattr(cmath, fname) for fname in [
    1:             'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh',
    1:             'cos', 'cosh', 'exp', 'log', 'log10', 'sin', 'sinh',
   17:             'sqrt', 'tan', 'tanh']]
           # test first and second arguments independently for 2-argument log
   44:     test_functions.append(lambda x : cmath.log(x, 1729. + 0j))
   44:     test_functions.append(lambda x : cmath.log(14.-27j, x))
       
    1:     def setUp(self):
   12:         self.test_values = open(test_file)
       
    1:     def tearDown(self):
   12:         self.test_values.close()
       
    1:     def rAssertAlmostEqual(self, a, b, rel_err = 2e-15, abs_err = 5e-323,
    1:                            msg=None):
               """Fail if the two floating-point numbers are not almost equal.
       
               Determine whether floating-point values a and b are equal to within
               a (small) rounding error.  The default values for rel_err and
               abs_err are chosen to be suitable for platforms where a float is
               represented by an IEEE 754 double.  They allow an error of between
               9 and 19 ulps.
               """
       
               # special values testing
 4175:         if math.isnan(a):
  383:             if math.isnan(b):
  383:                 return
>>>>>>             self.fail(msg or '{!r} should be nan'.format(b))
       
 3792:         if math.isinf(a):
  483:             if a == b:
  483:                 return
>>>>>>             self.fail(msg or 'finite result where infinity expected: '
>>>>>>                       'expected {!r}, got {!r}'.format(a, b))
       
               # if both a and b are zero, check whether they have the same sign
               # (in theory there are examples where it would be legitimate for a
               # and b to have opposite signs; in practice these hardly ever
               # occur).
 3309:         if not a and not b:
  881:             if math.copysign(1., a) != math.copysign(1., b):
>>>>>>                 self.fail(msg or 'zero has wrong sign: expected {!r}, '
>>>>>>                           'got {!r}'.format(a, b))
       
               # if a-b overflows, or b is infinite, return False.  Again, in
               # theory there are examples where a is within a few ulps of the
               # max representable float, and then b could legitimately be
               # infinite.  In practice these examples are rare.
 3309:         try:
 3309:             absolute_error = abs(b-a)
>>>>>>         except OverflowError:
>>>>>>             pass
               else:
                   # test passes if either the absolute error or the relative
                   # error is sufficiently small.  The defaults amount to an
                   # error of between 9 ulps and 19 ulps on an IEEE-754 compliant
                   # machine.
 3309:             if absolute_error <= max(abs_err, rel_err * abs(a)):
 3309:                 return
>>>>>>         self.fail(msg or
>>>>>>                   '{!r} and {!r} are not sufficiently close'.format(a, b))
       
    1:     def test_constants(self):
    1:         e_expected = 2.71828182845904523536
    1:         pi_expected = 3.14159265358979323846
    1:         self.assertAlmostEqual(cmath.pi, pi_expected, places=9,
    1:             msg="cmath.pi is {}; should be {}".format(cmath.pi, pi_expected))
    1:         self.assertAlmostEqual(cmath.e, e_expected, places=9,
    1:             msg="cmath.e is {}; should be {}".format(cmath.e, e_expected))
       
    1:     def test_user_object(self):
               # Test automatic calling of __complex__ and __float__ by cmath
               # functions
       
               # some random values to use as test values; we avoid values
               # for which any of the functions in cmath is undefined
               # (i.e. 0., 1., -1., 1j, -1j) or would cause overflow
    1:         cx_arg = 4.419414439 + 1.497100113j
    1:         flt_arg = -6.131677725
       
               # a variety of non-complex numbers, used to check that
               # non-complex return values from __complex__ give an error
    1:         non_complexes = ["not complex", 1, 5L, 2., None,
    1:                          object(), NotImplemented]
       
               # Now we introduce a variety of classes whose instances might
               # end up being passed to the cmath functions
       
               # usual case: new-style class implementing __complex__
    2:         class MyComplex(object):
    1:             def __init__(self, value):
  144:                 self.value = value
    1:             def __complex__(self):
  144:                 return self.value
       
               # old-style class implementing __complex__
    2:         class MyComplexOS:
    1:             def __init__(self, value):
  144:                 self.value = value
    1:             def __complex__(self):
  144:                 return self.value
       
               # classes for which __complex__ raises an exception
    2:         class SomeException(Exception):
    1:             pass
    2:         class MyComplexException(object):
    1:             def __complex__(self):
   18:                 raise SomeException
    2:         class MyComplexExceptionOS:
    1:             def __complex__(self):
   18:                 raise SomeException
       
               # some classes not providing __float__ or __complex__
    2:         class NeitherComplexNorFloat(object):
    1:             pass
    2:         class NeitherComplexNorFloatOS:
    1:             pass
    2:         class MyInt(object):
    1:             def __int__(self): return 2
    1:             def __long__(self): return 2L
    1:             def __index__(self): return 2
    2:         class MyIntOS:
    1:             def __int__(self): return 2
    1:             def __long__(self): return 2L
    1:             def __index__(self): return 2
       
               # other possible combinations of __float__ and __complex__
               # that should work
    2:         class FloatAndComplex(object):
    1:             def __float__(self):
>>>>>>                 return flt_arg
    1:             def __complex__(self):
   18:                 return cx_arg
    2:         class FloatAndComplexOS:
    1:             def __float__(self):
>>>>>>                 return flt_arg
    1:             def __complex__(self):
   18:                 return cx_arg
    2:         class JustFloat(object):
    1:             def __float__(self):
   18:                 return flt_arg
    2:         class JustFloatOS:
    1:             def __float__(self):
   18:                 return flt_arg
       
   19:         for f in self.test_functions:
                   # usual usage
   18:             self.assertEqual(f(MyComplex(cx_arg)), f(cx_arg))
   18:             self.assertEqual(f(MyComplexOS(cx_arg)), f(cx_arg))
                   # other combinations of __float__ and __complex__
   18:             self.assertEqual(f(FloatAndComplex()), f(cx_arg))
   18:             self.assertEqual(f(FloatAndComplexOS()), f(cx_arg))
   18:             self.assertEqual(f(JustFloat()), f(flt_arg))
   18:             self.assertEqual(f(JustFloatOS()), f(flt_arg))
                   # TypeError should be raised for classes not providing
                   # either __complex__ or __float__, even if they provide
                   # __int__, __long__ or __index__.  An old-style class
                   # currently raises AttributeError instead of a TypeError;
                   # this could be considered a bug.
   18:             self.assertRaises(TypeError, f, NeitherComplexNorFloat())
   18:             self.assertRaises(TypeError, f, MyInt())
   18:             self.assertRaises(Exception, f, NeitherComplexNorFloatOS())
   18:             self.assertRaises(Exception, f, MyIntOS())
                   # non-complex return value from __complex__ -> TypeError
  144:             for bad_complex in non_complexes:
  126:                 self.assertRaises(TypeError, f, MyComplex(bad_complex))
  126:                 self.assertRaises(TypeError, f, MyComplexOS(bad_complex))
                   # exceptions in __complex__ should be propagated correctly
   18:             self.assertRaises(SomeException, f, MyComplexException())
   18:             self.assertRaises(SomeException, f, MyComplexExceptionOS())
       
    1:     def test_input_type(self):
               # ints and longs should be acceptable inputs to all cmath
               # functions, by virtue of providing a __float__ method
   19:         for f in self.test_functions:
   72:             for arg in [2, 2L, 2.]:
   54:                 self.assertEqual(f(arg), f(arg.__float__()))
       
               # but strings should give a TypeError
   19:         for f in self.test_functions:
  108:             for arg in ["a", "long_string", "0", "1j", ""]:
   90:                 self.assertRaises(TypeError, f, arg)
       
    1:     def test_cmath_matches_math(self):
               # check that corresponding cmath and math functions are equal
               # for floats in the appropriate range
       
               # test_values in (0, 1)
    1:         test_values = [0.01, 0.1, 0.2, 0.5, 0.9, 0.99]
       
               # test_values for functions defined on [-1., 1.]
    7:         unit_interval = test_values + [-x for x in test_values] + \
    1:             [0., 1., -1.]
       
               # test_values for log, log10, sqrt
    7:         positive = test_values + [1.] + [1./x for x in test_values]
    1:         nonnegative = [0.] + positive
       
               # test_values for functions defined on the whole real line
   14:         real_line = [0.] + positive + [-x for x in positive]
       
    1:         test_functions = {
    1:             'acos' : unit_interval,
    1:             'asin' : unit_interval,
    1:             'atan' : real_line,
    1:             'cos' : real_line,
    1:             'cosh' : real_line,
    1:             'exp' : real_line,
    1:             'log' : positive,
    1:             'log10' : positive,
    1:             'sin' : real_line,
    1:             'sinh' : real_line,
    1:             'sqrt' : nonnegative,
    1:             'tan' : real_line,
    1:             'tanh' : real_line}
       
   14:         for fn, values in test_functions.items():
   13:             float_fn = getattr(math, fn)
   13:             complex_fn = getattr(cmath, fn)
  299:             for v in values:
  286:                 z = complex_fn(v)
  286:                 self.rAssertAlmostEqual(float_fn(v), z.real)
  286:                 self.assertEqual(0., z.imag)
       
               # test two-argument version of log with various bases
    4:         for base in [0.5, 2., 10.]:
   42:             for v in positive:
   39:                 z = cmath.log(v, base)
   39:                 self.rAssertAlmostEqual(math.log(v, base), z.real)
   39:                 self.assertEqual(0., z.imag)
       
    1:     def test_specific_values(self):
    1:         if not float.__getformat__("double").startswith("IEEE"):
>>>>>>             self.skipTest('needs IEEE double')
       
    1:         def rect_complex(z):
                   """Wrapped version of rect that accepts a complex number instead of
                   two float arguments."""
   53:             return cmath.rect(z.real, z.imag)
       
    1:         def polar_complex(z):
                   """Wrapped version of polar that returns a complex number instead of
                   two floats."""
   38:             return complex(*polar(z))
       
 1990:         for id, fn, ar, ai, er, ei, flags in parse_testfile(test_file):
 1989:             arg = complex(ar, ai)
 1989:             expected = complex(er, ei)
 1989:             if fn == 'rect':
   53:                 function = rect_complex
 1936:             elif fn == 'polar':
   38:                 function = polar_complex
                   else:
 1898:                 function = getattr(cmath, fn)
 1989:             if 'divide-by-zero' in flags or 'invalid' in flags:
   98:                 try:
   98:                     actual = function(arg)
   98:                 except ValueError:
   98:                     continue
                       else:
>>>>>>                     self.fail('ValueError not raised in test '
>>>>>>                           '{}: {}(complex({!r}, {!r}))'.format(id, fn, ar, ai))
       
 1891:             if 'overflow' in flags:
    6:                 try:
    6:                     actual = function(arg)
    6:                 except OverflowError:
    6:                     continue
                       else:
>>>>>>                     self.fail('OverflowError not raised in test '
>>>>>>                           '{}: {}(complex({!r}, {!r}))'.format(id, fn, ar, ai))
       
 1885:             actual = function(arg)
       
 1885:             if 'ignore-real-sign' in flags:
   26:                 actual = complex(abs(actual.real), actual.imag)
   26:                 expected = complex(abs(expected.real), expected.imag)
 1885:             if 'ignore-imag-sign' in flags:
   36:                 actual = complex(actual.real, abs(actual.imag))
   36:                 expected = complex(expected.real, abs(expected.imag))
       
                   # for the real part of the log function, we allow an
                   # absolute error of up to 2e-15.
 1885:             if fn in ('log', 'log10'):
  294:                 real_abs_err = 2e-15
                   else:
 1591:                 real_abs_err = 5e-323
       
                   error_message = (
 1885:                 '{}: {}(complex({!r}, {!r}))\n'
                       'Expected: complex({!r}, {!r})\n'
                       'Received: complex({!r}, {!r})\n'
                       'Received value insufficiently close to expected value.'
 1885:                 ).format(id, fn, ar, ai,
 1885:                      expected.real, expected.imag,
 1885:                      actual.real, actual.imag)
 1885:             self.rAssertAlmostEqual(expected.real, actual.real,
 1885:                                         abs_err=real_abs_err,
 1885:                                         msg=error_message)
 1885:             self.rAssertAlmostEqual(expected.imag, actual.imag,
 1885:                                         msg=error_message)
       
    1:     def check_polar(self, func):
    2:         def check(arg, expected):
   40:             got = func(arg)
  120:             for e, g in zip(expected, got):
   80:                 self.rAssertAlmostEqual(e, g)
    2:         check(0, (0., 0.))
    2:         check(1, (1., 0.))
    2:         check(-1, (1., pi))
    2:         check(1j, (1., pi / 2))
    2:         check(-3j, (3., -pi / 2))
    2:         inf = float('inf')
    2:         check(complex(inf, 0), (inf, 0.))
    2:         check(complex(-inf, 0), (inf, pi))
    2:         check(complex(3, inf), (inf, pi / 2))
    2:         check(complex(5, -inf), (inf, -pi / 2))
    2:         check(complex(inf, inf), (inf, pi / 4))
    2:         check(complex(inf, -inf), (inf, -pi / 4))
    2:         check(complex(-inf, inf), (inf, 3 * pi / 4))
    2:         check(complex(-inf, -inf), (inf, -3 * pi / 4))
    2:         nan = float('nan')
    2:         check(complex(nan, 0), (nan, nan))
    2:         check(complex(0, nan), (nan, nan))
    2:         check(complex(nan, nan), (nan, nan))
    2:         check(complex(inf, nan), (inf, nan))
    2:         check(complex(-inf, nan), (inf, nan))
    2:         check(complex(nan, inf), (inf, nan))
    2:         check(complex(nan, -inf), (inf, nan))
       
    1:     def test_polar(self):
    1:         self.check_polar(polar)
       
    1:     @cpython_only
           def test_polar_errno(self):
               # Issue #24489: check a previously set C errno doesn't disturb polar()
    1:         from _testcapi import set_errno
    1:         def polar_with_errno_set(z):
   20:             set_errno(11)
   20:             try:
   20:                 return polar(z)
                   finally:
   20:                 set_errno(0)
    1:         self.check_polar(polar_with_errno_set)
       
    1:     def test_phase(self):
    1:         self.assertAlmostEqual(phase(0), 0.)
    1:         self.assertAlmostEqual(phase(1.), 0.)
    1:         self.assertAlmostEqual(phase(-1.), pi)
    1:         self.assertAlmostEqual(phase(-1.+1E-300j), pi)
    1:         self.assertAlmostEqual(phase(-1.-1E-300j), -pi)
    1:         self.assertAlmostEqual(phase(1j), pi/2)
    1:         self.assertAlmostEqual(phase(-1j), -pi/2)
       
               # zeros
    1:         self.assertEqual(phase(complex(0.0, 0.0)), 0.0)
    1:         self.assertEqual(phase(complex(0.0, -0.0)), -0.0)
    1:         self.assertEqual(phase(complex(-0.0, 0.0)), pi)
    1:         self.assertEqual(phase(complex(-0.0, -0.0)), -pi)
       
               # infinities
    1:         self.assertAlmostEqual(phase(complex(-INF, -0.0)), -pi)
    1:         self.assertAlmostEqual(phase(complex(-INF, -2.3)), -pi)
    1:         self.assertAlmostEqual(phase(complex(-INF, -INF)), -0.75*pi)
    1:         self.assertAlmostEqual(phase(complex(-2.3, -INF)), -pi/2)
    1:         self.assertAlmostEqual(phase(complex(-0.0, -INF)), -pi/2)
    1:         self.assertAlmostEqual(phase(complex(0.0, -INF)), -pi/2)
    1:         self.assertAlmostEqual(phase(complex(2.3, -INF)), -pi/2)
    1:         self.assertAlmostEqual(phase(complex(INF, -INF)), -pi/4)
    1:         self.assertEqual(phase(complex(INF, -2.3)), -0.0)
    1:         self.assertEqual(phase(complex(INF, -0.0)), -0.0)
    1:         self.assertEqual(phase(complex(INF, 0.0)), 0.0)
    1:         self.assertEqual(phase(complex(INF, 2.3)), 0.0)
    1:         self.assertAlmostEqual(phase(complex(INF, INF)), pi/4)
    1:         self.assertAlmostEqual(phase(complex(2.3, INF)), pi/2)
    1:         self.assertAlmostEqual(phase(complex(0.0, INF)), pi/2)
    1:         self.assertAlmostEqual(phase(complex(-0.0, INF)), pi/2)
    1:         self.assertAlmostEqual(phase(complex(-2.3, INF)), pi/2)
    1:         self.assertAlmostEqual(phase(complex(-INF, INF)), 0.75*pi)
    1:         self.assertAlmostEqual(phase(complex(-INF, 2.3)), pi)
    1:         self.assertAlmostEqual(phase(complex(-INF, 0.0)), pi)
       
               # real or imaginary part NaN
   13:         for z in complex_nans:
   12:             self.assertTrue(math.isnan(phase(z)))
       
    1:     def test_abs(self):
               # zeros
    5:         for z in complex_zeros:
    4:             self.assertEqual(abs(z), 0.0)
       
               # infinities
   21:         for z in complex_infinities:
   20:             self.assertEqual(abs(z), INF)
       
               # real or imaginary part NaN
    1:         self.assertEqual(abs(complex(NAN, -INF)), INF)
    1:         self.assertTrue(math.isnan(abs(complex(NAN, -2.3))))
    1:         self.assertTrue(math.isnan(abs(complex(NAN, -0.0))))
    1:         self.assertTrue(math.isnan(abs(complex(NAN, 0.0))))
    1:         self.assertTrue(math.isnan(abs(complex(NAN, 2.3))))
    1:         self.assertEqual(abs(complex(NAN, INF)), INF)
    1:         self.assertEqual(abs(complex(-INF, NAN)), INF)
    1:         self.assertTrue(math.isnan(abs(complex(-2.3, NAN))))
    1:         self.assertTrue(math.isnan(abs(complex(-0.0, NAN))))
    1:         self.assertTrue(math.isnan(abs(complex(0.0, NAN))))
    1:         self.assertTrue(math.isnan(abs(complex(2.3, NAN))))
    1:         self.assertEqual(abs(complex(INF, NAN)), INF)
    1:         self.assertTrue(math.isnan(abs(complex(NAN, NAN))))
       
               # result overflows
    1:         if float.__getformat__("double").startswith("IEEE"):
    1:             self.assertRaises(OverflowError, abs, complex(1.4e308, 1.4e308))
       
    1:     def assertCEqual(self, a, b):
    5:         eps = 1E-7
    5:         if abs(a.real - b[0]) > eps or abs(a.imag - b[1]) > eps:
>>>>>>             self.fail((a ,b))
       
    1:     def test_rect(self):
    1:         self.assertCEqual(rect(0, 0), (0, 0))
    1:         self.assertCEqual(rect(1, 0), (1., 0))
    1:         self.assertCEqual(rect(1, -pi), (-1., 0))
    1:         self.assertCEqual(rect(1, pi/2), (0, 1.))
    1:         self.assertCEqual(rect(1, -pi/2), (0, -1.))
       
    1:     def test_isnan(self):
    1:         self.assertFalse(cmath.isnan(1))
    1:         self.assertFalse(cmath.isnan(1j))
    1:         self.assertFalse(cmath.isnan(INF))
    1:         self.assertTrue(cmath.isnan(NAN))
    1:         self.assertTrue(cmath.isnan(complex(NAN, 0)))
    1:         self.assertTrue(cmath.isnan(complex(0, NAN)))
    1:         self.assertTrue(cmath.isnan(complex(NAN, NAN)))
    1:         self.assertTrue(cmath.isnan(complex(NAN, INF)))
    1:         self.assertTrue(cmath.isnan(complex(INF, NAN)))
       
    1:     def test_isinf(self):
    1:         self.assertFalse(cmath.isinf(1))
    1:         self.assertFalse(cmath.isinf(1j))
    1:         self.assertFalse(cmath.isinf(NAN))
    1:         self.assertTrue(cmath.isinf(INF))
    1:         self.assertTrue(cmath.isinf(complex(INF, 0)))
    1:         self.assertTrue(cmath.isinf(complex(0, INF)))
    1:         self.assertTrue(cmath.isinf(complex(INF, INF)))
    1:         self.assertTrue(cmath.isinf(complex(NAN, INF)))
    1:         self.assertTrue(cmath.isinf(complex(INF, NAN)))
       
       
    1: def test_main():
    1:     run_unittest(CMathTests)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
