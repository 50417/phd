       #
       # test_codecencodings_cn.py
       #   Codec encoding tests for PRC encodings.
       #
       
    1: from test import test_support
    1: from test import multibytecodec_support
    1: import unittest
       
    2: class Test_GB2312(multibytecodec_support.TestBase, unittest.TestCase):
    1:     encoding = 'gb2312'
    1:     tstring = multibytecodec_support.load_teststring('gb2312')
           codectests = (
               # invalid bytes
    1:         ("abc\x81\x81\xc1\xc4", "strict",  None),
    1:         ("abc\xc8", "strict",  None),
    1:         ("abc\x81\x81\xc1\xc4", "replace", u"abc\ufffd\u804a"),
    1:         ("abc\x81\x81\xc1\xc4\xc8", "replace", u"abc\ufffd\u804a\ufffd"),
    1:         ("abc\x81\x81\xc1\xc4", "ignore",  u"abc\u804a"),
    1:         ("\xc1\x64", "strict", None),
           )
       
    2: class Test_GBK(multibytecodec_support.TestBase, unittest.TestCase):
    1:     encoding = 'gbk'
    1:     tstring = multibytecodec_support.load_teststring('gbk')
           codectests = (
               # invalid bytes
    1:         ("abc\x80\x80\xc1\xc4", "strict",  None),
    1:         ("abc\xc8", "strict",  None),
    1:         ("abc\x80\x80\xc1\xc4", "replace", u"abc\ufffd\u804a"),
    1:         ("abc\x80\x80\xc1\xc4\xc8", "replace", u"abc\ufffd\u804a\ufffd"),
    1:         ("abc\x80\x80\xc1\xc4", "ignore",  u"abc\u804a"),
    1:         ("\x83\x34\x83\x31", "strict", None),
    1:         (u"\u30fb", "strict", None),
           )
       
    2: class Test_GB18030(multibytecodec_support.TestBase, unittest.TestCase):
    1:     encoding = 'gb18030'
    1:     tstring = multibytecodec_support.load_teststring('gb18030')
           codectests = (
               # invalid bytes
    1:         ("abc\x80\x80\xc1\xc4", "strict",  None),
    1:         ("abc\xc8", "strict",  None),
    1:         ("abc\x80\x80\xc1\xc4", "replace", u"abc\ufffd\u804a"),
    1:         ("abc\x80\x80\xc1\xc4\xc8", "replace", u"abc\ufffd\u804a\ufffd"),
    1:         ("abc\x80\x80\xc1\xc4", "ignore",  u"abc\u804a"),
    1:         ("abc\x84\x39\x84\x39\xc1\xc4", "replace", u"abc\ufffd\u804a"),
    1:         (u"\u30fb", "strict", "\x819\xa79"),
               # issue29990
    1:         ("\xff\x30\x81\x30", "strict", None),
    1:         ("\x81\x30\xff\x30", "strict", None),
    1:         ("abc\x81\x39\xff\x39\xc1\xc4", "replace", u"abc\ufffd\u804a"),
    1:         ("abc\xab\x36\xff\x30def", "replace", u'abc\ufffddef'),
    1:         ("abc\xbf\x38\xff\x32\xc1\xc4", "ignore", u"abc\u804a"),
           )
    1:     has_iso10646 = True
       
    2: class Test_HZ(multibytecodec_support.TestBase, unittest.TestCase):
    1:     encoding = 'hz'
    1:     tstring = multibytecodec_support.load_teststring('hz')
           codectests = (
               # test '~\n' (3 lines)
               (b'This sentence is in ASCII.\n'
                b'The next sentence is in GB.~{<:Ky2;S{#,~}~\n'
                b'~{NpJ)l6HK!#~}Bye.\n',
                'strict',
    1:          u'This sentence is in ASCII.\n'
                u'The next sentence is in GB.'
                u'\u5df1\u6240\u4e0d\u6b32\uff0c\u52ff\u65bd\u65bc\u4eba\u3002'
                u'Bye.\n'),
               # test '~\n' (4 lines)
               (b'This sentence is in ASCII.\n'
                b'The next sentence is in GB.~\n'
                b'~{<:Ky2;S{#,NpJ)l6HK!#~}~\n'
                b'Bye.\n',
                'strict',
    1:          u'This sentence is in ASCII.\n'
                u'The next sentence is in GB.'
                u'\u5df1\u6240\u4e0d\u6b32\uff0c\u52ff\u65bd\u65bc\u4eba\u3002'
                u'Bye.\n'),
               # invalid bytes
    1:         (b'ab~cd', 'replace', u'ab\uFFFDd'),
    1:         (b'ab\xffcd', 'replace', u'ab\uFFFDcd'),
    1:         (b'ab~{\x81\x81\x41\x44~}cd', 'replace', u'ab\uFFFD\uFFFD\u804Acd'),
               # issue 30003
    1:         (u'ab~cd', 'strict',  b'ab~~cd'), # escape ~
    1:         (b'~{Dc~~:C~}', 'strict', None),  # ~~ only in ASCII mode
    1:         (b'~{Dc~\n:C~}', 'strict', None), # ~\n only in ASCII mode
           )
       
    1: def test_main():
    1:     test_support.run_unittest(__name__)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
