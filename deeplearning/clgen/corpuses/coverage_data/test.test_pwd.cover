    1: import sys
    1: import unittest
    1: from test import test_support
       
    1: pwd = test_support.import_module('pwd')
       
    2: class PwdTest(unittest.TestCase):
       
    1:     def test_values(self):
    1:         entries = pwd.getpwall()
       
  200:         for e in entries:
  199:             self.assertEqual(len(e), 7)
  199:             self.assertEqual(e[0], e.pw_name)
  199:             self.assertIsInstance(e.pw_name, basestring)
  199:             self.assertEqual(e[1], e.pw_passwd)
  199:             self.assertIsInstance(e.pw_passwd, basestring)
  199:             self.assertEqual(e[2], e.pw_uid)
  199:             self.assertIsInstance(e.pw_uid, (int, long))
  199:             self.assertEqual(e[3], e.pw_gid)
  199:             self.assertIsInstance(e.pw_gid, (int, long))
  199:             self.assertEqual(e[4], e.pw_gecos)
  199:             self.assertIsInstance(e.pw_gecos, basestring)
  199:             self.assertEqual(e[5], e.pw_dir)
  199:             self.assertIsInstance(e.pw_dir, basestring)
  199:             self.assertEqual(e[6], e.pw_shell)
  199:             self.assertIsInstance(e.pw_shell, basestring)
       
                   # The following won't work, because of duplicate entries
                   # for one uid
                   #    self.assertEqual(pwd.getpwuid(e.pw_uid), e)
                   # instead of this collect all entries for one uid
                   # and check afterwards (done in test_values_extended)
       
    1:     def test_values_extended(self):
    1:         entries = pwd.getpwall()
    1:         entriesbyname = {}
    1:         entriesbyuid = {}
       
    1:         if len(entries) > 1000:  # Huge passwd file (NIS?) -- skip this test
>>>>>>             self.skipTest('passwd file is huge; extended test skipped')
       
  200:         for e in entries:
  199:             entriesbyname.setdefault(e.pw_name, []).append(e)
  199:             entriesbyuid.setdefault(e.pw_uid, []).append(e)
       
               # check whether the entry returned by getpwuid()
               # for each uid is among those from getpwall() for this uid
  200:         for e in entries:
  199:             if not e[0] or e[0] == '+':
>>>>>>                 continue # skip NIS entries etc.
  199:             self.assertIn(pwd.getpwnam(e.pw_name), entriesbyname[e.pw_name])
  199:             self.assertIn(pwd.getpwuid(e.pw_uid), entriesbyuid[e.pw_uid])
       
    1:     def test_errors(self):
    1:         self.assertRaises(TypeError, pwd.getpwuid)
    1:         self.assertRaises(TypeError, pwd.getpwuid, 3.14)
    1:         self.assertRaises(TypeError, pwd.getpwnam)
    1:         self.assertRaises(TypeError, pwd.getpwnam, 42)
    1:         self.assertRaises(TypeError, pwd.getpwall, 42)
       
               # try to get some errors
    1:         bynames = {}
    1:         byuids = {}
  200:         for (n, p, u, g, gecos, d, s) in pwd.getpwall():
  199:             bynames[n] = u
  199:             byuids[u] = n
       
    1:         allnames = bynames.keys()
    1:         namei = 0
    1:         fakename = allnames[namei]
    2:         while fakename in bynames:
    1:             chars = list(fakename)
    1:             for i in xrange(len(chars)):
    1:                 if chars[i] == 'z':
>>>>>>                     chars[i] = 'A'
>>>>>>                     break
    1:                 elif chars[i] == 'Z':
>>>>>>                     continue
                       else:
    1:                     chars[i] = chr(ord(chars[i]) + 1)
    1:                     break
                   else:
>>>>>>                 namei = namei + 1
>>>>>>                 try:
>>>>>>                     fakename = allnames[namei]
>>>>>>                 except IndexError:
                           # should never happen... if so, just forget it
>>>>>>                     break
    1:             fakename = ''.join(chars)
       
    1:         self.assertRaises(KeyError, pwd.getpwnam, fakename)
       
               # In some cases, byuids isn't a complete list of all users in the
               # system, so if we try to pick a value not in byuids (via a perturbing
               # loop, say), pwd.getpwuid() might still be able to find data for that
               # uid. Using sys.maxint may provoke the same problems, but hopefully
               # it will be a more repeatable failure.
    1:         fakeuid = sys.maxint
    1:         self.assertNotIn(fakeuid, byuids)
    1:         self.assertRaises(KeyError, pwd.getpwuid, fakeuid)
       
               # -1 shouldn't be a valid uid because it has a special meaning in many
               # uid-related functions
    1:         self.assertRaises(KeyError, pwd.getpwuid, -1)
               # should be out of uid_t range
    1:         self.assertRaises(KeyError, pwd.getpwuid, 2**128)
    1:         self.assertRaises(KeyError, pwd.getpwuid, -2**128)
       
    1: def test_main():
    1:     test_support.run_unittest(PwdTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
