       """Generic thread tests.
       
       Meant to be used by dummy_thread and thread.  To allow for different modules
       to be used, test_main() can be called with the module to use as the thread
       implementation as its sole argument.
       
    1: """
    1: import dummy_thread as _thread
    1: import time
    1: import Queue
    1: import random
    1: import unittest
    1: from test import test_support
       
    1: DELAY = 0 # Set > 0 when testing a module other than dummy_thread, such as
                 # the 'thread' module.
       
    2: class LockTests(unittest.TestCase):
    1:     """Test lock objects."""
       
    1:     def setUp(self):
               # Create a lock
    8:         self.lock = _thread.allocate_lock()
       
    1:     def test_initlock(self):
               #Make sure locks start locked
    1:         self.assertFalse(self.lock.locked(),
    1:                         "Lock object is not initialized unlocked.")
       
    1:     def test_release(self):
               # Test self.lock.release()
    1:         self.lock.acquire()
    1:         self.lock.release()
    1:         self.assertFalse(self.lock.locked(),
    1:                         "Lock object did not release properly.")
       
    1:     def test_improper_release(self):
               #Make sure release of an unlocked thread raises _thread.error
    1:         self.assertRaises(_thread.error, self.lock.release)
       
    1:     def test_cond_acquire_success(self):
               #Make sure the conditional acquiring of the lock works.
    1:         self.assertTrue(self.lock.acquire(0),
    1:                         "Conditional acquiring of the lock failed.")
       
    1:     def test_cond_acquire_fail(self):
               #Test acquiring locked lock returns False
    1:         self.lock.acquire(0)
    1:         self.assertFalse(self.lock.acquire(0),
    1:                         "Conditional acquiring of a locked lock incorrectly "
                                "succeeded.")
       
    1:     def test_uncond_acquire_success(self):
               #Make sure unconditional acquiring of a lock works.
    1:         self.lock.acquire()
    1:         self.assertTrue(self.lock.locked(),
    1:                         "Uncondional locking failed.")
       
    1:     def test_uncond_acquire_return_val(self):
               #Make sure that an unconditional locking returns True.
    1:         self.assertIs(self.lock.acquire(1), True,
    1:                         "Unconditional locking did not return True.")
    1:         self.assertIs(self.lock.acquire(), True)
       
    1:     def test_uncond_acquire_blocking(self):
               #Make sure that unconditional acquiring of a locked lock blocks.
    1:         def delay_unlock(to_unlock, delay):
                   """Hold on to lock for a set amount of time before unlocking."""
    1:             time.sleep(delay)
    1:             to_unlock.release()
       
    1:         self.lock.acquire()
    1:         start_time = int(time.time())
    1:         _thread.start_new_thread(delay_unlock,(self.lock, DELAY))
    1:         if test_support.verbose:
>>>>>>             print
>>>>>>             print "*** Waiting for thread to release the lock "\
>>>>>>             "(approx. %s sec.) ***" % DELAY
    1:         self.lock.acquire()
    1:         end_time = int(time.time())
    1:         if test_support.verbose:
>>>>>>             print "done"
    1:         self.assertGreaterEqual(end_time - start_time, DELAY,
    1:                         "Blocking by unconditional acquiring failed.")
       
    2: class MiscTests(unittest.TestCase):
    1:     """Miscellaneous tests."""
       
    1:     def test_exit(self):
               #Make sure _thread.exit() raises SystemExit
    1:         self.assertRaises(SystemExit, _thread.exit)
       
    1:     def test_ident(self):
               #Test sanity of _thread.get_ident()
    1:         self.assertIsInstance(_thread.get_ident(), int,
    1:                               "_thread.get_ident() returned a non-integer")
    1:         self.assertNotEqual(_thread.get_ident(), 0,
    1:                         "_thread.get_ident() returned 0")
       
    1:     def test_LockType(self):
               #Make sure _thread.LockType is the same type as _thread.allocate_locke()
    1:         self.assertIsInstance(_thread.allocate_lock(), _thread.LockType,
    1:                               "_thread.LockType is not an instance of what "
                                     "is returned by _thread.allocate_lock()")
       
    1:     def test_interrupt_main(self):
               #Calling start_new_thread with a function that executes interrupt_main
               # should raise KeyboardInterrupt upon completion.
    1:         def call_interrupt():
    1:             _thread.interrupt_main()
    1:         self.assertRaises(KeyboardInterrupt, _thread.start_new_thread,
    1:                               call_interrupt, tuple())
       
    1:     def test_interrupt_in_main(self):
               # Make sure that if interrupt_main is called in main threat that
               # KeyboardInterrupt is raised instantly.
    1:         self.assertRaises(KeyboardInterrupt, _thread.interrupt_main)
       
    2: class ThreadTests(unittest.TestCase):
    1:     """Test thread creation."""
       
    1:     def test_arg_passing(self):
               #Make sure that parameter passing works.
    1:         def arg_tester(queue, arg1=False, arg2=False):
                   """Use to test _thread.start_new_thread() passes args properly."""
    3:             queue.put((arg1, arg2))
       
    1:         testing_queue = Queue.Queue(1)
    1:         _thread.start_new_thread(arg_tester, (testing_queue, True, True))
    1:         result = testing_queue.get()
    1:         self.assertTrue(result[0] and result[1],
    1:                         "Argument passing for thread creation using tuple failed")
    1:         _thread.start_new_thread(arg_tester, tuple(), {'queue':testing_queue,
    1:                                                        'arg1':True, 'arg2':True})
    1:         result = testing_queue.get()
    1:         self.assertTrue(result[0] and result[1],
    1:                         "Argument passing for thread creation using kwargs failed")
    1:         _thread.start_new_thread(arg_tester, (testing_queue, True), {'arg2':True})
    1:         result = testing_queue.get()
    1:         self.assertTrue(result[0] and result[1],
    1:                         "Argument passing for thread creation using both tuple"
                               " and kwargs failed")
       
    1:     def test_multi_creation(self):
               #Make sure multiple threads can be created.
    1:         def queue_mark(queue, delay):
                   """Wait for ``delay`` seconds and then put something into ``queue``"""
    5:             time.sleep(delay)
    5:             queue.put(_thread.get_ident())
       
    1:         thread_count = 5
    1:         testing_queue = Queue.Queue(thread_count)
    1:         if test_support.verbose:
>>>>>>             print
>>>>>>             print "*** Testing multiple thread creation "\
>>>>>>             "(will take approx. %s to %s sec.) ***" % (DELAY, thread_count)
    6:         for count in xrange(thread_count):
    5:             if DELAY:
>>>>>>                 local_delay = round(random.random(), 1)
                   else:
    5:                 local_delay = 0
    5:             _thread.start_new_thread(queue_mark,
    5:                                      (testing_queue, local_delay))
    1:         time.sleep(DELAY)
    1:         if test_support.verbose:
>>>>>>             print 'done'
    1:         self.assertEqual(testing_queue.qsize(), thread_count,
    1:                         "Not all %s threads executed properly after %s sec." %
    1:                         (thread_count, DELAY))
       
    1: def test_main(imported_module=None):
           global _thread, DELAY
    1:     if imported_module:
>>>>>>         _thread = imported_module
>>>>>>         DELAY = 2
    1:     if test_support.verbose:
>>>>>>         print
>>>>>>         print "*** Using %s as _thread module ***" % _thread
    1:     test_support.run_unittest(LockTests, MiscTests, ThreadTests)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
