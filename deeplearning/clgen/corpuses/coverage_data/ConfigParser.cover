       """Configuration file parser.
       
       A setup file consists of sections, lead by a "[section]" header,
       and followed by "name: value" entries, with continuations and such in
       the style of RFC 822.
       
       The option values can contain format strings which refer to other values in
       the same section, or values in a special [DEFAULT] section.
       
       For example:
       
           something: %(dir)s/whatever
       
       would resolve the "%(dir)s" to the value of dir.  All reference
       expansions are done late, on demand.
       
       Intrinsic defaults can be specified by passing them into the
       ConfigParser constructor as a dictionary.
       
       class:
       
       ConfigParser -- responsible for parsing a list of
                       configuration files, and managing the parsed database.
       
           methods:
       
           __init__(defaults=None)
               create the parser and specify a dictionary of intrinsic defaults.  The
               keys must be strings, the values must be appropriate for %()s string
               interpolation.  Note that `__name__' is always an intrinsic default;
               its value is the section's name.
       
           sections()
               return all the configuration section names, sans DEFAULT
       
           has_section(section)
               return whether the given section exists
       
           has_option(section, option)
               return whether the given option exists in the given section
       
           options(section)
               return list of configuration options for the named section
       
           read(filenames)
               read and parse the list of named configuration files, given by
               name.  A single filename is also allowed.  Non-existing files
               are ignored.  Return list of successfully read files.
       
           readfp(fp, filename=None)
               read and parse one configuration file, given as a file object.
               The filename defaults to fp.name; it is only used in error
               messages (if fp has no `name' attribute, the string `<???>' is used).
       
           get(section, option, raw=False, vars=None)
               return a string value for the named option.  All % interpolations are
               expanded in the return values, based on the defaults passed into the
               constructor and the DEFAULT section.  Additional substitutions may be
               provided using the `vars' argument, which must be a dictionary whose
               contents override any pre-existing defaults.
       
           getint(section, options)
               like get(), but convert value to an integer
       
           getfloat(section, options)
               like get(), but convert value to a float
       
           getboolean(section, options)
               like get(), but convert value to a boolean (currently case
               insensitively defined as 0, false, no, off for False, and 1, true,
               yes, on for True).  Returns False or True.
       
           items(section, raw=False, vars=None)
               return a list of tuples with (name, value) for each option
               in the section.
       
           remove_section(section)
               remove the given file section and all its options
       
           remove_option(section, option)
               remove the given option from the given section
       
           set(section, option, value)
               set the given option
       
           write(fp)
               write the configuration state in .ini format
    1: """
       
    1: try:
    1:     from collections import OrderedDict as _default_dict
>>>>>> except ImportError:
           # fallback for setup.py which hasn't yet built _collections
>>>>>>     _default_dict = dict
       
    1: import re
       
    1: __all__ = ["NoSectionError", "DuplicateSectionError", "NoOptionError",
    1:            "InterpolationError", "InterpolationDepthError",
    1:            "InterpolationSyntaxError", "ParsingError",
    1:            "MissingSectionHeaderError",
    1:            "ConfigParser", "SafeConfigParser", "RawConfigParser",
    1:            "DEFAULTSECT", "MAX_INTERPOLATION_DEPTH"]
       
    1: DEFAULTSECT = "DEFAULT"
       
    1: MAX_INTERPOLATION_DEPTH = 10
       
       
       
       # exception classes
    2: class Error(Exception):
    1:     """Base class for ConfigParser exceptions."""
       
    1:     def _get_message(self):
               """Getter for 'message'; needed only to override deprecation in
               BaseException."""
  147:         return self.__message
       
    1:     def _set_message(self, value):
               """Setter for 'message'; needed only to override deprecation in
               BaseException."""
  139:         self.__message = value
       
           # BaseException.message has been deprecated since Python 2.6.  To prevent
           # DeprecationWarning from popping up over this pre-existing attribute, use
           # a new property that takes lookup precedence.
    1:     message = property(_get_message, _set_message)
       
    1:     def __init__(self, msg=''):
  112:         self.message = msg
  112:         Exception.__init__(self, msg)
       
    1:     def __repr__(self):
   60:         return self.message
       
    1:     __str__ = __repr__
       
    2: class NoSectionError(Error):
    1:     """Raised when no section matches a requested option."""
       
    1:     def __init__(self, section):
   28:         Error.__init__(self, 'No section: %r' % (section,))
   28:         self.section = section
   28:         self.args = (section, )
       
    2: class DuplicateSectionError(Error):
    1:     """Raised when a section is multiply-created."""
       
    1:     def __init__(self, section):
   10:         Error.__init__(self, "Section %r already exists" % section)
   10:         self.section = section
   10:         self.args = (section, )
       
    2: class NoOptionError(Error):
    1:     """A requested option was not found."""
       
    1:     def __init__(self, option, section):
   10:         Error.__init__(self, "No option %r in section: %r" %
   10:                        (option, section))
   10:         self.option = option
   10:         self.section = section
   10:         self.args = (option, section)
       
    2: class InterpolationError(Error):
    1:     """Base class for interpolation-related exceptions."""
       
    1:     def __init__(self, option, section, msg):
   22:         Error.__init__(self, msg)
   22:         self.option = option
   22:         self.section = section
   22:         self.args = (option, section, msg)
       
    2: class InterpolationMissingOptionError(InterpolationError):
    1:     """A string substitution required a setting which was not available."""
       
    1:     def __init__(self, option, section, rawval, reference):
    7:         msg = ("Bad value substitution:\n"
                      "\tsection: [%s]\n"
                      "\toption : %s\n"
                      "\tkey    : %s\n"
                      "\trawval : %s\n"
    7:                % (section, option, reference, rawval))
    7:         InterpolationError.__init__(self, option, section, msg)
    7:         self.reference = reference
    7:         self.args = (option, section, rawval, reference)
       
    2: class InterpolationSyntaxError(InterpolationError):
           """Raised when the source text into which substitutions are made
    1:     does not conform to the required syntax."""
       
    2: class InterpolationDepthError(InterpolationError):
    1:     """Raised when substitutions are nested too deeply."""
       
    1:     def __init__(self, option, section, rawval):
    7:         msg = ("Value interpolation too deeply recursive:\n"
                      "\tsection: [%s]\n"
                      "\toption : %s\n"
                      "\trawval : %s\n"
    7:                % (section, option, rawval))
    7:         InterpolationError.__init__(self, option, section, msg)
    7:         self.args = (option, section, rawval)
       
    2: class ParsingError(Error):
    1:     """Raised when a configuration file does not follow legal syntax."""
       
    1:     def __init__(self, filename):
   28:         Error.__init__(self, 'File contains parsing errors: %s' % filename)
   28:         self.filename = filename
   28:         self.errors = []
   28:         self.args = (filename, )
       
    1:     def append(self, lineno, line):
   27:         self.errors.append((lineno, line))
   27:         self.message += '\n\t[line %2d]: %s' % (lineno, line)
       
    2: class MissingSectionHeaderError(ParsingError):
    1:     """Raised when a key-value pair is found before any section header."""
       
    1:     def __init__(self, filename, lineno, line):
   10:         Error.__init__(
   10:             self,
   10:             'File contains no section headers.\nfile: %s, line: %d\n%r' %
   10:             (filename, lineno, line))
   10:         self.filename = filename
   10:         self.lineno = lineno
   10:         self.line = line
   10:         self.args = (filename, lineno, line)
       
       
    2: class RawConfigParser:
    1:     def __init__(self, defaults=None, dict_type=_default_dict,
    1:                  allow_no_value=False):
  196:         self._dict = dict_type
  196:         self._sections = self._dict()
  196:         self._defaults = self._dict()
  196:         if allow_no_value:
   71:             self._optcre = self.OPTCRE_NV
               else:
  125:             self._optcre = self.OPTCRE
  196:         if defaults:
   62:             for key, value in defaults.items():
   31:                 self._defaults[self.optionxform(key)] = value
       
    1:     def defaults(self):
>>>>>>         return self._defaults
       
    1:     def sections(self):
               """Return a list of section names, excluding [DEFAULT]"""
               # self._sections will never have [DEFAULT] in it
   40:         return self._sections.keys()
       
    1:     def add_section(self, section):
               """Create a new section in the configuration.
       
               Raise DuplicateSectionError if a section by the specified name
               already exists. Raise ValueError if name is DEFAULT or any of it's
               case-insensitive variants.
               """
 1239:         if section.lower() == "default":
    4:             raise ValueError, 'Invalid section name: %s' % section
       
 1235:         if section in self._sections:
    6:             raise DuplicateSectionError(section)
 1229:         self._sections[section] = self._dict()
       
    1:     def has_section(self, section):
               """Indicate whether the named section is present in the configuration.
       
               The DEFAULT section is not acknowledged.
               """
   24:         return section in self._sections
       
    1:     def options(self, section):
               """Return a list of option names for the given section name."""
   97:         try:
   97:             opts = self._sections[section].copy()
    6:         except KeyError:
    6:             raise NoSectionError(section)
   91:         opts.update(self._defaults)
   91:         if '__name__' in opts:
   67:             del opts['__name__']
   91:         return opts.keys()
       
    1:     def read(self, filenames):
               """Read and parse a filename or a list of filenames.
       
               Files that cannot be opened are silently ignored; this is
               designed so that you can specify a list of potential
               configuration file locations (e.g. current directory, user's
               home directory, systemwide directory), and all existing
               configuration files in the list will be read.  A single
               filename may also be given.
       
               Return list of successfully read files.
               """
   52:         if isinstance(filenames, basestring):
   34:             filenames = [filenames]
   52:         read_ok = []
  104:         for filename in filenames:
   52:             try:
   52:                 fp = open(filename)
   16:             except IOError:
   16:                 continue
   36:             self._read(fp, filename)
   36:             fp.close()
   36:             read_ok.append(filename)
   52:         return read_ok
       
    1:     def readfp(self, fp, filename=None):
               """Like read() but the argument must be a file-like object.
       
               The `fp' argument must have a `readline' method.  Optional
               second argument is the `filename', which if not given, is
               taken from fp.name.  If fp has no `name' attribute, `<???>' is
               used.
       
               """
  106:         if filename is None:
  106:             try:
  106:                 filename = fp.name
  105:             except AttributeError:
  105:                 filename = '<???>'
  106:         self._read(fp, filename)
       
    1:     def get(self, section, option):
   68:         opt = self.optionxform(option)
   68:         if section not in self._sections:
    6:             if section != DEFAULTSECT:
    2:                 raise NoSectionError(section)
    4:             if opt in self._defaults:
    4:                 return self._defaults[opt]
                   else:
>>>>>>                 raise NoOptionError(option, section)
   62:         elif opt in self._sections[section]:
   58:             return self._sections[section][opt]
    4:         elif opt in self._defaults:
    2:             return self._defaults[opt]
               else:
    2:             raise NoOptionError(option, section)
       
    1:     def items(self, section):
    2:         try:
    2:             d2 = self._sections[section]
>>>>>>         except KeyError:
>>>>>>             if section != DEFAULTSECT:
>>>>>>                 raise NoSectionError(section)
>>>>>>             d2 = self._dict()
    2:         d = self._defaults.copy()
    2:         d.update(d2)
    2:         if "__name__" in d:
    2:             del d["__name__"]
    2:         return d.items()
       
    1:     def _get(self, section, conv, option):
    9:         return conv(self.get(section, option))
       
    1:     def getint(self, section, option):
    9:         return self._get(section, int, option)
       
    1:     def getfloat(self, section, option):
>>>>>>         return self._get(section, float, option)
       
    1:     _boolean_states = {'1': True, 'yes': True, 'true': True, 'on': True,
    1:                        '0': False, 'no': False, 'false': False, 'off': False}
       
    1:     def getboolean(self, section, option):
   85:         v = self.get(section, option)
   85:         if v.lower() not in self._boolean_states:
   24:             raise ValueError, 'Not a boolean: %s' % v
   61:         return self._boolean_states[v.lower()]
       
    1:     def optionxform(self, optionstr):
14999:         return optionstr.lower()
       
    1:     def has_option(self, section, option):
               """Check for the existence of a given option in a given section."""
  361:         if not section or section == DEFAULTSECT:
>>>>>>             option = self.optionxform(option)
>>>>>>             return option in self._defaults
  361:         elif section not in self._sections:
   76:             return False
               else:
  285:             option = self.optionxform(option)
  285:             return (option in self._sections[section]
   41:                     or option in self._defaults)
       
    1:     def set(self, section, option, value=None):
               """Set an option."""
12069:         if not section or section == DEFAULTSECT:
>>>>>>             sectdict = self._defaults
               else:
12069:             try:
12069:                 sectdict = self._sections[section]
    6:             except KeyError:
    6:                 raise NoSectionError(section)
12063:         sectdict[self.optionxform(option)] = value
       
    1:     def write(self, fp):
               """Write an .ini-format representation of the configuration state."""
   21:         if self._defaults:
    6:             fp.write("[%s]\n" % DEFAULTSECT)
   12:             for (key, value) in self._defaults.items():
    6:                 fp.write("%s = %s\n" % (key, str(value).replace('\n', '\n\t')))
    6:             fp.write("\n")
 1234:         for section in self._sections:
 1213:             fp.write("[%s]\n" % section)
13240:             for (key, value) in self._sections[section].items():
12027:                 if key == "__name__":
   11:                     continue
12016:                 if (value is not None) or (self._optcre == self.OPTCRE):
12013:                     key = " = ".join((key, str(value).replace('\n', '\n\t')))
12016:                 fp.write("%s\n" % (key))
 1213:             fp.write("\n")
       
    1:     def remove_option(self, section, option):
               """Remove an option."""
   24:         if not section or section == DEFAULTSECT:
>>>>>>             sectdict = self._defaults
               else:
   24:             try:
   24:                 sectdict = self._sections[section]
    6:             except KeyError:
    6:                 raise NoSectionError(section)
   18:         option = self.optionxform(option)
   18:         existed = option in sectdict
   18:         if existed:
   12:             del sectdict[option]
   18:         return existed
       
    1:     def remove_section(self, section):
               """Remove a file section."""
>>>>>>         existed = section in self._sections
>>>>>>         if existed:
>>>>>>             del self._sections[section]
>>>>>>         return existed
       
           #
           # Regular expressions for parsing section headers and options.
           #
    1:     SECTCRE = re.compile(
    1:         r'\['                                 # [
               r'(?P<header>[^]]+)'                  # very permissive!
               r'\]'                                 # ]
               )
    1:     OPTCRE = re.compile(
    1:         r'(?P<option>[^:=\s][^:=]*)'          # very permissive!
               r'\s*(?P<vi>[:=])\s*'                 # any number of space/tab,
                                                     # followed by separator
                                                     # (either : or =), followed
                                                     # by any # space/tab
               r'(?P<value>.*)$'                     # everything up to eol
               )
    1:     OPTCRE_NV = re.compile(
    1:         r'(?P<option>[^:=\s][^:=]*)'          # very permissive!
               r'\s*(?:'                             # any number of space/tab,
               r'(?P<vi>[:=])\s*'                    # optionally followed by
                                                     # separator (either : or
                                                     # =), followed by any #
                                                     # space/tab
               r'(?P<value>.*))?$'                   # everything up to eol
               )
       
    1:     def _read(self, fp, fpname):
               """Parse a sectioned setup file.
       
               The sections in setup file contains a title line at the top,
               indicated by a name in square brackets (`[]'), plus key/value
               options lines, indicated by `name: value' format lines.
               Continuations are represented by an embedded newline then
               leading whitespace.  Blank lines, lines beginning with a '#',
               and just about everything else are ignored.
               """
  142:         cursect = None                        # None, or a dictionary
  142:         optname = None
  142:         lineno = 0
  142:         e = None                              # None, or an exception
17945:         while True:
17945:             line = fp.readline()
17945:             if not line:
  136:                 break
17809:             lineno = lineno + 1
                   # comment or blank line?
17809:             if line.strip() == '' or line[0] in '#;':
   92:                 continue
17463:             if line.split(None, 1)[0].lower() == 'rem' and line[0] in "rR":
                       # no leading whitespace
>>>>>>                 continue
                   # continuation line?
17463:             if line[0].isspace() and cursect is not None and optname:
15042:                 value = line.strip()
15042:                 if value:
15042:                     cursect[optname].append(value)
                   # a section header or option header?
                   else:
                       # is it a section header?
 2421:                 mo = self.SECTCRE.match(line)
 2421:                 if mo:
  421:                     sectname = mo.group('header')
  421:                     if sectname in self._sections:
   18:                         cursect = self._sections[sectname]
  403:                     elif sectname == DEFAULTSECT:
    6:                         cursect = self._defaults
                           else:
  397:                         cursect = self._dict()
  397:                         cursect['__name__'] = sectname
  397:                         self._sections[sectname] = cursect
                           # So sections can't start with a continuation line
  421:                     optname = None
                       # no section header in the file?
 2000:                 elif cursect is None:
    6:                     raise MissingSectionHeaderError(fpname, lineno, line)
                       # an option line?
                       else:
 1994:                     mo = self._optcre.match(line)
 1994:                     if mo:
 1970:                         optname, vi, optval = mo.group('option', 'vi', 'value')
 1970:                         optname = self.optionxform(optname.rstrip())
                               # This check is fine because the OPTCRE cannot
                               # match if it would set optval to None
 1970:                         if optval is not None:
 1964:                             if vi in ('=', ':') and ';' in optval:
                                       # ';' is a comment delimiter only if it follows
                                       # a spacing character
    6:                                 pos = optval.find(';')
    6:                                 if pos != -1 and optval[pos-1].isspace():
    6:                                     optval = optval[:pos]
 1964:                             optval = optval.strip()
                                   # allow empty values
 1964:                             if optval == '""':
>>>>>>                                 optval = ''
 1964:                             cursect[optname] = [optval]
                               else:
                                   # valueless option handling
    6:                             cursect[optname] = optval
                           else:
                               # a non-fatal parsing error occurred.  set up the
                               # exception but keep going. the exception will be
                               # raised at the end of the file and will contain a
                               # list of all bogus lines
   24:                         if not e:
   24:                             e = ParsingError(fpname)
   24:                         e.append(lineno, repr(line))
               # if any parsing errors occurred, raise an exception
  136:         if e:
   24:             raise e
       
               # join the multi-line values collected while reading
  112:         all_sections = [self._defaults]
  112:         all_sections.extend(self._sections.values())
  615:         for options in all_sections:
 2883:             for name, val in options.items():
 2380:                 if isinstance(val, list):
 1964:                     options[name] = '\n'.join(val)
       
    1: import UserDict as _UserDict
       
    2: class _Chainmap(_UserDict.DictMixin):
           """Combine multiple mappings for successive lookups.
       
           For example, to emulate Python's normal lookup sequence:
       
               import __builtin__
               pylookup = _Chainmap(locals(), globals(), vars(__builtin__))
    1:     """
       
    1:     def __init__(self, *maps):
  453:         self._maps = maps
       
    1:     def __getitem__(self, key):
 1181:         for mapping in self._maps:
 1168:             try:
 1168:                 return mapping[key]
  599:             except KeyError:
  599:                 pass
   13:         raise KeyError(key)
       
    1:     def keys(self):
    6:         result = []
    6:         seen = set()
   18:         for mapping in self._maps:
   36:             for key in mapping:
   24:                 if key not in seen:
   18:                     result.append(key)
   18:                     seen.add(key)
    6:         return result
       
    2: class ConfigParser(RawConfigParser):
       
    1:     def get(self, section, option, raw=False, vars=None):
               """Get an option value for a given section.
       
               If `vars' is provided, it must be a dictionary. The option is looked up
               in `vars' (if provided), `section', and in `defaults' in that order.
       
               All % interpolations are expanded in the return values, unless the
               optional argument `raw' is true. Values for interpolation keys are
               looked up in the same manner as the option.
       
               The section DEFAULT is special.
               """
  456:         sectiondict = {}
  456:         try:
  456:             sectiondict = self._sections[section]
   12:         except KeyError:
   12:             if section != DEFAULTSECT:
    4:                 raise NoSectionError(section)
               # Update with the entry specific variables
  452:         vardict = {}
  452:         if vars:
>>>>>>             for key, value in vars.items():
>>>>>>                 vardict[self.optionxform(key)] = value
  452:         d = _Chainmap(vardict, sectiondict, self._defaults)
  452:         option = self.optionxform(option)
  452:         try:
  452:             value = d[option]
    4:         except KeyError:
    4:             raise NoOptionError(option, section)
       
  448:         if raw or value is None:
   30:             return value
               else:
  418:             return self._interpolate(section, option, value, d)
       
    1:     def items(self, section, raw=False, vars=None):
               """Return a list of tuples with (name, value) for each option
               in the section.
       
               All % interpolations are expanded in the return values, based on the
               defaults passed into the constructor, unless the optional argument
               `raw' is true.  Additional substitutions may be provided using the
               `vars' argument, which must be a dictionary whose contents overrides
               any pre-existing defaults.
       
               The section DEFAULT is special.
               """
    3:         d = self._defaults.copy()
    3:         try:
    3:             d.update(self._sections[section])
>>>>>>         except KeyError:
>>>>>>             if section != DEFAULTSECT:
>>>>>>                 raise NoSectionError(section)
               # Update with the entry specific variables
    3:         if vars:
>>>>>>             for key, value in vars.items():
>>>>>>                 d[self.optionxform(key)] = value
    3:         options = d.keys()
    3:         if "__name__" in options:
    3:             options.remove("__name__")
    3:         if raw:
>>>>>>             return [(option, d[option])
>>>>>>                     for option in options]
               else:
    3:             return [(option, self._interpolate(section, option, d[option], d))
   18:                     for option in options]
       
    1:     def _interpolate(self, section, option, rawval, vars):
               # do the string interpolation
  353:         value = rawval
  353:         depth = MAX_INTERPOLATION_DEPTH
  388:         while depth:                    # Loop through this until it's done
  386:             depth -= 1
  386:             if value and "%(" in value:
   39:                 value = self._KEYCRE.sub(self._interpolation_replace, value)
   37:                 try:
   37:                     value = value % vars
    2:                 except KeyError, e:
    1:                     raise InterpolationMissingOptionError(
    1:                         option, section, rawval, e.args[0])
                   else:
  346:                 break
  348:         if value and "%(" in value:
    1:             raise InterpolationDepthError(option, section, rawval)
  347:         return value
       
    1:     _KEYCRE = re.compile(r"%\(([^)]*)\)s|.")
       
    1:     def _interpolation_replace(self, match):
 1344:         s = match.group(1)
 1344:         if s is None:
 1308:             return match.group()
               else:
   36:             return "%%(%s)s" % self.optionxform(s)
       
       
    2: class SafeConfigParser(ConfigParser):
       
    1:     def _interpolate(self, section, option, rawval, vars):
               # do the string interpolation
   80:         L = []
   80:         self._interpolate_some(option, L, rawval, section, vars, 1)
   76:         return ''.join(L)
       
    1:     _interpvar_re = re.compile(r"%\(([^)]+)\)s")
       
    1:     def _interpolate_some(self, option, accum, rest, section, map, depth):
  136:         if depth > MAX_INTERPOLATION_DEPTH:
    2:             raise InterpolationDepthError(option, section, rest)
  194:         while rest:
  158:             p = rest.find("%")
  158:             if p < 0:
   76:                 accum.append(rest)
   76:                 return
   82:             if p > 0:
   20:                 accum.append(rest[:p])
   20:                 rest = rest[p:]
                   # p is no longer used
   82:             c = rest[1:2]
   82:             if c == "%":
    6:                 accum.append("%")
    6:                 rest = rest[2:]
   76:             elif c == "(":
   76:                 m = self._interpvar_re.match(rest)
   76:                 if m is None:
>>>>>>                     raise InterpolationSyntaxError(option, section,
>>>>>>                         "bad interpolation variable reference %r" % rest)
   76:                 var = self.optionxform(m.group(1))
   76:                 rest = rest[m.end():]
   76:                 try:
   76:                     v = map[var]
    2:                 except KeyError:
    2:                     raise InterpolationMissingOptionError(
    2:                         option, section, rest, var)
   74:                 if "%" in v:
   56:                     self._interpolate_some(option, accum, v,
   56:                                            section, map, depth + 1)
                       else:
   18:                     accum.append(v)
                   else:
>>>>>>                 raise InterpolationSyntaxError(
>>>>>>                     option, section,
>>>>>>                     "'%%' must be followed by '%%' or '(', found: %r" % (rest,))
       
    1:     def set(self, section, option, value=None):
               """Set an option.  Extend ConfigParser.set: check for string values."""
               # The only legal non-string value if we allow valueless
               # options is None, so we need to check if the value is a
               # string if:
               # - we do not allow valueless options, or
               # - we allow valueless options but the value is not None
   38:         if self._optcre is self.OPTCRE or value:
   38:             if not isinstance(value, basestring):
   12:                 raise TypeError("option values must be strings")
   26:         if value is not None:
                   # check for bad percent signs:
                   # first, replace all "good" interpolations
   26:             tmp_value = value.replace('%%', '')
   26:             tmp_value = self._interpvar_re.sub('', tmp_value)
                   # then, check if there's a lone percent sign left
   26:             if '%' in tmp_value:
    6:                 raise ValueError("invalid interpolation syntax in %r at "
    6:                                 "position %d" % (value, tmp_value.find('%')))
   20:         ConfigParser.set(self, section, option, value)
