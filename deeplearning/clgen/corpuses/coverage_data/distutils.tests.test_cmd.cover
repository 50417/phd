    1: """Tests for distutils.cmd."""
    1: import unittest
    1: import os
    1: from test.test_support import captured_stdout, run_unittest
       
    1: from distutils.cmd import Command
    1: from distutils.dist import Distribution
    1: from distutils.errors import DistutilsOptionError
    1: from distutils import debug
       
    2: class MyCmd(Command):
    1:     def initialize_options(self):
    7:         pass
       
    2: class CommandTestCase(unittest.TestCase):
       
    1:     def setUp(self):
    7:         dist = Distribution()
    7:         self.cmd = MyCmd(dist)
       
    1:     def test_ensure_string_list(self):
       
    1:         cmd = self.cmd
    1:         cmd.not_string_list = ['one', 2, 'three']
    1:         cmd.yes_string_list = ['one', 'two', 'three']
    1:         cmd.not_string_list2 = object()
    1:         cmd.yes_string_list2 = 'ok'
    1:         cmd.ensure_string_list('yes_string_list')
    1:         cmd.ensure_string_list('yes_string_list2')
       
    1:         self.assertRaises(DistutilsOptionError,
    1:                           cmd.ensure_string_list, 'not_string_list')
       
    1:         self.assertRaises(DistutilsOptionError,
    1:                           cmd.ensure_string_list, 'not_string_list2')
       
    1:         cmd.option1 = 'ok,dok'
    1:         cmd.ensure_string_list('option1')
    1:         self.assertEqual(cmd.option1, ['ok', 'dok'])
       
    1:         cmd.option2 = ['xxx', 'www']
    1:         cmd.ensure_string_list('option2')
       
    1:         cmd.option3 = ['ok', 2]
    1:         self.assertRaises(DistutilsOptionError, cmd.ensure_string_list,
    1:                           'option3')
       
       
    1:     def test_make_file(self):
       
    1:         cmd = self.cmd
       
               # making sure it raises when infiles is not a string or a list/tuple
    1:         self.assertRaises(TypeError, cmd.make_file,
    1:                           infiles=1, outfile='', func='func', args=())
       
               # making sure execute gets called properly
    1:         def _execute(func, args, exec_msg, level):
    1:             self.assertEqual(exec_msg, 'generating out from in')
    1:         cmd.force = True
    1:         cmd.execute = _execute
    1:         cmd.make_file(infiles='in', outfile='out', func='func', args=())
       
    1:     def test_dump_options(self):
       
    1:         msgs = []
    1:         def _announce(msg, level):
    3:             msgs.append(msg)
    1:         cmd = self.cmd
    1:         cmd.announce = _announce
    1:         cmd.option1 = 1
    1:         cmd.option2 = 1
    1:         cmd.user_options = [('option1', '', ''), ('option2', '', '')]
    1:         cmd.dump_options()
       
    1:         wanted = ["command options for 'MyCmd':", '  option1 = 1',
    1:                   '  option2 = 1']
    1:         self.assertEqual(msgs, wanted)
       
    1:     def test_ensure_string(self):
    1:         cmd = self.cmd
    1:         cmd.option1 = 'ok'
    1:         cmd.ensure_string('option1')
       
    1:         cmd.option2 = None
    1:         cmd.ensure_string('option2', 'xxx')
    1:         self.assertTrue(hasattr(cmd, 'option2'))
       
    1:         cmd.option3 = 1
    1:         self.assertRaises(DistutilsOptionError, cmd.ensure_string, 'option3')
       
    1:     def test_ensure_filename(self):
    1:         cmd = self.cmd
    1:         cmd.option1 = __file__
    1:         cmd.ensure_filename('option1')
    1:         cmd.option2 = 'xxx'
    1:         self.assertRaises(DistutilsOptionError, cmd.ensure_filename, 'option2')
       
    1:     def test_ensure_dirname(self):
    1:         cmd = self.cmd
    1:         cmd.option1 = os.path.dirname(__file__) or os.curdir
    1:         cmd.ensure_dirname('option1')
    1:         cmd.option2 = 'xxx'
    1:         self.assertRaises(DistutilsOptionError, cmd.ensure_dirname, 'option2')
       
    1:     def test_debug_print(self):
    1:         cmd = self.cmd
    1:         with captured_stdout() as stdout:
    1:             cmd.debug_print('xxx')
    1:         stdout.seek(0)
    1:         self.assertEqual(stdout.read(), '')
       
    1:         debug.DEBUG = True
    1:         try:
    1:             with captured_stdout() as stdout:
    1:                 cmd.debug_print('xxx')
    1:             stdout.seek(0)
    1:             self.assertEqual(stdout.read(), 'xxx\n')
               finally:
    1:             debug.DEBUG = False
       
    1: def test_suite():
    1:     return unittest.makeSuite(CommandTestCase)
       
    1: if __name__ == '__main__':
>>>>>>     run_unittest(test_suite())
