       # -*- encoding: utf-8 -*-
    1: import sys
    1: import unittest
    1: import ttk
       
    2: class MockTkApp:
       
    1:     def splitlist(self, arg):
   14:         if isinstance(arg, tuple):
   13:             return arg
    1:         return arg.split(':')
       
    1:     def wantobjects(self):
>>>>>>         return True
       
       
    2: class MockTclObj(object):
    1:     typename = 'test'
       
    1:     def __init__(self, val):
    7:         self.val = val
       
    1:     def __str__(self):
    7:         return unicode(self.val)
       
       
    2: class MockStateSpec(object):
    1:     typename = 'StateSpec'
       
    1:     def __init__(self, *args):
    4:         self.val = args
       
    1:     def __str__(self):
    5:         return ' '.join(self.val)
       
       
    2: class InternalFunctionsTest(unittest.TestCase):
       
    1:     def test_format_optdict(self):
    1:         def check_against(fmt_opts, result):
   30:             for i in range(0, len(fmt_opts), 2):
   19:                 self.assertEqual(result.pop(fmt_opts[i]), fmt_opts[i + 1])
   11:             if result:
>>>>>>                 self.fail("result still got elements: %s" % result)
       
               # passing an empty dict should return an empty object (tuple here)
    1:         self.assertFalse(ttk._format_optdict({}))
       
               # check list formatting
    1:         check_against(
    1:             ttk._format_optdict({'fg': 'blue', 'padding': [1, 2, 3, 4]}),
    1:             {'-fg': 'blue', '-padding': '1 2 3 4'})
       
               # check tuple formatting (same as list)
    1:         check_against(
    1:             ttk._format_optdict({'test': (1, 2, '', 0)}),
    1:             {'-test': '1 2 {} 0'})
       
               # check untouched values
    1:         check_against(
    1:             ttk._format_optdict({'test': {'left': 'as is'}}),
    1:             {'-test': {'left': 'as is'}})
       
               # check script formatting
    1:         check_against(
    1:             ttk._format_optdict(
    1:                 {'test': [1, -1, '', '2m', 0], 'test2': 3,
    1:                  'test3': '', 'test4': 'abc def',
    1:                  'test5': '"abc"', 'test6': '{}',
    1:                  'test7': '} -spam {'}, script=True),
    1:             {'-test': '{1 -1 {} 2m 0}', '-test2': '3',
    1:              '-test3': '{}', '-test4': '{abc def}',
    1:              '-test5': '{"abc"}', '-test6': r'\{\}',
    1:              '-test7': r'\}\ -spam\ \{'})
       
    1:         opts = {u'αβγ': True, u'á': False}
    1:         orig_opts = opts.copy()
               # check if giving unicode keys is fine
    1:         check_against(ttk._format_optdict(opts), {u'-αβγ': True, u'-á': False})
               # opts should remain unchanged
    1:         self.assertEqual(opts, orig_opts)
       
               # passing values with spaces inside a tuple/list
    1:         check_against(
    1:             ttk._format_optdict(
    1:                 {'option': ('one two', 'three')}),
    1:             {'-option': '{one two} three'})
    1:         check_against(
    1:             ttk._format_optdict(
    1:                 {'option': ('one\ttwo', 'three')}),
    1:             {'-option': '{one\ttwo} three'})
       
               # passing empty strings inside a tuple/list
    1:         check_against(
    1:             ttk._format_optdict(
    1:                 {'option': ('', 'one')}),
    1:             {'-option': '{} one'})
       
               # passing values with braces inside a tuple/list
    1:         check_against(
    1:             ttk._format_optdict(
    1:                 {'option': ('one} {two', 'three')}),
    1:             {'-option': r'one\}\ \{two three'})
       
               # passing quoted strings inside a tuple/list
    1:         check_against(
    1:             ttk._format_optdict(
    1:                 {'option': ('"one"', 'two')}),
    1:             {'-option': '{"one"} two'})
    1:         check_against(
    1:             ttk._format_optdict(
    1:                 {'option': ('{one}', 'two')}),
    1:             {'-option': r'\{one\} two'})
       
               # ignore an option
    1:         amount_opts = len(ttk._format_optdict(opts, ignore=(u'á'))) // 2
    1:         self.assertEqual(amount_opts, len(opts) - 1)
       
               # ignore non-existing options
    1:         amount_opts = len(ttk._format_optdict(opts, ignore=(u'á', 'b'))) // 2
    1:         self.assertEqual(amount_opts, len(opts) - 1)
       
               # ignore every option
    1:         self.assertFalse(ttk._format_optdict(opts, ignore=opts.keys()))
       
       
    1:     def test_format_mapdict(self):
    1:         opts = {'a': [('b', 'c', 'val'), ('d', 'otherval'), ('', 'single')]}
    1:         result = ttk._format_mapdict(opts)
    1:         self.assertEqual(len(result), len(opts.keys()) * 2)
    1:         self.assertEqual(result, ('-a', '{b c} val d otherval {} single'))
    1:         self.assertEqual(ttk._format_mapdict(opts, script=True),
    1:             ('-a', '{{b c} val d otherval {} single}'))
       
    1:         self.assertEqual(ttk._format_mapdict({2: []}), ('-2', ''))
       
    1:         opts = {u'üñíćódè': [(u'á', u'vãl')]}
    1:         result = ttk._format_mapdict(opts)
    1:         self.assertEqual(result, (u'-üñíćódè', u'á vãl'))
       
               # empty states
    1:         valid = {'opt': [('', u'', 'hi')]}
    1:         self.assertEqual(ttk._format_mapdict(valid), ('-opt', '{ } hi'))
       
               # when passing multiple states, they all must be strings
    1:         invalid = {'opt': [(1, 2, 'valid val')]}
    1:         self.assertRaises(TypeError, ttk._format_mapdict, invalid)
    1:         invalid = {'opt': [([1], '2', 'valid val')]}
    1:         self.assertRaises(TypeError, ttk._format_mapdict, invalid)
               # but when passing a single state, it can be anything
    1:         valid = {'opt': [[1, 'value']]}
    1:         self.assertEqual(ttk._format_mapdict(valid), ('-opt', '1 value'))
               # special attention to single states which evalute to False
    6:         for stateval in (None, 0, False, '', set()): # just some samples
    5:             valid = {'opt': [(stateval, 'value')]}
    5:             self.assertEqual(ttk._format_mapdict(valid),
    5:                 ('-opt', '{} value'))
       
               # values must be iterable
    1:         opts = {'a': None}
    1:         self.assertRaises(TypeError, ttk._format_mapdict, opts)
       
               # items in the value must have size >= 2
    1:         self.assertRaises(IndexError, ttk._format_mapdict,
    1:             {'a': [('invalid', )]})
       
       
    1:     def test_format_elemcreate(self):
    1:         self.assertTrue(ttk._format_elemcreate(None), (None, ()))
       
               ## Testing type = image
               # image type expects at least an image name, so this should raise
               # IndexError since it tries to access the index 0 of an empty tuple
    1:         self.assertRaises(IndexError, ttk._format_elemcreate, 'image')
       
               # don't format returned values as a tcl script
               # minimum acceptable for image type
    1:         self.assertEqual(ttk._format_elemcreate('image', False, 'test'),
    1:             ("test ", ()))
               # specifying a state spec
    1:         self.assertEqual(ttk._format_elemcreate('image', False, 'test',
    1:             ('', 'a')), ("test {} a", ()))
               # state spec with multiple states
    1:         self.assertEqual(ttk._format_elemcreate('image', False, 'test',
    1:             ('a', 'b', 'c')), ("test {a b} c", ()))
               # state spec and options
    1:         res = ttk._format_elemcreate('image', False, 'test',
    1:                                      ('a', 'b'), a='x', b='y')
    1:         self.assertEqual(res[0], "test a b")
    1:         self.assertEqual(set(res[1]), {"-a", "x", "-b", "y"})
               # format returned values as a tcl script
               # state spec with multiple states and an option with a multivalue
    1:         self.assertEqual(ttk._format_elemcreate('image', True, 'test',
    1:             ('a', 'b', 'c', 'd'), x=[2, 3]), ("{test {a b c} d}", "-x {2 3}"))
       
               ## Testing type = vsapi
               # vsapi type expects at least a class name and a part_id, so this
               # should raise a ValueError since it tries to get two elements from
               # an empty tuple
    1:         self.assertRaises(ValueError, ttk._format_elemcreate, 'vsapi')
       
               # don't format returned values as a tcl script
               # minimum acceptable for vsapi
    1:         self.assertEqual(ttk._format_elemcreate('vsapi', False, 'a', 'b'),
    1:             ("a b ", ()))
               # now with a state spec with multiple states
    1:         self.assertEqual(ttk._format_elemcreate('vsapi', False, 'a', 'b',
    1:             ('a', 'b', 'c')), ("a b {a b} c", ()))
               # state spec and option
    1:         self.assertEqual(ttk._format_elemcreate('vsapi', False, 'a', 'b',
    1:             ('a', 'b'), opt='x'), ("a b a b", ("-opt", "x")))
               # format returned values as a tcl script
               # state spec with a multivalue and an option
    1:         self.assertEqual(ttk._format_elemcreate('vsapi', True, 'a', 'b',
    1:             ('a', 'b', [1, 2]), opt='x'), ("{a b {a b} {1 2}}", "-opt x"))
       
               # Testing type = from
               # from type expects at least a type name
    1:         self.assertRaises(IndexError, ttk._format_elemcreate, 'from')
       
    1:         self.assertEqual(ttk._format_elemcreate('from', False, 'a'),
    1:             ('a', ()))
    1:         self.assertEqual(ttk._format_elemcreate('from', False, 'a', 'b'),
    1:             ('a', ('b', )))
    1:         self.assertEqual(ttk._format_elemcreate('from', True, 'a', 'b'),
    1:             ('{a}', 'b'))
       
       
    1:     def test_format_layoutlist(self):
    1:         def sample(indent=0, indent_size=2):
    9:             return ttk._format_layoutlist(
    9:             [('a', {'other': [1, 2, 3], 'children':
    9:                 [('b', {'children':
    9:                     [('c', {'children':
    9:                         [('d', {'nice': 'opt'})], 'something': (1, 2)
                           })]
                       })]
    9:             })], indent=indent, indent_size=indent_size)[0]
       
    1:         def sample_expected(indent=0, indent_size=2):
   72:             spaces = lambda amount=0: ' ' * (amount + indent)
                   return (
    9:                 "%sa -other {1 2 3} -children {\n"
                       "%sb -children {\n"
                       "%sc -something {1 2} -children {\n"
                       "%sd -nice opt\n"
                       "%s}\n"
                       "%s}\n"
    9:                 "%s}" % (spaces(), spaces(indent_size),
    9:                     spaces(2 * indent_size), spaces(3 * indent_size),
    9:                     spaces(2 * indent_size), spaces(indent_size), spaces()))
       
               # empty layout
    1:         self.assertEqual(ttk._format_layoutlist([])[0], '')
       
               # smallest (after an empty one) acceptable layout
    1:         smallest = ttk._format_layoutlist([('a', None)], indent=0)
    1:         self.assertEqual(smallest,
    1:             ttk._format_layoutlist([('a', '')], indent=0))
    1:         self.assertEqual(smallest[0], 'a')
       
               # testing indentation levels
    1:         self.assertEqual(sample(), sample_expected())
    5:         for i in range(4):
    4:             self.assertEqual(sample(i), sample_expected(i))
    4:             self.assertEqual(sample(i, i), sample_expected(i, i))
       
               # invalid layout format, different kind of exceptions will be
               # raised
       
               # plain wrong format
    1:         self.assertRaises(ValueError, ttk._format_layoutlist,
    1:             ['bad', 'format'])
    1:         self.assertRaises(TypeError, ttk._format_layoutlist, None)
               # _format_layoutlist always expects the second item (in every item)
               # to act like a dict (except when the value evalutes to False).
    1:         self.assertRaises(AttributeError,
    1:             ttk._format_layoutlist, [('a', 'b')])
               # bad children formatting
    1:         self.assertRaises(ValueError, ttk._format_layoutlist,
    1:             [('name', {'children': {'a': None}})])
       
       
    1:     def test_script_from_settings(self):
               # empty options
    1:         self.assertFalse(ttk._script_from_settings({'name':
    1:             {'configure': None, 'map': None, 'element create': None}}))
       
               # empty layout
    1:         self.assertEqual(
    1:             ttk._script_from_settings({'name': {'layout': None}}),
    1:             "ttk::style layout name {\nnull\n}")
       
    1:         configdict = {u'αβγ': True, u'á': False}
    1:         self.assertTrue(
    1:             ttk._script_from_settings({'name': {'configure': configdict}}))
       
    1:         mapdict = {u'üñíćódè': [(u'á', u'vãl')]}
    1:         self.assertTrue(
    1:             ttk._script_from_settings({'name': {'map': mapdict}}))
       
               # invalid image element
    1:         self.assertRaises(IndexError,
    1:             ttk._script_from_settings, {'name': {'element create': ['image']}})
       
               # minimal valid image
    1:         self.assertTrue(ttk._script_from_settings({'name':
    1:             {'element create': ['image', 'name']}}))
       
    1:         image = {'thing': {'element create':
    1:             ['image', 'name', ('state1', 'state2', 'val')]}}
    1:         self.assertEqual(ttk._script_from_settings(image),
    1:             "ttk::style element create thing image {name {state1 state2} val} ")
       
    1:         image['thing']['element create'].append({'opt': 30})
    1:         self.assertEqual(ttk._script_from_settings(image),
    1:             "ttk::style element create thing image {name {state1 state2} val} "
                   "-opt 30")
       
    1:         image['thing']['element create'][-1]['opt'] = [MockTclObj(3),
    1:             MockTclObj('2m')]
    1:         self.assertEqual(ttk._script_from_settings(image),
    1:             "ttk::style element create thing image {name {state1 state2} val} "
                   "-opt {3 2m}")
       
       
    1:     def test_tclobj_to_py(self):
    1:         self.assertEqual(
    1:             ttk._tclobj_to_py((MockStateSpec('a', 'b'), 'val')),
    1:             [('a', 'b', 'val')])
    1:         self.assertEqual(
    1:             ttk._tclobj_to_py([MockTclObj('1'), 2, MockTclObj('3m')]),
    1:             [1, 2, '3m'])
       
       
    1:     def test_list_from_statespec(self):
    1:         def test_it(sspec, value, res_value, states):
    4:             self.assertEqual(ttk._list_from_statespec(
    4:                 (sspec, value)), [states + (res_value, )])
       
    8:         states_even = tuple('state%d' % i for i in range(6))
    1:         statespec = MockStateSpec(*states_even)
    1:         test_it(statespec, 'val', 'val', states_even)
    1:         test_it(statespec, MockTclObj('val'), 'val', states_even)
       
    7:         states_odd = tuple('state%d' % i for i in range(5))
    1:         statespec = MockStateSpec(*states_odd)
    1:         test_it(statespec, 'val', 'val', states_odd)
       
    1:         test_it(('a', 'b', 'c'), MockTclObj('val'), 'val', ('a', 'b', 'c'))
       
       
    1:     def test_list_from_layouttuple(self):
    1:         tk = MockTkApp()
       
               # empty layout tuple
    1:         self.assertFalse(ttk._list_from_layouttuple(tk, ()))
       
               # shortest layout tuple
    1:         self.assertEqual(ttk._list_from_layouttuple(tk, ('name', )),
    1:             [('name', {})])
       
               # not so interesting ltuple
    1:         sample_ltuple = ('name', '-option', 'value')
    1:         self.assertEqual(ttk._list_from_layouttuple(tk, sample_ltuple),
    1:             [('name', {'option': 'value'})])
       
               # empty children
    1:         self.assertEqual(ttk._list_from_layouttuple(tk,
    1:             ('something', '-children', ())),
    1:             [('something', {'children': []})]
               )
       
               # more interesting ltuple
               ltuple = (
    1:             'name', '-option', 'niceone', '-children', (
    1:                 ('otherone', '-children', (
    1:                     ('child', )), '-otheropt', 'othervalue'
                       )
                   )
               )
    1:         self.assertEqual(ttk._list_from_layouttuple(tk, ltuple),
    1:             [('name', {'option': 'niceone', 'children':
    1:                 [('otherone', {'otheropt': 'othervalue', 'children':
    1:                     [('child', {})]
                       })]
                   })]
               )
       
               # bad tuples
    1:         self.assertRaises(ValueError, ttk._list_from_layouttuple, tk,
    1:             ('name', 'no_minus'))
    1:         self.assertRaises(ValueError, ttk._list_from_layouttuple, tk,
    1:             ('name', 'no_minus', 'value'))
    1:         self.assertRaises(ValueError, ttk._list_from_layouttuple, tk,
    1:             ('something', '-children')) # no children
       
       
    1:     def test_val_or_dict(self):
    1:         def func(res, opt=None, val=None):
    4:             if opt is None:
    2:                 return res
    2:             if val is None:
    1:                 return "test val"
    1:             return (opt, val)
       
    1:         tk = MockTkApp()
    1:         tk.call = func
       
    1:         self.assertEqual(ttk._val_or_dict(tk, {}, '-test:3'),
    1:                          {'test': '3'})
    1:         self.assertEqual(ttk._val_or_dict(tk, {}, ('-test', 3)),
    1:                          {'test': 3})
       
    1:         self.assertEqual(ttk._val_or_dict(tk, {'test': None}, 'x:y'),
    1:                          'test val')
       
    1:         self.assertEqual(ttk._val_or_dict(tk, {'test': 3}, 'x:y'),
    1:                          {'test': 3})
       
       
    1:     def test_convert_stringval(self):
               tests = (
    1:             (0, 0), ('09', 9), ('a', 'a'), (u'áÚ', u'áÚ'), ([], '[]'),
    1:             (None, 'None')
               )
    7:         for orig, expected in tests:
    6:             self.assertEqual(ttk._convert_stringval(orig), expected)
       
    1:         if sys.getdefaultencoding() == 'ascii':
    1:             self.assertRaises(UnicodeDecodeError,
    1:                 ttk._convert_stringval, 'á')
       
       
    2: class TclObjsToPyTest(unittest.TestCase):
       
    1:     def test_unicode(self):
    1:         adict = {'opt': u'välúè'}
    1:         self.assertEqual(ttk.tclobjs_to_py(adict), {'opt': u'välúè'})
       
    1:         adict['opt'] = MockTclObj(adict['opt'])
    1:         self.assertEqual(ttk.tclobjs_to_py(adict), {'opt': u'välúè'})
       
    1:     def test_multivalues(self):
    1:         adict = {'opt': [1, 2, 3, 4]}
    1:         self.assertEqual(ttk.tclobjs_to_py(adict), {'opt': [1, 2, 3, 4]})
       
    1:         adict['opt'] = [1, 'xm', 3]
    1:         self.assertEqual(ttk.tclobjs_to_py(adict), {'opt': [1, 'xm', 3]})
       
    1:         adict['opt'] = (MockStateSpec('a', 'b'), u'válũè')
    1:         self.assertEqual(ttk.tclobjs_to_py(adict),
    1:             {'opt': [('a', 'b', u'válũè')]})
       
    1:         self.assertEqual(ttk.tclobjs_to_py({'x': ['y z']}),
    1:             {'x': ['y z']})
       
    1:     def test_nosplit(self):
    1:         self.assertEqual(ttk.tclobjs_to_py({'text': 'some text'}),
    1:             {'text': 'some text'})
       
    1: tests_nogui = (InternalFunctionsTest, TclObjsToPyTest)
       
    1: if __name__ == "__main__":
>>>>>>     from test.test_support import run_unittest
>>>>>>     run_unittest(*tests_nogui)
