       #
       # Test suite for the textwrap module.
       #
       # Original tests written by Greg Ward <gward@python.net>.
       # Converted to PyUnit by Peter Hansen <peter@engcorp.com>.
       # Currently maintained by Greg Ward.
       #
       # $Id$
       #
       
    1: import unittest
    1: from test import test_support
       
    1: from textwrap import TextWrapper, wrap, fill, dedent
       
       
    2: class BaseTestCase(unittest.TestCase):
    1:     '''Parent class with utility methods for textwrap tests.'''
       
    1:     def show(self, textin):
  156:         if isinstance(textin, list):
  148:             result = []
  502:             for i in range(len(textin)):
  354:                 result.append("  %d: %r" % (i, textin[i]))
  148:             result = '\n'.join(result)
    8:         elif isinstance(textin, basestring):
    8:             result = "  %s\n" % repr(textin)
  156:         return result
       
       
    1:     def check(self, result, expect):
   78:         self.assertEqual(result, expect,
   78:             'expected:\n%s\nbut got:\n%s' % (
   78:                 self.show(expect), self.show(result)))
       
    1:     def check_wrap(self, text, width, expect, **kwargs):
   61:         result = wrap(text, width, **kwargs)
   61:         self.check(result, expect)
       
    1:     def check_split(self, text, expect):
   17:         result = self.wrapper._split(text)
   17:         self.assertEqual(result, expect,
   17:                          "\nexpected %r\n"
   17:                          "but got  %r" % (expect, result))
       
       
    2: class WrapTestCase(BaseTestCase):
       
    1:     def setUp(self):
   28:         self.wrapper = TextWrapper(width=45)
       
    1:     def test_simple(self):
               # Simple case: just words, spaces, and a bit of punctuation
       
    1:         text = "Hello there, how are you this fine day?  I'm glad to hear it!"
       
    1:         self.check_wrap(text, 12,
    1:                         ["Hello there,",
    1:                          "how are you",
    1:                          "this fine",
    1:                          "day?  I'm",
    1:                          "glad to hear",
    1:                          "it!"])
    1:         self.check_wrap(text, 42,
    1:                         ["Hello there, how are you this fine day?",
    1:                          "I'm glad to hear it!"])
    1:         self.check_wrap(text, 80, [text])
       
    1:     def test_empty_string(self):
               # Check that wrapping the empty string returns an empty list.
    1:         self.check_wrap("", 6, [])
    1:         self.check_wrap("", 6, [], drop_whitespace=False)
       
    1:     def test_empty_string_with_initial_indent(self):
               # Check that the empty string is not indented.
    1:         self.check_wrap("", 6, [], initial_indent="++")
    1:         self.check_wrap("", 6, [], initial_indent="++", drop_whitespace=False)
       
    1:     def test_whitespace(self):
               # Whitespace munging and end-of-sentence detection
       
               text = """\
       This is a paragraph that already has
       line breaks.  But some of its lines are much longer than the others,
       so it needs to be wrapped.
       Some lines are \ttabbed too.
       What a mess!
    1: """
       
    1:         expect = ["This is a paragraph that already has line",
    1:                   "breaks.  But some of its lines are much",
    1:                   "longer than the others, so it needs to be",
    1:                   "wrapped.  Some lines are  tabbed too.  What a",
    1:                   "mess!"]
       
    1:         wrapper = TextWrapper(45, fix_sentence_endings=True)
    1:         result = wrapper.wrap(text)
    1:         self.check(result, expect)
       
    1:         result = wrapper.fill(text)
    1:         self.check(result, '\n'.join(expect))
       
    1:     def test_fix_sentence_endings(self):
    1:         wrapper = TextWrapper(60, fix_sentence_endings=True)
       
               # SF #847346: ensure that fix_sentence_endings=True does the
               # right thing even on input short enough that it doesn't need to
               # be wrapped.
    1:         text = "A short line. Note the single space."
    1:         expect = ["A short line.  Note the single space."]
    1:         self.check(wrapper.wrap(text), expect)
       
               # Test some of the hairy end cases that _fix_sentence_endings()
               # is supposed to handle (the easy stuff is tested in
               # test_whitespace() above).
    1:         text = "Well, Doctor? What do you think?"
    1:         expect = ["Well, Doctor?  What do you think?"]
    1:         self.check(wrapper.wrap(text), expect)
       
    1:         text = "Well, Doctor?\nWhat do you think?"
    1:         self.check(wrapper.wrap(text), expect)
       
    1:         text = 'I say, chaps! Anyone for "tennis?"\nHmmph!'
    1:         expect = ['I say, chaps!  Anyone for "tennis?"  Hmmph!']
    1:         self.check(wrapper.wrap(text), expect)
       
    1:         wrapper.width = 20
    1:         expect = ['I say, chaps!', 'Anyone for "tennis?"', 'Hmmph!']
    1:         self.check(wrapper.wrap(text), expect)
       
    1:         text = 'And she said, "Go to hell!"\nCan you believe that?'
    1:         expect = ['And she said, "Go to',
    1:                   'hell!"  Can you',
    1:                   'believe that?']
    1:         self.check(wrapper.wrap(text), expect)
       
    1:         wrapper.width = 60
    1:         expect = ['And she said, "Go to hell!"  Can you believe that?']
    1:         self.check(wrapper.wrap(text), expect)
       
    1:         text = 'File stdio.h is nice.'
    1:         expect = ['File stdio.h is nice.']
    1:         self.check(wrapper.wrap(text), expect)
       
    1:     def test_wrap_short(self):
               # Wrapping to make short lines longer
       
    1:         text = "This is a\nshort paragraph."
       
    1:         self.check_wrap(text, 20, ["This is a short",
    1:                                    "paragraph."])
    1:         self.check_wrap(text, 40, ["This is a short paragraph."])
       
       
    1:     def test_wrap_short_1line(self):
               # Test endcases
       
    1:         text = "This is a short line."
       
    1:         self.check_wrap(text, 30, ["This is a short line."])
    1:         self.check_wrap(text, 30, ["(1) This is a short line."],
    1:                         initial_indent="(1) ")
       
       
    1:     def test_hyphenated(self):
               # Test breaking hyphenated words
       
    1:         text = ("this-is-a-useful-feature-for-"
                       "reformatting-posts-from-tim-peters'ly")
       
    1:         self.check_wrap(text, 40,
    1:                         ["this-is-a-useful-feature-for-",
    1:                          "reformatting-posts-from-tim-peters'ly"])
    1:         self.check_wrap(text, 41,
    1:                         ["this-is-a-useful-feature-for-",
    1:                          "reformatting-posts-from-tim-peters'ly"])
    1:         self.check_wrap(text, 42,
    1:                         ["this-is-a-useful-feature-for-reformatting-",
    1:                          "posts-from-tim-peters'ly"])
       
    1:     def test_hyphenated_numbers(self):
               # Test that hyphenated numbers (eg. dates) are not broken like words.
    1:         text = ("Python 1.0.0 was released on 1994-01-26.  Python 1.0.1 was\n"
                       "released on 1994-02-15.")
       
    1:         self.check_wrap(text, 35, ['Python 1.0.0 was released on',
    1:                                    '1994-01-26.  Python 1.0.1 was',
    1:                                    'released on 1994-02-15.'])
    1:         self.check_wrap(text, 40, ['Python 1.0.0 was released on 1994-01-26.',
    1:                                    'Python 1.0.1 was released on 1994-02-15.'])
       
    1:         text = "I do all my shopping at 7-11."
    1:         self.check_wrap(text, 25, ["I do all my shopping at",
    1:                                    "7-11."])
    1:         self.check_wrap(text, 27, ["I do all my shopping at",
    1:                                    "7-11."])
    1:         self.check_wrap(text, 29, ["I do all my shopping at 7-11."])
       
    1:     def test_em_dash(self):
               # Test text with em-dashes
    1:         text = "Em-dashes should be written -- thus."
    1:         self.check_wrap(text, 25,
    1:                         ["Em-dashes should be",
    1:                          "written -- thus."])
       
               # Probe the boundaries of the properly written em-dash,
               # ie. " -- ".
    1:         self.check_wrap(text, 29,
    1:                         ["Em-dashes should be written",
    1:                          "-- thus."])
    1:         expect = ["Em-dashes should be written --",
    1:                   "thus."]
    1:         self.check_wrap(text, 30, expect)
    1:         self.check_wrap(text, 35, expect)
    1:         self.check_wrap(text, 36,
    1:                         ["Em-dashes should be written -- thus."])
       
               # The improperly written em-dash is handled too, because
               # it's adjacent to non-whitespace on both sides.
    1:         text = "You can also do--this or even---this."
    1:         expect = ["You can also do",
    1:                   "--this or even",
    1:                   "---this."]
    1:         self.check_wrap(text, 15, expect)
    1:         self.check_wrap(text, 16, expect)
    1:         expect = ["You can also do--",
    1:                   "this or even---",
    1:                   "this."]
    1:         self.check_wrap(text, 17, expect)
    1:         self.check_wrap(text, 19, expect)
    1:         expect = ["You can also do--this or even",
    1:                   "---this."]
    1:         self.check_wrap(text, 29, expect)
    1:         self.check_wrap(text, 31, expect)
    1:         expect = ["You can also do--this or even---",
    1:                   "this."]
    1:         self.check_wrap(text, 32, expect)
    1:         self.check_wrap(text, 35, expect)
       
               # All of the above behaviour could be deduced by probing the
               # _split() method.
    1:         text = "Here's an -- em-dash and--here's another---and another!"
    1:         expect = ["Here's", " ", "an", " ", "--", " ", "em-", "dash", " ",
    1:                   "and", "--", "here's", " ", "another", "---",
    1:                   "and", " ", "another!"]
    1:         self.check_split(text, expect)
       
    1:         text = "and then--bam!--he was gone"
    1:         expect = ["and", " ", "then", "--", "bam!", "--",
    1:                   "he", " ", "was", " ", "gone"]
    1:         self.check_split(text, expect)
       
       
    1:     def test_unix_options (self):
               # Test that Unix-style command-line options are wrapped correctly.
               # Both Optik (OptionParser) and Docutils rely on this behaviour!
       
    1:         text = "You should use the -n option, or --dry-run in its long form."
    1:         self.check_wrap(text, 20,
    1:                         ["You should use the",
    1:                          "-n option, or --dry-",
    1:                          "run in its long",
    1:                          "form."])
    1:         self.check_wrap(text, 21,
    1:                         ["You should use the -n",
    1:                          "option, or --dry-run",
    1:                          "in its long form."])
    1:         expect = ["You should use the -n option, or",
    1:                   "--dry-run in its long form."]
    1:         self.check_wrap(text, 32, expect)
    1:         self.check_wrap(text, 34, expect)
    1:         self.check_wrap(text, 35, expect)
    1:         self.check_wrap(text, 38, expect)
    1:         expect = ["You should use the -n option, or --dry-",
    1:                   "run in its long form."]
    1:         self.check_wrap(text, 39, expect)
    1:         self.check_wrap(text, 41, expect)
    1:         expect = ["You should use the -n option, or --dry-run",
    1:                   "in its long form."]
    1:         self.check_wrap(text, 42, expect)
       
               # Again, all of the above can be deduced from _split().
    1:         text = "the -n option, or --dry-run or --dryrun"
    1:         expect = ["the", " ", "-n", " ", "option,", " ", "or", " ",
    1:                   "--dry-", "run", " ", "or", " ", "--dryrun"]
    1:         self.check_split(text, expect)
       
    1:     def test_funky_hyphens (self):
               # Screwy edge cases cooked up by David Goodger.  All reported
               # in SF bug #596434.
    1:         self.check_split("what the--hey!", ["what", " ", "the", "--", "hey!"])
    1:         self.check_split("what the--", ["what", " ", "the--"])
    1:         self.check_split("what the--.", ["what", " ", "the--."])
    1:         self.check_split("--text--.", ["--text--."])
       
               # When I first read bug #596434, this is what I thought David
               # was talking about.  I was wrong; these have always worked
               # fine.  The real problem is tested in test_funky_parens()
               # below...
    1:         self.check_split("--option", ["--option"])
    1:         self.check_split("--option-opt", ["--option-", "opt"])
    1:         self.check_split("foo --option-opt bar",
    1:                          ["foo", " ", "--option-", "opt", " ", "bar"])
       
    1:     def test_punct_hyphens(self):
               # Oh bother, SF #965425 found another problem with hyphens --
               # hyphenated words in single quotes weren't handled correctly.
               # In fact, the bug is that *any* punctuation around a hyphenated
               # word was handled incorrectly, except for a leading "--", which
               # was special-cased for Optik and Docutils.  So test a variety
               # of styles of punctuation around a hyphenated word.
               # (Actually this is based on an Optik bug report, #813077).
    1:         self.check_split("the 'wibble-wobble' widget",
    1:                          ['the', ' ', "'wibble-", "wobble'", ' ', 'widget'])
    1:         self.check_split('the "wibble-wobble" widget',
    1:                          ['the', ' ', '"wibble-', 'wobble"', ' ', 'widget'])
    1:         self.check_split("the (wibble-wobble) widget",
    1:                          ['the', ' ', "(wibble-", "wobble)", ' ', 'widget'])
    1:         self.check_split("the ['wibble-wobble'] widget",
    1:                          ['the', ' ', "['wibble-", "wobble']", ' ', 'widget'])
       
    1:     def test_funky_parens (self):
               # Second part of SF bug #596434: long option strings inside
               # parentheses.
    1:         self.check_split("foo (--option) bar",
    1:                          ["foo", " ", "(--option)", " ", "bar"])
       
               # Related stuff -- make sure parens work in simpler contexts.
    1:         self.check_split("foo (bar) baz",
    1:                          ["foo", " ", "(bar)", " ", "baz"])
    1:         self.check_split("blah (ding dong), wubba",
    1:                          ["blah", " ", "(ding", " ", "dong),",
    1:                           " ", "wubba"])
       
    1:     def test_drop_whitespace_false(self):
               # Check that drop_whitespace=False preserves whitespace.
               # SF patch #1581073
    1:         text = " This is a    sentence with     much whitespace."
    1:         self.check_wrap(text, 10,
    1:                         [" This is a", "    ", "sentence ",
    1:                          "with     ", "much white", "space."],
    1:                         drop_whitespace=False)
       
    1:     def test_drop_whitespace_false_whitespace_only(self):
               # Check that drop_whitespace=False preserves a whitespace-only string.
    1:         self.check_wrap("   ", 6, ["   "], drop_whitespace=False)
       
    1:     def test_drop_whitespace_false_whitespace_only_with_indent(self):
               # Check that a whitespace-only string gets indented (when
               # drop_whitespace is False).
    1:         self.check_wrap("   ", 6, ["     "], drop_whitespace=False,
    1:                         initial_indent="  ")
       
    1:     def test_drop_whitespace_whitespace_only(self):
               # Check drop_whitespace on a whitespace-only string.
    1:         self.check_wrap("  ", 6, [])
       
    1:     def test_drop_whitespace_leading_whitespace(self):
               # Check that drop_whitespace does not drop leading whitespace (if
               # followed by non-whitespace).
               # SF bug #622849 reported inconsistent handling of leading
               # whitespace; let's test that a bit, shall we?
    1:         text = " This is a sentence with leading whitespace."
    1:         self.check_wrap(text, 50,
    1:                         [" This is a sentence with leading whitespace."])
    1:         self.check_wrap(text, 30,
    1:                         [" This is a sentence with", "leading whitespace."])
       
    1:     def test_drop_whitespace_whitespace_line(self):
               # Check that drop_whitespace skips the whole line if a non-leading
               # line consists only of whitespace.
    1:         text = "abcd    efgh"
               # Include the result for drop_whitespace=False for comparison.
    1:         self.check_wrap(text, 6, ["abcd", "    ", "efgh"],
    1:                         drop_whitespace=False)
    1:         self.check_wrap(text, 6, ["abcd", "efgh"])
       
    1:     def test_drop_whitespace_whitespace_only_with_indent(self):
               # Check that initial_indent is not applied to a whitespace-only
               # string.  This checks a special case of the fact that dropping
               # whitespace occurs before indenting.
    1:         self.check_wrap("  ", 6, [], initial_indent="++")
       
    1:     def test_drop_whitespace_whitespace_indent(self):
               # Check that drop_whitespace does not drop whitespace indents.
               # This checks a special case of the fact that dropping whitespace
               # occurs before indenting.
    1:         self.check_wrap("abcd efgh", 6, ["  abcd", "  efgh"],
    1:                         initial_indent="  ", subsequent_indent="  ")
       
    1:     if test_support.have_unicode:
    1:         def test_unicode(self):
                   # *Very* simple test of wrapping Unicode strings.  I'm sure
                   # there's more to it than this, but let's at least make
                   # sure textwrap doesn't crash on Unicode input!
    1:             text = u"Hello there, how are you today?"
    1:             self.check_wrap(text, 50, [u"Hello there, how are you today?"])
    1:             self.check_wrap(text, 20, [u"Hello there, how are", "you today?"])
    1:             olines = self.wrapper.wrap(text)
    1:             self.assertIsInstance(olines, list)
    1:             self.assertIsInstance(olines[0], unicode)
    1:             otext = self.wrapper.fill(text)
    1:             self.assertIsInstance(otext, unicode)
       
    1:         def test_no_split_at_umlaut(self):
    1:             text = u"Die Empf\xe4nger-Auswahl"
    1:             self.check_wrap(text, 13, [u"Die", u"Empf\xe4nger-", u"Auswahl"])
       
    1:         def test_umlaut_followed_by_dash(self):
    1:             text = u"aa \xe4\xe4-\xe4\xe4"
    1:             self.check_wrap(text, 7, [u"aa \xe4\xe4-", u"\xe4\xe4"])
       
    1:     def test_split(self):
               # Ensure that the standard _split() method works as advertised
               # in the comments
       
    1:         text = "Hello there -- you goof-ball, use the -b option!"
       
    1:         result = self.wrapper._split(text)
    1:         self.check(result,
    1:              ["Hello", " ", "there", " ", "--", " ", "you", " ", "goof-",
    1:               "ball,", " ", "use", " ", "the", " ", "-b", " ",  "option!"])
       
    1:     def test_break_on_hyphens(self):
               # Ensure that the break_on_hyphens attributes work
    1:         text = "yaba daba-doo"
    1:         self.check_wrap(text, 10, ["yaba daba-", "doo"],
    1:                         break_on_hyphens=True)
    1:         self.check_wrap(text, 10, ["yaba", "daba-doo"],
    1:                         break_on_hyphens=False)
       
    1:     def test_bad_width(self):
               # Ensure that width <= 0 is caught.
    1:         text = "Whatever, it doesn't matter."
    1:         self.assertRaises(ValueError, wrap, text, 0)
    1:         self.assertRaises(ValueError, wrap, text, -1)
       
       
    2: class LongWordTestCase (BaseTestCase):
    1:     def setUp(self):
    2:         self.wrapper = TextWrapper()
               self.text = '''\
       Did you say "supercalifragilisticexpialidocious?"
       How *do* you spell that odd word, anyways?
    2: '''
       
    1:     def test_break_long(self):
               # Wrap text with long words and lots of punctuation
       
    1:         self.check_wrap(self.text, 30,
    1:                         ['Did you say "supercalifragilis',
    1:                          'ticexpialidocious?" How *do*',
    1:                          'you spell that odd word,',
    1:                          'anyways?'])
    1:         self.check_wrap(self.text, 50,
    1:                         ['Did you say "supercalifragilisticexpialidocious?"',
    1:                          'How *do* you spell that odd word, anyways?'])
       
               # SF bug 797650.  Prevent an infinite loop by making sure that at
               # least one character gets split off on every pass.
    1:         self.check_wrap('-'*10+'hello', 10,
    1:                         ['----------',
    1:                          '               h',
    1:                          '               e',
    1:                          '               l',
    1:                          '               l',
    1:                          '               o'],
    1:                         subsequent_indent = ' '*15)
       
               # bug 1146.  Prevent a long word to be wrongly wrapped when the
               # preceding word is exactly one character shorter than the width
    1:         self.check_wrap(self.text, 12,
    1:                         ['Did you say ',
    1:                          '"supercalifr',
    1:                          'agilisticexp',
    1:                          'ialidocious?',
    1:                          '" How *do*',
    1:                          'you spell',
    1:                          'that odd',
    1:                          'word,',
    1:                          'anyways?'])
       
    1:     def test_nobreak_long(self):
               # Test with break_long_words disabled
    1:         self.wrapper.break_long_words = 0
    1:         self.wrapper.width = 30
    1:         expect = ['Did you say',
    1:                   '"supercalifragilisticexpialidocious?"',
    1:                   'How *do* you spell that odd',
    1:                   'word, anyways?'
                         ]
    1:         result = self.wrapper.wrap(self.text)
    1:         self.check(result, expect)
       
               # Same thing with kwargs passed to standalone wrap() function.
    1:         result = wrap(self.text, width=30, break_long_words=0)
    1:         self.check(result, expect)
       
       
    2: class IndentTestCases(BaseTestCase):
       
           # called before each test method
    1:     def setUp(self):
               self.text = '''\
       This paragraph will be filled, first without any indentation,
    3: and then with some (including a hanging indent).'''
       
       
    1:     def test_fill(self):
               # Test the fill() method
       
               expect = '''\
       This paragraph will be filled, first
       without any indentation, and then with
    1: some (including a hanging indent).'''
       
    1:         result = fill(self.text, 40)
    1:         self.check(result, expect)
       
       
    1:     def test_initial_indent(self):
               # Test initial_indent parameter
       
    1:         expect = ["     This paragraph will be filled,",
    1:                   "first without any indentation, and then",
    1:                   "with some (including a hanging indent)."]
    1:         result = wrap(self.text, 40, initial_indent="     ")
    1:         self.check(result, expect)
       
    1:         expect = "\n".join(expect)
    1:         result = fill(self.text, 40, initial_indent="     ")
    1:         self.check(result, expect)
       
       
    1:     def test_subsequent_indent(self):
               # Test subsequent_indent parameter
       
               expect = '''\
         * This paragraph will be filled, first
           without any indentation, and then
           with some (including a hanging
    1:     indent).'''
       
    1:         result = fill(self.text, 40,
    1:                       initial_indent="  * ", subsequent_indent="    ")
    1:         self.check(result, expect)
       
       
       # Despite the similar names, DedentTestCase is *not* the inverse
       # of IndentTestCase!
    2: class DedentTestCase(unittest.TestCase):
       
    1:     def assertUnchanged(self, text):
               """assert that dedent() has no effect on 'text'"""
    6:         self.assertEqual(text, dedent(text))
       
    1:     def test_dedent_nomargin(self):
               # No lines indented.
    1:         text = "Hello there.\nHow are you?\nOh good, I'm glad."
    1:         self.assertUnchanged(text)
       
               # Similar, with a blank line.
    1:         text = "Hello there.\n\nBoo!"
    1:         self.assertUnchanged(text)
       
               # Some lines indented, but overall margin is still zero.
    1:         text = "Hello there.\n  This is indented."
    1:         self.assertUnchanged(text)
       
               # Again, add a blank line.
    1:         text = "Hello there.\n\n  Boo!\n"
    1:         self.assertUnchanged(text)
       
    1:     def test_dedent_even(self):
               # All lines indented by two spaces.
    1:         text = "  Hello there.\n  How are ya?\n  Oh good."
    1:         expect = "Hello there.\nHow are ya?\nOh good."
    1:         self.assertEqual(expect, dedent(text))
       
               # Same, with blank lines.
    1:         text = "  Hello there.\n\n  How are ya?\n  Oh good.\n"
    1:         expect = "Hello there.\n\nHow are ya?\nOh good.\n"
    1:         self.assertEqual(expect, dedent(text))
       
               # Now indent one of the blank lines.
    1:         text = "  Hello there.\n  \n  How are ya?\n  Oh good.\n"
    1:         expect = "Hello there.\n\nHow are ya?\nOh good.\n"
    1:         self.assertEqual(expect, dedent(text))
       
    1:     def test_dedent_uneven(self):
               # Lines indented unevenly.
               text = '''\
               def foo():
                   while 1:
                       return foo
    1:         '''
               expect = '''\
       def foo():
           while 1:
               return foo
    1: '''
    1:         self.assertEqual(expect, dedent(text))
       
               # Uneven indentation with a blank line.
    1:         text = "  Foo\n    Bar\n\n   Baz\n"
    1:         expect = "Foo\n  Bar\n\n Baz\n"
    1:         self.assertEqual(expect, dedent(text))
       
               # Uneven indentation with a whitespace-only line.
    1:         text = "  Foo\n    Bar\n \n   Baz\n"
    1:         expect = "Foo\n  Bar\n\n Baz\n"
    1:         self.assertEqual(expect, dedent(text))
       
           # dedent() should not mangle internal tabs
    1:     def test_dedent_preserve_internal_tabs(self):
    1:         text = "  hello\tthere\n  how are\tyou?"
    1:         expect = "hello\tthere\nhow are\tyou?"
    1:         self.assertEqual(expect, dedent(text))
       
               # make sure that it preserves tabs when it's not making any
               # changes at all
    1:         self.assertEqual(expect, dedent(expect))
       
           # dedent() should not mangle tabs in the margin (i.e.
           # tabs and spaces both count as margin, but are *not*
           # considered equivalent)
    1:     def test_dedent_preserve_margin_tabs(self):
    1:         text = "  hello there\n\thow are you?"
    1:         self.assertUnchanged(text)
       
               # same effect even if we have 8 spaces
    1:         text = "        hello there\n\thow are you?"
    1:         self.assertUnchanged(text)
       
               # dedent() only removes whitespace that can be uniformly removed!
    1:         text = "\thello there\n\thow are you?"
    1:         expect = "hello there\nhow are you?"
    1:         self.assertEqual(expect, dedent(text))
       
    1:         text = "  \thello there\n  \thow are you?"
    1:         self.assertEqual(expect, dedent(text))
       
    1:         text = "  \t  hello there\n  \t  how are you?"
    1:         self.assertEqual(expect, dedent(text))
       
    1:         text = "  \thello there\n  \t  how are you?"
    1:         expect = "hello there\n  how are you?"
    1:         self.assertEqual(expect, dedent(text))
       
               # test margin is smaller than smallest indent
    1:         text = "  \thello there\n   \thow are you?\n \tI'm fine, thanks"
    1:         expect = " \thello there\n  \thow are you?\n\tI'm fine, thanks"
    1:         self.assertEqual(expect, dedent(text))
       
       
    1: def test_main():
    1:     test_support.run_unittest(WrapTestCase,
    1:                               LongWordTestCase,
    1:                               IndentTestCases,
    1:                               DedentTestCase)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
