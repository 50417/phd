    1: """Tests for distutils.dep_util."""
    1: import unittest
    1: import os
    1: import time
       
    1: from distutils.dep_util import newer, newer_pairwise, newer_group
    1: from distutils.errors import DistutilsFileError
    1: from distutils.tests import support
    1: from test.test_support import run_unittest
       
    2: class DepUtilTestCase(support.TempdirManager, unittest.TestCase):
       
    1:     def test_newer(self):
       
    1:         tmpdir = self.mkdtemp()
    1:         new_file = os.path.join(tmpdir, 'new')
    1:         old_file = os.path.abspath(__file__)
       
               # Raise DistutilsFileError if 'new_file' does not exist.
    1:         self.assertRaises(DistutilsFileError, newer, new_file, old_file)
       
               # Return true if 'new_file' exists and is more recently modified than
               # 'old_file', or if 'new_file' exists and 'old_file' doesn't.
    1:         self.write_file(new_file)
    1:         self.assertTrue(newer(new_file, 'I_dont_exist'))
    1:         self.assertTrue(newer(new_file, old_file))
       
               # Return false if both exist and 'old_file' is the same age or younger
               # than 'new_file'.
    1:         self.assertFalse(newer(old_file, new_file))
       
    1:     def test_newer_pairwise(self):
    1:         tmpdir = self.mkdtemp()
    1:         sources = os.path.join(tmpdir, 'sources')
    1:         targets = os.path.join(tmpdir, 'targets')
    1:         os.mkdir(sources)
    1:         os.mkdir(targets)
    1:         one = os.path.join(sources, 'one')
    1:         two = os.path.join(sources, 'two')
    1:         three = os.path.abspath(__file__)    # I am the old file
    1:         four = os.path.join(targets, 'four')
    1:         self.write_file(one)
    1:         self.write_file(two)
    1:         self.write_file(four)
       
    1:         self.assertEqual(newer_pairwise([one, two], [three, four]),
    1:                          ([one],[three]))
       
    1:     def test_newer_group(self):
    1:         tmpdir = self.mkdtemp()
    1:         sources = os.path.join(tmpdir, 'sources')
    1:         os.mkdir(sources)
    1:         one = os.path.join(sources, 'one')
    1:         two = os.path.join(sources, 'two')
    1:         three = os.path.join(sources, 'three')
    1:         old_file = os.path.abspath(__file__)
       
               # return true if 'old_file' is out-of-date with respect to any file
               # listed in 'sources'.
    1:         self.write_file(one)
    1:         self.write_file(two)
    1:         self.write_file(three)
    1:         self.assertTrue(newer_group([one, two, three], old_file))
    1:         self.assertFalse(newer_group([one, two, old_file], three))
       
               # missing handling
    1:         os.remove(one)
    1:         self.assertRaises(OSError, newer_group, [one, two, old_file], three)
       
    1:         self.assertFalse(newer_group([one, two, old_file], three,
    1:                                      missing='ignore'))
       
    1:         self.assertTrue(newer_group([one, two, old_file], three,
    1:                                     missing='newer'))
       
       
    1: def test_suite():
    1:     return unittest.makeSuite(DepUtilTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     run_unittest(test_suite())
