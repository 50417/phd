    1: import sys
    1: import os
    1: import unittest
    1: import platform
    1: import subprocess
       
    1: from test import test_support
       
    2: class PlatformTest(unittest.TestCase):
    1:     def test_architecture(self):
    1:         res = platform.architecture()
       
    1:     if hasattr(os, "symlink"):
    1:         def test_architecture_via_symlink(self): # issue3762
    1:             def get(python):
    2:                 cmd = [python, '-c',
    2:                     'import platform; print platform.architecture()']
    2:                 p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    2:                 return p.communicate()
    1:             real = os.path.realpath(sys.executable)
    1:             link = os.path.abspath(test_support.TESTFN)
    1:             os.symlink(real, link)
    1:             try:
    1:                 self.assertEqual(get(real), get(link))
                   finally:
    1:                 os.remove(link)
       
    1:     def test_platform(self):
    3:         for aliased in (False, True):
    6:             for terse in (False, True):
    4:                 res = platform.platform(aliased, terse)
       
    1:     def test_system(self):
    1:         res = platform.system()
       
    1:     def test_node(self):
    1:         res = platform.node()
       
    1:     def test_release(self):
    1:         res = platform.release()
       
    1:     def test_version(self):
    1:         res = platform.version()
       
    1:     def test_machine(self):
    1:         res = platform.machine()
       
    1:     def test_processor(self):
    1:         res = platform.processor()
       
    1:     def setUp(self):
   19:         self.save_version = sys.version
   19:         self.save_subversion = sys.subversion
   19:         self.save_platform = sys.platform
       
    1:     def tearDown(self):
   19:         sys.version = self.save_version
   19:         sys.subversion = self.save_subversion
   19:         sys.platform = self.save_platform
       
    1:     def test_sys_version(self):
               # Old test.
    1:         for input, output in (
    1:             ('2.4.3 (#1, Jun 21 2006, 13:54:21) \n[GCC 3.3.4 (pre 3.3.5 20040809)]',
    1:              ('CPython', '2.4.3', '', '', '1', 'Jun 21 2006 13:54:21', 'GCC 3.3.4 (pre 3.3.5 20040809)')),
    1:             ('IronPython 1.0.60816 on .NET 2.0.50727.42',
    1:              ('IronPython', '1.0.60816', '', '', '', '', '.NET 2.0.50727.42')),
    1:             ('IronPython 1.0 (1.0.61005.1977) on .NET 2.0.50727.42',
    1:              ('IronPython', '1.0.0', '', '', '', '', '.NET 2.0.50727.42')),
    1:             ('2.4.3 (truncation, date, t) \n[GCC]',
    1:              ('CPython', '2.4.3', '', '', 'truncation', 'date t', 'GCC')),
    1:             ('2.4.3 (truncation, date, ) \n[GCC]',
    1:              ('CPython', '2.4.3', '', '', 'truncation', 'date', 'GCC')),
    1:             ('2.4.3 (truncation, date,) \n[GCC]',
    1:              ('CPython', '2.4.3', '', '', 'truncation', 'date', 'GCC')),
    1:             ('2.4.3 (truncation, date) \n[GCC]',
    1:              ('CPython', '2.4.3', '', '', 'truncation', 'date', 'GCC')),
    1:             ('2.4.3 (truncation, d) \n[GCC]',
    1:              ('CPython', '2.4.3', '', '', 'truncation', 'd', 'GCC')),
    1:             ('2.4.3 (truncation, ) \n[GCC]',
    1:              ('CPython', '2.4.3', '', '', 'truncation', '', 'GCC')),
    1:             ('2.4.3 (truncation,) \n[GCC]',
    1:              ('CPython', '2.4.3', '', '', 'truncation', '', 'GCC')),
    1:             ('2.4.3 (truncation) \n[GCC]',
   12:              ('CPython', '2.4.3', '', '', 'truncation', '', 'GCC')),
                   ):
                   # branch and revision are not "parsed", but fetched
                   # from sys.subversion.  Ignore them
                   (name, version, branch, revision, buildno, builddate, compiler) \
   11:                    = platform._sys_version(input)
   11:             self.assertEqual(
   11:                 (name, version, '', '', buildno, builddate, compiler), output)
       
               # Tests for python_implementation(), python_version(), python_branch(),
               # python_revision(), python_build(), and python_compiler().
    1:         sys_versions = {
                   ("2.6.1 (r261:67515, Dec  6 2008, 15:26:00) \n[GCC 4.0.1 (Apple Computer, Inc. build 5370)]",
                    ('CPython', 'tags/r261', '67515'), self.save_platform)
                   :
    1:                 ("CPython", "2.6.1", "tags/r261", "67515",
    1:                  ('r261:67515', 'Dec  6 2008 15:26:00'),
    1:                  'GCC 4.0.1 (Apple Computer, Inc. build 5370)'),
       
                   ("IronPython 2.0 (2.0.0.0) on .NET 2.0.50727.3053", None, "cli")
                   :
    1:                 ("IronPython", "2.0.0", "", "", ("", ""),
    1:                  ".NET 2.0.50727.3053"),
       
                   ("2.6.1 (IronPython 2.6.1 (2.6.10920.0) on .NET 2.0.50727.1433)", None, "cli")
                   :
    1:                 ("IronPython", "2.6.1", "", "", ("", ""),
    1:                  ".NET 2.0.50727.1433"),
       
                   ("2.7.4 (IronPython 2.7.4 (2.7.0.40) on Mono 4.0.30319.1 (32-bit))", None, "cli")
                   :
    1:                 ("IronPython", "2.7.4", "", "", ("", ""),
    1:                  "Mono 4.0.30319.1 (32-bit)"),
       
                   ("2.5 (trunk:6107, Mar 26 2009, 13:02:18) \n[Java HotSpot(TM) Client VM (\"Apple Computer, Inc.\")]",
                   ('Jython', 'trunk', '6107'), "java1.5.0_16")
                   :
    1:                 ("Jython", "2.5.0", "trunk", "6107",
    1:                  ('trunk:6107', 'Mar 26 2009'), "java1.5.0_16"),
       
                   ("2.5.2 (63378, Mar 26 2009, 18:03:29)\n[PyPy 1.0.0]",
                    ('PyPy', 'trunk', '63378'), self.save_platform)
                   :
    1:                 ("PyPy", "2.5.2", "trunk", "63378", ('63378', 'Mar 26 2009'),
    1:                  "")
                   }
    1:         for (version_tag, subversion, sys_platform), info in \
    7:                 sys_versions.iteritems():
    6:             sys.version = version_tag
    6:             if subversion is None:
    3:                 if hasattr(sys, "subversion"):
    2:                     del sys.subversion
                   else:
    3:                 sys.subversion = subversion
    6:             if sys_platform is not None:
    6:                 sys.platform = sys_platform
    6:             self.assertEqual(platform.python_implementation(), info[0])
    6:             self.assertEqual(platform.python_version(), info[1])
    6:             self.assertEqual(platform.python_branch(), info[2])
    6:             self.assertEqual(platform.python_revision(), info[3])
    6:             self.assertEqual(platform.python_build(), info[4])
    6:             self.assertEqual(platform.python_compiler(), info[5])
       
    1:     def test_system_alias(self):
    1:         res = platform.system_alias(
    1:             platform.system(),
    1:             platform.release(),
    1:             platform.version(),
               )
       
    1:     def test_uname(self):
    1:         res = platform.uname()
    1:         self.assertTrue(any(res))
       
    1:     @unittest.skipUnless(sys.platform.startswith('win'), "windows only test")
           def test_uname_win32_ARCHITEW6432(self):
               # Issue 7860: make sure we get architecture from the correct variable
               # on 64 bit Windows: if PROCESSOR_ARCHITEW6432 exists we should be
               # using it, per
               # http://blogs.msdn.com/david.wang/archive/2006/03/26/HOWTO-Detect-Process-Bitness.aspx
>>>>>>         try:
>>>>>>             with test_support.EnvironmentVarGuard() as environ:
>>>>>>                 if 'PROCESSOR_ARCHITEW6432' in environ:
>>>>>>                     del environ['PROCESSOR_ARCHITEW6432']
>>>>>>                 environ['PROCESSOR_ARCHITECTURE'] = 'foo'
>>>>>>                 platform._uname_cache = None
>>>>>>                 system, node, release, version, machine, processor = platform.uname()
>>>>>>                 self.assertEqual(machine, 'foo')
>>>>>>                 environ['PROCESSOR_ARCHITEW6432'] = 'bar'
>>>>>>                 platform._uname_cache = None
>>>>>>                 system, node, release, version, machine, processor = platform.uname()
>>>>>>                 self.assertEqual(machine, 'bar')
               finally:
>>>>>>             platform._uname_cache = None
       
    1:     def test_java_ver(self):
    1:         res = platform.java_ver()
    1:         if sys.platform == 'java':
>>>>>>             self.assertTrue(all(res))
       
    1:     def test_win32_ver(self):
    1:         res = platform.win32_ver()
       
    1:     def test_mac_ver(self):
    1:         res = platform.mac_ver()
       
    1:         try:
    1:             import gestalt
>>>>>>         except ImportError:
>>>>>>             have_toolbox_glue = False
               else:
    1:             have_toolbox_glue = True
       
    1:         if have_toolbox_glue and platform.uname()[0] == 'Darwin':
                   # We're on a MacOSX system, check that
                   # the right version information is returned
    1:             fd = os.popen('sw_vers', 'r')
    1:             real_ver = None
    2:             for ln in fd:
    2:                 if ln.startswith('ProductVersion:'):
    1:                     real_ver = ln.strip().split()[-1]
    1:                     break
    1:             fd.close()
    1:             self.assertFalse(real_ver is None)
    1:             result_list = res[0].split('.')
    1:             expect_list = real_ver.split('.')
    1:             len_diff = len(result_list) - len(expect_list)
                   # On Snow Leopard, sw_vers reports 10.6.0 as 10.6
    1:             if len_diff > 0:
>>>>>>                 expect_list.extend(['0'] * len_diff)
    1:             self.assertEqual(result_list, expect_list)
       
                   # res[1] claims to contain
                   # (version, dev_stage, non_release_version)
                   # That information is no longer available
    1:             self.assertEqual(res[1], ('', '', ''))
       
    1:             if sys.byteorder == 'little':
    1:                 self.assertIn(res[2], ('i386', 'x86_64'))
                   else:
>>>>>>                 self.assertEqual(res[2], 'PowerPC')
       
       
    1:     @unittest.skipUnless(sys.platform == 'darwin', "OSX only test")
           def test_mac_ver_with_fork(self):
               # Issue7895: platform.mac_ver() crashes when using fork without exec
               #
               # This test checks that the fix for that issue works.
               #
    1:         pid = os.fork()
    1:         if pid == 0:
                   # child
>>>>>>             info = platform.mac_ver()
>>>>>>             os._exit(0)
       
               else:
                   # parent
    1:             cpid, sts = os.waitpid(pid, 0)
    1:             self.assertEqual(cpid, pid)
    1:             self.assertEqual(sts, 0)
       
    1:     def test_dist(self):
    1:         res = platform.dist()
       
    1:     def test_libc_ver(self):
    1:         import os
    1:         if os.path.isdir(sys.executable) and \
>>>>>>            os.path.exists(sys.executable+'.exe'):
                   # Cygwin horror
>>>>>>             executable = sys.executable + '.exe'
               else:
    1:             executable = sys.executable
    1:         res = platform.libc_ver(executable)
       
    1:     def test_parse_release_file(self):
       
    1:         for input, output in (
                   # Examples of release file contents:
    1:             ('SuSE Linux 9.3 (x86-64)', ('SuSE Linux ', '9.3', 'x86-64')),
    1:             ('SUSE LINUX 10.1 (X86-64)', ('SUSE LINUX ', '10.1', 'X86-64')),
    1:             ('SUSE LINUX 10.1 (i586)', ('SUSE LINUX ', '10.1', 'i586')),
    1:             ('Fedora Core release 5 (Bordeaux)', ('Fedora Core', '5', 'Bordeaux')),
    1:             ('Red Hat Linux release 8.0 (Psyche)', ('Red Hat Linux', '8.0', 'Psyche')),
    1:             ('Red Hat Linux release 9 (Shrike)', ('Red Hat Linux', '9', 'Shrike')),
    1:             ('Red Hat Enterprise Linux release 4 (Nahant)', ('Red Hat Enterprise Linux', '4', 'Nahant')),
    1:             ('CentOS release 4', ('CentOS', '4', None)),
    1:             ('Rocks release 4.2.1 (Cydonia)', ('Rocks', '4.2.1', 'Cydonia')),
   11:             ('', ('', '', '')), # If there's nothing there.
                   ):
   10:             self.assertEqual(platform._parse_release_file(input), output)
       
       
    1: def test_main():
    1:     test_support.run_unittest(
    1:         PlatformTest
           )
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
