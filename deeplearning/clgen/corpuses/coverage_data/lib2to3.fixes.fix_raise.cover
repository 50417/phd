       """Fixer for 'raise E, V, T'
       
       raise         -> raise
       raise E       -> raise E
       raise E, V    -> raise E(V)
       raise E, V, T -> raise E(V).with_traceback(T)
       raise E, None, T -> raise E.with_traceback(T)
       
       raise (((E, E'), E''), E'''), V -> raise E(V)
       raise "foo", V, T               -> warns about string exceptions
       
       
       CAVEATS:
       1) "raise E, V" will be incorrectly translated if V is an exception
          instance. The correct Python 3 idiom is
       
               raise E from V
       
          but since we can't detect instance-hood by syntax alone and since
          any client code would have to be changed as well, we don't automate
          this.
    1: """
       # Author: Collin Winter
       
       # Local imports
    1: from .. import pytree
    1: from ..pgen2 import token
    1: from .. import fixer_base
    1: from ..fixer_util import Name, Call, Attr, ArgList, is_tuple
       
    2: class FixRaise(fixer_base.BaseFix):
       
    1:     BM_compatible = True
           PATTERN = """
           raise_stmt< 'raise' exc=any [',' val=any [',' tb=any]] >
    1:     """
       
    1:     def transform(self, node, results):
   23:         syms = self.syms
       
   23:         exc = results["exc"].clone()
   23:         if exc.type == token.STRING:
    3:             msg = "Python 3 does not support string exceptions"
    3:             self.cannot_convert(node, msg)
    3:             return
       
               # Python 2 supports
               #  raise ((((E1, E2), E3), E4), E5), V
               # as a synonym for
               #  raise E1, V
               # Since Python 3 will not support this, we recurse down any tuple
               # literals, always taking the first element.
   20:         if is_tuple(exc):
    6:             while is_tuple(exc):
                       # exc.children[1:-1] is the unparenthesized tuple
                       # exc.children[1].children[0] is the first element of the tuple
    4:                 exc = exc.children[1].children[0].clone()
    2:             exc.prefix = u" "
       
   20:         if "val" not in results:
                   # One-argument raise
    2:             new = pytree.Node(syms.raise_stmt, [Name(u"raise"), exc])
    2:             new.prefix = node.prefix
    2:             return new
       
   18:         val = results["val"].clone()
   18:         if is_tuple(val):
    6:             args = [c.clone() for c in val.children[1:-1]]
               else:
   15:             val.prefix = u""
   15:             args = [val]
       
   18:         if "tb" in results:
    8:             tb = results["tb"].clone()
    8:             tb.prefix = u""
       
    8:             e = exc
                   # If there's a traceback and None is passed as the value, then don't
                   # add a call, since the user probably just wants to add a
                   # traceback. See issue #9661.
    8:             if val.type != token.NAME or val.value != u"None":
    7:                 e = Call(exc, args)
    8:             with_tb = Attr(e, Name(u'with_traceback')) + [ArgList([tb])]
    8:             new = pytree.Node(syms.simple_stmt, [Name(u"raise")] + with_tb)
    8:             new.prefix = node.prefix
    8:             return new
               else:
   10:             return pytree.Node(syms.raise_stmt,
   10:                                [Name(u"raise"), Call(exc, args)],
   10:                                prefix=node.prefix)
