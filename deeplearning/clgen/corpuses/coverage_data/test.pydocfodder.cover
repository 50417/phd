    1: """Something just to look at via pydoc."""
       
    1: import types
       
    2: class A_classic:
    1:     "A classic class."
    1:     def A_method(self):
               "Method defined in A."
    1:     def AB_method(self):
               "Method defined in A and B."
    1:     def AC_method(self):
               "Method defined in A and C."
    1:     def AD_method(self):
               "Method defined in A and D."
    1:     def ABC_method(self):
               "Method defined in A, B and C."
    1:     def ABD_method(self):
               "Method defined in A, B and D."
    1:     def ACD_method(self):
               "Method defined in A, C and D."
    1:     def ABCD_method(self):
               "Method defined in A, B, C and D."
       
       
    2: class B_classic(A_classic):
    1:     "A classic class, derived from A_classic."
    1:     def AB_method(self):
               "Method defined in A and B."
    1:     def ABC_method(self):
               "Method defined in A, B and C."
    1:     def ABD_method(self):
               "Method defined in A, B and D."
    1:     def ABCD_method(self):
               "Method defined in A, B, C and D."
    1:     def B_method(self):
               "Method defined in B."
    1:     def BC_method(self):
               "Method defined in B and C."
    1:     def BD_method(self):
               "Method defined in B and D."
    1:     def BCD_method(self):
               "Method defined in B, C and D."
       
    2: class C_classic(A_classic):
    1:     "A classic class, derived from A_classic."
    1:     def AC_method(self):
               "Method defined in A and C."
    1:     def ABC_method(self):
               "Method defined in A, B and C."
    1:     def ACD_method(self):
               "Method defined in A, C and D."
    1:     def ABCD_method(self):
               "Method defined in A, B, C and D."
    1:     def BC_method(self):
               "Method defined in B and C."
    1:     def BCD_method(self):
               "Method defined in B, C and D."
    1:     def C_method(self):
               "Method defined in C."
    1:     def CD_method(self):
               "Method defined in C and D."
       
    2: class D_classic(B_classic, C_classic):
    1:     "A classic class, derived from B_classic and C_classic."
    1:     def AD_method(self):
               "Method defined in A and D."
    1:     def ABD_method(self):
               "Method defined in A, B and D."
    1:     def ACD_method(self):
               "Method defined in A, C and D."
    1:     def ABCD_method(self):
               "Method defined in A, B, C and D."
    1:     def BD_method(self):
               "Method defined in B and D."
    1:     def BCD_method(self):
               "Method defined in B, C and D."
    1:     def CD_method(self):
               "Method defined in C and D."
    1:     def D_method(self):
               "Method defined in D."
       
       
    2: class A_new(object):
    1:     "A new-style class."
       
    1:     def A_method(self):
               "Method defined in A."
    1:     def AB_method(self):
               "Method defined in A and B."
    1:     def AC_method(self):
               "Method defined in A and C."
    1:     def AD_method(self):
               "Method defined in A and D."
    1:     def ABC_method(self):
               "Method defined in A, B and C."
    1:     def ABD_method(self):
               "Method defined in A, B and D."
    1:     def ACD_method(self):
               "Method defined in A, C and D."
    1:     def ABCD_method(self):
               "Method defined in A, B, C and D."
       
    1:     def A_classmethod(cls, x):
               "A class method defined in A."
    1:     A_classmethod = classmethod(A_classmethod)
       
    1:     def A_staticmethod():
               "A static method defined in A."
    1:     A_staticmethod = staticmethod(A_staticmethod)
       
    1:     def _getx(self):
               "A property getter function."
    1:     def _setx(self, value):
               "A property setter function."
    1:     def _delx(self):
               "A property deleter function."
    1:     A_property = property(fdel=_delx, fget=_getx, fset=_setx,
    1:                           doc="A sample property defined in A.")
       
    1:     A_int_alias = int
       
    2: class B_new(A_new):
    1:     "A new-style class, derived from A_new."
       
    1:     def AB_method(self):
               "Method defined in A and B."
    1:     def ABC_method(self):
               "Method defined in A, B and C."
    1:     def ABD_method(self):
               "Method defined in A, B and D."
    1:     def ABCD_method(self):
               "Method defined in A, B, C and D."
    1:     def B_method(self):
               "Method defined in B."
    1:     def BC_method(self):
               "Method defined in B and C."
    1:     def BD_method(self):
               "Method defined in B and D."
    1:     def BCD_method(self):
               "Method defined in B, C and D."
       
    2: class C_new(A_new):
    1:     "A new-style class, derived from A_new."
       
    1:     def AC_method(self):
               "Method defined in A and C."
    1:     def ABC_method(self):
               "Method defined in A, B and C."
    1:     def ACD_method(self):
               "Method defined in A, C and D."
    1:     def ABCD_method(self):
               "Method defined in A, B, C and D."
    1:     def BC_method(self):
               "Method defined in B and C."
    1:     def BCD_method(self):
               "Method defined in B, C and D."
    1:     def C_method(self):
               "Method defined in C."
    1:     def CD_method(self):
               "Method defined in C and D."
       
    2: class D_new(B_new, C_new):
           """A new-style class, derived from B_new and C_new.
    1:     """
       
    1:     def AD_method(self):
               "Method defined in A and D."
    1:     def ABD_method(self):
               "Method defined in A, B and D."
    1:     def ACD_method(self):
               "Method defined in A, C and D."
    1:     def ABCD_method(self):
               "Method defined in A, B, C and D."
    1:     def BD_method(self):
               "Method defined in B and D."
    1:     def BCD_method(self):
               "Method defined in B, C and D."
    1:     def CD_method(self):
               "Method defined in C and D."
    1:     def D_method(self):
               "Method defined in D."
       
    2: class FunkyProperties(object):
           """From SF bug 472347, by Roeland Rengelink.
       
           Property getters etc may not be vanilla functions or methods,
           and this used to make GUI pydoc blow up.
    1:     """
       
    1:     def __init__(self):
>>>>>>         self.desc = {'x':0}
       
    2:     class get_desc:
    1:         def __init__(self, attr):
    1:             self.attr = attr
    1:         def __call__(self, inst):
>>>>>>             print 'Get called', self, inst
>>>>>>             return inst.desc[self.attr]
    2:     class set_desc:
    1:         def __init__(self, attr):
    1:             self.attr = attr
    1:         def __call__(self, inst, val):
>>>>>>             print 'Set called', self, inst, val
>>>>>>             inst.desc[self.attr] = val
    2:     class del_desc:
    1:         def __init__(self, attr):
    1:             self.attr = attr
    1:         def __call__(self, inst):
>>>>>>             print 'Del called', self, inst
>>>>>>             del inst.desc[self.attr]
       
    1:     x = property(get_desc('x'), set_desc('x'), del_desc('x'), 'prop x')
       
       
    1: submodule = types.ModuleType(__name__ + '.submodule',
    1:     """A submodule, which should appear in its parent's summary""")
