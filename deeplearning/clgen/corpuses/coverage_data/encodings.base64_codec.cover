       """ Python 'base64_codec' Codec - base64 content transfer encoding
       
           Unlike most of the other codecs which target Unicode, this codec
           will return Python string objects for both encode and decode.
       
           Written by Marc-Andre Lemburg (mal@lemburg.com).
       
    1: """
    1: import codecs, base64
       
       ### Codec APIs
       
    1: def base64_encode(input,errors='strict'):
       
           """ Encodes the object input and returns a tuple (output
               object, length consumed).
       
               errors defines the error handling to apply. It defaults to
               'strict' handling which is the only currently supported
               error handling for this codec.
       
           """
    6:     assert errors == 'strict'
    6:     output = base64.encodestring(input)
    6:     return (output, len(input))
       
    1: def base64_decode(input,errors='strict'):
       
           """ Decodes the object input and returns a tuple (output
               object, length consumed).
       
               input must be an object which provides the bf_getreadbuf
               buffer slot. Python strings, buffer objects and memory
               mapped files are examples of objects providing this slot.
       
               errors defines the error handling to apply. It defaults to
               'strict' handling which is the only currently supported
               error handling for this codec.
       
           """
   10:     assert errors == 'strict'
   10:     output = base64.decodestring(input)
    9:     return (output, len(input))
       
    2: class Codec(codecs.Codec):
       
    1:     def encode(self, input,errors='strict'):
>>>>>>         return base64_encode(input,errors)
    1:     def decode(self, input,errors='strict'):
    5:         return base64_decode(input,errors)
       
    2: class IncrementalEncoder(codecs.IncrementalEncoder):
    1:     def encode(self, input, final=False):
>>>>>>         assert self.errors == 'strict'
>>>>>>         return base64.encodestring(input)
       
    2: class IncrementalDecoder(codecs.IncrementalDecoder):
    1:     def decode(self, input, final=False):
>>>>>>         assert self.errors == 'strict'
>>>>>>         return base64.decodestring(input)
       
    2: class StreamWriter(Codec,codecs.StreamWriter):
    1:     pass
       
    2: class StreamReader(Codec,codecs.StreamReader):
    1:     pass
       
       ### encodings module API
       
    1: def getregentry():
    2:     return codecs.CodecInfo(
    2:         name='base64',
    2:         encode=base64_encode,
    2:         decode=base64_decode,
    2:         incrementalencoder=IncrementalEncoder,
    2:         incrementaldecoder=IncrementalDecoder,
    2:         streamwriter=StreamWriter,
    2:         streamreader=StreamReader,
    2:         _is_text_encoding=False,
           )
