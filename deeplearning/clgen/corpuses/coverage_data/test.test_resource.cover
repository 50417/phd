    1: import unittest
    1: from test import test_support
    1: import time
       
    1: resource = test_support.import_module('resource')
       
       # This test is checking a few specific problem spots with the resource module.
       
    2: class ResourceTest(unittest.TestCase):
       
    1:     def test_args(self):
    1:         self.assertRaises(TypeError, resource.getrlimit)
    1:         self.assertRaises(TypeError, resource.getrlimit, 42, 42)
    1:         self.assertRaises(TypeError, resource.setrlimit)
    1:         self.assertRaises(TypeError, resource.setrlimit, 42, 42, 42)
       
    1:     def test_fsize_ismax(self):
    1:         try:
    1:             (cur, max) = resource.getrlimit(resource.RLIMIT_FSIZE)
>>>>>>         except AttributeError:
>>>>>>             self.skipTest('RLIMIT_FSIZE not available')
               # RLIMIT_FSIZE should be RLIM_INFINITY, which will be a really big
               # number on a platform with large file support.  On these platforms,
               # we need to test that the get/setrlimit functions properly convert
               # the number to a C long long and that the conversion doesn't raise
               # an error.
    1:         self.assertEqual(resource.RLIM_INFINITY, max)
    1:         resource.setrlimit(resource.RLIMIT_FSIZE, (cur, max))
       
    1:     def test_fsize_enforced(self):
    1:         try:
    1:             (cur, max) = resource.getrlimit(resource.RLIMIT_FSIZE)
>>>>>>         except AttributeError:
>>>>>>             self.skipTest('RLIMIT_FSIZE not available')
               # Check to see what happens when the RLIMIT_FSIZE is small.  Some
               # versions of Python were terminated by an uncaught SIGXFSZ, but
               # pythonrun.c has been fixed to ignore that exception.  If so, the
               # write() should return EFBIG when the limit is exceeded.
       
               # At least one platform has an unlimited RLIMIT_FSIZE and attempts
               # to change it raise ValueError instead.
    1:         try:
    1:             try:
    1:                 resource.setrlimit(resource.RLIMIT_FSIZE, (1024, max))
    1:                 limit_set = True
>>>>>>             except ValueError:
>>>>>>                 limit_set = False
    1:             f = open(test_support.TESTFN, "wb")
    1:             try:
    1:                 f.write("X" * 1024)
    1:                 try:
    1:                     f.write("Y")
    1:                     f.flush()
                           # On some systems (e.g., Ubuntu on hppa) the flush()
                           # doesn't always cause the exception, but the close()
                           # does eventually.  Try flushing several times in
                           # an attempt to ensure the file is really synced and
                           # the exception raised.
>>>>>>                     for i in range(5):
>>>>>>                         time.sleep(.1)
>>>>>>                         f.flush()
    1:                 except IOError:
    1:                     if not limit_set:
>>>>>>                         raise
    1:                 if limit_set:
                           # Close will attempt to flush the byte we wrote
                           # Restore limit first to avoid getting a spurious error
    1:                     resource.setrlimit(resource.RLIMIT_FSIZE, (cur, max))
                   finally:
    1:                 f.close()
               finally:
    1:             if limit_set:
    1:                 resource.setrlimit(resource.RLIMIT_FSIZE, (cur, max))
    1:             test_support.unlink(test_support.TESTFN)
       
    1:     def test_fsize_toobig(self):
               # Be sure that setrlimit is checking for really large values
    1:         too_big = 10L**50
    1:         try:
    1:             (cur, max) = resource.getrlimit(resource.RLIMIT_FSIZE)
>>>>>>         except AttributeError:
>>>>>>             self.skipTest('RLIMIT_FSIZE not available')
    1:         try:
    1:             resource.setrlimit(resource.RLIMIT_FSIZE, (too_big, max))
    1:         except (OverflowError, ValueError):
    1:             pass
    1:         try:
    1:             resource.setrlimit(resource.RLIMIT_FSIZE, (max, too_big))
    1:         except (OverflowError, ValueError):
    1:             pass
       
    1:     def test_getrusage(self):
    1:         self.assertRaises(TypeError, resource.getrusage)
    1:         self.assertRaises(TypeError, resource.getrusage, 42, 42)
    1:         usageself = resource.getrusage(resource.RUSAGE_SELF)
    1:         usagechildren = resource.getrusage(resource.RUSAGE_CHILDREN)
               # May not be available on all systems.
    1:         try:
    1:             usageboth = resource.getrusage(resource.RUSAGE_BOTH)
    1:         except (ValueError, AttributeError):
    1:             pass
       
           # Issue 6083: Reference counting bug
    1:     def test_setrusage_refcount(self):
    1:         try:
    1:             limits = resource.getrlimit(resource.RLIMIT_CPU)
>>>>>>         except AttributeError:
>>>>>>             self.skipTest('RLIMIT_CPU not available')
    2:         class BadSequence:
    1:             def __len__(self):
    1:                 return 2
    1:             def __getitem__(self, key):
    3:                 if key in (0, 1):
    2:                     return len(tuple(range(1000000)))
    1:                 raise IndexError
       
    1:         resource.setrlimit(resource.RLIMIT_CPU, BadSequence())
       
    1: def test_main(verbose=None):
    1:     test_support.run_unittest(ResourceTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
