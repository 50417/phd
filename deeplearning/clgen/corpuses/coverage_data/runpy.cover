       """runpy.py - locating and running Python code using the module namespace
       
       Provides support for locating and running Python scripts using the Python
       module namespace instead of the native filesystem.
       
       This allows Python code to play nicely with non-filesystem based PEP 302
       importers when locating support scripts as well as when importing modules.
    1: """
       # Written by Nick Coghlan <ncoghlan at gmail.com>
       #    to implement PEP 338 (Executing Modules as Scripts)
       
    1: import sys
    1: import imp
    1: from pkgutil import read_code
    1: try:
    1:     from imp import get_loader
    1: except ImportError:
    1:     from pkgutil import get_loader
       
       __all__ = [
    1:     "run_module", "run_path",
       ]
       
    2: class _TempModule(object):
    1:     """Temporarily replace a module in sys.modules with an empty namespace"""
    1:     def __init__(self, mod_name):
  322:         self.mod_name = mod_name
  322:         self.module = imp.new_module(mod_name)
  322:         self._saved_module = []
       
    1:     def __enter__(self):
  322:         mod_name = self.mod_name
  322:         try:
  322:             self._saved_module.append(sys.modules[mod_name])
    7:         except KeyError:
    7:             pass
  322:         sys.modules[mod_name] = self.module
  322:         return self
       
    1:     def __exit__(self, *args):
    6:         if self._saved_module:
>>>>>>             sys.modules[self.mod_name] = self._saved_module[0]
               else:
    6:             del sys.modules[self.mod_name]
    6:         self._saved_module = []
       
    2: class _ModifiedArgv0(object):
    1:     def __init__(self, value):
  322:         self.value = value
  322:         self._saved_value = self._sentinel = object()
       
    1:     def __enter__(self):
  322:         if self._saved_value is not self._sentinel:
>>>>>>             raise RuntimeError("Already preserving saved value")
  322:         self._saved_value = sys.argv[0]
  322:         sys.argv[0] = self.value
       
    1:     def __exit__(self, *args):
    6:         self.value = self._sentinel
    6:         sys.argv[0] = self._saved_value
       
    1: def _run_code(code, run_globals, init_globals=None,
    1:               mod_name=None, mod_fname=None,
    1:               mod_loader=None, pkg_name=None):
           """Helper to run code in nominated namespace"""
  350:     if init_globals is not None:
    1:         run_globals.update(init_globals)
  350:     run_globals.update(__name__ = mod_name,
  350:                        __file__ = mod_fname,
  350:                        __loader__ = mod_loader,
  350:                        __package__ = pkg_name)
  350:     exec code in run_globals
   34:     return run_globals
       
    1: def _run_module_code(code, init_globals=None,
    1:                     mod_name=None, mod_fname=None,
    1:                     mod_loader=None, pkg_name=None):
           """Helper to run code in new namespace with sys modified"""
    4:     with _TempModule(mod_name) as temp_module, _ModifiedArgv0(mod_fname):
    4:         mod_globals = temp_module.module.__dict__
    4:         _run_code(code, mod_globals, init_globals,
    4:                   mod_name, mod_fname, mod_loader, pkg_name)
           # Copy the globals of the temporary module, as they
           # may be cleared when the temporary module goes away
    4:     return mod_globals.copy()
       
       
       # This helper is needed due to a missing component in the PEP 302
       # loader protocol (specifically, "get_filename" is non-standard)
       # Since we can't introduce new features in maintenance releases,
       # support was added to zipimporter under the name '_get_filename'
    1: def _get_filename(loader, mod_name):
  345:     for attr in ("get_filename", "_get_filename"):
  345:         meth = getattr(loader, attr, None)
  345:         if meth is not None:
  345:             return meth(mod_name)
>>>>>>     return None
       
       # Helper to get the loader, code and filename for a module
    1: def _get_module_details(mod_name, error=ImportError):
  365:     try:
  365:         loader = get_loader(mod_name)
  360:         if loader is None:
    2:             raise error("No module named %s" % mod_name)
  358:         ispkg = loader.is_package(mod_name)
    6:     except ImportError as e:
    6:         raise error(format(e))
  358:     if ispkg:
   11:         if mod_name == "__main__" or mod_name.endswith(".__main__"):
>>>>>>             raise error("Cannot use package as __main__ module")
   11:         __import__(mod_name)  # Do not catch exceptions initializing package
    7:         try:
    7:             pkg_main_name = mod_name + ".__main__"
    7:             return _get_module_details(pkg_main_name)
    1:         except ImportError, e:
    1:             raise error(("%s; %r is a package and cannot " +
    1:                                "be directly executed") %(e, mod_name))
  347:     try:
  347:         code = loader.get_code(mod_name)
>>>>>>     except ImportError as e:
>>>>>>         raise error(format(e))
  347:     if code is None:
    2:         raise error("No code object available for %s" % mod_name)
  345:     filename = _get_filename(loader, mod_name)
  345:     return mod_name, loader, code, filename
       
       
    1: def _get_main_module_details(error=ImportError):
           # Helper that gives a nicer error message when attempting to
           # execute a zipfile or directory by invoking __main__.py
  320:     main_name = "__main__"
  320:     try:
  320:         return _get_module_details(main_name)
    1:     except ImportError as exc:
    1:         if main_name in str(exc):
    1:             raise error("can't find %r module in %r" %
    1:                               (main_name, sys.path[0]))
>>>>>>         raise
       
    2: class _Error(Exception):
    1:     """Error that _run_module_as_main() should report without a traceback"""
       
       # This function is the actual implementation of the -m switch and direct
       # execution of zipfiles and directories and is deliberately kept private.
       # This avoids a repeat of the situation where run_module() no longer met the
       # needs of mainmodule.c, but couldn't be changed because it was public
    1: def _run_module_as_main(mod_name, alter_argv=True):
           """Runs the designated module in the __main__ namespace
       
              Note that the executed module will have full access to the
              __main__ namespace. If this is not desirable, the run_module()
              function should be used to run the module code in a fresh namespace.
       
              At the very least, these variables in __main__ will be overwritten:
                  __name__
                  __file__
                  __loader__
                  __package__
           """
>>>>>>     try:
>>>>>>         if alter_argv or mod_name != "__main__": # i.e. -m switch
>>>>>>             mod_name, loader, code, fname = _get_module_details(
>>>>>>                 mod_name, _Error)
               else:          # i.e. directory or zipfile execution
>>>>>>             mod_name, loader, code, fname = _get_main_module_details(_Error)
>>>>>>     except _Error as exc:
>>>>>>         msg = "%s: %s" % (sys.executable, exc)
>>>>>>         sys.exit(msg)
>>>>>>     pkg_name = mod_name.rpartition('.')[0]
>>>>>>     main_globals = sys.modules["__main__"].__dict__
>>>>>>     if alter_argv:
>>>>>>         sys.argv[0] = fname
>>>>>>     return _run_code(code, main_globals, None,
>>>>>>                      "__main__", fname, loader, pkg_name)
       
    1: def run_module(mod_name, init_globals=None,
    1:                run_name=None, alter_sys=False):
           """Execute a module's code without importing it
       
              Returns the resulting top level namespace dictionary
           """
   38:     mod_name, loader, code, fname = _get_module_details(mod_name)
   27:     if run_name is None:
   21:         run_name = mod_name
   27:     pkg_name = mod_name.rpartition('.')[0]
   27:     if alter_sys:
>>>>>>         return _run_module_code(code, init_globals, run_name,
>>>>>>                                 fname, loader, pkg_name)
           else:
               # Leave the sys module alone
   27:         return _run_code(code, {}, init_globals, run_name,
   27:                          fname, loader, pkg_name)
       
       
       # XXX (ncoghlan): Perhaps expose the C API function
       # as imp.get_importer instead of reimplementing it in Python?
    1: def _get_importer(path_name):
           """Python version of PyImport_GetImporter C API function"""
  321:     cache = sys.path_importer_cache
  321:     try:
  321:         importer = cache[path_name]
    6:     except KeyError:
               # Not yet cached. Flag as using the
               # standard machinery until we finish
               # checking the hooks
    6:         cache[path_name] = None
   11:         for hook in sys.path_hooks:
    6:             try:
    6:                 importer = hook(path_name)
    1:                 break
    5:             except ImportError:
    5:                 pass
               else:
                   # The following check looks a bit odd. The trick is that
                   # NullImporter raises ImportError if the supplied path is a
                   # *valid* directory entry (and hence able to be handled
                   # by the standard import machinery)
    5:             try:
    5:                 importer = imp.NullImporter(path_name)
    4:             except ImportError:
    4:                 return None
    2:         cache[path_name] = importer
  317:     return importer
       
    1: def _get_code_from_file(fname):
           # Check for a compiled file first
    1:     with open(fname, "rb") as f:
    1:         code = read_code(f)
    1:     if code is None:
               # That didn't work, so try it as normal source code
    1:         with open(fname, "rU") as f:
    1:             code = compile(f.read(), fname, 'exec')
    1:     return code
       
    1: def run_path(path_name, init_globals=None, run_name=None):
           """Execute code located at the specified filesystem location
       
              Returns the resulting top level namespace dictionary
       
              The file path may refer directly to a Python script (i.e.
              one that could be directly executed with execfile) or else
              it may refer to a zipfile or directory containing a top
              level __main__.py script.
           """
  321:     if run_name is None:
  321:         run_name = "<run_path>"
  321:     importer = _get_importer(path_name)
  321:     if isinstance(importer, imp.NullImporter):
               # Not a valid sys.path entry, so run the code directly
               # execfile() doesn't help as we want to allow compiled files
    1:         code = _get_code_from_file(path_name)
    1:         return _run_module_code(code, init_globals, run_name, path_name)
           else:
               # Importer is defined for path, so add it to
               # the start of sys.path
  320:         sys.path.insert(0, path_name)
  320:         try:
                   # Here's where things are a little different from the run_module
                   # case. There, we only had to replace the module in sys while the
                   # code was running and doing so was somewhat optional. Here, we
                   # have no choice and we have to remove it even while we read the
                   # code. If we don't do this, a __loader__ attribute in the
                   # existing __main__ module may prevent location of the new module.
  320:             main_name = "__main__"
  320:             saved_main = sys.modules[main_name]
  320:             del sys.modules[main_name]
  320:             try:
  320:                 mod_name, loader, code, fname = _get_main_module_details()
                   finally:
  319:                 sys.modules[main_name] = saved_main
  318:             pkg_name = ""
  318:             with _TempModule(run_name) as temp_module, \
  318:                  _ModifiedArgv0(path_name):
  318:                 mod_globals = temp_module.module.__dict__
  318:                 return _run_code(code, mod_globals, init_globals,
  318:                                     run_name, fname, loader, pkg_name).copy()
               finally:
    3:             try:
    3:                 sys.path.remove(path_name)
>>>>>>             except ValueError:
>>>>>>                 pass
       
       
    1: if __name__ == "__main__":
           # Run the module specified as the next command line argument
>>>>>>     if len(sys.argv) < 2:
>>>>>>         print >> sys.stderr, "No module specified for execution"
           else:
>>>>>>         del sys.argv[0] # Make the requested module sys.argv[0]
>>>>>>         _run_module_as_main(sys.argv[0])
