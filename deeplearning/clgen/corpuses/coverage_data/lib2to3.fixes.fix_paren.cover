       """Fixer that addes parentheses where they are required
       
    1: This converts ``[x for x in 1, 2]`` to ``[x for x in (1, 2)]``."""
       
       # By Taek Joo Kim and Benjamin Peterson
       
       # Local imports
    1: from .. import fixer_base
    1: from ..fixer_util import LParen, RParen
       
       # XXX This doesn't support nested for loops like [x for x in 1, 2 for x in 1, 2]
    2: class FixParen(fixer_base.BaseFix):
    1:     BM_compatible = True
       
           PATTERN = """
               atom< ('[' | '(')
                   (listmaker< any
                       comp_for<
                           'for' NAME 'in'
                           target=testlist_safe< any (',' any)+ [',']
                            >
                           [any]
                       >
                   >
                   |
                   testlist_gexp< any
                       comp_for<
                           'for' NAME 'in'
                           target=testlist_safe< any (',' any)+ [',']
                            >
                           [any]
                       >
                   >)
               (']' | ')') >
    1:     """
       
    1:     def transform(self, node, results):
    8:         target = results["target"]
       
    8:         lparen = LParen()
    8:         lparen.prefix = target.prefix
    8:         target.prefix = u"" # Make it hug the parentheses
    8:         target.insert_child(0, lparen)
    8:         target.append_child(RParen())
