    1: import sys
    1: import textwrap
    1: from StringIO import StringIO
    1: from test import test_support
       
    1: import traceback
    1: import unittest
       
       
    2: class Test_TestResult(unittest.TestCase):
           # Note: there are not separate tests for TestResult.wasSuccessful(),
           # TestResult.errors, TestResult.failures, TestResult.testsRun or
           # TestResult.shouldStop because these only have meaning in terms of
           # other TestResult methods.
           #
           # Accordingly, tests for the aforenamed attributes are incorporated
           # in with the tests for the defining methods.
           ################################################################
       
    1:     def test_init(self):
    1:         result = unittest.TestResult()
       
    1:         self.assertTrue(result.wasSuccessful())
    1:         self.assertEqual(len(result.errors), 0)
    1:         self.assertEqual(len(result.failures), 0)
    1:         self.assertEqual(result.testsRun, 0)
    1:         self.assertEqual(result.shouldStop, False)
    1:         self.assertIsNone(result._stdout_buffer)
    1:         self.assertIsNone(result._stderr_buffer)
       
       
           # "This method can be called to signal that the set of tests being
           # run should be aborted by setting the TestResult's shouldStop
           # attribute to True."
    1:     def test_stop(self):
    1:         result = unittest.TestResult()
       
    1:         result.stop()
       
    1:         self.assertEqual(result.shouldStop, True)
       
           # "Called when the test case test is about to be run. The default
           # implementation simply increments the instance's testsRun counter."
    1:     def test_startTest(self):
    2:         class Foo(unittest.TestCase):
    1:             def test_1(self):
>>>>>>                 pass
       
    1:         test = Foo('test_1')
       
    1:         result = unittest.TestResult()
       
    1:         result.startTest(test)
       
    1:         self.assertTrue(result.wasSuccessful())
    1:         self.assertEqual(len(result.errors), 0)
    1:         self.assertEqual(len(result.failures), 0)
    1:         self.assertEqual(result.testsRun, 1)
    1:         self.assertEqual(result.shouldStop, False)
       
    1:         result.stopTest(test)
       
           # "Called after the test case test has been executed, regardless of
           # the outcome. The default implementation does nothing."
    1:     def test_stopTest(self):
    2:         class Foo(unittest.TestCase):
    1:             def test_1(self):
>>>>>>                 pass
       
    1:         test = Foo('test_1')
       
    1:         result = unittest.TestResult()
       
    1:         result.startTest(test)
       
    1:         self.assertTrue(result.wasSuccessful())
    1:         self.assertEqual(len(result.errors), 0)
    1:         self.assertEqual(len(result.failures), 0)
    1:         self.assertEqual(result.testsRun, 1)
    1:         self.assertEqual(result.shouldStop, False)
       
    1:         result.stopTest(test)
       
               # Same tests as above; make sure nothing has changed
    1:         self.assertTrue(result.wasSuccessful())
    1:         self.assertEqual(len(result.errors), 0)
    1:         self.assertEqual(len(result.failures), 0)
    1:         self.assertEqual(result.testsRun, 1)
    1:         self.assertEqual(result.shouldStop, False)
       
           # "Called before and after tests are run. The default implementation does nothing."
    1:     def test_startTestRun_stopTestRun(self):
    1:         result = unittest.TestResult()
    1:         result.startTestRun()
    1:         result.stopTestRun()
       
           # "addSuccess(test)"
           # ...
           # "Called when the test case test succeeds"
           # ...
           # "wasSuccessful() - Returns True if all tests run so far have passed,
           # otherwise returns False"
           # ...
           # "testsRun - The total number of tests run so far."
           # ...
           # "errors - A list containing 2-tuples of TestCase instances and
           # formatted tracebacks. Each tuple represents a test which raised an
           # unexpected exception. Contains formatted
           # tracebacks instead of sys.exc_info() results."
           # ...
           # "failures - A list containing 2-tuples of TestCase instances and
           # formatted tracebacks. Each tuple represents a test where a failure was
           # explicitly signalled using the TestCase.fail*() or TestCase.assert*()
           # methods. Contains formatted tracebacks instead
           # of sys.exc_info() results."
    1:     def test_addSuccess(self):
    2:         class Foo(unittest.TestCase):
    1:             def test_1(self):
>>>>>>                 pass
       
    1:         test = Foo('test_1')
       
    1:         result = unittest.TestResult()
       
    1:         result.startTest(test)
    1:         result.addSuccess(test)
    1:         result.stopTest(test)
       
    1:         self.assertTrue(result.wasSuccessful())
    1:         self.assertEqual(len(result.errors), 0)
    1:         self.assertEqual(len(result.failures), 0)
    1:         self.assertEqual(result.testsRun, 1)
    1:         self.assertEqual(result.shouldStop, False)
       
           # "addFailure(test, err)"
           # ...
           # "Called when the test case test signals a failure. err is a tuple of
           # the form returned by sys.exc_info(): (type, value, traceback)"
           # ...
           # "wasSuccessful() - Returns True if all tests run so far have passed,
           # otherwise returns False"
           # ...
           # "testsRun - The total number of tests run so far."
           # ...
           # "errors - A list containing 2-tuples of TestCase instances and
           # formatted tracebacks. Each tuple represents a test which raised an
           # unexpected exception. Contains formatted
           # tracebacks instead of sys.exc_info() results."
           # ...
           # "failures - A list containing 2-tuples of TestCase instances and
           # formatted tracebacks. Each tuple represents a test where a failure was
           # explicitly signalled using the TestCase.fail*() or TestCase.assert*()
           # methods. Contains formatted tracebacks instead
           # of sys.exc_info() results."
    1:     def test_addFailure(self):
    2:         class Foo(unittest.TestCase):
    1:             def test_1(self):
>>>>>>                 pass
       
    1:         test = Foo('test_1')
    1:         try:
    1:             test.fail("foo")
    1:         except:
    1:             exc_info_tuple = sys.exc_info()
       
    1:         result = unittest.TestResult()
       
    1:         result.startTest(test)
    1:         result.addFailure(test, exc_info_tuple)
    1:         result.stopTest(test)
       
    1:         self.assertFalse(result.wasSuccessful())
    1:         self.assertEqual(len(result.errors), 0)
    1:         self.assertEqual(len(result.failures), 1)
    1:         self.assertEqual(result.testsRun, 1)
    1:         self.assertEqual(result.shouldStop, False)
       
    1:         test_case, formatted_exc = result.failures[0]
    1:         self.assertIs(test_case, test)
    1:         self.assertIsInstance(formatted_exc, str)
       
           # "addError(test, err)"
           # ...
           # "Called when the test case test raises an unexpected exception err
           # is a tuple of the form returned by sys.exc_info():
           # (type, value, traceback)"
           # ...
           # "wasSuccessful() - Returns True if all tests run so far have passed,
           # otherwise returns False"
           # ...
           # "testsRun - The total number of tests run so far."
           # ...
           # "errors - A list containing 2-tuples of TestCase instances and
           # formatted tracebacks. Each tuple represents a test which raised an
           # unexpected exception. Contains formatted
           # tracebacks instead of sys.exc_info() results."
           # ...
           # "failures - A list containing 2-tuples of TestCase instances and
           # formatted tracebacks. Each tuple represents a test where a failure was
           # explicitly signalled using the TestCase.fail*() or TestCase.assert*()
           # methods. Contains formatted tracebacks instead
           # of sys.exc_info() results."
    1:     def test_addError(self):
    2:         class Foo(unittest.TestCase):
    1:             def test_1(self):
>>>>>>                 pass
       
    1:         test = Foo('test_1')
    1:         try:
    1:             raise TypeError()
    1:         except:
    1:             exc_info_tuple = sys.exc_info()
       
    1:         result = unittest.TestResult()
       
    1:         result.startTest(test)
    1:         result.addError(test, exc_info_tuple)
    1:         result.stopTest(test)
       
    1:         self.assertFalse(result.wasSuccessful())
    1:         self.assertEqual(len(result.errors), 1)
    1:         self.assertEqual(len(result.failures), 0)
    1:         self.assertEqual(result.testsRun, 1)
    1:         self.assertEqual(result.shouldStop, False)
       
    1:         test_case, formatted_exc = result.errors[0]
    1:         self.assertIs(test_case, test)
    1:         self.assertIsInstance(formatted_exc, str)
       
    1:     def testGetDescriptionWithoutDocstring(self):
    1:         result = unittest.TextTestResult(None, True, 1)
    1:         self.assertEqual(
    1:                 result.getDescription(self),
    1:                 'testGetDescriptionWithoutDocstring (' + __name__ +
    1:                 '.Test_TestResult)')
       
    1:     @unittest.skipIf(sys.flags.optimize >= 2,
    1:                      "Docstrings are omitted with -O2 and above")
           def testGetDescriptionWithOneLineDocstring(self):
               """Tests getDescription() for a method with a docstring."""
    1:         result = unittest.TextTestResult(None, True, 1)
    1:         self.assertEqual(
    1:                 result.getDescription(self),
                      ('testGetDescriptionWithOneLineDocstring '
    1:                 '(' + __name__ + '.Test_TestResult)\n'
                       'Tests getDescription() for a method with a docstring.'))
       
    1:     @unittest.skipIf(sys.flags.optimize >= 2,
    1:                      "Docstrings are omitted with -O2 and above")
           def testGetDescriptionWithMultiLineDocstring(self):
               """Tests getDescription() for a method with a longer docstring.
               The second line of the docstring.
               """
    1:         result = unittest.TextTestResult(None, True, 1)
    1:         self.assertEqual(
    1:                 result.getDescription(self),
                      ('testGetDescriptionWithMultiLineDocstring '
    1:                 '(' + __name__ + '.Test_TestResult)\n'
                       'Tests getDescription() for a method with a longer '
                       'docstring.'))
       
    1:     def testStackFrameTrimming(self):
    2:         class Frame(object):
    2:             class tb_frame(object):
    1:                 f_globals = {}
    1:         result = unittest.TestResult()
    1:         self.assertFalse(result._is_relevant_tb_level(Frame))
       
    1:         Frame.tb_frame.f_globals['__unittest'] = True
    1:         self.assertTrue(result._is_relevant_tb_level(Frame))
       
    1:     def testFailFast(self):
    1:         result = unittest.TestResult()
    2:         result._exc_info_to_string = lambda *_: ''
    1:         result.failfast = True
    1:         result.addError(None, None)
    1:         self.assertTrue(result.shouldStop)
       
    1:         result = unittest.TestResult()
    2:         result._exc_info_to_string = lambda *_: ''
    1:         result.failfast = True
    1:         result.addFailure(None, None)
    1:         self.assertTrue(result.shouldStop)
       
    1:         result = unittest.TestResult()
    1:         result._exc_info_to_string = lambda *_: ''
    1:         result.failfast = True
    1:         result.addUnexpectedSuccess(None)
    1:         self.assertTrue(result.shouldStop)
       
    1:     def testFailFastSetByRunner(self):
    1:         runner = unittest.TextTestRunner(stream=StringIO(), failfast=True)
    1:         def test(result):
    1:             self.assertTrue(result.failfast)
    1:         runner.run(test)
       
       
    1: classDict = dict(unittest.TestResult.__dict__)
    1: for m in ('addSkip', 'addExpectedFailure', 'addUnexpectedSuccess',
    5:            '__init__'):
    4:     del classDict[m]
       
    1: def __init__(self, stream=None, descriptions=None, verbosity=None):
    6:     self.failures = []
    6:     self.errors = []
    6:     self.testsRun = 0
    6:     self.shouldStop = False
    6:     self.buffer = False
       
    1: classDict['__init__'] = __init__
    1: OldResult = type('OldResult', (object,), classDict)
       
    2: class Test_OldTestResult(unittest.TestCase):
       
    1:     def assertOldResultWarning(self, test, failures):
    5:         with test_support.check_warnings(("TestResult has no add.+ method,",
    5:                                           RuntimeWarning)):
    5:             result = OldResult()
    5:             test.run(result)
    5:             self.assertEqual(len(result.failures), failures)
       
    1:     def testOldTestResult(self):
    2:         class Test(unittest.TestCase):
    1:             def testSkip(self):
    1:                 self.skipTest('foobar')
    1:             @unittest.expectedFailure
                   def testExpectedFail(self):
    1:                 raise TypeError
    1:             @unittest.expectedFailure
                   def testUnexpectedSuccess(self):
    1:                 pass
       
    1:         for test_name, should_pass in (('testSkip', True),
    1:                                        ('testExpectedFail', True),
    4:                                        ('testUnexpectedSuccess', False)):
    3:             test = Test(test_name)
    3:             self.assertOldResultWarning(test, int(not should_pass))
       
    1:     def testOldTestTesultSetup(self):
    2:         class Test(unittest.TestCase):
    1:             def setUp(self):
    1:                 self.skipTest('no reason')
    1:             def testFoo(self):
>>>>>>                 pass
    1:         self.assertOldResultWarning(Test('testFoo'), 0)
       
    1:     def testOldTestResultClass(self):
    2:         @unittest.skip('no reason')
    1:         class Test(unittest.TestCase):
    1:             def testFoo(self):
>>>>>>                 pass
    1:         self.assertOldResultWarning(Test('testFoo'), 0)
       
    1:     def testOldResultWithRunner(self):
    2:         class Test(unittest.TestCase):
    1:             def testFoo(self):
    1:                 pass
    1:         runner = unittest.TextTestRunner(resultclass=OldResult,
    1:                                           stream=StringIO())
               # This will raise an exception if TextTestRunner can't handle old
               # test result objects
    1:         runner.run(Test('testFoo'))
       
       
    2: class MockTraceback(object):
    1:     @staticmethod
           def format_exception(*_):
    4:         return ['A traceback']
       
    1: def restore_traceback():
    1:     unittest.result.traceback = traceback
       
       
    2: class TestOutputBuffering(unittest.TestCase):
       
    1:     def setUp(self):
    7:         self._real_out = sys.stdout
    7:         self._real_err = sys.stderr
       
    1:     def tearDown(self):
    7:         sys.stdout = self._real_out
    7:         sys.stderr = self._real_err
       
    1:     def testBufferOutputOff(self):
    1:         real_out = self._real_out
    1:         real_err = self._real_err
       
    1:         result = unittest.TestResult()
    1:         self.assertFalse(result.buffer)
       
    1:         self.assertIs(real_out, sys.stdout)
    1:         self.assertIs(real_err, sys.stderr)
       
    1:         result.startTest(self)
       
    1:         self.assertIs(real_out, sys.stdout)
    1:         self.assertIs(real_err, sys.stderr)
       
    1:     def testBufferOutputStartTestAddSuccess(self):
    1:         real_out = self._real_out
    1:         real_err = self._real_err
       
    1:         result = unittest.TestResult()
    1:         self.assertFalse(result.buffer)
       
    1:         result.buffer = True
       
    1:         self.assertIs(real_out, sys.stdout)
    1:         self.assertIs(real_err, sys.stderr)
       
    1:         result.startTest(self)
       
    1:         self.assertIsNot(real_out, sys.stdout)
    1:         self.assertIsNot(real_err, sys.stderr)
    1:         self.assertIsInstance(sys.stdout, StringIO)
    1:         self.assertIsInstance(sys.stderr, StringIO)
    1:         self.assertIsNot(sys.stdout, sys.stderr)
       
    1:         out_stream = sys.stdout
    1:         err_stream = sys.stderr
       
    1:         result._original_stdout = StringIO()
    1:         result._original_stderr = StringIO()
       
    1:         print 'foo'
    1:         print >> sys.stderr, 'bar'
       
    1:         self.assertEqual(out_stream.getvalue(), 'foo\n')
    1:         self.assertEqual(err_stream.getvalue(), 'bar\n')
       
    1:         self.assertEqual(result._original_stdout.getvalue(), '')
    1:         self.assertEqual(result._original_stderr.getvalue(), '')
       
    1:         result.addSuccess(self)
    1:         result.stopTest(self)
       
    1:         self.assertIs(sys.stdout, result._original_stdout)
    1:         self.assertIs(sys.stderr, result._original_stderr)
       
    1:         self.assertEqual(result._original_stdout.getvalue(), '')
    1:         self.assertEqual(result._original_stderr.getvalue(), '')
       
    1:         self.assertEqual(out_stream.getvalue(), '')
    1:         self.assertEqual(err_stream.getvalue(), '')
       
       
    1:     def getStartedResult(self):
    4:         result = unittest.TestResult()
    4:         result.buffer = True
    4:         result.startTest(self)
    4:         return result
       
    1:     def testBufferOutputAddErrorOrFailure(self):
    1:         unittest.result.traceback = MockTraceback
    1:         self.addCleanup(restore_traceback)
       
    1:         for message_attr, add_attr, include_error in [
    1:             ('errors', 'addError', True),
    1:             ('failures', 'addFailure', False),
    1:             ('errors', 'addError', True),
    5:             ('failures', 'addFailure', False)
               ]:
    4:             result = self.getStartedResult()
    4:             buffered_out = sys.stdout
    4:             buffered_err = sys.stderr
    4:             result._original_stdout = StringIO()
    4:             result._original_stderr = StringIO()
       
    4:             print >> sys.stdout, 'foo'
    4:             if include_error:
    2:                 print >> sys.stderr, 'bar'
       
       
    4:             addFunction = getattr(result, add_attr)
    4:             addFunction(self, (None, None, None))
    4:             result.stopTest(self)
       
    4:             result_list = getattr(result, message_attr)
    4:             self.assertEqual(len(result_list), 1)
       
    4:             test, message = result_list[0]
    4:             expectedOutMessage = textwrap.dedent("""
                       Stdout:
                       foo
    4:             """)
    4:             expectedErrMessage = ''
    4:             if include_error:
    2:                 expectedErrMessage = textwrap.dedent("""
                       Stderr:
                       bar
    2:             """)
    4:             expectedFullMessage = 'A traceback%s%s' % (expectedOutMessage, expectedErrMessage)
       
    4:             self.assertIs(test, self)
    4:             self.assertEqual(result._original_stdout.getvalue(), expectedOutMessage)
    4:             self.assertEqual(result._original_stderr.getvalue(), expectedErrMessage)
    4:             self.assertMultiLineEqual(message, expectedFullMessage)
       
    1:     def testBufferSetupClass(self):
    1:         result = unittest.TestResult()
    1:         result.buffer = True
       
    2:         class Foo(unittest.TestCase):
    1:             @classmethod
                   def setUpClass(cls):
    1:                 1//0
    1:             def test_foo(self):
>>>>>>                 pass
    1:         suite = unittest.TestSuite([Foo('test_foo')])
    1:         suite(result)
    1:         self.assertEqual(len(result.errors), 1)
       
    1:     def testBufferTearDownClass(self):
    1:         result = unittest.TestResult()
    1:         result.buffer = True
       
    2:         class Foo(unittest.TestCase):
    1:             @classmethod
                   def tearDownClass(cls):
    1:                 1//0
    1:             def test_foo(self):
    1:                 pass
    1:         suite = unittest.TestSuite([Foo('test_foo')])
    1:         suite(result)
    1:         self.assertEqual(len(result.errors), 1)
       
    1:     def testBufferSetUpModule(self):
    1:         result = unittest.TestResult()
    1:         result.buffer = True
       
    2:         class Foo(unittest.TestCase):
    1:             def test_foo(self):
>>>>>>                 pass
    2:         class Module(object):
    1:             @staticmethod
                   def setUpModule():
    1:                 1//0
       
    1:         Foo.__module__ = 'Module'
    1:         sys.modules['Module'] = Module
    1:         self.addCleanup(sys.modules.pop, 'Module')
    1:         suite = unittest.TestSuite([Foo('test_foo')])
    1:         suite(result)
    1:         self.assertEqual(len(result.errors), 1)
       
    1:     def testBufferTearDownModule(self):
    1:         result = unittest.TestResult()
    1:         result.buffer = True
       
    2:         class Foo(unittest.TestCase):
    1:             def test_foo(self):
    1:                 pass
    2:         class Module(object):
    1:             @staticmethod
                   def tearDownModule():
    1:                 1//0
       
    1:         Foo.__module__ = 'Module'
    1:         sys.modules['Module'] = Module
    1:         self.addCleanup(sys.modules.pop, 'Module')
    1:         suite = unittest.TestSuite([Foo('test_foo')])
    1:         suite(result)
    1:         self.assertEqual(len(result.errors), 1)
       
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
