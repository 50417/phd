    1: from test import test_support
    1: import random
    1: import sys
    1: import unittest
       
    1: verbose = test_support.verbose
    1: nerrors = 0
       
    1: def check(tag, expected, raw, compare=None):
           global nerrors
       
  195:     if verbose:
>>>>>>         print "    checking", tag
       
  195:     orig = raw[:]   # save input in case of error
  195:     if compare:
   31:         raw.sort(compare)
           else:
  164:         raw.sort()
       
  195:     if len(expected) != len(raw):
>>>>>>         print "error in", tag
>>>>>>         print "length mismatch;", len(expected), len(raw)
>>>>>>         print expected
>>>>>>         print orig
>>>>>>         print raw
>>>>>>         nerrors += 1
>>>>>>         return
       
28746:     for i, good in enumerate(expected):
28551:         maybe = raw[i]
28551:         if good is not maybe:
>>>>>>             print "error in", tag
>>>>>>             print "out of order at index", i, good, maybe
>>>>>>             print expected
>>>>>>             print orig
>>>>>>             print raw
>>>>>>             nerrors += 1
>>>>>>             return
       
    2: class TestBase(unittest.TestCase):
    1:     def testStressfully(self):
               # Try a variety of sizes at and around powers of 2, and at powers of 10.
    1:         sizes = [0]
   10:         for power in range(1, 10):
    9:             n = 2 ** power
    9:             sizes.extend(range(n-1, n+2))
    1:         sizes.extend([10, 100, 1000])
       
    2:         class Complains(object):
    1:             maybe_complain = True
       
    1:             def __init__(self, i):
 4176:                 self.i = i
       
    1:             def __lt__(self, other):
31680:                 if Complains.maybe_complain and random.random() < 0.001:
    9:                     if verbose:
>>>>>>                         print "        complaining at", self, other
    9:                     raise RuntimeError
31671:                 return self.i < other.i
       
    1:             def __repr__(self):
>>>>>>                 return "Complains(%d)" % self.i
       
    2:         class Stable(object):
    1:             def __init__(self, key, i):
 4176:                 self.key = key
 4176:                 self.index = i
       
    1:             def __cmp__(self, other):
68124:                 return cmp(self.key, other.key)
    1:             __hash__ = None # Silence Py3k warning
       
    1:             def __repr__(self):
>>>>>>                 return "Stable(%d, %d)" % (self.key, self.index)
       
   32:         for n in sizes:
   31:             x = range(n)
   31:             if verbose:
>>>>>>                 print "Testing size", n
       
   31:             s = x[:]
   31:             check("identity", x, s)
       
   31:             s = x[:]
   31:             s.reverse()
   31:             check("reversed", x, s)
       
   31:             s = x[:]
   31:             random.shuffle(s)
   31:             check("random permutation", x, s)
       
   31:             y = x[:]
   31:             y.reverse()
   31:             s = x[:]
 4177:             check("reversed via function", y, s, lambda a, b: cmp(b, a))
       
   31:             if verbose:
>>>>>>                 print "    Checking against an insane comparison function."
>>>>>>                 print "        If the implementation isn't careful, this may segfault."
   31:             s = x[:]
23509:             s.sort(lambda a, b:  int(random.random() * 3) - 1)
   31:             check("an insane function left some permutation", x, s)
       
 4207:             x = [Complains(i) for i in x]
   31:             s = x[:]
   31:             random.shuffle(s)
   31:             Complains.maybe_complain = True
   31:             it_complained = False
   31:             try:
   31:                 s.sort()
    9:             except RuntimeError:
    9:                 it_complained = True
   31:             if it_complained:
    9:                 Complains.maybe_complain = False
    9:                 check("exception during sort left some permutation", x, s)
       
 4207:             s = [Stable(random.randrange(10), i) for i in xrange(n)]
 4207:             augmented = [(e, e.index) for e in s]
   31:             augmented.sort()    # forced stable because ties broken by index
 4207:             x = [e for e, i in augmented] # a stable sort of s
   31:             check("stability", x, s)
       
       #==============================================================================
       
    2: class TestBugs(unittest.TestCase):
       
    1:     def test_bug453523(self):
               # bug 453523 -- list.sort() crasher.
               # If this fails, the most likely outcome is a core dump.
               # Mutations during a list sort should raise a ValueError.
       
    2:         class C:
    1:             def __lt__(self, other):
  211:                 if L and random.random() < 0.75:
  105:                     L.pop()
                       else:
  106:                     L.append(3)
  211:                 return random.random() < 0.5
       
   51:         L = [C() for i in range(50)]
    1:         self.assertRaises(ValueError, L.sort)
       
    1:     def test_cmpNone(self):
               # Testing None as a comparison function.
       
    1:         L = range(50)
    1:         random.shuffle(L)
    1:         L.sort(None)
    1:         self.assertEqual(L, range(50))
       
    1:     def test_undetected_mutation(self):
               # Python 2.4a1 did not always detect mutation
    1:         memorywaster = []
   21:         for i in range(20):
   20:             def mutating_cmp(x, y):
   20:                 L.append(3)
   20:                 L.pop()
   20:                 return cmp(x, y)
   20:             L = [1,2]
   20:             self.assertRaises(ValueError, L.sort, mutating_cmp)
   20:             def mutating_cmp(x, y):
   20:                 L.append(3)
   20:                 del L[:]
   20:                 return cmp(x, y)
   20:             self.assertRaises(ValueError, L.sort, mutating_cmp)
   20:             memorywaster = [memorywaster]
       
       #==============================================================================
       
    2: class TestDecorateSortUndecorate(unittest.TestCase):
       
    1:     def test_decorated(self):
    1:         data = 'The quick Brown fox Jumped over The lazy Dog'.split()
    1:         copy = data[:]
    1:         random.shuffle(data)
    1:         data.sort(key=str.lower)
   20:         copy.sort(cmp=lambda x,y: cmp(x.lower(), y.lower()))
       
    1:     def test_baddecorator(self):
    1:         data = 'The quick Brown fox Jumped over The lazy Dog'.split()
    1:         self.assertRaises(TypeError, data.sort, None, lambda x,y: 0)
       
    1:     def test_stability(self):
  201:         data = [(random.randrange(100), i) for i in xrange(200)]
    1:         copy = data[:]
  201:         data.sort(key=lambda x: x[0])   # sort on the random first field
    1:         copy.sort()                     # sort using both fields
    1:         self.assertEqual(data, copy)    # should get the same result
       
    1:     def test_cmp_and_key_combination(self):
               # Verify that the wrapper has been removed
    1:         def compare(x, y):
   19:             self.assertEqual(type(x), str)
   19:             self.assertEqual(type(x), str)
   19:             return cmp(x, y)
    1:         data = 'The quick Brown fox Jumped over The lazy Dog'.split()
    1:         data.sort(cmp=compare, key=str.lower)
       
    1:     def test_badcmp_with_key(self):
               # Verify that the wrapper has been removed
    1:         data = 'The quick Brown fox Jumped over The lazy Dog'.split()
    1:         self.assertRaises(TypeError, data.sort, "bad", str.lower)
       
    1:     def test_key_with_exception(self):
               # Verify that the wrapper has been removed
    1:         data = range(-2,2)
    1:         dup = data[:]
    4:         self.assertRaises(ZeroDivisionError, data.sort, None, lambda x: 1 // x)
    1:         self.assertEqual(data, dup)
       
    1:     def test_key_with_mutation(self):
    1:         data = range(10)
    1:         def k(x):
   10:             del data[:]
   10:             data[:] = range(20)
   10:             return x
    1:         self.assertRaises(ValueError, data.sort, key=k)
       
    1:     def test_key_with_mutating_del(self):
    1:         data = range(10)
    2:         class SortKiller(object):
    1:             def __init__(self, x):
   10:                 pass
    1:             def __del__(self):
   10:                 del data[:]
   10:                 data[:] = range(20)
    1:         self.assertRaises(ValueError, data.sort, key=SortKiller)
       
    1:     def test_key_with_mutating_del_and_exception(self):
    1:         data = range(10)
               ## dup = data[:]
    2:         class SortKiller(object):
    1:             def __init__(self, x):
    4:                 if x > 2:
    1:                     raise RuntimeError
    1:             def __del__(self):
    4:                 del data[:]
    4:                 data[:] = range(20)
    1:         self.assertRaises(RuntimeError, data.sort, key=SortKiller)
               ## major honking subtlety: we *can't* do:
               ##
               ## self.assertEqual(data, dup)
               ##
               ## because there is a reference to a SortKiller in the
               ## traceback and by the time it dies we're outside the call to
               ## .sort() and so the list protection gimmicks are out of
               ## date (this cost some brain cells to figure out...).
       
    1:     def test_reverse(self):
    1:         data = range(100)
    1:         random.shuffle(data)
    1:         data.sort(reverse=True)
    1:         self.assertEqual(data, range(99,-1,-1))
    1:         self.assertRaises(TypeError, data.sort, "wrong type")
       
    1:     def test_reverse_stability(self):
  201:         data = [(random.randrange(100), i) for i in xrange(200)]
    1:         copy1 = data[:]
    1:         copy2 = data[:]
 1266:         data.sort(cmp=lambda x,y: cmp(x[0],y[0]), reverse=True)
 1264:         copy1.sort(cmp=lambda x,y: cmp(y[0],x[0]))
    1:         self.assertEqual(data, copy1)
  201:         copy2.sort(key=lambda x: x[0], reverse=True)
    1:         self.assertEqual(data, copy2)
       
       #==============================================================================
       
    1: def test_main(verbose=None):
           test_classes = (
    1:         TestBase,
    1:         TestDecorateSortUndecorate,
    1:         TestBugs,
           )
       
    1:     with test_support.check_py3k_warnings(
    1:             ("the cmp argument is not supported", DeprecationWarning)):
    1:         test_support.run_unittest(*test_classes)
       
               # verify reference counting
    1:         if verbose and hasattr(sys, "gettotalrefcount"):
>>>>>>             import gc
>>>>>>             counts = [None] * 5
>>>>>>             for i in xrange(len(counts)):
>>>>>>                 test_support.run_unittest(*test_classes)
>>>>>>                 gc.collect()
>>>>>>                 counts[i] = sys.gettotalrefcount()
>>>>>>             print counts
       
    1: if __name__ == "__main__":
>>>>>>     test_main(verbose=True)
