    1: import unittest
    1: from test import test_support
    1: import __future__
       
    1: GOOD_SERIALS = ("alpha", "beta", "candidate", "final")
       
    1: features = __future__.all_feature_names
       
    2: class FutureTest(unittest.TestCase):
       
    1:     def test_names(self):
               # Verify that all_feature_names appears correct.
    1:         given_feature_names = features[:]
   23:         for name in dir(__future__):
   22:             obj = getattr(__future__, name, None)
   22:             if obj is not None and isinstance(obj, __future__._Feature):
    7:                 self.assertTrue(
    7:                     name in given_feature_names,
    7:                     "%r should have been in all_feature_names" % name
                       )
    7:                 given_feature_names.remove(name)
    1:         self.assertEqual(len(given_feature_names), 0,
    1:                "all_feature_names has too much: %r" % given_feature_names)
       
    1:     def test_attributes(self):
    8:         for feature in features:
    7:             value = getattr(__future__, feature)
       
    7:             optional = value.getOptionalRelease()
    7:             mandatory = value.getMandatoryRelease()
       
    7:             a = self.assertTrue
    7:             e = self.assertEqual
    7:             def check(t, name):
   14:                 a(isinstance(t, tuple), "%s isn't tuple" % name)
   14:                 e(len(t), 5, "%s isn't 5-tuple" % name)
   14:                 (major, minor, micro, level, serial) = t
   14:                 a(isinstance(major, int), "%s major isn't int"  % name)
   14:                 a(isinstance(minor, int), "%s minor isn't int" % name)
   14:                 a(isinstance(micro, int), "%s micro isn't int" % name)
   14:                 a(isinstance(level, basestring),
   14:                     "%s level isn't string" % name)
   14:                 a(level in GOOD_SERIALS,
   14:                        "%s level string has unknown value" % name)
   14:                 a(isinstance(serial, int), "%s serial isn't int" % name)
       
    7:             check(optional, "optional")
    7:             if mandatory is not None:
    7:                 check(mandatory, "mandatory")
    7:                 a(optional < mandatory,
    7:                        "optional not less than mandatory, and mandatory not None")
       
    7:             a(hasattr(value, "compiler_flag"),
    7:                    "feature is missing a .compiler_flag attr")
                   # Make sure the compile accepts the flag.
    7:             compile("", "<test>", "exec", value.compiler_flag)
    7:             a(isinstance(getattr(value, "compiler_flag"), int),
    7:                    ".compiler_flag isn't int")
       
       
    1: def test_main():
    1:     test_support.run_unittest(FutureTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
