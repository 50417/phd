       # line 1
    1: def wrap(foo=None):
    2:     def wrapper(func):
    2:         return func
    2:     return wrapper
       
       # line 7
    1: def replace(func):
    1:     def insteadfunc():
>>>>>>         print 'hello'
    1:     return insteadfunc
       
       # line 13
    1: @wrap()
    1: @wrap(wrap)
       def wrapped():
>>>>>>     pass
       
       # line 19
    1: @replace
       def gone():
>>>>>>     pass
       
       # line 24
    1: oll = lambda m: m
       
       # line 27
    1: tll = lambda g: g and \
>>>>>> g and \
>>>>>> g
       
       # line 32
    1: tlli = lambda d: d and \
>>>>>>     d
       
       # line 36
    1: def onelinefunc(): pass
       
       # line 39
    1: def manyargs(arg1, arg2,
>>>>>> arg3, arg4): pass
       
       # line 43
    1: def twolinefunc(m): return m and \
>>>>>> m
       
       # line 47
    1: a = [None,
    1:      lambda x: x,
    1:      None]
       
       # line 52
    1: def setfunc(func):
    1:     globals()["anonymous"] = func
    1: setfunc(lambda x, y: x*y)
       
       # line 57
    1: def with_comment():  # hello
>>>>>>     world
       
       # line 61
       multiline_sig = [
    1:     lambda (x,
>>>>>>             y): x+y,
    1:     None,
           ]
       
       # line 68
    1: def func69():
    2:     class cls70:
    1:         def func71():
>>>>>>             pass
    1:     return cls70
    1: extra74 = 74
       
       # line 76
    1: def func77(): pass
    1: (extra78, stuff78) = 'xy'
    1: extra79 = 'stop'
       
       # line 81
    2: class cls82:
    1:     def func83(): pass
    1: (extra84, stuff84) = 'xy'
    1: extra85 = 'stop'
       
       # line 87
    1: def func88():
           # comment
>>>>>>     return 90
       
       # line 92
    1: def f():
    2:     class X:
    1:         def g():
                   "doc"
>>>>>>             return 42
    1:     return X
    1: method_in_dynamic_class = f().g.im_func
