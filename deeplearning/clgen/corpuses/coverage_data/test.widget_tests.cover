       # Common tests for test_tkinter/test_widgets.py and test_ttk/test_widgets.py
       
    1: import unittest
    1: import sys
    1: import Tkinter as tkinter
    1: from ttk import Scale
    1: from test_ttk.support import (AbstractTkTest, tcl_version, requires_tcl,
                                     get_tk_patchlevel, pixels_conv, tcl_obj_eq)
    1: import test.test_support
       
       
    1: noconv = noconv_meth = False
    1: if get_tk_patchlevel() < (8, 5, 11):
    1:     noconv = str
    1: noconv_meth = noconv and staticmethod(noconv)
       
    1: def int_round(x):
>>>>>>     return int(round(x))
       
    1: pixels_round = int_round
    1: if get_tk_patchlevel()[:3] == (8, 5, 11):
           # Issue #19085: Workaround a bug in Tk
           # http://core.tcl.tk/tk/info/3497848
>>>>>>     pixels_round = int
       
       
    1: _sentinel = object()
       
    2: class AbstractWidgetTest(AbstractTkTest):
    1:     _conv_pixels = staticmethod(pixels_round)
    1:     _conv_pad_pixels = None
    1:     _stringify = False
       
    1:     @property
           def scaling(self):
>>>>>>         try:
>>>>>>             return self._scaling
>>>>>>         except AttributeError:
>>>>>>             self._scaling = float(self.root.call('tk', 'scaling'))
>>>>>>             return self._scaling
       
    1:     def _str(self, value):
>>>>>>         if not self._stringify and self.wantobjects and tcl_version >= (8, 6):
>>>>>>             return value
>>>>>>         if isinstance(value, tuple):
>>>>>>             return ' '.join(map(self._str, value))
>>>>>>         return str(value)
       
    1:     def assertEqual2(self, actual, expected, msg=None, eq=object.__eq__):
>>>>>>         if eq(actual, expected):
>>>>>>             return
>>>>>>         self.assertEqual(actual, expected, msg)
       
    1:     def checkParam(self, widget, name, value, expected=_sentinel,
    1:                    conv=False, eq=None):
>>>>>>         widget[name] = value
>>>>>>         if expected is _sentinel:
>>>>>>             expected = value
>>>>>>         if conv:
>>>>>>             expected = conv(expected)
>>>>>>         if self._stringify or not self.wantobjects:
>>>>>>             if isinstance(expected, tuple):
>>>>>>                 expected = tkinter._join(expected)
                   else:
>>>>>>                 expected = str(expected)
>>>>>>         if eq is None:
>>>>>>             eq = tcl_obj_eq
>>>>>>         self.assertEqual2(widget[name], expected, eq=eq)
>>>>>>         self.assertEqual2(widget.cget(name), expected, eq=eq)
               # XXX
>>>>>>         if not isinstance(widget, Scale):
>>>>>>             t = widget.configure(name)
>>>>>>             self.assertEqual(len(t), 5)
>>>>>>             self.assertEqual2(t[4], expected, eq=eq)
       
    1:     def checkInvalidParam(self, widget, name, value, errmsg=None,
    1:                           keep_orig=True):
>>>>>>         orig = widget[name]
>>>>>>         if errmsg is not None:
>>>>>>             errmsg = errmsg.format(value)
>>>>>>         with self.assertRaises(tkinter.TclError) as cm:
>>>>>>             widget[name] = value
>>>>>>         if errmsg is not None:
>>>>>>             self.assertEqual(str(cm.exception), errmsg)
>>>>>>         if keep_orig:
>>>>>>             self.assertEqual(widget[name], orig)
               else:
>>>>>>             widget[name] = orig
>>>>>>         with self.assertRaises(tkinter.TclError) as cm:
>>>>>>             widget.configure({name: value})
>>>>>>         if errmsg is not None:
>>>>>>             self.assertEqual(str(cm.exception), errmsg)
>>>>>>         if keep_orig:
>>>>>>             self.assertEqual(widget[name], orig)
               else:
>>>>>>             widget[name] = orig
       
    1:     def checkParams(self, widget, name, *values, **kwargs):
>>>>>>         for value in values:
>>>>>>             self.checkParam(widget, name, value, **kwargs)
       
    1:     def checkIntegerParam(self, widget, name, *values, **kwargs):
>>>>>>         self.checkParams(widget, name, *values, **kwargs)
>>>>>>         self.checkInvalidParam(widget, name, '',
>>>>>>                 errmsg='expected integer but got ""')
>>>>>>         self.checkInvalidParam(widget, name, '10p',
>>>>>>                 errmsg='expected integer but got "10p"')
>>>>>>         self.checkInvalidParam(widget, name, 3.2,
>>>>>>                 errmsg='expected integer but got "3.2"')
       
    1:     def checkFloatParam(self, widget, name, *values, **kwargs):
>>>>>>         if 'conv' in kwargs:
>>>>>>             conv = kwargs.pop('conv')
               else:
>>>>>>             conv = float
>>>>>>         for value in values:
>>>>>>             self.checkParam(widget, name, value, conv=conv, **kwargs)
>>>>>>         self.checkInvalidParam(widget, name, '',
>>>>>>                 errmsg='expected floating-point number but got ""')
>>>>>>         self.checkInvalidParam(widget, name, 'spam',
>>>>>>                 errmsg='expected floating-point number but got "spam"')
       
    1:     def checkBooleanParam(self, widget, name):
>>>>>>         for value in (False, 0, 'false', 'no', 'off'):
>>>>>>             self.checkParam(widget, name, value, expected=0)
>>>>>>         for value in (True, 1, 'true', 'yes', 'on'):
>>>>>>             self.checkParam(widget, name, value, expected=1)
>>>>>>         self.checkInvalidParam(widget, name, '',
>>>>>>                 errmsg='expected boolean value but got ""')
>>>>>>         self.checkInvalidParam(widget, name, 'spam',
>>>>>>                 errmsg='expected boolean value but got "spam"')
       
    1:     def checkColorParam(self, widget, name, allow_empty=None, **kwargs):
>>>>>>         self.checkParams(widget, name,
>>>>>>                          '#ff0000', '#00ff00', '#0000ff', '#123456',
>>>>>>                          'red', 'green', 'blue', 'white', 'black', 'grey',
>>>>>>                          **kwargs)
>>>>>>         self.checkInvalidParam(widget, name, 'spam',
>>>>>>                 errmsg='unknown color name "spam"')
       
    1:     def checkCursorParam(self, widget, name, **kwargs):
>>>>>>         self.checkParams(widget, name, 'arrow', 'watch', 'cross', '',**kwargs)
>>>>>>         if tcl_version >= (8, 5):
>>>>>>             self.checkParam(widget, name, 'none')
>>>>>>         self.checkInvalidParam(widget, name, 'spam',
>>>>>>                 errmsg='bad cursor spec "spam"')
       
    1:     def checkCommandParam(self, widget, name):
>>>>>>         def command(*args):
>>>>>>             pass
>>>>>>         widget[name] = command
>>>>>>         self.assertTrue(widget[name])
>>>>>>         self.checkParams(widget, name, '')
       
    1:     def checkEnumParam(self, widget, name, *values, **kwargs):
>>>>>>         if 'errmsg' in kwargs:
>>>>>>             errmsg = kwargs.pop('errmsg')
               else:
>>>>>>             errmsg = None
>>>>>>         self.checkParams(widget, name, *values, **kwargs)
>>>>>>         if errmsg is None:
>>>>>>             errmsg2 = ' %s "{}": must be %s%s or %s' % (
>>>>>>                     name,
>>>>>>                     ', '.join(values[:-1]),
>>>>>>                     ',' if len(values) > 2 else '',
>>>>>>                     values[-1])
>>>>>>             self.checkInvalidParam(widget, name, '',
>>>>>>                                    errmsg='ambiguous' + errmsg2)
>>>>>>             errmsg = 'bad' + errmsg2
>>>>>>         self.checkInvalidParam(widget, name, 'spam', errmsg=errmsg)
       
    1:     def checkPixelsParam(self, widget, name, *values, **kwargs):
>>>>>>         if 'conv' in kwargs:
>>>>>>             conv = kwargs.pop('conv')
               else:
>>>>>>             conv = None
>>>>>>         if conv is None:
>>>>>>             conv = self._conv_pixels
>>>>>>         if 'keep_orig' in kwargs:
>>>>>>             keep_orig = kwargs.pop('keep_orig')
               else:
>>>>>>             keep_orig = True
>>>>>>         for value in values:
>>>>>>             expected = _sentinel
>>>>>>             conv1 = conv
>>>>>>             if isinstance(value, str):
>>>>>>                 if conv1 and conv1 is not str:
>>>>>>                     expected = pixels_conv(value) * self.scaling
>>>>>>                     conv1 = int_round
>>>>>>             self.checkParam(widget, name, value, expected=expected,
>>>>>>                             conv=conv1, **kwargs)
>>>>>>         self.checkInvalidParam(widget, name, '6x',
>>>>>>                 errmsg='bad screen distance "6x"', keep_orig=keep_orig)
>>>>>>         self.checkInvalidParam(widget, name, 'spam',
>>>>>>                 errmsg='bad screen distance "spam"', keep_orig=keep_orig)
       
    1:     def checkReliefParam(self, widget, name):
>>>>>>         self.checkParams(widget, name,
>>>>>>                          'flat', 'groove', 'raised', 'ridge', 'solid', 'sunken')
>>>>>>         errmsg='bad relief "spam": must be '\
                      'flat, groove, raised, ridge, solid, or sunken'
>>>>>>         if tcl_version < (8, 6):
>>>>>>             errmsg = None
>>>>>>         self.checkInvalidParam(widget, name, 'spam',
>>>>>>                 errmsg=errmsg)
       
    1:     def checkImageParam(self, widget, name):
>>>>>>         image = tkinter.PhotoImage(master=self.root, name='image1')
>>>>>>         self.checkParam(widget, name, image, conv=str)
>>>>>>         self.checkInvalidParam(widget, name, 'spam',
>>>>>>                 errmsg='image "spam" doesn\'t exist')
>>>>>>         widget[name] = ''
       
    1:     def checkVariableParam(self, widget, name, var):
>>>>>>         self.checkParam(widget, name, var, conv=str)
       
    1:     def assertIsBoundingBox(self, bbox):
>>>>>>         self.assertIsNotNone(bbox)
>>>>>>         self.assertIsInstance(bbox, tuple)
>>>>>>         if len(bbox) != 4:
>>>>>>             self.fail('Invalid bounding box: %r' % (bbox,))
>>>>>>         for item in bbox:
>>>>>>             if not isinstance(item, int):
>>>>>>                 self.fail('Invalid bounding box: %r' % (bbox,))
>>>>>>                 break
       
    1:     def test_keys(self):
>>>>>>         widget = self.create()
>>>>>>         keys = widget.keys()
               # XXX
>>>>>>         if not isinstance(widget, Scale):
>>>>>>             self.assertEqual(sorted(keys), sorted(widget.configure()))
>>>>>>         for k in keys:
>>>>>>             widget[k]
               # Test if OPTIONS contains all keys
>>>>>>         if test.test_support.verbose:
>>>>>>             aliases = {
>>>>>>                 'bd': 'borderwidth',
>>>>>>                 'bg': 'background',
>>>>>>                 'fg': 'foreground',
>>>>>>                 'invcmd': 'invalidcommand',
>>>>>>                 'vcmd': 'validatecommand',
                   }
>>>>>>             keys = set(keys)
>>>>>>             expected = set(self.OPTIONS)
>>>>>>             for k in sorted(keys - expected):
>>>>>>                 if not (k in aliases and
>>>>>>                         aliases[k] in keys and
>>>>>>                         aliases[k] in expected):
>>>>>>                     print('%s.OPTIONS doesn\'t contain "%s"' %
>>>>>>                           (self.__class__.__name__, k))
       
       
    2: class StandardOptionsTests(object):
           STANDARD_OPTIONS = (
               'activebackground', 'activeborderwidth', 'activeforeground', 'anchor',
               'background', 'bitmap', 'borderwidth', 'compound', 'cursor',
               'disabledforeground', 'exportselection', 'font', 'foreground',
               'highlightbackground', 'highlightcolor', 'highlightthickness',
               'image', 'insertbackground', 'insertborderwidth',
               'insertofftime', 'insertontime', 'insertwidth',
               'jump', 'justify', 'orient', 'padx', 'pady', 'relief',
               'repeatdelay', 'repeatinterval',
               'selectbackground', 'selectborderwidth', 'selectforeground',
               'setgrid', 'takefocus', 'text', 'textvariable', 'troughcolor',
    1:         'underline', 'wraplength', 'xscrollcommand', 'yscrollcommand',
           )
       
    1:     def test_activebackground(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkColorParam(widget, 'activebackground')
       
    1:     def test_activeborderwidth(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkPixelsParam(widget, 'activeborderwidth',
>>>>>>                               0, 1.3, 2.9, 6, -2, '10p')
       
    1:     def test_activeforeground(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkColorParam(widget, 'activeforeground')
       
    1:     def test_anchor(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkEnumParam(widget, 'anchor',
>>>>>>                 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw', 'center')
       
    1:     def test_background(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkColorParam(widget, 'background')
>>>>>>         if 'bg' in self.OPTIONS:
>>>>>>             self.checkColorParam(widget, 'bg')
       
    1:     def test_bitmap(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkParam(widget, 'bitmap', 'questhead')
>>>>>>         self.checkParam(widget, 'bitmap', 'gray50')
>>>>>>         filename = test.test_support.findfile('python.xbm', subdir='imghdrdata')
>>>>>>         self.checkParam(widget, 'bitmap', '@' + filename)
               # Cocoa Tk widgets don't detect invalid -bitmap values
               # See https://core.tcl.tk/tk/info/31cd33dbf0
>>>>>>         if not ('aqua' in self.root.tk.call('tk', 'windowingsystem') and
>>>>>>                 'AppKit' in self.root.winfo_server()):
>>>>>>             self.checkInvalidParam(widget, 'bitmap', 'spam',
>>>>>>                     errmsg='bitmap "spam" not defined')
       
    1:     def test_borderwidth(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkPixelsParam(widget, 'borderwidth',
>>>>>>                               0, 1.3, 2.6, 6, -2, '10p')
>>>>>>         if 'bd' in self.OPTIONS:
>>>>>>             self.checkPixelsParam(widget, 'bd', 0, 1.3, 2.6, 6, -2, '10p')
       
    1:     def test_compound(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkEnumParam(widget, 'compound',
>>>>>>                 'bottom', 'center', 'left', 'none', 'right', 'top')
       
    1:     def test_cursor(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkCursorParam(widget, 'cursor')
       
    1:     def test_disabledforeground(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkColorParam(widget, 'disabledforeground')
       
    1:     def test_exportselection(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkBooleanParam(widget, 'exportselection')
       
    1:     def test_font(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkParam(widget, 'font',
>>>>>>                         '-Adobe-Helvetica-Medium-R-Normal--*-120-*-*-*-*-*-*')
>>>>>>         self.checkInvalidParam(widget, 'font', '',
>>>>>>                                errmsg='font "" doesn\'t exist')
       
    1:     def test_foreground(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkColorParam(widget, 'foreground')
>>>>>>         if 'fg' in self.OPTIONS:
>>>>>>             self.checkColorParam(widget, 'fg')
       
    1:     def test_highlightbackground(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkColorParam(widget, 'highlightbackground')
       
    1:     def test_highlightcolor(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkColorParam(widget, 'highlightcolor')
       
    1:     def test_highlightthickness(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkPixelsParam(widget, 'highlightthickness',
>>>>>>                               0, 1.3, 2.6, 6, '10p')
>>>>>>         self.checkParam(widget, 'highlightthickness', -2, expected=0,
>>>>>>                         conv=self._conv_pixels)
       
    1:     @unittest.skipIf(sys.platform == 'darwin',
    1:                      'crashes with Cocoa Tk (issue19733)')
           def test_image(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkImageParam(widget, 'image')
       
    1:     def test_insertbackground(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkColorParam(widget, 'insertbackground')
       
    1:     def test_insertborderwidth(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkPixelsParam(widget, 'insertborderwidth',
>>>>>>                               0, 1.3, 2.6, 6, -2, '10p')
       
    1:     def test_insertofftime(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkIntegerParam(widget, 'insertofftime', 100)
       
    1:     def test_insertontime(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkIntegerParam(widget, 'insertontime', 100)
       
    1:     def test_insertwidth(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkPixelsParam(widget, 'insertwidth', 1.3, 2.6, -2, '10p')
       
    1:     def test_jump(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkBooleanParam(widget, 'jump')
       
    1:     def test_justify(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkEnumParam(widget, 'justify', 'left', 'right', 'center',
>>>>>>                 errmsg='bad justification "{}": must be '
                              'left, right, or center')
>>>>>>         self.checkInvalidParam(widget, 'justify', '',
>>>>>>                 errmsg='ambiguous justification "": must be '
                              'left, right, or center')
       
    1:     def test_orient(self):
>>>>>>         widget = self.create()
>>>>>>         self.assertEqual(str(widget['orient']), self.default_orient)
>>>>>>         self.checkEnumParam(widget, 'orient', 'horizontal', 'vertical')
       
    1:     def test_padx(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkPixelsParam(widget, 'padx', 3, 4.4, 5.6, -2, '12m',
>>>>>>                               conv=self._conv_pad_pixels)
       
    1:     def test_pady(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkPixelsParam(widget, 'pady', 3, 4.4, 5.6, -2, '12m',
>>>>>>                               conv=self._conv_pad_pixels)
       
    1:     def test_relief(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkReliefParam(widget, 'relief')
       
    1:     def test_repeatdelay(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkIntegerParam(widget, 'repeatdelay', -500, 500)
       
    1:     def test_repeatinterval(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkIntegerParam(widget, 'repeatinterval', -500, 500)
       
    1:     def test_selectbackground(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkColorParam(widget, 'selectbackground')
       
    1:     def test_selectborderwidth(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkPixelsParam(widget, 'selectborderwidth', 1.3, 2.6, -2, '10p')
       
    1:     def test_selectforeground(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkColorParam(widget, 'selectforeground')
       
    1:     def test_setgrid(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkBooleanParam(widget, 'setgrid')
       
    1:     def test_state(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkEnumParam(widget, 'state', 'active', 'disabled', 'normal')
       
    1:     def test_takefocus(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkParams(widget, 'takefocus', '0', '1', '')
       
    1:     def test_text(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkParams(widget, 'text', '', 'any string')
       
    1:     def test_textvariable(self):
>>>>>>         widget = self.create()
>>>>>>         var = tkinter.StringVar(self.root)
>>>>>>         self.checkVariableParam(widget, 'textvariable', var)
       
    1:     def test_troughcolor(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkColorParam(widget, 'troughcolor')
       
    1:     def test_underline(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkIntegerParam(widget, 'underline', 0, 1, 10)
       
    1:     def test_wraplength(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkPixelsParam(widget, 'wraplength', 100)
       
    1:     def test_xscrollcommand(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkCommandParam(widget, 'xscrollcommand')
       
    1:     def test_yscrollcommand(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkCommandParam(widget, 'yscrollcommand')
       
           # non-standard but common options
       
    1:     def test_command(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkCommandParam(widget, 'command')
       
    1:     def test_indicatoron(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkBooleanParam(widget, 'indicatoron')
       
    1:     def test_offrelief(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkReliefParam(widget, 'offrelief')
       
    1:     def test_overrelief(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkReliefParam(widget, 'overrelief')
       
    1:     def test_selectcolor(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkColorParam(widget, 'selectcolor')
       
    1:     def test_selectimage(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkImageParam(widget, 'selectimage')
       
    1:     @requires_tcl(8, 5)
           def test_tristateimage(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkImageParam(widget, 'tristateimage')
       
    1:     @requires_tcl(8, 5)
           def test_tristatevalue(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkParam(widget, 'tristatevalue', 'unknowable')
       
    1:     def test_variable(self):
>>>>>>         widget = self.create()
>>>>>>         var = tkinter.DoubleVar(self.root)
>>>>>>         self.checkVariableParam(widget, 'variable', var)
       
       
    2: class IntegerSizeTests(object):
    1:     def test_height(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkIntegerParam(widget, 'height', 100, -100, 0)
       
    1:     def test_width(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkIntegerParam(widget, 'width', 402, -402, 0)
       
       
    2: class PixelSizeTests(object):
    1:     def test_height(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkPixelsParam(widget, 'height', 100, 101.2, 102.6, -100, 0, '3c')
       
    1:     def test_width(self):
>>>>>>         widget = self.create()
>>>>>>         self.checkPixelsParam(widget, 'width', 402, 403.4, 404.6, -402, 0, '5i')
       
       
    1: def add_standard_options(*source_classes):
           # This decorator adds test_xxx methods from source classes for every xxx
           # option in the OPTIONS class attribute if they are not defined explicitly.
>>>>>>     def decorator(cls):
>>>>>>         for option in cls.OPTIONS:
>>>>>>             methodname = 'test_' + option
>>>>>>             if not hasattr(cls, methodname):
>>>>>>                 for source_class in source_classes:
>>>>>>                     if hasattr(source_class, methodname):
>>>>>>                         setattr(cls, methodname,
>>>>>>                                 getattr(source_class, methodname).im_func)
>>>>>>                         break
                       else:
>>>>>>                     def test(self, option=option):
>>>>>>                         widget = self.create()
>>>>>>                         widget[option]
>>>>>>                         raise AssertionError('Option "%s" is not tested in %s' %
>>>>>>                                              (option, cls.__name__))
>>>>>>                     test.__name__ = methodname
>>>>>>                     setattr(cls, methodname, test)
>>>>>>         return cls
>>>>>>     return decorator
       
    1: def setUpModule():
>>>>>>     if test.test_support.verbose:
>>>>>>         tcl = tkinter.Tcl()
>>>>>>         print 'patchlevel =', tcl.call('info', 'patchlevel')
