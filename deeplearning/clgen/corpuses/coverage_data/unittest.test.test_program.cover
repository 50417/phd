    1: from cStringIO import StringIO
       
    1: import os
    1: import sys
    1: import unittest
    1: import unittest.test
       
       
    2: class Test_TestProgram(unittest.TestCase):
       
    1:     def test_discovery_from_dotted_path(self):
    1:         loader = unittest.TestLoader()
       
    1:         tests = [self]
    1:         expectedPath = os.path.abspath(os.path.dirname(unittest.test.__file__))
       
    1:         self.wasRun = False
    1:         def _find_tests(start_dir, pattern):
    1:             self.wasRun = True
    1:             self.assertEqual(start_dir, expectedPath)
    1:             return tests
    1:         loader._find_tests = _find_tests
    1:         suite = loader.discover('unittest.test')
    1:         self.assertTrue(self.wasRun)
    1:         self.assertEqual(suite._tests, tests)
       
           # Horrible white box test
    1:     def testNoExit(self):
    1:         result = object()
    1:         test = object()
       
    2:         class FakeRunner(object):
    1:             def run(self, test):
    1:                 self.test = test
    1:                 return result
       
    1:         runner = FakeRunner()
       
    1:         oldParseArgs = unittest.TestProgram.parseArgs
    1:         def restoreParseArgs():
    1:             unittest.TestProgram.parseArgs = oldParseArgs
    2:         unittest.TestProgram.parseArgs = lambda *args: None
    1:         self.addCleanup(restoreParseArgs)
       
    1:         def removeTest():
    1:             del unittest.TestProgram.test
    1:         unittest.TestProgram.test = test
    1:         self.addCleanup(removeTest)
       
    1:         program = unittest.TestProgram(testRunner=runner, exit=False, verbosity=2)
       
    1:         self.assertEqual(program.result, result)
    1:         self.assertEqual(runner.test, test)
    1:         self.assertEqual(program.verbosity, 2)
       
    2:     class FooBar(unittest.TestCase):
    1:         def testPass(self):
    3:             assert True
    1:         def testFail(self):
    3:             assert False
       
    2:     class FooBarLoader(unittest.TestLoader):
    1:         """Test loader that returns a suite containing FooBar."""
    1:         def loadTestsFromModule(self, module):
    3:             return self.suiteClass(
    3:                 [self.loadTestsFromTestCase(Test_TestProgram.FooBar)])
       
       
    1:     def test_NonExit(self):
    1:         program = unittest.main(exit=False,
    1:                                 argv=["foobar"],
    1:                                 testRunner=unittest.TextTestRunner(stream=StringIO()),
    1:                                 testLoader=self.FooBarLoader())
    1:         self.assertTrue(hasattr(program, 'result'))
       
       
    1:     def test_Exit(self):
    1:         self.assertRaises(
    1:             SystemExit,
    1:             unittest.main,
    1:             argv=["foobar"],
    1:             testRunner=unittest.TextTestRunner(stream=StringIO()),
    1:             exit=True,
    1:             testLoader=self.FooBarLoader())
       
       
    1:     def test_ExitAsDefault(self):
    1:         self.assertRaises(
    1:             SystemExit,
    1:             unittest.main,
    1:             argv=["foobar"],
    1:             testRunner=unittest.TextTestRunner(stream=StringIO()),
    1:             testLoader=self.FooBarLoader())
       
       
    2: class InitialisableProgram(unittest.TestProgram):
    1:     exit = False
    1:     result = None
    1:     verbosity = 1
    1:     defaultTest = None
    1:     testRunner = None
    1:     testLoader = unittest.defaultTestLoader
    1:     progName = 'test'
    1:     test = 'test'
    1:     def __init__(self, *args):
    7:         pass
       
    1: RESULT = object()
       
    2: class FakeRunner(object):
    1:     initArgs = None
    1:     test = None
    1:     raiseError = False
       
    1:     def __init__(self, **kwargs):
    5:         FakeRunner.initArgs = kwargs
    5:         if FakeRunner.raiseError:
    1:             FakeRunner.raiseError = False
    1:             raise TypeError
       
    1:     def run(self, test):
    4:         FakeRunner.test = test
    4:         return RESULT
       
    2: class TestCommandLineArgs(unittest.TestCase):
       
    1:     def setUp(self):
    7:         self.program = InitialisableProgram()
   26:         self.program.createTests = lambda: None
    7:         FakeRunner.initArgs = None
    7:         FakeRunner.test = None
    7:         FakeRunner.raiseError = False
       
    1:     def testHelpAndUnknown(self):
    1:         program = self.program
    1:         def usageExit(msg=None):
    4:             program.msg = msg
    4:             program.exit = True
    1:         program.usageExit = usageExit
       
    4:         for opt in '-h', '-H', '--help':
    3:             program.exit = False
    3:             program.parseArgs([None, opt])
    3:             self.assertTrue(program.exit)
    3:             self.assertIsNone(program.msg)
       
    1:         program.parseArgs([None, '-$'])
    1:         self.assertTrue(program.exit)
    1:         self.assertIsNotNone(program.msg)
       
    1:     def testVerbosity(self):
    1:         program = self.program
       
    3:         for opt in '-q', '--quiet':
    2:             program.verbosity = 1
    2:             program.parseArgs([None, opt])
    2:             self.assertEqual(program.verbosity, 0)
       
    3:         for opt in '-v', '--verbose':
    2:             program.verbosity = 1
    2:             program.parseArgs([None, opt])
    2:             self.assertEqual(program.verbosity, 2)
       
    1:     def testBufferCatchFailfast(self):
    1:         program = self.program
    1:         for arg, attr in (('buffer', 'buffer'), ('failfast', 'failfast'),
    4:                       ('catch', 'catchbreak')):
    3:             if attr == 'catch' and not hasInstallHandler:
>>>>>>                 continue
       
    3:             short_opt = '-%s' % arg[0]
    3:             long_opt = '--%s' % arg
    9:             for opt in short_opt, long_opt:
    6:                 setattr(program, attr, None)
       
    6:                 program.parseArgs([None, opt])
    6:                 self.assertTrue(getattr(program, attr))
       
    9:             for opt in short_opt, long_opt:
    6:                 not_none = object()
    6:                 setattr(program, attr, not_none)
       
    6:                 program.parseArgs([None, opt])
    6:                 self.assertEqual(getattr(program, attr), not_none)
       
    1:     def testRunTestsRunnerClass(self):
    1:         program = self.program
       
    1:         program.testRunner = FakeRunner
    1:         program.verbosity = 'verbosity'
    1:         program.failfast = 'failfast'
    1:         program.buffer = 'buffer'
       
    1:         program.runTests()
       
    1:         self.assertEqual(FakeRunner.initArgs, {'verbosity': 'verbosity',
    1:                                                 'failfast': 'failfast',
    1:                                                 'buffer': 'buffer'})
    1:         self.assertEqual(FakeRunner.test, 'test')
    1:         self.assertIs(program.result, RESULT)
       
    1:     def testRunTestsRunnerInstance(self):
    1:         program = self.program
       
    1:         program.testRunner = FakeRunner()
    1:         FakeRunner.initArgs = None
       
    1:         program.runTests()
       
               # A new FakeRunner should not have been instantiated
    1:         self.assertIsNone(FakeRunner.initArgs)
       
    1:         self.assertEqual(FakeRunner.test, 'test')
    1:         self.assertIs(program.result, RESULT)
       
    1:     def testRunTestsOldRunnerClass(self):
    1:         program = self.program
       
    1:         FakeRunner.raiseError = True
    1:         program.testRunner = FakeRunner
    1:         program.verbosity = 'verbosity'
    1:         program.failfast = 'failfast'
    1:         program.buffer = 'buffer'
    1:         program.test = 'test'
       
    1:         program.runTests()
       
               # If initializing raises a type error it should be retried
               # without the new keyword arguments
    1:         self.assertEqual(FakeRunner.initArgs, {})
    1:         self.assertEqual(FakeRunner.test, 'test')
    1:         self.assertIs(program.result, RESULT)
       
    1:     def testCatchBreakInstallsHandler(self):
    1:         module = sys.modules['unittest.main']
    1:         original = module.installHandler
    1:         def restore():
    1:             module.installHandler = original
    1:         self.addCleanup(restore)
       
    1:         self.installed = False
    1:         def fakeInstallHandler():
    1:             self.installed = True
    1:         module.installHandler = fakeInstallHandler
       
    1:         program = self.program
    1:         program.catchbreak = True
       
    1:         program.testRunner = FakeRunner
       
    1:         program.runTests()
    1:         self.assertTrue(self.installed)
       
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
