       # -*- coding: iso-8859-1 -*-
       # pysqlite2/dbapi2.py: the DB-API 2.0 interface
       #
       # Copyright (C) 2004-2005 Gerhard Häring <gh@ghaering.de>
       #
       # This file is part of pysqlite.
       #
       # This software is provided 'as-is', without any express or implied
       # warranty.  In no event will the authors be held liable for any damages
       # arising from the use of this software.
       #
       # Permission is granted to anyone to use this software for any purpose,
       # including commercial applications, and to alter it and redistribute it
       # freely, subject to the following restrictions:
       #
       # 1. The origin of this software must not be misrepresented; you must not
       #    claim that you wrote the original software. If you use this software
       #    in a product, an acknowledgment in the product documentation would be
       #    appreciated but is not required.
       # 2. Altered source versions must be plainly marked as such, and must not be
       #    misrepresented as being the original software.
       # 3. This notice may not be removed or altered from any source distribution.
       
    1: import collections
    1: import datetime
    1: import time
       
    1: from _sqlite3 import *
       
    1: paramstyle = "qmark"
       
    1: threadsafety = 1
       
    1: apilevel = "2.0"
       
    1: Date = datetime.date
       
    1: Time = datetime.time
       
    1: Timestamp = datetime.datetime
       
    1: def DateFromTicks(ticks):
    1:     return Date(*time.localtime(ticks)[:3])
       
    1: def TimeFromTicks(ticks):
    1:     return Time(*time.localtime(ticks)[3:6])
       
    1: def TimestampFromTicks(ticks):
    1:     return Timestamp(*time.localtime(ticks)[:6])
       
    4: version_info = tuple([int(x) for x in version.split(".")])
    5: sqlite_version_info = tuple([int(x) for x in sqlite_version.split(".")])
       
    1: Binary = buffer
    1: collections.Sequence.register(Row)
       
    1: def register_adapters_and_converters():
    1:     def adapt_date(val):
    1:         return val.isoformat()
       
    1:     def adapt_datetime(val):
    4:         return val.isoformat(" ")
       
    1:     def convert_date(val):
    1:         return datetime.date(*map(int, val.split("-")))
       
    1:     def convert_timestamp(val):
    7:         datepart, timepart = val.split(" ")
    7:         year, month, day = map(int, datepart.split("-"))
    7:         timepart_full = timepart.split(".")
    7:         hours, minutes, seconds = map(int, timepart_full[0].split(":"))
    7:         if len(timepart_full) == 2:
    5:             microseconds = int('{:0<6.6}'.format(timepart_full[1].decode()))
               else:
    2:             microseconds = 0
       
    7:         val = datetime.datetime(year, month, day, hours, minutes, seconds, microseconds)
    7:         return val
       
       
    1:     register_adapter(datetime.date, adapt_date)
    1:     register_adapter(datetime.datetime, adapt_datetime)
    1:     register_converter("date", convert_date)
    1:     register_converter("timestamp", convert_timestamp)
       
    1: register_adapters_and_converters()
       
       # Clean up namespace
       
    1: del(register_adapters_and_converters)
