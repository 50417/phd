       
    1: import unittest
    1: from test import test_support
    1: import textwrap
       
    2: class ComplexArgsTestCase(unittest.TestCase):
       
    1:     def check(self, func, expected, *args):
   22:         self.assertEqual(func(*args), expected)
       
           # These functions are tested below as lambdas too.  If you add a
           # function test, also add a similar lambda test.
       
           # Functions are wrapped in "exec" statements in order to
           # silence Py3k warnings.
       
    1:     def test_func_parens_no_unpacking(self):
    1:         exec textwrap.dedent("""
               def f(((((x))))): return x
               self.check(f, 1, 1)
               # Inner parens are elided, same as: f(x,)
               def f(((x)),): return x
               self.check(f, 2, 2)
    1:         """)
       
    1:     def test_func_1(self):
    1:         exec textwrap.dedent("""
               def f(((((x),)))): return x
               self.check(f, 3, (3,))
               def f(((((x)),))): return x
               self.check(f, 4, (4,))
               def f(((((x))),)): return x
               self.check(f, 5, (5,))
               def f(((x),)): return x
               self.check(f, 6, (6,))
    1:         """)
       
    1:     def test_func_2(self):
    1:         exec textwrap.dedent("""
               def f(((((x)),),)): return x
               self.check(f, 2, ((2,),))
    1:         """)
       
    1:     def test_func_3(self):
    1:         exec textwrap.dedent("""
               def f((((((x)),),),)): return x
               self.check(f, 3, (((3,),),))
    1:         """)
       
    1:     def test_func_complex(self):
    1:         exec textwrap.dedent("""
               def f((((((x)),),),), a, b, c): return x, a, b, c
               self.check(f, (3, 9, 8, 7), (((3,),),), 9, 8, 7)
       
               def f(((((((x)),)),),), a, b, c): return x, a, b, c
               self.check(f, (3, 9, 8, 7), (((3,),),), 9, 8, 7)
       
               def f(a, b, c, ((((((x)),)),),)): return a, b, c, x
               self.check(f, (9, 8, 7, 3), 9, 8, 7, (((3,),),))
    1:         """)
       
           # Duplicate the tests above, but for lambda.  If you add a lambda test,
           # also add a similar function test above.
       
    1:     def test_lambda_parens_no_unpacking(self):
    1:         exec textwrap.dedent("""
               f = lambda (((((x))))): x
               self.check(f, 1, 1)
               # Inner parens are elided, same as: f(x,)
               f = lambda ((x)),: x
               self.check(f, 2, 2)
    1:         """)
       
    1:     def test_lambda_1(self):
    1:         exec textwrap.dedent("""
               f = lambda (((((x),)))): x
               self.check(f, 3, (3,))
               f = lambda (((((x)),))): x
               self.check(f, 4, (4,))
               f = lambda (((((x))),)): x
               self.check(f, 5, (5,))
               f = lambda (((x),)): x
               self.check(f, 6, (6,))
    1:         """)
       
    1:     def test_lambda_2(self):
    1:         exec textwrap.dedent("""
               f = lambda (((((x)),),)): x
               self.check(f, 2, ((2,),))
    1:         """)
       
    1:     def test_lambda_3(self):
    1:         exec textwrap.dedent("""
               f = lambda ((((((x)),),),)): x
               self.check(f, 3, (((3,),),))
    1:         """)
       
    1:     def test_lambda_complex(self):
    1:         exec textwrap.dedent("""
               f = lambda (((((x)),),),), a, b, c: (x, a, b, c)
               self.check(f, (3, 9, 8, 7), (((3,),),), 9, 8, 7)
       
               f = lambda ((((((x)),)),),), a, b, c: (x, a, b, c)
               self.check(f, (3, 9, 8, 7), (((3,),),), 9, 8, 7)
       
               f = lambda a, b, c, ((((((x)),)),),): (a, b, c, x)
               self.check(f, (9, 8, 7, 3), 9, 8, 7, (((3,),),))
    1:         """)
       
       
    1: def test_main():
    1:     with test_support.check_py3k_warnings(
    1:             ("tuple parameter unpacking has been removed", SyntaxWarning),
    1:             ("parenthesized argument names are invalid", SyntaxWarning)):
    1:         test_support.run_unittest(ComplexArgsTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
