       """Stuff to parse WAVE files.
       
       Usage.
       
       Reading WAVE files:
             f = wave.open(file, 'r')
       where file is either the name of a file or an open file pointer.
       The open file pointer must have methods read(), seek(), and close().
       When the setpos() and rewind() methods are not used, the seek()
       method is not  necessary.
       
       This returns an instance of a class with the following public methods:
             getnchannels()  -- returns number of audio channels (1 for
                                mono, 2 for stereo)
             getsampwidth()  -- returns sample width in bytes
             getframerate()  -- returns sampling frequency
             getnframes()    -- returns number of audio frames
             getcomptype()   -- returns compression type ('NONE' for linear samples)
             getcompname()   -- returns human-readable version of
                                compression type ('not compressed' linear samples)
             getparams()     -- returns a tuple consisting of all of the
                                above in the above order
             getmarkers()    -- returns None (for compatibility with the
                                aifc module)
             getmark(id)     -- raises an error since the mark does not
                                exist (for compatibility with the aifc module)
             readframes(n)   -- returns at most n frames of audio
             rewind()        -- rewind to the beginning of the audio stream
             setpos(pos)     -- seek to the specified position
             tell()          -- return the current position
             close()         -- close the instance (make it unusable)
       The position returned by tell() and the position given to setpos()
       are compatible and have nothing to do with the actual position in the
       file.
       The close() method is called automatically when the class instance
       is destroyed.
       
       Writing WAVE files:
             f = wave.open(file, 'w')
       where file is either the name of a file or an open file pointer.
       The open file pointer must have methods write(), tell(), seek(), and
       close().
       
       This returns an instance of a class with the following public methods:
             setnchannels(n) -- set the number of channels
             setsampwidth(n) -- set the sample width
             setframerate(n) -- set the frame rate
             setnframes(n)   -- set the number of frames
             setcomptype(type, name)
                             -- set the compression type and the
                                human-readable compression type
             setparams(tuple)
                             -- set all parameters at once
             tell()          -- return current position in output file
             writeframesraw(data)
                             -- write audio frames without pathing up the
                                file header
             writeframes(data)
                             -- write audio frames and patch up the file header
             close()         -- patch up the file header and close the
                                output file
       You should set the parameters before the first writeframesraw or
       writeframes.  The total number of frames does not need to be set,
       but when it is set to the correct value, the header does not have to
       be patched up.
       It is best to first set all parameters, perhaps possibly the
       compression type, and then write audio frames using writeframesraw.
       When all frames have been written, either call writeframes('') or
       close() to patch up the sizes in the header.
       The close() method is called automatically when the class instance
       is destroyed.
    1: """
       
    1: import __builtin__
       
    1: __all__ = ["open", "openfp", "Error"]
       
    2: class Error(Exception):
    1:     pass
       
    1: WAVE_FORMAT_PCM = 0x0001
       
    1: _array_fmts = None, 'b', 'h', None, 'i'
       
    1: import struct
    1: import sys
    1: from chunk import Chunk
       
    1: def _byteswap3(data):
>>>>>>     ba = bytearray(data)
>>>>>>     ba[::3] = data[2::3]
>>>>>>     ba[2::3] = data[::3]
>>>>>>     return bytes(ba)
       
    2: class Wave_read:
           """Variables used in this class:
       
           These variables are available to the user though appropriate
           methods of this class:
           _file -- the open file with methods read(), close(), and seek()
                     set through the __init__() method
           _nchannels -- the number of audio channels
                     available through the getnchannels() method
           _nframes -- the number of audio frames
                     available through the getnframes() method
           _sampwidth -- the number of bytes per audio sample
                     available through the getsampwidth() method
           _framerate -- the sampling frequency
                     available through the getframerate() method
           _comptype -- the AIFF-C compression type ('NONE' if AIFF)
                     available through the getcomptype() method
           _compname -- the human-readable AIFF-C compression type
                     available through the getcomptype() method
           _soundpos -- the position in the audio stream
                     available through the tell() method, set through the
                     setpos() method
       
           These variables are used internally only:
           _fmt_chunk_read -- 1 iff the FMT chunk has been read
           _data_seek_needed -- 1 iff positioned correctly in audio
                     file for readframes()
           _data_chunk -- instantiation of a chunk class for the DATA chunk
           _framesize -- size of one frame in the file
    1:     """
       
    1:     def initfp(self, file):
   44:         self._convert = None
   44:         self._soundpos = 0
   44:         self._file = Chunk(file, bigendian = 0)
   44:         if self._file.getname() != 'RIFF':
>>>>>>             raise Error, 'file does not start with RIFF id'
   44:         if self._file.read(4) != 'WAVE':
>>>>>>             raise Error, 'not a WAVE file'
   44:         self._fmt_chunk_read = 0
   44:         self._data_chunk = None
   44:         while 1:
  108:             self._data_seek_needed = 1
  108:             try:
  108:                 chunk = Chunk(self._file, bigendian = 0)
>>>>>>             except EOFError:
>>>>>>                 break
  108:             chunkname = chunk.getname()
  108:             if chunkname == 'fmt ':
   44:                 self._read_fmt_chunk(chunk)
   44:                 self._fmt_chunk_read = 1
   64:             elif chunkname == 'data':
   44:                 if not self._fmt_chunk_read:
>>>>>>                     raise Error, 'data chunk before fmt chunk'
   44:                 self._data_chunk = chunk
   44:                 self._nframes = chunk.chunksize // self._framesize
   44:                 self._data_seek_needed = 0
   44:                 break
   64:             chunk.skip()
   44:         if not self._fmt_chunk_read or not self._data_chunk:
>>>>>>             raise Error, 'fmt chunk and/or data chunk missing'
       
    1:     def __init__(self, f):
   44:         self._i_opened_the_file = None
   44:         if isinstance(f, basestring):
   20:             f = __builtin__.open(f, 'rb')
   20:             self._i_opened_the_file = f
               # else, assume it is an open file object already
   44:         try:
   44:             self.initfp(f)
>>>>>>         except:
>>>>>>             if self._i_opened_the_file:
>>>>>>                 f.close()
>>>>>>             raise
       
    1:     def __del__(self):
   44:         self.close()
           #
           # User visible methods.
           #
    1:     def getfp(self):
>>>>>>         return self._file
       
    1:     def rewind(self):
    8:         self._data_seek_needed = 1
    8:         self._soundpos = 0
       
    1:     def close(self):
   92:         self._file = None
   92:         file = self._i_opened_the_file
   92:         if file:
   20:             self._i_opened_the_file = None
   20:             file.close()
       
    1:     def tell(self):
   12:         return self._soundpos
       
    1:     def getnchannels(self):
   44:         return self._nchannels
       
    1:     def getnframes(self):
   60:         return self._nframes
       
    1:     def getsampwidth(self):
   44:         return self._sampwidth
       
    1:     def getframerate(self):
   44:         return self._framerate
       
    1:     def getcomptype(self):
   20:         return self._comptype
       
    1:     def getcompname(self):
   20:         return self._compname
       
    1:     def getparams(self):
   16:         return self.getnchannels(), self.getsampwidth(), \
   16:                self.getframerate(), self.getnframes(), \
   16:                self.getcomptype(), self.getcompname()
       
    1:     def getmarkers(self):
>>>>>>         return None
       
    1:     def getmark(self, id):
>>>>>>         raise Error, 'no marks'
       
    1:     def setpos(self, pos):
   16:         if pos < 0 or pos > self._nframes:
    8:             raise Error, 'position not in range'
    8:         self._soundpos = pos
    8:         self._data_seek_needed = 1
       
    1:     def readframes(self, nframes):
  380:         if self._data_seek_needed:
   16:             self._data_chunk.seek(0, 0)
   16:             pos = self._soundpos * self._framesize
   16:             if pos:
    4:                 self._data_chunk.seek(pos, 0)
   16:             self._data_seek_needed = 0
  380:         if nframes == 0:
    4:             return ''
  376:         if self._sampwidth in (2, 4) and sys.byteorder == 'big':
                   # unfortunately the fromfile() method does not take
                   # something that only looks like a file object, so
                   # we have to reach into the innards of the chunk object
>>>>>>             import array
>>>>>>             chunk = self._data_chunk
>>>>>>             data = array.array(_array_fmts[self._sampwidth])
>>>>>>             assert data.itemsize == self._sampwidth
>>>>>>             nitems = nframes * self._nchannels
>>>>>>             if nitems * self._sampwidth > chunk.chunksize - chunk.size_read:
>>>>>>                 nitems = (chunk.chunksize - chunk.size_read) // self._sampwidth
>>>>>>             data.fromfile(chunk.file.file, nitems)
                   # "tell" data chunk how much was read
>>>>>>             chunk.size_read = chunk.size_read + nitems * self._sampwidth
                   # do the same for the outermost chunk
>>>>>>             chunk = chunk.file
>>>>>>             chunk.size_read = chunk.size_read + nitems * self._sampwidth
>>>>>>             data.byteswap()
>>>>>>             data = data.tostring()
               else:
  376:             data = self._data_chunk.read(nframes * self._framesize)
  376:             if self._sampwidth == 3 and sys.byteorder == 'big':
>>>>>>                 data = _byteswap3(data)
  376:         if self._convert and data:
>>>>>>             data = self._convert(data)
  376:         self._soundpos = self._soundpos + len(data) // (self._nchannels * self._sampwidth)
  376:         return data
       
           #
           # Internal methods.
           #
       
    1:     def _read_fmt_chunk(self, chunk):
   44:         wFormatTag, self._nchannels, self._framerate, dwAvgBytesPerSec, wBlockAlign = struct.unpack('<HHLLH', chunk.read(14))
   44:         if wFormatTag == WAVE_FORMAT_PCM:
   44:             sampwidth = struct.unpack('<H', chunk.read(2))[0]
   44:             self._sampwidth = (sampwidth + 7) // 8
               else:
>>>>>>             raise Error, 'unknown format: %r' % (wFormatTag,)
   44:         self._framesize = self._nchannels * self._sampwidth
   44:         self._comptype = 'NONE'
   44:         self._compname = 'not compressed'
       
    2: class Wave_write:
           """Variables used in this class:
       
           These variables are user settable through appropriate methods
           of this class:
           _file -- the open file with methods write(), close(), tell(), seek()
                     set through the __init__() method
           _comptype -- the AIFF-C compression type ('NONE' in AIFF)
                     set through the setcomptype() or setparams() method
           _compname -- the human-readable AIFF-C compression type
                     set through the setcomptype() or setparams() method
           _nchannels -- the number of audio channels
                     set through the setnchannels() or setparams() method
           _sampwidth -- the number of bytes per audio sample
                     set through the setsampwidth() or setparams() method
           _framerate -- the sampling frequency
                     set through the setframerate() or setparams() method
           _nframes -- the number of audio frames written to the header
                     set through the setnframes() or setparams() method
       
           These variables are used internally only:
           _datalength -- the size of the audio samples written to the header
           _nframeswritten -- the number of frames actually written
           _datawritten -- the size of the audio samples actually written
    1:     """
       
    1:     def __init__(self, f):
   32:         self._i_opened_the_file = None
   32:         if isinstance(f, basestring):
   16:             f = __builtin__.open(f, 'wb')
   16:             self._i_opened_the_file = f
   32:         try:
   32:             self.initfp(f)
>>>>>>         except:
>>>>>>             if self._i_opened_the_file:
>>>>>>                 f.close()
>>>>>>             raise
       
    1:     def initfp(self, file):
   32:         self._file = file
   32:         self._convert = None
   32:         self._nchannels = 0
   32:         self._sampwidth = 0
   32:         self._framerate = 0
   32:         self._nframes = 0
   32:         self._nframeswritten = 0
   32:         self._datawritten = 0
   32:         self._datalength = 0
   32:         self._headerwritten = False
       
    1:     def __del__(self):
   28:         self.close()
       
           #
           # User visible methods.
           #
    1:     def setnchannels(self, nchannels):
   28:         if self._datawritten:
>>>>>>             raise Error, 'cannot change parameters after starting to write'
   28:         if nchannels < 1:
>>>>>>             raise Error, 'bad # of channels'
   28:         self._nchannels = nchannels
       
    1:     def getnchannels(self):
    4:         if not self._nchannels:
>>>>>>             raise Error, 'number of channels not set'
    4:         return self._nchannels
       
    1:     def setsampwidth(self, sampwidth):
   28:         if self._datawritten:
>>>>>>             raise Error, 'cannot change parameters after starting to write'
   28:         if sampwidth < 1 or sampwidth > 4:
>>>>>>             raise Error, 'bad sample width'
   28:         self._sampwidth = sampwidth
       
    1:     def getsampwidth(self):
    4:         if not self._sampwidth:
>>>>>>             raise Error, 'sample width not set'
    4:         return self._sampwidth
       
    1:     def setframerate(self, framerate):
   28:         if self._datawritten:
>>>>>>             raise Error, 'cannot change parameters after starting to write'
   28:         if framerate <= 0:
>>>>>>             raise Error, 'bad frame rate'
   28:         self._framerate = framerate
       
    1:     def getframerate(self):
    4:         if not self._framerate:
>>>>>>             raise Error, 'frame rate not set'
    4:         return self._framerate
       
    1:     def setnframes(self, nframes):
   28:         if self._datawritten:
>>>>>>             raise Error, 'cannot change parameters after starting to write'
   28:         self._nframes = nframes
       
    1:     def getnframes(self):
    4:         return self._nframeswritten
       
    1:     def setcomptype(self, comptype, compname):
   28:         if self._datawritten:
>>>>>>             raise Error, 'cannot change parameters after starting to write'
   28:         if comptype not in ('NONE',):
>>>>>>             raise Error, 'unsupported compression type'
   28:         self._comptype = comptype
   28:         self._compname = compname
       
    1:     def getcomptype(self):
    4:         return self._comptype
       
    1:     def getcompname(self):
    4:         return self._compname
       
    1:     def setparams(self, params):
    4:         nchannels, sampwidth, framerate, nframes, comptype, compname = params
    4:         if self._datawritten:
>>>>>>             raise Error, 'cannot change parameters after starting to write'
    4:         self.setnchannels(nchannels)
    4:         self.setsampwidth(sampwidth)
    4:         self.setframerate(framerate)
    4:         self.setnframes(nframes)
    4:         self.setcomptype(comptype, compname)
       
    1:     def getparams(self):
    4:         if not self._nchannels or not self._sampwidth or not self._framerate:
>>>>>>             raise Error, 'not all parameters set'
    4:         return self._nchannels, self._sampwidth, self._framerate, \
    4:               self._nframes, self._comptype, self._compname
       
    1:     def setmark(self, id, pos, name):
>>>>>>         raise Error, 'setmark() not supported'
       
    1:     def getmark(self, id):
>>>>>>         raise Error, 'no marks'
       
    1:     def getmarkers(self):
>>>>>>         return None
       
    1:     def tell(self):
>>>>>>         return self._nframeswritten
       
    1:     def writeframesraw(self, data):
  352:         self._ensure_header_written(len(data))
  352:         nframes = len(data) // (self._sampwidth * self._nchannels)
  352:         if self._convert:
>>>>>>             data = self._convert(data)
  352:         if self._sampwidth in (2, 4) and sys.byteorder == 'big':
>>>>>>             import array
>>>>>>             a = array.array(_array_fmts[self._sampwidth])
>>>>>>             a.fromstring(data)
>>>>>>             data = a
>>>>>>             assert data.itemsize == self._sampwidth
>>>>>>             data.byteswap()
>>>>>>             data.tofile(self._file)
>>>>>>             self._datawritten = self._datawritten + len(data) * self._sampwidth
               else:
  352:             if self._sampwidth == 3 and sys.byteorder == 'big':
>>>>>>                 data = _byteswap3(data)
  352:             self._file.write(data)
  352:             self._datawritten = self._datawritten + len(data)
  352:         self._nframeswritten = self._nframeswritten + nframes
       
    1:     def writeframes(self, data):
  352:         self.writeframesraw(data)
  352:         if self._datalength != self._datawritten:
  340:             self._patchheader()
       
    1:     def close(self):
   92:         try:
   92:             if self._file:
   32:                 self._ensure_header_written(0)
   28:                 if self._datalength != self._datawritten:
>>>>>>                     self._patchheader()
   28:                 self._file.flush()
               finally:
   92:             self._file = None
   92:             file = self._i_opened_the_file
   92:             if file:
   16:                 self._i_opened_the_file = None
   16:                 file.close()
       
           #
           # Internal methods.
           #
       
    1:     def _ensure_header_written(self, datasize):
  384:         if not self._headerwritten:
   32:             if not self._nchannels:
    4:                 raise Error, '# channels not specified'
   28:             if not self._sampwidth:
>>>>>>                 raise Error, 'sample width not specified'
   28:             if not self._framerate:
>>>>>>                 raise Error, 'sampling rate not specified'
   28:             self._write_header(datasize)
       
    1:     def _write_header(self, initlength):
   28:         assert not self._headerwritten
   28:         self._file.write('RIFF')
   28:         if not self._nframes:
>>>>>>             self._nframes = initlength / (self._nchannels * self._sampwidth)
   28:         self._datalength = self._nframes * self._nchannels * self._sampwidth
   28:         self._form_length_pos = self._file.tell()
   28:         self._file.write(struct.pack('<L4s4sLHHLLHH4s',
   28:             36 + self._datalength, 'WAVE', 'fmt ', 16,
   28:             WAVE_FORMAT_PCM, self._nchannels, self._framerate,
   28:             self._nchannels * self._framerate * self._sampwidth,
   28:             self._nchannels * self._sampwidth,
   28:             self._sampwidth * 8, 'data'))
   28:         self._data_length_pos = self._file.tell()
   28:         self._file.write(struct.pack('<L', self._datalength))
   28:         self._headerwritten = True
       
    1:     def _patchheader(self):
  340:         assert self._headerwritten
  340:         if self._datawritten == self._datalength:
>>>>>>             return
  340:         curpos = self._file.tell()
  340:         self._file.seek(self._form_length_pos, 0)
  340:         self._file.write(struct.pack('<L', 36 + self._datawritten))
  340:         self._file.seek(self._data_length_pos, 0)
  340:         self._file.write(struct.pack('<L', self._datawritten))
  340:         self._file.seek(curpos, 0)
  340:         self._datalength = self._datawritten
       
    1: def open(f, mode=None):
   76:     if mode is None:
   16:         if hasattr(f, 'mode'):
    4:             mode = f.mode
               else:
   12:             mode = 'rb'
   76:     if mode in ('r', 'rb'):
   44:         return Wave_read(f)
   32:     elif mode in ('w', 'wb'):
   32:         return Wave_write(f)
           else:
>>>>>>         raise Error, "mode must be 'r', 'rb', 'w', or 'wb'"
       
    1: openfp = open # B/W compatibility
