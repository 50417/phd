       """
         Test cases for the repr module
         Nick Mathewson
    1: """
       
    1: import sys
    1: import os
    1: import shutil
    1: import unittest
       
    1: from test.test_support import run_unittest, check_py3k_warnings
    1: from repr import repr as r # Don't shadow builtin repr
    1: from repr import Repr
       
       
    1: def nestedTuple(nesting):
    6:     t = ()
   41:     for i in range(nesting):
   35:         t = (t,)
    6:     return t
       
    2: class ReprTests(unittest.TestCase):
       
    1:     def test_string(self):
    1:         eq = self.assertEqual
    1:         eq(r("abc"), "'abc'")
    1:         eq(r("abcdefghijklmnop"),"'abcdefghijklmnop'")
       
    1:         s = "a"*30+"b"*30
    1:         expected = repr(s)[:13] + "..." + repr(s)[-14:]
    1:         eq(r(s), expected)
       
    1:         eq(r("\"'"), repr("\"'"))
    1:         s = "\""*30+"'"*100
    1:         expected = repr(s)[:13] + "..." + repr(s)[-14:]
    1:         eq(r(s), expected)
       
    1:     def test_tuple(self):
    1:         eq = self.assertEqual
    1:         eq(r((1,)), "(1,)")
       
    1:         t3 = (1, 2, 3)
    1:         eq(r(t3), "(1, 2, 3)")
       
    1:         r2 = Repr()
    1:         r2.maxtuple = 2
    1:         expected = repr(t3)[:-2] + "...)"
    1:         eq(r2.repr(t3), expected)
       
    1:     def test_container(self):
    1:         from array import array
    1:         from collections import deque
       
    1:         eq = self.assertEqual
               # Tuples give up after 6 elements
    1:         eq(r(()), "()")
    1:         eq(r((1,)), "(1,)")
    1:         eq(r((1, 2, 3)), "(1, 2, 3)")
    1:         eq(r((1, 2, 3, 4, 5, 6)), "(1, 2, 3, 4, 5, 6)")
    1:         eq(r((1, 2, 3, 4, 5, 6, 7)), "(1, 2, 3, 4, 5, 6, ...)")
       
               # Lists give up after 6 as well
    1:         eq(r([]), "[]")
    1:         eq(r([1]), "[1]")
    1:         eq(r([1, 2, 3]), "[1, 2, 3]")
    1:         eq(r([1, 2, 3, 4, 5, 6]), "[1, 2, 3, 4, 5, 6]")
    1:         eq(r([1, 2, 3, 4, 5, 6, 7]), "[1, 2, 3, 4, 5, 6, ...]")
       
               # Sets give up after 6 as well
    1:         eq(r(set([])), "set([])")
    1:         eq(r(set([1])), "set([1])")
    1:         eq(r(set([1, 2, 3])), "set([1, 2, 3])")
    1:         eq(r(set([1, 2, 3, 4, 5, 6])), "set([1, 2, 3, 4, 5, 6])")
    1:         eq(r(set([1, 2, 3, 4, 5, 6, 7])), "set([1, 2, 3, 4, 5, 6, ...])")
       
               # Frozensets give up after 6 as well
    1:         eq(r(frozenset([])), "frozenset([])")
    1:         eq(r(frozenset([1])), "frozenset([1])")
    1:         eq(r(frozenset([1, 2, 3])), "frozenset([1, 2, 3])")
    1:         eq(r(frozenset([1, 2, 3, 4, 5, 6])), "frozenset([1, 2, 3, 4, 5, 6])")
    1:         eq(r(frozenset([1, 2, 3, 4, 5, 6, 7])), "frozenset([1, 2, 3, 4, 5, 6, ...])")
       
               # collections.deque after 6
    1:         eq(r(deque([1, 2, 3, 4, 5, 6, 7])), "deque([1, 2, 3, 4, 5, 6, ...])")
       
               # Dictionaries give up after 4.
    1:         eq(r({}), "{}")
    1:         d = {'alice': 1, 'bob': 2, 'charles': 3, 'dave': 4}
    1:         eq(r(d), "{'alice': 1, 'bob': 2, 'charles': 3, 'dave': 4}")
    1:         d['arthur'] = 1
    1:         eq(r(d), "{'alice': 1, 'arthur': 1, 'bob': 2, 'charles': 3, ...}")
       
               # array.array after 5.
    1:         eq(r(array('i')), "array('i', [])")
    1:         eq(r(array('i', [1])), "array('i', [1])")
    1:         eq(r(array('i', [1, 2])), "array('i', [1, 2])")
    1:         eq(r(array('i', [1, 2, 3])), "array('i', [1, 2, 3])")
    1:         eq(r(array('i', [1, 2, 3, 4])), "array('i', [1, 2, 3, 4])")
    1:         eq(r(array('i', [1, 2, 3, 4, 5])), "array('i', [1, 2, 3, 4, 5])")
    1:         eq(r(array('i', [1, 2, 3, 4, 5, 6])),
    1:                    "array('i', [1, 2, 3, 4, 5, ...])")
       
    1:     def test_numbers(self):
    1:         eq = self.assertEqual
    1:         eq(r(123), repr(123))
    1:         eq(r(123L), repr(123L))
    1:         eq(r(1.0/3), repr(1.0/3))
       
    1:         n = 10L**100
    1:         expected = repr(n)[:18] + "..." + repr(n)[-19:]
    1:         eq(r(n), expected)
       
    1:     def test_instance(self):
    1:         eq = self.assertEqual
    1:         i1 = ClassWithRepr("a")
    1:         eq(r(i1), repr(i1))
       
    1:         i2 = ClassWithRepr("x"*1000)
    1:         expected = repr(i2)[:13] + "..." + repr(i2)[-14:]
    1:         eq(r(i2), expected)
       
    1:         i3 = ClassWithFailingRepr()
    1:         eq(r(i3), ("<ClassWithFailingRepr instance at %x>"%id(i3)))
       
    1:         s = r(ClassWithFailingRepr)
    1:         self.assertTrue(s.startswith("<class "))
    1:         self.assertTrue(s.endswith(">"))
    1:         self.assertTrue(s.find("...") == 8)
       
    1:     def test_file(self):
    1:         fp = open(unittest.__file__)
    1:         self.assertTrue(repr(fp).startswith(
    1:             "<open file %r, mode 'r' at 0x" % unittest.__file__))
    1:         fp.close()
    1:         self.assertTrue(repr(fp).startswith(
    1:             "<closed file %r, mode 'r' at 0x" % unittest.__file__))
       
    1:     def test_lambda(self):
    1:         self.assertTrue(repr(lambda x: x).startswith(
    1:             "<function <lambda"))
               # XXX anonymous functions?  see func_repr
       
    1:     def test_builtin_function(self):
    1:         eq = self.assertEqual
               # Functions
    1:         eq(repr(hash), '<built-in function hash>')
               # Methods
    1:         self.assertTrue(repr(''.split).startswith(
    1:             '<built-in method split of str object at 0x'))
       
    1:     def test_xrange(self):
    1:         eq = self.assertEqual
    1:         eq(repr(xrange(1)), 'xrange(1)')
    1:         eq(repr(xrange(1, 2)), 'xrange(1, 2)')
    1:         eq(repr(xrange(1, 2, 3)), 'xrange(1, 4, 3)')
       
    1:     def test_nesting(self):
    1:         eq = self.assertEqual
               # everything is meant to give up after 6 levels.
    1:         eq(r([[[[[[[]]]]]]]), "[[[[[[[]]]]]]]")
    1:         eq(r([[[[[[[[]]]]]]]]), "[[[[[[[...]]]]]]]")
       
    1:         eq(r(nestedTuple(6)), "(((((((),),),),),),)")
    1:         eq(r(nestedTuple(7)), "(((((((...),),),),),),)")
       
    1:         eq(r({ nestedTuple(5) : nestedTuple(5) }),
    1:            "{((((((),),),),),): ((((((),),),),),)}")
    1:         eq(r({ nestedTuple(6) : nestedTuple(6) }),
    1:            "{((((((...),),),),),): ((((((...),),),),),)}")
       
    1:         eq(r([[[[[[{}]]]]]]), "[[[[[[{}]]]]]]")
    1:         eq(r([[[[[[[{}]]]]]]]), "[[[[[[[...]]]]]]]")
       
    1:     def test_buffer(self):
               # XXX doesn't test buffers with no b_base or read-write buffers (see
               # bufferobject.c).  The test is fairly incomplete too.  Sigh.
    1:         with check_py3k_warnings():
    1:             x = buffer('foo')
    1:         self.assertTrue(repr(x).startswith('<read-only buffer for 0x'))
       
    1:     def test_cell(self):
    1:         def get_cell():
    1:             x = 42
    1:             def inner():
>>>>>>                 return x
    1:             return inner
    1:         x = get_cell().__closure__[0]
    1:         self.assertRegexpMatches(repr(x), r'<cell at 0x[0-9A-Fa-f]+: '
                                                 r'int object at 0x[0-9A-Fa-f]+>')
    1:         self.assertRegexpMatches(r(x), r'<cell at.*\.\.\..*>')
       
    1:     def test_descriptors(self):
    1:         eq = self.assertEqual
               # method descriptors
    1:         eq(repr(dict.items), "<method 'items' of 'dict' objects>")
               # XXX member descriptors
               # XXX attribute descriptors
               # XXX slot descriptors
               # static and class methods
    2:         class C:
    1:             def foo(cls): pass
    1:         x = staticmethod(C.foo)
    1:         self.assertTrue(repr(x).startswith('<staticmethod object at 0x'))
    1:         x = classmethod(C.foo)
    1:         self.assertTrue(repr(x).startswith('<classmethod object at 0x'))
       
    1:     def test_unsortable(self):
               # Repr.repr() used to call sorted() on sets, frozensets and dicts
               # without taking into account that not all objects are comparable
    1:         x = set([1j, 2j, 3j])
    1:         y = frozenset(x)
    1:         z = {1j: 1, 2j: 2}
    1:         r(x)
    1:         r(y)
    1:         r(z)
       
    1: def touch(path, text=''):
   15:     fp = open(path, 'w')
   15:     fp.write(text)
   15:     fp.close()
       
    2: class LongReprTest(unittest.TestCase):
    1:     def setUp(self):
    5:         longname = 'areallylongpackageandmodulenametotestreprtruncation'
    5:         self.pkgname = os.path.join(longname)
    5:         self.subpkgname = os.path.join(longname, longname)
               # Make the package and subpackage
    5:         shutil.rmtree(self.pkgname, ignore_errors=True)
    5:         os.mkdir(self.pkgname)
    5:         touch(os.path.join(self.pkgname, '__init__'+os.extsep+'py'))
    5:         shutil.rmtree(self.subpkgname, ignore_errors=True)
    5:         os.mkdir(self.subpkgname)
    5:         touch(os.path.join(self.subpkgname, '__init__'+os.extsep+'py'))
               # Remember where we are
    5:         self.here = os.getcwd()
    5:         sys.path.insert(0, self.here)
       
    1:     def tearDown(self):
    5:         actions = []
   15:         for dirpath, dirnames, filenames in os.walk(self.pkgname):
   37:             for name in dirnames + filenames:
   27:                 actions.append(os.path.join(dirpath, name))
    5:         actions.append(self.pkgname)
    5:         actions.sort()
    5:         actions.reverse()
   37:         for p in actions:
   32:             if os.path.isdir(p):
   10:                 os.rmdir(p)
                   else:
   22:                 os.remove(p)
    5:         del sys.path[0]
       
    1:     def test_module(self):
    1:         eq = self.assertEqual
    1:         touch(os.path.join(self.subpkgname, self.pkgname + os.extsep + 'py'))
    1:         from areallylongpackageandmodulenametotestreprtruncation.areallylongpackageandmodulenametotestreprtruncation import areallylongpackageandmodulenametotestreprtruncation
    1:         eq(repr(areallylongpackageandmodulenametotestreprtruncation),
    1:            "<module '%s' from '%s'>" % (areallylongpackageandmodulenametotestreprtruncation.__name__, areallylongpackageandmodulenametotestreprtruncation.__file__))
    1:         eq(repr(sys), "<module 'sys' (built-in)>")
       
    1:     def test_type(self):
    1:         eq = self.assertEqual
    1:         touch(os.path.join(self.subpkgname, 'foo'+os.extsep+'py'), '''\
       class foo(object):
           pass
    1: ''')
    1:         from areallylongpackageandmodulenametotestreprtruncation.areallylongpackageandmodulenametotestreprtruncation import foo
    1:         eq(repr(foo.foo),
    1:                "<class '%s.foo'>" % foo.__name__)
       
    1:     @unittest.skip('need a suitable object')
           def test_object(self):
               # XXX Test the repr of a type with a really long tp_name but with no
               # tp_repr.  WIBNI we had ::Inline? :)
>>>>>>         pass
       
    1:     def test_class(self):
    1:         touch(os.path.join(self.subpkgname, 'bar'+os.extsep+'py'), '''\
       class bar:
           pass
    1: ''')
    1:         from areallylongpackageandmodulenametotestreprtruncation.areallylongpackageandmodulenametotestreprtruncation import bar
               # Module name may be prefixed with "test.", depending on how run.
    1:         self.assertTrue(repr(bar.bar).startswith(
    1:             "<class %s.bar at 0x" % bar.__name__))
       
    1:     def test_instance(self):
    1:         touch(os.path.join(self.subpkgname, 'baz'+os.extsep+'py'), '''\
       class baz:
           pass
    1: ''')
    1:         from areallylongpackageandmodulenametotestreprtruncation.areallylongpackageandmodulenametotestreprtruncation import baz
    1:         ibaz = baz.baz()
    1:         self.assertTrue(repr(ibaz).startswith(
    1:             "<%s.baz instance at 0x" % baz.__name__))
       
    1:     def test_method(self):
    1:         eq = self.assertEqual
    1:         touch(os.path.join(self.subpkgname, 'qux'+os.extsep+'py'), '''\
       class aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:
           def amethod(self): pass
    1: ''')
    1:         from areallylongpackageandmodulenametotestreprtruncation.areallylongpackageandmodulenametotestreprtruncation import qux
               # Unbound methods first
    1:         eq(repr(qux.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.amethod),
    1:         '<unbound method aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.amethod>')
               # Bound method next
    1:         iqux = qux.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa()
    1:         self.assertTrue(repr(iqux.amethod).startswith(
    1:             '<bound method aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.amethod of <%s.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa instance at 0x' \
    1:             % (qux.__name__,) ))
       
    1:     @unittest.skip('needs a built-in function with a really long name')
           def test_builtin_function(self):
               # XXX test built-in functions and methods with really long names
>>>>>>         pass
       
    2: class ClassWithRepr:
    1:     def __init__(self, s):
    2:         self.s = s
    1:     def __repr__(self):
    5:         return "ClassWithLongRepr(%r)" % self.s
       
       
    2: class ClassWithFailingRepr:
    1:     def __repr__(self):
    1:         raise Exception("This should be caught by Repr.repr_instance")
       
       
    1: def test_main():
    1:     run_unittest(ReprTests)
    1:     run_unittest(LongReprTest)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
