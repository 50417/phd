       # Copyright 2004-2005 Elemental Security, Inc. All Rights Reserved.
       # Licensed to PSF under a Contributor Agreement.
       
    1: """Safely evaluate Python string literals without using eval()."""
       
    1: import re
       
    1: simple_escapes = {"a": "\a",
    1:                   "b": "\b",
    1:                   "f": "\f",
    1:                   "n": "\n",
    1:                   "r": "\r",
    1:                   "t": "\t",
    1:                   "v": "\v",
    1:                   "'": "'",
    1:                   '"': '"',
    1:                   "\\": "\\"}
       
    1: def escape(m):
  104:     all, tail = m.group(0, 1)
  104:     assert all.startswith("\\")
  104:     esc = simple_escapes.get(tail)
  104:     if esc is not None:
  104:         return esc
>>>>>>     if tail.startswith("x"):
>>>>>>         hexes = tail[1:]
>>>>>>         if len(hexes) < 2:
>>>>>>             raise ValueError("invalid hex string escape ('\\%s')" % tail)
>>>>>>         try:
>>>>>>             i = int(hexes, 16)
>>>>>>         except ValueError:
>>>>>>             raise ValueError("invalid hex string escape ('\\%s')" % tail)
           else:
>>>>>>         try:
>>>>>>             i = int(tail, 8)
>>>>>>         except ValueError:
>>>>>>             raise ValueError("invalid octal string escape ('\\%s')" % tail)
>>>>>>     return chr(i)
       
    1: def evalString(s):
20096:     assert s.startswith("'") or s.startswith('"'), repr(s[:1])
20096:     q = s[0]
20096:     if s[:3] == q*3:
>>>>>>         q = q*3
20096:     assert s.endswith(q), repr(s[-len(q):])
20096:     assert len(s) >= 2*len(q)
20096:     s = s[len(q):-len(q)]
20096:     return re.sub(r"\\(\'|\"|\\|[abfnrtv]|x.{0,2}|[0-7]{1,3})", escape, s)
       
    1: def test():
>>>>>>     for i in range(256):
>>>>>>         c = chr(i)
>>>>>>         s = repr(c)
>>>>>>         e = evalString(s)
>>>>>>         if e != c:
>>>>>>             print i, c, s, e
       
       
    1: if __name__ == "__main__":
>>>>>>     test()
