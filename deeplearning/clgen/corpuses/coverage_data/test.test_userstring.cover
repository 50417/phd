       # UserString is a wrapper around the native builtin string type.
       # UserString instances should behave similar to builtin string objects.
       
    1: import string
    1: from test import test_support, string_tests
    1: from UserString import UserString, MutableString
    1: import warnings
       
    2: class UserStringTest(
    1:     string_tests.CommonTest,
    1:     string_tests.MixinStrUnicodeUserStringTest,
    1:     string_tests.MixinStrStringUserStringTest,
    1:     string_tests.MixinStrUserStringTest
           ):
       
    1:     type2test = UserString
       
           # Overwrite the three testing methods, because UserString
           # can't cope with arguments propagated to UserString
           # (and we don't test with subclasses)
    1:     def checkequal(self, result, object, methodname, *args):
 2266:         result = self.fixtype(result)
 2266:         object = self.fixtype(object)
               # we don't fix the arguments, because UserString can't cope with it
 2266:         realresult = getattr(object, methodname)(*args)
 2266:         self.assertEqual(
 2266:             result,
 2266:             realresult
               )
       
    1:     def checkraises(self, exc, obj, methodname, *args):
  184:         obj = self.fixtype(obj)
               # we don't fix the arguments, because UserString can't cope with it
  184:         with self.assertRaises(exc) as cm:
  184:             getattr(obj, methodname)(*args)
  184:         self.assertNotEqual(cm.exception.args[0], '')
       
    1:     def checkcall(self, object, methodname, *args):
12002:         object = self.fixtype(object)
               # we don't fix the arguments, because UserString can't cope with it
12002:         getattr(object, methodname)(*args)
       
    2: class MutableStringTest(UserStringTest):
    1:     type2test = MutableString
       
           # MutableStrings can be hashed => deactivate test
    1:     def test_hash(self):
    1:         pass
       
    1:     def test_setitem(self):
    1:         s = self.type2test("foo")
    1:         self.assertRaises(IndexError, s.__setitem__, -4, "bar")
    1:         self.assertRaises(IndexError, s.__setitem__, 3, "bar")
    1:         s[-1] = "bar"
    1:         self.assertEqual(s, "fobar")
    1:         s[0] = "bar"
    1:         self.assertEqual(s, "barobar")
       
    1:     def test_delitem(self):
    1:         s = self.type2test("foo")
    1:         self.assertRaises(IndexError, s.__delitem__, -4)
    1:         self.assertRaises(IndexError, s.__delitem__, 3)
    1:         del s[-1]
    1:         self.assertEqual(s, "fo")
    1:         del s[0]
    1:         self.assertEqual(s, "o")
    1:         del s[0]
    1:         self.assertEqual(s, "")
       
    1:     def test_setslice(self):
    1:         s = self.type2test("foo")
    1:         s[:] = "bar"
    1:         self.assertEqual(s, "bar")
    1:         s[1:2] = "foo"
    1:         self.assertEqual(s, "bfoor")
    1:         s[1:-1] = UserString("a")
    1:         self.assertEqual(s, "bar")
    1:         s[0:10] = 42
    1:         self.assertEqual(s, "42")
       
    1:     def test_delslice(self):
    1:         s = self.type2test("foobar")
    1:         del s[3:10]
    1:         self.assertEqual(s, "foo")
    1:         del s[-1:10]
    1:         self.assertEqual(s, "fo")
       
    1:     def test_extended_set_del_slice(self):
    1:         indices = (0, None, 1, 3, 19, 100, -1, -2, -31, -100)
    1:         orig = string.ascii_letters + string.digits
   11:         for start in indices:
  110:             for stop in indices:
                       # Use indices[1:] when MutableString can handle real
                       # extended slices
  400:                 for step in (None, 1, -1):
  300:                     s = self.type2test(orig)
  300:                     L = list(orig)
                           # Make sure we have a slice of exactly the right length,
                           # but with (hopefully) different data.
  300:                     data = L[start:stop:step]
  300:                     data.reverse()
  300:                     L[start:stop:step] = data
  300:                     s[start:stop:step] = "".join(data)
  300:                     self.assertEqual(s, "".join(L))
       
  300:                     del L[start:stop:step]
  300:                     del s[start:stop:step]
  300:                     self.assertEqual(s, "".join(L))
       
    1:     def test_immutable(self):
    1:         s = self.type2test("foobar")
    1:         s2 = s.immutable()
    1:         self.assertEqual(s, s2)
    1:         self.assertIsInstance(s2, UserString)
       
    1:     def test_iadd(self):
    1:         s = self.type2test("foo")
    1:         s += "bar"
    1:         self.assertEqual(s, "foobar")
    1:         s += UserString("baz")
    1:         self.assertEqual(s, "foobarbaz")
    1:         s += 42
    1:         self.assertEqual(s, "foobarbaz42")
       
    1:     def test_imul(self):
    1:         s = self.type2test("foo")
    1:         s *= 1
    1:         self.assertEqual(s, "foo")
    1:         s *= 2
    1:         self.assertEqual(s, "foofoo")
    1:         s *= -1
    1:         self.assertEqual(s, "")
       
    1: def test_main():
    1:     with warnings.catch_warnings():
    1:         warnings.filterwarnings("ignore", ".*MutableString has been removed",
    1:                                 DeprecationWarning)
    1:         warnings.filterwarnings("ignore",
    1:                                 ".*__(get|set|del)slice__ has been removed",
    1:                                 DeprecationWarning)
    1:         test_support.run_unittest(UserStringTest, MutableStringTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
