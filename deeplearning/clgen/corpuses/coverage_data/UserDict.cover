       """A more or less complete user-defined wrapper around dictionary objects."""
       
>>>>>> class UserDict:
>>>>>>     def __init__(*args, **kwargs):
  523:         if not args:
>>>>>>             raise TypeError("descriptor '__init__' of 'UserDict' object "
                                   "needs an argument")
  523:         self = args[0]
  523:         args = args[1:]
  523:         if len(args) > 1:
    1:             raise TypeError('expected at most 1 arguments, got %d' % len(args))
  522:         if args:
  117:             dict = args[0]
  405:         elif 'dict' in kwargs:
    2:             dict = kwargs.pop('dict')
    2:             import warnings
    2:             warnings.warn("Passing 'dict' as keyword argument is "
    2:                           "deprecated", PendingDeprecationWarning,
    2:                           stacklevel=2)
               else:
  403:             dict = None
  522:         self.data = {}
  522:         if dict is not None:
  119:             self.update(dict)
  521:         if len(kwargs):
   89:             self.update(kwargs)
    8:     def __repr__(self): return repr(self.data)
>>>>>>     def __cmp__(self, dict):
  158:         if isinstance(dict, UserDict):
   84:             return cmp(self.data, dict.data)
               else:
   74:             return cmp(self.data, dict)
>>>>>>     __hash__ = None # Avoid Py3k warning
200753:     def __len__(self): return len(self.data)
>>>>>>     def __getitem__(self, key):
48901:         if key in self.data:
42271:             return self.data[key]
 6629:         if hasattr(self.__class__, "__missing__"):
    2:             return self.__class__.__missing__(self, key)
 6627:         raise KeyError(key)
12583:     def __setitem__(self, key, item): self.data[key] = item
   10:     def __delitem__(self, key): del self.data[key]
    5:     def clear(self): self.data.clear()
>>>>>>     def copy(self):
   25:         if self.__class__ is UserDict:
    1:             return UserDict(self.data.copy())
   24:         import copy
   24:         data = self.data
   24:         try:
   24:             self.data = {}
   24:             c = copy.copy(self)
               finally:
   24:             self.data = data
   24:         c.update(self)
   24:         return c
 1264:     def keys(self): return self.data.keys()
  295:     def items(self): return self.data.items()
    6:     def iteritems(self): return self.data.iteritems()
    2:     def iterkeys(self): return self.data.iterkeys()
    2:     def itervalues(self): return self.data.itervalues()
   24:     def values(self): return self.data.values()
   46:     def has_key(self, key): return key in self.data
>>>>>>     def update(*args, **kwargs):
  146:         if not args:
>>>>>>             raise TypeError("descriptor 'update' of 'UserDict' object "
                                   "needs an argument")
  146:         self = args[0]
  146:         args = args[1:]
  146:         if len(args) > 1:
    1:             raise TypeError('expected at most 1 arguments, got %d' % len(args))
  145:         if args:
  141:             dict = args[0]
    4:         elif 'dict' in kwargs:
    1:             dict = kwargs.pop('dict')
    1:             import warnings
    1:             warnings.warn("Passing 'dict' as keyword argument is deprecated",
    1:                           PendingDeprecationWarning, stacklevel=2)
               else:
    3:             dict = None
  145:         if dict is None:
    3:             pass
  142:         elif isinstance(dict, UserDict):
   38:             self.data.update(dict.data)
  104:         elif isinstance(dict, type({})) or not hasattr(dict, 'items'):
  103:             self.data.update(dict)
               else:
    3:             for k, v in dict.items():
    2:                 self[k] = v
  143:         if len(kwargs):
    3:             self.data.update(kwargs)
>>>>>>     def get(self, key, failobj=None):
66115:         if key not in self:
48049:             return failobj
18066:         return self[key]
>>>>>>     def setdefault(self, key, failobj=None):
   12:         if key not in self:
    5:             self[key] = failobj
   11:         return self[key]
>>>>>>     def pop(self, key, *args):
   14:         return self.data.pop(key, *args)
>>>>>>     def popitem(self):
16388:         return self.data.popitem()
>>>>>>     def __contains__(self, key):
74252:         return key in self.data
>>>>>>     @classmethod
>>>>>>     def fromkeys(cls, iterable, value=None):
   22:         d = cls()
   55:         for key in iterable:
   35:             d[key] = value
   19:         return d
       
>>>>>> class IterableUserDict(UserDict):
>>>>>>     def __iter__(self):
    4:         return iter(self.data)
       
>>>>>> import _abcoll
>>>>>> _abcoll.MutableMapping.register(IterableUserDict)
       
       
>>>>>> class DictMixin:
           # Mixin defining all dictionary methods for classes that already have
           # a minimum dictionary interface including getitem, setitem, delitem,
           # and keys. Without knowledge of the subclass constructor, the mixin
           # does not define __init__() or copy().  In addition to the four base
           # methods, progressively more efficiency comes with defining
           # __contains__(), __iter__(), and iteritems().
       
           # second level definitions support higher levels
>>>>>>     def __iter__(self):
20950:         for k in self.keys():
20736:             yield k
>>>>>>     def has_key(self, key):
  209:         try:
  209:             self[key]
  195:         except KeyError:
  195:             return False
   14:         return True
>>>>>>     def __contains__(self, key):
  198:         return self.has_key(key)
       
           # third level takes advantage of second level definitions
>>>>>>     def iteritems(self):
20957:         for k in self:
20755:             yield (k, self[k])
>>>>>>     def iterkeys(self):
    8:         return self.__iter__()
       
           # fourth level uses definitions from lower levels
>>>>>>     def itervalues(self):
   24:         for _, v in self.iteritems():
   16:             yield v
>>>>>>     def values(self):
   37:         return [v for _, v in self.iteritems()]
>>>>>>     def items(self):
   57:         return list(self.iteritems())
>>>>>>     def clear(self):
  221:         for key in self.keys():
  194:             del self[key]
>>>>>>     def setdefault(self, key, default=None):
   75:         try:
   75:             return self[key]
   52:         except KeyError:
   52:             self[key] = default
   52:         return default
>>>>>>     def pop(self, key, *args):
   54:         if len(args) > 1:
>>>>>>             raise TypeError, "pop expected at most 2 arguments, got "\
>>>>>>                               + repr(1 + len(args))
   54:         try:
   54:             value = self[key]
   30:         except KeyError:
   30:             if args:
    9:                 return args[0]
   21:             raise
   24:         del self[key]
   24:         return value
>>>>>>     def popitem(self):
16403:         try:
16403:             k, v = self.iteritems().next()
   15:         except StopIteration:
   15:             raise KeyError, 'container is empty'
16388:         del self[k]
16388:         return (k, v)
>>>>>>     def update(self, other=None, **kwargs):
               # Make progressively weaker assumptions about "other"
  107:         if other is None:
   11:             pass
   96:         elif hasattr(other, 'iteritems'):  # iteritems saves memory and lookups
   57:             for k, v in other.iteritems():
   35:                 self[k] = v
   74:         elif hasattr(other, 'keys'):
   53:             for k in other.keys():
   31:                 self[k] = other[k]
               else:
   80:             for k, v in other:
   35:                 self[k] = v
   65:         if kwargs:
    4:             self.update(kwargs)
>>>>>>     def get(self, key, default=None):
   18:         try:
   18:             return self[key]
   11:         except KeyError:
   11:             return default
>>>>>>     def __repr__(self):
>>>>>>         return repr(dict(self.iteritems()))
>>>>>>     def __cmp__(self, other):
   51:         if other is None:
>>>>>>             return 1
   51:         if isinstance(other, DictMixin):
   30:             other = dict(other.iteritems())
   51:         return cmp(dict(self.iteritems()), other)
>>>>>>     def __len__(self):
   64:         return len(self.keys())
