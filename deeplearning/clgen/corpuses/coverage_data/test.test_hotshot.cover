    1: import os
    1: import pprint
    1: import unittest
    1: import tempfile
    1: import _hotshot
    1: import gc
       
    1: from test import test_support
       
       # Silence Py3k warning
    1: hotshot = test_support.import_module('hotshot', deprecated=True)
    1: from hotshot.log import ENTER, EXIT, LINE
    1: from hotshot import stats
       
       
    1: def shortfilename(fn):
           # We use a really shortened filename since an exact match is made,
           # and the source may be either a Python source file or a
           # pre-compiled bytecode file.
>>>>>>     if fn:
>>>>>>         return os.path.splitext(os.path.basename(fn))[0]
           else:
>>>>>>         return fn
       
       
    2: class UnlinkingLogReader(hotshot.log.LogReader):
           """Extend the LogReader so the log file is unlinked when we're
    1:     done with it."""
       
    1:     def __init__(self, logfn):
    1:         self.__logfn = logfn
    1:         hotshot.log.LogReader.__init__(self, logfn)
       
    1:     def next(self, index=None):
    3:         try:
    3:             return hotshot.log.LogReader.next(self)
    1:         except StopIteration:
    1:             self.close()
    1:             os.unlink(self.__logfn)
    1:             raise
       
       
    2: class HotShotTestCase(unittest.TestCase):
    1:     def new_profiler(self, lineevents=0, linetimings=1):
    3:         self.logfn = test_support.TESTFN
    3:         return hotshot.Profile(self.logfn, lineevents, linetimings)
       
    1:     def get_logreader(self):
    1:         return UnlinkingLogReader(self.logfn)
       
    1:     def get_events_wotime(self):
>>>>>>         L = []
>>>>>>         for event in self.get_logreader():
>>>>>>             what, (filename, lineno, funcname), tdelta = event
>>>>>>             L.append((what, (shortfilename(filename), lineno, funcname)))
>>>>>>         return L
       
    1:     def check_events(self, expected):
>>>>>>         events = self.get_events_wotime()
>>>>>>         if events != expected:
>>>>>>             self.fail(
>>>>>>                 "events did not match expectation; got:\n%s\nexpected:\n%s"
>>>>>>                 % (pprint.pformat(events), pprint.pformat(expected)))
       
    1:     def run_test(self, callable, events, profiler=None):
    1:         if profiler is None:
>>>>>>             profiler = self.new_profiler()
    1:         self.assertTrue(not profiler._prof.closed)
    1:         profiler.runcall(callable)
>>>>>>         self.assertTrue(not profiler._prof.closed)
>>>>>>         profiler.close()
>>>>>>         self.assertTrue(profiler._prof.closed)
>>>>>>         self.check_events(events)
       
    1:     def test_addinfo(self):
    1:         def f(p):
    1:             p.addinfo("test-key", "test-value")
    1:         profiler = self.new_profiler()
    1:         profiler.runcall(f, profiler)
    1:         profiler.close()
    1:         log = self.get_logreader()
    1:         info = log._info
    1:         list(log)
    1:         self.assertTrue(info["test-key"] == ["test-value"])
       
    1:     def test_line_numbers(self):
    1:         def f():
>>>>>>             y = 2
>>>>>>             x = 1
    1:         def g():
>>>>>>             f()
    1:         f_lineno = f.func_code.co_firstlineno
    1:         g_lineno = g.func_code.co_firstlineno
    1:         events = [(ENTER, ("test_hotshot", g_lineno, "g")),
    1:                   (LINE,  ("test_hotshot", g_lineno+1, "g")),
    1:                   (ENTER, ("test_hotshot", f_lineno, "f")),
    1:                   (LINE,  ("test_hotshot", f_lineno+1, "f")),
    1:                   (LINE,  ("test_hotshot", f_lineno+2, "f")),
    1:                   (EXIT,  ("test_hotshot", f_lineno, "f")),
    1:                   (EXIT,  ("test_hotshot", g_lineno, "g")),
                         ]
    1:         self.run_test(g, events, self.new_profiler(lineevents=1))
       
    1:     def test_start_stop(self):
               # Make sure we don't return NULL in the start() and stop()
               # methods when there isn't an error.  Bug in 2.2 noted by
               # Anthony Baxter.
>>>>>>         profiler = self.new_profiler()
>>>>>>         profiler.start()
>>>>>>         profiler.stop()
>>>>>>         profiler.close()
>>>>>>         os.unlink(self.logfn)
       
    1:     def test_bad_sys_path(self):
    1:         import sys
    1:         import os
    1:         orig_path = sys.path
    1:         coverage = hotshot._hotshot.coverage
    1:         try:
                   # verify we require a list for sys.path
    1:             sys.path = 'abc'
    1:             self.assertRaises(RuntimeError, coverage, test_support.TESTFN)
                   # verify that we require sys.path exists
    1:             del sys.path
    1:             self.assertRaises(RuntimeError, coverage, test_support.TESTFN)
               finally:
    1:             sys.path = orig_path
    1:             if os.path.exists(test_support.TESTFN):
    1:                 os.remove(test_support.TESTFN)
       
    1:     def test_logreader_eof_error(self):
>>>>>>         emptyfile = tempfile.NamedTemporaryFile()
>>>>>>         try:
>>>>>>             self.assertRaises((IOError, EOFError), _hotshot.logreader,
>>>>>>                               emptyfile.name)
               finally:
>>>>>>             emptyfile.close()
>>>>>>         gc.collect()
       
    1:     def test_load_stats(self):
>>>>>>         def start(prof):
>>>>>>             prof.start()
               # Make sure stats can be loaded when start and stop of profiler
               # are not executed in the same stack frame.
>>>>>>         profiler = self.new_profiler()
>>>>>>         start(profiler)
>>>>>>         profiler.stop()
>>>>>>         profiler.close()
>>>>>>         stats.load(self.logfn)
>>>>>>         os.unlink(self.logfn)
       
    1:     def test_large_info(self):
    1:         p = self.new_profiler()
    1:         self.assertRaises(ValueError, p.addinfo, "A", "A" * 0xfceb)
       
       
    1: def test_main():
    1:     test_support.run_unittest(HotShotTestCase)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
