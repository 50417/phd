    1: """Tests for distutils.command.bdist_dumb."""
       
    1: import os
    1: import sys
    1: import zipfile
    1: import unittest
    1: from test.test_support import run_unittest
       
       # zlib is not used here, but if it's not available
       # test_simple_built will fail
    1: try:
    1:     import zlib
>>>>>> except ImportError:
>>>>>>     zlib = None
       
    1: from distutils.core import Distribution
    1: from distutils.command.bdist_dumb import bdist_dumb
    1: from distutils.tests import support
       
       SETUP_PY = """\
       from distutils.core import setup
       import foo
       
       setup(name='foo', version='0.1', py_modules=['foo'],
             url='xxx', author='xxx', author_email='xxx')
       
    1: """
       
    2: class BuildDumbTestCase(support.TempdirManager,
    1:                         support.LoggingSilencer,
    1:                         support.EnvironGuard,
    1:                         unittest.TestCase):
       
    1:     def setUp(self):
    2:         super(BuildDumbTestCase, self).setUp()
    2:         self.old_location = os.getcwd()
    2:         self.old_sys_argv = sys.argv, sys.argv[:]
       
    1:     def tearDown(self):
    2:         os.chdir(self.old_location)
    2:         sys.argv = self.old_sys_argv[0]
    2:         sys.argv[:] = self.old_sys_argv[1]
    2:         super(BuildDumbTestCase, self).tearDown()
       
    1:     @unittest.skipUnless(zlib, "requires zlib")
           def test_simple_built(self):
       
               # let's create a simple package
    1:         tmp_dir = self.mkdtemp()
    1:         pkg_dir = os.path.join(tmp_dir, 'foo')
    1:         os.mkdir(pkg_dir)
    1:         self.write_file((pkg_dir, 'setup.py'), SETUP_PY)
    1:         self.write_file((pkg_dir, 'foo.py'), '#')
    1:         self.write_file((pkg_dir, 'MANIFEST.in'), 'include foo.py')
    1:         self.write_file((pkg_dir, 'README'), '')
       
    1:         dist = Distribution({'name': 'foo', 'version': '0.1',
    1:                              'py_modules': ['foo'],
    1:                              'url': 'xxx', 'author': 'xxx',
    1:                              'author_email': 'xxx'})
    1:         dist.script_name = 'setup.py'
    1:         os.chdir(pkg_dir)
       
    1:         sys.argv = ['setup.py']
    1:         cmd = bdist_dumb(dist)
       
               # so the output is the same no matter
               # what is the platform
    1:         cmd.format = 'zip'
       
    1:         cmd.ensure_finalized()
    1:         cmd.run()
       
               # see what we have
    1:         dist_created = os.listdir(os.path.join(pkg_dir, 'dist'))
    1:         base = "%s.%s.zip" % (dist.get_fullname(), cmd.plat_name)
    1:         if os.name == 'os2':
>>>>>>             base = base.replace(':', '-')
       
    1:         self.assertEqual(dist_created, [base])
       
               # now let's check what we have in the zip file
    1:         fp = zipfile.ZipFile(os.path.join('dist', base))
    1:         try:
    1:             contents = fp.namelist()
               finally:
    1:             fp.close()
       
    5:         contents = sorted(os.path.basename(fn) for fn in contents)
    1:         wanted = ['foo-0.1-py%s.%s.egg-info' % sys.version_info[:2], 'foo.py']
    1:         if not sys.dont_write_bytecode:
    1:             wanted.append('foo.pyc')
    1:         self.assertEqual(contents, sorted(wanted))
       
    1:     def test_finalize_options(self):
    1:         pkg_dir, dist = self.create_dist()
    1:         os.chdir(pkg_dir)
    1:         cmd = bdist_dumb(dist)
    1:         self.assertEqual(cmd.bdist_dir, None)
    1:         cmd.finalize_options()
       
               # bdist_dir is initialized to bdist_base/dumb if not set
    1:         base = cmd.get_finalized_command('bdist').bdist_base
    1:         self.assertEqual(cmd.bdist_dir, os.path.join(base, 'dumb'))
       
               # the format is set to a default value depending on the os.name
    1:         default = cmd.default_format[os.name]
    1:         self.assertEqual(cmd.format, default)
       
    1: def test_suite():
    1:     return unittest.makeSuite(BuildDumbTestCase)
       
    1: if __name__ == '__main__':
>>>>>>     run_unittest(test_suite())
