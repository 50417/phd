    1: from test import test_support, seq_tests
       
    1: import gc
       
    2: class TupleTest(seq_tests.CommonTest):
    1:     type2test = tuple
       
    1:     def test_constructors(self):
    1:         super(TupleTest, self).test_constructors()
               # calling built-in types without argument must return empty
    1:         self.assertEqual(tuple(), ())
    1:         t0_3 = (0, 1, 2, 3)
    1:         t0_3_bis = tuple(t0_3)
    1:         self.assertTrue(t0_3 is t0_3_bis)
    1:         self.assertEqual(tuple([]), ())
    1:         self.assertEqual(tuple([0, 1, 2, 3]), (0, 1, 2, 3))
    1:         self.assertEqual(tuple(''), ())
    1:         self.assertEqual(tuple('spam'), ('s', 'p', 'a', 'm'))
       
    1:     def test_truth(self):
    1:         super(TupleTest, self).test_truth()
    1:         self.assertTrue(not ())
    1:         self.assertTrue((42, ))
       
    1:     def test_len(self):
    1:         super(TupleTest, self).test_len()
    1:         self.assertEqual(len(()), 0)
    1:         self.assertEqual(len((0,)), 1)
    1:         self.assertEqual(len((0, 1, 2)), 3)
       
    1:     def test_iadd(self):
    1:         super(TupleTest, self).test_iadd()
    1:         u = (0, 1)
    1:         u2 = u
    1:         u += (2, 3)
    1:         self.assertTrue(u is not u2)
       
    1:     def test_imul(self):
    1:         super(TupleTest, self).test_imul()
    1:         u = (0, 1)
    1:         u2 = u
    1:         u *= 3
    1:         self.assertTrue(u is not u2)
       
    1:     def test_tupleresizebug(self):
               # Check that a specific bug in _PyTuple_Resize() is squashed.
    1:         def f():
 1001:             for i in range(1000):
 1000:                 yield i
    1:         self.assertEqual(list(tuple(f())), range(1000))
       
    1:     def test_hash(self):
               # See SF bug 942952:  Weakness in tuple hash
               # The hash should:
               #      be non-commutative
               #      should spread-out closely spaced values
               #      should not exhibit cancellation in tuples like (x,(x,y))
               #      should be distinct from element hashes:  hash(x)!=hash((x,))
               # This test exercises those cases.
               # For a pure random hash and N=50, the expected number of occupied
               #      buckets when tossing 252,600 balls into 2**32 buckets
               #      is 252,592.6, or about 7.4 expected collisions.  The
               #      standard deviation is 2.73.  On a box with 64-bit hash
               #      codes, no collisions are expected.  Here we accept no
               #      more than 15 collisions.  Any worse and the hash function
               #      is sorely suspect.
       
    1:         N=50
    1:         base = range(N)
 2551:         xp = [(i, j) for i in base for j in base]
               inps = base + [(i, j) for i in base for j in xp] + \
252551:                      [(i, j) for i in xp for j in base] + xp + zip(base)
    1:         collisions = len(inps) - len(set(map(hash, inps)))
    1:         self.assertTrue(collisions <= 15)
       
    1:     def test_repr(self):
    1:         l0 = tuple()
    1:         l2 = (0, 1, 2)
    1:         a0 = self.type2test(l0)
    1:         a2 = self.type2test(l2)
       
    1:         self.assertEqual(str(a0), repr(l0))
    1:         self.assertEqual(str(a2), repr(l2))
    1:         self.assertEqual(repr(a0), "()")
    1:         self.assertEqual(repr(a2), "(0, 1, 2)")
       
    1:     def _not_tracked(self, t):
               # Nested tuples can take several collections to untrack
   16:         gc.collect()
   16:         gc.collect()
   16:         self.assertFalse(gc.is_tracked(t), t)
       
    1:     def _tracked(self, t):
   25:         self.assertTrue(gc.is_tracked(t), t)
   25:         gc.collect()
   25:         gc.collect()
   25:         self.assertTrue(gc.is_tracked(t), t)
       
    1:     @test_support.cpython_only
           def test_track_literals(self):
               # Test GC-optimization of tuple literals
    1:         x, y, z = 1.5, "a", []
       
    1:         self._not_tracked(())
    1:         self._not_tracked((1,))
    1:         self._not_tracked((1, 2))
    1:         self._not_tracked((1, 2, "a"))
    1:         self._not_tracked((1, 2, (None, True, False, ()), int))
    1:         self._not_tracked((object(),))
    1:         self._not_tracked(((1, x), y, (2, 3)))
       
               # Tuples with mutable elements are always tracked, even if those
               # elements are not tracked right now.
    1:         self._tracked(([],))
    1:         self._tracked(([1],))
    1:         self._tracked(({},))
    1:         self._tracked((set(),))
    1:         self._tracked((x, y, z))
       
    1:     def check_track_dynamic(self, tp, always_track):
    2:         x, y, z = 1.5, "a", []
       
    2:         check = self._tracked if always_track else self._not_tracked
    2:         check(tp())
    2:         check(tp([]))
    2:         check(tp(set()))
    2:         check(tp([1, x, y]))
   10:         check(tp(obj for obj in [1, x, y]))
    2:         check(tp(set([1, x, y])))
   10:         check(tp(tuple([obj]) for obj in [1, x, y]))
   10:         check(tuple(tp([obj]) for obj in [1, x, y]))
       
    2:         self._tracked(tp([z]))
    2:         self._tracked(tp([[x, y]]))
    2:         self._tracked(tp([{x: y}]))
   10:         self._tracked(tp(obj for obj in [x, y, z]))
   10:         self._tracked(tp(tuple([obj]) for obj in [x, y, z]))
   10:         self._tracked(tuple(tp([obj]) for obj in [x, y, z]))
       
    1:     @test_support.cpython_only
           def test_track_dynamic(self):
               # Test GC-optimization of dynamically constructed tuples.
    1:         self.check_track_dynamic(tuple, False)
       
    1:     @test_support.cpython_only
           def test_track_subtypes(self):
               # Tuple subtypes must always be tracked
    2:         class MyTuple(tuple):
    1:             pass
    1:         self.check_track_dynamic(MyTuple, True)
       
    1:     @test_support.cpython_only
           def test_bug7466(self):
               # Trying to untrack an unfinished tuple could crash Python
  103:         self._not_tracked(tuple(gc.collect() for i in range(101)))
       
    1: def test_main():
    1:     test_support.run_unittest(TupleTest)
       
    1: if __name__=="__main__":
>>>>>>     test_main()
