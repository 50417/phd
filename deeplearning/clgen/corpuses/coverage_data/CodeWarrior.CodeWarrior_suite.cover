       """Suite CodeWarrior suite: Terms for scripting the CodeWarrior IDE
       Level 0, version 0
       
       Generated from /Volumes/Sap/Applications (Mac OS 9)/Metrowerks CodeWarrior 7.0/Metrowerks CodeWarrior/CodeWarrior IDE 4.2.5
       AETE/AEUT resource version 1/0, language 0, script 0
    1: """
       
    1: import aetools
    1: import MacOS
       
    1: _code = 'CWIE'
       
    2: class CodeWarrior_suite_Events:
       
    1:     _argmap_add = {
    1:         'new' : 'kocl',
    1:         'with_data' : 'data',
    1:         'to_targets' : 'TTGT',
    1:         'to_group' : 'TGRP',
           }
       
    1:     def add(self, _object, _attributes={}, **_arguments):
               """add: add elements to a project or target
               Required argument: an AE object reference
               Keyword argument new: the class of the new element or elements to add
               Keyword argument with_data: the initial data for the element or elements
               Keyword argument to_targets: the targets to which the new element or elements will be added
               Keyword argument to_group: the group to which the new element or elements will be added
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'CWIE'
>>>>>>         _subcode = 'ADDF'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_add)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def build(self, _no_object=None, _attributes={}, **_arguments):
               """build: build a project or target (equivalent of the Make menu command)
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'CWIE'
>>>>>>         _subcode = 'MAKE'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def check(self, _object=None, _attributes={}, **_arguments):
               """check: check the syntax of a file in a project or target
               Required argument: the file or files to be checked
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'CWIE'
>>>>>>         _subcode = 'CHEK'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def compile_file(self, _object=None, _attributes={}, **_arguments):
               """compile file: compile a file in a project or target
               Required argument: the file or files to be compiled
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'CWIE'
>>>>>>         _subcode = 'COMP'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def disassemble_file(self, _object=None, _attributes={}, **_arguments):
               """disassemble file: disassemble a file in a project or target
               Required argument: the file or files to be disassembled
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'CWIE'
>>>>>>         _subcode = 'DASM'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_export = {
    1:         'in_' : 'kfil',
           }
       
    1:     def export(self, _no_object=None, _attributes={}, **_arguments):
               """export: Export the project file as an XML file
               Keyword argument in_: the XML file in which to export the project
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'CWIE'
>>>>>>         _subcode = 'EXPT'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_export)
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def remove_object_code(self, _no_object=None, _attributes={}, **_arguments):
               """remove object code: remove object code from a project or target
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'CWIE'
>>>>>>         _subcode = 'RMOB'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def remove_target_files(self, _object, _attributes={}, **_arguments):
               """remove target files: remove files from a target
               Required argument: an AE object reference
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'CWIE'
>>>>>>         _subcode = 'RMFL'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def run_target(self, _no_object=None, _attributes={}, **_arguments):
               """run target: run a project or target
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'CWIE'
>>>>>>         _subcode = 'RUN '
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def touch_file(self, _object=None, _attributes={}, **_arguments):
               """touch file: touch a file in a project or target for compilation
               Required argument: the file or files to be touched
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'CWIE'
>>>>>>         _subcode = 'TOCH'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def update(self, _no_object=None, _attributes={}, **_arguments):
               """update: bring a project or target up to date
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'CWIE'
>>>>>>         _subcode = 'UP2D'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
       
    2: class single_class_browser(aetools.ComponentItem):
    1:     """single class browser - a single class browser """
    1:     want = '1BRW'
    2: class _Prop_inherits(aetools.NProperty):
    1:     """inherits - all properties and elements of the given class are inherited by this class. """
    1:     which = 'c@#^'
    1:     want = 'TXTD'
       
    1: single_class_browsers = single_class_browser
       
    2: class single_class_hierarchy(aetools.ComponentItem):
    1:     """single class hierarchy - a single class hierarchy document """
    1:     want = '1HIR'
       
    1: single_class_hierarchies = single_class_hierarchy
       
    2: class class_browser(aetools.ComponentItem):
    1:     """class browser - a class browser """
    1:     want = 'BROW'
       
    1: class_browsers = class_browser
       
    2: class file_compare_document(aetools.ComponentItem):
    1:     """file compare document - a file compare document """
    1:     want = 'COMP'
       
    1: file_compare_documents = file_compare_document
       
    2: class catalog_document(aetools.ComponentItem):
    1:     """catalog document - a browser catalog document """
    1:     want = 'CTLG'
       
    1: catalog_documents = catalog_document
       
    2: class editor_document(aetools.ComponentItem):
    1:     """editor document - an editor document """
    1:     want = 'EDIT'
       
    1: editor_documents = editor_document
       
    2: class class_hierarchy(aetools.ComponentItem):
    1:     """class hierarchy - a class hierarchy document """
    1:     want = 'HIER'
       
    1: class_hierarchies = class_hierarchy
       
    2: class project_inspector(aetools.ComponentItem):
    1:     """project inspector - the project inspector """
    1:     want = 'INSP'
       
    1: project_inspectors = project_inspector
       
    2: class message_document(aetools.ComponentItem):
    1:     """message document - a message document """
    1:     want = 'MSSG'
       
    1: message_documents = message_document
       
    2: class build_progress_document(aetools.ComponentItem):
    1:     """build progress document - a build progress document """
    1:     want = 'PRGS'
       
    1: build_progress_documents = build_progress_document
       
    2: class project_document(aetools.ComponentItem):
    1:     """project document - a project document """
    1:     want = 'PRJD'
    2: class _Prop_current_target(aetools.NProperty):
    1:     """current target - the current target """
    1:     which = 'CURT'
    1:     want = 'TRGT'
       #        element 'TRGT' as ['indx', 'name', 'test', 'rang']
       
    1: project_documents = project_document
       
    2: class subtarget(aetools.ComponentItem):
    1:     """subtarget - a target that is prerequisite for another target """
    1:     want = 'SBTG'
    2: class _Prop_link_against_output(aetools.NProperty):
    1:     """link against output - is the output of this subtarget linked into its dependent target? """
    1:     which = 'LNKO'
    1:     want = 'bool'
    2: class _Prop_target(aetools.NProperty):
    1:     """target - the target that is dependent on this subtarget """
    1:     which = 'TrgT'
    1:     want = 'TRGT'
       
    1: subtargets = subtarget
       
    2: class target_file(aetools.ComponentItem):
    1:     """target file - a source or header file in a target """
    1:     want = 'SRCF'
    2: class _Prop_code_size(aetools.NProperty):
    1:     """code size - the size of the code (in bytes) produced by compiling this source file """
    1:     which = 'CSZE'
    1:     want = 'long'
    2: class _Prop_compiled_date(aetools.NProperty):
    1:     """compiled date - the date and this source file was last compiled """
    1:     which = 'CMPD'
    1:     want = 'ldt '
    2: class _Prop_data_size(aetools.NProperty):
    1:     """data size - the size of the date (in bytes) produced by compiling this source file """
    1:     which = 'DSZE'
    1:     want = 'long'
    2: class _Prop_debug(aetools.NProperty):
    1:     """debug - is debugging information generated for this source file? """
    1:     which = 'DBUG'
    1:     want = 'bool'
    2: class _Prop_dependents(aetools.NProperty):
    1:     """dependents - the source files that need this source file in order to build """
    1:     which = 'DPND'
    1:     want = 'list'
    2: class _Prop_id(aetools.NProperty):
    1:     """id - the unique ID number of the target file """
    1:     which = 'ID  '
    1:     want = 'long'
    2: class _Prop_init_before(aetools.NProperty):
    1:     """init before - is the \xd4initialize before\xd5 flag set for this shared library? """
    1:     which = 'INIT'
    1:     want = 'bool'
    2: class _Prop_link_index(aetools.NProperty):
    1:     """link index - the index of the source file in its target\xd5s link order (-1 if source file is not in link order) """
    1:     which = 'LIDX'
    1:     want = 'long'
    2: class _Prop_linked(aetools.NProperty):
    1:     """linked - is the source file in the link order of its target? """
    1:     which = 'LINK'
    1:     want = 'bool'
    2: class _Prop_location(aetools.NProperty):
    1:     """location - the location of the target file on disk """
    1:     which = 'FILE'
    1:     want = 'fss '
    2: class _Prop_merge_output(aetools.NProperty):
    1:     """merge output - is this shared library merged into another code fragment? """
    1:     which = 'MRGE'
    1:     want = 'bool'
    2: class _Prop_modified_date(aetools.NProperty):
    1:     """modified date - the date and time this source file was last modified """
    1:     which = 'MODD'
    1:     want = 'ldt '
    2: class _Prop_path(aetools.NProperty):
    1:     """path - the path of the source file on disk """
    1:     which = 'Path'
    1:     want = 'itxt'
    2: class _Prop_prerequisites(aetools.NProperty):
    1:     """prerequisites - the source files needed to build this source file """
    1:     which = 'PRER'
    1:     want = 'list'
    2: class _Prop_type(aetools.NProperty):
    1:     """type - the type of source file """
    1:     which = 'FTYP'
    1:     want = 'FTYP'
    2: class _Prop_weak_link(aetools.NProperty):
    1:     """weak link - is this shared library linked weakly? """
    1:     which = 'WEAK'
    1:     want = 'bool'
       
    1: target_files = target_file
       
    2: class symbol_browser(aetools.ComponentItem):
    1:     """symbol browser - a symbol browser """
    1:     want = 'SYMB'
       
    1: symbol_browsers = symbol_browser
       
    2: class ToolServer_worksheet(aetools.ComponentItem):
    1:     """ToolServer worksheet - a ToolServer worksheet """
    1:     want = 'TOOL'
       
    1: ToolServer_worksheets = ToolServer_worksheet
       
    2: class target(aetools.ComponentItem):
    1:     """target - a target in a project """
    1:     want = 'TRGT'
    2: class _Prop_name(aetools.NProperty):
    1:     """name -  """
    1:     which = 'pnam'
    1:     want = 'itxt'
    2: class _Prop_project_document(aetools.NProperty):
    1:     """project document - the project document that contains this target """
    1:     which = 'PrjD'
    1:     want = 'PRJD'
       #        element 'SBTG' as ['indx', 'test', 'rang']
       #        element 'SRCF' as ['indx', 'test', 'rang']
       
    1: targets = target
       
    2: class text_document(aetools.ComponentItem):
    1:     """text document - a document that contains text """
    1:     want = 'TXTD'
    2: class _Prop_modified(aetools.NProperty):
    1:     """modified - Has the document been modified since the last save? """
    1:     which = 'imod'
    1:     want = 'bool'
    2: class _Prop_selection(aetools.NProperty):
    1:     """selection - the selection visible to the user """
    1:     which = 'sele'
    1:     want = 'csel'
       #        element 'cha ' as ['indx', 'rele', 'rang', 'test']
       #        element 'cins' as ['rele']
       #        element 'clin' as ['indx', 'rang', 'rele']
       #        element 'ctxt' as ['rang']
       
    1: text_documents = text_document
    1: single_class_browser._superclassnames = ['text_document']
    1: single_class_browser._privpropdict = {
    1:     'inherits' : _Prop_inherits,
       }
    1: single_class_browser._privelemdict = {
       }
    1: import Standard_Suite
    1: single_class_hierarchy._superclassnames = ['document']
    1: single_class_hierarchy._privpropdict = {
    1:     'inherits' : _Prop_inherits,
       }
    1: single_class_hierarchy._privelemdict = {
       }
    1: class_browser._superclassnames = ['text_document']
    1: class_browser._privpropdict = {
    1:     'inherits' : _Prop_inherits,
       }
    1: class_browser._privelemdict = {
       }
    1: file_compare_document._superclassnames = ['text_document']
    1: file_compare_document._privpropdict = {
    1:     'inherits' : _Prop_inherits,
       }
    1: file_compare_document._privelemdict = {
       }
    1: catalog_document._superclassnames = ['text_document']
    1: catalog_document._privpropdict = {
    1:     'inherits' : _Prop_inherits,
       }
    1: catalog_document._privelemdict = {
       }
    1: editor_document._superclassnames = ['text_document']
    1: editor_document._privpropdict = {
    1:     'inherits' : _Prop_inherits,
       }
    1: editor_document._privelemdict = {
       }
    1: class_hierarchy._superclassnames = ['document']
    1: class_hierarchy._privpropdict = {
    1:     'inherits' : _Prop_inherits,
       }
    1: class_hierarchy._privelemdict = {
       }
    1: project_inspector._superclassnames = ['document']
    1: project_inspector._privpropdict = {
    1:     'inherits' : _Prop_inherits,
       }
    1: project_inspector._privelemdict = {
       }
    1: message_document._superclassnames = ['text_document']
    1: message_document._privpropdict = {
    1:     'inherits' : _Prop_inherits,
       }
    1: message_document._privelemdict = {
       }
    1: build_progress_document._superclassnames = ['document']
    1: build_progress_document._privpropdict = {
    1:     'inherits' : _Prop_inherits,
       }
    1: build_progress_document._privelemdict = {
       }
    1: project_document._superclassnames = ['document']
    1: project_document._privpropdict = {
    1:     'current_target' : _Prop_current_target,
    1:     'inherits' : _Prop_inherits,
       }
    1: project_document._privelemdict = {
    1:     'target' : target,
       }
    1: subtarget._superclassnames = ['target']
    1: subtarget._privpropdict = {
    1:     'inherits' : _Prop_inherits,
    1:     'link_against_output' : _Prop_link_against_output,
    1:     'target' : _Prop_target,
       }
    1: subtarget._privelemdict = {
       }
    1: target_file._superclassnames = []
    1: target_file._privpropdict = {
    1:     'code_size' : _Prop_code_size,
    1:     'compiled_date' : _Prop_compiled_date,
    1:     'data_size' : _Prop_data_size,
    1:     'debug' : _Prop_debug,
    1:     'dependents' : _Prop_dependents,
    1:     'id' : _Prop_id,
    1:     'init_before' : _Prop_init_before,
    1:     'link_index' : _Prop_link_index,
    1:     'linked' : _Prop_linked,
    1:     'location' : _Prop_location,
    1:     'merge_output' : _Prop_merge_output,
    1:     'modified_date' : _Prop_modified_date,
    1:     'path' : _Prop_path,
    1:     'prerequisites' : _Prop_prerequisites,
    1:     'type' : _Prop_type,
    1:     'weak_link' : _Prop_weak_link,
       }
    1: target_file._privelemdict = {
       }
    1: symbol_browser._superclassnames = ['text_document']
    1: symbol_browser._privpropdict = {
    1:     'inherits' : _Prop_inherits,
       }
    1: symbol_browser._privelemdict = {
       }
    1: ToolServer_worksheet._superclassnames = ['text_document']
    1: ToolServer_worksheet._privpropdict = {
    1:     'inherits' : _Prop_inherits,
       }
    1: ToolServer_worksheet._privelemdict = {
       }
    1: target._superclassnames = []
    1: target._privpropdict = {
    1:     'name' : _Prop_name,
    1:     'project_document' : _Prop_project_document,
       }
    1: target._privelemdict = {
    1:     'subtarget' : subtarget,
    1:     'target_file' : target_file,
       }
    1: text_document._superclassnames = ['document']
    1: text_document._privpropdict = {
    1:     'inherits' : _Prop_inherits,
    1:     'modified' : _Prop_modified,
    1:     'selection' : _Prop_selection,
       }
    1: text_document._privelemdict = {
    1:     'character' : Standard_Suite.character,
    1:     'insertion_point' : Standard_Suite.insertion_point,
    1:     'line' : Standard_Suite.line,
    1:     'text' : Standard_Suite.text,
       }
    1: _Enum_DKND = {
    1:     'project' : 'PRJD', # a project document
    1:     'editor_document' : 'EDIT', # an editor document
    1:     'message' : 'MSSG', # a message document
    1:     'file_compare' : 'COMP',    # a file compare document
    1:     'catalog_document' : 'CTLG',        # a browser catalog
    1:     'class_browser' : 'BROW',   # a class browser document
    1:     'single_class_browser' : '1BRW',    # a single class browser document
    1:     'symbol_browser' : 'SYMB',  # a symbol browser document
    1:     'class_hierarchy' : 'HIER', # a class hierarchy document
    1:     'single_class_hierarchy' : '1HIR',  # a single class hierarchy document
    1:     'project_inspector' : 'INSP',       # a project inspector
    1:     'ToolServer_worksheet' : 'TOOL',    # the ToolServer worksheet
    1:     'build_progress_document' : 'PRGS', # the build progress window
       }
       
    1: _Enum_FTYP = {
    1:     'library_file' : 'LIBF',    # a library file
    1:     'project_file' : 'PRJF',    # a project file
    1:     'resource_file' : 'RESF',   # a resource file
    1:     'text_file' : 'TXTF',       # a text file
    1:     'unknown_file' : 'UNKN',    # unknown file type
       }
       
    1: _Enum_Inte = {
    1:     'never_interact' : 'eNvr',  # never allow user interactions
    1:     'interact_with_self' : 'eInS',      # allow user interaction only when an AppleEvent is sent from within CodeWarrior
    1:     'interact_with_local' : 'eInL',     # allow user interaction when AppleEvents are sent from applications on the same machine (default)
    1:     'interact_with_all' : 'eInA',       # allow user interaction from both local and remote AppleEvents
       }
       
    1: _Enum_PERM = {
    1:     'read_write' : 'RdWr',      # the file is open with read/write permission
    1:     'read_only' : 'Read',       # the file is open with read/only permission
    1:     'checked_out_read_write' : 'CkRW',  # the file is checked out with read/write permission
    1:     'checked_out_read_only' : 'CkRO',   # the file is checked out with read/only permission
    1:     'checked_out_read_modify' : 'CkRM', # the file is checked out with read/modify permission
    1:     'locked' : 'Lock',  # the file is locked on disk
    1:     'none' : 'LNNO',    # the file is new
       }
       
       
       #
       # Indices of types declared in this module
       #
    1: _classdeclarations = {
    1:     '1BRW' : single_class_browser,
    1:     '1HIR' : single_class_hierarchy,
    1:     'BROW' : class_browser,
    1:     'COMP' : file_compare_document,
    1:     'CTLG' : catalog_document,
    1:     'EDIT' : editor_document,
    1:     'HIER' : class_hierarchy,
    1:     'INSP' : project_inspector,
    1:     'MSSG' : message_document,
    1:     'PRGS' : build_progress_document,
    1:     'PRJD' : project_document,
    1:     'SBTG' : subtarget,
    1:     'SRCF' : target_file,
    1:     'SYMB' : symbol_browser,
    1:     'TOOL' : ToolServer_worksheet,
    1:     'TRGT' : target,
    1:     'TXTD' : text_document,
       }
       
    1: _propdeclarations = {
    1:     'CMPD' : _Prop_compiled_date,
    1:     'CSZE' : _Prop_code_size,
    1:     'CURT' : _Prop_current_target,
    1:     'DBUG' : _Prop_debug,
    1:     'DPND' : _Prop_dependents,
    1:     'DSZE' : _Prop_data_size,
    1:     'FILE' : _Prop_location,
    1:     'FTYP' : _Prop_type,
    1:     'ID  ' : _Prop_id,
    1:     'INIT' : _Prop_init_before,
    1:     'LIDX' : _Prop_link_index,
    1:     'LINK' : _Prop_linked,
    1:     'LNKO' : _Prop_link_against_output,
    1:     'MODD' : _Prop_modified_date,
    1:     'MRGE' : _Prop_merge_output,
    1:     'PRER' : _Prop_prerequisites,
    1:     'Path' : _Prop_path,
    1:     'PrjD' : _Prop_project_document,
    1:     'TrgT' : _Prop_target,
    1:     'WEAK' : _Prop_weak_link,
    1:     'c@#^' : _Prop_inherits,
    1:     'imod' : _Prop_modified,
    1:     'pnam' : _Prop_name,
    1:     'sele' : _Prop_selection,
       }
       
    1: _compdeclarations = {
       }
       
    1: _enumdeclarations = {
    1:     'DKND' : _Enum_DKND,
    1:     'FTYP' : _Enum_FTYP,
    1:     'Inte' : _Enum_Inte,
    1:     'PERM' : _Enum_PERM,
       }
