    1: import unittest
    1: from test import test_support
       
    1: import time
       
    2: class StructSeqTest(unittest.TestCase):
       
    1:     def test_tuple(self):
    1:         t = time.gmtime()
    1:         astuple = tuple(t)
    1:         self.assertEqual(len(t), len(astuple))
    1:         self.assertEqual(t, astuple)
       
               # Check that slicing works the same way; at one point, slicing t[i:j] with
               # 0 < i < j could produce NULLs in the result.
   19:         for i in xrange(-len(t), len(t)):
   18:             self.assertEqual(t[i:], astuple[i:])
  342:             for j in xrange(-len(t), len(t)):
  324:                 self.assertEqual(t[i:j], astuple[i:j])
       
   19:         for j in xrange(-len(t), len(t)):
   18:             self.assertEqual(t[:j], astuple[:j])
       
    1:         self.assertRaises(IndexError, t.__getitem__, -len(t)-1)
    1:         self.assertRaises(IndexError, t.__getitem__, len(t))
   18:         for i in xrange(-len(t), len(t)-1):
   17:             self.assertEqual(t[i], astuple[i])
       
    1:     def test_repr(self):
    1:         t = time.gmtime()
    1:         self.assertTrue(repr(t))
    1:         t = time.gmtime(0)
    1:         self.assertEqual(repr(t),
    1:             "time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, "
                   "tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)")
       
    1:     def test_concat(self):
    1:         t1 = time.gmtime()
    1:         t2 = t1 + tuple(t1)
   10:         for i in xrange(len(t1)):
    9:             self.assertEqual(t2[i], t2[i+len(t1)])
       
    1:     def test_repeat(self):
    1:         t1 = time.gmtime()
    1:         t2 = 3 * t1
   10:         for i in xrange(len(t1)):
    9:             self.assertEqual(t2[i], t2[i+len(t1)])
    9:             self.assertEqual(t2[i], t2[i+2*len(t1)])
       
    1:     def test_contains(self):
    1:         t1 = time.gmtime()
   10:         for item in t1:
    9:             self.assertIn(item, t1)
    1:         self.assertNotIn(-42, t1)
       
    1:     def test_hash(self):
    1:         t1 = time.gmtime()
    1:         self.assertEqual(hash(t1), hash(tuple(t1)))
       
    1:     def test_cmp(self):
    1:         t1 = time.gmtime()
    1:         t2 = type(t1)(t1)
    1:         self.assertEqual(t1, t2)
    1:         self.assertTrue(not (t1 < t2))
    1:         self.assertTrue(t1 <= t2)
    1:         self.assertTrue(not (t1 > t2))
    1:         self.assertTrue(t1 >= t2)
    1:         self.assertTrue(not (t1 != t2))
       
    1:     def test_fields(self):
    1:         t = time.gmtime()
    1:         self.assertEqual(len(t), t.n_fields)
    1:         self.assertEqual(t.n_fields, t.n_sequence_fields+t.n_unnamed_fields)
       
    1:     def test_constructor(self):
    1:         t = time.struct_time
       
    1:         self.assertRaises(TypeError, t)
    1:         self.assertRaises(TypeError, t, None)
    1:         self.assertRaises(TypeError, t, "123")
    1:         self.assertRaises(TypeError, t, "123", dict={})
    1:         self.assertRaises(TypeError, t, "123456789", dict=None)
       
    1:         s = "123456789"
    1:         self.assertEqual("".join(t(s)), s)
       
    1:     def test_eviltuple(self):
    2:         class Exc(Exception):
    1:             pass
       
               # Devious code could crash structseqs' constructors
    2:         class C:
    1:             def __getitem__(self, i):
    1:                 raise Exc
    1:             def __len__(self):
    1:                 return 9
       
    1:         self.assertRaises(Exc, time.struct_time, C())
       
    1:     def test_reduce(self):
    1:         t = time.gmtime()
    1:         x = t.__reduce__()
       
    1:     def test_extended_getslice(self):
               # Test extended slicing by comparing with list slicing.
    1:         t = time.gmtime()
    1:         L = list(t)
    1:         indices = (0, None, 1, 3, 19, 300, -1, -2, -31, -300)
   11:         for start in indices:
  110:             for stop in indices:
                       # Skip step 0 (invalid)
 1000:                 for step in indices[1:]:
  900:                     self.assertEqual(list(t[start:stop:step]),
  900:                                      L[start:stop:step])
       
    1: def test_main():
    1:     test_support.run_unittest(StructSeqTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
