    1: import sys
    1: import unittest
    1: import StringIO
    1: import atexit
    1: from imp import reload
    1: from test import test_support
       
       
    1: def exit():
    1:     raise SystemExit
       
       
    2: class TestCase(unittest.TestCase):
    1:     def setUp(self):
    6:         self.save_stdout = sys.stdout
    6:         self.save_stderr = sys.stderr
    6:         self.stream = StringIO.StringIO()
    6:         sys.stdout = sys.stderr = self.subst_io = self.stream
    6:         self.save_handlers = atexit._exithandlers
    6:         atexit._exithandlers = []
       
    1:     def tearDown(self):
    6:         sys.stdout = self.save_stdout
    6:         sys.stderr = self.save_stderr
    6:         atexit._exithandlers = self.save_handlers
       
    1:     def test_args(self):
    1:         atexit.register(self.h1)
    1:         atexit.register(self.h4)
    1:         atexit.register(self.h4, 4, kw="abc")
    1:         atexit._run_exitfuncs()
    1:         self.assertEqual(self.subst_io.getvalue(),
    1:                          "h4 (4,) {'kw': 'abc'}\nh4 () {}\nh1\n")
       
    1:     def test_badargs(self):
    1:         atexit.register(lambda: 1, 0, 0, (x for x in (1,2)), 0, 0)
    1:         self.assertRaises(TypeError, atexit._run_exitfuncs)
       
    1:     def test_order(self):
    1:         atexit.register(self.h1)
    1:         atexit.register(self.h2)
    1:         atexit.register(self.h3)
    1:         atexit._run_exitfuncs()
    1:         self.assertEqual(self.subst_io.getvalue(), "h3\nh2\nh1\n")
       
    1:     def test_sys_override(self):
               # be sure a preset sys.exitfunc is handled properly
    1:         exfunc = sys.exitfunc
    1:         sys.exitfunc = self.h1
    1:         reload(atexit)
    1:         try:
    1:             atexit.register(self.h2)
    1:             atexit._run_exitfuncs()
               finally:
    1:             sys.exitfunc = exfunc
    1:         self.assertEqual(self.subst_io.getvalue(), "h2\nh1\n")
       
    1:     def test_raise(self):
    1:         atexit.register(self.raise1)
    1:         atexit.register(self.raise2)
    1:         self.assertRaises(TypeError, atexit._run_exitfuncs)
       
    1:     def test_exit(self):
               # be sure a SystemExit is handled properly
    1:         atexit.register(exit)
       
    1:         self.assertRaises(SystemExit, atexit._run_exitfuncs)
    1:         self.assertEqual(self.stream.getvalue(), '')
       
           ### helpers
    1:     def h1(self):
    3:         print "h1"
       
    1:     def h2(self):
    2:         print "h2"
       
    1:     def h3(self):
    1:         print "h3"
       
    1:     def h4(self, *args, **kwargs):
    2:         print "h4", args, kwargs
       
    1:     def raise1(self):
    1:         raise TypeError
       
    1:     def raise2(self):
    1:         raise SystemError
       
    1: def test_main():
    1:     test_support.run_unittest(TestCase)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
