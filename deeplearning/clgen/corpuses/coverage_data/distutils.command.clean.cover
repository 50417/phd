       """distutils.command.clean
       
    1: Implements the Distutils 'clean' command."""
       
       # contributed by Bastian Kleineidam <calvin@cs.uni-sb.de>, added 2000-03-18
       
    1: __revision__ = "$Id$"
       
    1: import os
    1: from distutils.core import Command
    1: from distutils.dir_util import remove_tree
    1: from distutils import log
       
    2: class clean(Command):
       
    1:     description = "clean up temporary files from 'build' command"
           user_options = [
               ('build-base=', 'b',
    1:          "base build directory (default: 'build.build-base')"),
               ('build-lib=', None,
    1:          "build directory for all modules (default: 'build.build-lib')"),
               ('build-temp=', 't',
    1:          "temporary build directory (default: 'build.build-temp')"),
               ('build-scripts=', None,
    1:          "build directory for scripts (default: 'build.build-scripts')"),
               ('bdist-base=', None,
    1:          "temporary directory for built distributions"),
               ('all', 'a',
    1:          "remove all build output, not just temporary by-products")
           ]
       
    1:     boolean_options = ['all']
       
    1:     def initialize_options(self):
    1:         self.build_base = None
    1:         self.build_lib = None
    1:         self.build_temp = None
    1:         self.build_scripts = None
    1:         self.bdist_base = None
    1:         self.all = None
       
    1:     def finalize_options(self):
    1:         self.set_undefined_options('build',
    1:                                    ('build_base', 'build_base'),
    1:                                    ('build_lib', 'build_lib'),
    1:                                    ('build_scripts', 'build_scripts'),
    1:                                    ('build_temp', 'build_temp'))
    1:         self.set_undefined_options('bdist',
    1:                                    ('bdist_base', 'bdist_base'))
       
    1:     def run(self):
               # remove the build/temp.<plat> directory (unless it's already
               # gone)
    2:         if os.path.exists(self.build_temp):
    1:             remove_tree(self.build_temp, dry_run=self.dry_run)
               else:
    1:             log.debug("'%s' does not exist -- can't clean it",
    1:                       self.build_temp)
       
    2:         if self.all:
                   # remove build directories
    2:             for directory in (self.build_lib,
    2:                               self.bdist_base,
    8:                               self.build_scripts):
    6:                 if os.path.exists(directory):
    3:                     remove_tree(directory, dry_run=self.dry_run)
                       else:
    3:                     log.warn("'%s' does not exist -- can't clean it",
    3:                              directory)
       
               # just for the heck of it, try to remove the base build directory:
               # we might have emptied it right now, but if not we don't care
    2:         if not self.dry_run:
    2:             try:
    2:                 os.rmdir(self.build_base)
    1:                 log.info("removing '%s'", self.build_base)
    1:             except OSError:
    1:                 pass
       
       # class clean
