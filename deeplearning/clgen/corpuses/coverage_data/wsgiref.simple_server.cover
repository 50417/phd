       """BaseHTTPServer that implements the Python WSGI protocol (PEP 333, rev 1.21)
       
       This is both an example of how WSGI can be implemented, and a basis for running
       simple web applications on a local machine, such as might be done when testing
       or debugging an application.  It has not been reviewed for security issues,
       however, and we strongly recommend that you use a "real" web server for
       production use.
       
       For example usage, see the 'if __name__=="__main__"' block at the end of the
       module.  See also the BaseHTTPServer module docs for other API information.
    1: """
       
    1: from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
    1: import urllib, sys
    1: from wsgiref.handlers import SimpleHandler
       
    1: __version__ = "0.1"
    1: __all__ = ['WSGIServer', 'WSGIRequestHandler', 'demo_app', 'make_server']
       
       
    1: server_version = "WSGIServer/" + __version__
    1: sys_version = "Python/" + sys.version.split()[0]
    1: software_version = server_version + ' ' + sys_version
       
       
    2: class ServerHandler(SimpleHandler):
       
    1:     server_software = software_version
       
    1:     def close(self):
    3:         try:
    3:             self.request_handler.log_request(
    3:                 self.status.split(' ',1)[0], self.bytes_sent
                   )
               finally:
    3:             SimpleHandler.close(self)
       
       
       
    2: class WSGIServer(HTTPServer):
       
    1:     """BaseHTTPServer that implements the Python WSGI protocol"""
       
    1:     application = None
       
    1:     def server_bind(self):
               """Override server_bind to store the server name."""
>>>>>>         HTTPServer.server_bind(self)
>>>>>>         self.setup_environ()
       
    1:     def setup_environ(self):
               # Set up base environment
    4:         env = self.base_environ = {}
    4:         env['SERVER_NAME'] = self.server_name
    4:         env['GATEWAY_INTERFACE'] = 'CGI/1.1'
    4:         env['SERVER_PORT'] = str(self.server_port)
    4:         env['REMOTE_HOST']=''
    4:         env['CONTENT_LENGTH']=''
    4:         env['SCRIPT_NAME'] = ''
       
    1:     def get_app(self):
    3:         return self.application
       
    1:     def set_app(self,application):
    4:         self.application = application
       
       
       
    2: class WSGIRequestHandler(BaseHTTPRequestHandler):
       
    1:     server_version = "WSGIServer/" + __version__
       
    1:     def get_environ(self):
    3:         env = self.server.base_environ.copy()
    3:         env['SERVER_PROTOCOL'] = self.request_version
    3:         env['REQUEST_METHOD'] = self.command
    3:         if '?' in self.path:
>>>>>>             path,query = self.path.split('?',1)
               else:
    3:             path,query = self.path,''
       
    3:         env['PATH_INFO'] = urllib.unquote(path)
    3:         env['QUERY_STRING'] = query
       
    3:         host = self.address_string()
    3:         if host != self.client_address[0]:
    3:             env['REMOTE_HOST'] = host
    3:         env['REMOTE_ADDR'] = self.client_address[0]
       
    3:         if self.headers.typeheader is None:
    3:             env['CONTENT_TYPE'] = self.headers.type
               else:
>>>>>>             env['CONTENT_TYPE'] = self.headers.typeheader
       
    3:         length = self.headers.getheader('content-length')
    3:         if length:
>>>>>>             env['CONTENT_LENGTH'] = length
       
    3:         for h in self.headers.headers:
>>>>>>             k,v = h.split(':',1)
>>>>>>             k=k.replace('-','_').upper(); v=v.strip()
>>>>>>             if k in env:
>>>>>>                 continue                    # skip content length, type,etc.
>>>>>>             if 'HTTP_'+k in env:
>>>>>>                 env['HTTP_'+k] += ','+v     # comma-separate multiple headers
                   else:
>>>>>>                 env['HTTP_'+k] = v
    3:         return env
       
    1:     def get_stderr(self):
    3:         return sys.stderr
       
    1:     def handle(self):
               """Handle a single HTTP request"""
       
    4:         self.raw_requestline = self.rfile.readline(65537)
    4:         if len(self.raw_requestline) > 65536:
    1:             self.requestline = ''
    1:             self.request_version = ''
    1:             self.command = ''
    1:             self.send_error(414)
    1:             return
       
    3:         if not self.parse_request(): # An error code has been sent, just exit
>>>>>>             return
       
    3:         handler = ServerHandler(
    3:             self.rfile, self.wfile, self.get_stderr(), self.get_environ()
               )
    3:         handler.request_handler = self      # backpointer for logging
    3:         handler.run(self.server.get_app())
       
       
       
    1: def demo_app(environ,start_response):
>>>>>>     from StringIO import StringIO
>>>>>>     stdout = StringIO()
>>>>>>     print >>stdout, "Hello world!"
>>>>>>     print >>stdout
>>>>>>     h = environ.items(); h.sort()
>>>>>>     for k,v in h:
>>>>>>         print >>stdout, k,'=', repr(v)
>>>>>>     start_response("200 OK", [('Content-Type','text/plain')])
>>>>>>     return [stdout.getvalue()]
       
       
       def make_server(
    1:     host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler
       ):
           """Create a new WSGI server listening on `host` and `port` for `app`"""
    4:     server = server_class((host, port), handler_class)
    4:     server.set_app(app)
    4:     return server
       
       
    1: if __name__ == '__main__':
>>>>>>     httpd = make_server('', 8000, demo_app)
>>>>>>     sa = httpd.socket.getsockname()
>>>>>>     print "Serving HTTP on", sa[0], "port", sa[1], "..."
>>>>>>     import webbrowser
>>>>>>     webbrowser.open('http://localhost:8000/xyz?abc')
>>>>>>     httpd.handle_request()  # serve one request, then exit
>>>>>>     httpd.server_close()
