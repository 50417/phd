       """Suite Terminal Suite: Terms and Events for controlling the Terminal application
       Level 1, version 1
       
       Generated from /Applications/Utilities/Terminal.app
       AETE/AEUT resource version 1/0, language 0, script 0
    1: """
       
    1: import aetools
    1: import MacOS
       
    1: _code = 'trmx'
       
    2: class Terminal_Suite_Events:
       
    1:     def GetURL(self, _object, _attributes={}, **_arguments):
               """GetURL: Opens a telnet: URL
               Required argument: the object for the command
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'GURL'
>>>>>>         _subcode = 'GURL'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_do_script = {
    1:         'in_' : 'kfil',
    1:         'with_command' : 'cmnd',
           }
       
    1:     def do_script(self, _object, _attributes={}, **_arguments):
               """do script: Run a UNIX shell script or command
               Required argument: the object for the command
               Keyword argument in_: the window in which to execute the command
               Keyword argument with_command: data to be passed to the Terminal application as the command line, deprecated, use direct parameter
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: the reply for the command
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'dosc'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_do_script)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
       
    2: class application(aetools.ComponentItem):
    1:     """application - The Terminal program """
    1:     want = 'capp'
    2: class _Prop__3c_Inheritance_3e_(aetools.NProperty):
    1:     """<Inheritance> - All of the properties of the superclass. """
    1:     which = 'c@#^'
    1:     want = 'capp'
    1: _3c_Inheritance_3e_ = _Prop__3c_Inheritance_3e_()
    2: class _Prop_properties(aetools.NProperty):
    1:     """properties - every property of the Terminal program """
    1:     which = 'pALL'
    1:     want = '****'
    1: properties = _Prop_properties()
       #        element 'cwin' as ['name', 'indx', 'rele', 'rang', 'test', 'ID  ']
       #        element 'docu' as ['name', 'indx', 'rele', 'rang', 'test']
       
    1: applications = application
       
    2: class window(aetools.ComponentItem):
    1:     """window - A Terminal window """
    1:     want = 'cwin'
    2: class _Prop_background_color(aetools.NProperty):
    1:     """background color - the background color for the window """
    1:     which = 'pbcl'
    1:     want = '****'
    2: class _Prop_bold_text_color(aetools.NProperty):
    1:     """bold text color - the bold text color for the window """
    1:     which = 'pbtc'
    1:     want = '****'
    2: class _Prop_bounds(aetools.NProperty):
    1:     """bounds - the boundary rectangle for the window, relative to the upper left corner of the screen """
    1:     which = 'pbnd'
    1:     want = '****'
    2: class _Prop_busy(aetools.NProperty):
    1:     """busy - Is the window busy running a process? """
    1:     which = 'busy'
    1:     want = 'bool'
    2: class _Prop_contents(aetools.NProperty):
    1:     """contents - the currently visible contents of the window """
    1:     which = 'pcnt'
    1:     want = 'utxt'
    2: class _Prop_cursor_color(aetools.NProperty):
    1:     """cursor color - the cursor color for the window """
    1:     which = 'pcuc'
    1:     want = '****'
    2: class _Prop_custom_title(aetools.NProperty):
    1:     """custom title - the custom title for the window """
    1:     which = 'titl'
    1:     want = 'utxt'
    2: class _Prop_frame(aetools.NProperty):
    1:     """frame - the origin and size of the window """
    1:     which = 'pfra'
    1:     want = '****'
    2: class _Prop_frontmost(aetools.NProperty):
    1:     """frontmost - Is the window in front of the other Terminal windows? """
    1:     which = 'pisf'
    1:     want = 'bool'
    2: class _Prop_history(aetools.NProperty):
    1:     """history - the contents of the entire scrolling buffer of the window """
    1:     which = 'hist'
    1:     want = 'utxt'
    2: class _Prop_normal_text_color(aetools.NProperty):
    1:     """normal text color - the normal text color for the window """
    1:     which = 'ptxc'
    1:     want = '****'
    2: class _Prop_number_of_columns(aetools.NProperty):
    1:     """number of columns - the number of columns in the window """
    1:     which = 'ccol'
    1:     want = 'long'
    2: class _Prop_number_of_rows(aetools.NProperty):
    1:     """number of rows - the number of rows in the window """
    1:     which = 'crow'
    1:     want = 'long'
    2: class _Prop_origin(aetools.NProperty):
    1:     """origin - the lower left coordinates of the window, relative to the lower left corner of the screen """
    1:     which = 'pori'
    1:     want = '****'
    2: class _Prop_position(aetools.NProperty):
    1:     """position - the upper left coordinates of the window, relative to the upper left corner of the screen """
    1:     which = 'ppos'
    1:     want = '****'
    2: class _Prop_processes(aetools.NProperty):
    1:     """processes - a list of the currently running processes """
    1:     which = 'prcs'
    1:     want = 'utxt'
    2: class _Prop_size(aetools.NProperty):
    1:     """size - the width and height of the window """
    1:     which = 'psiz'
    1:     want = '****'
    2: class _Prop_title_displays_custom_title(aetools.NProperty):
    1:     """title displays custom title - Does the title for the window contain a custom title? """
    1:     which = 'tdct'
    1:     want = 'bool'
    2: class _Prop_title_displays_device_name(aetools.NProperty):
    1:     """title displays device name - Does the title for the window contain the device name? """
    1:     which = 'tddn'
    1:     want = 'bool'
    2: class _Prop_title_displays_file_name(aetools.NProperty):
    1:     """title displays file name - Does the title for the window contain the file name? """
    1:     which = 'tdfn'
    1:     want = 'bool'
    2: class _Prop_title_displays_shell_path(aetools.NProperty):
    1:     """title displays shell path - Does the title for the window contain the shell path? """
    1:     which = 'tdsp'
    1:     want = 'bool'
    2: class _Prop_title_displays_window_size(aetools.NProperty):
    1:     """title displays window size - Does the title for the window contain the window size? """
    1:     which = 'tdws'
    1:     want = 'bool'
       
    1: windows = window
    1: application._superclassnames = []
    1: import Standard_Suite
    1: application._privpropdict = {
    1:     '_3c_Inheritance_3e_' : _Prop__3c_Inheritance_3e_,
    1:     'properties' : _Prop_properties,
       }
    1: application._privelemdict = {
    1:     'document' : Standard_Suite.document,
    1:     'window' : window,
       }
    1: window._superclassnames = []
    1: window._privpropdict = {
    1:     '_3c_Inheritance_3e_' : _Prop__3c_Inheritance_3e_,
    1:     'background_color' : _Prop_background_color,
    1:     'bold_text_color' : _Prop_bold_text_color,
    1:     'bounds' : _Prop_bounds,
    1:     'busy' : _Prop_busy,
    1:     'contents' : _Prop_contents,
    1:     'cursor_color' : _Prop_cursor_color,
    1:     'custom_title' : _Prop_custom_title,
    1:     'frame' : _Prop_frame,
    1:     'frontmost' : _Prop_frontmost,
    1:     'history' : _Prop_history,
    1:     'normal_text_color' : _Prop_normal_text_color,
    1:     'number_of_columns' : _Prop_number_of_columns,
    1:     'number_of_rows' : _Prop_number_of_rows,
    1:     'origin' : _Prop_origin,
    1:     'position' : _Prop_position,
    1:     'processes' : _Prop_processes,
    1:     'properties' : _Prop_properties,
    1:     'size' : _Prop_size,
    1:     'title_displays_custom_title' : _Prop_title_displays_custom_title,
    1:     'title_displays_device_name' : _Prop_title_displays_device_name,
    1:     'title_displays_file_name' : _Prop_title_displays_file_name,
    1:     'title_displays_shell_path' : _Prop_title_displays_shell_path,
    1:     'title_displays_window_size' : _Prop_title_displays_window_size,
       }
    1: window._privelemdict = {
       }
       
       #
       # Indices of types declared in this module
       #
    1: _classdeclarations = {
    1:     'capp' : application,
    1:     'cwin' : window,
       }
       
    1: _propdeclarations = {
    1:     'busy' : _Prop_busy,
    1:     'c@#^' : _Prop__3c_Inheritance_3e_,
    1:     'ccol' : _Prop_number_of_columns,
    1:     'crow' : _Prop_number_of_rows,
    1:     'hist' : _Prop_history,
    1:     'pALL' : _Prop_properties,
    1:     'pbcl' : _Prop_background_color,
    1:     'pbnd' : _Prop_bounds,
    1:     'pbtc' : _Prop_bold_text_color,
    1:     'pcnt' : _Prop_contents,
    1:     'pcuc' : _Prop_cursor_color,
    1:     'pfra' : _Prop_frame,
    1:     'pisf' : _Prop_frontmost,
    1:     'pori' : _Prop_origin,
    1:     'ppos' : _Prop_position,
    1:     'prcs' : _Prop_processes,
    1:     'psiz' : _Prop_size,
    1:     'ptxc' : _Prop_normal_text_color,
    1:     'tdct' : _Prop_title_displays_custom_title,
    1:     'tddn' : _Prop_title_displays_device_name,
    1:     'tdfn' : _Prop_title_displays_file_name,
    1:     'tdsp' : _Prop_title_displays_shell_path,
    1:     'tdws' : _Prop_title_displays_window_size,
    1:     'titl' : _Prop_custom_title,
       }
       
    1: _compdeclarations = {
       }
       
    1: _enumdeclarations = {
       }
