       #
       # ElementTree
       # $Id: ElementInclude.py 3375 2008-02-13 08:05:08Z fredrik $
       #
       # limited xinclude support for element trees
       #
       # history:
       # 2003-08-15 fl   created
       # 2003-11-14 fl   fixed default loader
       #
       # Copyright (c) 2003-2004 by Fredrik Lundh.  All rights reserved.
       #
       # fredrik@pythonware.com
       # http://www.pythonware.com
       #
       # --------------------------------------------------------------------
       # The ElementTree toolkit is
       #
       # Copyright (c) 1999-2008 by Fredrik Lundh
       #
       # By obtaining, using, and/or copying this software and/or its
       # associated documentation, you agree that you have read, understood,
       # and will comply with the following terms and conditions:
       #
       # Permission to use, copy, modify, and distribute this software and
       # its associated documentation for any purpose and without fee is
       # hereby granted, provided that the above copyright notice appears in
       # all copies, and that both that copyright notice and this permission
       # notice appear in supporting documentation, and that the name of
       # Secret Labs AB or the author not be used in advertising or publicity
       # pertaining to distribution of the software without specific, written
       # prior permission.
       #
       # SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
       # TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-
       # ABILITY AND FITNESS.  IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR
       # BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
       # DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
       # WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
       # ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
       # OF THIS SOFTWARE.
       # --------------------------------------------------------------------
       
       # Licensed to PSF under a Contributor Agreement.
       # See http://www.python.org/psf/license for licensing details.
       
       ##
       # Limited XInclude support for the ElementTree package.
       ##
       
    1: import copy
    1: from . import ElementTree
       
    1: XINCLUDE = "{http://www.w3.org/2001/XInclude}"
       
    1: XINCLUDE_INCLUDE = XINCLUDE + "include"
    1: XINCLUDE_FALLBACK = XINCLUDE + "fallback"
       
       ##
       # Fatal include error.
       
    2: class FatalIncludeError(SyntaxError):
    1:     pass
       
       ##
       # Default loader.  This loader reads an included resource from disk.
       #
       # @param href Resource reference.
       # @param parse Parse mode.  Either "xml" or "text".
       # @param encoding Optional text encoding.
       # @return The expanded resource.  If the parse mode is "xml", this
       #    is an ElementTree instance.  If the parse mode is "text", this
       #    is a Unicode string.  If the loader fails, it can return None
       #    or raise an IOError exception.
       # @throws IOError If the loader fails to load the resource.
       
    1: def default_loader(href, parse, encoding=None):
    1:     with open(href) as file:
    1:         if parse == "xml":
    1:             data = ElementTree.parse(file).getroot()
               else:
>>>>>>             data = file.read()
>>>>>>             if encoding:
>>>>>>                 data = data.decode(encoding)
    1:     return data
       
       ##
       # Expand XInclude directives.
       #
       # @param elem Root element.
       # @param loader Optional resource loader.  If omitted, it defaults
       #     to {@link default_loader}.  If given, it should be a callable
       #     that implements the same interface as <b>default_loader</b>.
       # @throws FatalIncludeError If the function fails to include a given
       #     resource, or if the tree contains malformed XInclude elements.
       # @throws IOError If the function fails to load a given resource.
       
    1: def include(elem, loader=None):
   20:     if loader is None:
    1:         loader = default_loader
           # look for xinclude elements
   20:     i = 0
   34:     while i < len(elem):
   20:         e = elem[i]
   20:         if e.tag == XINCLUDE_INCLUDE:
                   # process xinclude directive
    9:             href = e.get("href")
    9:             parse = e.get("parse", "xml")
    9:             if parse == "xml":
    3:                 node = loader(href, parse)
    3:                 if node is None:
    1:                     raise FatalIncludeError(
    1:                         "cannot load %r as %r" % (href, parse)
                               )
    2:                 node = copy.copy(node)
    2:                 if e.tail:
    2:                     node.tail = (node.tail or "") + e.tail
    2:                 elem[i] = node
    6:             elif parse == "text":
    5:                 text = loader(href, parse, e.get("encoding"))
    4:                 if text is None:
    1:                     raise FatalIncludeError(
    1:                         "cannot load %r as %r" % (href, parse)
                               )
    3:                 if i:
    1:                     node = elem[i-1]
    1:                     node.tail = (node.tail or "") + text + (e.tail or "")
                       else:
    2:                     elem.text = (elem.text or "") + text + (e.tail or "")
    3:                 del elem[i]
    3:                 continue
                   else:
    1:                 raise FatalIncludeError(
    1:                     "unknown parse type in xi:include tag (%r)" % parse
                       )
   11:         elif e.tag == XINCLUDE_FALLBACK:
    1:             raise FatalIncludeError(
    1:                 "xi:fallback tag must be child of xi:include (%r)" % e.tag
                       )
               else:
   10:             include(e, loader)
   11:         i = i + 1
