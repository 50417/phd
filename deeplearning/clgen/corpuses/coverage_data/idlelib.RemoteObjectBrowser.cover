    1: from idlelib import rpc
       
    1: def remote_object_tree_item(item):
>>>>>>     wrapper = WrappedObjectTreeItem(item)
>>>>>>     oid = id(wrapper)
>>>>>>     rpc.objecttable[oid] = wrapper
>>>>>>     return oid
       
    2: class WrappedObjectTreeItem:
           # Lives in PYTHON subprocess
       
    1:     def __init__(self, item):
>>>>>>         self.__item = item
       
    1:     def __getattr__(self, name):
>>>>>>         value = getattr(self.__item, name)
>>>>>>         return value
       
    1:     def _GetSubList(self):
>>>>>>         list = self.__item._GetSubList()
>>>>>>         return map(remote_object_tree_item, list)
       
    2: class StubObjectTreeItem:
           # Lives in IDLE process
       
    1:     def __init__(self, sockio, oid):
>>>>>>         self.sockio = sockio
>>>>>>         self.oid = oid
       
    1:     def __getattr__(self, name):
>>>>>>         value = rpc.MethodProxy(self.sockio, self.oid, name)
>>>>>>         return value
       
    1:     def _GetSubList(self):
>>>>>>         list = self.sockio.remotecall(self.oid, "_GetSubList", (), {})
>>>>>>         return [StubObjectTreeItem(self.sockio, oid) for oid in list]
