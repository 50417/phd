       # -*- coding: iso-8859-1 -*-
    1: """A lexical analyzer class for simple shell-like syntaxes."""
       
       # Module and documentation by Eric S. Raymond, 21 Dec 1998
       # Input stacking and error message cleanup added by ESR, March 2000
       # push_source() and pop_source() made explicit by ESR, January 2001.
       # Posix compliance, split(), string arguments, and
       # iterator interface by Gustavo Niemeyer, April 2003.
       
    1: import os.path
    1: import sys
    1: from collections import deque
       
    1: try:
    1:     from cStringIO import StringIO
>>>>>> except ImportError:
>>>>>>     from StringIO import StringIO
       
    1: __all__ = ["shlex", "split"]
       
    2: class shlex:
    1:     "A lexical analyzer class for simple shell-like syntaxes."
    1:     def __init__(self, instream=None, infile=None, posix=False):
  138:         if isinstance(instream, basestring):
   64:             instream = StringIO(instream)
  138:         if instream is not None:
  138:             self.instream = instream
  138:             self.infile = infile
               else:
>>>>>>             self.instream = sys.stdin
>>>>>>             self.infile = None
  138:         self.posix = posix
  138:         if posix:
   63:             self.eof = None
               else:
   75:             self.eof = ''
  138:         self.commenters = '#'
  138:         self.wordchars = ('abcdfeghijklmnopqrstuvwxyz'
                                 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_')
  138:         if self.posix:
   63:             self.wordchars += ('ßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ'
                                      'ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞ')
  138:         self.whitespace = ' \t\r\n'
  138:         self.whitespace_split = False
  138:         self.quotes = '\'"'
  138:         self.escape = '\\'
  138:         self.escapedquotes = '"'
  138:         self.state = ' '
  138:         self.pushback = deque()
  138:         self.lineno = 1
  138:         self.debug = 0
  138:         self.token = ''
  138:         self.filestack = deque()
  138:         self.source = None
  138:         if self.debug:
>>>>>>             print 'shlex: reading from %s, line %d' \
>>>>>>                   % (self.instream, self.lineno)
       
    1:     def push_token(self, tok):
               "Push a token onto the stack popped by the get_token method"
   19:         if self.debug >= 1:
>>>>>>             print "shlex: pushing token " + repr(tok)
   19:         self.pushback.appendleft(tok)
       
    1:     def push_source(self, newstream, newfile=None):
               "Push an input source onto the lexer's input source stack."
>>>>>>         if isinstance(newstream, basestring):
>>>>>>             newstream = StringIO(newstream)
>>>>>>         self.filestack.appendleft((self.infile, self.instream, self.lineno))
>>>>>>         self.infile = newfile
>>>>>>         self.instream = newstream
>>>>>>         self.lineno = 1
>>>>>>         if self.debug:
>>>>>>             if newfile is not None:
>>>>>>                 print 'shlex: pushing to file %s' % (self.infile,)
                   else:
>>>>>>                 print 'shlex: pushing to stream %s' % (self.instream,)
       
    1:     def pop_source(self):
               "Pop the input source stack."
>>>>>>         self.instream.close()
>>>>>>         (self.infile, self.instream, self.lineno) = self.filestack.popleft()
>>>>>>         if self.debug:
>>>>>>             print 'shlex: popping to %s, line %d' \
>>>>>>                   % (self.instream, self.lineno)
>>>>>>         self.state = ' '
       
    1:     def get_token(self):
               "Get a token from the input stream (or from stack if it's nonempty)"
  581:         if self.pushback:
   29:             tok = self.pushback.popleft()
   29:             if self.debug >= 1:
>>>>>>                 print "shlex: popping token " + repr(tok)
   29:             return tok
               # No pushback.  Get a token.
  552:         raw = self.read_token()
               # Handle inclusions
  552:         if self.source is not None:
>>>>>>             while raw == self.source:
>>>>>>                 spec = self.sourcehook(self.read_token())
>>>>>>                 if spec:
>>>>>>                     (newfile, newstream) = spec
>>>>>>                     self.push_source(newstream, newfile)
>>>>>>                 raw = self.get_token()
               # Maybe we got EOF instead?
  552:         while raw == self.eof:
  137:             if not self.filestack:
  137:                 return self.eof
                   else:
>>>>>>                 self.pop_source()
>>>>>>                 raw = self.get_token()
               # Neither inclusion nor EOF
  415:         if self.debug >= 1:
>>>>>>             if raw != self.eof:
>>>>>>                 print "shlex: token=" + repr(raw)
                   else:
>>>>>>                 print "shlex: token=EOF"
  415:         return raw
       
    1:     def read_token(self):
  552:         quoted = False
  552:         escapedstate = ' '
 2884:         while True:
 2884:             nextchar = self.instream.read(1)
 2884:             if nextchar == '\n':
   22:                 self.lineno = self.lineno + 1
 2884:             if self.debug >= 3:
>>>>>>                 print "shlex: in state", repr(self.state), \
>>>>>>                       "I see character:", repr(nextchar)
 2884:             if self.state is None:
   95:                 self.token = ''        # past end of file
   95:                 break
 2789:             elif self.state == ' ':
  605:                 if not nextchar:
   42:                     self.state = None  # end of file
   42:                     break
  563:                 elif nextchar in self.whitespace:
  148:                     if self.debug >= 2:
>>>>>>                         print "shlex: I see whitespace in whitespace state"
  148:                     if self.token or (self.posix and quoted):
>>>>>>                         break   # emit current token
                           else:
>>>>>>                         continue
  415:                 elif nextchar in self.commenters:
>>>>>>                     self.instream.readline()
>>>>>>                     self.lineno = self.lineno + 1
  415:                 elif self.posix and nextchar in self.escape:
   11:                     escapedstate = 'a'
   11:                     self.state = nextchar
  404:                 elif nextchar in self.wordchars:
  264:                     self.token = nextchar
  264:                     self.state = 'a'
  140:                 elif nextchar in self.quotes:
  111:                     if not self.posix:
   61:                         self.token = nextchar
  111:                     self.state = nextchar
   29:                 elif self.whitespace_split:
    2:                     self.token = nextchar
    2:                     self.state = 'a'
                       else:
   27:                     self.token = nextchar
   27:                     if self.token or (self.posix and quoted):
   27:                         break   # emit current token
                           else:
>>>>>>                         continue
 2184:             elif self.state in self.quotes:
  681:                 quoted = True
  681:                 if not nextchar:      # end of file
>>>>>>                     if self.debug >= 2:
>>>>>>                         print "shlex: I see EOF in quotes state"
                           # XXX what error should be raised here?
>>>>>>                     raise ValueError, "No closing quotation"
  681:                 if nextchar == self.state:
  122:                     if not self.posix:
   61:                         self.token = self.token + nextchar
   61:                         self.state = ' '
   61:                         break
                           else:
   61:                         self.state = 'a'
  559:                 elif self.posix and nextchar in self.escape and \
   48:                      self.state in self.escapedquotes:
   42:                     escapedstate = self.state
   42:                     self.state = nextchar
                       else:
  517:                     self.token = self.token + nextchar
 1503:             elif self.state in self.escape:
   68:                 if not nextchar:      # end of file
>>>>>>                     if self.debug >= 2:
>>>>>>                         print "shlex: I see EOF in escape state"
                           # XXX what error should be raised here?
>>>>>>                     raise ValueError, "No escaped character"
                       # In posix shells, only the quote itself or the escape
                       # character may be escaped within quotes.
   68:                 if escapedstate in self.quotes and \
   42:                    nextchar != self.state and nextchar != escapedstate:
   22:                     self.token = self.token + self.state
   68:                 self.token = self.token + nextchar
   68:                 self.state = escapedstate
 1435:             elif self.state == 'a':
 1435:                 if not nextchar:
   95:                     self.state = None   # end of file
   95:                     break
 1340:                 elif nextchar in self.whitespace:
  221:                     if self.debug >= 2:
>>>>>>                         print "shlex: I see whitespace in word state"
  221:                     self.state = ' '
  221:                     if self.token or (self.posix and quoted):
  221:                         break   # emit current token
                           else:
>>>>>>                         continue
 1119:                 elif nextchar in self.commenters:
    2:                     self.instream.readline()
    2:                     self.lineno = self.lineno + 1
    2:                     if self.posix:
    1:                         self.state = ' '
    1:                         if self.token or (self.posix and quoted):
    1:                             break   # emit current token
                               else:
>>>>>>                             continue
 1117:                 elif self.posix and nextchar in self.quotes:
   11:                     self.state = nextchar
 1106:                 elif self.posix and nextchar in self.escape:
   15:                     escapedstate = 'a'
   15:                     self.state = nextchar
 1091:                 elif nextchar in self.wordchars or nextchar in self.quotes \
   14:                     or self.whitespace_split:
 1081:                     self.token = self.token + nextchar
                       else:
   10:                     self.pushback.appendleft(nextchar)
   10:                     if self.debug >= 2:
>>>>>>                         print "shlex: I see punctuation in word state"
   10:                     self.state = ' '
   10:                     if self.token or (self.posix and quoted):
   10:                         break   # emit current token
                           else:
>>>>>>                         continue
  552:         result = self.token
  552:         self.token = ''
  552:         if self.posix and not quoted and result == '':
   63:             result = None
  552:         if self.debug > 1:
>>>>>>             if result:
>>>>>>                 print "shlex: raw token=" + repr(result)
                   else:
>>>>>>                 print "shlex: raw token=EOF"
  552:         return result
       
    1:     def sourcehook(self, newfile):
               "Hook called on a filename to be sourced."
>>>>>>         if newfile[0] == '"':
>>>>>>             newfile = newfile[1:-1]
               # This implements cpp-like semantics for relative-path inclusion.
>>>>>>         if isinstance(self.infile, basestring) and not os.path.isabs(newfile):
>>>>>>             newfile = os.path.join(os.path.dirname(self.infile), newfile)
>>>>>>         return (newfile, open(newfile, "r"))
       
    1:     def error_leader(self, infile=None, lineno=None):
               "Emit a C-compiler-like, Emacs-friendly error-message leader."
>>>>>>         if infile is None:
>>>>>>             infile = self.infile
>>>>>>         if lineno is None:
>>>>>>             lineno = self.lineno
>>>>>>         return "\"%s\", line %d: " % (infile, lineno)
       
    1:     def __iter__(self):
   64:         return self
       
    1:     def next(self):
  186:         token = self.get_token()
  186:         if token == self.eof:
   64:             raise StopIteration
  122:         return token
       
    1: def split(s, comments=False, posix=True):
   62:     lex = shlex(s, posix=posix)
   62:     lex.whitespace_split = True
   62:     if not comments:
>>>>>>         lex.commenters = ''
   62:     return list(lex)
       
    1: if __name__ == '__main__':
>>>>>>     if len(sys.argv) == 1:
>>>>>>         lexer = shlex()
           else:
>>>>>>         file = sys.argv[1]
>>>>>>         lexer = shlex(open(file), file)
>>>>>>     while 1:
>>>>>>         tt = lexer.get_token()
>>>>>>         if tt:
>>>>>>             print "Token: " + repr(tt)
               else:
>>>>>>             break
