    1: """Tests for Lib/fractions.py."""
       
    1: from decimal import Decimal
    1: from test.test_support import run_unittest
    1: import math
    1: import numbers
    1: import operator
    1: import fractions
    1: import sys
    1: import unittest
    1: from copy import copy, deepcopy
    1: from cPickle import dumps, loads
    1: F = fractions.Fraction
    1: gcd = fractions.gcd
       
       # decorator for skipping tests on non-IEEE 754 platforms
    1: requires_IEEE_754 = unittest.skipUnless(
    1:     float.__getformat__("double").startswith("IEEE"),
    1:     "test requires IEEE 754 doubles")
       
    2: class DummyFloat(object):
    1:     """Dummy float class for testing comparisons with Fractions"""
       
    1:     def __init__(self, value):
    1:         if not isinstance(value, float):
>>>>>>             raise TypeError("DummyFloat can only be initialized from float")
    1:         self.value = value
       
    1:     def _richcmp(self, other, op):
   10:         if isinstance(other, numbers.Rational):
   10:             return op(F.from_float(self.value), other)
>>>>>>         elif isinstance(other, DummyFloat):
>>>>>>             return op(self.value, other.value)
               else:
>>>>>>             return NotImplemented
       
    5:     def __eq__(self, other): return self._richcmp(other, operator.eq)
    2:     def __le__(self, other): return self._richcmp(other, operator.le)
    3:     def __lt__(self, other): return self._richcmp(other, operator.lt)
    3:     def __ge__(self, other): return self._richcmp(other, operator.ge)
    2:     def __gt__(self, other): return self._richcmp(other, operator.gt)
       
           # shouldn't be calling __float__ at all when doing comparisons
    1:     def __float__(self):
>>>>>>         assert False, "__float__ should not be invoked for comparisons"
       
           # same goes for subtraction
    1:     def __sub__(self, other):
>>>>>>         assert False, "__sub__ should not be invoked for comparisons"
    1:     __rsub__ = __sub__
       
           # Silence Py3k warning
    1:     __hash__ = None
       
       
    2: class DummyRational(object):
    1:     """Test comparison of Fraction with a naive rational implementation."""
       
    1:     def __init__(self, num, den):
   28:         g = gcd(num, den)
   28:         self.num = num // g
   28:         self.den = den // g
       
    1:     def __eq__(self, other):
    4:         if isinstance(other, fractions.Fraction):
    4:             return (self.num == other._numerator and
    2:                     self.den == other._denominator)
               else:
>>>>>>             return NotImplemented
       
    1:     def __lt__(self, other):
    6:         return(self.num * other._denominator < self.den * other._numerator)
       
    1:     def __gt__(self, other):
    6:         return(self.num * other._denominator > self.den * other._numerator)
       
    1:     def __le__(self, other):
    6:         return(self.num * other._denominator <= self.den * other._numerator)
       
    1:     def __ge__(self, other):
    6:         return(self.num * other._denominator >= self.den * other._numerator)
       
           # this class is for testing comparisons; conversion to float
           # should never be used for a comparison, since it loses accuracy
    1:     def __float__(self):
>>>>>>         assert False, "__float__ should not be invoked"
       
           # Silence Py3k warning
    1:     __hash__ = None
       
       
    2: class DummyFraction(fractions.Fraction):
    1:     """Dummy Fraction subclass for copy and deepcopy testing."""
       
    2: class GcdTest(unittest.TestCase):
       
    1:     def testMisc(self):
    1:         self.assertEqual(0, gcd(0, 0))
    1:         self.assertEqual(1, gcd(1, 0))
    1:         self.assertEqual(-1, gcd(-1, 0))
    1:         self.assertEqual(1, gcd(0, 1))
    1:         self.assertEqual(-1, gcd(0, -1))
    1:         self.assertEqual(1, gcd(7, 1))
    1:         self.assertEqual(-1, gcd(7, -1))
    1:         self.assertEqual(1, gcd(-23, 15))
    1:         self.assertEqual(12, gcd(120, 84))
    1:         self.assertEqual(-12, gcd(84, -120))
       
       
    1: def _components(r):
   43:     return (r.numerator, r.denominator)
       
       
    2: class FractionTest(unittest.TestCase):
       
    1:     def assertTypedEquals(self, expected, actual):
               """Asserts that both the types and values are the same."""
   52:         self.assertEqual(type(expected), type(actual))
   52:         self.assertEqual(expected, actual)
       
    1:     def assertRaisesMessage(self, exc_type, message,
                                   callable, *args, **kwargs):
               """Asserts that callable(*args, **kwargs) raises exc_type(message)."""
   22:         try:
   22:             callable(*args, **kwargs)
   22:         except exc_type, e:
   22:             self.assertEqual(message, str(e))
               else:
>>>>>>             self.fail("%s not raised" % exc_type.__name__)
       
    1:     def testInit(self):
    1:         self.assertEqual((0, 1), _components(F()))
    1:         self.assertEqual((7, 1), _components(F(7)))
    1:         self.assertEqual((7, 3), _components(F(F(7, 3))))
       
    1:         self.assertEqual((-1, 1), _components(F(-1, 1)))
    1:         self.assertEqual((-1, 1), _components(F(1, -1)))
    1:         self.assertEqual((1, 1), _components(F(-2, -2)))
    1:         self.assertEqual((1, 2), _components(F(5, 10)))
    1:         self.assertEqual((7, 15), _components(F(7, 15)))
    1:         self.assertEqual((10**23, 1), _components(F(10**23)))
       
    1:         self.assertEqual((3, 77), _components(F(F(3, 7), 11)))
    1:         self.assertEqual((-9, 5), _components(F(2, F(-10, 9))))
    1:         self.assertEqual((2486, 2485), _components(F(F(22, 7), F(355, 113))))
       
    1:         self.assertRaisesMessage(ZeroDivisionError, "Fraction(12, 0)",
    1:                                  F, 12, 0)
    1:         self.assertRaises(TypeError, F, 1.5 + 3j)
       
    1:         self.assertRaises(TypeError, F, "3/2", 3)
    1:         self.assertRaises(TypeError, F, 3, 0j)
    1:         self.assertRaises(TypeError, F, 3, 1j)
       
    1:     @requires_IEEE_754
           def testInitFromFloat(self):
    1:         self.assertEqual((5, 2), _components(F(2.5)))
    1:         self.assertEqual((0, 1), _components(F(-0.0)))
    1:         self.assertEqual((3602879701896397, 36028797018963968),
    1:                          _components(F(0.1)))
    1:         self.assertRaises(TypeError, F, float('nan'))
    1:         self.assertRaises(TypeError, F, float('inf'))
    1:         self.assertRaises(TypeError, F, float('-inf'))
       
    1:     def testInitFromDecimal(self):
    1:         self.assertEqual((11, 10),
    1:                          _components(F(Decimal('1.1'))))
    1:         self.assertEqual((7, 200),
    1:                          _components(F(Decimal('3.5e-2'))))
    1:         self.assertEqual((0, 1),
    1:                          _components(F(Decimal('.000e20'))))
    1:         self.assertRaises(TypeError, F, Decimal('nan'))
    1:         self.assertRaises(TypeError, F, Decimal('snan'))
    1:         self.assertRaises(TypeError, F, Decimal('inf'))
    1:         self.assertRaises(TypeError, F, Decimal('-inf'))
       
    1:     def testFromString(self):
    1:         self.assertEqual((5, 1), _components(F("5")))
    1:         self.assertEqual((3, 2), _components(F("3/2")))
    1:         self.assertEqual((3, 2), _components(F(" \n  +3/2")))
    1:         self.assertEqual((-3, 2), _components(F("-3/2  ")))
    1:         self.assertEqual((13, 2), _components(F("    013/02 \n  ")))
    1:         self.assertEqual((13, 2), _components(F(u"    013/02 \n  ")))
       
    1:         self.assertEqual((16, 5), _components(F(" 3.2 ")))
    1:         self.assertEqual((-16, 5), _components(F(u" -3.2 ")))
    1:         self.assertEqual((-3, 1), _components(F(u" -3. ")))
    1:         self.assertEqual((3, 5), _components(F(u" .6 ")))
    1:         self.assertEqual((1, 3125), _components(F("32.e-5")))
    1:         self.assertEqual((1000000, 1), _components(F("1E+06")))
    1:         self.assertEqual((-12300, 1), _components(F("-1.23e4")))
    1:         self.assertEqual((0, 1), _components(F(" .0e+0\t")))
    1:         self.assertEqual((0, 1), _components(F("-0.000e0")))
       
       
    1:         self.assertRaisesMessage(
    1:             ZeroDivisionError, "Fraction(3, 0)",
    1:             F, "3/0")
    1:         self.assertRaisesMessage(
    1:             ValueError, "Invalid literal for Fraction: '3/'",
    1:             F, "3/")
    1:         self.assertRaisesMessage(
    1:             ValueError, "Invalid literal for Fraction: '/2'",
    1:             F, "/2")
    1:         self.assertRaisesMessage(
    1:             ValueError, "Invalid literal for Fraction: '3 /2'",
    1:             F, "3 /2")
    1:         self.assertRaisesMessage(
                   # Denominators don't need a sign.
    1:             ValueError, "Invalid literal for Fraction: '3/+2'",
    1:             F, "3/+2")
    1:         self.assertRaisesMessage(
                   # Imitate float's parsing.
    1:             ValueError, "Invalid literal for Fraction: '+ 3/2'",
    1:             F, "+ 3/2")
    1:         self.assertRaisesMessage(
                   # Avoid treating '.' as a regex special character.
    1:             ValueError, "Invalid literal for Fraction: '3a2'",
    1:             F, "3a2")
    1:         self.assertRaisesMessage(
                   # Don't accept combinations of decimals and fractions.
    1:             ValueError, "Invalid literal for Fraction: '3/7.2'",
    1:             F, "3/7.2")
    1:         self.assertRaisesMessage(
                   # Don't accept combinations of decimals and fractions.
    1:             ValueError, "Invalid literal for Fraction: '3.2/7'",
    1:             F, "3.2/7")
    1:         self.assertRaisesMessage(
                   # Allow 3. and .3, but not .
    1:             ValueError, "Invalid literal for Fraction: '.'",
    1:             F, ".")
       
    1:     def testImmutable(self):
    1:         r = F(7, 3)
    1:         r.__init__(2, 15)
    1:         self.assertEqual((7, 3), _components(r))
       
    1:         self.assertRaises(AttributeError, setattr, r, 'numerator', 12)
    1:         self.assertRaises(AttributeError, setattr, r, 'denominator', 6)
    1:         self.assertEqual((7, 3), _components(r))
       
               # But if you _really_ need to:
    1:         r._numerator = 4
    1:         r._denominator = 2
    1:         self.assertEqual((4, 2), _components(r))
               # Which breaks some important operations:
    1:         self.assertNotEqual(F(4, 2), r)
       
    1:     def testFromFloat(self):
    1:         self.assertRaises(TypeError, F.from_float, 3+4j)
    1:         self.assertEqual((10, 1), _components(F.from_float(10)))
    1:         bigint = 1234567890123456789
    1:         self.assertEqual((bigint, 1), _components(F.from_float(bigint)))
    1:         self.assertEqual((0, 1), _components(F.from_float(-0.0)))
    1:         self.assertEqual((10, 1), _components(F.from_float(10.0)))
    1:         self.assertEqual((-5, 2), _components(F.from_float(-2.5)))
    1:         self.assertEqual((99999999999999991611392, 1),
    1:                          _components(F.from_float(1e23)))
    1:         self.assertEqual(float(10**23), float(F.from_float(1e23)))
    1:         self.assertEqual((3602879701896397, 1125899906842624),
    1:                          _components(F.from_float(3.2)))
    1:         self.assertEqual(3.2, float(F.from_float(3.2)))
       
    1:         inf = 1e1000
    1:         nan = inf - inf
    1:         self.assertRaisesMessage(
    1:             TypeError, "Cannot convert inf to Fraction.",
    1:             F.from_float, inf)
    1:         self.assertRaisesMessage(
    1:             TypeError, "Cannot convert -inf to Fraction.",
    1:             F.from_float, -inf)
    1:         self.assertRaisesMessage(
    1:             TypeError, "Cannot convert nan to Fraction.",
    1:             F.from_float, nan)
       
    1:     def testFromDecimal(self):
    1:         self.assertRaises(TypeError, F.from_decimal, 3+4j)
    1:         self.assertEqual(F(10, 1), F.from_decimal(10))
    1:         self.assertEqual(F(0), F.from_decimal(Decimal("-0")))
    1:         self.assertEqual(F(5, 10), F.from_decimal(Decimal("0.5")))
    1:         self.assertEqual(F(5, 1000), F.from_decimal(Decimal("5e-3")))
    1:         self.assertEqual(F(5000), F.from_decimal(Decimal("5e3")))
    1:         self.assertEqual(1 - F(1, 10**30),
    1:                          F.from_decimal(Decimal("0." + "9" * 30)))
       
    1:         self.assertRaisesMessage(
    1:             TypeError, "Cannot convert Infinity to Fraction.",
    1:             F.from_decimal, Decimal("inf"))
    1:         self.assertRaisesMessage(
    1:             TypeError, "Cannot convert -Infinity to Fraction.",
    1:             F.from_decimal, Decimal("-inf"))
    1:         self.assertRaisesMessage(
    1:             TypeError, "Cannot convert NaN to Fraction.",
    1:             F.from_decimal, Decimal("nan"))
    1:         self.assertRaisesMessage(
    1:             TypeError, "Cannot convert sNaN to Fraction.",
    1:             F.from_decimal, Decimal("snan"))
       
    1:     def testLimitDenominator(self):
    1:         rpi = F('3.1415926535897932')
    1:         self.assertEqual(rpi.limit_denominator(10000), F(355, 113))
    1:         self.assertEqual(-rpi.limit_denominator(10000), F(-355, 113))
    1:         self.assertEqual(rpi.limit_denominator(113), F(355, 113))
    1:         self.assertEqual(rpi.limit_denominator(112), F(333, 106))
    1:         self.assertEqual(F(201, 200).limit_denominator(100), F(1))
    1:         self.assertEqual(F(201, 200).limit_denominator(101), F(102, 101))
    1:         self.assertEqual(F(0).limit_denominator(10000), F(0))
    3:         for i in (0, -1):
    2:             self.assertRaisesMessage(
    2:                 ValueError, "max_denominator should be at least 1",
    2:                 F(1).limit_denominator, i)
       
    1:     def testConversions(self):
    1:         self.assertTypedEquals(-1, math.trunc(F(-11, 10)))
    1:         self.assertTypedEquals(-1, int(F(-11, 10)))
    1:         self.assertTypedEquals(1, math.trunc(F(11, 10)))
    1:         self.assertEqual(False, bool(F(0, 1)))
    1:         self.assertEqual(True, bool(F(3, 2)))
    1:         self.assertTypedEquals(0.1, float(F(1, 10)))
       
               # Check that __float__ isn't implemented by converting the
               # numerator and denominator to float before dividing.
    1:         self.assertRaises(OverflowError, float, long('2'*400+'7'))
    1:         self.assertAlmostEqual(2.0/3,
    1:                                 float(F(long('2'*400+'7'), long('3'*400+'1'))))
       
    1:         self.assertTypedEquals(0.1+0j, complex(F(1,10)))
       
       
    1:     def testArithmetic(self):
    1:         self.assertEqual(F(1, 2), F(1, 10) + F(2, 5))
    1:         self.assertEqual(F(-3, 10), F(1, 10) - F(2, 5))
    1:         self.assertEqual(F(1, 25), F(1, 10) * F(2, 5))
    1:         self.assertEqual(F(1, 4), F(1, 10) / F(2, 5))
    1:         self.assertTypedEquals(2, F(9, 10) // F(2, 5))
    1:         self.assertTypedEquals(10**23, F(10**23, 1) // F(1))
    1:         self.assertEqual(F(2, 3), F(-7, 3) % F(3, 2))
    1:         self.assertEqual(F(8, 27), F(2, 3) ** F(3))
    1:         self.assertEqual(F(27, 8), F(2, 3) ** F(-3))
    1:         self.assertTypedEquals(2.0, F(4) ** F(1, 2))
    1:         self.assertEqual(F(1, 1), +F(1, 1))
               # Will return 1j in 3.0:
    1:         self.assertRaises(ValueError, pow, F(-1), F(1, 2))
       
    1:     def testMixedArithmetic(self):
    1:         self.assertTypedEquals(F(11, 10), F(1, 10) + 1)
    1:         self.assertTypedEquals(1.1, F(1, 10) + 1.0)
    1:         self.assertTypedEquals(1.1 + 0j, F(1, 10) + (1.0 + 0j))
    1:         self.assertTypedEquals(F(11, 10), 1 + F(1, 10))
    1:         self.assertTypedEquals(1.1, 1.0 + F(1, 10))
    1:         self.assertTypedEquals(1.1 + 0j, (1.0 + 0j) + F(1, 10))
       
    1:         self.assertTypedEquals(F(-9, 10), F(1, 10) - 1)
    1:         self.assertTypedEquals(-0.9, F(1, 10) - 1.0)
    1:         self.assertTypedEquals(-0.9 + 0j, F(1, 10) - (1.0 + 0j))
    1:         self.assertTypedEquals(F(9, 10), 1 - F(1, 10))
    1:         self.assertTypedEquals(0.9, 1.0 - F(1, 10))
    1:         self.assertTypedEquals(0.9 + 0j, (1.0 + 0j) - F(1, 10))
       
    1:         self.assertTypedEquals(F(1, 10), F(1, 10) * 1)
    1:         self.assertTypedEquals(0.1, F(1, 10) * 1.0)
    1:         self.assertTypedEquals(0.1 + 0j, F(1, 10) * (1.0 + 0j))
    1:         self.assertTypedEquals(F(1, 10), 1 * F(1, 10))
    1:         self.assertTypedEquals(0.1, 1.0 * F(1, 10))
    1:         self.assertTypedEquals(0.1 + 0j, (1.0 + 0j) * F(1, 10))
       
    1:         self.assertTypedEquals(F(1, 10), F(1, 10) / 1)
    1:         self.assertTypedEquals(0.1, F(1, 10) / 1.0)
    1:         self.assertTypedEquals(0.1 + 0j, F(1, 10) / (1.0 + 0j))
    1:         self.assertTypedEquals(F(10, 1), 1 / F(1, 10))
    1:         self.assertTypedEquals(10.0, 1.0 / F(1, 10))
    1:         self.assertTypedEquals(10.0 + 0j, (1.0 + 0j) / F(1, 10))
       
    1:         self.assertTypedEquals(0, F(1, 10) // 1)
    1:         self.assertTypedEquals(0.0, F(1, 10) // 1.0)
    1:         self.assertTypedEquals(10, 1 // F(1, 10))
    1:         self.assertTypedEquals(10**23, 10**22 // F(1, 10))
    1:         self.assertTypedEquals(10.0, 1.0 // F(1, 10))
       
    1:         self.assertTypedEquals(F(1, 10), F(1, 10) % 1)
    1:         self.assertTypedEquals(0.1, F(1, 10) % 1.0)
    1:         self.assertTypedEquals(F(0, 1), 1 % F(1, 10))
    1:         self.assertTypedEquals(0.0, 1.0 % F(1, 10))
       
               # No need for divmod since we don't override it.
       
               # ** has more interesting conversion rules.
    1:         self.assertTypedEquals(F(100, 1), F(1, 10) ** -2)
    1:         self.assertTypedEquals(F(100, 1), F(10, 1) ** 2)
    1:         self.assertTypedEquals(0.1, F(1, 10) ** 1.0)
    1:         self.assertTypedEquals(0.1 + 0j, F(1, 10) ** (1.0 + 0j))
    1:         self.assertTypedEquals(4 , 2 ** F(2, 1))
               # Will return 1j in 3.0:
    1:         self.assertRaises(ValueError, pow, (-1), F(1, 2))
    1:         self.assertTypedEquals(F(1, 4) , 2 ** F(-2, 1))
    1:         self.assertTypedEquals(2.0 , 4 ** F(1, 2))
    1:         self.assertTypedEquals(0.25, 2.0 ** F(-2, 1))
    1:         self.assertTypedEquals(1.0 + 0j, (1.0 + 0j) ** F(1, 10))
       
    1:     def testMixingWithDecimal(self):
               # Decimal refuses mixed comparisons.
    1:         self.assertRaisesMessage(
    1:             TypeError,
    1:             "unsupported operand type(s) for +: 'Fraction' and 'Decimal'",
    1:             operator.add, F(3,11), Decimal('3.1415926'))
    1:         self.assertRaisesMessage(
    1:             TypeError,
    1:             "unsupported operand type(s) for +: 'Decimal' and 'Fraction'",
    1:             operator.add, Decimal('3.1415926'), F(3,11))
    1:         self.assertNotEqual(F(5, 2), Decimal('2.5'))
       
    1:     def testComparisons(self):
    1:         self.assertTrue(F(1, 2) < F(2, 3))
    1:         self.assertFalse(F(1, 2) < F(1, 2))
    1:         self.assertTrue(F(1, 2) <= F(2, 3))
    1:         self.assertTrue(F(1, 2) <= F(1, 2))
    1:         self.assertFalse(F(2, 3) <= F(1, 2))
    1:         self.assertTrue(F(1, 2) == F(1, 2))
    1:         self.assertFalse(F(1, 2) == F(1, 3))
    1:         self.assertFalse(F(1, 2) != F(1, 2))
    1:         self.assertTrue(F(1, 2) != F(1, 3))
       
    1:     def testComparisonsDummyRational(self):
    1:         self.assertTrue(F(1, 2) == DummyRational(1, 2))
    1:         self.assertTrue(DummyRational(1, 2) == F(1, 2))
    1:         self.assertFalse(F(1, 2) == DummyRational(3, 4))
    1:         self.assertFalse(DummyRational(3, 4) == F(1, 2))
       
    1:         self.assertTrue(F(1, 2) < DummyRational(3, 4))
    1:         self.assertFalse(F(1, 2) < DummyRational(1, 2))
    1:         self.assertFalse(F(1, 2) < DummyRational(1, 7))
    1:         self.assertFalse(F(1, 2) > DummyRational(3, 4))
    1:         self.assertFalse(F(1, 2) > DummyRational(1, 2))
    1:         self.assertTrue(F(1, 2) > DummyRational(1, 7))
    1:         self.assertTrue(F(1, 2) <= DummyRational(3, 4))
    1:         self.assertTrue(F(1, 2) <= DummyRational(1, 2))
    1:         self.assertFalse(F(1, 2) <= DummyRational(1, 7))
    1:         self.assertFalse(F(1, 2) >= DummyRational(3, 4))
    1:         self.assertTrue(F(1, 2) >= DummyRational(1, 2))
    1:         self.assertTrue(F(1, 2) >= DummyRational(1, 7))
       
    1:         self.assertTrue(DummyRational(1, 2) < F(3, 4))
    1:         self.assertFalse(DummyRational(1, 2) < F(1, 2))
    1:         self.assertFalse(DummyRational(1, 2) < F(1, 7))
    1:         self.assertFalse(DummyRational(1, 2) > F(3, 4))
    1:         self.assertFalse(DummyRational(1, 2) > F(1, 2))
    1:         self.assertTrue(DummyRational(1, 2) > F(1, 7))
    1:         self.assertTrue(DummyRational(1, 2) <= F(3, 4))
    1:         self.assertTrue(DummyRational(1, 2) <= F(1, 2))
    1:         self.assertFalse(DummyRational(1, 2) <= F(1, 7))
    1:         self.assertFalse(DummyRational(1, 2) >= F(3, 4))
    1:         self.assertTrue(DummyRational(1, 2) >= F(1, 2))
    1:         self.assertTrue(DummyRational(1, 2) >= F(1, 7))
       
    1:     def testComparisonsDummyFloat(self):
    1:         x = DummyFloat(1./3.)
    1:         y = F(1, 3)
    1:         self.assertTrue(x != y)
    1:         self.assertTrue(x < y or x > y)
    1:         self.assertFalse(x == y)
    1:         self.assertFalse(x <= y and x >= y)
    1:         self.assertTrue(y != x)
    1:         self.assertTrue(y < x or y > x)
    1:         self.assertFalse(y == x)
    1:         self.assertFalse(y <= x and y >= x)
       
    1:     def testMixedLess(self):
    1:         self.assertTrue(2 < F(5, 2))
    1:         self.assertFalse(2 < F(4, 2))
    1:         self.assertTrue(F(5, 2) < 3)
    1:         self.assertFalse(F(4, 2) < 2)
       
    1:         self.assertTrue(F(1, 2) < 0.6)
    1:         self.assertFalse(F(1, 2) < 0.4)
    1:         self.assertTrue(0.4 < F(1, 2))
    1:         self.assertFalse(0.5 < F(1, 2))
       
    1:         self.assertFalse(float('inf') < F(1, 2))
    1:         self.assertTrue(float('-inf') < F(0, 10))
    1:         self.assertFalse(float('nan') < F(-3, 7))
    1:         self.assertTrue(F(1, 2) < float('inf'))
    1:         self.assertFalse(F(17, 12) < float('-inf'))
    1:         self.assertFalse(F(144, -89) < float('nan'))
       
    1:     def testMixedLessEqual(self):
    1:         self.assertTrue(0.5 <= F(1, 2))
    1:         self.assertFalse(0.6 <= F(1, 2))
    1:         self.assertTrue(F(1, 2) <= 0.5)
    1:         self.assertFalse(F(1, 2) <= 0.4)
    1:         self.assertTrue(2 <= F(4, 2))
    1:         self.assertFalse(2 <= F(3, 2))
    1:         self.assertTrue(F(4, 2) <= 2)
    1:         self.assertFalse(F(5, 2) <= 2)
       
    1:         self.assertFalse(float('inf') <= F(1, 2))
    1:         self.assertTrue(float('-inf') <= F(0, 10))
    1:         self.assertFalse(float('nan') <= F(-3, 7))
    1:         self.assertTrue(F(1, 2) <= float('inf'))
    1:         self.assertFalse(F(17, 12) <= float('-inf'))
    1:         self.assertFalse(F(144, -89) <= float('nan'))
       
    1:     def testBigFloatComparisons(self):
               # Because 10**23 can't be represented exactly as a float:
    1:         self.assertFalse(F(10**23) == float(10**23))
               # The first test demonstrates why these are important.
    1:         self.assertFalse(1e23 < float(F(math.trunc(1e23) + 1)))
    1:         self.assertTrue(1e23 < F(math.trunc(1e23) + 1))
    1:         self.assertFalse(1e23 <= F(math.trunc(1e23) - 1))
    1:         self.assertTrue(1e23 > F(math.trunc(1e23) - 1))
    1:         self.assertFalse(1e23 >= F(math.trunc(1e23) + 1))
       
    1:     def testBigComplexComparisons(self):
    1:         self.assertFalse(F(10**23) == complex(10**23))
    1:         self.assertRaises(TypeError, operator.gt, F(10**23), complex(10**23))
    1:         self.assertRaises(TypeError, operator.le, F(10**23), complex(10**23))
       
    1:         x = F(3, 8)
    1:         z = complex(0.375, 0.0)
    1:         w = complex(0.375, 0.2)
    1:         self.assertTrue(x == z)
    1:         self.assertFalse(x != z)
    1:         self.assertFalse(x == w)
    1:         self.assertTrue(x != w)
    5:         for op in operator.lt, operator.le, operator.gt, operator.ge:
    4:             self.assertRaises(TypeError, op, x, z)
    4:             self.assertRaises(TypeError, op, z, x)
    4:             self.assertRaises(TypeError, op, x, w)
    4:             self.assertRaises(TypeError, op, w, x)
       
    1:     def testMixedEqual(self):
    1:         self.assertTrue(0.5 == F(1, 2))
    1:         self.assertFalse(0.6 == F(1, 2))
    1:         self.assertTrue(F(1, 2) == 0.5)
    1:         self.assertFalse(F(1, 2) == 0.4)
    1:         self.assertTrue(2 == F(4, 2))
    1:         self.assertFalse(2 == F(3, 2))
    1:         self.assertTrue(F(4, 2) == 2)
    1:         self.assertFalse(F(5, 2) == 2)
    1:         self.assertFalse(F(5, 2) == float('nan'))
    1:         self.assertFalse(float('nan') == F(3, 7))
    1:         self.assertFalse(F(5, 2) == float('inf'))
    1:         self.assertFalse(float('-inf') == F(2, 5))
       
    1:     def testStringification(self):
    1:         self.assertEqual("Fraction(7, 3)", repr(F(7, 3)))
    1:         self.assertEqual("Fraction(6283185307, 2000000000)",
    1:                          repr(F('3.1415926535')))
    1:         self.assertEqual("Fraction(-1, 100000000000000000000)",
    1:                          repr(F(1, -10**20)))
    1:         self.assertEqual("7/3", str(F(7, 3)))
    1:         self.assertEqual("7", str(F(7, 1)))
       
    1:     def testHash(self):
    1:         self.assertEqual(hash(2.5), hash(F(5, 2)))
    1:         self.assertEqual(hash(10**50), hash(F(10**50)))
    1:         self.assertNotEqual(hash(float(10**23)), hash(F(10**23)))
       
    1:     def testApproximatePi(self):
               # Algorithm borrowed from
               # http://docs.python.org/lib/decimal-recipes.html
    1:         three = F(3)
    1:         lasts, t, s, n, na, d, da = 0, three, 3, 1, 0, 0, 24
   14:         while abs(s - lasts) > F(1, 10**9):
   13:             lasts = s
   13:             n, na = n+na, na+8
   13:             d, da = d+da, da+32
   13:             t = (t * n) / d
   13:             s += t
    1:         self.assertAlmostEqual(math.pi, s)
       
    1:     def testApproximateCos1(self):
               # Algorithm borrowed from
               # http://docs.python.org/lib/decimal-recipes.html
    1:         x = F(1)
    1:         i, lasts, s, fact, num, sign = 0, 0, F(1), 1, 1, 1
    8:         while abs(s - lasts) > F(1, 10**9):
    7:             lasts = s
    7:             i += 2
    7:             fact *= i * (i-1)
    7:             num *= x * x
    7:             sign *= -1
    7:             s += num / fact * sign
    1:         self.assertAlmostEqual(math.cos(1), s)
       
    1:     def test_copy_deepcopy_pickle(self):
    1:         r = F(13, 7)
    1:         dr = DummyFraction(13, 7)
    1:         self.assertEqual(r, loads(dumps(r)))
    1:         self.assertEqual(id(r), id(copy(r)))
    1:         self.assertEqual(id(r), id(deepcopy(r)))
    1:         self.assertNotEqual(id(dr), id(copy(dr)))
    1:         self.assertNotEqual(id(dr), id(deepcopy(dr)))
    1:         self.assertTypedEquals(dr, copy(dr))
    1:         self.assertTypedEquals(dr, deepcopy(dr))
       
    1:     def test_slots(self):
               # Issue 4998
    1:         r = F(13, 7)
    1:         self.assertRaises(AttributeError, setattr, r, 'a', 10)
       
    1: def test_main():
    1:     run_unittest(FractionTest, GcdTest)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
