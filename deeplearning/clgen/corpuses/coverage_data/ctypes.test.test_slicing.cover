    1: import unittest
    1: from ctypes import *
    1: from ctypes.test import need_symbol
       
    1: import _ctypes_test
       
    2: class SlicesTestCase(unittest.TestCase):
    1:     def test_getslice_cint(self):
    1:         a = (c_int * 100)(*xrange(1100, 1200))
    1:         b = range(1100, 1200)
    1:         self.assertEqual(a[0:2], b[0:2])
    1:         self.assertEqual(a[0:2:], b[0:2:])
    1:         self.assertEqual(len(a), len(b))
    1:         self.assertEqual(a[5:7], b[5:7])
    1:         self.assertEqual(a[5:7:], b[5:7:])
    1:         self.assertEqual(a[-1], b[-1])
    1:         self.assertEqual(a[:], b[:])
    1:         self.assertEqual(a[::], b[::])
    1:         self.assertEqual(a[10::-1], b[10::-1])
    1:         self.assertEqual(a[30:20:-1], b[30:20:-1])
    1:         self.assertEqual(a[:12:6], b[:12:6])
    1:         self.assertEqual(a[2:6:4], b[2:6:4])
       
    1:         a[0:5] = range(5, 10)
    1:         self.assertEqual(a[0:5], range(5, 10))
    1:         self.assertEqual(a[0:5:], range(5, 10))
    1:         self.assertEqual(a[4::-1], range(9, 4, -1))
       
    1:     def test_setslice_cint(self):
    1:         a = (c_int * 100)(*xrange(1100, 1200))
    1:         b = range(1100, 1200)
       
    1:         a[32:47] = range(32, 47)
    1:         self.assertEqual(a[32:47], range(32, 47))
    1:         a[32:47] = range(132, 147)
    1:         self.assertEqual(a[32:47:], range(132, 147))
    1:         a[46:31:-1] = range(232, 247)
    1:         self.assertEqual(a[32:47:1], range(246, 231, -1))
       
    1:         a[32:47] = range(1132, 1147)
    1:         self.assertEqual(a[:], b)
    1:         a[32:47:7] = range(3)
    1:         b[32:47:7] = range(3)
    1:         self.assertEqual(a[:], b)
    1:         a[33::-3] = range(12)
    1:         b[33::-3] = range(12)
    1:         self.assertEqual(a[:], b)
       
    1:         from operator import setslice, setitem
       
               # TypeError: int expected instead of str instance
    1:         self.assertRaises(TypeError, setslice, a, 0, 5, "abcde")
    1:         self.assertRaises(TypeError, setitem, a, slice(0, 5), "abcde")
               # TypeError: int expected instead of str instance
    1:         self.assertRaises(TypeError, setslice, a, 0, 5, ["a", "b", "c", "d", "e"])
    1:         self.assertRaises(TypeError, setitem, a, slice(0, 5),
    1:                           ["a", "b", "c", "d", "e"])
               # TypeError: int expected instead of float instance
    1:         self.assertRaises(TypeError, setslice, a, 0, 5, [1, 2, 3, 4, 3.14])
    1:         self.assertRaises(TypeError, setitem, a, slice(0, 5),
    1:                           [1, 2, 3, 4, 3.14])
               # ValueError: Can only assign sequence of same size
    1:         self.assertRaises(ValueError, setslice, a, 0, 5, range(32))
    1:         self.assertRaises(ValueError, setitem, a, slice(0, 5), range(32))
       
    1:     def test_char_ptr(self):
    1:         s = "abcdefghijklmnopqrstuvwxyz"
       
    1:         dll = CDLL(_ctypes_test.__file__)
    1:         dll.my_strdup.restype = POINTER(c_char)
    1:         dll.my_free.restype = None
    1:         res = dll.my_strdup(s)
    1:         self.assertEqual(res[:len(s)], s)
    1:         self.assertEqual(res[:3], s[:3])
    1:         self.assertEqual(res[:len(s):], s)
    1:         self.assertEqual(res[len(s)-1:-1:-1], s[::-1])
    1:         self.assertEqual(res[len(s)-1:5:-7], s[:5:-7])
    1:         self.assertEqual(res[0:-1:-1], s[0::-1])
       
    1:         import operator
    1:         self.assertRaises(ValueError, operator.getitem,
    1:                           res, slice(None, None, None))
    1:         self.assertRaises(ValueError, operator.getitem,
    1:                           res, slice(0, None, None))
    1:         self.assertRaises(ValueError, operator.getitem,
    1:                           res, slice(None, 5, -1))
    1:         self.assertRaises(ValueError, operator.getitem,
    1:                           res, slice(-5, None, None))
       
    1:         self.assertRaises(TypeError, operator.setslice,
    1:                           res, 0, 5, u"abcde")
    1:         self.assertRaises(TypeError, operator.setitem,
    1:                           res, slice(0, 5), u"abcde")
    1:         dll.my_free(res)
       
    1:         dll.my_strdup.restype = POINTER(c_byte)
    1:         res = dll.my_strdup(s)
    1:         self.assertEqual(res[:len(s)], range(ord("a"), ord("z")+1))
    1:         self.assertEqual(res[:len(s):], range(ord("a"), ord("z")+1))
    1:         dll.my_free(res)
       
    1:     def test_char_ptr_with_free(self):
    1:         dll = CDLL(_ctypes_test.__file__)
    1:         s = "abcdefghijklmnopqrstuvwxyz"
       
    2:         class allocated_c_char_p(c_char_p):
    1:             pass
       
    1:         dll.my_free.restype = None
    1:         def errcheck(result, func, args):
    1:             retval = result.value
    1:             dll.my_free(result)
    1:             return retval
       
    1:         dll.my_strdup.restype = allocated_c_char_p
    1:         dll.my_strdup.errcheck = errcheck
    1:         try:
    1:             res = dll.my_strdup(s)
    1:             self.assertEqual(res, s)
               finally:
    1:             del dll.my_strdup.errcheck
       
       
    1:     def test_char_array(self):
    1:         s = "abcdefghijklmnopqrstuvwxyz\0"
       
    1:         p = (c_char * 27)(*s)
    1:         self.assertEqual(p[:], s)
    1:         self.assertEqual(p[::], s)
    1:         self.assertEqual(p[::-1], s[::-1])
    1:         self.assertEqual(p[5::-2], s[5::-2])
    1:         self.assertEqual(p[2:5:-3], s[2:5:-3])
       
       
    1:     @need_symbol('c_wchar')
           def test_wchar_ptr(self):
    1:         s = u"abcdefghijklmnopqrstuvwxyz\0"
       
    1:         dll = CDLL(_ctypes_test.__file__)
    1:         dll.my_wcsdup.restype = POINTER(c_wchar)
    1:         dll.my_wcsdup.argtypes = POINTER(c_wchar),
    1:         dll.my_free.restype = None
    1:         res = dll.my_wcsdup(s)
    1:         self.assertEqual(res[:len(s)], s)
    1:         self.assertEqual(res[:len(s):], s)
    1:         self.assertEqual(res[len(s)-1:-1:-1], s[::-1])
    1:         self.assertEqual(res[len(s)-1:5:-7], s[:5:-7])
       
    1:         import operator
    1:         self.assertRaises(TypeError, operator.setslice,
    1:                           res, 0, 5, u"abcde")
    1:         self.assertRaises(TypeError, operator.setitem,
    1:                           res, slice(0, 5), u"abcde")
    1:         dll.my_free(res)
       
    1:         if sizeof(c_wchar) == sizeof(c_short):
>>>>>>             dll.my_wcsdup.restype = POINTER(c_short)
    1:         elif sizeof(c_wchar) == sizeof(c_int):
    1:             dll.my_wcsdup.restype = POINTER(c_int)
>>>>>>         elif sizeof(c_wchar) == sizeof(c_long):
>>>>>>             dll.my_wcsdup.restype = POINTER(c_long)
               else:
>>>>>>             self.skipTest('Pointers to c_wchar are not supported')
    1:         res = dll.my_wcsdup(s)
    1:         tmpl = range(ord("a"), ord("z")+1)
    1:         self.assertEqual(res[:len(s)-1], tmpl)
    1:         self.assertEqual(res[:len(s)-1:], tmpl)
    1:         self.assertEqual(res[len(s)-2:-1:-1], tmpl[::-1])
    1:         self.assertEqual(res[len(s)-2:5:-7], tmpl[:5:-7])
    1:         dll.my_free(res)
       
       ################################################################
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
