       #
       # Package analogous to 'threading.py' but using processes
       #
       # multiprocessing/__init__.py
       #
       # This package is intended to duplicate the functionality (and much of
       # the API) of threading.py but uses processes instead of threads.  A
       # subpackage 'multiprocessing.dummy' has the same API but is a simple
       # wrapper for 'threading'.
       #
       # Try calling `multiprocessing.doc.main()` to read the html
       # documentation in a webbrowser.
       #
       #
       # Copyright (c) 2006-2008, R Oudkerk
       # All rights reserved.
       #
       # Redistribution and use in source and binary forms, with or without
       # modification, are permitted provided that the following conditions
       # are met:
       #
       # 1. Redistributions of source code must retain the above copyright
       #    notice, this list of conditions and the following disclaimer.
       # 2. Redistributions in binary form must reproduce the above copyright
       #    notice, this list of conditions and the following disclaimer in the
       #    documentation and/or other materials provided with the distribution.
       # 3. Neither the name of author nor the names of any contributors may be
       #    used to endorse or promote products derived from this software
       #    without specific prior written permission.
       #
       # THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
       # ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
       # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
       # ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
       # FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
       # DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
       # OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
       # HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
       # LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
       # OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
       # SUCH DAMAGE.
       #
       
    1: __version__ = '0.70a1'
       
       __all__ = [
    1:     'Process', 'current_process', 'active_children', 'freeze_support',
    1:     'Manager', 'Pipe', 'cpu_count', 'log_to_stderr', 'get_logger',
    1:     'allow_connection_pickling', 'BufferTooShort', 'TimeoutError',
    1:     'Lock', 'RLock', 'Semaphore', 'BoundedSemaphore', 'Condition',
    1:     'Event', 'Queue', 'JoinableQueue', 'Pool', 'Value', 'Array',
    1:     'RawValue', 'RawArray', 'SUBDEBUG', 'SUBWARNING',
           ]
       
    1: __author__ = 'R. Oudkerk (r.m.oudkerk@gmail.com)'
       
       #
       # Imports
       #
       
    1: import os
    1: import sys
       
    1: from multiprocessing.process import Process, current_process, active_children
    1: from multiprocessing.util import SUBDEBUG, SUBWARNING
       
       #
       # Exceptions
       #
       
    2: class ProcessError(Exception):
    1:     pass
       
    2: class BufferTooShort(ProcessError):
    1:     pass
       
    2: class TimeoutError(ProcessError):
    1:     pass
       
    2: class AuthenticationError(ProcessError):
    1:     pass
       
       # This is down here because _multiprocessing uses BufferTooShort
    1: import _multiprocessing
       
       #
       # Definitions not depending on native semaphores
       #
       
    1: def Manager():
           '''
           Returns a manager associated with a running server process
       
           The managers methods such as `Lock()`, `Condition()` and `Queue()`
           can be used to create shared objects.
           '''
    2:     from multiprocessing.managers import SyncManager
    2:     m = SyncManager()
    2:     m.start()
    2:     return m
       
    1: def Pipe(duplex=True):
           '''
           Returns two connection object connected by a pipe
           '''
   58:     from multiprocessing.connection import Pipe
   58:     return Pipe(duplex)
       
    1: def cpu_count():
           '''
           Returns the number of CPUs in the system
           '''
    3:     if sys.platform == 'win32':
>>>>>>         try:
>>>>>>             num = int(os.environ['NUMBER_OF_PROCESSORS'])
>>>>>>         except (ValueError, KeyError):
>>>>>>             num = 0
    3:     elif 'bsd' in sys.platform or sys.platform == 'darwin':
    3:         comm = '/sbin/sysctl -n hw.ncpu'
    3:         if sys.platform == 'darwin':
    3:             comm = '/usr' + comm
    3:         try:
    3:             with os.popen(comm) as p:
    3:                 num = int(p.read())
>>>>>>         except ValueError:
>>>>>>             num = 0
           else:
>>>>>>         try:
>>>>>>             num = os.sysconf('SC_NPROCESSORS_ONLN')
>>>>>>         except (ValueError, OSError, AttributeError):
>>>>>>             num = 0
       
    3:     if num >= 1:
    3:         return num
           else:
>>>>>>         raise NotImplementedError('cannot determine number of cpus')
       
    1: def freeze_support():
           '''
           Check whether this is a fake forked process in a frozen executable.
           If so then run code specified by commandline and exit.
           '''
>>>>>>     if sys.platform == 'win32' and getattr(sys, 'frozen', False):
>>>>>>         from multiprocessing.forking import freeze_support
>>>>>>         freeze_support()
       
    1: def get_logger():
           '''
           Return package logger -- if it does not already exist then it is created
           '''
    3:     from multiprocessing.util import get_logger
    3:     return get_logger()
       
    1: def log_to_stderr(level=None):
           '''
           Turn on logging and add a handler which prints to stderr
           '''
>>>>>>     from multiprocessing.util import log_to_stderr
>>>>>>     return log_to_stderr(level)
       
    1: def allow_connection_pickling():
           '''
           Install support for sending connections and sockets between processes
           '''
>>>>>>     from multiprocessing import reduction
       
       #
       # Definitions depending on native semaphores
       #
       
    1: def Lock():
           '''
           Returns a non-recursive lock object
           '''
    4:     from multiprocessing.synchronize import Lock
    4:     return Lock()
       
    1: def RLock():
           '''
           Returns a recursive lock object
           '''
   19:     from multiprocessing.synchronize import RLock
   19:     return RLock()
       
    1: def Condition(lock=None):
           '''
           Returns a condition object
           '''
    3:     from multiprocessing.synchronize import Condition
    3:     return Condition(lock)
       
    1: def Semaphore(value=1):
           '''
           Returns a semaphore object
           '''
    6:     from multiprocessing.synchronize import Semaphore
    6:     return Semaphore(value)
       
    1: def BoundedSemaphore(value=1):
           '''
           Returns a bounded semaphore object
           '''
    1:     from multiprocessing.synchronize import BoundedSemaphore
    1:     return BoundedSemaphore(value)
       
    1: def Event():
           '''
           Returns an event object
           '''
    6:     from multiprocessing.synchronize import Event
    6:     return Event()
       
    1: def Queue(maxsize=0):
           '''
           Returns a queue object
           '''
    9:     from multiprocessing.queues import Queue
    9:     return Queue(maxsize)
       
    1: def JoinableQueue(maxsize=0):
           '''
           Returns a queue object
           '''
    1:     from multiprocessing.queues import JoinableQueue
    1:     return JoinableQueue(maxsize)
       
    1: def Pool(processes=None, initializer=None, initargs=(), maxtasksperchild=None):
           '''
           Returns a process pool object
           '''
   17:     from multiprocessing.pool import Pool
   17:     return Pool(processes, initializer, initargs, maxtasksperchild)
       
    1: def RawValue(typecode_or_type, *args):
           '''
           Returns a shared object
           '''
    5:     from multiprocessing.sharedctypes import RawValue
    5:     return RawValue(typecode_or_type, *args)
       
    1: def RawArray(typecode_or_type, size_or_initializer):
           '''
           Returns a shared array
           '''
    3:     from multiprocessing.sharedctypes import RawArray
    3:     return RawArray(typecode_or_type, size_or_initializer)
       
    1: def Value(typecode_or_type, *args, **kwds):
           '''
           Returns a synchronized shared object
           '''
    9:     from multiprocessing.sharedctypes import Value
    9:     return Value(typecode_or_type, *args, **kwds)
       
    1: def Array(typecode_or_type, size_or_initializer, **kwds):
           '''
           Returns a synchronized shared array
           '''
   14:     from multiprocessing.sharedctypes import Array
   14:     return Array(typecode_or_type, size_or_initializer, **kwds)
       
       #
       #
       #
       
    1: if sys.platform == 'win32':
       
>>>>>>     def set_executable(executable):
               '''
               Sets the path to a python.exe or pythonw.exe binary used to run
               child processes on Windows instead of sys.executable.
               Useful for people embedding Python.
               '''
>>>>>>         from multiprocessing.forking import set_executable
>>>>>>         set_executable(executable)
       
>>>>>>     __all__ += ['set_executable']
