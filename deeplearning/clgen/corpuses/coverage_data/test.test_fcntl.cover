       """Test program for the fcntl C module.
       
       OS/2+EMX doesn't support the file locking operations.
       
    1: """
    1: import os
    1: import struct
    1: import sys
    1: import unittest
    1: from test.test_support import (verbose, TESTFN, unlink, run_unittest,
           import_module, cpython_only)
       
       # Skip test if no fcntl module.
    1: fcntl = import_module('fcntl')
       
       
       # TODO - Write tests for flock() and lockf().
       
    1: def get_lockdata():
    1:     if sys.platform.startswith('atheos'):
>>>>>>         start_len = "qq"
           else:
    1:         try:
    1:             os.O_LARGEFILE
    1:         except AttributeError:
    1:             start_len = "ll"
               else:
>>>>>>             start_len = "qq"
       
    1:     if (sys.platform.startswith(('netbsd', 'freebsd', 'openbsd', 'bsdos'))
    1:         or sys.platform == 'darwin'):
    1:         if struct.calcsize('l') == 8:
    1:             off_t = 'l'
    1:             pid_t = 'i'
               else:
>>>>>>             off_t = 'lxxxx'
>>>>>>             pid_t = 'l'
    1:         lockdata = struct.pack(off_t + off_t + pid_t + 'hh', 0, 0, 0,
    1:                                fcntl.F_WRLCK, 0)
>>>>>>     elif sys.platform in ['aix3', 'aix4', 'hp-uxB', 'unixware7']:
>>>>>>         lockdata = struct.pack('hhlllii', fcntl.F_WRLCK, 0, 0, 0, 0, 0, 0)
>>>>>>     elif sys.platform in ['os2emx']:
>>>>>>         lockdata = None
           else:
>>>>>>         lockdata = struct.pack('hh'+start_len+'hh', fcntl.F_WRLCK, 0, 0, 0, 0, 0)
    1:     if lockdata:
    1:         if verbose:
>>>>>>             print 'struct.pack: ', repr(lockdata)
    1:     return lockdata
       
    1: lockdata = get_lockdata()
       
       
    2: class BadFile:
    1:     def __init__(self, fn):
    4:         self.fn = fn
    1:     def fileno(self):
    8:         return self.fn
       
    2: class TestFcntl(unittest.TestCase):
       
    1:     def setUp(self):
    5:         self.f = None
       
    1:     def tearDown(self):
    5:         if self.f and not self.f.closed:
>>>>>>             self.f.close()
    5:         unlink(TESTFN)
       
    1:     def test_fcntl_fileno(self):
               # the example from the library docs
    1:         self.f = open(TESTFN, 'w')
    1:         rv = fcntl.fcntl(self.f.fileno(), fcntl.F_SETFL, os.O_NONBLOCK)
    1:         if verbose:
>>>>>>             print 'Status from fcntl with O_NONBLOCK: ', rv
    1:         if sys.platform not in ['os2emx']:
    1:             rv = fcntl.fcntl(self.f.fileno(), fcntl.F_SETLKW, lockdata)
    1:             if verbose:
>>>>>>                 print 'String from fcntl with F_SETLKW: ', repr(rv)
    1:         self.f.close()
       
    1:     def test_fcntl_file_descriptor(self):
               # again, but pass the file rather than numeric descriptor
    1:         self.f = open(TESTFN, 'w')
    1:         rv = fcntl.fcntl(self.f, fcntl.F_SETFL, os.O_NONBLOCK)
    1:         if sys.platform not in ['os2emx']:
    1:             rv = fcntl.fcntl(self.f, fcntl.F_SETLKW, lockdata)
    1:         self.f.close()
       
    1:     def test_fcntl_bad_file(self):
    1:         with self.assertRaises(ValueError):
    1:             fcntl.fcntl(-1, fcntl.F_SETFL, os.O_NONBLOCK)
    1:         with self.assertRaises(ValueError):
    1:             fcntl.fcntl(BadFile(-1), fcntl.F_SETFL, os.O_NONBLOCK)
    1:         with self.assertRaises(TypeError):
    1:             fcntl.fcntl('spam', fcntl.F_SETFL, os.O_NONBLOCK)
    1:         with self.assertRaises(TypeError):
    1:             fcntl.fcntl(BadFile('spam'), fcntl.F_SETFL, os.O_NONBLOCK)
       
    1:     @cpython_only
           def test_fcntl_bad_file_overflow(self):
    1:         from _testcapi import INT_MAX, INT_MIN
               # Issue 15989
    1:         with self.assertRaises(ValueError):
    1:             fcntl.fcntl(INT_MAX + 1, fcntl.F_SETFL, os.O_NONBLOCK)
    1:         with self.assertRaises(ValueError):
    1:             fcntl.fcntl(BadFile(INT_MAX + 1), fcntl.F_SETFL, os.O_NONBLOCK)
    1:         with self.assertRaises(ValueError):
    1:             fcntl.fcntl(INT_MIN - 1, fcntl.F_SETFL, os.O_NONBLOCK)
    1:         with self.assertRaises(ValueError):
    1:             fcntl.fcntl(BadFile(INT_MIN - 1), fcntl.F_SETFL, os.O_NONBLOCK)
       
    1:     def test_fcntl_64_bit(self):
               # Issue #1309352: fcntl shouldn't fail when the third arg fits in a
               # C 'long' but not in a C 'int'.
    1:         try:
    1:             cmd = fcntl.F_NOTIFY
                   # This flag is larger than 2**31 in 64-bit builds
>>>>>>             flags = fcntl.DN_MULTISHOT
    1:         except AttributeError:
    1:             self.skipTest("F_NOTIFY or DN_MULTISHOT unavailable")
>>>>>>         fd = os.open(os.path.dirname(os.path.abspath(TESTFN)), os.O_RDONLY)
>>>>>>         try:
                   # This will raise OverflowError if issue1309352 is present.
>>>>>>             fcntl.fcntl(fd, cmd, flags)
>>>>>>         except IOError:
>>>>>>             pass  # Running on a system that doesn't support these flags.
               finally:
>>>>>>             os.close(fd)
       
       
    1: def test_main():
    1:     run_unittest(TestFcntl)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
