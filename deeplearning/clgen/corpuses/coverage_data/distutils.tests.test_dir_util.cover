    1: """Tests for distutils.dir_util."""
    1: import unittest
    1: import os
    1: import stat
    1: import shutil
    1: import sys
       
    1: from distutils.dir_util import (mkpath, remove_tree, create_tree, copy_tree,
                                       ensure_relative)
       
    1: from distutils import log
    1: from distutils.tests import support
    1: from test.test_support import run_unittest
       
    2: class DirUtilTestCase(support.TempdirManager, unittest.TestCase):
       
    1:     def _log(self, msg, *args):
   10:         if len(args) > 0:
   10:             self._logs.append(msg % args)
               else:
>>>>>>             self._logs.append(msg)
       
    1:     def setUp(self):
    6:         super(DirUtilTestCase, self).setUp()
    6:         self._logs = []
    6:         tmp_dir = self.mkdtemp()
    6:         self.root_target = os.path.join(tmp_dir, 'deep')
    6:         self.target = os.path.join(self.root_target, 'here')
    6:         self.target2 = os.path.join(tmp_dir, 'deep2')
    6:         self.old_log = log.info
    6:         log.info = self._log
       
    1:     def tearDown(self):
    6:         log.info = self.old_log
    6:         super(DirUtilTestCase, self).tearDown()
       
    1:     def test_mkpath_remove_tree_verbosity(self):
       
    1:         mkpath(self.target, verbose=0)
    1:         wanted = []
    1:         self.assertEqual(self._logs, wanted)
    1:         remove_tree(self.root_target, verbose=0)
       
    1:         mkpath(self.target, verbose=1)
    1:         wanted = ['creating %s' % self.root_target,
    1:                   'creating %s' % self.target]
    1:         self.assertEqual(self._logs, wanted)
    1:         self._logs = []
       
    1:         remove_tree(self.root_target, verbose=1)
    1:         wanted = ["removing '%s' (and everything under it)" % self.root_target]
    1:         self.assertEqual(self._logs, wanted)
       
    1:     @unittest.skipIf(sys.platform.startswith('win'),
    1:                         "This test is only appropriate for POSIX-like systems.")
           def test_mkpath_with_custom_mode(self):
               # Get and set the current umask value for testing mode bits.
    1:         umask = os.umask(0o002)
    1:         os.umask(umask)
    1:         mkpath(self.target, 0o700)
    1:         self.assertEqual(
    1:             stat.S_IMODE(os.stat(self.target).st_mode), 0o700 & ~umask)
    1:         mkpath(self.target2, 0o555)
    1:         self.assertEqual(
    1:             stat.S_IMODE(os.stat(self.target2).st_mode), 0o555 & ~umask)
       
    1:     def test_create_tree_verbosity(self):
       
    1:         create_tree(self.root_target, ['one', 'two', 'three'], verbose=0)
    1:         self.assertEqual(self._logs, [])
    1:         remove_tree(self.root_target, verbose=0)
       
    1:         wanted = ['creating %s' % self.root_target]
    1:         create_tree(self.root_target, ['one', 'two', 'three'], verbose=1)
    1:         self.assertEqual(self._logs, wanted)
       
    1:         remove_tree(self.root_target, verbose=0)
       
       
    1:     def test_copy_tree_verbosity(self):
       
    1:         mkpath(self.target, verbose=0)
       
    1:         copy_tree(self.target, self.target2, verbose=0)
    1:         self.assertEqual(self._logs, [])
       
    1:         remove_tree(self.root_target, verbose=0)
       
    1:         mkpath(self.target, verbose=0)
    1:         a_file = os.path.join(self.target, 'ok.txt')
    1:         f = open(a_file, 'w')
    1:         try:
    1:             f.write('some content')
               finally:
    1:             f.close()
       
    1:         wanted = ['copying %s -> %s' % (a_file, self.target2)]
    1:         copy_tree(self.target, self.target2, verbose=1)
    1:         self.assertEqual(self._logs, wanted)
       
    1:         remove_tree(self.root_target, verbose=0)
    1:         remove_tree(self.target2, verbose=0)
       
    1:     def test_copy_tree_skips_nfs_temp_files(self):
    1:         mkpath(self.target, verbose=0)
       
    1:         a_file = os.path.join(self.target, 'ok.txt')
    1:         nfs_file = os.path.join(self.target, '.nfs123abc')
    3:         for f in a_file, nfs_file:
    2:             fh = open(f, 'w')
    2:             try:
    2:                 fh.write('some content')
                   finally:
    2:                 fh.close()
       
    1:         copy_tree(self.target, self.target2)
    1:         self.assertEqual(os.listdir(self.target2), ['ok.txt'])
       
    1:         remove_tree(self.root_target, verbose=0)
    1:         remove_tree(self.target2, verbose=0)
       
    1:     def test_ensure_relative(self):
    1:         if os.sep == '/':
    1:             self.assertEqual(ensure_relative('/home/foo'), 'home/foo')
    1:             self.assertEqual(ensure_relative('some/path'), 'some/path')
               else:   # \\
>>>>>>             self.assertEqual(ensure_relative('c:\\home\\foo'), 'c:home\\foo')
>>>>>>             self.assertEqual(ensure_relative('home\\foo'), 'home\\foo')
       
    1: def test_suite():
    1:     return unittest.makeSuite(DirUtilTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     run_unittest(test_suite())
