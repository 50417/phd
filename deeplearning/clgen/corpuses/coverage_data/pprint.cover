       #  Author:      Fred L. Drake, Jr.
       #               fdrake@acm.org
       #
       #  This is a simple little module I wrote to make life easier.  I didn't
       #  see anything quite like it in the library, though I may have overlooked
       #  something.  I wrote this when I was trying to read some heavily nested
       #  tuples with fairly non-descriptive content.  This is modeled very much
       #  after Lisp/Scheme - style pretty-printing of lists.  If you find it
       #  useful, thank small children who sleep at night.
       
       """Support to pretty-print lists, tuples, & dictionaries recursively.
       
       Very simple, but useful, especially in debugging data structures.
       
       Classes
       -------
       
       PrettyPrinter()
           Handle pretty-printing operations onto a stream using a configured
           set of formatting parameters.
       
       Functions
       ---------
       
       pformat()
           Format a Python object into a pretty-printed representation.
       
       pprint()
           Pretty-print a Python object to a stream [default is sys.stdout].
       
       saferepr()
           Generate a 'standard' repr()-like value, but protect against recursive
           data structures.
       
>>>>>> """
       
>>>>>> import sys as _sys
>>>>>> import warnings
       
>>>>>> try:
>>>>>>     from cStringIO import StringIO as _StringIO
>>>>>> except ImportError:
>>>>>>     from StringIO import StringIO as _StringIO
       
>>>>>> __all__ = ["pprint","pformat","isreadable","isrecursive","saferepr",
>>>>>>            "PrettyPrinter"]
       
       # cache these for faster access:
>>>>>> _commajoin = ", ".join
>>>>>> _id = id
>>>>>> _len = len
>>>>>> _type = type
       
       
>>>>>> def pprint(object, stream=None, indent=1, width=80, depth=None):
           """Pretty-print a Python object to a stream [default is sys.stdout]."""
    4:     printer = PrettyPrinter(
    4:         stream=stream, indent=indent, width=width, depth=depth)
    4:     printer.pprint(object)
       
>>>>>> def pformat(object, indent=1, width=80, depth=None):
           """Format a Python object into a pretty-printed representation."""
  182:     return PrettyPrinter(indent=indent, width=width, depth=depth).pformat(object)
       
>>>>>> def saferepr(object):
           """Version of repr() which can handle recursive data structures."""
   56:     return _safe_repr(object, {}, None, 0)[0]
       
>>>>>> def isreadable(object):
           """Determine if saferepr(object) is readable by eval()."""
   25:     return _safe_repr(object, {}, None, 0)[1]
       
>>>>>> def isrecursive(object):
           """Determine if object requires a recursive representation."""
   25:     return _safe_repr(object, {}, None, 0)[2]
       
>>>>>> def _sorted(iterable):
  288:     with warnings.catch_warnings():
  288:         if _sys.py3kwarning:
>>>>>>             warnings.filterwarnings("ignore", "comparing unequal types "
>>>>>>                                     "not supported", DeprecationWarning)
  288:         return sorted(iterable)
       
>>>>>> class PrettyPrinter:
>>>>>>     def __init__(self, indent=1, width=80, depth=None, stream=None):
               """Handle pretty printing operations onto a stream using a set of
               configured parameters.
       
               indent
                   Number of spaces to indent for each level of nesting.
       
               width
                   Attempted maximum number of columns in the output.
       
               depth
                   The maximum depth to print out nested structures.
       
               stream
                   The desired output stream.  If omitted (or false), the standard
                   output stream available at construction will be used.
       
               """
  190:         indent = int(indent)
  190:         width = int(width)
  190:         assert indent >= 0, "indent must be >= 0"
  190:         assert depth is None or depth > 0, "depth must be > 0"
  190:         assert width, "width must be != 0"
  190:         self._depth = depth
  190:         self._indent_per_level = indent
  190:         self._width = width
  190:         if stream is not None:
>>>>>>             self._stream = stream
               else:
  190:             self._stream = _sys.stdout
       
>>>>>>     def pprint(self, object):
    4:         self._format(object, self._stream, 0, 0, {}, 0)
    4:         self._stream.write("\n")
       
>>>>>>     def pformat(self, object):
  183:         sio = _StringIO()
  183:         self._format(object, sio, 0, 0, {}, 0)
  183:         return sio.getvalue()
       
>>>>>>     def isrecursive(self, object):
   25:         return self.format(object, {}, 0, 0)[2]
       
>>>>>>     def isreadable(self, object):
   25:         s, readable, recursive = self.format(object, {}, 0, 0)
   25:         return readable and not recursive
       
>>>>>>     def _format(self, object, stream, indent, allowance, context, level):
 1514:         level = level + 1
 1514:         objid = _id(object)
 1514:         if objid in context:
>>>>>>             stream.write(_recursion(object))
>>>>>>             self._recursive = True
>>>>>>             self._readable = False
>>>>>>             return
 1514:         rep = self._repr(object, context, level - 1)
 1514:         typ = _type(object)
 1514:         sepLines = _len(rep) > (self._width - 1 - indent - allowance)
 1514:         write = stream.write
       
 1514:         if self._depth and level > self._depth:
    5:             write(rep)
    5:             return
       
 1509:         r = getattr(typ, "__repr__", None)
 1509:         if issubclass(typ, dict) and r is dict.__repr__:
   43:             write('{')
   43:             if self._indent_per_level > 1:
    1:                 write((self._indent_per_level - 1) * ' ')
   43:             length = _len(object)
   43:             if length:
   32:                 context[objid] = 1
   32:                 indent = indent + self._indent_per_level
   32:                 items = _sorted(object.items())
   32:                 key, ent = items[0]
   32:                 rep = self._repr(key, context, level)
   32:                 write(rep)
   32:                 write(': ')
   32:                 self._format(ent, stream, indent + _len(rep) + 2,
   32:                               allowance + 1, context, level)
   32:                 if length > 1:
   65:                     for key, ent in items[1:]:
   54:                         rep = self._repr(key, context, level)
   54:                         if sepLines:
   46:                             write(',\n%s%s: ' % (' '*indent, rep))
                               else:
    8:                             write(', %s: ' % rep)
   54:                         self._format(ent, stream, indent + _len(rep) + 2,
   54:                                       allowance + 1, context, level)
   32:                 indent = indent - self._indent_per_level
   32:                 del context[objid]
   43:             write('}')
   43:             return
       
 1466:         if ((issubclass(typ, list) and r is list.__repr__) or
 1415:             (issubclass(typ, tuple) and r is tuple.__repr__) or
 1381:             (issubclass(typ, set) and r is set.__repr__) or
 1369:             (issubclass(typ, frozenset) and r is frozenset.__repr__)
                  ):
  297:             length = _len(object)
  297:             if issubclass(typ, list):
   51:                 write('[')
   51:                 endchar = ']'
  246:             elif issubclass(typ, tuple):
   34:                 write('(')
   34:                 endchar = ')'
                   else:
  212:                 if not length:
   25:                     write(rep)
   25:                     return
  187:                 write(typ.__name__)
  187:                 write('([')
  187:                 endchar = '])'
  187:                 indent += len(typ.__name__) + 1
  187:                 object = _sorted(object)
  272:             if self._indent_per_level > 1 and sepLines:
    3:                 write((self._indent_per_level - 1) * ' ')
  272:             if length:
  253:                 context[objid] = 1
  253:                 indent = indent + self._indent_per_level
  253:                 self._format(object[0], stream, indent, allowance + 1,
  253:                              context, level)
  253:                 if length > 1:
 1178:                     for ent in object[1:]:
  988:                         if sepLines:
  863:                             write(',\n' + ' '*indent)
                               else:
  125:                             write(', ')
  988:                         self._format(ent, stream, indent,
  988:                                       allowance + 1, context, level)
  253:                 indent = indent - self._indent_per_level
  253:                 del context[objid]
  272:             if issubclass(typ, tuple) and length == 1:
    3:                 write(',')
  272:             write(endchar)
  272:             return
       
 1169:         write(rep)
       
>>>>>>     def _repr(self, object, context, level):
 1600:         repr, readable, recursive = self.format(object, context.copy(),
 1600:                                                 self._depth, level)
 1600:         if not readable:
   12:             self._readable = False
 1600:         if recursive:
>>>>>>             self._recursive = True
 1600:         return repr
       
>>>>>>     def format(self, object, context, maxlevels, level):
               """Format object for a specific context, returning a string
               and flags indicating whether the representation is 'readable'
               and whether the object represents a recursive construct.
               """
 1646:         return _safe_repr(object, context, maxlevels, level)
       
       
       # Return triple (repr_string, isreadable, isrecursive).
       
>>>>>> def _safe_repr(object, context, maxlevels, level):
 7553:     typ = _type(object)
 7553:     if typ is str:
  323:         if 'locale' not in _sys.modules:
>>>>>>             return repr(object), True, False
  323:         if "'" in object and '"' not in object:
>>>>>>             closure = '"'
>>>>>>             quotes = {'"': '\\"'}
               else:
  323:             closure = "'"
  323:             quotes = {"'": "\\'"}
  323:         qget = quotes.get
  323:         sio = _StringIO()
  323:         write = sio.write
55102:         for char in object:
54779:             if char.isalpha():
53825:                 write(char)
                   else:
  954:                 write(qget(char, repr(char)[1:-1]))
  323:         return ("%s%s%s" % (closure, sio.getvalue(), closure)), True, False
       
 7230:     r = getattr(typ, "__repr__", None)
 7230:     if issubclass(typ, dict) and r is dict.__repr__:
  133:         if not object:
   26:             return "{}", True, False
  107:         objid = _id(object)
  107:         if maxlevels and level >= maxlevels:
    2:             return "{...}", False, objid in context
  105:         if objid in context:
   36:             return _recursion(object), False, True
   69:         context[objid] = 1
   69:         readable = True
   69:         recursive = False
   69:         components = []
   69:         append = components.append
   69:         level += 1
   69:         saferepr = _safe_repr
  222:         for k, v in _sorted(object.items()):
  153:             krepr, kreadable, krecur = saferepr(k, context, maxlevels, level)
  153:             vrepr, vreadable, vrecur = saferepr(v, context, maxlevels, level)
  153:             append("%s: %s" % (krepr, vrepr))
  153:             readable = readable and kreadable and vreadable
  153:             if krecur or vrecur:
   36:                 recursive = True
   69:         del context[objid]
   69:         return "{%s}" % _commajoin(components), readable, recursive
       
 7097:     if (issubclass(typ, list) and r is list.__repr__) or \
 6958:        (issubclass(typ, tuple) and r is tuple.__repr__):
  227:         if issubclass(typ, list):
  139:             if not object:
   35:                 return "[]", True, False
  104:             format = "[%s]"
   88:         elif _len(object) == 1:
    5:             format = "(%s,)"
               else:
   83:             if not object:
    9:                 return "()", True, False
   74:             format = "(%s)"
  183:         objid = _id(object)
  183:         if maxlevels and level >= maxlevels:
    4:             return format % "...", False, objid in context
  179:         if objid in context:
    8:             return _recursion(object), False, True
  171:         context[objid] = 1
  171:         readable = True
  171:         recursive = False
  171:         components = []
  171:         append = components.append
  171:         level += 1
 5666:         for o in object:
 5495:             orepr, oreadable, orecur = _safe_repr(o, context, maxlevels, level)
 5495:             append(orepr)
 5495:             if not oreadable:
   26:                 readable = False
 5495:             if orecur:
   24:                 recursive = True
  171:         del context[objid]
  171:         return format % _commajoin(components), readable, recursive
       
 6870:     rep = repr(object)
 6870:     return rep, (rep and not rep.startswith('<')), False
       
       
>>>>>> def _recursion(object):
   44:     return ("<Recursion on %s with id=%s>"
   44:             % (_type(object).__name__, _id(object)))
       
       
>>>>>> def _perfcheck(object=None):
>>>>>>     import time
>>>>>>     if object is None:
>>>>>>         object = [("string", (1, 2), [3, 4], {5: 6, 7: 8})] * 100000
>>>>>>     p = PrettyPrinter()
>>>>>>     t1 = time.time()
>>>>>>     _safe_repr(object, {}, None, 0)
>>>>>>     t2 = time.time()
>>>>>>     p.pformat(object)
>>>>>>     t3 = time.time()
>>>>>>     print "_safe_repr:", t2 - t1
>>>>>>     print "pformat:", t3 - t2
       
>>>>>> if __name__ == "__main__":
>>>>>>     _perfcheck()
