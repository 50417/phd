    1: import os
    1: import base64
    1: import shutil
    1: import gettext
    1: import unittest
       
    1: from test import test_support
       
       
       # TODO:
       #  - Add new tests, for example for "dgettext"
       #  - Remove dummy tests, for example testing for single and double quotes
       #    has no sense, it would have if we were testing a parser (i.e. pygettext)
       #  - Tests should have only one assert.
       
       GNU_MO_DATA = '''\
       3hIElQAAAAAGAAAAHAAAAEwAAAALAAAAfAAAAAAAAACoAAAAFQAAAKkAAAAjAAAAvwAAAKEAAADj
       AAAABwAAAIUBAAALAAAAjQEAAEUBAACZAQAAFgAAAN8CAAAeAAAA9gIAAKEAAAAVAwAABQAAALcD
       AAAJAAAAvQMAAAEAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABQAAAAYAAAACAAAAAFJh
       eW1vbmQgTHV4dXJ5IFlhY2gtdABUaGVyZSBpcyAlcyBmaWxlAFRoZXJlIGFyZSAlcyBmaWxlcwBU
       aGlzIG1vZHVsZSBwcm92aWRlcyBpbnRlcm5hdGlvbmFsaXphdGlvbiBhbmQgbG9jYWxpemF0aW9u
       CnN1cHBvcnQgZm9yIHlvdXIgUHl0aG9uIHByb2dyYW1zIGJ5IHByb3ZpZGluZyBhbiBpbnRlcmZh
       Y2UgdG8gdGhlIEdOVQpnZXR0ZXh0IG1lc3NhZ2UgY2F0YWxvZyBsaWJyYXJ5LgBtdWxsdXNrAG51
       ZGdlIG51ZGdlAFByb2plY3QtSWQtVmVyc2lvbjogMi4wClBPLVJldmlzaW9uLURhdGU6IDIwMDAt
       MDgtMjkgMTI6MTktMDQ6MDAKTGFzdC1UcmFuc2xhdG9yOiBKLiBEYXZpZCBJYsOhw7FleiA8ai1k
       YXZpZEBub29zLmZyPgpMYW5ndWFnZS1UZWFtOiBYWCA8cHl0aG9uLWRldkBweXRob24ub3JnPgpN
       SU1FLVZlcnNpb246IDEuMApDb250ZW50LVR5cGU6IHRleHQvcGxhaW47IGNoYXJzZXQ9aXNvLTg4
       NTktMQpDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiBub25lCkdlbmVyYXRlZC1CeTogcHlnZXR0
       ZXh0LnB5IDEuMQpQbHVyYWwtRm9ybXM6IG5wbHVyYWxzPTI7IHBsdXJhbD1uIT0xOwoAVGhyb2F0
       d29iYmxlciBNYW5ncm92ZQBIYXkgJXMgZmljaGVybwBIYXkgJXMgZmljaGVyb3MAR3V2ZiB6YnFo
       eXIgY2ViaXZxcmYgdmFncmVhbmd2YmFueXZtbmd2YmEgbmFxIHlicG55dm1uZ3ZiYQpmaGNjYmVn
       IHNiZSBsYmhlIENsZ3ViYSBjZWJ0ZW56ZiBvbCBjZWJpdnF2YXQgbmEgdmFncmVzbnByIGdiIGd1
       ciBUQUgKdHJnZ3JrZyB6cmZmbnRyIHBuZ255YnQgeXZvZW5lbC4AYmFjb24Ad2luayB3aW5rAA==
    1: '''
       
       UMO_DATA = '''\
       3hIElQAAAAACAAAAHAAAACwAAAAFAAAAPAAAAAAAAABQAAAABAAAAFEAAAAPAQAAVgAAAAQAAABm
       AQAAAQAAAAIAAAAAAAAAAAAAAAAAAAAAYWLDngBQcm9qZWN0LUlkLVZlcnNpb246IDIuMApQTy1S
       ZXZpc2lvbi1EYXRlOiAyMDAzLTA0LTExIDEyOjQyLTA0MDAKTGFzdC1UcmFuc2xhdG9yOiBCYXJy
       eSBBLiBXQXJzYXcgPGJhcnJ5QHB5dGhvbi5vcmc+Ckxhbmd1YWdlLVRlYW06IFhYIDxweXRob24t
       ZGV2QHB5dGhvbi5vcmc+Ck1JTUUtVmVyc2lvbjogMS4wCkNvbnRlbnQtVHlwZTogdGV4dC9wbGFp
       bjsgY2hhcnNldD11dGYtOApDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiA3Yml0CkdlbmVyYXRl
       ZC1CeTogbWFudWFsbHkKAMKkeXoA
    1: '''
       
       MMO_DATA = '''\
       3hIElQAAAAABAAAAHAAAACQAAAADAAAALAAAAAAAAAA4AAAAeAEAADkAAAABAAAAAAAAAAAAAAAA
       UHJvamVjdC1JZC1WZXJzaW9uOiBObyBQcm9qZWN0IDAuMApQT1QtQ3JlYXRpb24tRGF0ZTogV2Vk
       IERlYyAxMSAwNzo0NDoxNSAyMDAyClBPLVJldmlzaW9uLURhdGU6IDIwMDItMDgtMTQgMDE6MTg6
       NTgrMDA6MDAKTGFzdC1UcmFuc2xhdG9yOiBKb2huIERvZSA8amRvZUBleGFtcGxlLmNvbT4KSmFu
       ZSBGb29iYXIgPGpmb29iYXJAZXhhbXBsZS5jb20+Ckxhbmd1YWdlLVRlYW06IHh4IDx4eEBleGFt
       cGxlLmNvbT4KTUlNRS1WZXJzaW9uOiAxLjAKQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluOyBjaGFy
       c2V0PWlzby04ODU5LTE1CkNvbnRlbnQtVHJhbnNmZXItRW5jb2Rpbmc6IHF1b3RlZC1wcmludGFi
       bGUKR2VuZXJhdGVkLUJ5OiBweWdldHRleHQucHkgMS4zCgA=
    1: '''
       
    1: LOCALEDIR = os.path.join('xx', 'LC_MESSAGES')
    1: MOFILE = os.path.join(LOCALEDIR, 'gettext.mo')
    1: UMOFILE = os.path.join(LOCALEDIR, 'ugettext.mo')
    1: MMOFILE = os.path.join(LOCALEDIR, 'metadata.mo')
       
       
    2: class GettextBaseTest(unittest.TestCase):
    1:     def setUp(self):
   40:         if not os.path.isdir(LOCALEDIR):
   40:             os.makedirs(LOCALEDIR)
   40:         with open(MOFILE, 'wb') as fp:
   40:             fp.write(base64.decodestring(GNU_MO_DATA))
   40:         with open(UMOFILE, 'wb') as fp:
   40:             fp.write(base64.decodestring(UMO_DATA))
   40:         with open(MMOFILE, 'wb') as fp:
   40:             fp.write(base64.decodestring(MMO_DATA))
       
   40:         self.env = test_support.EnvironmentVarGuard()
   40:         self.env['LANGUAGE'] = 'xx'
   40:         gettext._translations.clear()
       
    1:     def tearDown(self):
   40:         self.env.__exit__()
   40:         del self.env
   40:         shutil.rmtree(os.path.split(LOCALEDIR)[0])
       
       GNU_MO_DATA_ISSUE_17898 = b'''\
       3hIElQAAAAABAAAAHAAAACQAAAAAAAAAAAAAAAAAAAAsAAAAggAAAC0AAAAAUGx1cmFsLUZvcm1z
       OiBucGx1cmFscz0yOyBwbHVyYWw9KG4gIT0gMSk7CiMtIy0jLSMtIyAgbWVzc2FnZXMucG8gKEVk
       WCBTdHVkaW8pICAjLSMtIy0jLSMKQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluOyBjaGFyc2V0PVVU
       Ri04CgA=
    1: '''
       
    2: class GettextTestCase1(GettextBaseTest):
    1:     def setUp(self):
    6:         GettextBaseTest.setUp(self)
    6:         self.localedir = os.curdir
    6:         self.mofile = MOFILE
    6:         gettext.install('gettext', self.localedir)
       
    1:     def test_some_translations(self):
    1:         eq = self.assertEqual
               # test some translations
    1:         eq(_('albatross'), 'albatross')
    1:         eq(_(u'mullusk'), 'bacon')
    1:         eq(_(r'Raymond Luxury Yach-t'), 'Throatwobbler Mangrove')
    1:         eq(_(ur'nudge nudge'), 'wink wink')
       
    1:     def test_double_quotes(self):
    1:         eq = self.assertEqual
               # double quotes
    1:         eq(_("albatross"), 'albatross')
    1:         eq(_(u"mullusk"), 'bacon')
    1:         eq(_(r"Raymond Luxury Yach-t"), 'Throatwobbler Mangrove')
    1:         eq(_(ur"nudge nudge"), 'wink wink')
       
    1:     def test_triple_single_quotes(self):
    1:         eq = self.assertEqual
               # triple single quotes
    1:         eq(_('''albatross'''), 'albatross')
    1:         eq(_(u'''mullusk'''), 'bacon')
    1:         eq(_(r'''Raymond Luxury Yach-t'''), 'Throatwobbler Mangrove')
    1:         eq(_(ur'''nudge nudge'''), 'wink wink')
       
    1:     def test_triple_double_quotes(self):
    1:         eq = self.assertEqual
               # triple double quotes
    1:         eq(_("""albatross"""), 'albatross')
    1:         eq(_(u"""mullusk"""), 'bacon')
    1:         eq(_(r"""Raymond Luxury Yach-t"""), 'Throatwobbler Mangrove')
    1:         eq(_(ur"""nudge nudge"""), 'wink wink')
       
    1:     def test_multiline_strings(self):
    1:         eq = self.assertEqual
               # multiline strings
    1:         eq(_('''This module provides internationalization and localization
       support for your Python programs by providing an interface to the GNU
    1: gettext message catalog library.'''),
                  '''Guvf zbqhyr cebivqrf vagreangvbanyvmngvba naq ybpnyvmngvba
       fhccbeg sbe lbhe Clguba cebtenzf ol cebivqvat na vagresnpr gb gur TAH
    1: trggrkg zrffntr pngnybt yvoenel.''')
       
    1:     def test_the_alternative_interface(self):
    1:         eq = self.assertEqual
               # test the alternative interface
    1:         with open(self.mofile, 'rb') as fp:
    1:             t = gettext.GNUTranslations(fp)
               # Install the translation object
    1:         t.install()
    1:         eq(_('nudge nudge'), 'wink wink')
               # Try unicode return type
    1:         t.install(unicode=True)
    1:         eq(_('mullusk'), 'bacon')
               # Test installation of other methods
    1:         import __builtin__
    1:         t.install(unicode=True, names=["gettext", "lgettext"])
    1:         eq(_, t.ugettext)
    1:         eq(__builtin__.gettext, t.ugettext)
    1:         eq(lgettext, t.lgettext)
    1:         del __builtin__.gettext
    1:         del __builtin__.lgettext
       
       
    2: class GettextTestCase2(GettextBaseTest):
    1:     def setUp(self):
    7:         GettextBaseTest.setUp(self)
    7:         self.localedir = os.curdir
               # Set up the bindings
    7:         gettext.bindtextdomain('gettext', self.localedir)
    7:         gettext.textdomain('gettext')
               # For convenience
    7:         self._ = gettext.gettext
       
    1:     def test_bindtextdomain(self):
    1:         self.assertEqual(gettext.bindtextdomain('gettext'), self.localedir)
       
    1:     def test_textdomain(self):
    1:         self.assertEqual(gettext.textdomain(), 'gettext')
       
    1:     def test_some_translations(self):
    1:         eq = self.assertEqual
               # test some translations
    1:         eq(self._('albatross'), 'albatross')
    1:         eq(self._(u'mullusk'), 'bacon')
    1:         eq(self._(r'Raymond Luxury Yach-t'), 'Throatwobbler Mangrove')
    1:         eq(self._(ur'nudge nudge'), 'wink wink')
       
    1:     def test_double_quotes(self):
    1:         eq = self.assertEqual
               # double quotes
    1:         eq(self._("albatross"), 'albatross')
    1:         eq(self._(u"mullusk"), 'bacon')
    1:         eq(self._(r"Raymond Luxury Yach-t"), 'Throatwobbler Mangrove')
    1:         eq(self._(ur"nudge nudge"), 'wink wink')
       
    1:     def test_triple_single_quotes(self):
    1:         eq = self.assertEqual
               # triple single quotes
    1:         eq(self._('''albatross'''), 'albatross')
    1:         eq(self._(u'''mullusk'''), 'bacon')
    1:         eq(self._(r'''Raymond Luxury Yach-t'''), 'Throatwobbler Mangrove')
    1:         eq(self._(ur'''nudge nudge'''), 'wink wink')
       
    1:     def test_triple_double_quotes(self):
    1:         eq = self.assertEqual
               # triple double quotes
    1:         eq(self._("""albatross"""), 'albatross')
    1:         eq(self._(u"""mullusk"""), 'bacon')
    1:         eq(self._(r"""Raymond Luxury Yach-t"""), 'Throatwobbler Mangrove')
    1:         eq(self._(ur"""nudge nudge"""), 'wink wink')
       
    1:     def test_multiline_strings(self):
    1:         eq = self.assertEqual
               # multiline strings
    1:         eq(self._('''This module provides internationalization and localization
       support for your Python programs by providing an interface to the GNU
    1: gettext message catalog library.'''),
                  '''Guvf zbqhyr cebivqrf vagreangvbanyvmngvba naq ybpnyvmngvba
       fhccbeg sbe lbhe Clguba cebtenzf ol cebivqvat na vagresnpr gb gur TAH
    1: trggrkg zrffntr pngnybt yvoenel.''')
       
       
    2: class PluralFormsTestCase(GettextBaseTest):
    1:     def setUp(self):
   22:         GettextBaseTest.setUp(self)
   22:         self.mofile = MOFILE
       
    1:     def test_plural_forms1(self):
    1:         eq = self.assertEqual
    1:         x = gettext.ngettext('There is %s file', 'There are %s files', 1)
    1:         eq(x, 'Hay %s fichero')
    1:         x = gettext.ngettext('There is %s file', 'There are %s files', 2)
    1:         eq(x, 'Hay %s ficheros')
       
    1:     def test_plural_forms2(self):
    1:         eq = self.assertEqual
    1:         with open(self.mofile, 'rb') as fp:
    1:             t = gettext.GNUTranslations(fp)
    1:         x = t.ngettext('There is %s file', 'There are %s files', 1)
    1:         eq(x, 'Hay %s fichero')
    1:         x = t.ngettext('There is %s file', 'There are %s files', 2)
    1:         eq(x, 'Hay %s ficheros')
       
           # Examples from http://www.gnu.org/software/gettext/manual/gettext.html
       
    1:     def test_ja(self):
    1:         eq = self.assertEqual
    1:         f = gettext.c2py('0')
  201:         s = ''.join([ str(f(x)) for x in range(200) ])
    1:         eq(s, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
       
    1:     def test_de(self):
    1:         eq = self.assertEqual
    1:         f = gettext.c2py('n != 1')
  201:         s = ''.join([ str(f(x)) for x in range(200) ])
    1:         eq(s, "10111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111")
       
    1:     def test_fr(self):
    1:         eq = self.assertEqual
    1:         f = gettext.c2py('n>1')
  201:         s = ''.join([ str(f(x)) for x in range(200) ])
    1:         eq(s, "00111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111")
       
    1:     def test_lv(self):
    1:         eq = self.assertEqual
    1:         f = gettext.c2py('n%10==1 && n%100!=11 ? 0 : n != 0 ? 1 : 2')
  201:         s = ''.join([ str(f(x)) for x in range(200) ])
    1:         eq(s, "20111111111111111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111111111111110111111111011111111101111111110111111111011111111101111111110111111111011111111")
       
    1:     def test_gd(self):
    1:         eq = self.assertEqual
    1:         f = gettext.c2py('n==1 ? 0 : n==2 ? 1 : 2')
  201:         s = ''.join([ str(f(x)) for x in range(200) ])
    1:         eq(s, "20122222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222")
       
    1:     def test_gd2(self):
    1:         eq = self.assertEqual
               # Tests the combination of parentheses and "?:"
    1:         f = gettext.c2py('n==1 ? 0 : (n==2 ? 1 : 2)')
  201:         s = ''.join([ str(f(x)) for x in range(200) ])
    1:         eq(s, "20122222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222")
       
    1:     def test_ro(self):
    1:         eq = self.assertEqual
    1:         f = gettext.c2py('n==1 ? 0 : (n==0 || (n%100 > 0 && n%100 < 20)) ? 1 : 2')
  201:         s = ''.join([ str(f(x)) for x in range(200) ])
    1:         eq(s, "10111111111111111111222222222222222222222222222222222222222222222222222222222222222222222222222222222111111111111111111122222222222222222222222222222222222222222222222222222222222222222222222222222222")
       
    1:     def test_lt(self):
    1:         eq = self.assertEqual
    1:         f = gettext.c2py('n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n%100<10 || n%100>=20) ? 1 : 2')
  201:         s = ''.join([ str(f(x)) for x in range(200) ])
    1:         eq(s, "20111111112222222222201111111120111111112011111111201111111120111111112011111111201111111120111111112011111111222222222220111111112011111111201111111120111111112011111111201111111120111111112011111111")
       
    1:     def test_ru(self):
    1:         eq = self.assertEqual
    1:         f = gettext.c2py('n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2')
  201:         s = ''.join([ str(f(x)) for x in range(200) ])
    1:         eq(s, "20111222222222222222201112222220111222222011122222201112222220111222222011122222201112222220111222222011122222222222222220111222222011122222201112222220111222222011122222201112222220111222222011122222")
       
    1:     def test_cs(self):
    1:         eq = self.assertEqual
    1:         f = gettext.c2py('(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2')
  201:         s = ''.join([ str(f(x)) for x in range(200) ])
    1:         eq(s, "20111222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222")
       
    1:     def test_pl(self):
    1:         eq = self.assertEqual
    1:         f = gettext.c2py('n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2')
  201:         s = ''.join([ str(f(x)) for x in range(200) ])
    1:         eq(s, "20111222222222222222221112222222111222222211122222221112222222111222222211122222221112222222111222222211122222222222222222111222222211122222221112222222111222222211122222221112222222111222222211122222")
       
    1:     def test_sl(self):
    1:         eq = self.assertEqual
    1:         f = gettext.c2py('n%100==1 ? 0 : n%100==2 ? 1 : n%100==3 || n%100==4 ? 2 : 3')
  201:         s = ''.join([ str(f(x)) for x in range(200) ])
    1:         eq(s, "30122333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333012233333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333")
       
    1:     def test_ar(self):
    1:         eq = self.assertEqual
    1:         f = gettext.c2py('n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 && n%100<=10 ? 3 : n%100>=11 ? 4 : 5')
  201:         s = ''.join([ str(f(x)) for x in range(200) ])
    1:         eq(s, "01233333333444444444444444444444444444444444444444444444444444444444444444444444444444444444444444445553333333344444444444444444444444444444444444444444444444444444444444444444444444444444444444444444")
       
    1:     def test_security(self):
    1:         raises = self.assertRaises
               # Test for a dangerous expression
    1:         raises(ValueError, gettext.c2py, "os.chmod('/etc/passwd',0777)")
               # issue28563
    1:         raises(ValueError, gettext.c2py, '"(eval(foo) && ""')
    1:         raises(ValueError, gettext.c2py, 'f"{os.system(\'sh\')}"')
               # Maximum recursion depth exceeded during compilation
    1:         raises(ValueError, gettext.c2py, 'n+'*10000 + 'n')
    1:         self.assertEqual(gettext.c2py('n+'*100 + 'n')(1), 101)
               # MemoryError during compilation
    1:         raises(ValueError, gettext.c2py, '('*100 + 'n' + ')'*100)
               # Maximum recursion depth exceeded in C to Python translator
    1:         raises(ValueError, gettext.c2py, '('*10000 + 'n' + ')'*10000)
    1:         self.assertEqual(gettext.c2py('('*20 + 'n' + ')'*20)(1), 1)
       
    1:     def test_chained_comparison(self):
               # C doesn't chain comparison as Python so 2 == 2 == 2 gets different results
    1:         f = gettext.c2py('n == n == n')
    5:         self.assertEqual(''.join(str(f(x)) for x in range(3)), '010')
    1:         f = gettext.c2py('1 < n == n')
    5:         self.assertEqual(''.join(str(f(x)) for x in range(3)), '100')
    1:         f = gettext.c2py('n == n < 2')
    5:         self.assertEqual(''.join(str(f(x)) for x in range(3)), '010')
    1:         f = gettext.c2py('0 < n < 2')
    5:         self.assertEqual(''.join(str(f(x)) for x in range(3)), '111')
       
    1:     def test_decimal_number(self):
    1:         self.assertEqual(gettext.c2py('0123')(1), 123)
       
    1:     def test_invalid_syntax(self):
               invalid_expressions = [
    1:             'x>1', '(n>1', 'n>1)', '42**42**42', '0xa', '1.0', '1e2',
    1:             'n>0x1', '+n', '-n', 'n()', 'n(1)', '1+', 'nn', 'n n',
               ]
   16:         for expr in invalid_expressions:
   15:             with self.assertRaises(ValueError):
   15:                 gettext.c2py(expr)
       
    1:     def test_nested_condition_operator(self):
    1:         self.assertEqual(gettext.c2py('n?1?2:3:4')(0), 4)
    1:         self.assertEqual(gettext.c2py('n?1?2:3:4')(1), 2)
    1:         self.assertEqual(gettext.c2py('n?1:3?4:5')(0), 4)
    1:         self.assertEqual(gettext.c2py('n?1:3?4:5')(1), 1)
       
    1:     def test_division(self):
    1:         f = gettext.c2py('2/n*3')
    1:         self.assertEqual(f(1), 6)
    1:         self.assertEqual(f(2), 3)
    1:         self.assertEqual(f(3), 0)
    1:         self.assertEqual(f(-1), -6)
    1:         self.assertRaises(ZeroDivisionError, f, 0)
       
    1:     def test_plural_number(self):
    1:         f = gettext.c2py('n != 1')
    1:         self.assertEqual(f(1), 0)
    1:         self.assertEqual(f(2), 1)
    1:         self.assertEqual(f(1.0), 0)
    1:         self.assertEqual(f(2.0), 1)
    1:         self.assertEqual(f(1.1), 1)
    1:         self.assertRaises(TypeError, f, '2')
    1:         self.assertRaises(TypeError, f, b'2')
    1:         self.assertRaises(TypeError, f, [])
    1:         self.assertRaises(TypeError, f, object())
       
       
    2: class GNUTranslationParsingTest(GettextBaseTest):
    1:     def test_plural_form_error_issue17898(self):
    1:         with open(MOFILE, 'wb') as fp:
    1:             fp.write(base64.decodestring(GNU_MO_DATA_ISSUE_17898))
    1:         with open(MOFILE, 'rb') as fp:
                   # If this runs cleanly, the bug is fixed.
    1:             t = gettext.GNUTranslations(fp)
       
       
    2: class UnicodeTranslationsTest(GettextBaseTest):
    1:     def setUp(self):
    2:         GettextBaseTest.setUp(self)
    2:         with open(UMOFILE, 'rb') as fp:
    2:             self.t = gettext.GNUTranslations(fp)
    2:         self._ = self.t.ugettext
       
    1:     def test_unicode_msgid(self):
    1:         unless = self.assertTrue
    1:         unless(isinstance(self._(''), unicode))
    1:         unless(isinstance(self._(u''), unicode))
       
    1:     def test_unicode_msgstr(self):
    1:         eq = self.assertEqual
    1:         eq(self._(u'ab\xde'), u'\xa4yz')
       
       
    2: class WeirdMetadataTest(GettextBaseTest):
    1:     def setUp(self):
    1:         GettextBaseTest.setUp(self)
    1:         with open(MMOFILE, 'rb') as fp:
    1:             try:
    1:                 self.t = gettext.GNUTranslations(fp)
>>>>>>             except:
>>>>>>                 self.tearDown()
>>>>>>                 raise
       
    1:     def test_weird_metadata(self):
    1:         info = self.t.info()
    1:         self.assertEqual(info['last-translator'],
    1:            'John Doe <jdoe@example.com>\nJane Foobar <jfoobar@example.com>')
       
       
    2: class DummyGNUTranslations(gettext.GNUTranslations):
    1:     def foo(self):
>>>>>>         return 'foo'
       
       
    2: class GettextCacheTestCase(GettextBaseTest):
    1:     def test_cache(self):
    1:         self.localedir = os.curdir
    1:         self.mofile = MOFILE
       
    1:         self.assertEqual(len(gettext._translations), 0)
       
    1:         t = gettext.translation('gettext', self.localedir)
       
    1:         self.assertEqual(len(gettext._translations), 1)
       
    1:         t = gettext.translation('gettext', self.localedir,
    1:                                 class_=DummyGNUTranslations)
       
    1:         self.assertEqual(len(gettext._translations), 2)
    1:         self.assertEqual(t.__class__, DummyGNUTranslations)
       
               # Calling it again doesn't add to the cache
       
    1:         t = gettext.translation('gettext', self.localedir,
    1:                                 class_=DummyGNUTranslations)
       
    1:         self.assertEqual(len(gettext._translations), 2)
    1:         self.assertEqual(t.__class__, DummyGNUTranslations)
       
       
    1: def test_main():
    1:     test_support.run_unittest(__name__)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
       
       
       # For reference, here's the .po file used to created the GNU_MO_DATA above.
       #
       # The original version was automatically generated from the sources with
       # pygettext. Later it was manually modified to add plural forms support.
       
       '''
       # Dummy translation for the Python test_gettext.py module.
       # Copyright (C) 2001 Python Software Foundation
       # Barry Warsaw <barry@python.org>, 2000.
       #
       msgid ""
       msgstr ""
       "Project-Id-Version: 2.0\n"
       "PO-Revision-Date: 2003-04-11 14:32-0400\n"
       "Last-Translator: J. David Ibanez <j-david@noos.fr>\n"
       "Language-Team: XX <python-dev@python.org>\n"
       "MIME-Version: 1.0\n"
       "Content-Type: text/plain; charset=iso-8859-1\n"
       "Content-Transfer-Encoding: 8bit\n"
       "Generated-By: pygettext.py 1.1\n"
       "Plural-Forms: nplurals=2; plural=n!=1;\n"
       
       #: test_gettext.py:19 test_gettext.py:25 test_gettext.py:31 test_gettext.py:37
       #: test_gettext.py:51 test_gettext.py:80 test_gettext.py:86 test_gettext.py:92
       #: test_gettext.py:98
       msgid "nudge nudge"
       msgstr "wink wink"
       
       #: test_gettext.py:16 test_gettext.py:22 test_gettext.py:28 test_gettext.py:34
       #: test_gettext.py:77 test_gettext.py:83 test_gettext.py:89 test_gettext.py:95
       msgid "albatross"
       msgstr ""
       
       #: test_gettext.py:18 test_gettext.py:24 test_gettext.py:30 test_gettext.py:36
       #: test_gettext.py:79 test_gettext.py:85 test_gettext.py:91 test_gettext.py:97
       msgid "Raymond Luxury Yach-t"
       msgstr "Throatwobbler Mangrove"
       
       #: test_gettext.py:17 test_gettext.py:23 test_gettext.py:29 test_gettext.py:35
       #: test_gettext.py:56 test_gettext.py:78 test_gettext.py:84 test_gettext.py:90
       #: test_gettext.py:96
       msgid "mullusk"
       msgstr "bacon"
       
       #: test_gettext.py:40 test_gettext.py:101
       msgid ""
       "This module provides internationalization and localization\n"
       "support for your Python programs by providing an interface to the GNU\n"
       "gettext message catalog library."
       msgstr ""
       "Guvf zbqhyr cebivqrf vagreangvbanyvmngvba naq ybpnyvmngvba\n"
       "fhccbeg sbe lbhe Clguba cebtenzf ol cebivqvat na vagresnpr gb gur TAH\n"
       "trggrkg zrffntr pngnybt yvoenel."
       
       # Manually added, as neither pygettext nor xgettext support plural forms
       # in Python.
       msgid "There is %s file"
       msgid_plural "There are %s files"
       msgstr[0] "Hay %s fichero"
       msgstr[1] "Hay %s ficheros"
       '''
       
       # Here's the second example po file example, used to generate the UMO_DATA
       # containing utf-8 encoded Unicode strings
       
       '''
       # Dummy translation for the Python test_gettext.py module.
       # Copyright (C) 2001 Python Software Foundation
       # Barry Warsaw <barry@python.org>, 2000.
       #
       msgid ""
       msgstr ""
       "Project-Id-Version: 2.0\n"
       "PO-Revision-Date: 2003-04-11 12:42-0400\n"
       "Last-Translator: Barry A. WArsaw <barry@python.org>\n"
       "Language-Team: XX <python-dev@python.org>\n"
       "MIME-Version: 1.0\n"
       "Content-Type: text/plain; charset=utf-8\n"
       "Content-Transfer-Encoding: 7bit\n"
       "Generated-By: manually\n"
       
       #: nofile:0
       msgid "ab\xc3\x9e"
       msgstr "\xc2\xa4yz"
       '''
       
       # Here's the third example po file, used to generate MMO_DATA
       
       '''
       msgid ""
       msgstr ""
       "Project-Id-Version: No Project 0.0\n"
       "POT-Creation-Date: Wed Dec 11 07:44:15 2002\n"
       "PO-Revision-Date: 2002-08-14 01:18:58+00:00\n"
       "Last-Translator: John Doe <jdoe@example.com>\n"
       "Jane Foobar <jfoobar@example.com>\n"
       "Language-Team: xx <xx@example.com>\n"
       "MIME-Version: 1.0\n"
       "Content-Type: text/plain; charset=iso-8859-15\n"
       "Content-Transfer-Encoding: quoted-printable\n"
       "Generated-By: pygettext.py 1.3\n"
       '''
       
       #
       # messages.po, used for bug 17898
       #
       
       '''
       # test file for http://bugs.python.org/issue17898
       msgid ""
       msgstr ""
       "Plural-Forms: nplurals=2; plural=(n != 1);\n"
       "#-#-#-#-#  messages.po (EdX Studio)  #-#-#-#-#\n"
       "Content-Type: text/plain; charset=UTF-8\n"
    1: '''
