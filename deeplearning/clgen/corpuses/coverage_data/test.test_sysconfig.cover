    1: """Tests for sysconfig."""
       
    1: import unittest
    1: import sys
    1: import os
    1: import shutil
    1: import subprocess
    1: from copy import copy, deepcopy
       
    1: from test.test_support import run_unittest, TESTFN, unlink, get_attribute
       
    1: import sysconfig
    1: from sysconfig import (get_paths, get_platform, get_config_vars,
                              get_path, get_path_names, _INSTALL_SCHEMES,
                              _get_default_scheme, _expand_vars,
                              get_scheme_names, get_config_var)
    1: import _osx_support
       
    2: class TestSysConfig(unittest.TestCase):
       
    1:     def setUp(self):
               """Make a copy of sys.path"""
   11:         super(TestSysConfig, self).setUp()
   11:         self.sys_path = sys.path[:]
   11:         self.makefile = None
               # patching os.uname
   11:         if hasattr(os, 'uname'):
   11:             self.uname = os.uname
   11:             self._uname = os.uname()
               else:
>>>>>>             self.uname = None
>>>>>>             self._uname = None
   11:         os.uname = self._get_uname
               # saving the environment
   11:         self.name = os.name
   11:         self.platform = sys.platform
   11:         self.version = sys.version
   11:         self.sep = os.sep
   11:         self.join = os.path.join
   11:         self.isabs = os.path.isabs
   11:         self.splitdrive = os.path.splitdrive
   11:         self._config_vars = copy(sysconfig._CONFIG_VARS)
   11:         self.old_environ = deepcopy(os.environ)
       
    1:     def tearDown(self):
               """Restore sys.path"""
   11:         sys.path[:] = self.sys_path
   11:         if self.makefile is not None:
>>>>>>             os.unlink(self.makefile)
   11:         self._cleanup_testfn()
   11:         if self.uname is not None:
   11:             os.uname = self.uname
               else:
>>>>>>             del os.uname
   11:         os.name = self.name
   11:         sys.platform = self.platform
   11:         sys.version = self.version
   11:         os.sep = self.sep
   11:         os.path.join = self.join
   11:         os.path.isabs = self.isabs
   11:         os.path.splitdrive = self.splitdrive
   11:         sysconfig._CONFIG_VARS = copy(self._config_vars)
  253:         for key, value in self.old_environ.items():
  242:             if os.environ.get(key) != value:
>>>>>>                 os.environ[key] = value
       
  253:         for key in os.environ.keys():
  242:             if key not in self.old_environ:
>>>>>>                 del os.environ[key]
       
   11:         super(TestSysConfig, self).tearDown()
       
    1:     def _set_uname(self, uname):
    3:         self._uname = uname
       
    1:     def _get_uname(self):
   15:         return self._uname
       
    1:     def _cleanup_testfn(self):
   11:         path = TESTFN
   11:         if os.path.isfile(path):
>>>>>>             os.remove(path)
   11:         elif os.path.isdir(path):
>>>>>>             shutil.rmtree(path)
       
    1:     def test_get_path_names(self):
    1:         self.assertEqual(get_path_names(), sysconfig._SCHEME_KEYS)
       
    1:     def test_get_paths(self):
    1:         scheme = get_paths()
    1:         default_scheme = _get_default_scheme()
    1:         wanted = _expand_vars(default_scheme, None)
    1:         wanted = wanted.items()
    1:         wanted.sort()
    1:         scheme = scheme.items()
    1:         scheme.sort()
    1:         self.assertEqual(scheme, wanted)
       
    1:     def test_get_path(self):
               # xxx make real tests here
    9:         for scheme in _INSTALL_SCHEMES:
   68:             for name in _INSTALL_SCHEMES[scheme]:
   60:                 res = get_path(name, scheme)
       
    1:     def test_get_config_vars(self):
    1:         cvars = get_config_vars()
    1:         self.assertIsInstance(cvars, dict)
    1:         self.assertTrue(cvars)
       
    1:     def test_get_platform(self):
               # windows XP, 32bits
    1:         os.name = 'nt'
    1:         sys.version = ('2.4.4 (#71, Oct 18 2006, 08:34:43) '
                              '[MSC v.1310 32 bit (Intel)]')
    1:         sys.platform = 'win32'
    1:         self.assertEqual(get_platform(), 'win32')
       
               # windows XP, amd64
    1:         os.name = 'nt'
    1:         sys.version = ('2.4.4 (#71, Oct 18 2006, 08:34:43) '
                              '[MSC v.1310 32 bit (Amd64)]')
    1:         sys.platform = 'win32'
    1:         self.assertEqual(get_platform(), 'win-amd64')
       
               # windows XP, itanium
    1:         os.name = 'nt'
    1:         sys.version = ('2.4.4 (#71, Oct 18 2006, 08:34:43) '
                              '[MSC v.1310 32 bit (Itanium)]')
    1:         sys.platform = 'win32'
    1:         self.assertEqual(get_platform(), 'win-ia64')
       
               # macbook
    1:         os.name = 'posix'
    1:         sys.version = ('2.5 (r25:51918, Sep 19 2006, 08:49:13) '
                              '\n[GCC 4.0.1 (Apple Computer, Inc. build 5341)]')
    1:         sys.platform = 'darwin'
    1:         self._set_uname(('Darwin', 'macziade', '8.11.1',
                          ('Darwin Kernel Version 8.11.1: '
                           'Wed Oct 10 18:23:28 PDT 2007; '
    1:                     'root:xnu-792.25.20~1/RELEASE_I386'), 'PowerPC'))
    1:         _osx_support._remove_original_values(get_config_vars())
    1:         get_config_vars()['MACOSX_DEPLOYMENT_TARGET'] = '10.3'
       
    1:         get_config_vars()['CFLAGS'] = ('-fno-strict-aliasing -DNDEBUG -g '
                                              '-fwrapv -O3 -Wall -Wstrict-prototypes')
       
    1:         maxint = sys.maxint
    1:         try:
    1:             sys.maxint = 2147483647
    1:             self.assertEqual(get_platform(), 'macosx-10.3-ppc')
    1:             sys.maxint = 9223372036854775807
    1:             self.assertEqual(get_platform(), 'macosx-10.3-ppc64')
               finally:
    1:             sys.maxint = maxint
       
       
    1:         self._set_uname(('Darwin', 'macziade', '8.11.1',
                          ('Darwin Kernel Version 8.11.1: '
                           'Wed Oct 10 18:23:28 PDT 2007; '
    1:                     'root:xnu-792.25.20~1/RELEASE_I386'), 'i386'))
    1:         _osx_support._remove_original_values(get_config_vars())
    1:         get_config_vars()['MACOSX_DEPLOYMENT_TARGET'] = '10.3'
       
    1:         get_config_vars()['CFLAGS'] = ('-fno-strict-aliasing -DNDEBUG -g '
                                              '-fwrapv -O3 -Wall -Wstrict-prototypes')
       
    1:         maxint = sys.maxint
    1:         try:
    1:             sys.maxint = 2147483647
    1:             self.assertEqual(get_platform(), 'macosx-10.3-i386')
    1:             sys.maxint = 9223372036854775807
    1:             self.assertEqual(get_platform(), 'macosx-10.3-x86_64')
               finally:
    1:             sys.maxint = maxint
       
               # macbook with fat binaries (fat, universal or fat64)
    1:         _osx_support._remove_original_values(get_config_vars())
    1:         get_config_vars()['MACOSX_DEPLOYMENT_TARGET'] = '10.4'
    1:         get_config_vars()['CFLAGS'] = ('-arch ppc -arch i386 -isysroot '
                                              '/Developer/SDKs/MacOSX10.4u.sdk  '
                                              '-fno-strict-aliasing -fno-common '
                                              '-dynamic -DNDEBUG -g -O3')
       
    1:         self.assertEqual(get_platform(), 'macosx-10.4-fat')
       
    1:         _osx_support._remove_original_values(get_config_vars())
    1:         get_config_vars()['CFLAGS'] = ('-arch x86_64 -arch i386 -isysroot '
                                              '/Developer/SDKs/MacOSX10.4u.sdk  '
                                              '-fno-strict-aliasing -fno-common '
                                              '-dynamic -DNDEBUG -g -O3')
       
    1:         self.assertEqual(get_platform(), 'macosx-10.4-intel')
       
    1:         _osx_support._remove_original_values(get_config_vars())
    1:         get_config_vars()['CFLAGS'] = ('-arch x86_64 -arch ppc -arch i386 -isysroot '
                                              '/Developer/SDKs/MacOSX10.4u.sdk  '
                                              '-fno-strict-aliasing -fno-common '
                                              '-dynamic -DNDEBUG -g -O3')
    1:         self.assertEqual(get_platform(), 'macosx-10.4-fat3')
       
    1:         _osx_support._remove_original_values(get_config_vars())
    1:         get_config_vars()['CFLAGS'] = ('-arch ppc64 -arch x86_64 -arch ppc -arch i386 -isysroot '
                                              '/Developer/SDKs/MacOSX10.4u.sdk  '
                                              '-fno-strict-aliasing -fno-common '
                                              '-dynamic -DNDEBUG -g -O3')
    1:         self.assertEqual(get_platform(), 'macosx-10.4-universal')
       
    1:         _osx_support._remove_original_values(get_config_vars())
    1:         get_config_vars()['CFLAGS'] = ('-arch x86_64 -arch ppc64 -isysroot '
                                              '/Developer/SDKs/MacOSX10.4u.sdk  '
                                              '-fno-strict-aliasing -fno-common '
                                              '-dynamic -DNDEBUG -g -O3')
       
    1:         self.assertEqual(get_platform(), 'macosx-10.4-fat64')
       
    5:         for arch in ('ppc', 'i386', 'x86_64', 'ppc64'):
    4:             _osx_support._remove_original_values(get_config_vars())
    4:             get_config_vars()['CFLAGS'] = ('-arch %s -isysroot '
                                                  '/Developer/SDKs/MacOSX10.4u.sdk  '
                                                  '-fno-strict-aliasing -fno-common '
    4:                                            '-dynamic -DNDEBUG -g -O3'%(arch,))
       
    4:             self.assertEqual(get_platform(), 'macosx-10.4-%s'%(arch,))
       
               # linux debian sarge
    1:         os.name = 'posix'
    1:         sys.version = ('2.3.5 (#1, Jul  4 2007, 17:28:59) '
                              '\n[GCC 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)]')
    1:         sys.platform = 'linux2'
    1:         self._set_uname(('Linux', 'aglae', '2.6.21.1dedibox-r7',
    1:                     '#1 Mon Apr 30 17:25:38 CEST 2007', 'i686'))
       
    1:         self.assertEqual(get_platform(), 'linux-i686')
       
               # XXX more platforms to tests here
       
    1:     def test_get_config_h_filename(self):
    1:         config_h = sysconfig.get_config_h_filename()
    1:         self.assertTrue(os.path.isfile(config_h), config_h)
       
    1:     def test_get_scheme_names(self):
               wanted = ('nt', 'nt_user', 'os2', 'os2_home', 'osx_framework_user',
    1:                   'posix_home', 'posix_prefix', 'posix_user')
    1:         self.assertEqual(get_scheme_names(), wanted)
       
    1:     @unittest.skipIf(sys.platform.startswith('win'),
    1:                      'Test is not Windows compatible')
           def test_get_makefile_filename(self):
    1:         makefile = sysconfig.get_makefile_filename()
    1:         self.assertTrue(os.path.isfile(makefile), makefile)
               # Issue 22199
    1:         self.assertEqual(sysconfig._get_makefile_filename(), makefile)
       
    1:     def test_symlink(self):
               # Issue 7880
    1:         symlink = get_attribute(os, "symlink")
    1:         def get(python):
    2:             cmd = [python, '-c',
    2:                    'import sysconfig; print sysconfig.get_platform()']
    2:             p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    2:             return p.communicate()
    1:         real = os.path.realpath(sys.executable)
    1:         link = os.path.abspath(TESTFN)
    1:         symlink(real, link)
    1:         try:
    1:             self.assertEqual(get(real), get(link))
               finally:
    1:             unlink(link)
       
    1:     def test_user_similar(self):
               # Issue #8759: make sure the posix scheme for the users
               # is similar to the global posix_prefix one
    1:         base = get_config_var('base')
    1:         user = get_config_var('userbase')
               # the global scheme mirrors the distinction between prefix and
               # exec-prefix but not the user scheme, so we have to adapt the paths
               # before comparing (issue #9100)
    1:         adapt = sys.prefix != sys.exec_prefix
    5:         for name in ('stdlib', 'platstdlib', 'purelib', 'platlib'):
    4:             global_path = get_path(name, 'posix_prefix')
    4:             if adapt:
>>>>>>                 global_path = global_path.replace(sys.exec_prefix, sys.prefix)
>>>>>>                 base = base.replace(sys.exec_prefix, sys.prefix)
    4:             user_path = get_path(name, 'posix_user')
    4:             self.assertEqual(user_path, global_path.replace(base, user, 1))
       
    1:     @unittest.skipUnless(sys.platform == "darwin", "test only relevant on MacOSX")
           def test_platform_in_subprocess(self):
    1:         my_platform = sysconfig.get_platform()
       
               # Test without MACOSX_DEPLOYMENT_TARGET in the environment
       
    1:         env = os.environ.copy()
    1:         if 'MACOSX_DEPLOYMENT_TARGET' in env:
>>>>>>             del env['MACOSX_DEPLOYMENT_TARGET']
       
    1:         with open('/dev/null', 'w') as devnull_fp:
    1:             p = subprocess.Popen([
    1:                     sys.executable, '-c',
    1:                    'import sysconfig; print(sysconfig.get_platform())',
                       ],
    1:                 stdout=subprocess.PIPE,
    1:                 stderr=devnull_fp,
    1:                 env=env)
    1:         test_platform = p.communicate()[0].strip()
    1:         test_platform = test_platform.decode('utf-8')
    1:         status = p.wait()
       
    1:         self.assertEqual(status, 0)
    1:         self.assertEqual(my_platform, test_platform)
       
       
               # Test with MACOSX_DEPLOYMENT_TARGET in the environment, and
               # using a value that is unlikely to be the default one.
    1:         env = os.environ.copy()
    1:         env['MACOSX_DEPLOYMENT_TARGET'] = '10.1'
       
    1:         p = subprocess.Popen([
    1:                 sys.executable, '-c',
    1:                 'import sysconfig; print(sysconfig.get_platform())',
                   ],
    1:             stdout=subprocess.PIPE,
    1:             stderr=open('/dev/null'),
    1:             env=env)
    1:         test_platform = p.communicate()[0].strip()
    1:         test_platform = test_platform.decode('utf-8')
    1:         status = p.wait()
       
    1:         self.assertEqual(status, 0)
    1:         self.assertEqual(my_platform, test_platform)
       
    1: def test_main():
    1:     run_unittest(TestSysConfig)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
