       # Test iterators.
       
    1: import unittest
    1: from test.test_support import run_unittest, TESTFN, unlink, have_unicode, \
                                     check_py3k_warnings, cpython_only, \
                                     check_free_after_iterating
       
       # Test result of triple loop (too big to inline)
    1: TRIPLETS = [(0, 0, 0), (0, 0, 1), (0, 0, 2),
    1:             (0, 1, 0), (0, 1, 1), (0, 1, 2),
    1:             (0, 2, 0), (0, 2, 1), (0, 2, 2),
       
    1:             (1, 0, 0), (1, 0, 1), (1, 0, 2),
    1:             (1, 1, 0), (1, 1, 1), (1, 1, 2),
    1:             (1, 2, 0), (1, 2, 1), (1, 2, 2),
       
    1:             (2, 0, 0), (2, 0, 1), (2, 0, 2),
    1:             (2, 1, 0), (2, 1, 1), (2, 1, 2),
    1:             (2, 2, 0), (2, 2, 1), (2, 2, 2)]
       
       # Helper classes
       
    2: class BasicIterClass:
    1:     def __init__(self, n):
   25:         self.n = n
   25:         self.i = 0
    1:     def next(self):
  118:         res = self.i
  118:         if res >= self.n:
   16:             raise StopIteration
  102:         self.i = res + 1
  102:         return res
       
    2: class IteratingSequenceClass:
    1:     def __init__(self, n):
    9:         self.n = n
    1:     def __iter__(self):
   25:         return BasicIterClass(self.n)
       
    2: class SequenceClass:
    1:     def __init__(self, n):
   26:         self.n = n
    1:     def __getitem__(self, i):
  213:         if 0 <= i < self.n:
  179:             return i
               else:
   34:             raise IndexError
       
       # Main test suite
       
    2: class TestCase(unittest.TestCase):
       
           # Helper to check that an iterator returns a given sequence
    1:     def check_iterator(self, it, seq):
    6:         res = []
    6:         while 1:
   66:             try:
   66:                 val = it.next()
    6:             except StopIteration:
    6:                 break
   60:             res.append(val)
    6:         self.assertEqual(res, seq)
       
           # Helper to check that a for loop generates a given sequence
    1:     def check_for_loop(self, expr, seq):
   13:         res = []
10098:         for val in expr:
10085:             res.append(val)
   13:         self.assertEqual(res, seq)
       
           # Test basic use of iter() function
    1:     def test_iter_basic(self):
    1:         self.check_iterator(iter(range(10)), range(10))
       
           # Test that iter(iter(x)) is the same as iter(x)
    1:     def test_iter_idempotency(self):
    1:         seq = range(10)
    1:         it = iter(seq)
    1:         it2 = iter(it)
    1:         self.assertTrue(it is it2)
       
           # Test that for loops over iterators work
    1:     def test_iter_for_loop(self):
    1:         self.check_for_loop(iter(range(10)), range(10))
       
           # Test several independent iterators over the same list
    1:     def test_iter_independence(self):
    1:         seq = range(3)
    1:         res = []
    4:         for i in iter(seq):
   12:             for j in iter(seq):
   36:                 for k in iter(seq):
   27:                     res.append((i, j, k))
    1:         self.assertEqual(res, TRIPLETS)
       
           # Test triple list comprehension using iterators
    1:     def test_nested_comprehensions_iter(self):
    1:         seq = range(3)
    1:         res = [(i, j, k)
   40:                for i in iter(seq) for j in iter(seq) for k in iter(seq)]
    1:         self.assertEqual(res, TRIPLETS)
       
           # Test triple list comprehension without iterators
    1:     def test_nested_comprehensions_for(self):
    1:         seq = range(3)
   40:         res = [(i, j, k) for i in seq for j in seq for k in seq]
    1:         self.assertEqual(res, TRIPLETS)
       
           # Test a class with __iter__ in a for loop
    1:     def test_iter_class_for(self):
    1:         self.check_for_loop(IteratingSequenceClass(10), range(10))
       
           # Test a class with __iter__ with explicit iter()
    1:     def test_iter_class_iter(self):
    1:         self.check_iterator(iter(IteratingSequenceClass(10)), range(10))
       
           # Test for loop on a sequence class without __iter__
    1:     def test_seq_class_for(self):
    1:         self.check_for_loop(SequenceClass(10), range(10))
       
           # Test iter() on a sequence class without __iter__
    1:     def test_seq_class_iter(self):
    1:         self.check_iterator(iter(SequenceClass(10)), range(10))
       
    1:     def test_mutating_seq_class_exhausted_iter(self):
    1:         a = SequenceClass(5)
    1:         exhit = iter(a)
    1:         empit = iter(a)
    6:         for x in exhit:  # exhaust the iterator
    5:             next(empit)  # not exhausted
    1:         a.n = 7
    1:         self.assertEqual(list(exhit), [])
    1:         self.assertEqual(list(empit), [5, 6])
    1:         self.assertEqual(list(a), [0, 1, 2, 3, 4, 5, 6])
       
           # Test a new_style class with __iter__ but no next() method
    1:     def test_new_style_iter_class(self):
    2:         class IterClass(object):
    1:             def __iter__(self):
    1:                 return self
    1:         self.assertRaises(TypeError, iter, IterClass())
       
           # Test two-argument iter() with callable instance
    1:     def test_iter_callable(self):
    2:         class C:
    1:             def __init__(self):
    1:                 self.i = 0
    1:             def __call__(self):
   11:                 i = self.i
   11:                 self.i = i + 1
   11:                 if i > 100:
>>>>>>                     raise IndexError # Emergency stop
   11:                 return i
    1:         self.check_iterator(iter(C(), 10), range(10))
       
           # Test two-argument iter() with function
    1:     def test_iter_function(self):
    1:         def spam(state=[0]):
   11:             i = state[0]
   11:             state[0] = i+1
   11:             return i
    1:         self.check_iterator(iter(spam, 10), range(10))
       
           # Test two-argument iter() with function that raises StopIteration
    1:     def test_iter_function_stop(self):
    1:         def spam(state=[0]):
   11:             i = state[0]
   11:             if i == 10:
    1:                 raise StopIteration
   10:             state[0] = i+1
   10:             return i
    1:         self.check_iterator(iter(spam, 20), range(10))
       
           # Test exception propagation through function iterator
    1:     def test_exception_function(self):
    1:         def spam(state=[0]):
   11:             i = state[0]
   11:             state[0] = i+1
   11:             if i == 10:
    1:                 raise RuntimeError
   10:             return i
    1:         res = []
    1:         try:
   11:             for x in iter(spam, 20):
   10:                 res.append(x)
    1:         except RuntimeError:
    1:             self.assertEqual(res, range(10))
               else:
>>>>>>             self.fail("should have raised RuntimeError")
       
           # Test exception propagation through sequence iterator
    1:     def test_exception_sequence(self):
    2:         class MySequenceClass(SequenceClass):
    1:             def __getitem__(self, i):
   11:                 if i == 10:
    1:                     raise RuntimeError
   10:                 return SequenceClass.__getitem__(self, i)
    1:         res = []
    1:         try:
   11:             for x in MySequenceClass(20):
   10:                 res.append(x)
    1:         except RuntimeError:
    1:             self.assertEqual(res, range(10))
               else:
>>>>>>             self.fail("should have raised RuntimeError")
       
           # Test for StopIteration from __getitem__
    1:     def test_stop_sequence(self):
    2:         class MySequenceClass(SequenceClass):
    1:             def __getitem__(self, i):
   11:                 if i == 10:
    1:                     raise StopIteration
   10:                 return SequenceClass.__getitem__(self, i)
    1:         self.check_for_loop(MySequenceClass(20), range(10))
       
           # Test a big range
    1:     def test_iter_big_range(self):
    1:         self.check_for_loop(iter(range(10000)), range(10000))
       
           # Test an empty list
    1:     def test_iter_empty(self):
    1:         self.check_for_loop(iter([]), [])
       
           # Test a tuple
    1:     def test_iter_tuple(self):
    1:         self.check_for_loop(iter((0,1,2,3,4,5,6,7,8,9)), range(10))
       
           # Test an xrange
    1:     def test_iter_xrange(self):
    1:         self.check_for_loop(iter(xrange(10)), range(10))
       
           # Test a string
    1:     def test_iter_string(self):
    1:         self.check_for_loop(iter("abcde"), ["a", "b", "c", "d", "e"])
       
           # Test a Unicode string
    1:     if have_unicode:
    1:         def test_iter_unicode(self):
    1:             self.check_for_loop(iter(unicode("abcde")),
    1:                                 [unicode("a"), unicode("b"), unicode("c"),
    1:                                  unicode("d"), unicode("e")])
       
           # Test a directory
    1:     def test_iter_dict(self):
    1:         dict = {}
   11:         for i in range(10):
   10:             dict[i] = None
    1:         self.check_for_loop(dict, dict.keys())
       
           # Test a file
    1:     def test_iter_file(self):
    1:         f = open(TESTFN, "w")
    1:         try:
    6:             for i in range(5):
    5:                 f.write("%d\n" % i)
               finally:
    1:             f.close()
    1:         f = open(TESTFN, "r")
    1:         try:
    1:             self.check_for_loop(f, ["0\n", "1\n", "2\n", "3\n", "4\n"])
    1:             self.check_for_loop(f, [])
               finally:
    1:             f.close()
    1:             try:
    1:                 unlink(TESTFN)
>>>>>>             except OSError:
>>>>>>                 pass
       
           # Test list()'s use of iterators.
    1:     def test_builtin_list(self):
    1:         self.assertEqual(list(SequenceClass(5)), range(5))
    1:         self.assertEqual(list(SequenceClass(0)), [])
    1:         self.assertEqual(list(()), [])
    1:         self.assertEqual(list(range(10, -1, -1)), range(10, -1, -1))
       
    1:         d = {"one": 1, "two": 2, "three": 3}
    1:         self.assertEqual(list(d), d.keys())
       
    1:         self.assertRaises(TypeError, list, list)
    1:         self.assertRaises(TypeError, list, 42)
       
    1:         f = open(TESTFN, "w")
    1:         try:
    6:             for i in range(5):
    5:                 f.write("%d\n" % i)
               finally:
    1:             f.close()
    1:         f = open(TESTFN, "r")
    1:         try:
    1:             self.assertEqual(list(f), ["0\n", "1\n", "2\n", "3\n", "4\n"])
    1:             f.seek(0, 0)
    1:             self.assertEqual(list(f),
    1:                              ["0\n", "1\n", "2\n", "3\n", "4\n"])
               finally:
    1:             f.close()
    1:             try:
    1:                 unlink(TESTFN)
>>>>>>             except OSError:
>>>>>>                 pass
       
           # Test tuples()'s use of iterators.
    1:     def test_builtin_tuple(self):
    1:         self.assertEqual(tuple(SequenceClass(5)), (0, 1, 2, 3, 4))
    1:         self.assertEqual(tuple(SequenceClass(0)), ())
    1:         self.assertEqual(tuple([]), ())
    1:         self.assertEqual(tuple(()), ())
    1:         self.assertEqual(tuple("abc"), ("a", "b", "c"))
       
    1:         d = {"one": 1, "two": 2, "three": 3}
    1:         self.assertEqual(tuple(d), tuple(d.keys()))
       
    1:         self.assertRaises(TypeError, tuple, list)
    1:         self.assertRaises(TypeError, tuple, 42)
       
    1:         f = open(TESTFN, "w")
    1:         try:
    6:             for i in range(5):
    5:                 f.write("%d\n" % i)
               finally:
    1:             f.close()
    1:         f = open(TESTFN, "r")
    1:         try:
    1:             self.assertEqual(tuple(f), ("0\n", "1\n", "2\n", "3\n", "4\n"))
    1:             f.seek(0, 0)
    1:             self.assertEqual(tuple(f),
    1:                              ("0\n", "1\n", "2\n", "3\n", "4\n"))
               finally:
    1:             f.close()
    1:             try:
    1:                 unlink(TESTFN)
>>>>>>             except OSError:
>>>>>>                 pass
       
           # Test filter()'s use of iterators.
    1:     def test_builtin_filter(self):
    1:         self.assertEqual(filter(None, SequenceClass(5)), range(1, 5))
    1:         self.assertEqual(filter(None, SequenceClass(0)), [])
    1:         self.assertEqual(filter(None, ()), ())
    1:         self.assertEqual(filter(None, "abc"), "abc")
       
    1:         d = {"one": 1, "two": 2, "three": 3}
    1:         self.assertEqual(filter(None, d), d.keys())
       
    1:         self.assertRaises(TypeError, filter, None, list)
    1:         self.assertRaises(TypeError, filter, None, 42)
       
    2:         class Boolean:
    1:             def __init__(self, truth):
    2:                 self.truth = truth
    1:             def __nonzero__(self):
  100:                 return self.truth
    1:         bTrue = Boolean(1)
    1:         bFalse = Boolean(0)
       
    2:         class Seq:
    1:             def __init__(self, *args):
    1:                 self.vals = args
    1:             def __iter__(self):
    4:                 class SeqIter:
    2:                     def __init__(self, vals):
    2:                         self.vals = vals
    2:                         self.i = 0
    2:                     def __iter__(self):
    1:                         return self
    2:                     def next(self):
  102:                         i = self.i
  102:                         self.i = i + 1
  102:                         if i < len(self.vals):
  100:                             return self.vals[i]
                               else:
    2:                             raise StopIteration
    2:                 return SeqIter(self.vals)
       
    1:         seq = Seq(*([bTrue, bFalse] * 25))
   51:         self.assertEqual(filter(lambda x: not x, seq), [bFalse]*25)
   51:         self.assertEqual(filter(lambda x: not x, iter(seq)), [bFalse]*25)
       
           # Test max() and min()'s use of iterators.
    1:     def test_builtin_max_min(self):
    1:         self.assertEqual(max(SequenceClass(5)), 4)
    1:         self.assertEqual(min(SequenceClass(5)), 0)
    1:         self.assertEqual(max(8, -1), 8)
    1:         self.assertEqual(min(8, -1), -1)
       
    1:         d = {"one": 1, "two": 2, "three": 3}
    1:         self.assertEqual(max(d), "two")
    1:         self.assertEqual(min(d), "one")
    1:         self.assertEqual(max(d.itervalues()), 3)
    1:         self.assertEqual(min(iter(d.itervalues())), 1)
       
    1:         f = open(TESTFN, "w")
    1:         try:
    1:             f.write("medium line\n")
    1:             f.write("xtra large line\n")
    1:             f.write("itty-bitty line\n")
               finally:
    1:             f.close()
    1:         f = open(TESTFN, "r")
    1:         try:
    1:             self.assertEqual(min(f), "itty-bitty line\n")
    1:             f.seek(0, 0)
    1:             self.assertEqual(max(f), "xtra large line\n")
               finally:
    1:             f.close()
    1:             try:
    1:                 unlink(TESTFN)
>>>>>>             except OSError:
>>>>>>                 pass
       
           # Test map()'s use of iterators.
    1:     def test_builtin_map(self):
    6:         self.assertEqual(map(lambda x: x+1, SequenceClass(5)), range(1, 6))
       
    1:         d = {"one": 1, "two": 2, "three": 3}
    4:         self.assertEqual(map(lambda k, d=d: (k, d[k]), d), d.items())
    1:         dkeys = d.keys()
    1:         expected = [(i < len(d) and dkeys[i] or None,
                            i,
                            i < len(d) and dkeys[i] or None)
    6:                     for i in range(5)]
       
               # Deprecated map(None, ...)
    1:         with check_py3k_warnings():
    1:             self.assertEqual(map(None, SequenceClass(5)), range(5))
    1:             self.assertEqual(map(None, d), d.keys())
    1:             self.assertEqual(map(None, d,
    1:                                        SequenceClass(5),
    1:                                        iter(d.iterkeys())),
    1:                              expected)
       
    1:         f = open(TESTFN, "w")
    1:         try:
   11:             for i in range(10):
   10:                 f.write("xy" * i + "\n") # line i has len 2*i+1
               finally:
    1:             f.close()
    1:         f = open(TESTFN, "r")
    1:         try:
    1:             self.assertEqual(map(len, f), range(1, 21, 2))
               finally:
    1:             f.close()
    1:             try:
    1:                 unlink(TESTFN)
>>>>>>             except OSError:
>>>>>>                 pass
       
           # Test zip()'s use of iterators.
    1:     def test_builtin_zip(self):
    1:         self.assertEqual(zip(), [])
    1:         self.assertEqual(zip(*[]), [])
    1:         self.assertEqual(zip(*[(1, 2), 'ab']), [(1, 'a'), (2, 'b')])
       
    1:         self.assertRaises(TypeError, zip, None)
    1:         self.assertRaises(TypeError, zip, range(10), 42)
    1:         self.assertRaises(TypeError, zip, range(10), zip)
       
    1:         self.assertEqual(zip(IteratingSequenceClass(3)),
    1:                          [(0,), (1,), (2,)])
    1:         self.assertEqual(zip(SequenceClass(3)),
    1:                          [(0,), (1,), (2,)])
       
    1:         d = {"one": 1, "two": 2, "three": 3}
    1:         self.assertEqual(d.items(), zip(d, d.itervalues()))
       
               # Generate all ints starting at constructor arg.
    2:         class IntsFrom:
    1:             def __init__(self, start):
    2:                 self.i = start
       
    1:             def __iter__(self):
    2:                 return self
       
    1:             def next(self):
    7:                 i = self.i
    7:                 self.i = i+1
    7:                 return i
       
    1:         f = open(TESTFN, "w")
    1:         try:
    1:             f.write("a\n" "bbb\n" "cc\n")
               finally:
    1:             f.close()
    1:         f = open(TESTFN, "r")
    1:         try:
    1:             self.assertEqual(zip(IntsFrom(0), f, IntsFrom(-100)),
    1:                              [(0, "a\n", -100),
    1:                               (1, "bbb\n", -99),
    1:                               (2, "cc\n", -98)])
               finally:
    1:             f.close()
    1:             try:
    1:                 unlink(TESTFN)
>>>>>>             except OSError:
>>>>>>                 pass
       
    6:         self.assertEqual(zip(xrange(5)), [(i,) for i in range(5)])
       
               # Classes that lie about their lengths.
    2:         class NoGuessLen5:
    1:             def __getitem__(self, i):
  117:                 if i >= 5:
   12:                     raise IndexError
  105:                 return i
       
    2:         class Guess3Len5(NoGuessLen5):
    1:             def __len__(self):
    7:                 return 3
       
    2:         class Guess30Len5(NoGuessLen5):
    1:             def __len__(self):
    7:                 return 30
       
    1:         self.assertEqual(len(Guess3Len5()), 3)
    1:         self.assertEqual(len(Guess30Len5()), 30)
    1:         self.assertEqual(zip(NoGuessLen5()), zip(range(5)))
    1:         self.assertEqual(zip(Guess3Len5()), zip(range(5)))
    1:         self.assertEqual(zip(Guess30Len5()), zip(range(5)))
       
    6:         expected = [(i, i) for i in range(5)]
    4:         for x in NoGuessLen5(), Guess3Len5(), Guess30Len5():
   12:             for y in NoGuessLen5(), Guess3Len5(), Guess30Len5():
    9:                 self.assertEqual(zip(x, y), expected)
       
           # Test reduces()'s use of iterators.
    1:     def test_deprecated_builtin_reduce(self):
    1:         with check_py3k_warnings():
    1:             self._test_builtin_reduce()
       
    1:     def _test_builtin_reduce(self):
    1:         from operator import add
    1:         self.assertEqual(reduce(add, SequenceClass(5)), 10)
    1:         self.assertEqual(reduce(add, SequenceClass(5), 42), 52)
    1:         self.assertRaises(TypeError, reduce, add, SequenceClass(0))
    1:         self.assertEqual(reduce(add, SequenceClass(0), 42), 42)
    1:         self.assertEqual(reduce(add, SequenceClass(1)), 0)
    1:         self.assertEqual(reduce(add, SequenceClass(1), 42), 42)
       
    1:         d = {"one": 1, "two": 2, "three": 3}
    1:         self.assertEqual(reduce(add, d), "".join(d.keys()))
       
    1:     @unittest.skipUnless(have_unicode, 'needs unicode support')
           def test_unicode_join_endcase(self):
       
               # This class inserts a Unicode object into its argument's natural
               # iteration, in the 3rd position.
    2:         class OhPhooey:
    1:             def __init__(self, seq):
    1:                 self.it = iter(seq)
    1:                 self.i = 0
       
    1:             def __iter__(self):
    2:                 return self
       
    1:             def next(self):
    5:                 i = self.i
    5:                 self.i = i+1
    5:                 if i == 2:
    1:                     return unicode("fooled you!")
    4:                 return self.it.next()
       
    1:         f = open(TESTFN, "w")
    1:         try:
    1:             f.write("a\n" + "b\n" + "c\n")
               finally:
    1:             f.close()
       
    1:         f = open(TESTFN, "r")
               # Nasty:  string.join(s) can't know whether unicode.join() is needed
               # until it's seen all of s's elements.  But in this case, f's
               # iterator cannot be restarted.  So what we're testing here is
               # whether string.join() can manage to remember everything it's seen
               # and pass that on to unicode.join().
    1:         try:
    1:             got = " - ".join(OhPhooey(f))
    1:             self.assertEqual(got, unicode("a\n - b\n - fooled you! - c\n"))
               finally:
    1:             f.close()
    1:             try:
    1:                 unlink(TESTFN)
>>>>>>             except OSError:
>>>>>>                 pass
       
           # Test iterators with 'x in y' and 'x not in y'.
    1:     def test_in_and_not_in(self):
    3:         for sc5 in IteratingSequenceClass(5), SequenceClass(5):
   12:             for i in range(5):
   10:                 self.assertIn(i, sc5)
   20:             for i in "abc", -1, 5, 42.42, (3, 4), [], {1: 1}, 3-12j, sc5:
   18:                 self.assertNotIn(i, sc5)
       
    2:         self.assertRaises(TypeError, lambda: 3 in 12)
    2:         self.assertRaises(TypeError, lambda: 3 not in map)
       
    1:         d = {"one": 1, "two": 2, "three": 3, 1j: 2j}
    5:         for k in d:
    4:             self.assertIn(k, d)
    4:             self.assertNotIn(k, d.itervalues())
    5:         for v in d.values():
    4:             self.assertIn(v, d.itervalues())
    4:             self.assertNotIn(v, d)
    5:         for k, v in d.iteritems():
    4:             self.assertIn((k, v), d.iteritems())
    4:             self.assertNotIn((v, k), d.iteritems())
       
    1:         f = open(TESTFN, "w")
    1:         try:
    1:             f.write("a\n" "b\n" "c\n")
               finally:
    1:             f.close()
    1:         f = open(TESTFN, "r")
    1:         try:
    4:             for chunk in "abc":
    3:                 f.seek(0, 0)
    3:                 self.assertNotIn(chunk, f)
    3:                 f.seek(0, 0)
    3:                 self.assertIn((chunk + "\n"), f)
               finally:
    1:             f.close()
    1:             try:
    1:                 unlink(TESTFN)
>>>>>>             except OSError:
>>>>>>                 pass
       
           # Test iterators with operator.countOf (PySequence_Count).
    1:     def test_countOf(self):
    1:         from operator import countOf
    1:         self.assertEqual(countOf([1,2,2,3,2,5], 2), 3)
    1:         self.assertEqual(countOf((1,2,2,3,2,5), 2), 3)
    1:         self.assertEqual(countOf("122325", "2"), 3)
    1:         self.assertEqual(countOf("122325", "6"), 0)
       
    1:         self.assertRaises(TypeError, countOf, 42, 1)
    1:         self.assertRaises(TypeError, countOf, countOf, countOf)
       
    1:         d = {"one": 3, "two": 3, "three": 3, 1j: 2j}
    5:         for k in d:
    4:             self.assertEqual(countOf(d, k), 1)
    1:         self.assertEqual(countOf(d.itervalues(), 3), 3)
    1:         self.assertEqual(countOf(d.itervalues(), 2j), 1)
    1:         self.assertEqual(countOf(d.itervalues(), 1j), 0)
       
    1:         f = open(TESTFN, "w")
    1:         try:
    1:             f.write("a\n" "b\n" "c\n" "b\n")
               finally:
    1:             f.close()
    1:         f = open(TESTFN, "r")
    1:         try:
    5:             for letter, count in ("a", 1), ("b", 2), ("c", 1), ("d", 0):
    4:                 f.seek(0, 0)
    4:                 self.assertEqual(countOf(f, letter + "\n"), count)
               finally:
    1:             f.close()
    1:             try:
    1:                 unlink(TESTFN)
>>>>>>             except OSError:
>>>>>>                 pass
       
           # Test iterators with operator.indexOf (PySequence_Index).
    1:     def test_indexOf(self):
    1:         from operator import indexOf
    1:         self.assertEqual(indexOf([1,2,2,3,2,5], 1), 0)
    1:         self.assertEqual(indexOf((1,2,2,3,2,5), 2), 1)
    1:         self.assertEqual(indexOf((1,2,2,3,2,5), 3), 3)
    1:         self.assertEqual(indexOf((1,2,2,3,2,5), 5), 5)
    1:         self.assertRaises(ValueError, indexOf, (1,2,2,3,2,5), 0)
    1:         self.assertRaises(ValueError, indexOf, (1,2,2,3,2,5), 6)
       
    1:         self.assertEqual(indexOf("122325", "2"), 1)
    1:         self.assertEqual(indexOf("122325", "5"), 5)
    1:         self.assertRaises(ValueError, indexOf, "122325", "6")
       
    1:         self.assertRaises(TypeError, indexOf, 42, 1)
    1:         self.assertRaises(TypeError, indexOf, indexOf, indexOf)
       
    1:         f = open(TESTFN, "w")
    1:         try:
    1:             f.write("a\n" "b\n" "c\n" "d\n" "e\n")
               finally:
    1:             f.close()
    1:         f = open(TESTFN, "r")
    1:         try:
    1:             fiter = iter(f)
    1:             self.assertEqual(indexOf(fiter, "b\n"), 1)
    1:             self.assertEqual(indexOf(fiter, "d\n"), 1)
    1:             self.assertEqual(indexOf(fiter, "e\n"), 0)
    1:             self.assertRaises(ValueError, indexOf, fiter, "a\n")
               finally:
    1:             f.close()
    1:             try:
    1:                 unlink(TESTFN)
>>>>>>             except OSError:
>>>>>>                 pass
       
    1:         iclass = IteratingSequenceClass(3)
    4:         for i in range(3):
    3:             self.assertEqual(indexOf(iclass, i), i)
    1:         self.assertRaises(ValueError, indexOf, iclass, -1)
       
           # Test iterators with file.writelines().
    1:     def test_writelines(self):
    1:         f = file(TESTFN, "w")
       
    1:         try:
    1:             self.assertRaises(TypeError, f.writelines, None)
    1:             self.assertRaises(TypeError, f.writelines, 42)
       
    1:             f.writelines(["1\n", "2\n"])
    1:             f.writelines(("3\n", "4\n"))
    1:             f.writelines({'5\n': None})
    1:             f.writelines({})
       
                   # Try a big chunk too.
    2:             class Iterator:
    1:                 def __init__(self, start, finish):
    1:                     self.start = start
    1:                     self.finish = finish
    1:                     self.i = self.start
       
    1:                 def next(self):
 2001:                     if self.i >= self.finish:
    1:                         raise StopIteration
 2000:                     result = str(self.i) + '\n'
 2000:                     self.i += 1
 2000:                     return result
       
    1:                 def __iter__(self):
>>>>>>                     return self
       
    2:             class Whatever:
    1:                 def __init__(self, start, finish):
    1:                     self.start = start
    1:                     self.finish = finish
       
    1:                 def __iter__(self):
    1:                     return Iterator(self.start, self.finish)
       
    1:             f.writelines(Whatever(6, 6+2000))
    1:             f.close()
       
    1:             f = file(TESTFN)
 2006:             expected = [str(i) + "\n" for i in range(1, 2006)]
    1:             self.assertEqual(list(f), expected)
       
               finally:
    1:             f.close()
    1:             try:
    1:                 unlink(TESTFN)
>>>>>>             except OSError:
>>>>>>                 pass
       
       
           # Test iterators on RHS of unpacking assignments.
    1:     def test_unpack_iter(self):
    1:         a, b = 1, 2
    1:         self.assertEqual((a, b), (1, 2))
       
    1:         a, b, c = IteratingSequenceClass(3)
    1:         self.assertEqual((a, b, c), (0, 1, 2))
       
    1:         try:    # too many values
    1:             a, b = IteratingSequenceClass(3)
    1:         except ValueError:
    1:             pass
               else:
>>>>>>             self.fail("should have raised ValueError")
       
    1:         try:    # not enough values
    1:             a, b, c = IteratingSequenceClass(2)
    1:         except ValueError:
    1:             pass
               else:
>>>>>>             self.fail("should have raised ValueError")
       
    1:         try:    # not iterable
    1:             a, b, c = len
    1:         except TypeError:
    1:             pass
               else:
>>>>>>             self.fail("should have raised TypeError")
       
    1:         a, b, c = {1: 42, 2: 42, 3: 42}.itervalues()
    1:         self.assertEqual((a, b, c), (42, 42, 42))
       
    1:         f = open(TESTFN, "w")
    1:         lines = ("a\n", "bb\n", "ccc\n")
    1:         try:
    4:             for line in lines:
    3:                 f.write(line)
               finally:
    1:             f.close()
    1:         f = open(TESTFN, "r")
    1:         try:
    1:             a, b, c = f
    1:             self.assertEqual((a, b, c), lines)
               finally:
    1:             f.close()
    1:             try:
    1:                 unlink(TESTFN)
>>>>>>             except OSError:
>>>>>>                 pass
       
    1:         (a, b), (c,) = IteratingSequenceClass(2), {42: 24}
    1:         self.assertEqual((a, b, c), (0, 1, 42))
       
       
    1:     @cpython_only
           def test_ref_counting_behavior(self):
    2:         class C(object):
    1:             count = 0
    1:             def __new__(cls):
    4:                 cls.count += 1
    4:                 return object.__new__(cls)
    1:             def __del__(self):
>>>>>>                 cls = self.__class__
>>>>>>                 assert cls.count > 0
>>>>>>                 cls.count -= 1
    1:         x = C()
    1:         self.assertEqual(C.count, 1)
    1:         del x
    1:         self.assertEqual(C.count, 0)
    1:         l = [C(), C(), C()]
    1:         self.assertEqual(C.count, 3)
    1:         try:
    1:             a, b = iter(l)
    1:         except ValueError:
    1:             pass
    1:         del l
    1:         self.assertEqual(C.count, 0)
       
       
           # Make sure StopIteration is a "sink state".
           # This tests various things that weren't sink states in Python 2.2.1,
           # plus various things that always were fine.
       
    1:     def test_sinkstate_list(self):
               # This used to fail
    1:         a = range(5)
    1:         b = iter(a)
    1:         self.assertEqual(list(b), range(5))
    1:         a.extend(range(5, 10))
    1:         self.assertEqual(list(b), [])
       
    1:     def test_sinkstate_tuple(self):
    1:         a = (0, 1, 2, 3, 4)
    1:         b = iter(a)
    1:         self.assertEqual(list(b), range(5))
    1:         self.assertEqual(list(b), [])
       
    1:     def test_sinkstate_string(self):
    1:         a = "abcde"
    1:         b = iter(a)
    1:         self.assertEqual(list(b), ['a', 'b', 'c', 'd', 'e'])
    1:         self.assertEqual(list(b), [])
       
    1:     def test_sinkstate_sequence(self):
               # This used to fail
    1:         a = SequenceClass(5)
    1:         b = iter(a)
    1:         self.assertEqual(list(b), range(5))
    1:         a.n = 10
    1:         self.assertEqual(list(b), [])
       
    1:     def test_sinkstate_callable(self):
               # This used to fail
    1:         def spam(state=[0]):
    6:             i = state[0]
    6:             state[0] = i+1
    6:             if i == 10:
>>>>>>                 raise AssertionError, "shouldn't have gotten this far"
    6:             return i
    1:         b = iter(spam, 5)
    1:         self.assertEqual(list(b), range(5))
    1:         self.assertEqual(list(b), [])
       
    1:     def test_sinkstate_dict(self):
               # XXX For a more thorough test, see towards the end of:
               # http://mail.python.org/pipermail/python-dev/2002-July/026512.html
    1:         a = {1:1, 2:2, 0:0, 4:4, 3:3}
    5:         for b in iter(a), a.iterkeys(), a.iteritems(), a.itervalues():
    4:             b = iter(a)
    4:             self.assertEqual(len(list(b)), 5)
    4:             self.assertEqual(list(b), [])
       
    1:     def test_sinkstate_yield(self):
    1:         def gen():
    6:             for i in range(5):
    5:                 yield i
    1:         b = gen()
    1:         self.assertEqual(list(b), range(5))
    1:         self.assertEqual(list(b), [])
       
    1:     def test_sinkstate_range(self):
    1:         a = xrange(5)
    1:         b = iter(a)
    1:         self.assertEqual(list(b), range(5))
    1:         self.assertEqual(list(b), [])
       
    1:     def test_sinkstate_enumerate(self):
    1:         a = range(5)
    1:         e = enumerate(a)
    1:         b = iter(e)
    1:         self.assertEqual(list(b), zip(range(5), range(5)))
    1:         self.assertEqual(list(b), [])
       
    1:     def test_3720(self):
               # Avoid a crash, when an iterator deletes its next() method.
    2:         class BadIterator(object):
    1:             def __iter__(self):
    1:                 return self
    1:             def next(self):
    1:                 del BadIterator.next
    1:                 return 1
       
    1:         try:
    2:             for i in BadIterator() :
    1:                 pass
    1:         except TypeError:
    1:             pass
       
    1:     def test_extending_list_with_iterator_does_not_segfault(self):
               # The code to extend a list with an iterator has a fair
               # amount of nontrivial logic in terms of guessing how
               # much memory to allocate in advance, "stealing" refs,
               # and then shrinking at the end.  This is a basic smoke
               # test for that scenario.
    1:         def gen():
  501:             for i in range(500):
  500:                 yield i
    1:         lst = [0] * 500
  241:         for i in range(240):
  240:             lst.pop(0)
    1:         lst.extend(gen())
    1:         self.assertEqual(len(lst), 760)
       
    1:     def test_free_after_iterating(self):
    1:         check_free_after_iterating(self, iter, SequenceClass, (0,))
       
       
    1: def test_main():
    1:     run_unittest(TestCase)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
