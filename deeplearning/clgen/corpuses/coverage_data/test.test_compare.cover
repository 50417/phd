    1: import unittest
    1: from test import test_support
       
    2: class Empty:
    1:     def __repr__(self):
  200:         return '<Empty>'
       
    2: class Coerce:
    1:     def __init__(self, arg):
    1:         self.arg = arg
       
    1:     def __repr__(self):
>>>>>>         return '<Coerce %s>' % self.arg
       
    1:     def __coerce__(self, other):
   99:         if isinstance(other, Coerce):
    1:             return self.arg, other.arg
               else:
   98:             return self.arg, other
       
    2: class Cmp:
    1:     def __init__(self,arg):
    1:         self.arg = arg
       
    1:     def __repr__(self):
>>>>>>         return '<Cmp %s>' % self.arg
       
    1:     def __cmp__(self, other):
  100:         return cmp(self.arg, other)
       
    2: class ComparisonTest(unittest.TestCase):
    1:     set1 = [2, 2.0, 2L, 2+0j, Coerce(2), Cmp(2.0)]
    1:     set2 = [[1], (3,), None, Empty()]
    1:     candidates = set1 + set2
       
    1:     def test_comparisons(self):
   11:         for a in self.candidates:
  110:             for b in self.candidates:
  100:                 if ((a in self.set1) and (b in self.set1)) or a is b:
   40:                     self.assertEqual(a, b)
                       else:
   60:                     self.assertNotEqual(a, b)
       
    1:     def test_id_comparisons(self):
               # Ensure default comparison compares id() of args
    1:         L = []
   11:         for i in range(10):
   10:             L.insert(len(L)//2, Empty())
   11:         for a in L:
  110:             for b in L:
  100:                 self.assertEqual(cmp(a, b), cmp(id(a), id(b)),
  100:                                  'a=%r, b=%r' % (a, b))
       
    1: def test_main():
    1:     test_support.run_unittest(ComparisonTest)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
