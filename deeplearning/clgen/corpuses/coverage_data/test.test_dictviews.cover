    1: import copy
    1: import pickle
    1: import unittest
    1: import collections
    1: from test import test_support
       
    2: class DictSetTest(unittest.TestCase):
       
    1:     def test_constructors_not_callable(self):
    1:         kt = type({}.viewkeys())
    1:         self.assertRaises(TypeError, kt, {})
    1:         self.assertRaises(TypeError, kt)
    1:         it = type({}.viewitems())
    1:         self.assertRaises(TypeError, it, {})
    1:         self.assertRaises(TypeError, it)
    1:         vt = type({}.viewvalues())
    1:         self.assertRaises(TypeError, vt, {})
    1:         self.assertRaises(TypeError, vt)
       
    1:     def test_dict_keys(self):
    1:         d = {1: 10, "a": "ABC"}
    1:         keys = d.viewkeys()
    1:         self.assertEqual(len(keys), 2)
    1:         self.assertEqual(set(keys), set([1, "a"]))
    1:         self.assertEqual(keys, set([1, "a"]))
    1:         self.assertNotEqual(keys, set([1, "a", "b"]))
    1:         self.assertNotEqual(keys, set([1, "b"]))
    1:         self.assertNotEqual(keys, set([1]))
    1:         self.assertNotEqual(keys, 42)
    1:         self.assertIn(1, keys)
    1:         self.assertIn("a", keys)
    1:         self.assertNotIn(10, keys)
    1:         self.assertNotIn("Z", keys)
    1:         self.assertEqual(d.viewkeys(), d.viewkeys())
    1:         e = {1: 11, "a": "def"}
    1:         self.assertEqual(d.viewkeys(), e.viewkeys())
    1:         del e["a"]
    1:         self.assertNotEqual(d.viewkeys(), e.viewkeys())
       
    1:     def test_dict_items(self):
    1:         d = {1: 10, "a": "ABC"}
    1:         items = d.viewitems()
    1:         self.assertEqual(len(items), 2)
    1:         self.assertEqual(set(items), set([(1, 10), ("a", "ABC")]))
    1:         self.assertEqual(items, set([(1, 10), ("a", "ABC")]))
    1:         self.assertNotEqual(items, set([(1, 10), ("a", "ABC"), "junk"]))
    1:         self.assertNotEqual(items, set([(1, 10), ("a", "def")]))
    1:         self.assertNotEqual(items, set([(1, 10)]))
    1:         self.assertNotEqual(items, 42)
    1:         self.assertIn((1, 10), items)
    1:         self.assertIn(("a", "ABC"), items)
    1:         self.assertNotIn((1, 11), items)
    1:         self.assertNotIn(1, items)
    1:         self.assertNotIn((), items)
    1:         self.assertNotIn((1,), items)
    1:         self.assertNotIn((1, 2, 3), items)
    1:         self.assertEqual(d.viewitems(), d.viewitems())
    1:         e = d.copy()
    1:         self.assertEqual(d.viewitems(), e.viewitems())
    1:         e["a"] = "def"
    1:         self.assertNotEqual(d.viewitems(), e.viewitems())
       
    1:     def test_dict_mixed_keys_items(self):
    1:         d = {(1, 1): 11, (2, 2): 22}
    1:         e = {1: 1, 2: 2}
    1:         self.assertEqual(d.viewkeys(), e.viewitems())
    1:         self.assertNotEqual(d.viewitems(), e.viewkeys())
       
    1:     def test_dict_values(self):
    1:         d = {1: 10, "a": "ABC"}
    1:         values = d.viewvalues()
    1:         self.assertEqual(set(values), set([10, "ABC"]))
    1:         self.assertEqual(len(values), 2)
       
    1:     def test_dict_repr(self):
    1:         d = {1: 10, "a": "ABC"}
    1:         self.assertIsInstance(repr(d), str)
    1:         r = repr(d.viewitems())
    1:         self.assertIsInstance(r, str)
    1:         self.assertTrue(r == "dict_items([('a', 'ABC'), (1, 10)])" or
>>>>>>                         r == "dict_items([(1, 10), ('a', 'ABC')])")
    1:         r = repr(d.viewkeys())
    1:         self.assertIsInstance(r, str)
    1:         self.assertTrue(r == "dict_keys(['a', 1])" or
>>>>>>                         r == "dict_keys([1, 'a'])")
    1:         r = repr(d.viewvalues())
    1:         self.assertIsInstance(r, str)
    1:         self.assertTrue(r == "dict_values(['ABC', 10])" or
>>>>>>                         r == "dict_values([10, 'ABC'])")
       
    1:     def test_keys_set_operations(self):
    1:         d1 = {'a': 1, 'b': 2}
    1:         d2 = {'b': 3, 'c': 2}
    1:         d3 = {'d': 4, 'e': 5}
    1:         self.assertEqual(d1.viewkeys() & d1.viewkeys(), {'a', 'b'})
    1:         self.assertEqual(d1.viewkeys() & d2.viewkeys(), {'b'})
    1:         self.assertEqual(d1.viewkeys() & d3.viewkeys(), set())
    1:         self.assertEqual(d1.viewkeys() & set(d1.viewkeys()), {'a', 'b'})
    1:         self.assertEqual(d1.viewkeys() & set(d2.viewkeys()), {'b'})
    1:         self.assertEqual(d1.viewkeys() & set(d3.viewkeys()), set())
    1:         self.assertEqual(d1.viewkeys() & tuple(d1.viewkeys()), {'a', 'b'})
       
    1:         self.assertEqual(d1.viewkeys() | d1.viewkeys(), {'a', 'b'})
    1:         self.assertEqual(d1.viewkeys() | d2.viewkeys(), {'a', 'b', 'c'})
    1:         self.assertEqual(d1.viewkeys() | d3.viewkeys(), {'a', 'b', 'd', 'e'})
    1:         self.assertEqual(d1.viewkeys() | set(d1.viewkeys()), {'a', 'b'})
    1:         self.assertEqual(d1.viewkeys() | set(d2.viewkeys()), {'a', 'b', 'c'})
    1:         self.assertEqual(d1.viewkeys() | set(d3.viewkeys()),
    1:                          {'a', 'b', 'd', 'e'})
    1:         self.assertEqual(d1.viewkeys() | (1, 2), {'a', 'b', 1, 2})
       
    1:         self.assertEqual(d1.viewkeys() ^ d1.viewkeys(), set())
    1:         self.assertEqual(d1.viewkeys() ^ d2.viewkeys(), {'a', 'c'})
    1:         self.assertEqual(d1.viewkeys() ^ d3.viewkeys(), {'a', 'b', 'd', 'e'})
    1:         self.assertEqual(d1.viewkeys() ^ set(d1.viewkeys()), set())
    1:         self.assertEqual(d1.viewkeys() ^ set(d2.viewkeys()), {'a', 'c'})
    1:         self.assertEqual(d1.viewkeys() ^ set(d3.viewkeys()),
    1:                          {'a', 'b', 'd', 'e'})
    1:         self.assertEqual(d1.viewkeys() ^ tuple(d2.keys()), {'a', 'c'})
       
    1:         self.assertEqual(d1.viewkeys() - d1.viewkeys(), set())
    1:         self.assertEqual(d1.viewkeys() - d2.viewkeys(), {'a'})
    1:         self.assertEqual(d1.viewkeys() - d3.viewkeys(), {'a', 'b'})
    1:         self.assertEqual(d1.viewkeys() - set(d1.viewkeys()), set())
    1:         self.assertEqual(d1.viewkeys() - set(d2.viewkeys()), {'a'})
    1:         self.assertEqual(d1.viewkeys() - set(d3.viewkeys()), {'a', 'b'})
    1:         self.assertEqual(d1.viewkeys() - (0, 1), {'a', 'b'})
       
    1:     def test_items_set_operations(self):
    1:         d1 = {'a': 1, 'b': 2}
    1:         d2 = {'a': 2, 'b': 2}
    1:         d3 = {'d': 4, 'e': 5}
    1:         self.assertEqual(
    1:             d1.viewitems() & d1.viewitems(), {('a', 1), ('b', 2)})
    1:         self.assertEqual(d1.viewitems() & d2.viewitems(), {('b', 2)})
    1:         self.assertEqual(d1.viewitems() & d3.viewitems(), set())
    1:         self.assertEqual(d1.viewitems() & set(d1.viewitems()),
    1:                          {('a', 1), ('b', 2)})
    1:         self.assertEqual(d1.viewitems() & set(d2.viewitems()), {('b', 2)})
    1:         self.assertEqual(d1.viewitems() & set(d3.viewitems()), set())
       
    1:         self.assertEqual(d1.viewitems() | d1.viewitems(),
    1:                          {('a', 1), ('b', 2)})
    1:         self.assertEqual(d1.viewitems() | d2.viewitems(),
    1:                          {('a', 1), ('a', 2), ('b', 2)})
    1:         self.assertEqual(d1.viewitems() | d3.viewitems(),
    1:                          {('a', 1), ('b', 2), ('d', 4), ('e', 5)})
    1:         self.assertEqual(d1.viewitems() | set(d1.viewitems()),
    1:                          {('a', 1), ('b', 2)})
    1:         self.assertEqual(d1.viewitems() | set(d2.viewitems()),
    1:                          {('a', 1), ('a', 2), ('b', 2)})
    1:         self.assertEqual(d1.viewitems() | set(d3.viewitems()),
    1:                          {('a', 1), ('b', 2), ('d', 4), ('e', 5)})
       
    1:         self.assertEqual(d1.viewitems() ^ d1.viewitems(), set())
    1:         self.assertEqual(d1.viewitems() ^ d2.viewitems(),
    1:                          {('a', 1), ('a', 2)})
    1:         self.assertEqual(d1.viewitems() ^ d3.viewitems(),
    1:                          {('a', 1), ('b', 2), ('d', 4), ('e', 5)})
       
    1:         self.assertEqual(d1.viewitems() - d1.viewitems(), set())
    1:         self.assertEqual(d1.viewitems() - d2.viewitems(), {('a', 1)})
    1:         self.assertEqual(d1.viewitems() - d3.viewitems(), {('a', 1), ('b', 2)})
    1:         self.assertEqual(d1.viewitems() - set(d1.viewitems()), set())
    1:         self.assertEqual(d1.viewitems() - set(d2.viewitems()), {('a', 1)})
    1:         self.assertEqual(d1.viewitems() - set(d3.viewitems()),
    1:                          {('a', 1), ('b', 2)})
       
    1:     def test_recursive_repr(self):
    1:         d = {}
    1:         d[42] = d.viewvalues()
    1:         self.assertRaises(RuntimeError, repr, d)
       
    1:     def test_abc_registry(self):
    1:         d = dict(a=1)
       
    1:         self.assertIsInstance(d.viewkeys(), collections.KeysView)
    1:         self.assertIsInstance(d.viewkeys(), collections.MappingView)
    1:         self.assertIsInstance(d.viewkeys(), collections.Set)
    1:         self.assertIsInstance(d.viewkeys(), collections.Sized)
    1:         self.assertIsInstance(d.viewkeys(), collections.Iterable)
    1:         self.assertIsInstance(d.viewkeys(), collections.Container)
       
    1:         self.assertIsInstance(d.viewvalues(), collections.ValuesView)
    1:         self.assertIsInstance(d.viewvalues(), collections.MappingView)
    1:         self.assertIsInstance(d.viewvalues(), collections.Sized)
       
    1:         self.assertIsInstance(d.viewitems(), collections.ItemsView)
    1:         self.assertIsInstance(d.viewitems(), collections.MappingView)
    1:         self.assertIsInstance(d.viewitems(), collections.Set)
    1:         self.assertIsInstance(d.viewitems(), collections.Sized)
    1:         self.assertIsInstance(d.viewitems(), collections.Iterable)
    1:         self.assertIsInstance(d.viewitems(), collections.Container)
       
    1:     def test_copy(self):
    1:         d = {1: 10, "a": "ABC"}
    1:         self.assertRaises(TypeError, copy.copy, d.viewkeys())
    1:         self.assertRaises(TypeError, copy.copy, d.viewvalues())
    1:         self.assertRaises(TypeError, copy.copy, d.viewitems())
       
    1:     def test_pickle(self):
    1:         d = {1: 10, "a": "ABC"}
    4:         for proto in range(pickle.HIGHEST_PROTOCOL + 1):
    3:             self.assertRaises((TypeError, pickle.PicklingError),
    3:                 pickle.dumps, d.viewkeys(), proto)
    3:             self.assertRaises((TypeError, pickle.PicklingError),
    3:                 pickle.dumps, d.viewvalues(), proto)
    3:             self.assertRaises((TypeError, pickle.PicklingError),
    3:                 pickle.dumps, d.viewitems(), proto)
       
       
    1: def test_main():
    1:     test_support.run_unittest(DictSetTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
