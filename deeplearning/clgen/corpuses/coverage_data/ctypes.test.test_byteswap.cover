    1: import sys, unittest, struct, math, ctypes
    1: from binascii import hexlify
       
    1: from ctypes import *
       
    1: def bin(s):
   42:     return hexlify(memoryview(s)).upper()
       
       # Each *simple* type that supports different byte orders has an
       # __ctype_be__ attribute that specifies the same type in BIG ENDIAN
       # byte order, and a __ctype_le__ attribute that is the same type in
       # LITTLE ENDIAN byte order.
       #
       # For Structures and Unions, these types are created on demand.
       
    2: class Test(unittest.TestCase):
    1:     @unittest.skip('test disabled')
           def test_X(self):
>>>>>>         print >> sys.stderr,  sys.byteorder
>>>>>>         for i in range(32):
>>>>>>             bits = BITS()
>>>>>>             setattr(bits, "i%s" % i, 1)
>>>>>>             dump(bits)
       
    1:     def test_endian_short(self):
    1:         if sys.byteorder == "little":
    1:             self.assertIs(c_short.__ctype_le__, c_short)
    1:             self.assertIs(c_short.__ctype_be__.__ctype_le__, c_short)
               else:
>>>>>>             self.assertIs(c_short.__ctype_be__, c_short)
>>>>>>             self.assertIs(c_short.__ctype_le__.__ctype_be__, c_short)
    1:         s = c_short.__ctype_be__(0x1234)
    1:         self.assertEqual(bin(struct.pack(">h", 0x1234)), "1234")
    1:         self.assertEqual(bin(s), "1234")
    1:         self.assertEqual(s.value, 0x1234)
       
    1:         s = c_short.__ctype_le__(0x1234)
    1:         self.assertEqual(bin(struct.pack("<h", 0x1234)), "3412")
    1:         self.assertEqual(bin(s), "3412")
    1:         self.assertEqual(s.value, 0x1234)
       
    1:         s = c_ushort.__ctype_be__(0x1234)
    1:         self.assertEqual(bin(struct.pack(">h", 0x1234)), "1234")
    1:         self.assertEqual(bin(s), "1234")
    1:         self.assertEqual(s.value, 0x1234)
       
    1:         s = c_ushort.__ctype_le__(0x1234)
    1:         self.assertEqual(bin(struct.pack("<h", 0x1234)), "3412")
    1:         self.assertEqual(bin(s), "3412")
    1:         self.assertEqual(s.value, 0x1234)
       
    1:     def test_endian_int(self):
    1:         if sys.byteorder == "little":
    1:             self.assertIs(c_int.__ctype_le__, c_int)
    1:             self.assertIs(c_int.__ctype_be__.__ctype_le__, c_int)
               else:
>>>>>>             self.assertIs(c_int.__ctype_be__, c_int)
>>>>>>             self.assertIs(c_int.__ctype_le__.__ctype_be__, c_int)
       
    1:         s = c_int.__ctype_be__(0x12345678)
    1:         self.assertEqual(bin(struct.pack(">i", 0x12345678)), "12345678")
    1:         self.assertEqual(bin(s), "12345678")
    1:         self.assertEqual(s.value, 0x12345678)
       
    1:         s = c_int.__ctype_le__(0x12345678)
    1:         self.assertEqual(bin(struct.pack("<i", 0x12345678)), "78563412")
    1:         self.assertEqual(bin(s), "78563412")
    1:         self.assertEqual(s.value, 0x12345678)
       
    1:         s = c_uint.__ctype_be__(0x12345678)
    1:         self.assertEqual(bin(struct.pack(">I", 0x12345678)), "12345678")
    1:         self.assertEqual(bin(s), "12345678")
    1:         self.assertEqual(s.value, 0x12345678)
       
    1:         s = c_uint.__ctype_le__(0x12345678)
    1:         self.assertEqual(bin(struct.pack("<I", 0x12345678)), "78563412")
    1:         self.assertEqual(bin(s), "78563412")
    1:         self.assertEqual(s.value, 0x12345678)
       
    1:     def test_endian_longlong(self):
    1:         if sys.byteorder == "little":
    1:             self.assertIs(c_longlong.__ctype_le__, c_longlong)
    1:             self.assertIs(c_longlong.__ctype_be__.__ctype_le__, c_longlong)
               else:
>>>>>>             self.assertIs(c_longlong.__ctype_be__, c_longlong)
>>>>>>             self.assertIs(c_longlong.__ctype_le__.__ctype_be__, c_longlong)
       
    1:         s = c_longlong.__ctype_be__(0x1234567890ABCDEF)
    1:         self.assertEqual(bin(struct.pack(">q", 0x1234567890ABCDEF)), "1234567890ABCDEF")
    1:         self.assertEqual(bin(s), "1234567890ABCDEF")
    1:         self.assertEqual(s.value, 0x1234567890ABCDEF)
       
    1:         s = c_longlong.__ctype_le__(0x1234567890ABCDEF)
    1:         self.assertEqual(bin(struct.pack("<q", 0x1234567890ABCDEF)), "EFCDAB9078563412")
    1:         self.assertEqual(bin(s), "EFCDAB9078563412")
    1:         self.assertEqual(s.value, 0x1234567890ABCDEF)
       
    1:         s = c_ulonglong.__ctype_be__(0x1234567890ABCDEF)
    1:         self.assertEqual(bin(struct.pack(">Q", 0x1234567890ABCDEF)), "1234567890ABCDEF")
    1:         self.assertEqual(bin(s), "1234567890ABCDEF")
    1:         self.assertEqual(s.value, 0x1234567890ABCDEF)
       
    1:         s = c_ulonglong.__ctype_le__(0x1234567890ABCDEF)
    1:         self.assertEqual(bin(struct.pack("<Q", 0x1234567890ABCDEF)), "EFCDAB9078563412")
    1:         self.assertEqual(bin(s), "EFCDAB9078563412")
    1:         self.assertEqual(s.value, 0x1234567890ABCDEF)
       
    1:     def test_endian_float(self):
    1:         if sys.byteorder == "little":
    1:             self.assertIs(c_float.__ctype_le__, c_float)
    1:             self.assertIs(c_float.__ctype_be__.__ctype_le__, c_float)
               else:
>>>>>>             self.assertIs(c_float.__ctype_be__, c_float)
>>>>>>             self.assertIs(c_float.__ctype_le__.__ctype_be__, c_float)
    1:         s = c_float(math.pi)
    1:         self.assertEqual(bin(struct.pack("f", math.pi)), bin(s))
               # Hm, what's the precision of a float compared to a double?
    1:         self.assertAlmostEqual(s.value, math.pi, 6)
    1:         s = c_float.__ctype_le__(math.pi)
    1:         self.assertAlmostEqual(s.value, math.pi, 6)
    1:         self.assertEqual(bin(struct.pack("<f", math.pi)), bin(s))
    1:         s = c_float.__ctype_be__(math.pi)
    1:         self.assertAlmostEqual(s.value, math.pi, 6)
    1:         self.assertEqual(bin(struct.pack(">f", math.pi)), bin(s))
       
    1:     def test_endian_double(self):
    1:         if sys.byteorder == "little":
    1:             self.assertIs(c_double.__ctype_le__, c_double)
    1:             self.assertIs(c_double.__ctype_be__.__ctype_le__, c_double)
               else:
>>>>>>             self.assertIs(c_double.__ctype_be__, c_double)
>>>>>>             self.assertIs(c_double.__ctype_le__.__ctype_be__, c_double)
    1:         s = c_double(math.pi)
    1:         self.assertEqual(s.value, math.pi)
    1:         self.assertEqual(bin(struct.pack("d", math.pi)), bin(s))
    1:         s = c_double.__ctype_le__(math.pi)
    1:         self.assertEqual(s.value, math.pi)
    1:         self.assertEqual(bin(struct.pack("<d", math.pi)), bin(s))
    1:         s = c_double.__ctype_be__(math.pi)
    1:         self.assertEqual(s.value, math.pi)
    1:         self.assertEqual(bin(struct.pack(">d", math.pi)), bin(s))
       
    1:     def test_endian_other(self):
    1:         self.assertIs(c_byte.__ctype_le__, c_byte)
    1:         self.assertIs(c_byte.__ctype_be__, c_byte)
       
    1:         self.assertIs(c_ubyte.__ctype_le__, c_ubyte)
    1:         self.assertIs(c_ubyte.__ctype_be__, c_ubyte)
       
    1:         self.assertIs(c_char.__ctype_le__, c_char)
    1:         self.assertIs(c_char.__ctype_be__, c_char)
       
    1:     def test_struct_fields_1(self):
    1:         if sys.byteorder == "little":
    1:             base = BigEndianStructure
               else:
>>>>>>             base = LittleEndianStructure
       
    2:         class T(base):
    1:             pass
    1:         _fields_ = [("a", c_ubyte),
    1:                     ("b", c_byte),
    1:                     ("c", c_short),
    1:                     ("d", c_ushort),
    1:                     ("e", c_int),
    1:                     ("f", c_uint),
    1:                     ("g", c_long),
    1:                     ("h", c_ulong),
    1:                     ("i", c_longlong),
    1:                     ("k", c_ulonglong),
    1:                     ("l", c_float),
    1:                     ("m", c_double),
    1:                     ("n", c_char),
       
    1:                     ("b1", c_byte, 3),
    1:                     ("b2", c_byte, 3),
    1:                     ("b3", c_byte, 2),
    1:                     ("a", c_int * 3 * 3 * 3)]
    1:         T._fields_ = _fields_
       
               # these fields do not support different byte order:
    4:         for typ in c_wchar, c_void_p, POINTER(c_int):
    3:             _fields_.append(("x", typ))
    6:             class T(base):
    3:                 pass
    3:             self.assertRaises(TypeError, setattr, T, "_fields_", [("x", typ)])
       
    1:     def test_struct_struct(self):
               # nested structures with different byteorders
       
               # create nested structures with given byteorders and set memory to data
       
    1:         for nested, data in (
    1:             (BigEndianStructure, b'\0\0\0\1\0\0\0\2'),
    3:             (LittleEndianStructure, b'\1\0\0\0\2\0\0\0'),
               ):
    2:             for parent in (
    2:                 BigEndianStructure,
    2:                 LittleEndianStructure,
    8:                 Structure,
                   ):
   12:                 class NestedStructure(nested):
    6:                     _fields_ = [("x", c_uint32),
    6:                                 ("y", c_uint32)]
       
   12:                 class TestStructure(parent):
    6:                     _fields_ = [("point", NestedStructure)]
       
    6:                 self.assertEqual(len(data), sizeof(TestStructure))
    6:                 ptr = POINTER(TestStructure)
    6:                 s = cast(data, ptr)[0]
    6:                 del ctypes._pointer_type_cache[TestStructure]
    6:                 self.assertEqual(s.point.x, 1)
    6:                 self.assertEqual(s.point.y, 2)
       
    1:     def test_struct_fields_2(self):
               # standard packing in struct uses no alignment.
               # So, we have to align using pad bytes.
               #
               # Unaligned accesses will crash Python (on those platforms that
               # don't allow it, like sparc solaris).
    1:         if sys.byteorder == "little":
    1:             base = BigEndianStructure
    1:             fmt = ">bxhid"
               else:
>>>>>>             base = LittleEndianStructure
>>>>>>             fmt = "<bxhid"
       
    2:         class S(base):
    1:             _fields_ = [("b", c_byte),
    1:                         ("h", c_short),
    1:                         ("i", c_int),
    1:                         ("d", c_double)]
       
    1:         s1 = S(0x12, 0x1234, 0x12345678, 3.14)
    1:         s2 = struct.pack(fmt, 0x12, 0x1234, 0x12345678, 3.14)
    1:         self.assertEqual(bin(s1), bin(s2))
       
    1:     def test_unaligned_nonnative_struct_fields(self):
    1:         if sys.byteorder == "little":
    1:             base = BigEndianStructure
    1:             fmt = ">b h xi xd"
               else:
>>>>>>             base = LittleEndianStructure
>>>>>>             fmt = "<b h xi xd"
       
    2:         class S(base):
    1:             _pack_ = 1
    1:             _fields_ = [("b", c_byte),
       
    1:                         ("h", c_short),
       
    1:                         ("_1", c_byte),
    1:                         ("i", c_int),
       
    1:                         ("_2", c_byte),
    1:                         ("d", c_double)]
       
    1:         s1 = S()
    1:         s1.b = 0x12
    1:         s1.h = 0x1234
    1:         s1.i = 0x12345678
    1:         s1.d = 3.14
    1:         s2 = struct.pack(fmt, 0x12, 0x1234, 0x12345678, 3.14)
    1:         self.assertEqual(bin(s1), bin(s2))
       
    1:     def test_unaligned_native_struct_fields(self):
    1:         if sys.byteorder == "little":
    1:             fmt = "<b h xi xd"
               else:
>>>>>>             base = LittleEndianStructure
>>>>>>             fmt = ">b h xi xd"
       
    2:         class S(Structure):
    1:             _pack_ = 1
    1:             _fields_ = [("b", c_byte),
       
    1:                         ("h", c_short),
       
    1:                         ("_1", c_byte),
    1:                         ("i", c_int),
       
    1:                         ("_2", c_byte),
    1:                         ("d", c_double)]
       
    1:         s1 = S()
    1:         s1.b = 0x12
    1:         s1.h = 0x1234
    1:         s1.i = 0x12345678
    1:         s1.d = 3.14
    1:         s2 = struct.pack(fmt, 0x12, 0x1234, 0x12345678, 3.14)
    1:         self.assertEqual(bin(s1), bin(s2))
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
