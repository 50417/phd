       """Unittest main program"""
       
>>>>>> import sys
>>>>>> import os
>>>>>> import types
       
>>>>>> from . import loader, runner
>>>>>> from .signals import installHandler
       
>>>>>> __unittest = True
       
>>>>>> FAILFAST     = "  -f, --failfast   Stop on first failure\n"
>>>>>> CATCHBREAK   = "  -c, --catch      Catch control-C and display results\n"
>>>>>> BUFFEROUTPUT = "  -b, --buffer     Buffer stdout and stderr during test runs\n"
       
       USAGE_AS_MAIN = """\
       Usage: %(progName)s [options] [tests]
       
       Options:
         -h, --help       Show this message
         -v, --verbose    Verbose output
         -q, --quiet      Minimal output
       %(failfast)s%(catchbreak)s%(buffer)s
       Examples:
         %(progName)s test_module               - run tests from test_module
         %(progName)s module.TestClass          - run tests from module.TestClass
         %(progName)s module.Class.test_method  - run specified test method
       
       [tests] can be a list of any number of test modules, classes and test
       methods.
       
       Alternative Usage: %(progName)s discover [options]
       
       Options:
         -v, --verbose    Verbose output
       %(failfast)s%(catchbreak)s%(buffer)s  -s directory     Directory to start discovery ('.' default)
         -p pattern       Pattern to match test files ('test*.py' default)
         -t directory     Top level directory of project (default to
                          start directory)
       
       For test discovery all test modules must be importable from the top
       level directory of the project.
>>>>>> """
       
       USAGE_FROM_MODULE = """\
       Usage: %(progName)s [options] [test] [...]
       
       Options:
         -h, --help       Show this message
         -v, --verbose    Verbose output
         -q, --quiet      Minimal output
       %(failfast)s%(catchbreak)s%(buffer)s
       Examples:
         %(progName)s                               - run default set of tests
         %(progName)s MyTestSuite                   - run suite 'MyTestSuite'
         %(progName)s MyTestCase.testSomething      - run MyTestCase.testSomething
         %(progName)s MyTestCase                    - run all 'test*' test methods
                                                      in MyTestCase
>>>>>> """
       
       
       
>>>>>> class TestProgram(object):
           """A command-line program that runs a set of tests; this is primarily
              for making test modules conveniently executable.
           """
>>>>>>     USAGE = USAGE_FROM_MODULE
       
           # defaults for testing
>>>>>>     failfast = catchbreak = buffer = progName = None
       
>>>>>>     def __init__(self, module='__main__', defaultTest=None, argv=None,
>>>>>>                     testRunner=None, testLoader=loader.defaultTestLoader,
>>>>>>                     exit=True, verbosity=1, failfast=None, catchbreak=None,
>>>>>>                     buffer=None):
    4:         if isinstance(module, basestring):
    4:             self.module = __import__(module)
    4:             for part in module.split('.')[1:]:
>>>>>>                 self.module = getattr(self.module, part)
               else:
>>>>>>             self.module = module
    4:         if argv is None:
    1:             argv = sys.argv
       
    4:         self.exit = exit
    4:         self.failfast = failfast
    4:         self.catchbreak = catchbreak
    4:         self.verbosity = verbosity
    4:         self.buffer = buffer
    4:         self.defaultTest = defaultTest
    4:         self.testRunner = testRunner
    4:         self.testLoader = testLoader
    4:         self.progName = os.path.basename(argv[0])
    4:         self.parseArgs(argv)
    4:         self.runTests()
       
>>>>>>     def usageExit(self, msg=None):
>>>>>>         if msg:
>>>>>>             print msg
>>>>>>         usage = {'progName': self.progName, 'catchbreak': '', 'failfast': '',
>>>>>>                  'buffer': ''}
>>>>>>         if self.failfast != False:
>>>>>>             usage['failfast'] = FAILFAST
>>>>>>         if self.catchbreak != False:
>>>>>>             usage['catchbreak'] = CATCHBREAK
>>>>>>         if self.buffer != False:
>>>>>>             usage['buffer'] = BUFFEROUTPUT
>>>>>>         print self.USAGE % usage
>>>>>>         sys.exit(2)
       
>>>>>>     def parseArgs(self, argv):
   25:         if len(argv) > 1 and argv[1].lower() == 'discover':
    2:             self._do_discovery(argv[2:])
    2:             return
       
   23:         import getopt
   23:         long_opts = ['help', 'verbose', 'quiet', 'failfast', 'catch', 'buffer']
   23:         try:
   23:             options, args = getopt.getopt(argv[1:], 'hHvqfcb', long_opts)
   41:             for opt, value in options:
   19:                 if opt in ('-h','-H','--help'):
    3:                     self.usageExit()
   19:                 if opt in ('-q','--quiet'):
    2:                     self.verbosity = 0
   19:                 if opt in ('-v','--verbose'):
    2:                     self.verbosity = 2
   19:                 if opt in ('-f','--failfast'):
    4:                     if self.failfast is None:
    2:                         self.failfast = True
                           # Should this raise an exception if -f is not valid?
   19:                 if opt in ('-c','--catch'):
    4:                     if self.catchbreak is None:
    2:                         self.catchbreak = True
                           # Should this raise an exception if -c is not valid?
   19:                 if opt in ('-b','--buffer'):
    4:                     if self.buffer is None:
    2:                         self.buffer = True
                           # Should this raise an exception if -b is not valid?
   22:             if len(args) == 0 and self.defaultTest is None:
                       # createTests will load tests from self.module
   22:                 self.testNames = None
>>>>>>             elif len(args) > 0:
>>>>>>                 self.testNames = args
>>>>>>                 if __name__ == '__main__':
                           # to support python -m unittest ...
>>>>>>                     self.module = None
                   else:
>>>>>>                 self.testNames = (self.defaultTest,)
   22:             self.createTests()
    1:         except getopt.error, msg:
    1:             self.usageExit(msg)
       
>>>>>>     def createTests(self):
    3:         if self.testNames is None:
    3:             self.test = self.testLoader.loadTestsFromModule(self.module)
               else:
>>>>>>             self.test = self.testLoader.loadTestsFromNames(self.testNames,
>>>>>>                                                            self.module)
       
>>>>>>     def _do_discovery(self, argv, Loader=None):
   12:         if Loader is None:
    3:             Loader = lambda: self.testLoader
       
               # handle command line args for test discovery
   12:         self.progName = '%s discover' % self.progName
   12:         import optparse
   12:         parser = optparse.OptionParser()
   12:         parser.prog = self.progName
   12:         parser.add_option('-v', '--verbose', dest='verbose', default=False,
   12:                           help='Verbose output', action='store_true')
   12:         if self.failfast != False:
   12:             parser.add_option('-f', '--failfast', dest='failfast', default=False,
   12:                               help='Stop on first fail or error',
   12:                               action='store_true')
   12:         if self.catchbreak != False:
   12:             parser.add_option('-c', '--catch', dest='catchbreak', default=False,
   12:                               help='Catch Ctrl-C and display results so far',
   12:                               action='store_true')
   12:         if self.buffer != False:
   12:             parser.add_option('-b', '--buffer', dest='buffer', default=False,
   12:                               help='Buffer stdout and stderr during tests',
   12:                               action='store_true')
   12:         parser.add_option('-s', '--start-directory', dest='start', default='.',
   12:                           help="Directory to start discovery ('.' default)")
   12:         parser.add_option('-p', '--pattern', dest='pattern', default='test*.py',
   12:                           help="Pattern to match tests ('test*.py' default)")
   12:         parser.add_option('-t', '--top-level-directory', dest='top', default=None,
   12:                           help='Top level directory of project (defaults to start directory)')
       
   12:         options, args = parser.parse_args(argv)
   12:         if len(args) > 3:
    1:             self.usageExit()
       
   17:         for name, value in zip(('start', 'pattern', 'top'), args):
    6:             setattr(options, name, value)
       
               # only set options from the parsing here
               # if they weren't set explicitly in the constructor
   11:         if self.failfast is None:
   11:             self.failfast = options.failfast
   11:         if self.catchbreak is None:
   11:             self.catchbreak = options.catchbreak
   11:         if self.buffer is None:
   11:             self.buffer = options.buffer
       
   11:         if options.verbose:
    4:             self.verbosity = 2
       
   11:         start_dir = options.start
   11:         pattern = options.pattern
   11:         top_level_dir = options.top
       
   11:         loader = Loader()
   11:         self.test = loader.discover(start_dir, pattern, top_level_dir)
       
>>>>>>     def runTests(self):
   16:         if self.catchbreak:
    5:             installHandler()
   16:         if self.testRunner is None:
>>>>>>             self.testRunner = runner.TextTestRunner
   16:         if isinstance(self.testRunner, (type, types.ClassType)):
   11:             try:
   11:                 testRunner = self.testRunner(verbosity=self.verbosity,
   11:                                              failfast=self.failfast,
   11:                                              buffer=self.buffer)
    1:             except TypeError:
                       # didn't accept the verbosity, buffer or failfast arguments
    1:                 testRunner = self.testRunner()
               else:
                   # it is assumed to be a TestRunner instance
    5:             testRunner = self.testRunner
   16:         self.result = testRunner.run(self.test)
   16:         if self.exit:
    2:             sys.exit(not self.result.wasSuccessful())
       
>>>>>> main = TestProgram
