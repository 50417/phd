       # Test the runpy module
    1: import unittest
    1: import os
    1: import os.path
    1: import sys
    1: import re
    1: import tempfile
    1: from test.test_support import verbose, run_unittest, forget
    1: from test.script_helper import (temp_dir, make_script, compile_script,
                                       make_pkg, make_zip_script, make_zip_pkg)
       
       
    1: from runpy import _run_code, _run_module_code, run_module, run_path
       # Note: This module can't safely test _run_module_as_main as it
       # runs its tests in the current process, which would mess with the
       # real __main__ module (usually test.regrtest)
       # See test_cmd_line_script for a test that executes that code path
       
       # Set up the test code and expected results
       
    2: class RunModuleCodeTest(unittest.TestCase):
    1:     """Unit tests for runpy._run_code and runpy._run_module_code"""
       
    1:     expected_result = ["Top level assignment", "Lower level reference"]
           test_source = (
    1:         "# Check basic code execution\n"
               "result = ['Top level assignment']\n"
               "def f():\n"
               "    result.append('Lower level reference')\n"
               "f()\n"
               "# Check the sys module\n"
               "import sys\n"
               "run_argv0 = sys.argv[0]\n"
               "run_name_in_sys_modules = __name__ in sys.modules\n"
               "if run_name_in_sys_modules:\n"
               "   module_in_sys_modules = globals() is sys.modules[__name__].__dict__\n"
               "# Check nested operation\n"
               "import runpy\n"
               "nested = runpy._run_module_code('x=1\\n', mod_name='<run>')\n"
           )
       
    1:     def test_run_code(self):
    1:         saved_argv0 = sys.argv[0]
    1:         d = _run_code(self.test_source, {})
    1:         self.assertEqual(d["result"], self.expected_result)
    1:         self.assertIs(d["__name__"], None)
    1:         self.assertIs(d["__file__"], None)
    1:         self.assertIs(d["__loader__"], None)
    1:         self.assertIs(d["__package__"], None)
    1:         self.assertIs(d["run_argv0"], saved_argv0)
    1:         self.assertNotIn("run_name", d)
    1:         self.assertIs(sys.argv[0], saved_argv0)
       
    1:     def test_run_module_code(self):
    1:         initial = object()
    1:         name = "<Nonsense>"
    1:         file = "Some other nonsense"
    1:         loader = "Now you're just being silly"
    1:         package = '' # Treat as a top level module
    1:         d1 = dict(initial=initial)
    1:         saved_argv0 = sys.argv[0]
    1:         d2 = _run_module_code(self.test_source,
    1:                               d1,
    1:                               name,
    1:                               file,
    1:                               loader,
    1:                               package)
    1:         self.assertNotIn("result", d1)
    1:         self.assertIs(d2["initial"], initial)
    1:         self.assertEqual(d2["result"], self.expected_result)
    1:         self.assertEqual(d2["nested"]["x"], 1)
    1:         self.assertIs(d2["__name__"], name)
    1:         self.assertTrue(d2["run_name_in_sys_modules"])
    1:         self.assertTrue(d2["module_in_sys_modules"])
    1:         self.assertIs(d2["__file__"], file)
    1:         self.assertIs(d2["run_argv0"], file)
    1:         self.assertIs(d2["__loader__"], loader)
    1:         self.assertIs(d2["__package__"], package)
    1:         self.assertIs(sys.argv[0], saved_argv0)
    1:         self.assertNotIn(name, sys.modules)
       
       
    2: class RunModuleTest(unittest.TestCase):
    1:     """Unit tests for runpy.run_module"""
       
    1:     def expect_import_error(self, mod_name):
    7:         try:
    7:             run_module(mod_name)
    7:         except ImportError:
    7:             pass
               else:
>>>>>>             self.fail("Expected import error for " + mod_name)
       
    1:     def test_invalid_names(self):
               # Builtin module
    1:         self.expect_import_error("sys")
               # Non-existent modules
    1:         self.expect_import_error("sys.imp.eric")
    1:         self.expect_import_error("os.path.half")
    1:         self.expect_import_error("a.bee")
    1:         self.expect_import_error(".howard")
    1:         self.expect_import_error("..eaten")
               # Package without __main__.py
    1:         self.expect_import_error("multiprocessing")
       
    1:     def test_library_module(self):
    1:         run_module("runpy")
       
    1:     def _add_pkg_dir(self, pkg_dir):
   46:         os.mkdir(pkg_dir)
   46:         pkg_fname = os.path.join(pkg_dir, "__init__"+os.extsep+"py")
   46:         pkg_file = open(pkg_fname, "w")
   46:         pkg_file.close()
   46:         return pkg_fname
       
    1:     def _make_pkg(self, source, depth, mod_base="runpy_test"):
   17:         pkg_name = "__runpy_pkg__"
   17:         test_fname = mod_base+os.extsep+"py"
   17:         pkg_dir = sub_dir = tempfile.mkdtemp()
   17:         if verbose: print "  Package tree in:", sub_dir
   17:         sys.path.insert(0, pkg_dir)
   17:         if verbose: print "  Updated sys.path:", sys.path[0]
   51:         for i in range(depth):
   34:             sub_dir = os.path.join(sub_dir, pkg_name)
   34:             pkg_fname = self._add_pkg_dir(sub_dir)
   34:             if verbose: print "  Next level in:", sub_dir
   34:             if verbose: print "  Created:", pkg_fname
   17:         mod_fname = os.path.join(sub_dir, test_fname)
   17:         mod_file = open(mod_fname, "w")
   17:         mod_file.write(source)
   17:         mod_file.close()
   17:         if verbose: print "  Created:", mod_fname
   17:         mod_name = (pkg_name+".")*depth + mod_base
   17:         return pkg_dir, mod_fname, mod_name
       
    1:     def _del_pkg(self, top, depth, mod_name):
23945:         for entry in list(sys.modules):
23928:             if entry.startswith("__runpy_pkg__"):
   66:                 del sys.modules[entry]
   17:         if verbose: print "  Removed sys.modules entries"
   17:         del sys.path[0]
   17:         if verbose: print "  Removed sys.path entry"
   80:         for root, dirs, files in os.walk(top, topdown=False):
  196:             for name in files:
  133:                 try:
  133:                     os.remove(os.path.join(root, name))
>>>>>>                 except OSError, ex:
>>>>>>                     if verbose: print ex # Persist with cleaning up
  109:             for name in dirs:
   46:                 fullname = os.path.join(root, name)
   46:                 try:
   46:                     os.rmdir(fullname)
>>>>>>                 except OSError, ex:
>>>>>>                     if verbose: print ex # Persist with cleaning up
   17:         try:
   17:             os.rmdir(top)
   17:             if verbose: print "  Removed package tree"
>>>>>>         except OSError, ex:
>>>>>>             if verbose: print ex # Persist with cleaning up
       
    1:     def _check_module(self, depth):
               pkg_dir, mod_fname, mod_name = (
    4:                self._make_pkg("x=1\n", depth))
    4:         forget(mod_name)
    4:         try:
    4:             if verbose: print "Running from source:", mod_name
    4:             d1 = run_module(mod_name) # Read from source
    4:             self.assertIn("x", d1)
    4:             self.assertTrue(d1["x"] == 1)
    4:             del d1 # Ensure __loader__ entry doesn't keep file open
    4:             __import__(mod_name)
    4:             os.remove(mod_fname)
    4:             if not sys.dont_write_bytecode:
    4:                 if verbose: print "Running from compiled:", mod_name
    4:                 d2 = run_module(mod_name) # Read from bytecode
    4:                 self.assertIn("x", d2)
    4:                 self.assertTrue(d2["x"] == 1)
    4:                 del d2 # Ensure __loader__ entry doesn't keep file open
               finally:
    4:             self._del_pkg(pkg_dir, depth, mod_name)
    4:         if verbose: print "Module executed successfully"
       
    1:     def _check_package(self, depth):
               pkg_dir, mod_fname, mod_name = (
    3:                self._make_pkg("x=1\n", depth, "__main__"))
    3:         pkg_name, _, _ = mod_name.rpartition(".")
    3:         forget(mod_name)
    3:         try:
    3:             if verbose: print "Running from source:", pkg_name
    3:             d1 = run_module(pkg_name) # Read from source
    3:             self.assertIn("x", d1)
    3:             self.assertTrue(d1["x"] == 1)
    3:             del d1 # Ensure __loader__ entry doesn't keep file open
    3:             __import__(mod_name)
    3:             os.remove(mod_fname)
    3:             if not sys.dont_write_bytecode:
    3:                 if verbose: print "Running from compiled:", pkg_name
    3:                 d2 = run_module(pkg_name) # Read from bytecode
    3:                 self.assertIn("x", d2)
    3:                 self.assertTrue(d2["x"] == 1)
    3:                 del d2 # Ensure __loader__ entry doesn't keep file open
               finally:
    3:             self._del_pkg(pkg_dir, depth, pkg_name)
    3:         if verbose: print "Package executed successfully"
       
    1:     def _add_relative_modules(self, base_dir, source, depth):
    6:         if depth <= 1:
>>>>>>             raise ValueError("Relative module test needs depth > 1")
    6:         pkg_name = "__runpy_pkg__"
    6:         module_dir = base_dir
   24:         for i in range(depth):
   18:             parent_dir = module_dir
   18:             module_dir = os.path.join(module_dir, pkg_name)
               # Add sibling module
    6:         sibling_fname = os.path.join(module_dir, "sibling"+os.extsep+"py")
    6:         sibling_file = open(sibling_fname, "w")
    6:         sibling_file.close()
    6:         if verbose: print "  Added sibling module:", sibling_fname
               # Add nephew module
    6:         uncle_dir = os.path.join(parent_dir, "uncle")
    6:         self._add_pkg_dir(uncle_dir)
    6:         if verbose: print "  Added uncle package:", uncle_dir
    6:         cousin_dir = os.path.join(uncle_dir, "cousin")
    6:         self._add_pkg_dir(cousin_dir)
    6:         if verbose: print "  Added cousin package:", cousin_dir
    6:         nephew_fname = os.path.join(cousin_dir, "nephew"+os.extsep+"py")
    6:         nephew_file = open(nephew_fname, "w")
    6:         nephew_file.close()
    6:         if verbose: print "  Added nephew module:", nephew_fname
       
    1:     def _check_relative_imports(self, depth, run_name=None):
               contents = r"""\
       from __future__ import absolute_import
       from . import sibling
       from ..uncle.cousin import nephew
    6: """
               pkg_dir, mod_fname, mod_name = (
    6:                self._make_pkg(contents, depth))
    6:         try:
    6:             self._add_relative_modules(pkg_dir, contents, depth)
    6:             pkg_name = mod_name.rpartition('.')[0]
    6:             if verbose: print "Running from source:", mod_name
    6:             d1 = run_module(mod_name, run_name=run_name) # Read from source
    6:             self.assertIn("__package__", d1)
    6:             self.assertTrue(d1["__package__"] == pkg_name)
    6:             self.assertIn("sibling", d1)
    6:             self.assertIn("nephew", d1)
    6:             del d1 # Ensure __loader__ entry doesn't keep file open
    6:             __import__(mod_name)
    6:             os.remove(mod_fname)
    6:             if not sys.dont_write_bytecode:
    6:                 if verbose: print "Running from compiled:", mod_name
    6:                 d2 = run_module(mod_name, run_name=run_name) # Read from bytecode
    6:                 self.assertIn("__package__", d2)
    6:                 self.assertTrue(d2["__package__"] == pkg_name)
    6:                 self.assertIn("sibling", d2)
    6:                 self.assertIn("nephew", d2)
    6:                 del d2 # Ensure __loader__ entry doesn't keep file open
               finally:
    6:             self._del_pkg(pkg_dir, depth, mod_name)
    6:         if verbose: print "Module executed successfully"
       
    1:     def test_run_module(self):
    5:         for depth in range(4):
    4:             if verbose: print "Testing package depth:", depth
    4:             self._check_module(depth)
       
    1:     def test_run_package(self):
    4:         for depth in range(1, 4):
    3:             if verbose: print "Testing package depth:", depth
    3:             self._check_package(depth)
       
    1:     def test_run_package_init_exceptions(self):
               # These were previously wrapped in an ImportError; see Issue 14285
    1:         exceptions = (ImportError, AttributeError, TypeError, ValueError)
    5:         for exception in exceptions:
    4:             name = exception.__name__
    4:             source = "raise {0}('{0} in __init__.py.')".format(name)
       
    4:             result = self._make_pkg("", 1, "__main__")
    4:             pkg_dir, _, mod_name = result
    4:             mod_name = mod_name.replace(".__main__", "")
    4:             try:
    4:                 init = os.path.join(pkg_dir, "__runpy_pkg__", "__init__.py")
    4:                 with open(init, "wt") as mod_file:
    4:                     mod_file.write(source)
    4:                 try:
    4:                     run_module(mod_name)
    4:                 except exception as err:
    4:                     msg = "cannot be directly executed"
    4:                     self.assertNotIn(msg, format(err))
                       else:
>>>>>>                     self.fail("Nothing raised; expected {}".format(name))
                   finally:
    4:                 self._del_pkg(pkg_dir, 1, mod_name)
       
    1:     def test_explicit_relative_import(self):
    4:         for depth in range(2, 5):
    3:             if verbose: print "Testing relative imports at depth:", depth
    3:             self._check_relative_imports(depth)
       
    1:     def test_main_relative_import(self):
    4:         for depth in range(2, 5):
    3:             if verbose: print "Testing main relative imports at depth:", depth
    3:             self._check_relative_imports(depth, "__main__")
       
       
    2: class RunPathTest(unittest.TestCase):
    1:     """Unit tests for runpy.run_path"""
           # Based on corresponding tests in test_cmd_line_script
       
           test_source = """\
       # Script may be run with optimisation enabled, so don't rely on assert
       # statements being executed
       def assertEqual(lhs, rhs):
           if lhs != rhs:
               raise AssertionError('%r != %r' % (lhs, rhs))
       def assertIs(lhs, rhs):
           if lhs is not rhs:
               raise AssertionError('%r is not %r' % (lhs, rhs))
       # Check basic code execution
       result = ['Top level assignment']
       def f():
           result.append('Lower level reference')
       f()
       assertEqual(result, ['Top level assignment', 'Lower level reference'])
       # Check the sys module
       import sys
       assertIs(globals(), sys.modules[__name__].__dict__)
       argv0 = sys.argv[0]
    1: """
       
    1:     def _make_test_script(self, script_dir, script_basename, source=None):
    5:         if source is None:
    4:             source = self.test_source
    5:         return make_script(script_dir, script_basename, source)
       
    1:     def _check_script(self, script_name, expected_name, expected_file,
                                   expected_argv0, expected_package):
    3:         result = run_path(script_name)
    3:         self.assertEqual(result["__name__"], expected_name)
    3:         self.assertEqual(result["__file__"], expected_file)
    3:         self.assertIn("argv0", result)
    3:         self.assertEqual(result["argv0"], expected_argv0)
    3:         self.assertEqual(result["__package__"], expected_package)
       
    1:     def _check_import_error(self, script_name, msg):
    1:         msg = re.escape(msg)
    1:         self.assertRaisesRegexp(ImportError, msg, run_path, script_name)
       
    1:     def test_basic_script(self):
    1:         with temp_dir() as script_dir:
    1:             mod_name = 'script'
    1:             script_name = self._make_test_script(script_dir, mod_name)
    1:             self._check_script(script_name, "<run_path>", script_name,
    1:                                script_name, None)
       
    1:     def test_script_compiled(self):
>>>>>>         with temp_dir() as script_dir:
>>>>>>             mod_name = 'script'
>>>>>>             script_name = self._make_test_script(script_dir, mod_name)
>>>>>>             compiled_name = compile_script(script_name)
>>>>>>             os.remove(script_name)
>>>>>>             self._check_script(compiled_name, "<run_path>", compiled_name,
>>>>>>                                compiled_name, None)
       
    1:     def test_directory(self):
    1:         with temp_dir() as script_dir:
    1:             mod_name = '__main__'
    1:             script_name = self._make_test_script(script_dir, mod_name)
    1:             self._check_script(script_dir, "<run_path>", script_name,
    1:                                script_dir, '')
       
    1:     def test_directory_compiled(self):
    1:         with temp_dir() as script_dir:
    1:             mod_name = '__main__'
    1:             script_name = self._make_test_script(script_dir, mod_name)
    1:             compiled_name = compile_script(script_name)
    1:             os.remove(script_name)
    1:             self._check_script(script_dir, "<run_path>", compiled_name,
    1:                                script_dir, '')
       
    1:     def test_directory_error(self):
    1:         with temp_dir() as script_dir:
    1:             mod_name = 'not_main'
    1:             script_name = self._make_test_script(script_dir, mod_name)
    1:             msg = "can't find '__main__' module in %r" % script_dir
    1:             self._check_import_error(script_dir, msg)
       
    1:     def test_zipfile(self):
>>>>>>         with temp_dir() as script_dir:
>>>>>>             mod_name = '__main__'
>>>>>>             script_name = self._make_test_script(script_dir, mod_name)
>>>>>>             zip_name, fname = make_zip_script(script_dir, 'test_zip', script_name)
>>>>>>             self._check_script(zip_name, "<run_path>", fname, zip_name, '')
       
    1:     def test_zipfile_compiled(self):
>>>>>>         with temp_dir() as script_dir:
>>>>>>             mod_name = '__main__'
>>>>>>             script_name = self._make_test_script(script_dir, mod_name)
>>>>>>             compiled_name = compile_script(script_name)
>>>>>>             zip_name, fname = make_zip_script(script_dir, 'test_zip', compiled_name)
>>>>>>             self._check_script(zip_name, "<run_path>", fname, zip_name, '')
       
    1:     def test_zipfile_error(self):
>>>>>>         with temp_dir() as script_dir:
>>>>>>             mod_name = 'not_main'
>>>>>>             script_name = self._make_test_script(script_dir, mod_name)
>>>>>>             zip_name, fname = make_zip_script(script_dir, 'test_zip', script_name)
>>>>>>             msg = "can't find '__main__' module in %r" % zip_name
>>>>>>             self._check_import_error(zip_name, msg)
       
    1:     def test_main_recursion_error(self):
    1:         with temp_dir() as script_dir, temp_dir() as dummy_dir:
    1:             mod_name = '__main__'
    1:             source = ("import runpy\n"
    1:                       "runpy.run_path(%r)\n") % dummy_dir
    1:             script_name = self._make_test_script(script_dir, mod_name, source)
    1:             zip_name, fname = make_zip_script(script_dir, 'test_zip', script_name)
    1:             msg = "recursion depth exceeded"
    1:             self.assertRaisesRegexp(RuntimeError, msg, run_path, zip_name)
       
       
       
    1: def test_main():
    1:     run_unittest(RunModuleCodeTest, RunModuleTest, RunPathTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
