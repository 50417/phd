    1: import unittest
    1: from ctypes import *
       
    1: from ctypes.test import need_symbol
       
    1: formats = "bBhHiIlLqQfd"
       
    1: formats = c_byte, c_ubyte, c_short, c_ushort, c_int, c_uint, \
    1:           c_long, c_ulonglong, c_float, c_double, c_longdouble
       
    2: class ArrayTestCase(unittest.TestCase):
    1:     def test_simple(self):
               # create classes holding simple numeric types, and check
               # various properties.
       
    1:         init = range(15, 25)
       
   12:         for fmt in formats:
   11:             alen = len(init)
   11:             int_array = ARRAY(fmt, alen)
       
   11:             ia = int_array(*init)
                   # length of instance ok?
   11:             self.assertEqual(len(ia), alen)
       
                   # slot values ok?
  121:             values = [ia[i] for i in range(alen)]
   11:             self.assertEqual(values, init)
       
                   # out-of-bounds accesses should be caught
   11:             with self.assertRaises(IndexError): ia[alen]
   11:             with self.assertRaises(IndexError): ia[-alen-1]
       
                   # change the items
   11:             from operator import setitem
   11:             new_values = range(42, 42+alen)
  121:             [setitem(ia, n, new_values[n]) for n in range(alen)]
  121:             values = [ia[i] for i in range(alen)]
   11:             self.assertEqual(values, new_values)
       
                   # are the items initialized to 0?
   11:             ia = int_array()
  121:             values = [ia[i] for i in range(alen)]
   11:             self.assertEqual(values, [0] * alen)
       
                   # Too many initializers should be caught
   11:             self.assertRaises(IndexError, int_array, *range(alen*2))
       
    1:         CharArray = ARRAY(c_char, 3)
       
    1:         ca = CharArray("a", "b", "c")
       
               # Should this work? It doesn't:
               # CharArray("abc")
    1:         self.assertRaises(TypeError, CharArray, "abc")
       
    1:         self.assertEqual(ca[0], "a")
    1:         self.assertEqual(ca[1], "b")
    1:         self.assertEqual(ca[2], "c")
    1:         self.assertEqual(ca[-3], "a")
    1:         self.assertEqual(ca[-2], "b")
    1:         self.assertEqual(ca[-1], "c")
       
    1:         self.assertEqual(len(ca), 3)
       
               # slicing is now supported, but not extended slicing (3-argument)!
    1:         from operator import getslice, delitem
    1:         self.assertRaises(TypeError, getslice, ca, 0, 1, -1)
       
               # cannot delete items
    1:         self.assertRaises(TypeError, delitem, ca, 0)
       
    1:     def test_numeric_arrays(self):
       
    1:         alen = 5
       
    1:         numarray = ARRAY(c_int, alen)
       
    1:         na = numarray()
    6:         values = [na[i] for i in range(alen)]
    1:         self.assertEqual(values, [0] * alen)
       
    1:         na = numarray(*[c_int()] * alen)
    6:         values = [na[i] for i in range(alen)]
    1:         self.assertEqual(values, [0]*alen)
       
    1:         na = numarray(1, 2, 3, 4, 5)
    6:         values = [i for i in na]
    1:         self.assertEqual(values, [1, 2, 3, 4, 5])
       
    1:         na = numarray(*map(c_int, (1, 2, 3, 4, 5)))
    6:         values = [i for i in na]
    1:         self.assertEqual(values, [1, 2, 3, 4, 5])
       
    1:     def test_classcache(self):
    1:         self.assertIsNot(ARRAY(c_int, 3), ARRAY(c_int, 4))
    1:         self.assertIs(ARRAY(c_int, 3), ARRAY(c_int, 3))
       
    1:     def test_from_address(self):
               # Failed with 0.9.8, reported by JUrner
    1:         p = create_string_buffer("foo")
    1:         sz = (c_char * 3).from_address(addressof(p))
    1:         self.assertEqual(sz[:], "foo")
    1:         self.assertEqual(sz[::], "foo")
    1:         self.assertEqual(sz[::-1], "oof")
    1:         self.assertEqual(sz[::3], "f")
    1:         self.assertEqual(sz[1:4:2], "o")
    1:         self.assertEqual(sz.value, "foo")
       
    1:     @need_symbol('create_unicode_buffer')
           def test_from_addressW(self):
    1:         p = create_unicode_buffer("foo")
    1:         sz = (c_wchar * 3).from_address(addressof(p))
    1:         self.assertEqual(sz[:], "foo")
    1:         self.assertEqual(sz[::], "foo")
    1:         self.assertEqual(sz[::-1], "oof")
    1:         self.assertEqual(sz[::3], "f")
    1:         self.assertEqual(sz[1:4:2], "o")
    1:         self.assertEqual(sz.value, "foo")
       
    1:     def test_cache(self):
               # Array types are cached internally in the _ctypes extension,
               # in a WeakValueDictionary.  Make sure the array type is
               # removed from the cache when the itemtype goes away.  This
               # test will not fail, but will show a leak in the testsuite.
       
               # Create a new type:
    2:         class my_int(c_int):
    1:             pass
               # Create a new array type based on it:
    1:         t1 = my_int * 1
    1:         t2 = my_int * 1
    1:         self.assertIs(t1, t2)
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
