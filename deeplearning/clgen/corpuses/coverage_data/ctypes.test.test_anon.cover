    1: import unittest
    1: from ctypes import *
       
    2: class AnonTest(unittest.TestCase):
       
    1:     def test_anon(self):
    2:         class ANON(Union):
    1:             _fields_ = [("a", c_int),
    1:                         ("b", c_int)]
       
    2:         class Y(Structure):
    1:             _fields_ = [("x", c_int),
    1:                         ("_", ANON),
    1:                         ("y", c_int)]
    1:             _anonymous_ = ["_"]
       
    1:         self.assertEqual(Y.a.offset, sizeof(c_int))
    1:         self.assertEqual(Y.b.offset, sizeof(c_int))
       
    1:         self.assertEqual(ANON.a.offset, 0)
    1:         self.assertEqual(ANON.b.offset, 0)
       
    1:     def test_anon_nonseq(self):
               # TypeError: _anonymous_ must be a sequence
    1:         self.assertRaises(TypeError,
    2:                               lambda: type(Structure)("Name",
    1:                                                       (Structure,),
    1:                                                       {"_fields_": [], "_anonymous_": 42}))
       
    1:     def test_anon_nonmember(self):
               # AttributeError: type object 'Name' has no attribute 'x'
    1:         self.assertRaises(AttributeError,
    2:                               lambda: type(Structure)("Name",
    1:                                                       (Structure,),
    1:                                                       {"_fields_": [],
    1:                                                        "_anonymous_": ["x"]}))
       
    1:     def test_nested(self):
    2:         class ANON_S(Structure):
    1:             _fields_ = [("a", c_int)]
       
    2:         class ANON_U(Union):
    1:             _fields_ = [("_", ANON_S),
    1:                         ("b", c_int)]
    1:             _anonymous_ = ["_"]
       
    2:         class Y(Structure):
    1:             _fields_ = [("x", c_int),
    1:                         ("_", ANON_U),
    1:                         ("y", c_int)]
    1:             _anonymous_ = ["_"]
       
    1:         self.assertEqual(Y.x.offset, 0)
    1:         self.assertEqual(Y.a.offset, sizeof(c_int))
    1:         self.assertEqual(Y.b.offset, sizeof(c_int))
    1:         self.assertEqual(Y._.offset, sizeof(c_int))
    1:         self.assertEqual(Y.y.offset, sizeof(c_int) * 2)
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
