    1: from json.tests import PyTest, CTest
       
       
    2: class JSONTestObject:
    1:     pass
       
       
    2: class TestRecursion(object):
    1:     def test_listrecursion(self):
>>>>>>         x = []
>>>>>>         x.append(x)
>>>>>>         try:
>>>>>>             self.dumps(x)
>>>>>>         except ValueError:
>>>>>>             pass
               else:
>>>>>>             self.fail("didn't raise ValueError on list recursion")
>>>>>>         x = []
>>>>>>         y = [x]
>>>>>>         x.append(y)
>>>>>>         try:
>>>>>>             self.dumps(x)
>>>>>>         except ValueError:
>>>>>>             pass
               else:
>>>>>>             self.fail("didn't raise ValueError on alternating list recursion")
>>>>>>         y = []
>>>>>>         x = [y, y]
               # ensure that the marker is cleared
>>>>>>         self.dumps(x)
       
    1:     def test_dictrecursion(self):
    1:         x = {}
    1:         x["test"] = x
    1:         try:
    1:             self.dumps(x)
    1:         except ValueError:
    1:             pass
               else:
>>>>>>             self.fail("didn't raise ValueError on dict recursion")
    1:         x = {}
    1:         y = {"a": x, "b": x}
               # ensure that the marker is cleared
    1:         self.dumps(x)
       
    1:     def test_defaultrecursion(self):
    2:         class RecursiveJSONEncoder(self.json.JSONEncoder):
    1:             recurse = False
    1:             def default(self, o):
    2:                 if o is JSONTestObject:
    2:                     if self.recurse:
    1:                         return [JSONTestObject]
                           else:
    1:                         return 'JSONTestObject'
>>>>>>                 return pyjson.JSONEncoder.default(o)
       
    1:         enc = RecursiveJSONEncoder()
    1:         self.assertEqual(enc.encode(JSONTestObject), '"JSONTestObject"')
    1:         enc.recurse = True
    1:         try:
    1:             enc.encode(JSONTestObject)
    1:         except ValueError:
    1:             pass
               else:
>>>>>>             self.fail("didn't raise ValueError on default recursion")
       
       
    1:     def test_highly_nested_objects_decoding(self):
               # test that loading highly-nested objects doesn't segfault when C
               # accelerations are used. See #12017
               # str
>>>>>>         with self.assertRaises(RuntimeError):
>>>>>>             self.loads('{"a":' * 100000 + '1' + '}' * 100000)
>>>>>>         with self.assertRaises(RuntimeError):
>>>>>>             self.loads('{"a":' * 100000 + '[1]' + '}' * 100000)
>>>>>>         with self.assertRaises(RuntimeError):
>>>>>>             self.loads('[' * 100000 + '1' + ']' * 100000)
               # unicode
>>>>>>         with self.assertRaises(RuntimeError):
>>>>>>             self.loads(u'{"a":' * 100000 + u'1' + u'}' * 100000)
>>>>>>         with self.assertRaises(RuntimeError):
>>>>>>             self.loads(u'{"a":' * 100000 + u'[1]' + u'}' * 100000)
>>>>>>         with self.assertRaises(RuntimeError):
>>>>>>             self.loads(u'[' * 100000 + u'1' + u']' * 100000)
       
    1:     def test_highly_nested_objects_encoding(self):
               # See #12051
>>>>>>         l, d = [], {}
>>>>>>         for x in xrange(100000):
>>>>>>             l, d = [l], {'k':d}
>>>>>>         with self.assertRaises(RuntimeError):
>>>>>>             self.dumps(l)
>>>>>>         with self.assertRaises(RuntimeError):
>>>>>>             self.dumps(d)
       
    1:     def test_endless_recursion(self):
               # See #12051
    2:         class EndlessJSONEncoder(self.json.JSONEncoder):
    1:             def default(self, o):
                       """If check_circular is False, this will keep adding another list."""
  474:                 return [o]
       
    1:         with self.assertRaises(RuntimeError):
    1:             EndlessJSONEncoder(check_circular=False).encode(5j)
       
       
    2: class TestPyRecursion(TestRecursion, PyTest): pass
    2: class TestCRecursion(TestRecursion, CTest): pass
