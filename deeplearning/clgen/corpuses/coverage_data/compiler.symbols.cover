    2: """Module symbol-table generator"""
       
    2: from compiler import ast
    2: from compiler.consts import SC_LOCAL, SC_GLOBAL_IMPLICIT, SC_GLOBAL_EXPLICIT, \
           SC_FREE, SC_CELL, SC_UNKNOWN
    2: from compiler.misc import mangle
    2: import types
       
       
    2: import sys
       
    2: MANGLE_LEN = 256
       
    4: class Scope:
           # XXX how much information do I need about each name?
    2:     def __init__(self, name, module, klass=None):
   33:         self.name = name
   33:         self.module = module
   33:         self.defs = {}
   33:         self.uses = {}
   33:         self.globals = {}
   33:         self.params = {}
   33:         self.frees = {}
   33:         self.cells = {}
   33:         self.children = []
               # nested is true if the class could contain free variables,
               # i.e. if it is nested within another function.
   33:         self.nested = None
   33:         self.generator = None
   33:         self.klass = None
   33:         if klass is not None:
    1:             for i in range(len(klass)):
    1:                 if klass[i] != '_':
    1:                     self.klass = klass[i:]
    1:                     break
       
    2:     def __repr__(self):
>>>>>>         return "<%s: %s>" % (self.__class__.__name__, self.name)
       
    2:     def mangle(self, name):
   80:         if self.klass is None:
   79:             return name
    1:         return mangle(name, self.klass)
       
    2:     def add_def(self, name):
   40:         self.defs[self.mangle(name)] = 1
       
    2:     def add_use(self, name):
   38:         self.uses[self.mangle(name)] = 1
       
    2:     def add_global(self, name):
    1:         name = self.mangle(name)
    1:         if name in self.uses or name in self.defs:
>>>>>>             pass # XXX warn about global following def/use
    1:         if name in self.params:
>>>>>>             raise SyntaxError, "%s in %s is global and parameter" % \
>>>>>>                   (name, self.name)
    1:         self.globals[name] = 1
    1:         self.module.add_def(name)
       
    2:     def add_param(self, name):
    1:         name = self.mangle(name)
    1:         self.defs[name] = 1
    1:         self.params[name] = 1
       
    2:     def get_names(self):
>>>>>>         d = {}
>>>>>>         d.update(self.defs)
>>>>>>         d.update(self.uses)
>>>>>>         d.update(self.globals)
>>>>>>         return d.keys()
       
    2:     def add_child(self, child):
    9:         self.children.append(child)
       
    2:     def get_children(self):
>>>>>>         return self.children
       
    2:     def DEBUG(self):
>>>>>>         print >> sys.stderr, self.name, self.nested and "nested" or ""
>>>>>>         print >> sys.stderr, "\tglobals: ", self.globals
>>>>>>         print >> sys.stderr, "\tcells: ", self.cells
>>>>>>         print >> sys.stderr, "\tdefs: ", self.defs
>>>>>>         print >> sys.stderr, "\tuses: ", self.uses
>>>>>>         print >> sys.stderr, "\tfrees:", self.frees
       
    2:     def check_name(self, name):
               """Return scope of name.
       
               The scope of a name could be LOCAL, GLOBAL, FREE, or CELL.
               """
   80:         if name in self.globals:
    1:             return SC_GLOBAL_EXPLICIT
   79:         if name in self.cells:
    1:             return SC_CELL
   78:         if name in self.defs:
   60:             return SC_LOCAL
   18:         if self.nested and (name in self.frees or name in self.uses):
    1:             return SC_FREE
   17:         if self.nested:
>>>>>>             return SC_UNKNOWN
               else:
   17:             return SC_GLOBAL_IMPLICIT
       
    2:     def get_free_vars(self):
   19:         if not self.nested:
   16:             return ()
    3:         free = {}
    3:         free.update(self.frees)
    6:         for name in self.uses.keys():
    3:             if name not in self.defs and name not in self.globals:
    3:                 free[name] = 1
    3:         return free.keys()
       
    2:     def handle_children(self):
   10:         for child in self.children:
    1:             frees = child.get_free_vars()
    1:             globals = self.add_frees(frees)
    1:             for name in globals:
>>>>>>                 child.force_global(name)
       
    2:     def force_global(self, name):
               """Force name to be global in scope.
       
               Some child of the current node had a free reference to name.
               When the child was processed, it was labelled a free
               variable.  Now that all its enclosing scope have been
               processed, the name is known to be a global or builtin.  So
               walk back down the child chain and set the name to be global
               rather than free.
       
               Be careful to stop if a child does not think the name is
               free.
               """
>>>>>>         self.globals[name] = 1
>>>>>>         if name in self.frees:
>>>>>>             del self.frees[name]
>>>>>>         for child in self.children:
>>>>>>             if child.check_name(name) == SC_FREE:
>>>>>>                 child.force_global(name)
       
    2:     def add_frees(self, names):
               """Process list of free vars from nested scope.
       
               Returns a list of names that are either 1) declared global in the
               parent or 2) undefined in a top-level parent.  In either case,
               the nested scope should treat them as globals.
               """
    1:         child_globals = []
    2:         for name in names:
    1:             sc = self.check_name(name)
    1:             if self.nested:
>>>>>>                 if sc == SC_UNKNOWN or sc == SC_FREE \
>>>>>>                    or isinstance(self, ClassScope):
>>>>>>                     self.frees[name] = 1
>>>>>>                 elif sc == SC_GLOBAL_IMPLICIT:
>>>>>>                     child_globals.append(name)
>>>>>>                 elif isinstance(self, FunctionScope) and sc == SC_LOCAL:
>>>>>>                     self.cells[name] = 1
>>>>>>                 elif sc != SC_CELL:
>>>>>>                     child_globals.append(name)
                   else:
    1:                 if sc == SC_LOCAL:
    1:                     self.cells[name] = 1
>>>>>>                 elif sc != SC_CELL:
>>>>>>                     child_globals.append(name)
    1:         return child_globals
       
    2:     def get_cell_vars(self):
    9:         return self.cells.keys()
       
    4: class ModuleScope(Scope):
    2:     __super_init = Scope.__init__
       
    2:     def __init__(self):
   24:         self.__super_init("global", self)
       
    4: class FunctionScope(Scope):
    2:     pass
       
    4: class GenExprScope(Scope):
    2:     __super_init = Scope.__init__
       
    2:     __counter = 1
       
    2:     def __init__(self, module, klass=None):
    1:         i = self.__counter
    1:         self.__counter += 1
    1:         self.__super_init("generator expression<%d>"%i, module, klass)
    1:         self.add_param('.0')
       
    2:     def get_names(self):
>>>>>>         keys = Scope.get_names(self)
>>>>>>         return keys
       
    4: class LambdaScope(FunctionScope):
    2:     __super_init = Scope.__init__
       
    2:     __counter = 1
       
    2:     def __init__(self, module, klass=None):
>>>>>>         i = self.__counter
>>>>>>         self.__counter += 1
>>>>>>         self.__super_init("lambda.%d" % i, module, klass)
       
    4: class ClassScope(Scope):
    2:     __super_init = Scope.__init__
       
    2:     def __init__(self, name, module):
    1:         self.__super_init(name, module, name)
       
    4: class SymbolVisitor:
    2:     def __init__(self):
   24:         self.scopes = {}
   24:         self.klass = None
       
           # node that define new scopes
       
    2:     def visitModule(self, node):
   24:         scope = self.module = self.scopes[node] = ModuleScope()
   24:         self.visit(node.node, scope)
       
    2:     visitExpression = visitModule
       
    2:     def visitFunction(self, node, parent):
    7:         if node.decorators:
>>>>>>             self.visit(node.decorators, parent)
    7:         parent.add_def(node.name)
    7:         for n in node.defaults:
>>>>>>             self.visit(n, parent)
    7:         scope = FunctionScope(node.name, self.module, self.klass)
    7:         if parent.nested or isinstance(parent, FunctionScope):
    1:             scope.nested = 1
    7:         self.scopes[node] = scope
    7:         self._do_args(scope, node.argnames)
    7:         self.visit(node.code, scope)
    7:         self.handle_free_vars(scope, parent)
       
    2:     def visitGenExpr(self, node, parent):
    1:         scope = GenExprScope(self.module, self.klass);
    1:         if parent.nested or isinstance(parent, FunctionScope) \
    1:                 or isinstance(parent, GenExprScope):
>>>>>>             scope.nested = 1
       
    1:         self.scopes[node] = scope
    1:         self.visit(node.code, scope)
       
    1:         self.handle_free_vars(scope, parent)
       
    2:     def visitGenExprInner(self, node, scope):
    3:         for genfor in node.quals:
    2:             self.visit(genfor, scope)
       
    1:         self.visit(node.expr, scope)
       
    2:     def visitGenExprFor(self, node, scope):
    2:         self.visit(node.assign, scope, 1)
    2:         self.visit(node.iter, scope)
    4:         for if_ in node.ifs:
    2:             self.visit(if_, scope)
       
    2:     def visitGenExprIf(self, node, scope):
    2:         self.visit(node.test, scope)
       
    2:     def visitLambda(self, node, parent, assign=0):
               # Lambda is an expression, so it could appear in an expression
               # context where assign is passed.  The transformer should catch
               # any code that has a lambda on the left-hand side.
>>>>>>         assert not assign
       
>>>>>>         for n in node.defaults:
>>>>>>             self.visit(n, parent)
>>>>>>         scope = LambdaScope(self.module, self.klass)
>>>>>>         if parent.nested or isinstance(parent, FunctionScope):
>>>>>>             scope.nested = 1
>>>>>>         self.scopes[node] = scope
>>>>>>         self._do_args(scope, node.argnames)
>>>>>>         self.visit(node.code, scope)
>>>>>>         self.handle_free_vars(scope, parent)
       
    2:     def _do_args(self, scope, args):
    7:         for name in args:
>>>>>>             if type(name) == types.TupleType:
>>>>>>                 self._do_args(scope, name)
                   else:
>>>>>>                 scope.add_param(name)
       
    2:     def handle_free_vars(self, scope, parent):
    9:         parent.add_child(scope)
    9:         scope.handle_children()
       
    2:     def visitClass(self, node, parent):
    1:         parent.add_def(node.name)
    1:         for n in node.bases:
>>>>>>             self.visit(n, parent)
    1:         scope = ClassScope(node.name, self.module)
    1:         if parent.nested or isinstance(parent, FunctionScope):
>>>>>>             scope.nested = 1
    1:         if node.doc is not None:
>>>>>>             scope.add_def('__doc__')
    1:         scope.add_def('__module__')
    1:         self.scopes[node] = scope
    1:         prev = self.klass
    1:         self.klass = node.name
    1:         self.visit(node.code, scope)
    1:         self.klass = prev
    1:         self.handle_free_vars(scope, parent)
       
           # name can be a def or a use
       
           # XXX a few calls and nodes expect a third "assign" arg that is
           # true if the name is being used as an assignment.  only
           # expressions contained within statements may have the assign arg.
       
    2:     def visitName(self, node, scope, assign=0):
   38:         if assign:
>>>>>>             scope.add_def(node.name)
               else:
   38:             scope.add_use(node.name)
       
           # operations that bind new names
       
    2:     def visitFor(self, node, scope):
>>>>>>         self.visit(node.assign, scope, 1)
>>>>>>         self.visit(node.list, scope)
>>>>>>         self.visit(node.body, scope)
>>>>>>         if node.else_:
>>>>>>             self.visit(node.else_, scope)
       
    2:     def visitFrom(self, node, scope):
    8:         for name, asname in node.names:
    4:             if name == "*":
>>>>>>                 continue
    4:             scope.add_def(asname or name)
       
    2:     def visitImport(self, node, scope):
>>>>>>         for name, asname in node.names:
>>>>>>             i = name.find(".")
>>>>>>             if i > -1:
>>>>>>                 name = name[:i]
>>>>>>             scope.add_def(asname or name)
       
    2:     def visitGlobal(self, node, scope):
    2:         for name in node.names:
    1:             scope.add_global(name)
       
    2:     def visitAssign(self, node, scope):
               """Propagate assignment flag down to child nodes.
       
               The Assign node doesn't itself contains the variables being
               assigned to.  Instead, the children in node.nodes are visited
               with the assign flag set to true.  When the names occur in
               those nodes, they are marked as defs.
       
               Some names that occur in an assignment target are not bound by
               the assignment, e.g. a name occurring inside a slice.  The
               visitor handles these nodes specially; they do not propagate
               the assign flag to their children.
               """
   22:         for n in node.nodes:
   11:             self.visit(n, scope, 1)
   11:         self.visit(node.expr, scope)
       
    2:     def visitAssName(self, node, scope, assign=1):
   26:         scope.add_def(node.name)
       
    2:     def visitAssAttr(self, node, scope, assign=0):
>>>>>>         self.visit(node.expr, scope, 0)
       
    2:     def visitSubscript(self, node, scope, assign=0):
>>>>>>         self.visit(node.expr, scope, 0)
>>>>>>         for n in node.subs:
>>>>>>             self.visit(n, scope, 0)
       
    2:     def visitSlice(self, node, scope, assign=0):
>>>>>>         self.visit(node.expr, scope, 0)
>>>>>>         if node.lower:
>>>>>>             self.visit(node.lower, scope, 0)
>>>>>>         if node.upper:
>>>>>>             self.visit(node.upper, scope, 0)
       
    2:     def visitAugAssign(self, node, scope):
               # If the LHS is a name, then this counts as assignment.
               # Otherwise, it's just use.
>>>>>>         self.visit(node.node, scope)
>>>>>>         if isinstance(node.node, ast.Name):
>>>>>>             self.visit(node.node, scope, 1) # XXX worry about this
>>>>>>         self.visit(node.expr, scope)
       
           # prune if statements if tests are false
       
    2:     _const_types = types.StringType, types.IntType, types.FloatType
       
    2:     def visitIf(self, node, scope):
>>>>>>         for test, body in node.tests:
>>>>>>             if isinstance(test, ast.Const):
>>>>>>                 if type(test.value) in self._const_types:
>>>>>>                     if not test.value:
>>>>>>                         continue
>>>>>>             self.visit(test, scope)
>>>>>>             self.visit(body, scope)
>>>>>>         if node.else_:
>>>>>>             self.visit(node.else_, scope)
       
           # a yield statement signals a generator
       
    2:     def visitYield(self, node, scope):
    1:         scope.generator = 1
    1:         self.visit(node.value, scope)
       
    2: def list_eq(l1, l2):
>>>>>>     return sorted(l1) == sorted(l2)
       
    2: if __name__ == "__main__":
>>>>>>     import sys
>>>>>>     from compiler import parseFile, walk
>>>>>>     import symtable
       
>>>>>>     def get_names(syms):
>>>>>>         return [s for s in [s.get_name() for s in syms.get_symbols()]
>>>>>>                 if not (s.startswith('_[') or s.startswith('.'))]
       
>>>>>>     for file in sys.argv[1:]:
>>>>>>         print file
>>>>>>         f = open(file)
>>>>>>         buf = f.read()
>>>>>>         f.close()
>>>>>>         syms = symtable.symtable(buf, file, "exec")
>>>>>>         mod_names = get_names(syms)
>>>>>>         tree = parseFile(file)
>>>>>>         s = SymbolVisitor()
>>>>>>         walk(tree, s)
       
               # compare module-level symbols
>>>>>>         names2 = s.scopes[tree].get_names()
       
>>>>>>         if not list_eq(mod_names, names2):
>>>>>>             print
>>>>>>             print "oops", file
>>>>>>             print sorted(mod_names)
>>>>>>             print sorted(names2)
>>>>>>             sys.exit(-1)
       
>>>>>>         d = {}
>>>>>>         d.update(s.scopes)
>>>>>>         del d[tree]
>>>>>>         scopes = d.values()
>>>>>>         del d
       
>>>>>>         for s in syms.get_symbols():
>>>>>>             if s.is_namespace():
>>>>>>                 l = [sc for sc in scopes
>>>>>>                      if sc.name == s.get_name()]
>>>>>>                 if len(l) > 1:
>>>>>>                     print "skipping", s.get_name()
                       else:
>>>>>>                     if not list_eq(get_names(s.get_namespace()),
>>>>>>                                    l[0].get_names()):
>>>>>>                         print s.get_name()
>>>>>>                         print sorted(get_names(s.get_namespace()))
>>>>>>                         print sorted(l[0].get_names())
>>>>>>                         sys.exit(-1)
