       """distutils.command.check
       
       Implements the Distutils 'check' command.
    1: """
    1: __revision__ = "$Id$"
       
    1: from distutils.core import Command
    1: from distutils.dist import PKG_INFO_ENCODING
    1: from distutils.errors import DistutilsSetupError
       
    1: try:
           # docutils is installed
    1:     from docutils.utils import Reporter
>>>>>>     from docutils.parsers.rst import Parser
>>>>>>     from docutils import frontend
>>>>>>     from docutils import nodes
>>>>>>     from StringIO import StringIO
       
>>>>>>     class SilentReporter(Reporter):
       
>>>>>>         def __init__(self, source, report_level, halt_level, stream=None,
>>>>>>                      debug=0, encoding='ascii', error_handler='replace'):
>>>>>>             self.messages = []
>>>>>>             Reporter.__init__(self, source, report_level, halt_level, stream,
>>>>>>                               debug, encoding, error_handler)
       
>>>>>>         def system_message(self, level, message, *children, **kwargs):
>>>>>>             self.messages.append((level, message, children, kwargs))
>>>>>>             return nodes.system_message(message, level=level,
>>>>>>                                         type=self.levels[level],
>>>>>>                                         *children, **kwargs)
       
>>>>>>     HAS_DOCUTILS = True
    1: except ImportError:
           # docutils is not installed
    1:     HAS_DOCUTILS = False
       
    2: class check(Command):
           """This command checks the meta-data of the package.
    1:     """
    1:     description = ("perform some checks on the package")
    1:     user_options = [('metadata', 'm', 'Verify meta-data'),
                           ('restructuredtext', 'r',
    1:                      ('Checks if long string meta-data syntax '
                             'are reStructuredText-compliant')),
                           ('strict', 's',
    1:                      'Will exit with an error if a check fails')]
       
    1:     boolean_options = ['metadata', 'restructuredtext', 'strict']
       
    1:     def initialize_options(self):
               """Sets default values for options."""
   28:         self.restructuredtext = 0
   28:         self.metadata = 1
   28:         self.strict = 0
   28:         self._warnings = 0
       
    1:     def finalize_options(self):
   22:         pass
       
    1:     def warn(self, msg):
               """Counts the number of warnings that occurs."""
   10:         self._warnings += 1
   10:         return Command.warn(self, msg)
       
    1:     def run(self):
               """Runs the command."""
               # perform the various tests
   22:         if self.metadata:
   22:             self.check_metadata()
   22:         if self.restructuredtext:
    5:             if HAS_DOCUTILS:
>>>>>>                 self.check_restructuredtext()
    5:             elif self.strict:
    1:                 raise DistutilsSetupError('The docutils package is needed.')
       
               # let's raise an error in strict mode, if we have at least
               # one warning
   21:         if self.strict and self._warnings > 0:
    1:             raise DistutilsSetupError('Please correct your package.')
       
    1:     def check_metadata(self):
               """Ensures that all required elements of meta-data are supplied.
       
               name, version, URL, (author and author_email) or
               (maintainer and maintainer_email)).
       
               Warns if any are missing.
               """
   22:         metadata = self.distribution.metadata
       
   22:         missing = []
   88:         for attr in ('name', 'version', 'url'):
   66:             if not (hasattr(metadata, attr) and getattr(metadata, attr)):
   13:                 missing.append(attr)
       
   22:         if missing:
    5:             self.warn("missing required meta-data: %s"  % ', '.join(missing))
   22:         if metadata.author:
   17:             if not metadata.author_email:
>>>>>>                 self.warn("missing meta-data: if 'author' supplied, " +
>>>>>>                           "'author_email' must be supplied too")
    5:         elif metadata.maintainer:
>>>>>>             if not metadata.maintainer_email:
>>>>>>                 self.warn("missing meta-data: if 'maintainer' supplied, " +
>>>>>>                           "'maintainer_email' must be supplied too")
               else:
    5:             self.warn("missing meta-data: either (author and author_email) " +
    5:                       "or (maintainer and maintainer_email) " +
    5:                       "must be supplied")
       
    1:     def check_restructuredtext(self):
               """Checks if the long string fields are reST-compliant."""
>>>>>>         data = self.distribution.get_long_description()
>>>>>>         if not isinstance(data, unicode):
>>>>>>             data = data.decode(PKG_INFO_ENCODING)
>>>>>>         for warning in self._check_rst_data(data):
>>>>>>             line = warning[-1].get('line')
>>>>>>             if line is None:
>>>>>>                 warning = warning[1]
                   else:
>>>>>>                 warning = '%s (line %s)' % (warning[1], line)
>>>>>>             self.warn(warning)
       
    1:     def _check_rst_data(self, data):
               """Returns warnings when the provided data doesn't compile."""
>>>>>>         source_path = StringIO()
>>>>>>         parser = Parser()
>>>>>>         settings = frontend.OptionParser(components=(Parser,)).get_default_values()
>>>>>>         settings.tab_width = 4
>>>>>>         settings.pep_references = None
>>>>>>         settings.rfc_references = None
>>>>>>         reporter = SilentReporter(source_path,
>>>>>>                           settings.report_level,
>>>>>>                           settings.halt_level,
>>>>>>                           stream=settings.warning_stream,
>>>>>>                           debug=settings.debug,
>>>>>>                           encoding=settings.error_encoding,
>>>>>>                           error_handler=settings.error_encoding_error_handler)
       
>>>>>>         document = nodes.document(settings, reporter, source=source_path)
>>>>>>         document.note_source(source_path, -1)
>>>>>>         try:
>>>>>>             parser.parse(data, document)
>>>>>>         except AttributeError as e:
>>>>>>             reporter.messages.append(
>>>>>>                 (-1, 'Could not finish the parsing: %s.' % e, '', {}))
       
>>>>>>         return reporter.messages
