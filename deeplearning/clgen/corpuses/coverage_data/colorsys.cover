       """Conversion functions between RGB and other color systems.
       
       This modules provides two functions for each color system ABC:
       
         rgb_to_abc(r, g, b) --> a, b, c
         abc_to_rgb(a, b, c) --> r, g, b
       
       All inputs and outputs are triples of floats in the range [0.0...1.0]
       (with the exception of I and Q, which covers a slightly larger range).
       Inputs outside the valid range may cause exceptions or invalid outputs.
       
       Supported color systems:
       RGB: Red, Green, Blue components
       YIQ: Luminance, Chrominance (used by composite video signals)
       HLS: Hue, Luminance, Saturation
       HSV: Hue, Saturation, Value
    2: """
       
       # References:
       # http://en.wikipedia.org/wiki/YIQ
       # http://en.wikipedia.org/wiki/HLS_color_space
       # http://en.wikipedia.org/wiki/HSV_color_space
       
    2: __all__ = ["rgb_to_yiq","yiq_to_rgb","rgb_to_hls","hls_to_rgb",
    2:            "rgb_to_hsv","hsv_to_rgb"]
       
       # Some floating point constants
       
    2: ONE_THIRD = 1.0/3.0
    2: ONE_SIXTH = 1.0/6.0
    2: TWO_THIRD = 2.0/3.0
       
       # YIQ: used by composite video signals (linear combinations of RGB)
       # Y: perceived grey level (0.0 == black, 1.0 == white)
       # I, Q: color components
       
    2: def rgb_to_yiq(r, g, b):
>>>>>>     y = 0.30*r + 0.59*g + 0.11*b
>>>>>>     i = 0.60*r - 0.28*g - 0.32*b
>>>>>>     q = 0.21*r - 0.52*g + 0.31*b
>>>>>>     return (y, i, q)
       
    2: def yiq_to_rgb(y, i, q):
>>>>>>     r = y + 0.948262*i + 0.624013*q
>>>>>>     g = y - 0.276066*i - 0.639810*q
>>>>>>     b = y - 1.105450*i + 1.729860*q
>>>>>>     if r < 0.0:
>>>>>>         r = 0.0
>>>>>>     if g < 0.0:
>>>>>>         g = 0.0
>>>>>>     if b < 0.0:
>>>>>>         b = 0.0
>>>>>>     if r > 1.0:
>>>>>>         r = 1.0
>>>>>>     if g > 1.0:
>>>>>>         g = 1.0
>>>>>>     if b > 1.0:
>>>>>>         b = 1.0
>>>>>>     return (r, g, b)
       
       
       # HLS: Hue, Luminance, Saturation
       # H: position in the spectrum
       # L: color lightness
       # S: color saturation
       
    2: def rgb_to_hls(r, g, b):
  225:     maxc = max(r, g, b)
  225:     minc = min(r, g, b)
           # XXX Can optimize (maxc+minc) and (maxc-minc)
  225:     l = (minc+maxc)/2.0
  225:     if minc == maxc:
    9:         return 0.0, l, 0.0
  216:     if l <= 0.5:
  138:         s = (maxc-minc) / (maxc+minc)
           else:
   78:         s = (maxc-minc) / (2.0-maxc-minc)
  216:     rc = (maxc-r) / (maxc-minc)
  216:     gc = (maxc-g) / (maxc-minc)
  216:     bc = (maxc-b) / (maxc-minc)
  216:     if r == maxc:
   88:         h = bc-gc
  128:     elif g == maxc:
   72:         h = 2.0+rc-bc
           else:
   56:         h = 4.0+gc-rc
  216:     h = (h/6.0) % 1.0
  216:     return h, l, s
       
    2: def hls_to_rgb(h, l, s):
  225:     if s == 0.0:
    9:         return l, l, l
  216:     if l <= 0.5:
  138:         m2 = l * (1.0+s)
           else:
   78:         m2 = l+s-(l*s)
  216:     m1 = 2.0*l - m2
  216:     return (_v(m1, m2, h+ONE_THIRD), _v(m1, m2, h), _v(m1, m2, h-ONE_THIRD))
       
    2: def _v(m1, m2, hue):
  648:     hue = hue % 1.0
  648:     if hue < ONE_SIXTH:
  108:         return m1 + (m2-m1)*hue*6.0
  540:     if hue < 0.5:
  216:         return m2
  324:     if hue < TWO_THIRD:
  108:         return m1 + (m2-m1)*(TWO_THIRD-hue)*6.0
  216:     return m1
       
       
       # HSV: Hue, Saturation, Value
       # H: position in the spectrum
       # S: color saturation ("purity")
       # V: color brightness
       
    2: def rgb_to_hsv(r, g, b):
  225:     maxc = max(r, g, b)
  225:     minc = min(r, g, b)
  225:     v = maxc
  225:     if minc == maxc:
    9:         return 0.0, 0.0, v
  216:     s = (maxc-minc) / maxc
  216:     rc = (maxc-r) / (maxc-minc)
  216:     gc = (maxc-g) / (maxc-minc)
  216:     bc = (maxc-b) / (maxc-minc)
  216:     if r == maxc:
   88:         h = bc-gc
  128:     elif g == maxc:
   72:         h = 2.0+rc-bc
           else:
   56:         h = 4.0+gc-rc
  216:     h = (h/6.0) % 1.0
  216:     return h, s, v
       
    2: def hsv_to_rgb(h, s, v):
  225:     if s == 0.0:
    9:         return v, v, v
  216:     i = int(h*6.0) # XXX assume int() truncates!
  216:     f = (h*6.0) - i
  216:     p = v*(1.0 - s)
  216:     q = v*(1.0 - s*f)
  216:     t = v*(1.0 - s*(1.0-f))
  216:     i = i%6
  216:     if i == 0:
   36:         return v, t, p
  180:     if i == 1:
   36:         return q, v, p
  144:     if i == 2:
   36:         return p, v, t
  108:     if i == 3:
   36:         return p, q, v
   72:     if i == 4:
   36:         return t, p, v
   36:     if i == 5:
   36:         return v, p, q
           # Cannot get here
