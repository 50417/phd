    1: """Support code for test_*.py files"""
       # Author: Collin Winter
       
       # Python imports
    1: import unittest
    1: import sys
    1: import os
    1: import os.path
    1: import re
    1: from textwrap import dedent
       
       # Local imports
    1: from lib2to3 import pytree, refactor
    1: from lib2to3.pgen2 import driver as pgen2_driver
       
    1: test_dir = os.path.dirname(__file__)
    1: proj_dir = os.path.normpath(os.path.join(test_dir, ".."))
    1: grammar_path = os.path.join(test_dir, "..", "Grammar.txt")
    1: grammar = pgen2_driver.load_grammar(grammar_path)
    1: driver = pgen2_driver.Driver(grammar, convert=pytree.convert)
       
    1: def parse_string(string):
  224:     return driver.parse_string(reformat(string), debug=True)
       
    1: def run_all_tests(test_mod=None, tests=None):
>>>>>>     if tests is None:
>>>>>>         tests = unittest.TestLoader().loadTestsFromModule(test_mod)
>>>>>>     unittest.TextTestRunner(verbosity=2).run(tests)
       
    1: def reformat(string):
 4294:     return dedent(string) + u"\n\n"
       
    1: def get_refactorer(fixer_pkg="lib2to3", fixers=None, options=None):
           """
           A convenience function for creating a RefactoringTool for tests.
       
           fixers is a list of fixers for the RefactoringTool to use. By default
           "lib2to3.fixes.*" is used. options is an optional dictionary of options to
           be passed to the RefactoringTool.
           """
  460:     if fixers is not None:
  934:         fixers = [fixer_pkg + ".fixes.fix_" + fix for fix in fixers]
           else:
>>>>>>         fixers = refactor.get_fixers_from_package(fixer_pkg + ".fixes")
  460:     options = options or {}
  460:     return refactor.RefactoringTool(fixers, options, explicit=True)
       
    1: def all_project_files():
    8:     for dirpath, dirnames, filenames in os.walk(proj_dir):
  282:         for filename in filenames:
  275:             if filename.endswith(".py"):
   98:                 yield os.path.join(dirpath, filename)
       
    1: TestCase = unittest.TestCase
