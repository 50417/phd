    1: import os
    1: import array
    1: import unittest
    1: import struct
    1: import inspect
    1: from test import test_support as support
    1: from test.test_support import (check_warnings, check_py3k_warnings)
       
    1: import sys
    1: ISBIGENDIAN = sys.byteorder == "big"
    1: IS32BIT = sys.maxsize == 0x7fffffff
       
    1: integer_codes = 'b', 'B', 'h', 'H', 'i', 'I', 'l', 'L', 'q', 'Q'
       
    1: testmod_filename = os.path.splitext(__file__)[0] + '.py'
       # Native 'q' packing isn't available on systems that don't have the C
       # long long type.
    1: try:
    1:     struct.pack('q', 5)
>>>>>> except struct.error:
>>>>>>     HAVE_LONG_LONG = False
       else:
    1:     HAVE_LONG_LONG = True
       
    1: def string_reverse(s):
20694:     return "".join(reversed(s))
       
    1: def bigendian_to_native(value):
>>>>>>     if ISBIGENDIAN:
>>>>>>         return value
           else:
>>>>>>         return string_reverse(value)
       
    2: class StructTest(unittest.TestCase):
       
    1:     def check_float_coerce(self, format, number):
               # SF bug 1530559. struct.pack raises TypeError where it used
               # to convert.
   60:         with check_warnings((".*integer argument expected, got float",
   60:                              DeprecationWarning)) as w:
   60:             got = struct.pack(format, number)
   60:         lineno = inspect.currentframe().f_lineno - 1
   60:         self.assertEqual(w.filename, testmod_filename)
   60:         self.assertEqual(w.lineno, lineno)
   60:         self.assertEqual(len(w.warnings), 1)
   60:         expected = struct.pack(format, int(number))
   60:         self.assertEqual(got, expected)
       
    1:     def test_isbigendian(self):
    1:         self.assertEqual((struct.pack('=i', 1)[0] == chr(0)), ISBIGENDIAN)
       
    1:     def test_consistence(self):
    1:         self.assertRaises(struct.error, struct.calcsize, 'Z')
       
    1:         sz = struct.calcsize('i')
    1:         self.assertEqual(sz * 3, struct.calcsize('iii'))
       
    1:         fmt = 'cbxxxxxxhhhhiillffd?'
    1:         fmt3 = '3c3b18x12h6i6l6f3d3?'
    1:         sz = struct.calcsize(fmt)
    1:         sz3 = struct.calcsize(fmt3)
    1:         self.assertEqual(sz * 3, sz3)
       
    1:         self.assertRaises(struct.error, struct.pack, 'iii', 3)
    1:         self.assertRaises(struct.error, struct.pack, 'i', 3, 3, 3)
    1:         self.assertRaises((TypeError, struct.error), struct.pack, 'i', 'foo')
    1:         self.assertRaises((TypeError, struct.error), struct.pack, 'P', 'foo')
    1:         self.assertRaises(struct.error, struct.unpack, 'd', 'flap')
    1:         s = struct.pack('ii', 1, 2)
    1:         self.assertRaises(struct.error, struct.unpack, 'iii', s)
    1:         self.assertRaises(struct.error, struct.unpack, 'i', s)
       
    1:     def test_transitiveness(self):
    1:         c = 'a'
    1:         b = 1
    1:         h = 255
    1:         i = 65535
    1:         l = 65536
    1:         f = 3.1415
    1:         d = 3.1415
    1:         t = True
       
    7:         for prefix in ('', '@', '<', '>', '=', '!'):
   18:             for format in ('xcbhilfd?', 'xcBHILfd?'):
   12:                 format = prefix + format
   12:                 s = struct.pack(format, c, b, h, i, l, f, d, t)
   12:                 cp, bp, hp, ip, lp, fp, dp, tp = struct.unpack(format, s)
   12:                 self.assertEqual(cp, c)
   12:                 self.assertEqual(bp, b)
   12:                 self.assertEqual(hp, h)
   12:                 self.assertEqual(ip, i)
   12:                 self.assertEqual(lp, l)
   12:                 self.assertEqual(int(100 * fp), int(100 * f))
   12:                 self.assertEqual(int(100 * dp), int(100 * d))
   12:                 self.assertEqual(tp, t)
       
    1:     def test_new_features(self):
               # Test some of the new features in detail
               # (format, argument, big-endian result, little-endian result, asymmetric)
               tests = [
    1:             ('c', 'a', 'a', 'a', 0),
    1:             ('xc', 'a', '\0a', '\0a', 0),
    1:             ('cx', 'a', 'a\0', 'a\0', 0),
    1:             ('s', 'a', 'a', 'a', 0),
    1:             ('0s', 'helloworld', '', '', 1),
    1:             ('1s', 'helloworld', 'h', 'h', 1),
    1:             ('9s', 'helloworld', 'helloworl', 'helloworl', 1),
    1:             ('10s', 'helloworld', 'helloworld', 'helloworld', 0),
    1:             ('11s', 'helloworld', 'helloworld\0', 'helloworld\0', 1),
    1:             ('20s', 'helloworld', 'helloworld'+10*'\0', 'helloworld'+10*'\0', 1),
    1:             ('b', 7, '\7', '\7', 0),
    1:             ('b', -7, '\371', '\371', 0),
    1:             ('B', 7, '\7', '\7', 0),
    1:             ('B', 249, '\371', '\371', 0),
    1:             ('h', 700, '\002\274', '\274\002', 0),
    1:             ('h', -700, '\375D', 'D\375', 0),
    1:             ('H', 700, '\002\274', '\274\002', 0),
    1:             ('H', 0x10000-700, '\375D', 'D\375', 0),
    1:             ('i', 70000000, '\004,\035\200', '\200\035,\004', 0),
    1:             ('i', -70000000, '\373\323\342\200', '\200\342\323\373', 0),
    1:             ('I', 70000000L, '\004,\035\200', '\200\035,\004', 0),
    1:             ('I', 0x100000000L-70000000, '\373\323\342\200', '\200\342\323\373', 0),
    1:             ('l', 70000000, '\004,\035\200', '\200\035,\004', 0),
    1:             ('l', -70000000, '\373\323\342\200', '\200\342\323\373', 0),
    1:             ('L', 70000000L, '\004,\035\200', '\200\035,\004', 0),
    1:             ('L', 0x100000000L-70000000, '\373\323\342\200', '\200\342\323\373', 0),
    1:             ('f', 2.0, '@\000\000\000', '\000\000\000@', 0),
                   ('d', 2.0, '@\000\000\000\000\000\000\000',
    1:                        '\000\000\000\000\000\000\000@', 0),
    1:             ('f', -2.0, '\300\000\000\000', '\000\000\000\300', 0),
                   ('d', -2.0, '\300\000\000\000\000\000\000\000',
    1:                        '\000\000\000\000\000\000\000\300', 0),
    1:                 ('?', 0, '\0', '\0', 0),
    1:                 ('?', 3, '\1', '\1', 1),
    1:                 ('?', True, '\1', '\1', 0),
    1:                 ('?', [], '\0', '\0', 1),
    1:                 ('?', (1,), '\1', '\1', 1),
               ]
       
   36:         for fmt, arg, big, lil, asy in tests:
   35:             for (xfmt, exp) in [('>'+fmt, big), ('!'+fmt, big), ('<'+fmt, lil),
  175:                                 ('='+fmt, ISBIGENDIAN and big or lil)]:
  140:                 res = struct.pack(xfmt, arg)
  140:                 self.assertEqual(res, exp)
  140:                 self.assertEqual(struct.calcsize(xfmt), len(res))
  140:                 rev = struct.unpack(xfmt, res)[0]
  140:                 if rev != arg:
   32:                     self.assertTrue(asy)
       
    1:     def test_calcsize(self):
    1:         expected_size = {
    1:             'b': 1, 'B': 1,
    1:             'h': 2, 'H': 2,
    1:             'i': 4, 'I': 4,
    1:             'l': 4, 'L': 4,
    1:             'q': 8, 'Q': 8,
                   }
       
               # standard integer sizes
   11:         for code in integer_codes:
   50:             for byteorder in ('=', '<', '>', '!'):
   40:                 format = byteorder+code
   40:                 size = struct.calcsize(format)
   40:                 self.assertEqual(size, expected_size[code])
       
               # native integer sizes, except 'q' and 'Q'
    5:         for format_pair in ('bB', 'hH', 'iI', 'lL'):
   12:             for byteorder in ['', '@']:
    8:                 signed_size = struct.calcsize(byteorder + format_pair[0])
    8:                 unsigned_size = struct.calcsize(byteorder + format_pair[1])
    8:                 self.assertEqual(signed_size, unsigned_size)
       
               # bounds for native integer sizes
    1:         self.assertEqual(struct.calcsize('b'), 1)
    1:         self.assertLessEqual(2, struct.calcsize('h'))
    1:         self.assertLessEqual(4, struct.calcsize('l'))
    1:         self.assertLessEqual(struct.calcsize('h'), struct.calcsize('i'))
    1:         self.assertLessEqual(struct.calcsize('i'), struct.calcsize('l'))
       
               # tests for native 'q' and 'Q' when applicable
    1:         if HAVE_LONG_LONG:
    1:             self.assertEqual(struct.calcsize('q'), struct.calcsize('Q'))
    1:             self.assertLessEqual(8, struct.calcsize('q'))
    1:             self.assertLessEqual(struct.calcsize('l'), struct.calcsize('q'))
       
    1:     def test_integers(self):
               # Integer tests (bBhHiIlLqQ).
    1:         import binascii
       
    2:         class IntTester(unittest.TestCase):
    1:             def __init__(self, format):
   60:                 super(IntTester, self).__init__(methodName='test_one')
   60:                 self.format = format
   60:                 self.code = format[-1]
   60:                 self.direction = format[:-1]
   60:                 if not self.direction in ('', '@', '=', '<', '>', '!'):
>>>>>>                     raise ValueError("unrecognized packing direction: %s" %
>>>>>>                                      self.direction)
   60:                 self.bytesize = struct.calcsize(format)
   60:                 self.bitsize = self.bytesize * 8
   60:                 if self.code in tuple('bhilq'):
   30:                     self.signed = True
   30:                     self.min_value = -(2L**(self.bitsize-1))
   30:                     self.max_value = 2L**(self.bitsize-1) - 1
   30:                 elif self.code in tuple('BHILQ'):
   30:                     self.signed = False
   30:                     self.min_value = 0
   30:                     self.max_value = 2L**self.bitsize - 1
                       else:
>>>>>>                     raise ValueError("unrecognized format code: %s" %
>>>>>>                                      self.code)
       
    1:             def test_one(self, x, pack=struct.pack,
    1:                                   unpack=struct.unpack,
    1:                                   unhexlify=binascii.unhexlify):
       
51168:                 format = self.format
51168:                 if self.min_value <= x <= self.max_value:
30062:                     expected = long(x)
30062:                     if self.signed and x < 0:
 8958:                         expected += 1L << self.bitsize
30062:                     self.assertGreaterEqual(expected, 0)
30062:                     expected = '%x' % expected
30062:                     if len(expected) & 1:
 7292:                         expected = "0" + expected
30062:                     expected = unhexlify(expected)
30062:                     expected = ("\x00" * (self.bytesize - len(expected)) +
30062:                                 expected)
30062:                     if (self.direction == '<' or
25170:                         self.direction in ('', '@', '=') and not ISBIGENDIAN):
20662:                         expected = string_reverse(expected)
30062:                     self.assertEqual(len(expected), self.bytesize)
       
                           # Pack work?
30062:                     got = pack(format, x)
30062:                     self.assertEqual(got, expected)
       
                           # Unpack work?
30062:                     retrieved = unpack(format, got)[0]
30062:                     self.assertEqual(x, retrieved)
       
                           # Adding any byte should cause a "too big" error.
30062:                     self.assertRaises((struct.error, TypeError), unpack, format,
30062:                                                                  '\x01' + got)
                       else:
                           # x is out of range -- verify pack realizes that.
21106:                     self.assertRaises((OverflowError, ValueError, struct.error),
21106:                                       pack, format, x)
       
    1:             def run(self):
   60:                 from random import randrange
       
                       # Create all interesting powers of 2.
   60:                 values = []
 2192:                 for exp in range(self.bitsize + 3):
 2132:                     values.append(1L << exp)
       
                       # Add some random values.
 2012:                 for i in range(self.bitsize):
 1952:                     val = 0L
13184:                     for j in range(self.bytesize):
11232:                         val = (val << 8) | randrange(256)
 1952:                     values.append(val)
       
                       # Values absorbed from other tests
   60:                 values.extend([300, 700000, sys.maxint*4])
       
                       # Try all those, and their negations, and +-1 from
                       # them.  Note that this tests all power-of-2
                       # boundaries in range, and a few out of range, plus
                       # +-(2**n +- 1).
 4324:                 for base in values:
12792:                     for val in -base, base:
34112:                         for incr in -1, 0, 1:
25584:                             x = val + incr
25584:                             self.test_one(int(x))
25584:                             self.test_one(long(x))
       
                       # Some error cases.
  120:                 class NotAnIntNS(object):
   60:                     def __int__(self):
  120:                         return 42
       
   60:                     def __long__(self):
>>>>>>                         return 1729L
       
  120:                 class NotAnIntOS:
   60:                     def __int__(self):
  120:                         return 85
       
   60:                     def __long__(self):
>>>>>>                         return -163L
       
                       # Objects with an '__index__' method should be allowed
                       # to pack as integers.  That is assuming the implemented
                       # '__index__' method returns and 'int' or 'long'.
  120:                 class Indexable(object):
   60:                     def __init__(self, value):
  660:                         self._value = value
       
   60:                     def __index__(self):
  660:                         return self._value
       
                       # If the '__index__' method raises a type error, then
                       # '__int__' should be used with a deprecation warning.
  120:                 class BadIndex(object):
   60:                     def __index__(self):
   60:                         raise TypeError
       
   60:                     def __int__(self):
  120:                         return 42
       
   60:                 self.assertRaises((TypeError, struct.error),
   60:                                   struct.pack, self.format,
   60:                                   "a string")
   60:                 self.assertRaises((TypeError, struct.error),
   60:                                   struct.pack, self.format,
   60:                                   randrange)
   60:                 with check_warnings(("integer argument expected, "
   60:                                      "got non-integer", DeprecationWarning)):
   60:                     with self.assertRaises((TypeError, struct.error)):
   60:                         struct.pack(self.format, 3+42j)
       
                       # an attempt to convert a non-integer (with an
                       # implicit conversion via __int__) should succeed,
                       # with a DeprecationWarning
  240:                 for nonint in NotAnIntNS(), NotAnIntOS(), BadIndex():
  180:                     with check_warnings((".*integer argument expected, got non"
  180:                                          "-integer", DeprecationWarning)) as w:
  180:                         got = struct.pack(self.format, nonint)
  180:                     lineno = inspect.currentframe().f_lineno - 1
  180:                     self.assertEqual(w.filename, testmod_filename)
  180:                     self.assertEqual(w.lineno, lineno)
  180:                     self.assertEqual(len(w.warnings), 1)
  180:                     expected = struct.pack(self.format, int(nonint))
  180:                     self.assertEqual(got, expected)
       
                       # Check for legitimate values from '__index__'.
   60:                 for obj in (Indexable(0), Indexable(10), Indexable(17),
  420:                             Indexable(42), Indexable(100), Indexable(127)):
  360:                     try:
  360:                         struct.pack(format, obj)
>>>>>>                     except:
>>>>>>                         self.fail("integer code pack failed on object "
                                         "with '__index__' method")
       
                       # Check for bogus values from '__index__'.
   60:                 for obj in (Indexable('a'), Indexable(u'b'), Indexable(None),
  360:                             Indexable({'a': 1}), Indexable([1, 2, 3])):
  300:                     self.assertRaises((TypeError, struct.error),
  300:                                       struct.pack, self.format,
  300:                                       obj)
       
    1:         byteorders = '', '@', '=', '<', '>', '!'
   11:         for code in integer_codes:
   70:             for byteorder in byteorders:
   60:                 if (byteorder in ('', '@') and code in ('q', 'Q') and
    4:                     not HAVE_LONG_LONG):
>>>>>>                     continue
   60:                 format = byteorder+code
   60:                 t = IntTester(format)
   60:                 t.run()
       
    1:     def test_p_code(self):
               # Test p ("Pascal string") code.
    1:         for code, input, expected, expectedback in [
    1:                 ('p','abc', '\x00', ''),
    1:                 ('1p', 'abc', '\x00', ''),
    1:                 ('2p', 'abc', '\x01a', 'a'),
    1:                 ('3p', 'abc', '\x02ab', 'ab'),
    1:                 ('4p', 'abc', '\x03abc', 'abc'),
    1:                 ('5p', 'abc', '\x03abc\x00', 'abc'),
    1:                 ('6p', 'abc', '\x03abc\x00\x00', 'abc'),
    9:                 ('1000p', 'x'*1000, '\xff' + 'x'*999, 'x'*255)]:
    8:             got = struct.pack(code, input)
    8:             self.assertEqual(got, expected)
    8:             (got,) = struct.unpack(code, got)
    8:             self.assertEqual(got, expectedback)
       
    1:     def test_705836(self):
               # SF bug 705836.  "<f" and ">f" had a severe rounding bug, where a carry
               # from the low-order discarded bits could propagate into the exponent
               # field, causing the result to be wrong by a factor of 2.
    1:         import math
       
   33:         for base in range(1, 33):
                   # smaller <- largest representable float less than base.
   32:             delta = 0.5
 1567:             while base - delta / 2.0 != base:
 1535:                 delta /= 2.0
   32:             smaller = base - delta
                   # Packing this rounds away a solid string of trailing 1 bits.
   32:             packed = struct.pack("<f", smaller)
   32:             unpacked = struct.unpack("<f", packed)[0]
                   # This failed at base = 2, 4, and 32, with unpacked = 1, 2, and
                   # 16, respectively.
   32:             self.assertEqual(base, unpacked)
   32:             bigpacked = struct.pack(">f", smaller)
   32:             self.assertEqual(bigpacked, string_reverse(packed))
   32:             unpacked = struct.unpack(">f", bigpacked)[0]
   32:             self.assertEqual(base, unpacked)
       
               # Largest finite IEEE single.
    1:         big = (1 << 24) - 1
    1:         big = math.ldexp(big, 127 - 23)
    1:         packed = struct.pack(">f", big)
    1:         unpacked = struct.unpack(">f", packed)[0]
    1:         self.assertEqual(big, unpacked)
       
               # The same, but tack on a 1 bit so it rounds up to infinity.
    1:         big = (1 << 25) - 1
    1:         big = math.ldexp(big, 127 - 24)
    1:         self.assertRaises(OverflowError, struct.pack, ">f", big)
       
    1:     def test_1530559(self):
               # SF bug 1530559. struct.pack raises TypeError where it used to convert.
    4:         for endian in ('', '>', '<'):
   33:             for fmt in integer_codes:
   30:                 self.check_float_coerce(endian + fmt, 1.0)
   30:                 self.check_float_coerce(endian + fmt, 1.5)
       
    1:     def test_unpack_from(self, cls=str):
    3:         data = cls('abcd01234')
    3:         fmt = '4s'
    3:         s = struct.Struct(fmt)
       
    3:         self.assertEqual(s.unpack_from(data), ('abcd',))
    3:         self.assertEqual(struct.unpack_from(fmt, data), ('abcd',))
   21:         for i in xrange(6):
   18:             self.assertEqual(s.unpack_from(data, i), (data[i:i+4],))
   18:             self.assertEqual(struct.unpack_from(fmt, data, i), (data[i:i+4],))
   15:         for i in xrange(6, len(data) + 1):
   12:             self.assertRaises(struct.error, s.unpack_from, data, i)
   12:             self.assertRaises(struct.error, struct.unpack_from, fmt, data, i)
       
    1:     def test_pack_into(self, cls=bytearray, tobytes=str):
    3:         test_string = 'Reykjavik rocks, eow!'
    3:         writable_buf = cls(' '*100)
    3:         fmt = '21s'
    3:         s = struct.Struct(fmt)
       
               # Test without offset
    3:         s.pack_into(writable_buf, 0, test_string)
    3:         from_buf = tobytes(writable_buf)[:len(test_string)]
    3:         self.assertEqual(from_buf, test_string)
       
               # Test with offset.
    3:         s.pack_into(writable_buf, 10, test_string)
    3:         from_buf = tobytes(writable_buf)[:len(test_string)+10]
    3:         self.assertEqual(from_buf, test_string[:10] + test_string)
       
               # Go beyond boundaries.
    3:         small_buf = cls(' '*10)
    3:         self.assertRaises((ValueError, struct.error), s.pack_into, small_buf, 0,
    3:                           test_string)
    3:         self.assertRaises((ValueError, struct.error), s.pack_into, small_buf, 2,
    3:                           test_string)
       
               # Test bogus offset (issue 3694)
    3:         sb = small_buf
    3:         self.assertRaises((TypeError, struct.error), struct.pack_into, b'', sb,
    3:                           None)
       
    1:     def test_pack_into_array(self):
    3:         self.test_pack_into(cls=lambda b: array.array('c', b),
    1:                             tobytes=array.array.tostring)
       
    1:     def test_pack_into_memoryview(self):
               # Issue #22113
    3:         self.test_pack_into(cls=lambda b: memoryview(bytearray(b)),
    1:                             tobytes=memoryview.tobytes)
       
    1:     def test_pack_into_fn(self):
    1:         test_string = 'Reykjavik rocks, eow!'
    1:         writable_buf = array.array('c', ' '*100)
    1:         fmt = '21s'
    5:         pack_into = lambda *args: struct.pack_into(fmt, *args)
       
               # Test without offset.
    1:         pack_into(writable_buf, 0, test_string)
    1:         from_buf = writable_buf.tostring()[:len(test_string)]
    1:         self.assertEqual(from_buf, test_string)
       
               # Test with offset.
    1:         pack_into(writable_buf, 10, test_string)
    1:         from_buf = writable_buf.tostring()[:len(test_string)+10]
    1:         self.assertEqual(from_buf, test_string[:10] + test_string)
       
               # Go beyond boundaries.
    1:         small_buf = array.array('c', ' '*10)
    1:         self.assertRaises((ValueError, struct.error), pack_into, small_buf, 0,
    1:                           test_string)
    1:         self.assertRaises((ValueError, struct.error), pack_into, small_buf, 2,
    1:                           test_string)
       
    1:     def test_unpack_with_buffer(self):
    1:         with check_py3k_warnings(("buffer.. not supported in 3.x",
    1:                                   DeprecationWarning)):
                   # SF bug 1563759: struct.unpack doesn't support buffer protocol objects
    1:             data1 = array.array('B', '\x12\x34\x56\x78')
    1:             data2 = buffer('......\x12\x34\x56\x78......', 6, 4)
    3:             for data in [data1, data2]:
    2:                 value, = struct.unpack('>I', data)
    2:                 self.assertEqual(value, 0x12345678)
       
    1:             self.test_unpack_from(cls=buffer)
       
    1:     def test_unpack_with_memoryview(self):
               # Bug 10212: struct.unpack doesn't support new buffer protocol objects
    1:         data1 = memoryview('\x12\x34\x56\x78')
    2:         for data in [data1,]:
    1:             value, = struct.unpack('>I', data)
    1:             self.assertEqual(value, 0x12345678)
    1:         self.test_unpack_from(cls=memoryview)
       
    1:     def test_bool(self):
    2:         class ExplodingBool(object):
    1:             def __nonzero__(self):
    5:                 raise IOError
    6:         for prefix in tuple("<>!=")+('',):
    5:             false = (), [], [], '', 0
    5:             true = [1], 'test', 5, -1, 0xffffffffL+1, 0xffffffff//2
       
    5:             falseFormat = prefix + '?' * len(false)
    5:             packedFalse = struct.pack(falseFormat, *false)
    5:             unpackedFalse = struct.unpack(falseFormat, packedFalse)
       
    5:             trueFormat = prefix + '?' * len(true)
    5:             packedTrue = struct.pack(trueFormat, *true)
    5:             unpackedTrue = struct.unpack(trueFormat, packedTrue)
       
    5:             self.assertEqual(len(true), len(unpackedTrue))
    5:             self.assertEqual(len(false), len(unpackedFalse))
       
   30:             for t in unpackedFalse:
   25:                 self.assertFalse(t)
   35:             for t in unpackedTrue:
   30:                 self.assertTrue(t)
       
    5:             packed = struct.pack(prefix+'?', 1)
       
    5:             self.assertEqual(len(packed), struct.calcsize(prefix+'?'))
       
    5:             if len(packed) != 1:
>>>>>>                 self.assertFalse(prefix, msg='encoded bool is not one byte: %r'
>>>>>>                                              %packed)
       
    5:             self.assertRaises(IOError, struct.pack, prefix + '?',
    5:                               ExplodingBool())
       
    6:         for c in [b'\x01', b'\x7f', b'\xff', b'\x0f', b'\xf0']:
    5:             self.assertTrue(struct.unpack('>?', c)[0])
       
    1:     @unittest.skipUnless(IS32BIT, "Specific to 32bit machines")
           def test_crasher(self):
>>>>>>         self.assertRaises(MemoryError, struct.pack, "357913941c", "a")
       
    1:     def test_count_overflow(self):
    1:         hugecount = '{}b'.format(sys.maxsize+1)
    1:         self.assertRaises(struct.error, struct.calcsize, hugecount)
       
    1:         hugecount2 = '{}b{}H'.format(sys.maxsize//2, sys.maxsize//2)
    1:         self.assertRaises(struct.error, struct.calcsize, hugecount2)
       
    1:     def check_sizeof(self, format_str, number_of_codes):
               # The size of 'PyStructObject'
   19:         totalsize = support.calcobjsize('5P')
               # The size taken up by the 'formatcode' dynamic array
   19:         totalsize += struct.calcsize('3P') * (number_of_codes + 1)
   19:         support.check_sizeof(self, struct.Struct(format_str), totalsize)
       
    1:     @support.cpython_only
           def test__sizeof__(self):
   11:         for code in integer_codes:
   10:             self.check_sizeof(code, 1)
    1:         self.check_sizeof('BHILfdspP', 9)
    1:         self.check_sizeof('B' * 1234, 1234)
    1:         self.check_sizeof('fd', 2)
    1:         self.check_sizeof('xxxxxxxxxxxxxx', 0)
    1:         self.check_sizeof('100H', 100)
    1:         self.check_sizeof('187s', 1)
    1:         self.check_sizeof('20p', 1)
    1:         self.check_sizeof('0s', 1)
    1:         self.check_sizeof('0c', 0)
       
    1:     def test_unicode_format(self):
    1:         try:
    1:             unicode
>>>>>>         except NameError:
>>>>>>             self.skipTest('no unicode support')
               # Issue #19099
    1:         s = struct.Struct(unichr(ord('I')))
    1:         self.assertEqual(s.format, 'I')
    1:         self.assertIs(type(s.format), str)
    1:         self.assertRaises(ValueError, struct.Struct, unichr(0x80))
       
       
    1: def test_main():
    1:     support.run_unittest(StructTest)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
