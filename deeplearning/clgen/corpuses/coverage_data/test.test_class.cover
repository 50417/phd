    1: "Test the functionality of Python classes implementing operators."
       
    1: import unittest
       
    1: from test import test_support
       
       testmeths = [
       
       # Binary operations
    1:     "add",
    1:     "radd",
    1:     "sub",
    1:     "rsub",
    1:     "mul",
    1:     "rmul",
    1:     "div",
    1:     "rdiv",
    1:     "mod",
    1:     "rmod",
    1:     "divmod",
    1:     "rdivmod",
    1:     "pow",
    1:     "rpow",
    1:     "rshift",
    1:     "rrshift",
    1:     "lshift",
    1:     "rlshift",
    1:     "and",
    1:     "rand",
    1:     "or",
    1:     "ror",
    1:     "xor",
    1:     "rxor",
       
       # List/dict operations
    1:     "contains",
    1:     "getitem",
    1:     "getslice",
    1:     "setitem",
    1:     "setslice",
    1:     "delitem",
    1:     "delslice",
       
       # Unary operations
    1:     "neg",
    1:     "pos",
    1:     "abs",
       
       # generic operations
    1:     "init",
           ]
       
       # These need to return something other than None
       #    "coerce",
       #    "hash",
       #    "str",
       #    "repr",
       #    "int",
       #    "long",
       #    "float",
       #    "oct",
       #    "hex",
       
       # These are separate because they can influence the test of other methods.
       #    "getattr",
       #    "setattr",
       #    "delattr",
       
    1: callLst = []
    1: def trackCall(f):
   50:     def track(*args, **kwargs):
  126:         callLst.append((f.__name__, args))
  126:         return f(*args, **kwargs)
   50:     return track
       
    2: class AllTests:
    1:     trackCall = trackCall
       
    1:     @trackCall
           def __coerce__(self, *args):
   44:         return (self,) + args
       
    1:     @trackCall
           def __hash__(self, *args):
    1:         return hash(id(self))
       
    1:     @trackCall
           def __str__(self, *args):
    1:         return "AllTests"
       
    1:     @trackCall
           def __repr__(self, *args):
    1:         return "AllTests"
       
    1:     @trackCall
           def __int__(self, *args):
    1:         return 1
       
    1:     @trackCall
           def __float__(self, *args):
    1:         return 1.0
       
    1:     @trackCall
           def __long__(self, *args):
    1:         return 1L
       
    1:     @trackCall
           def __oct__(self, *args):
    1:         return '01'
       
    1:     @trackCall
           def __hex__(self, *args):
    1:         return '0x1'
       
    1:     @trackCall
           def __cmp__(self, *args):
   20:         return 0
       
       # Synthesize all the other AllTests methods from the names in testmeths.
       
       method_template = """\
       @trackCall
       def __%(method)s__(self, *args):
           pass
    1: """
       
   36: for method in testmeths:
   35:     exec method_template % locals() in AllTests.__dict__
       
    1: del method, method_template
       
    2: class ClassTests(unittest.TestCase):
    1:     def setUp(self):
   18:         callLst[:] = []
       
    1:     def assertCallStack(self, expected_calls):
   67:         actualCallList = callLst[:]  # need to copy because the comparison below will add
                                            # additional calls to callLst
   67:         if expected_calls != actualCallList:
>>>>>>             self.fail("Expected call list:\n  %s\ndoes not match actual call list\n  %s" %
>>>>>>                       (expected_calls, actualCallList))
       
    1:     def testInit(self):
    1:         foo = AllTests()
    1:         self.assertCallStack([("__init__", (foo,))])
       
    1:     def testBinaryOps(self):
    1:         testme = AllTests()
               # Binary operations
       
    1:         callLst[:] = []
    1:         testme + 1
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__add__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         1 + testme
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__radd__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         testme - 1
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__sub__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         1 - testme
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__rsub__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         testme * 1
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__mul__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         1 * testme
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__rmul__", (testme, 1))])
       
    1:         if 1/2 == 0:
    1:             callLst[:] = []
    1:             testme / 1
    1:             self.assertCallStack([("__coerce__", (testme, 1)), ("__div__", (testme, 1))])
       
       
    1:             callLst[:] = []
    1:             1 / testme
    1:             self.assertCallStack([("__coerce__", (testme, 1)), ("__rdiv__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         testme % 1
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__mod__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         1 % testme
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__rmod__", (testme, 1))])
       
       
    1:         callLst[:] = []
    1:         divmod(testme,1)
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__divmod__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         divmod(1, testme)
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__rdivmod__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         testme ** 1
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__pow__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         1 ** testme
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__rpow__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         testme >> 1
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__rshift__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         1 >> testme
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__rrshift__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         testme << 1
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__lshift__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         1 << testme
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__rlshift__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         testme & 1
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__and__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         1 & testme
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__rand__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         testme | 1
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__or__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         1 | testme
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__ror__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         testme ^ 1
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__xor__", (testme, 1))])
       
    1:         callLst[:] = []
    1:         1 ^ testme
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ("__rxor__", (testme, 1))])
       
    1:     def testListAndDictOps(self):
    1:         testme = AllTests()
       
               # List/dict operations
       
    2:         class Empty: pass
       
    1:         try:
    1:             1 in Empty()
>>>>>>             self.fail('failed, should have raised TypeError')
    1:         except TypeError:
    1:             pass
       
    1:         callLst[:] = []
    1:         1 in testme
    1:         self.assertCallStack([('__contains__', (testme, 1))])
       
    1:         callLst[:] = []
    1:         testme[1]
    1:         self.assertCallStack([('__getitem__', (testme, 1))])
       
    1:         callLst[:] = []
    1:         testme[1] = 1
    1:         self.assertCallStack([('__setitem__', (testme, 1, 1))])
       
    1:         callLst[:] = []
    1:         del testme[1]
    1:         self.assertCallStack([('__delitem__', (testme, 1))])
       
    1:         callLst[:] = []
    1:         testme[:42]
    1:         self.assertCallStack([('__getslice__', (testme, 0, 42))])
       
    1:         callLst[:] = []
    1:         testme[:42] = "The Answer"
    1:         self.assertCallStack([('__setslice__', (testme, 0, 42, "The Answer"))])
       
    1:         callLst[:] = []
    1:         del testme[:42]
    1:         self.assertCallStack([('__delslice__', (testme, 0, 42))])
       
    1:         callLst[:] = []
    1:         testme[2:1024:10]
    1:         self.assertCallStack([('__getitem__', (testme, slice(2, 1024, 10)))])
       
    1:         callLst[:] = []
    1:         testme[2:1024:10] = "A lot"
    1:         self.assertCallStack([('__setitem__', (testme, slice(2, 1024, 10),
    1:                                                                     "A lot"))])
    1:         callLst[:] = []
    1:         del testme[2:1024:10]
    1:         self.assertCallStack([('__delitem__', (testme, slice(2, 1024, 10)))])
       
    1:         callLst[:] = []
    1:         testme[:42, ..., :24:, 24, 100]
    1:         self.assertCallStack([('__getitem__', (testme, (slice(None, 42, None),
    1:                                                         Ellipsis,
    1:                                                         slice(None, 24, None),
    1:                                                         24, 100)))])
    1:         callLst[:] = []
    1:         testme[:42, ..., :24:, 24, 100] = "Strange"
    1:         self.assertCallStack([('__setitem__', (testme, (slice(None, 42, None),
    1:                                                         Ellipsis,
    1:                                                         slice(None, 24, None),
    1:                                                         24, 100), "Strange"))])
    1:         callLst[:] = []
    1:         del testme[:42, ..., :24:, 24, 100]
    1:         self.assertCallStack([('__delitem__', (testme, (slice(None, 42, None),
    1:                                                         Ellipsis,
    1:                                                         slice(None, 24, None),
    1:                                                         24, 100)))])
       
               # Now remove the slice hooks to see if converting normal slices to
               #  slice object works.
       
    1:         getslice = AllTests.__getslice__
    1:         del AllTests.__getslice__
    1:         setslice = AllTests.__setslice__
    1:         del AllTests.__setslice__
    1:         delslice = AllTests.__delslice__
    1:         del AllTests.__delslice__
       
               # XXX when using new-style classes the slice testme[:42] produces
               #  slice(None, 42, None) instead of slice(0, 42, None). py3k will have
               #  to change this test.
    1:         callLst[:] = []
    1:         testme[:42]
    1:         self.assertCallStack([('__getitem__', (testme, slice(0, 42, None)))])
       
    1:         callLst[:] = []
    1:         testme[:42] = "The Answer"
    1:         self.assertCallStack([('__setitem__', (testme, slice(0, 42, None),
    1:                                                                 "The Answer"))])
    1:         callLst[:] = []
    1:         del testme[:42]
    1:         self.assertCallStack([('__delitem__', (testme, slice(0, 42, None)))])
       
               # Restore the slice methods, or the tests will fail with regrtest -R.
    1:         AllTests.__getslice__ = getslice
    1:         AllTests.__setslice__ = setslice
    1:         AllTests.__delslice__ = delslice
       
       
    1:     @test_support.cpython_only
           def testDelItem(self):
    2:         class A:
    1:             ok = False
    1:             def __delitem__(self, key):
    1:                 self.ok = True
    1:         a = A()
               # Subtle: we need to call PySequence_SetItem, not PyMapping_SetItem.
    1:         from _testcapi import sequence_delitem
    1:         sequence_delitem(a, 2)
    1:         self.assertTrue(a.ok)
       
       
    1:     def testUnaryOps(self):
    1:         testme = AllTests()
       
    1:         callLst[:] = []
    1:         -testme
    1:         self.assertCallStack([('__neg__', (testme,))])
    1:         callLst[:] = []
    1:         +testme
    1:         self.assertCallStack([('__pos__', (testme,))])
    1:         callLst[:] = []
    1:         abs(testme)
    1:         self.assertCallStack([('__abs__', (testme,))])
    1:         callLst[:] = []
    1:         int(testme)
    1:         self.assertCallStack([('__int__', (testme,))])
    1:         callLst[:] = []
    1:         long(testme)
    1:         self.assertCallStack([('__long__', (testme,))])
    1:         callLst[:] = []
    1:         float(testme)
    1:         self.assertCallStack([('__float__', (testme,))])
    1:         callLst[:] = []
    1:         oct(testme)
    1:         self.assertCallStack([('__oct__', (testme,))])
    1:         callLst[:] = []
    1:         hex(testme)
    1:         self.assertCallStack([('__hex__', (testme,))])
       
       
    1:     def testMisc(self):
    1:         testme = AllTests()
       
    1:         callLst[:] = []
    1:         hash(testme)
    1:         self.assertCallStack([('__hash__', (testme,))])
       
    1:         callLst[:] = []
    1:         repr(testme)
    1:         self.assertCallStack([('__repr__', (testme,))])
       
    1:         callLst[:] = []
    1:         str(testme)
    1:         self.assertCallStack([('__str__', (testme,))])
       
    1:         callLst[:] = []
    1:         testme == 1
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ('__cmp__', (testme, 1))])
       
    1:         callLst[:] = []
    1:         testme < 1
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ('__cmp__', (testme, 1))])
       
    1:         callLst[:] = []
    1:         testme > 1
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ('__cmp__', (testme, 1))])
       
    1:         callLst[:] = []
    1:         eval('testme <> 1')  # XXX kill this in py3k
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ('__cmp__', (testme, 1))])
       
    1:         callLst[:] = []
    1:         testme != 1
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ('__cmp__', (testme, 1))])
       
    1:         callLst[:] = []
    1:         1 == testme
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ('__cmp__', (1, testme))])
       
    1:         callLst[:] = []
    1:         1 < testme
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ('__cmp__', (1, testme))])
       
    1:         callLst[:] = []
    1:         1 > testme
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ('__cmp__', (1, testme))])
       
    1:         callLst[:] = []
    1:         eval('1 <> testme')
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ('__cmp__', (1, testme))])
       
    1:         callLst[:] = []
    1:         1 != testme
    1:         self.assertCallStack([("__coerce__", (testme, 1)), ('__cmp__', (1, testme))])
       
       
    1:     def testGetSetAndDel(self):
               # Interfering tests
    2:         class ExtraTests(AllTests):
    1:             @trackCall
                   def __getattr__(self, *args):
    1:                 return "SomeVal"
       
    1:             @trackCall
                   def __setattr__(self, *args):
    1:                 pass
       
    1:             @trackCall
                   def __delattr__(self, *args):
    1:                 pass
       
    1:         testme = ExtraTests()
       
    1:         callLst[:] = []
    1:         testme.spam
    1:         self.assertCallStack([('__getattr__', (testme, "spam"))])
       
    1:         callLst[:] = []
    1:         testme.eggs = "spam, spam, spam and ham"
    1:         self.assertCallStack([('__setattr__', (testme, "eggs",
    1:                                                "spam, spam, spam and ham"))])
       
    1:         callLst[:] = []
    1:         del testme.cardinal
    1:         self.assertCallStack([('__delattr__', (testme, "cardinal"))])
       
    1:     def testDel(self):
    1:         x = []
       
    2:         class DelTest:
    1:             def __del__(self):
>>>>>>                 x.append("crab people, crab people")
    1:         testme = DelTest()
    1:         del testme
    1:         import gc
    1:         gc.collect()
    1:         self.assertEqual(["crab people, crab people"], x)
       
    1:     def testBadTypeReturned(self):
               # return values of some method are type-checked
    2:         class BadTypeClass:
    1:             def __int__(self):
    7:                 return None
    1:             __float__ = __int__
    1:             __long__ = __int__
    1:             __str__ = __int__
    1:             __repr__ = __int__
    1:             __oct__ = __int__
    1:             __hex__ = __int__
       
    8:         for f in [int, float, long, str, repr, oct, hex]:
    7:             self.assertRaises(TypeError, f, BadTypeClass())
       
    1:     def testMixIntsAndLongs(self):
               # mixing up ints and longs is okay
    2:         class IntLongMixClass:
    1:             @trackCall
                   def __int__(self):
    1:                 return 42L
       
    1:             @trackCall
                   def __long__(self):
    1:                 return 64
       
    1:         mixIntAndLong = IntLongMixClass()
       
    1:         callLst[:] = []
    1:         as_int = int(mixIntAndLong)
    1:         self.assertEqual(type(as_int), long)
    1:         self.assertEqual(as_int, 42L)
    1:         self.assertCallStack([('__int__', (mixIntAndLong,))])
       
    1:         callLst[:] = []
    1:         as_long = long(mixIntAndLong)
    1:         self.assertEqual(type(as_long), long)
    1:         self.assertEqual(as_long, 64)
    1:         self.assertCallStack([('__long__', (mixIntAndLong,))])
       
    1:     def testHashStuff(self):
               # Test correct errors from hash() on objects with comparisons but
               #  no __hash__
       
    2:         class C0:
    1:             pass
       
    1:         hash(C0()) # This should work; the next two should raise TypeError
       
    2:         class C1:
    1:             def __cmp__(self, other): return 0
       
    1:         self.assertRaises(TypeError, hash, C1())
       
    2:         class C2:
    1:             def __eq__(self, other): return 1
       
    1:         self.assertRaises(TypeError, hash, C2())
       
       
    1:     def testSFBug532646(self):
               # Test for SF bug 532646
       
    2:         class A:
    1:             pass
    1:         A.__call__ = A()
    1:         a = A()
       
    1:         try:
    1:             a() # This should not segfault
    1:         except RuntimeError:
    1:             pass
               else:
>>>>>>             self.fail("Failed to raise RuntimeError")
       
    1:     def testForExceptionsRaisedInInstanceGetattr2(self):
               # Tests for exceptions raised in instance_getattr2().
       
    1:         def booh(self):
    6:             raise AttributeError("booh")
       
    2:         class A:
    1:             a = property(booh)
    1:         try:
    1:             A().a # Raised AttributeError: A instance has no attribute 'a'
    1:         except AttributeError, x:
    1:             if str(x) != "booh":
>>>>>>                 self.fail("attribute error for A().a got masked: %s" % x)
       
    2:         class E:
    1:             __eq__ = property(booh)
    1:         E() == E() # In debug mode, caused a C-level assert() to fail
       
    2:         class I:
    1:             __init__ = property(booh)
    1:         try:
                   # In debug mode, printed XXX undetected error and
                   #  raises AttributeError
    1:             I()
    1:         except AttributeError, x:
    1:             pass
               else:
>>>>>>             self.fail("attribute error for I.__init__ got masked")
       
    1:     def testHashComparisonOfMethods(self):
               # Test comparison and hash of methods
    2:         class A:
    1:             def __init__(self, x):
    5:                 self.x = x
    1:             def f(self):
>>>>>>                 pass
    1:             def g(self):
>>>>>>                 pass
    1:             def __eq__(self, other):
    2:                 return self.x == other.x
    1:             def __hash__(self):
    5:                 return self.x
    2:         class B(A):
    1:             pass
       
    1:         a1 = A(1)
    1:         a2 = A(2)
    1:         self.assertEqual(a1.f, a1.f)
    1:         self.assertNotEqual(a1.f, a2.f)
    1:         self.assertNotEqual(a1.f, a1.g)
    1:         self.assertEqual(a1.f, A(1).f)
    1:         self.assertEqual(hash(a1.f), hash(a1.f))
    1:         self.assertEqual(hash(a1.f), hash(A(1).f))
       
    1:         self.assertNotEqual(A.f, a1.f)
    1:         self.assertNotEqual(A.f, A.g)
    1:         self.assertEqual(B.f, A.f)
    1:         self.assertEqual(hash(B.f), hash(A.f))
       
               # the following triggers a SystemError in 2.4
    1:         a = A(hash(A.f.im_func)^(-1))
    1:         hash(a.f)
       
    1:     def testAttrSlots(self):
    2:         class C:
    1:             pass
    3:         for c in C, C():
    2:             self.assertRaises(TypeError, type(c).__getattribute__, c, [])
    2:             self.assertRaises(TypeError, type(c).__setattr__, c, [], [])
       
    1:     def testSetattrWrapperNameIntern(self):
               # Issue #25794: __setattr__ should intern the attribute name
    2:         class A(object):
    1:             pass
       
    1:         def add(self, other):
    1:             return 'summa'
       
    1:         name = ''.join(list('__add__'))  # shouldn't be optimized
    1:         self.assertIsNot(name, '__add__')  # not interned
    1:         type.__setattr__(A, name, add)
    1:         self.assertEqual(A() + 1, 'summa')
       
    1:         name2 = ''.join(list('__add__'))
    1:         self.assertIsNot(name2, '__add__')
    1:         self.assertIsNot(name2, name)
    1:         type.__delattr__(A, name2)
    1:         with self.assertRaises(TypeError):
    1:             A() + 1
       
    1:     @test_support.requires_unicode
           def testSetattrWrapperNameUnicode(self):
               # Issue #25794: __setattr__ should intern the attribute name
    2:         class A(object):
    1:             pass
       
    1:         def add(self, other):
    1:             return 'summa'
       
    1:         type.__setattr__(A, u'__add__', add)
    1:         self.assertEqual(A() + 1, 'summa')
       
    1:         type.__delattr__(A, u'__add__')
    1:         with self.assertRaises(TypeError):
    1:             A() + 1
       
    1:     def testSetattrNonStringName(self):
    2:         class A(object):
    1:             pass
       
    1:         with self.assertRaises(TypeError):
    1:             type.__setattr__(A, bytearray(b'x'), None)
       
    1: def test_main():
    1:     with test_support.check_py3k_warnings(
    1:             (".+__(get|set|del)slice__ has been removed", DeprecationWarning),
    1:             ("classic int division", DeprecationWarning),
    1:             ("<> not supported", DeprecationWarning)):
    1:         test_support.run_unittest(ClassTests)
       
    1: if __name__=='__main__':
>>>>>>     test_main()
