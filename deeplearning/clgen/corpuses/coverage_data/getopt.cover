       """Parser for command line options.
       
       This module helps scripts to parse the command line arguments in
       sys.argv.  It supports the same conventions as the Unix getopt()
       function (including the special meanings of arguments of the form `-'
       and `--').  Long options similar to those supported by GNU software
       may be used as well via an optional third argument.  This module
       provides two functions and an exception:
       
       getopt() -- Parse command line options
       gnu_getopt() -- Like getopt(), but allow option and non-option arguments
       to be intermixed.
       GetoptError -- exception (class) raised with 'opt' attribute, which is the
       option involved with the exception.
       """
       
       # Long option support added by Lars Wirzenius <liw@iki.fi>.
       #
       # Gerrit Holl <gerrit@nl.linux.org> moved the string-based exceptions
       # to class-based exceptions.
       #
       # Peter Astrand <astrand@lysator.liu.se> added gnu_getopt().
       #
       # TODO for gnu_getopt():
       #
       # - GNU getopt_long_only mechanism
       # - allow the caller to specify ordering
       # - RETURN_IN_ORDER option
       # - GNU extension with '-' as first character of option string
       # - optional arguments, specified by double colons
       # - an option string with a W followed by semicolon should
       #   treat "-W foo" as "--foo"
       
>>>>>> __all__ = ["GetoptError","error","getopt","gnu_getopt"]
       
>>>>>> import os
       
>>>>>> class GetoptError(Exception):
>>>>>>     opt = ''
>>>>>>     msg = ''
>>>>>>     def __init__(self, msg, opt=''):
   14:         self.msg = msg
   14:         self.opt = opt
   14:         Exception.__init__(self, msg, opt)
       
>>>>>>     def __str__(self):
    3:         return self.msg
       
>>>>>> error = GetoptError # backward compatibility
       
>>>>>> def getopt(args, shortopts, longopts = []):
           """getopt(args, options[, long_options]) -> opts, args
       
           Parses command line options and parameter list.  args is the
           argument list to be parsed, without the leading reference to the
           running program.  Typically, this means "sys.argv[1:]".  shortopts
           is the string of option letters that the script wants to
           recognize, with options that require an argument followed by a
           colon (i.e., the same format that Unix getopt() uses).  If
           specified, longopts is a list of strings with the names of the
           long options which should be supported.  The leading '--'
           characters should not be included in the option name.  Options
           which require an argument should be followed by an equal sign
           ('=').
       
           The return value consists of two elements: the first is a list of
           (option, value) pairs; the second is the list of program arguments
           left after the option list was stripped (this is a trailing slice
           of the first argument).  Each option-and-value pair returned has
           the option as its first element, prefixed with a hyphen (e.g.,
           '-x'), and the option argument as its second element, or an empty
           string if the option has no argument.  The options occur in the
           list in the same order in which they were found, thus allowing
           multiple occurrences.  Long and short options may be mixed.
       
           """
       
   68:     opts = []
   68:     if type(longopts) == type(""):
>>>>>>         longopts = [longopts]
           else:
   68:         longopts = list(longopts)
  124:     while args and args[0].startswith('-') and args[0] != '-':
   62:         if args[0] == '--':
>>>>>>             args = args[1:]
>>>>>>             break
   62:         if args[0].startswith('--'):
   27:             opts, args = do_longs(opts, args[0][2:], longopts, args[1:])
               else:
   35:             opts, args = do_shorts(opts, args[0][1:], shortopts, args[1:])
       
   62:     return opts, args
       
>>>>>> def gnu_getopt(args, shortopts, longopts = []):
           """getopt(args, options[, long_options]) -> opts, args
       
           This function works like getopt(), except that GNU style scanning
           mode is used by default. This means that option and non-option
           arguments may be intermixed. The getopt() function stops
           processing options as soon as a non-option argument is
           encountered.
       
           If the first character of the option string is `+', or if the
           environment variable POSIXLY_CORRECT is set, then option
           processing stops as soon as a non-option argument is encountered.
       
           """
       
    4:     opts = []
    4:     prog_args = []
    4:     if isinstance(longopts, str):
>>>>>>         longopts = [longopts]
           else:
    4:         longopts = list(longopts)
       
           # Allow options after non-option arguments?
    4:     if shortopts.startswith('+'):
    1:         shortopts = shortopts[1:]
    1:         all_options_first = True
    3:     elif os.environ.get("POSIXLY_CORRECT"):
    1:         all_options_first = True
           else:
    2:         all_options_first = False
       
   14:     while args:
   12:         if args[0] == '--':
>>>>>>             prog_args += args[1:]
>>>>>>             break
       
   12:         if args[0][:2] == '--':
    2:             opts, args = do_longs(opts, args[0][2:], longopts, args[1:])
   10:         elif args[0][:1] == '-' and args[0] != '-':
    6:             opts, args = do_shorts(opts, args[0][1:], shortopts, args[1:])
               else:
    4:             if all_options_first:
    2:                 prog_args += args
    2:                 break
                   else:
    2:                 prog_args.append(args[0])
    2:                 args = args[1:]
       
    4:     return opts, prog_args
       
>>>>>> def do_longs(opts, opt, longopts, args):
   36:     try:
   36:         i = opt.index('=')
   25:     except ValueError:
   25:         optarg = None
           else:
   11:         opt, optarg = opt[:i], opt[i+1:]
       
   36:     has_arg, opt = long_has_args(opt, longopts)
   33:     if has_arg:
   13:         if optarg is None:
    5:             if not args:
    1:                 raise GetoptError('option --%s requires argument' % opt, opt)
    4:             optarg, args = args[0], args[1:]
   20:     elif optarg is not None:
    3:         raise GetoptError('option --%s must not have an argument' % opt, opt)
   29:     opts.append(('--' + opt, optarg or ''))
   29:     return opts, args
       
       # Return:
       #   has_arg?
       #   full option name
>>>>>> def long_has_args(opt, longopts):
  332:     possibilities = [o for o in longopts if o.startswith(opt)]
   42:     if not possibilities:
    5:         raise GetoptError('option --%s not recognized' % opt, opt)
           # Is there an exact match?
   37:     if opt in possibilities:
   21:         return False, opt
   16:     elif opt + '=' in possibilities:
   13:         return True, opt
           # No exact match, so better be unique.
    3:     if len(possibilities) > 1:
               # XXX since possibilities contains all valid continuations, might be
               # nice to work them into the error msg
    1:         raise GetoptError('option --%s not a unique prefix' % opt, opt)
    2:     assert len(possibilities) == 1
    2:     unique_match = possibilities[0]
    2:     has_arg = unique_match.endswith('=')
    2:     if has_arg:
    1:         unique_match = unique_match[:-1]
    2:     return has_arg, unique_match
       
>>>>>> def do_shorts(opts, optstring, shortopts, args):
   93:     while optstring != '':
   49:         opt, optstring = optstring[0], optstring[1:]
   49:         if short_has_arg(opt, shortopts):
   20:             if optstring == '':
   11:                 if not args:
    1:                     raise GetoptError('option -%s requires argument' % opt,
    1:                                       opt)
   10:                 optstring, args = args[0], args[1:]
   19:             optarg, optstring = optstring, ''
               else:
   27:             optarg = ''
   46:         opts.append(('-' + opt, optarg))
   44:     return opts, args
       
>>>>>> def short_has_arg(opt, shortopts):
  174:     for i in range(len(shortopts)):
  171:         if opt == shortopts[i] != ':':
   49:             return shortopts.startswith(':', i+1)
    3:     raise GetoptError('option -%s not recognized' % opt, opt)
       
>>>>>> if __name__ == '__main__':
>>>>>>     import sys
>>>>>>     print getopt(sys.argv[1:], "a:b", ["alpha=", "beta"])
