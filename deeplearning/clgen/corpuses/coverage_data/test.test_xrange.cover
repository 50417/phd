       # Python test set -- built-in functions
       
    1: import test.test_support, unittest
    1: import sys
    1: import pickle
    1: import itertools
       
    1: import warnings
    1: warnings.filterwarnings("ignore", "integer argument expected",
    1:                         DeprecationWarning, "unittest")
       
       # pure Python implementations (3 args only), for comparison
    1: def pyrange(start, stop, step):
14400:     if (start - stop) // step < 0:
               # replace stop with next element in the sequence of integers
               # that are congruent to start modulo step.
 6780:         stop += (start - stop) % step
412868:         while start != stop:
410148:             yield start
406088:             start += step
       
    1: def pyrange_reversed(start, stop, step):
 7200:     stop += (start - stop) % step
 7200:     return pyrange(stop - step, start - step, -step)
       
       
    2: class XrangeTest(unittest.TestCase):
    1:     def assert_iterators_equal(self, xs, ys, test_id, limit=None):
               # check that an iterator xs matches the expected results ys,
               # up to a given limit.
14400:         if limit is not None:
14400:             xs = itertools.islice(xs, limit)
14400:             ys = itertools.islice(ys, limit)
14400:         sentinel = object()
14400:         pairs = itertools.izip_longest(xs, ys, fillvalue=sentinel)
424548:         for i, (x, y) in enumerate(pairs):
410148:             if x == y:
410148:                 continue
>>>>>>             elif x == sentinel:
>>>>>>                 self.fail('{}: iterator ended unexpectedly '
>>>>>>                           'at position {}; expected {}'.format(test_id, i, y))
>>>>>>             elif y == sentinel:
>>>>>>                 self.fail('{}: unexpected excess element {} at '
>>>>>>                           'position {}'.format(test_id, x, i))
                   else:
>>>>>>                 self.fail('{}: wrong element at position {};'
>>>>>>                           'expected {}, got {}'.format(test_id, i, y, x))
       
    1:     def assert_xranges_equivalent(self, x, y):
               # Check that two xrange objects are equivalent, in the sense of the
               # associated sequences being the same.  We want to use this for large
               # xrange objects, so instead of converting to lists and comparing
               # directly we do a number of indirect checks.
   72:         if len(x) != len(y):
>>>>>>             self.fail('{} and {} have different '
>>>>>>                       'lengths: {} and {} '.format(x, y, len(x), len(y)))
   72:         if len(x) >= 1:
   72:             if x[0] != y[0]:
>>>>>>                 self.fail('{} and {} have different initial '
>>>>>>                           'elements: {} and {} '.format(x, y, x[0], y[0]))
   72:             if x[-1] != y[-1]:
>>>>>>                 self.fail('{} and {} have different final '
>>>>>>                           'elements: {} and {} '.format(x, y, x[-1], y[-1]))
   72:         if len(x) >= 2:
   72:             x_step = x[1] - x[0]
   72:             y_step = y[1] - y[0]
   72:             if x_step != y_step:
>>>>>>                 self.fail('{} and {} have different step: '
>>>>>>                           '{} and {} '.format(x, y, x_step, y_step))
       
    1:     def test_xrange(self):
    1:         self.assertEqual(list(xrange(3)), [0, 1, 2])
    1:         self.assertEqual(list(xrange(1, 5)), [1, 2, 3, 4])
    1:         self.assertEqual(list(xrange(0)), [])
    1:         self.assertEqual(list(xrange(-3)), [])
    1:         self.assertEqual(list(xrange(1, 10, 3)), [1, 4, 7])
    1:         self.assertEqual(list(xrange(5, -5, -3)), [5, 2, -1, -4])
       
    1:         a = 10
    1:         b = 100
    1:         c = 50
       
    1:         self.assertEqual(list(xrange(a, a+2)), [a, a+1])
    1:         self.assertEqual(list(xrange(a+2, a, -1L)), [a+2, a+1])
    1:         self.assertEqual(list(xrange(a+4, a, -2)), [a+4, a+2])
       
    1:         seq = list(xrange(a, b, c))
    1:         self.assertIn(a, seq)
    1:         self.assertNotIn(b, seq)
    1:         self.assertEqual(len(seq), 2)
       
    1:         seq = list(xrange(b, a, -c))
    1:         self.assertIn(b, seq)
    1:         self.assertNotIn(a, seq)
    1:         self.assertEqual(len(seq), 2)
       
    1:         seq = list(xrange(-a, -b, -c))
    1:         self.assertIn(-a, seq)
    1:         self.assertNotIn(-b, seq)
    1:         self.assertEqual(len(seq), 2)
       
    1:         self.assertRaises(TypeError, xrange)
    1:         self.assertRaises(TypeError, xrange, 1, 2, 3, 4)
    1:         self.assertRaises(ValueError, xrange, 1, 2, 0)
       
    1:         self.assertRaises(OverflowError, xrange, 10**100, 10**101, 10**101)
       
    1:         self.assertRaises(TypeError, xrange, 0, "spam")
    1:         self.assertRaises(TypeError, xrange, 0, 42, "spam")
       
    1:         self.assertEqual(len(xrange(0, sys.maxint, sys.maxint-1)), 2)
       
    1:         self.assertRaises(OverflowError, xrange, -sys.maxint, sys.maxint)
    1:         self.assertRaises(OverflowError, xrange, 0, 2*sys.maxint)
       
    1:         r = xrange(-sys.maxint, sys.maxint, 2)
    1:         self.assertEqual(len(r), sys.maxint)
    1:         self.assertRaises(OverflowError, xrange, -sys.maxint-1, sys.maxint, 2)
       
    1:     def test_pickling(self):
    1:         testcases = [(13,), (0, 11), (-22, 10), (20, 3, -1),
    1:                      (13, 21, 3), (-2, 2, 2)]
    4:         for proto in range(pickle.HIGHEST_PROTOCOL + 1):
   21:             for t in testcases:
   18:                 r = xrange(*t)
   18:                 self.assertEqual(list(pickle.loads(pickle.dumps(r, proto))),
   18:                                  list(r))
       
    1:         M = min(sys.maxint, sys.maxsize)
    1:         large_testcases = testcases + [
    1:             (0, M, 1),
    1:             (M, 0, -1),
    1:             (0, M, M - 1),
    1:             (M // 2, M, 1),
    1:             (0, -M, -1),
    1:             (0, -M, 1 - M),
    1:             (-M, M, 2),
    1:             (-M, M, 1024),
    1:             (-M, M, 10585),
    1:             (M, -M, -2),
    1:             (M, -M, -1024),
    1:             (M, -M, -10585),
                   ]
    4:         for proto in range(pickle.HIGHEST_PROTOCOL + 1):
   57:             for t in large_testcases:
   54:                 r = xrange(*t)
   54:                 r_out = pickle.loads(pickle.dumps(r, proto))
   54:                 self.assert_xranges_equivalent(r_out, r)
       
    1:     def test_repr(self):
               # Check that repr of an xrange is a valid representation
               # of that xrange.
       
               # Valid xranges have at most min(sys.maxint, sys.maxsize) elements.
    1:         M = min(sys.maxint, sys.maxsize)
       
               testcases = [
    1:             (13,),
    1:             (0, 11),
    1:             (-22, 10),
    1:             (20, 3, -1),
    1:             (13, 21, 3),
    1:             (-2, 2, 2),
    1:             (0, M, 1),
    1:             (M, 0, -1),
    1:             (0, M, M - 1),
    1:             (M // 2, M, 1),
    1:             (0, -M, -1),
    1:             (0, -M, 1 - M),
    1:             (-M, M, 2),
    1:             (-M, M, 1024),
    1:             (-M, M, 10585),
    1:             (M, -M, -2),
    1:             (M, -M, -1024),
    1:             (M, -M, -10585),
                   ]
   19:         for t in testcases:
   18:             r = xrange(*t)
   18:             r_out = eval(repr(r))
   18:             self.assert_xranges_equivalent(r, r_out)
       
    1:     def test_range_iterators(self):
               # see issue 7298
    1:         limits = [base + jiggle
    3:                   for M in (2**32, 2**64)
   12:                   for base in (-M, -M//2, 0, M//2, M)
   60:                   for jiggle in (-2, -1, 0, 1, 2)]
    1:         test_ranges = [(start, end, step)
   51:                        for start in limits
 2550:                        for end in limits
17500:                        for step in (-2**63, -2**31, -2, -1, 1, 2)]
       
15001:         for start, end, step in test_ranges:
15000:             try:
15000:                 iter1 = xrange(start, end, step)
 7800:             except OverflowError:
 7800:                 pass
                   else:
 7200:                 iter2 = pyrange(start, end, step)
 7200:                 test_id = "xrange({}, {}, {})".format(start, end, step)
                       # check first 100 entries
 7200:                 self.assert_iterators_equal(iter1, iter2, test_id, limit=100)
       
15000:             try:
15000:                 iter1 = reversed(xrange(start, end, step))
 7800:             except OverflowError:
 7800:                 pass
                   else:
 7200:                 iter2 = pyrange_reversed(start, end, step)
 7200:                 test_id = "reversed(xrange({}, {}, {}))".format(start, end, step)
 7200:                 self.assert_iterators_equal(iter1, iter2, test_id, limit=100)
       
       
    1: def test_main():
    1:     test.test_support.run_unittest(XrangeTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
