    1: import sys, unittest
    1: from ctypes import *
       
    1: structures = []
    1: byteswapped_structures = []
       
       
    1: if sys.byteorder == "little":
    1:     SwappedStructure = BigEndianStructure
       else:
>>>>>>     SwappedStructure = LittleEndianStructure
       
    1: for typ in [c_short, c_int, c_long, c_longlong,
    1:             c_float, c_double,
   11:             c_ushort, c_uint, c_ulong, c_ulonglong]:
   20:     class X(Structure):
   10:         _pack_ = 1
   10:         _fields_ = [("pad", c_byte),
   10:                     ("value", typ)]
   20:     class Y(SwappedStructure):
   10:         _pack_ = 1
   10:         _fields_ = [("pad", c_byte),
   10:                     ("value", typ)]
   10:     structures.append(X)
   10:     byteswapped_structures.append(Y)
       
    2: class TestStructures(unittest.TestCase):
    1:     def test_native(self):
   11:         for typ in structures:
       ##            print typ.value
   10:             self.assertEqual(typ.value.offset, 1)
   10:             o = typ()
   10:             o.value = 4
   10:             self.assertEqual(o.value, 4)
       
    1:     def test_swapped(self):
   11:         for typ in byteswapped_structures:
       ##            print >> sys.stderr, typ.value
   10:             self.assertEqual(typ.value.offset, 1)
   10:             o = typ()
   10:             o.value = 4
   10:             self.assertEqual(o.value, 4)
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
