       # Augmented assignment test.
       
    1: from test.test_support import run_unittest, check_py3k_warnings
    1: import unittest
       
       
    2: class AugAssignTest(unittest.TestCase):
    1:     def testBasic(self):
    1:         x = 2
    1:         x += 1
    1:         x *= 2
    1:         x **= 2
    1:         x -= 8
    1:         x //= 5
    1:         x %= 3
    1:         x &= 2
    1:         x |= 5
    1:         x ^= 1
    1:         x /= 2
    1:         if 1/2 == 0:
                   # classic division
    1:             self.assertEqual(x, 3)
               else:
                   # new-style division (with -Qnew)
>>>>>>             self.assertEqual(x, 3.0)
       
    1:     def test_with_unpacking(self):
    1:         self.assertRaises(SyntaxError, compile, "x, b += 3", "<test>", "exec")
       
    1:     def testInList(self):
    1:         x = [2]
    1:         x[0] += 1
    1:         x[0] *= 2
    1:         x[0] **= 2
    1:         x[0] -= 8
    1:         x[0] //= 5
    1:         x[0] %= 3
    1:         x[0] &= 2
    1:         x[0] |= 5
    1:         x[0] ^= 1
    1:         x[0] /= 2
    1:         if 1/2 == 0:
    1:             self.assertEqual(x[0], 3)
               else:
>>>>>>             self.assertEqual(x[0], 3.0)
       
    1:     def testInDict(self):
    1:         x = {0: 2}
    1:         x[0] += 1
    1:         x[0] *= 2
    1:         x[0] **= 2
    1:         x[0] -= 8
    1:         x[0] //= 5
    1:         x[0] %= 3
    1:         x[0] &= 2
    1:         x[0] |= 5
    1:         x[0] ^= 1
    1:         x[0] /= 2
    1:         if 1/2 == 0:
    1:             self.assertEqual(x[0], 3)
               else:
>>>>>>             self.assertEqual(x[0], 3.0)
       
    1:     def testSequences(self):
    1:         x = [1,2]
    1:         x += [3,4]
    1:         x *= 2
       
    1:         self.assertEqual(x, [1, 2, 3, 4, 1, 2, 3, 4])
       
    1:         x = [1, 2, 3]
    1:         y = x
    1:         x[1:2] *= 2
    1:         y[1:2] += [1]
       
    1:         self.assertEqual(x, [1, 2, 1, 2, 3])
    1:         self.assertTrue(x is y)
       
    1:     def testCustomMethods1(self):
       
    2:         class aug_test:
    1:             def __init__(self, value):
    5:                 self.val = value
    1:             def __radd__(self, val):
>>>>>>                 return self.val + val
    1:             def __add__(self, val):
    1:                 return aug_test(self.val + val)
       
    2:         class aug_test2(aug_test):
    1:             def __iadd__(self, val):
    1:                 self.val = self.val + val
    1:                 return self
       
    2:         class aug_test3(aug_test):
    1:             def __iadd__(self, val):
    1:                 return aug_test3(self.val + val)
       
    1:         x = aug_test(1)
    1:         y = x
    1:         x += 10
       
    1:         self.assertIsInstance(x, aug_test)
    1:         self.assertTrue(y is not x)
    1:         self.assertEqual(x.val, 11)
       
    1:         x = aug_test2(2)
    1:         y = x
    1:         x += 10
       
    1:         self.assertTrue(y is x)
    1:         self.assertEqual(x.val, 12)
       
    1:         x = aug_test3(3)
    1:         y = x
    1:         x += 10
       
    1:         self.assertIsInstance(x, aug_test3)
    1:         self.assertTrue(y is not x)
    1:         self.assertEqual(x.val, 13)
       
       
    1:     def testCustomMethods2(test_self):
    1:         output = []
       
    2:         class testall:
    1:             def __add__(self, val):
    1:                 output.append("__add__ called")
    1:             def __radd__(self, val):
    1:                 output.append("__radd__ called")
    1:             def __iadd__(self, val):
    1:                 output.append("__iadd__ called")
    1:                 return self
       
    1:             def __sub__(self, val):
    1:                 output.append("__sub__ called")
    1:             def __rsub__(self, val):
    1:                 output.append("__rsub__ called")
    1:             def __isub__(self, val):
    1:                 output.append("__isub__ called")
    1:                 return self
       
    1:             def __mul__(self, val):
    1:                 output.append("__mul__ called")
    1:             def __rmul__(self, val):
    1:                 output.append("__rmul__ called")
    1:             def __imul__(self, val):
    1:                 output.append("__imul__ called")
    1:                 return self
       
    1:             def __div__(self, val):
    1:                 output.append("__div__ called")
    1:             def __rdiv__(self, val):
    1:                 output.append("__rdiv__ called")
    1:             def __idiv__(self, val):
    1:                 output.append("__idiv__ called")
    1:                 return self
       
    1:             def __floordiv__(self, val):
    1:                 output.append("__floordiv__ called")
    1:                 return self
    1:             def __ifloordiv__(self, val):
    1:                 output.append("__ifloordiv__ called")
    1:                 return self
    1:             def __rfloordiv__(self, val):
    1:                 output.append("__rfloordiv__ called")
    1:                 return self
       
    1:             def __truediv__(self, val):
>>>>>>                 output.append("__truediv__ called")
>>>>>>                 return self
    1:             def __itruediv__(self, val):
>>>>>>                 output.append("__itruediv__ called")
>>>>>>                 return self
       
    1:             def __mod__(self, val):
    1:                 output.append("__mod__ called")
    1:             def __rmod__(self, val):
    1:                 output.append("__rmod__ called")
    1:             def __imod__(self, val):
    1:                 output.append("__imod__ called")
    1:                 return self
       
    1:             def __pow__(self, val):
    1:                 output.append("__pow__ called")
    1:             def __rpow__(self, val):
    1:                 output.append("__rpow__ called")
    1:             def __ipow__(self, val):
    1:                 output.append("__ipow__ called")
    1:                 return self
       
    1:             def __or__(self, val):
    1:                 output.append("__or__ called")
    1:             def __ror__(self, val):
    1:                 output.append("__ror__ called")
    1:             def __ior__(self, val):
    1:                 output.append("__ior__ called")
    1:                 return self
       
    1:             def __and__(self, val):
    1:                 output.append("__and__ called")
    1:             def __rand__(self, val):
    1:                 output.append("__rand__ called")
    1:             def __iand__(self, val):
    1:                 output.append("__iand__ called")
    1:                 return self
       
    1:             def __xor__(self, val):
    1:                 output.append("__xor__ called")
    1:             def __rxor__(self, val):
    1:                 output.append("__rxor__ called")
    1:             def __ixor__(self, val):
    1:                 output.append("__ixor__ called")
    1:                 return self
       
    1:             def __rshift__(self, val):
    1:                 output.append("__rshift__ called")
    1:             def __rrshift__(self, val):
    1:                 output.append("__rrshift__ called")
    1:             def __irshift__(self, val):
    1:                 output.append("__irshift__ called")
    1:                 return self
       
    1:             def __lshift__(self, val):
    1:                 output.append("__lshift__ called")
    1:             def __rlshift__(self, val):
    1:                 output.append("__rlshift__ called")
    1:             def __ilshift__(self, val):
    1:                 output.append("__ilshift__ called")
    1:                 return self
       
    1:         x = testall()
    1:         x + 1
    1:         1 + x
    1:         x += 1
       
    1:         x - 1
    1:         1 - x
    1:         x -= 1
       
    1:         x * 1
    1:         1 * x
    1:         x *= 1
       
    1:         if 1/2 == 0:
    1:             x / 1
    1:             1 / x
    1:             x /= 1
               else:
                   # True division is in effect, so "/" doesn't map to __div__ etc;
                   # but the canned expected-output file requires that those get called.
>>>>>>             x.__div__(1)
>>>>>>             x.__rdiv__(1)
>>>>>>             x.__idiv__(1)
       
    1:         x // 1
    1:         1 // x
    1:         x //= 1
       
    1:         x % 1
    1:         1 % x
    1:         x %= 1
       
    1:         x ** 1
    1:         1 ** x
    1:         x **= 1
       
    1:         x | 1
    1:         1 | x
    1:         x |= 1
       
    1:         x & 1
    1:         1 & x
    1:         x &= 1
       
    1:         x ^ 1
    1:         1 ^ x
    1:         x ^= 1
       
    1:         x >> 1
    1:         1 >> x
    1:         x >>= 1
       
    1:         x << 1
    1:         1 << x
    1:         x <<= 1
       
    1:         test_self.assertEqual(output, '''\
       __add__ called
       __radd__ called
       __iadd__ called
       __sub__ called
       __rsub__ called
       __isub__ called
       __mul__ called
       __rmul__ called
       __imul__ called
       __div__ called
       __rdiv__ called
       __idiv__ called
       __floordiv__ called
       __rfloordiv__ called
       __ifloordiv__ called
       __mod__ called
       __rmod__ called
       __imod__ called
       __pow__ called
       __rpow__ called
       __ipow__ called
       __or__ called
       __ror__ called
       __ior__ called
       __and__ called
       __rand__ called
       __iand__ called
       __xor__ called
       __rxor__ called
       __ixor__ called
       __rshift__ called
       __rrshift__ called
       __irshift__ called
       __lshift__ called
       __rlshift__ called
       __ilshift__ called
    1: '''.splitlines())
       
    1: def test_main():
    1:     with check_py3k_warnings(("classic int division", DeprecationWarning)):
    1:         run_unittest(AugAssignTest)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
