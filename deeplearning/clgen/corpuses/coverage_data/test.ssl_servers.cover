    3: import os
    3: import sys
    3: import ssl
    3: import pprint
    3: import urllib
    3: import urlparse
       # Rename HTTPServer to _HTTPServer so as to avoid confusion with HTTPSServer.
    3: from BaseHTTPServer import HTTPServer as _HTTPServer, BaseHTTPRequestHandler
    3: from SimpleHTTPServer import SimpleHTTPRequestHandler
       
    3: from test import test_support as support
    3: threading = support.import_module("threading")
       
    3: here = os.path.dirname(__file__)
       
    3: HOST = support.HOST
    3: CERTFILE = os.path.join(here, 'keycert.pem')
       
       # This one's based on HTTPServer, which is based on SocketServer
       
    6: class HTTPSServer(_HTTPServer):
       
    3:     def __init__(self, server_address, handler_class, context):
    9:         _HTTPServer.__init__(self, server_address, handler_class)
    9:         self.context = context
       
    3:     def __str__(self):
>>>>>>         return ('<%s %s:%s>' %
>>>>>>                 (self.__class__.__name__,
>>>>>>                  self.server_name,
>>>>>>                  self.server_port))
       
    3:     def get_request(self):
               # override this to wrap socket with SSL
   11:         try:
   11:             sock, addr = self.socket.accept()
   11:             sslconn = self.context.wrap_socket(sock, server_side=True)
    3:         except OSError as e:
                   # socket errors are silenced by the caller, print them here
>>>>>>             if support.verbose:
>>>>>>                 sys.stderr.write("Got an error:\n%s\n" % e)
>>>>>>             raise
    8:         return sslconn, addr
       
    6: class RootedHTTPRequestHandler(SimpleHTTPRequestHandler):
           # need to override translate_path to get a known root,
           # instead of using os.curdir, since the test could be
           # run from anywhere
       
    3:     server_version = "TestHTTPS/1.0"
    3:     root = here
           # Avoid hanging when a request gets interrupted by the client
    3:     timeout = 5
       
    3:     def translate_path(self, path):
               """Translate a /-separated PATH to the local filename syntax.
       
               Components that mean special things to the local file system
               (e.g. drive or directory names) are ignored.  (XXX They should
               probably be diagnosed.)
       
               """
               # abandon query parameters
    3:         path = urlparse.urlparse(path)[2]
    3:         path = os.path.normpath(urllib.unquote(path))
    3:         words = path.split('/')
    3:         words = filter(None, words)
    3:         path = self.root
    6:         for word in words:
    3:             drive, word = os.path.splitdrive(word)
    3:             head, word = os.path.split(word)
    3:             path = os.path.join(path, word)
    3:         return path
       
    3:     def log_message(self, format, *args):
               # we override this to suppress logging unless "verbose"
    5:         if support.verbose:
>>>>>>             sys.stdout.write(" server (%s:%d %s):\n   [%s] %s\n" %
>>>>>>                              (self.server.server_address,
>>>>>>                               self.server.server_port,
>>>>>>                               self.request.cipher(),
>>>>>>                               self.log_date_time_string(),
>>>>>>                               format%args))
       
       
    6: class StatsRequestHandler(BaseHTTPRequestHandler):
           """Example HTTP request handler which returns SSL statistics on GET
           requests.
    3:     """
       
    3:     server_version = "StatsHTTPS/1.0"
       
    3:     def do_GET(self, send_body=True):
               """Serve a GET request."""
>>>>>>         sock = self.rfile.raw._sock
>>>>>>         context = sock.context
>>>>>>         stats = {
>>>>>>             'session_cache': context.session_stats(),
>>>>>>             'cipher': sock.cipher(),
>>>>>>             'compression': sock.compression(),
                   }
>>>>>>         body = pprint.pformat(stats)
>>>>>>         body = body.encode('utf-8')
>>>>>>         self.send_response(200)
>>>>>>         self.send_header("Content-type", "text/plain; charset=utf-8")
>>>>>>         self.send_header("Content-Length", str(len(body)))
>>>>>>         self.end_headers()
>>>>>>         if send_body:
>>>>>>             self.wfile.write(body)
       
    3:     def do_HEAD(self):
               """Serve a HEAD request."""
>>>>>>         self.do_GET(send_body=False)
       
    3:     def log_request(self, format, *args):
>>>>>>         if support.verbose:
>>>>>>             BaseHTTPRequestHandler.log_request(self, format, *args)
       
       
    6: class HTTPSServerThread(threading.Thread):
       
    3:     def __init__(self, context, host=HOST, handler_class=None):
    9:         self.flag = None
    9:         self.server = HTTPSServer((host, 0),
    9:                                   handler_class or RootedHTTPRequestHandler,
    9:                                   context)
    9:         self.port = self.server.server_port
    9:         threading.Thread.__init__(self)
    9:         self.daemon = True
       
    3:     def __str__(self):
>>>>>>         return "<%s %s>" % (self.__class__.__name__, self.server)
       
    3:     def start(self, flag=None):
    9:         self.flag = flag
    9:         threading.Thread.start(self)
       
    3:     def run(self):
    9:         if self.flag:
    9:             self.flag.set()
    9:         try:
    9:             self.server.serve_forever(0.05)
               finally:
    9:             self.server.server_close()
       
    3:     def stop(self):
    9:         self.server.shutdown()
       
       
    3: def make_https_server(case, context=None, certfile=CERTFILE,
    3:                       host=HOST, handler_class=None):
    9:     if context is None:
    8:         context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
           # We assume the certfile contains both private key and certificate
    9:     context.load_cert_chain(certfile)
    9:     server = HTTPSServerThread(context, host, handler_class)
    9:     flag = threading.Event()
    9:     server.start(flag)
    9:     flag.wait()
    9:     def cleanup():
    9:         if support.verbose:
>>>>>>             sys.stdout.write('stopping HTTPS server\n')
    9:         server.stop()
    9:         if support.verbose:
>>>>>>             sys.stdout.write('joining HTTPS thread\n')
    9:         server.join()
    9:     case.addCleanup(cleanup)
    9:     return server
       
       
    3: if __name__ == "__main__":
>>>>>>     import argparse
>>>>>>     parser = argparse.ArgumentParser(
>>>>>>         description='Run a test HTTPS server. '
                           'By default, the current directory is served.')
>>>>>>     parser.add_argument('-p', '--port', type=int, default=4433,
>>>>>>                         help='port to listen on (default: %(default)s)')
>>>>>>     parser.add_argument('-q', '--quiet', dest='verbose', default=True,
>>>>>>                         action='store_false', help='be less verbose')
>>>>>>     parser.add_argument('-s', '--stats', dest='use_stats_handler', default=False,
>>>>>>                         action='store_true', help='always return stats page')
>>>>>>     parser.add_argument('--curve-name', dest='curve_name', type=str,
>>>>>>                         action='store',
>>>>>>                         help='curve name for EC-based Diffie-Hellman')
>>>>>>     parser.add_argument('--ciphers', dest='ciphers', type=str,
>>>>>>                         help='allowed cipher list')
>>>>>>     parser.add_argument('--dh', dest='dh_file', type=str, action='store',
>>>>>>                         help='PEM file containing DH parameters')
>>>>>>     args = parser.parse_args()
       
>>>>>>     support.verbose = args.verbose
>>>>>>     if args.use_stats_handler:
>>>>>>         handler_class = StatsRequestHandler
           else:
>>>>>>         handler_class = RootedHTTPRequestHandler
>>>>>>         handler_class.root = os.getcwd()
>>>>>>     context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
>>>>>>     context.load_cert_chain(CERTFILE)
>>>>>>     if args.curve_name:
>>>>>>         context.set_ecdh_curve(args.curve_name)
>>>>>>     if args.dh_file:
>>>>>>         context.load_dh_params(args.dh_file)
>>>>>>     if args.ciphers:
>>>>>>         context.set_ciphers(args.ciphers)
       
>>>>>>     server = HTTPSServer(("", args.port), handler_class, context)
>>>>>>     if args.verbose:
>>>>>>         print("Listening on https://localhost:{0.port}".format(args))
>>>>>>     server.serve_forever(0.1)
