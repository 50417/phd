       """distutils.command.build
       
    1: Implements the Distutils 'build' command."""
       
    1: __revision__ = "$Id$"
       
    1: import sys, os
       
    1: from distutils.util import get_platform
    1: from distutils.core import Command
    1: from distutils.errors import DistutilsOptionError
       
    1: def show_compilers():
>>>>>>     from distutils.ccompiler import show_compilers
>>>>>>     show_compilers()
       
    2: class build(Command):
       
    1:     description = "build everything needed to install"
       
           user_options = [
               ('build-base=', 'b',
    1:          "base directory for build library"),
               ('build-purelib=', None,
    1:          "build directory for platform-neutral distributions"),
               ('build-platlib=', None,
    1:          "build directory for platform-specific distributions"),
    1:         ('build-lib=', None,
    1:          "build directory for all distribution (defaults to either " +
    1:          "build-purelib or build-platlib"),
               ('build-scripts=', None,
    1:          "build directory for scripts"),
               ('build-temp=', 't',
    1:          "temporary build directory"),
    1:         ('plat-name=', 'p',
    1:          "platform name to build for, if supported "
    1:          "(default: %s)" % get_platform()),
               ('compiler=', 'c',
    1:          "specify the compiler type"),
               ('debug', 'g',
    1:          "compile extensions and libraries with debugging information"),
               ('force', 'f',
    1:          "forcibly build everything (ignore file timestamps)"),
               ('executable=', 'e',
    1:          "specify final destination interpreter path (build.py)"),
               ]
       
    1:     boolean_options = ['debug', 'force']
       
           help_options = [
    1:         ('help-compiler', None,
    1:          "list available compilers", show_compilers),
               ]
       
    1:     def initialize_options(self):
   44:         self.build_base = 'build'
               # these are decided only after 'build_base' has its final value
               # (unless overridden by the user or client)
   44:         self.build_purelib = None
   44:         self.build_platlib = None
   44:         self.build_lib = None
   44:         self.build_temp = None
   44:         self.build_scripts = None
   44:         self.compiler = None
   44:         self.plat_name = None
   44:         self.debug = None
   44:         self.force = 0
   44:         self.executable = None
       
    1:     def finalize_options(self):
   44:         if self.plat_name is None:
   44:             self.plat_name = get_platform()
               else:
                   # plat-name only supported for windows (other platforms are
                   # supported via ./configure flags, if at all).  Avoid misleading
                   # other platforms.
>>>>>>             if os.name != 'nt':
>>>>>>                 raise DistutilsOptionError(
>>>>>>                             "--plat-name only supported on Windows (try "
                                   "using './configure --help' on your platform)")
       
   44:         plat_specifier = ".%s-%s" % (self.plat_name, sys.version[0:3])
       
               # Make it so Python 2.x and Python 2.x with --with-pydebug don't
               # share the same build directories. Doing so confuses the build
               # process for C modules
   44:         if hasattr(sys, 'gettotalrefcount'):
>>>>>>             plat_specifier += '-pydebug'
       
               # 'build_purelib' and 'build_platlib' just default to 'lib' and
               # 'lib.<plat>' under the base build directory.  We only use one of
               # them for a given distribution, though --
   44:         if self.build_purelib is None:
   44:             self.build_purelib = os.path.join(self.build_base, 'lib')
   44:         if self.build_platlib is None:
   44:             self.build_platlib = os.path.join(self.build_base,
   44:                                               'lib' + plat_specifier)
       
               # 'build_lib' is the actual directory that we will use for this
               # particular module distribution -- if user didn't supply it, pick
               # one of 'build_purelib' or 'build_platlib'.
   44:         if self.build_lib is None:
   44:             if self.distribution.ext_modules:
   11:                 self.build_lib = self.build_platlib
                   else:
   33:                 self.build_lib = self.build_purelib
       
               # 'build_temp' -- temporary directory for compiler turds,
               # "build/temp.<plat>"
   44:         if self.build_temp is None:
   44:             self.build_temp = os.path.join(self.build_base,
   44:                                            'temp' + plat_specifier)
   44:         if self.build_scripts is None:
   44:             self.build_scripts = os.path.join(self.build_base,
   44:                                               'scripts-' + sys.version[0:3])
       
   44:         if self.executable is None:
   44:             self.executable = os.path.normpath(sys.executable)
       
    1:     def run(self):
               # Run all relevant sub-commands.  This will be some subset of:
               #  - build_py      - pure Python modules
               #  - build_clib    - standalone C libraries
               #  - build_ext     - Python extensions
               #  - build_scripts - (Python) scripts
   13:         for cmd_name in self.get_sub_commands():
    8:             self.run_command(cmd_name)
       
           # -- Predicates for the sub-command list ---------------------------
       
    1:     def has_pure_modules (self):
    6:         return self.distribution.has_pure_modules()
       
    1:     def has_c_libraries (self):
    6:         return self.distribution.has_c_libraries()
       
    1:     def has_ext_modules (self):
    6:         return self.distribution.has_ext_modules()
       
    1:     def has_scripts (self):
    6:         return self.distribution.has_scripts()
       
    1:     sub_commands = [('build_py',      has_pure_modules),
    1:                     ('build_clib',    has_c_libraries),
    1:                     ('build_ext',     has_ext_modules),
    1:                     ('build_scripts', has_scripts),
                          ]
