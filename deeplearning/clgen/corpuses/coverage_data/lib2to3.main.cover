       """
       Main program for 2to3.
    1: """
       
    1: from __future__ import with_statement
       
    1: import sys
    1: import os
    1: import difflib
    1: import logging
    1: import shutil
    1: import optparse
       
    1: from . import refactor
       
       
    1: def diff_texts(a, b, filename):
           """Return a unified diff of two strings."""
    1:     a = a.splitlines()
    1:     b = b.splitlines()
    1:     return difflib.unified_diff(a, b, filename, filename,
    1:                                 "(original)", "(refactored)",
    1:                                 lineterm="")
       
       
    2: class StdoutRefactoringTool(refactor.MultiprocessRefactoringTool):
           """
           A refactoring tool that can avoid overwriting its input files.
           Prints output to stdout.
       
           Output files can optionally be written to a different directory and or
           have an extra file suffix appended to their name for use in situations
           where you do not want to replace the input files.
    1:     """
       
           def __init__(self, fixers, options, explicit, nobackups, show_diffs,
    1:                  input_base_dir='', output_dir='', append_suffix=''):
               """
               Args:
                   fixers: A list of fixers to import.
                   options: A dict with RefactoringTool configuration.
                   explicit: A list of fixers to run even if they are explicit.
                   nobackups: If true no backup '.bak' files will be created for those
                       files that are being refactored.
                   show_diffs: Should diffs of the refactoring be printed to stdout?
                   input_base_dir: The base directory for all input files.  This class
                       will strip this path prefix off of filenames before substituting
                       it with output_dir.  Only meaningful if output_dir is supplied.
                       All files processed by refactor() must start with this path.
                   output_dir: If supplied, all converted files will be written into
                       this directory tree instead of input_base_dir.
                   append_suffix: If supplied, all files output by this tool will have
                       this appended to their filename.  Useful for changing .py to
                       .py3 for example by passing append_suffix='3'.
               """
    4:         self.nobackups = nobackups
    4:         self.show_diffs = show_diffs
    4:         if input_base_dir and not input_base_dir.endswith(os.sep):
    3:             input_base_dir += os.sep
    4:         self._input_base_dir = input_base_dir
    4:         self._output_dir = output_dir
    4:         self._append_suffix = append_suffix
    4:         super(StdoutRefactoringTool, self).__init__(fixers, options, explicit)
       
    1:     def log_error(self, msg, *args, **kwargs):
>>>>>>         self.errors.append((msg, args, kwargs))
>>>>>>         self.logger.error(msg, *args, **kwargs)
       
    1:     def write_file(self, new_text, filename, old_text, encoding):
    6:         orig_filename = filename
    6:         if self._output_dir:
    6:             if filename.startswith(self._input_base_dir):
    6:                 filename = os.path.join(self._output_dir,
    6:                                         filename[len(self._input_base_dir):])
                   else:
>>>>>>                 raise ValueError('filename %s does not start with the '
                                        'input_base_dir %s' % (
>>>>>>                                          filename, self._input_base_dir))
    6:         if self._append_suffix:
    3:             filename += self._append_suffix
    6:         if orig_filename != filename:
    6:             output_dir = os.path.dirname(filename)
    6:             if not os.path.isdir(output_dir):
>>>>>>                 os.makedirs(output_dir)
    6:             self.log_message('Writing converted %s to %s.', orig_filename,
    6:                              filename)
    6:         if not self.nobackups:
                   # Make backup
>>>>>>             backup = filename + ".bak"
>>>>>>             if os.path.lexists(backup):
>>>>>>                 try:
>>>>>>                     os.remove(backup)
>>>>>>                 except os.error, err:
>>>>>>                     self.log_message("Can't remove backup %s", backup)
>>>>>>             try:
>>>>>>                 os.rename(filename, backup)
>>>>>>             except os.error, err:
>>>>>>                 self.log_message("Can't rename %s to %s", filename, backup)
               # Actually write the new file
    6:         write = super(StdoutRefactoringTool, self).write_file
    6:         write(new_text, filename, old_text, encoding)
    6:         if not self.nobackups:
>>>>>>             shutil.copymode(backup, filename)
    6:         if orig_filename != filename:
                   # Preserve the file mode in the new output directory.
    6:             shutil.copymode(orig_filename, filename)
       
    1:     def print_output(self, old, new, filename, equal):
    7:         if equal:
    2:             self.log_message("No changes to %s", filename)
               else:
    5:             self.log_message("Refactored %s", filename)
    5:             if self.show_diffs:
    1:                 diff_lines = diff_texts(old, new, filename)
    1:                 try:
    1:                     if self.output_lock is not None:
>>>>>>                         with self.output_lock:
>>>>>>                             for line in diff_lines:
>>>>>>                                 print line
>>>>>>                             sys.stdout.flush()
                           else:
    5:                         for line in diff_lines:
    5:                             print line
    1:                 except UnicodeEncodeError:
    1:                     warn("couldn't encode %s's diff for your terminal" %
    1:                          (filename,))
    1:                     return
       
       
    1: def warn(msg):
    2:     print >> sys.stderr, "WARNING: %s" % (msg,)
       
       
    1: def main(fixer_pkg, args=None):
           """Main program.
       
           Args:
               fixer_pkg: the name of a package where the fixers are located.
               args: optional; a list of command line arguments. If omitted,
                     sys.argv[1:] is used.
       
           Returns a suggested exit status (0, 1, 2).
           """
           # Set up option parser
    4:     parser = optparse.OptionParser(usage="2to3 [options] file|dir ...")
    4:     parser.add_option("-d", "--doctests_only", action="store_true",
    4:                       help="Fix up doctests only")
    4:     parser.add_option("-f", "--fix", action="append", default=[],
    4:                       help="Each FIX specifies a transformation; default: all")
    4:     parser.add_option("-j", "--processes", action="store", default=1,
    4:                       type="int", help="Run 2to3 concurrently")
    4:     parser.add_option("-x", "--nofix", action="append", default=[],
    4:                       help="Prevent a transformation from being run")
    4:     parser.add_option("-l", "--list-fixes", action="store_true",
    4:                       help="List available transformations")
    4:     parser.add_option("-p", "--print-function", action="store_true",
    4:                       help="Modify the grammar so that print() is a function")
    4:     parser.add_option("-v", "--verbose", action="store_true",
    4:                       help="More verbose logging")
    4:     parser.add_option("--no-diffs", action="store_true",
    4:                       help="Don't show diffs of the refactoring")
    4:     parser.add_option("-w", "--write", action="store_true",
    4:                       help="Write back modified files")
    4:     parser.add_option("-n", "--nobackups", action="store_true", default=False,
    4:                       help="Don't write backups for modified files")
    4:     parser.add_option("-o", "--output-dir", action="store", type="str",
    4:                       default="", help="Put output files in this directory "
                             "instead of overwriting the input files.  Requires -n.")
    4:     parser.add_option("-W", "--write-unchanged-files", action="store_true",
    4:                       help="Also write files even if no changes were required"
                             " (useful with --output-dir); implies -w.")
    4:     parser.add_option("--add-suffix", action="store", type="str", default="",
    4:                       help="Append this string to all output filenames."
                             " Requires -n if non-empty.  "
                             "ex: --add-suffix='3' will generate .py3 files.")
       
           # Parse command line arguments
    4:     refactor_stdin = False
    4:     flags = {}
    4:     options, args = parser.parse_args(args)
    4:     if options.write_unchanged_files:
    2:         flags["write_unchanged_files"] = True
    2:         if not options.write:
    1:             warn("--write-unchanged-files/-W implies -w.")
    2:         options.write = True
           # If we allowed these, the original files would be renamed to backup names
           # but not replaced.
    4:     if options.output_dir and not options.nobackups:
>>>>>>         parser.error("Can't use --output-dir/-o without -n.")
    4:     if options.add_suffix and not options.nobackups:
>>>>>>         parser.error("Can't use --add-suffix without -n.")
       
    4:     if not options.write and options.no_diffs:
>>>>>>         warn("not writing files and not printing diffs; that's not very useful")
    4:     if not options.write and options.nobackups:
>>>>>>         parser.error("Can't use -n without -w")
    4:     if options.list_fixes:
>>>>>>         print "Available transformations for the -f/--fix option:"
>>>>>>         for fixname in refactor.get_all_fix_names(fixer_pkg):
>>>>>>             print fixname
>>>>>>         if not args:
>>>>>>             return 0
    4:     if not args:
>>>>>>         print >> sys.stderr, "At least one file or directory argument required."
>>>>>>         print >> sys.stderr, "Use --help to show usage."
>>>>>>         return 2
    4:     if "-" in args:
    1:         refactor_stdin = True
    1:         if options.write:
>>>>>>             print >> sys.stderr, "Can't write to stdin."
>>>>>>             return 2
    4:     if options.print_function:
>>>>>>         flags["print_function"] = True
       
           # Set up logging handler
    4:     level = logging.DEBUG if options.verbose else logging.INFO
    4:     logging.basicConfig(format='%(name)s: %(message)s', level=level)
    4:     logger = logging.getLogger('lib2to3.main')
       
           # Initialize the refactoring tool
    4:     avail_fixes = set(refactor.get_fixers_from_package(fixer_pkg))
    8:     unwanted_fixes = set(fixer_pkg + ".fix_" + fix for fix in options.nofix)
    4:     explicit = set()
    4:     if options.fix:
>>>>>>         all_present = False
>>>>>>         for fix in options.fix:
>>>>>>             if fix == "all":
>>>>>>                 all_present = True
                   else:
>>>>>>                 explicit.add(fixer_pkg + ".fix_" + fix)
>>>>>>         requested = avail_fixes.union(explicit) if all_present else explicit
           else:
    4:         requested = avail_fixes.union(explicit)
    4:     fixer_names = requested.difference(unwanted_fixes)
    4:     input_base_dir = os.path.commonprefix(args)
    4:     if (input_base_dir and not input_base_dir.endswith(os.sep)
    3:         and not os.path.isdir(input_base_dir)):
               # One or more similar names were passed, their directory is the base.
               # os.path.commonprefix() is ignorant of path elements, this corrects
               # for that weird API.
    2:         input_base_dir = os.path.dirname(input_base_dir)
    4:     if options.output_dir:
    3:         input_base_dir = input_base_dir.rstrip(os.sep)
    3:         logger.info('Output in %r will mirror the input directory %r layout.',
    3:                     options.output_dir, input_base_dir)
    4:     rt = StdoutRefactoringTool(
    4:             sorted(fixer_names), flags, sorted(explicit),
    4:             options.nobackups, not options.no_diffs,
    4:             input_base_dir=input_base_dir,
    4:             output_dir=options.output_dir,
    4:             append_suffix=options.add_suffix)
       
           # Refactor all files and directories passed as arguments
    4:     if not rt.errors:
    4:         if refactor_stdin:
    1:             rt.refactor_stdin()
               else:
    3:             try:
    3:                 rt.refactor(args, options.write, options.doctests_only,
    3:                             options.processes)
>>>>>>             except refactor.MultiprocessingUnsupported:
>>>>>>                 assert options.processes > 1
>>>>>>                 print >> sys.stderr, "Sorry, -j isn't " \
                           "supported on this platform."
>>>>>>                 return 1
    4:         rt.summarize()
       
           # Return error status (0 if rt.errors is zero)
    4:     return int(bool(rt.errors))
