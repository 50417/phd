    1: from __future__ import print_function
    1: import os
    1: import fnmatch
    1: import re  # for htest
    1: import sys
    1: from Tkinter import StringVar, BooleanVar, Checkbutton  # for GrepDialog
    1: from Tkinter import Tk, Text, Button, SEL, END  # for htest
    1: from idlelib import SearchEngine
    1: from idlelib.SearchDialogBase import SearchDialogBase
       # Importing OutputWindow fails due to import loop
       # EditorWindow -> GrepDialop -> OutputWindow -> EditorWindow
       
    1: def grep(text, io=None, flist=None):
>>>>>>     root = text._root()
>>>>>>     engine = SearchEngine.get(root)
>>>>>>     if not hasattr(engine, "_grepdialog"):
>>>>>>         engine._grepdialog = GrepDialog(root, engine, flist)
>>>>>>     dialog = engine._grepdialog
>>>>>>     searchphrase = text.get("sel.first", "sel.last")
>>>>>>     dialog.open(text, searchphrase, io)
       
    2: class GrepDialog(SearchDialogBase):
       
    1:     title = "Find in Files Dialog"
    1:     icon = "Grep"
    1:     needwrapbutton = 0
       
    1:     def __init__(self, root, engine, flist):
>>>>>>         SearchDialogBase.__init__(self, root, engine)
>>>>>>         self.flist = flist
>>>>>>         self.globvar = StringVar(root)
>>>>>>         self.recvar = BooleanVar(root)
       
    1:     def open(self, text, searchphrase, io=None):
>>>>>>         SearchDialogBase.open(self, text, searchphrase)
>>>>>>         if io:
>>>>>>             path = io.filename or ""
               else:
>>>>>>             path = ""
>>>>>>         dir, base = os.path.split(path)
>>>>>>         head, tail = os.path.splitext(base)
>>>>>>         if not tail:
>>>>>>             tail = ".py"
>>>>>>         self.globvar.set(os.path.join(dir, "*" + tail))
       
    1:     def create_entries(self):
>>>>>>         SearchDialogBase.create_entries(self)
>>>>>>         self.globent = self.make_entry("In files:", self.globvar)[0]
       
    1:     def create_other_buttons(self):
>>>>>>         f = self.make_frame()[0]
       
>>>>>>         btn = Checkbutton(f, anchor="w",
>>>>>>                 variable=self.recvar,
>>>>>>                 text="Recurse down subdirectories")
>>>>>>         btn.pack(side="top", fill="both")
>>>>>>         btn.select()
       
    1:     def create_command_buttons(self):
>>>>>>         SearchDialogBase.create_command_buttons(self)
>>>>>>         self.make_button("Search Files", self.default_command, 1)
       
    1:     def default_command(self, event=None):
>>>>>>         prog = self.engine.getprog()
>>>>>>         if not prog:
>>>>>>             return
>>>>>>         path = self.globvar.get()
>>>>>>         if not path:
>>>>>>             self.top.bell()
>>>>>>             return
>>>>>>         from idlelib.OutputWindow import OutputWindow  # leave here!
>>>>>>         save = sys.stdout
>>>>>>         try:
>>>>>>             sys.stdout = OutputWindow(self.flist)
>>>>>>             self.grep_it(prog, path)
               finally:
>>>>>>             sys.stdout = save
       
    1:     def grep_it(self, prog, path):
    2:         dir, base = os.path.split(path)
    2:         list = self.findfiles(dir, base, self.recvar.get())
    2:         list.sort()
    2:         self.close()
    2:         pat = self.engine.getpat()
    2:         print("Searching %r in %s ..." % (pat, path))
    2:         hits = 0
    2:         try:
    4:             for fn in list:
    2:                 try:
    2:                     with open(fn) as f:
  166:                         for lineno, line in enumerate(f, 1):
  164:                             if line[-1:] == '\n':
  164:                                 line = line[:-1]
  164:                             if prog.search(line):
    2:                                 sys.stdout.write("%s: %s: %s\n" %
    2:                                                  (fn, lineno, line))
    2:                                 hits += 1
>>>>>>                 except IOError as msg:
>>>>>>                     print(msg)
    2:             print(("Hits found: %s\n"
                         "(Hint: right-click to open locations.)"
    2:                   % hits) if hits else "No hits.")
>>>>>>         except AttributeError:
                   # Tk window has been closed, OutputWindow.text = None,
                   # so in OW.write, OW.text.insert fails.
>>>>>>             pass
       
    1:     def findfiles(self, dir, base, rec):
    2:         try:
    2:             names = os.listdir(dir or os.curdir)
>>>>>>         except os.error as msg:
>>>>>>             print(msg)
>>>>>>             return []
    2:         list = []
    2:         subdirs = []
  160:         for name in names:
  158:             fn = os.path.join(dir, name)
  158:             if os.path.isdir(fn):
>>>>>>                 subdirs.append(fn)
                   else:
  158:                 if fnmatch.fnmatch(name, base):
    2:                     list.append(fn)
    2:         if rec:
>>>>>>             for subdir in subdirs:
>>>>>>                 list.extend(self.findfiles(subdir, base, rec))
    2:         return list
       
    1:     def close(self, event=None):
>>>>>>         if self.top:
>>>>>>             self.top.grab_release()
>>>>>>             self.top.withdraw()
       
       
    1: def _grep_dialog(parent):  # htest #
>>>>>>     from idlelib.PyShell import PyShellFileList
>>>>>>     root = Tk()
>>>>>>     root.title("Test GrepDialog")
>>>>>>     width, height, x, y = list(map(int, re.split('[x+]', parent.geometry())))
>>>>>>     root.geometry("+%d+%d"%(x, y + 150))
       
>>>>>>     flist = PyShellFileList(root)
>>>>>>     text = Text(root, height=5)
>>>>>>     text.pack()
       
>>>>>>     def show_grep_dialog():
>>>>>>         text.tag_add(SEL, "1.0", END)
>>>>>>         grep(text, flist=flist)
>>>>>>         text.tag_remove(SEL, "1.0", END)
       
>>>>>>     button = Button(root, text="Show GrepDialog", command=show_grep_dialog)
>>>>>>     button.pack()
>>>>>>     root.mainloop()
       
    1: if __name__ == "__main__":
>>>>>>     import unittest
>>>>>>     unittest.main('idlelib.idle_test.test_grep', verbosity=2, exit=False)
       
>>>>>>     from idlelib.idle_test.htest import run
>>>>>>     run(_grep_dialog)
