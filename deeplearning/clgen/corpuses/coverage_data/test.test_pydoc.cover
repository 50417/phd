    1: import os
    1: import sys
    1: import difflib
    1: import __builtin__
    1: import re
    1: import py_compile
    1: import pydoc
    1: import contextlib
    1: import inspect
    1: import keyword
    1: import pkgutil
    1: import unittest
    1: import xml.etree
    1: import types
    1: import test.test_support
    1: import xml.etree.ElementTree
    1: from collections import namedtuple
    1: from test.script_helper import assert_python_ok
    1: from test.test_support import (TESTFN, rmtree, reap_children, captured_stdout,
                                      captured_stderr, requires_docstrings)
       
    1: from test import pydoc_mod
       
    1: if test.test_support.HAVE_DOCSTRINGS:
           expected_data_docstrings = (
               'dictionary for instance variables (if defined)',
    1:         'list of weak references to the object (if defined)',
               )
       else:
>>>>>>     expected_data_docstrings = ('', '')
       
       expected_text_pattern = \
       """
       NAME
           test.pydoc_mod - This is a test module for test_pydoc
       
       FILE
           %s
       %s
       CLASSES
           __builtin__.object
               B
               C
           A
       \x20\x20\x20\x20
           class A
            |  Hello and goodbye
            |\x20\x20
            |  Methods defined here:
            |\x20\x20
            |  __init__()
            |      Wow, I have no function!
       \x20\x20\x20\x20
           class B(__builtin__.object)
            |  Data descriptors defined here:
            |\x20\x20
            |  __dict__%s
            |\x20\x20
            |  __weakref__%s
            |\x20\x20
            |  ----------------------------------------------------------------------
            |  Data and other attributes defined here:
            |\x20\x20
            |  NO_MEANING = 'eggs'
       \x20\x20\x20\x20
           class C(__builtin__.object)
            |  Methods defined here:
            |\x20\x20
            |  get_answer(self)
            |      Return say_no()
            |\x20\x20
            |  is_it_true(self)
            |      Return self.get_answer()
            |\x20\x20
            |  say_no(self)
            |\x20\x20
            |  ----------------------------------------------------------------------
            |  Data descriptors defined here:
            |\x20\x20
            |  __dict__
            |      dictionary for instance variables (if defined)
            |\x20\x20
            |  __weakref__
            |      list of weak references to the object (if defined)
       
       FUNCTIONS
           doc_func()
               This function solves all of the world's problems:
               hunger
               lack of Python
               war
       \x20\x20\x20\x20
           nodoc_func()
       
       DATA
           __author__ = 'Benjamin Peterson'
           __credits__ = 'Nobody'
           __version__ = '1.2.3.4'
       
       VERSION
           1.2.3.4
       
       AUTHOR
           Benjamin Peterson
       
       CREDITS
           Nobody
    1: """.strip()
       
    4: expected_text_data_docstrings = tuple('\n     |      ' + s if s else ''
    3:                                       for s in expected_data_docstrings)
       
       expected_html_pattern = \
       """
       <table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="heading">
       <tr bgcolor="#7799ee">
       <td valign=bottom>&nbsp;<br>
       <font color="#ffffff" face="helvetica, arial">&nbsp;<br><big><big><strong><a href="test.html"><font color="#ffffff">test</font></a>.pydoc_mod</strong></big></big> (version 1.2.3.4)</font></td
       ><td align=right valign=bottom
       ><font color="#ffffff" face="helvetica, arial"><a href=".">index</a><br><a href="file:%s">%s</a>%s</font></td></tr></table>
           <p><tt>This&nbsp;is&nbsp;a&nbsp;test&nbsp;module&nbsp;for&nbsp;test_pydoc</tt></p>
       <p>
       <table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">
       <tr bgcolor="#ee77aa">
       <td colspan=3 valign=bottom>&nbsp;<br>
       <font color="#ffffff" face="helvetica, arial"><big><strong>Classes</strong></big></font></td></tr>
       \x20\x20\x20\x20
       <tr><td bgcolor="#ee77aa"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
       <td width="100%%"><dl>
       <dt><font face="helvetica, arial"><a href="__builtin__.html#object">__builtin__.object</a>
       </font></dt><dd>
       <dl>
       <dt><font face="helvetica, arial"><a href="test.pydoc_mod.html#B">B</a>
       </font></dt><dt><font face="helvetica, arial"><a href="test.pydoc_mod.html#C">C</a>
       </font></dt></dl>
       </dd>
       <dt><font face="helvetica, arial"><a href="test.pydoc_mod.html#A">A</a>
       </font></dt></dl>
        <p>
       <table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">
       <tr bgcolor="#ffc8d8">
       <td colspan=3 valign=bottom>&nbsp;<br>
       <font color="#000000" face="helvetica, arial"><a name="A">class <strong>A</strong></a></font></td></tr>
       \x20\x20\x20\x20
       <tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
       <td colspan=2><tt>Hello&nbsp;and&nbsp;goodbye<br>&nbsp;</tt></td></tr>
       <tr><td>&nbsp;</td>
       <td width="100%%">Methods defined here:<br>
       <dl><dt><a name="A-__init__"><strong>__init__</strong></a>()</dt><dd><tt>Wow,&nbsp;I&nbsp;have&nbsp;no&nbsp;function!</tt></dd></dl>
       
       </td></tr></table> <p>
       <table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">
       <tr bgcolor="#ffc8d8">
       <td colspan=3 valign=bottom>&nbsp;<br>
       <font color="#000000" face="helvetica, arial"><a name="B">class <strong>B</strong></a>(<a href="__builtin__.html#object">__builtin__.object</a>)</font></td></tr>
       \x20\x20\x20\x20
       <tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
       <td width="100%%">Data descriptors defined here:<br>
       <dl><dt><strong>__dict__</strong></dt>
       <dd><tt>%s</tt></dd>
       </dl>
       <dl><dt><strong>__weakref__</strong></dt>
       <dd><tt>%s</tt></dd>
       </dl>
       <hr>
       Data and other attributes defined here:<br>
       <dl><dt><strong>NO_MEANING</strong> = 'eggs'</dl>
       
       </td></tr></table> <p>
       <table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">
       <tr bgcolor="#ffc8d8">
       <td colspan=3 valign=bottom>&nbsp;<br>
       <font color="#000000" face="helvetica, arial"><a name="C">class <strong>C</strong></a>(<a href="__builtin__.html#object">__builtin__.object</a>)</font></td></tr>
       \x20\x20\x20\x20
       <tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
       <td width="100%%">Methods defined here:<br>
       <dl><dt><a name="C-get_answer"><strong>get_answer</strong></a>(self)</dt><dd><tt>Return&nbsp;<a href="#C-say_no">say_no</a>()</tt></dd></dl>
       
       <dl><dt><a name="C-is_it_true"><strong>is_it_true</strong></a>(self)</dt><dd><tt>Return&nbsp;self.<a href="#C-get_answer">get_answer</a>()</tt></dd></dl>
       
       <dl><dt><a name="C-say_no"><strong>say_no</strong></a>(self)</dt></dl>
       
       <hr>
       Data descriptors defined here:<br>
       <dl><dt><strong>__dict__</strong></dt>
       <dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
       </dl>
       <dl><dt><strong>__weakref__</strong></dt>
       <dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
       </dl>
       </td></tr></table></td></tr></table><p>
       <table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">
       <tr bgcolor="#eeaa77">
       <td colspan=3 valign=bottom>&nbsp;<br>
       <font color="#ffffff" face="helvetica, arial"><big><strong>Functions</strong></big></font></td></tr>
       \x20\x20\x20\x20
       <tr><td bgcolor="#eeaa77"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
       <td width="100%%"><dl><dt><a name="-doc_func"><strong>doc_func</strong></a>()</dt><dd><tt>This&nbsp;function&nbsp;solves&nbsp;all&nbsp;of&nbsp;the&nbsp;world's&nbsp;problems:<br>
       hunger<br>
       lack&nbsp;of&nbsp;Python<br>
       war</tt></dd></dl>
        <dl><dt><a name="-nodoc_func"><strong>nodoc_func</strong></a>()</dt></dl>
       </td></tr></table><p>
       <table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">
       <tr bgcolor="#55aa55">
       <td colspan=3 valign=bottom>&nbsp;<br>
       <font color="#ffffff" face="helvetica, arial"><big><strong>Data</strong></big></font></td></tr>
       \x20\x20\x20\x20
       <tr><td bgcolor="#55aa55"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
       <td width="100%%"><strong>__author__</strong> = 'Benjamin Peterson'<br>
       <strong>__credits__</strong> = 'Nobody'<br>
       <strong>__version__</strong> = '1.2.3.4'</td></tr></table><p>
       <table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">
       <tr bgcolor="#7799ee">
       <td colspan=3 valign=bottom>&nbsp;<br>
       <font color="#ffffff" face="helvetica, arial"><big><strong>Author</strong></big></font></td></tr>
       \x20\x20\x20\x20
       <tr><td bgcolor="#7799ee"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
       <td width="100%%">Benjamin&nbsp;Peterson</td></tr></table><p>
       <table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">
       <tr bgcolor="#7799ee">
       <td colspan=3 valign=bottom>&nbsp;<br>
       <font color="#ffffff" face="helvetica, arial"><big><strong>Credits</strong></big></font></td></tr>
       \x20\x20\x20\x20
       <tr><td bgcolor="#7799ee"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
       <td width="100%%">Nobody</td></tr></table>
    1: """.strip()
       
    4: expected_html_data_docstrings = tuple(s.replace(' ', '&nbsp;')
    3:                                       for s in expected_data_docstrings)
       
       # output pattern for missing module
    1: missing_pattern = "no Python documentation found for '%s'"
       
       # output pattern for module with bad imports
    1: badimport_pattern = "problem in %s - <type 'exceptions.ImportError'>: No module named %s"
       
    1: def run_pydoc(module_name, *args, **env):
           """
           Runs pydoc on the specified module. Returns the stripped
           output of pydoc.
           """
    7:     args = args + (module_name,)
           # do not write bytecode files to avoid caching errors
    7:     rc, out, err = assert_python_ok('-B', pydoc.__file__, *args, **env)
    7:     return out.strip()
       
    1: def get_pydoc_html(module):
           "Returns pydoc generated output as html"
    1:     doc = pydoc.HTMLDoc()
    1:     output = doc.docmodule(module)
    1:     loc = doc.getdocloc(pydoc_mod) or ""
    1:     if loc:
>>>>>>         loc = "<br><a href=\"" + loc + "\">Module Docs</a>"
    1:     return output.strip(), loc
       
    1: def get_pydoc_link(module):
           "Returns a documentation web link of a module"
    1:     dirname = os.path.dirname
    1:     basedir = dirname(dirname(os.path.realpath(__file__)))
    1:     doc = pydoc.TextDoc()
    1:     loc = doc.getdocloc(module, basedir=basedir)
    1:     return loc
       
    1: def get_pydoc_text(module):
           "Returns pydoc generated output as text"
    2:     doc = pydoc.TextDoc()
    2:     loc = doc.getdocloc(pydoc_mod) or ""
    2:     if loc:
>>>>>>         loc = "\nMODULE DOCS\n    " + loc + "\n"
       
    2:     output = doc.docmodule(module)
       
           # cleanup the extra text formatting that pydoc preforms
    2:     patt = re.compile('\b.')
    2:     output = patt.sub('', output)
    2:     return output.strip(), loc
       
    1: def print_diffs(text1, text2):
           "Prints unified diffs for two texts"
>>>>>>     lines1 = text1.splitlines(True)
>>>>>>     lines2 = text2.splitlines(True)
>>>>>>     diffs = difflib.unified_diff(lines1, lines2, n=0, fromfile='expected',
>>>>>>                                  tofile='got')
>>>>>>     print '\n' + ''.join(diffs)
       
       
    2: class PydocBaseTest(unittest.TestCase):
       
    1:     def _restricted_walk_packages(self, walk_packages, path=None):
               """
               A version of pkgutil.walk_packages() that will restrict itself to
               a given path.
               """
    2:         default_path = path or [os.path.dirname(__file__)]
    2:         def wrapper(path=None, prefix='', onerror=None):
    3:             return walk_packages(path or default_path, prefix, onerror)
    2:         return wrapper
       
    1:     @contextlib.contextmanager
    1:     def restrict_walk_packages(self, path=None):
    2:         walk_packages = pkgutil.walk_packages
    2:         pkgutil.walk_packages = self._restricted_walk_packages(walk_packages,
    2:                                                                path)
    2:         try:
    2:             yield
               finally:
    2:             pkgutil.walk_packages = walk_packages
       
       
    2: class PydocDocTest(unittest.TestCase):
       
    1:     @requires_docstrings
    1:     @unittest.skipIf(sys.flags.optimize >= 2,
    1:                      "Docstrings are omitted with -O2 and above")
           def test_html_doc(self):
    1:         result, doc_loc = get_pydoc_html(pydoc_mod)
    1:         mod_file = inspect.getabsfile(pydoc_mod)
    1:         if sys.platform == 'win32':
>>>>>>             import nturl2path
>>>>>>             mod_url = nturl2path.pathname2url(mod_file)
               else:
    1:             mod_url = mod_file
    1:         expected_html = expected_html_pattern % (
    1:                         (mod_url, mod_file, doc_loc) +
    1:                         expected_html_data_docstrings)
    1:         if result != expected_html:
>>>>>>             print_diffs(expected_html, result)
>>>>>>             self.fail("outputs are not equal, see diff above")
       
    1:     @requires_docstrings
    1:     @unittest.skipIf(sys.flags.optimize >= 2,
    1:                      "Docstrings are omitted with -O2 and above")
           def test_text_doc(self):
    1:         result, doc_loc = get_pydoc_text(pydoc_mod)
    1:         expected_text = expected_text_pattern % (
    1:                         (inspect.getabsfile(pydoc_mod), doc_loc) +
    1:                         expected_text_data_docstrings)
    1:         if result != expected_text:
>>>>>>             print_diffs(expected_text, result)
>>>>>>             self.fail("outputs are not equal, see diff above")
       
    1:     def test_mixed_case_module_names_are_lower_cased(self):
               # issue16484
    1:         doc_link = get_pydoc_link(xml.etree.ElementTree)
    1:         self.assertIn('xml.etree.elementtree', doc_link)
       
    1:     def test_issue8225(self):
               # Test issue8225 to ensure no doc link appears for xml.etree
    1:         result, doc_loc = get_pydoc_text(xml.etree)
    1:         self.assertEqual(doc_loc, "", "MODULE DOCS incorrectly includes a link")
       
    1:     def test_getpager_with_stdin_none(self):
    1:         previous_stdin = sys.stdin
    1:         try:
    1:             sys.stdin = None
    1:             pydoc.getpager() # Shouldn't fail.
               finally:
    1:             sys.stdin = previous_stdin
       
    1:     def test_non_str_name(self):
               # issue14638
               # Treat illegal (non-str) name like no name
    2:         class A:
    1:             __name__ = 42
    2:         class B:
    1:             pass
    1:         adoc = pydoc.render_doc(A())
    1:         bdoc = pydoc.render_doc(B())
    1:         self.assertEqual(adoc.replace("A", "B"), bdoc)
       
    1:     def test_not_here(self):
    1:         missing_module = "test.i_am_not_here"
    1:         result = run_pydoc(missing_module)
    1:         expected = missing_pattern % missing_module
    1:         self.assertEqual(expected, result,
    1:             "documentation for missing module found")
       
    1:     def test_input_strip(self):
    1:         missing_module = " test.i_am_not_here "
    1:         result = run_pydoc(missing_module)
    1:         expected = missing_pattern % missing_module.strip()
    1:         self.assertEqual(expected, result,
    1:             "white space was not stripped from module name "
                   "or other error output mismatch")
       
    1:     def test_stripid(self):
               # test with strings, other implementations might have different repr()
    1:         stripid = pydoc.stripid
               # strip the id
    1:         self.assertEqual(stripid('<function stripid at 0x88dcee4>'),
    1:                          '<function stripid>')
    1:         self.assertEqual(stripid('<function stripid at 0x01F65390>'),
    1:                          '<function stripid>')
               # nothing to strip, return the same text
    1:         self.assertEqual(stripid('42'), '42')
    1:         self.assertEqual(stripid("<type 'exceptions.Exception'>"),
    1:                          "<type 'exceptions.Exception'>")
       
    1:     def test_synopsis(self):
    1:         with test.test_support.temp_cwd() as test_dir:
    1:             init_path = os.path.join(test_dir, 'dt.py')
    1:             with open(init_path, 'w') as fobj:
    1:                 fobj.write('''\
       """
       my doc
       
       second line
       """
       foo = 1
    1: ''')
    1:             py_compile.compile(init_path)
    1:             synopsis = pydoc.synopsis(init_path, {})
    1:             self.assertEqual(synopsis, 'my doc')
       
    1:     @unittest.skipIf(sys.flags.optimize >= 2,
    1:                      'Docstrings are omitted with -OO and above')
           def test_synopsis_sourceless_empty_doc(self):
    1:         with test.test_support.temp_cwd() as test_dir:
    1:             init_path = os.path.join(test_dir, 'foomod42.py')
    1:             cached_path = os.path.join(test_dir, 'foomod42.pyc')
    1:             with open(init_path, 'w') as fobj:
    1:                 fobj.write("foo = 1")
    1:             py_compile.compile(init_path)
    1:             synopsis = pydoc.synopsis(init_path, {})
    1:             self.assertIsNone(synopsis)
    1:             synopsis_cached = pydoc.synopsis(cached_path, {})
    1:             self.assertIsNone(synopsis_cached)
       
       
    2: class PydocImportTest(PydocBaseTest):
       
    1:     def setUp(self):
    3:         self.test_dir = os.mkdir(TESTFN)
    3:         self.addCleanup(rmtree, TESTFN)
       
    1:     def test_badimport(self):
               # This tests the fix for issue 5230, where if pydoc found the module
               # but the module had an internal import error pydoc would report no doc
               # found.
    1:         modname = 'testmod_xyzzy'
               testpairs = (
    1:             ('i_am_not_here', 'i_am_not_here'),
    1:             ('test.i_am_not_here_either', 'i_am_not_here_either'),
    1:             ('test.i_am_not_here.neither_am_i', 'i_am_not_here.neither_am_i'),
    1:             ('i_am_not_here.{}'.format(modname),
    1:              'i_am_not_here.{}'.format(modname)),
    1:             ('test.{}'.format(modname), modname),
                   )
       
    1:         sourcefn = os.path.join(TESTFN, modname) + os.extsep + "py"
    6:         for importstring, expectedinmsg in testpairs:
    5:             with open(sourcefn, 'w') as f:
    5:                 f.write("import {}\n".format(importstring))
    5:             result = run_pydoc(modname, PYTHONPATH=TESTFN)
    5:             expected = badimport_pattern % (modname, expectedinmsg)
    5:             self.assertEqual(expected, result)
       
    1:     def test_apropos_with_bad_package(self):
               # Issue 7425 - pydoc -k failed when bad package on path
    1:         pkgdir = os.path.join(TESTFN, "syntaxerr")
    1:         os.mkdir(pkgdir)
    1:         badsyntax = os.path.join(pkgdir, "__init__") + os.extsep + "py"
    1:         with open(badsyntax, 'w') as f:
    1:             f.write("invalid python syntax = $1\n")
    1:         with self.restrict_walk_packages(path=[TESTFN]):
    1:             with captured_stdout() as out:
    1:                 with captured_stderr() as err:
    1:                     pydoc.apropos('xyzzy')
                   # No result, no error
    1:             self.assertEqual(out.getvalue(), '')
    1:             self.assertEqual(err.getvalue(), '')
                   # The package name is still matched
    1:             with captured_stdout() as out:
    1:                 with captured_stderr() as err:
    1:                     pydoc.apropos('syntaxerr')
    1:             self.assertEqual(out.getvalue().strip(), 'syntaxerr')
    1:             self.assertEqual(err.getvalue(), '')
       
    1:     def test_apropos_with_unreadable_dir(self):
               # Issue 7367 - pydoc -k failed when unreadable dir on path
    1:         self.unreadable_dir = os.path.join(TESTFN, "unreadable")
    1:         os.mkdir(self.unreadable_dir, 0)
    1:         self.addCleanup(os.rmdir, self.unreadable_dir)
               # Note, on Windows the directory appears to be still
               #   readable so this is not really testing the issue there
    1:         with self.restrict_walk_packages(path=[TESTFN]):
    1:             with captured_stdout() as out:
    1:                 with captured_stderr() as err:
    1:                     pydoc.apropos('SOMEKEY')
               # No result, no error
    1:         self.assertEqual(out.getvalue(), '')
    1:         self.assertEqual(err.getvalue(), '')
       
       
    2: class TestDescriptions(unittest.TestCase):
       
    1:     def test_module(self):
               # Check that pydocfodder module can be described
    1:         from test import pydocfodder
    1:         doc = pydoc.render_doc(pydocfodder)
    1:         self.assertIn("pydocfodder", doc)
       
    1:     def test_classic_class(self):
    2:         class C: "Classic class"
    1:         c = C()
    1:         self.assertEqual(pydoc.describe(C), 'class C')
    1:         self.assertEqual(pydoc.describe(c), 'instance of C')
    1:         expected = 'instance of C in module %s' % __name__
    1:         self.assertIn(expected, pydoc.render_doc(c))
       
    1:     def test_class(self):
    2:         class C(object): "New-style class"
    1:         c = C()
       
    1:         self.assertEqual(pydoc.describe(C), 'class C')
    1:         self.assertEqual(pydoc.describe(c), 'C')
    1:         expected = 'C in module %s object' % __name__
    1:         self.assertIn(expected, pydoc.render_doc(c))
       
    1:     def test_namedtuple_public_underscore(self):
    1:         NT = namedtuple('NT', ['abc', 'def'], rename=True)
    1:         with captured_stdout() as help_io:
    1:             pydoc.help(NT)
    1:         helptext = help_io.getvalue()
    1:         self.assertIn('_1', helptext)
    1:         self.assertIn('_replace', helptext)
    1:         self.assertIn('_asdict', helptext)
       
       
    2: @unittest.skipUnless(test.test_support.have_unicode,
    1:                      "test requires unicode support")
    1: class TestUnicode(unittest.TestCase):
       
    1:     def setUp(self):
               # Better not to use unicode escapes in literals, lest the
               # parser choke on it if Python has been built without
               # unicode support.
    7:         self.Q  = types.ModuleType(
    7:             'Q', 'Rational numbers: \xe2\x84\x9a'.decode('utf8'))
    7:         self.Q.__version__ = '\xe2\x84\x9a'.decode('utf8')
    7:         self.Q.__date__ = '\xe2\x84\x9a'.decode('utf8')
    7:         self.Q.__author__ = '\xe2\x84\x9a'.decode('utf8')
    7:         self.Q.__credits__ = '\xe2\x84\x9a'.decode('utf8')
       
    7:         self.assertIsInstance(self.Q.__doc__, unicode)
       
    1:     def test_render_doc(self):
               # render_doc is robust against unicode in docstrings
    1:         doc = pydoc.render_doc(self.Q)
    1:         self.assertIsInstance(doc, str)
       
    1:     def test_encode(self):
               # _encode is robust against characters out the specified encoding
    1:         self.assertEqual(pydoc._encode(self.Q.__doc__, 'ascii'), 'Rational numbers: &#8474;')
       
    1:     def test_pipepager(self):
               # pipepager does not choke on unicode
    1:         doc = pydoc.render_doc(self.Q)
       
    1:         saved, os.popen = os.popen, open
    1:         try:
    1:             with test.test_support.temp_cwd():
    1:                 pydoc.pipepager(doc, 'pipe')
    1:                 self.assertEqual(open('pipe').read(), pydoc._encode(doc))
               finally:
    1:             os.popen = saved
       
    1:     def test_tempfilepager(self):
               # tempfilepager does not choke on unicode
    1:         doc = pydoc.render_doc(self.Q)
       
    1:         output = {}
    1:         def mock_system(cmd):
    1:             filename = cmd.strip()[1:-1]
    1:             self.assertEqual('"' + filename + '"', cmd.strip())
    1:             output['content'] = open(filename).read()
    1:         saved, os.system = os.system, mock_system
    1:         try:
    1:             pydoc.tempfilepager(doc, '')
    1:             self.assertEqual(output['content'], pydoc._encode(doc))
               finally:
    1:             os.system = saved
       
    1:     def test_plainpager(self):
               # plainpager does not choke on unicode
    1:         doc = pydoc.render_doc(self.Q)
       
               # Note: captured_stdout is too permissive when it comes to
               # unicode, and using it here would make the test always
               # pass.
    1:         with test.test_support.temp_cwd():
    1:             with open('output', 'w') as f:
    1:                 saved, sys.stdout = sys.stdout, f
    1:                 try:
    1:                     pydoc.plainpager(doc)
                       finally:
    1:                     sys.stdout = saved
    1:             self.assertIn('Rational numbers:', open('output').read())
       
    1:     def test_ttypager(self):
               # ttypager does not choke on unicode
    1:         doc = pydoc.render_doc(self.Q)
               # Test ttypager
    1:         with test.test_support.temp_cwd(), test.test_support.captured_stdin():
    1:             with open('output', 'w') as f:
    1:                 saved, sys.stdout = sys.stdout, f
    1:                 try:
    1:                     pydoc.ttypager(doc)
                       finally:
    1:                     sys.stdout = saved
    1:             self.assertIn('Rational numbers:', open('output').read())
       
    1:     def test_htmlpage(self):
               # html.page does not choke on unicode
    1:         with test.test_support.temp_cwd():
    1:             with captured_stdout() as output:
    1:                 pydoc.writedoc(self.Q)
    1:         self.assertEqual(output.getvalue(), 'wrote Q.html\n')
       
    2: class TestHelper(unittest.TestCase):
    1:     def test_keywords(self):
    1:         self.assertEqual(sorted(pydoc.Helper.keywords),
    1:                          sorted(keyword.kwlist))
       
    1:     def test_builtin(self):
    1:         for name in ('str', 'str.translate', '__builtin__.str',
    5:                      '__builtin__.str.translate'):
                   # test low-level function
    4:             self.assertIsNotNone(pydoc.locate(name))
                   # test high-level function
    4:             try:
    4:                 pydoc.render_doc(name)
>>>>>>             except ImportError:
>>>>>>                 self.fail('finding the doc of {!r} failed'.format(name))
       
    1:         for name in ('not__builtin__', 'strrr', 'strr.translate',
                            'str.trrrranslate', '__builtin__.strrr',
    7:                      '__builtin__.str.trrranslate'):
    6:             self.assertIsNone(pydoc.locate(name))
    6:             self.assertRaises(ImportError, pydoc.render_doc, name)
       
       
    1: def test_main():
    1:     try:
    1:         test.test_support.run_unittest(PydocDocTest,
    1:                                        PydocImportTest,
    1:                                        TestDescriptions,
    1:                                        TestUnicode,
    1:                                        TestHelper)
           finally:
    1:         reap_children()
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
