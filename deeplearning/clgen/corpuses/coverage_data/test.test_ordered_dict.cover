    1: import copy
    1: import pickle
    1: from random import shuffle
    1: import unittest
    1: from collections import OrderedDict
    1: from collections import MutableMapping
    1: from test import mapping_tests, test_support
       
       
    2: class TestOrderedDict(unittest.TestCase):
       
    1:     def test_init(self):
    1:         with self.assertRaises(TypeError):
    1:             OrderedDict([('a', 1), ('b', 2)], None)                                 # too many args
    1:         pairs = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]
    1:         self.assertEqual(sorted(OrderedDict(dict(pairs)).items()), pairs)           # dict input
    1:         self.assertEqual(sorted(OrderedDict(**dict(pairs)).items()), pairs)         # kwds input
    1:         self.assertEqual(list(OrderedDict(pairs).items()), pairs)                   # pairs input
    1:         self.assertEqual(list(OrderedDict([('a', 1), ('b', 2), ('c', 9), ('d', 4)],
    1:                                           c=3, e=5).items()), pairs)                # mixed input
       
               # make sure no positional args conflict with possible kwdargs
    1:         self.assertEqual(list(OrderedDict(self=42).items()), [('self', 42)])
    1:         self.assertEqual(list(OrderedDict(other=42).items()), [('other', 42)])
    1:         self.assertRaises(TypeError, OrderedDict, 42)
    1:         self.assertRaises(TypeError, OrderedDict, (), ())
    1:         self.assertRaises(TypeError, OrderedDict.__init__)
       
               # Make sure that direct calls to __init__ do not clear previous contents
    1:         d = OrderedDict([('a', 1), ('b', 2), ('c', 3), ('d', 44), ('e', 55)])
    1:         d.__init__([('e', 5), ('f', 6)], g=7, d=4)
    1:         self.assertEqual(list(d.items()),
    1:             [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7)])
       
    1:     def test_update(self):
    1:         with self.assertRaises(TypeError):
    1:             OrderedDict().update([('a', 1), ('b', 2)], None)                        # too many args
    1:         pairs = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]
    1:         od = OrderedDict()
    1:         od.update(dict(pairs))
    1:         self.assertEqual(sorted(od.items()), pairs)                                 # dict input
    1:         od = OrderedDict()
    1:         od.update(**dict(pairs))
    1:         self.assertEqual(sorted(od.items()), pairs)                                 # kwds input
    1:         od = OrderedDict()
    1:         od.update(pairs)
    1:         self.assertEqual(list(od.items()), pairs)                                   # pairs input
    1:         od = OrderedDict()
    1:         od.update([('a', 1), ('b', 2), ('c', 9), ('d', 4)], c=3, e=5)
    1:         self.assertEqual(list(od.items()), pairs)                                   # mixed input
       
               # Issue 9137: Named argument called 'other' or 'self'
               # shouldn't be treated specially.
    1:         od = OrderedDict()
    1:         od.update(self=23)
    1:         self.assertEqual(list(od.items()), [('self', 23)])
    1:         od = OrderedDict()
    1:         od.update(other={})
    1:         self.assertEqual(list(od.items()), [('other', {})])
    1:         od = OrderedDict()
    1:         od.update(red=5, blue=6, other=7, self=8)
    1:         self.assertEqual(sorted(list(od.items())),
    1:                          [('blue', 6), ('other', 7), ('red', 5), ('self', 8)])
       
               # Make sure that direct calls to update do not clear previous contents
               # add that updates items are not moved to the end
    1:         d = OrderedDict([('a', 1), ('b', 2), ('c', 3), ('d', 44), ('e', 55)])
    1:         d.update([('e', 5), ('f', 6)], g=7, d=4)
    1:         self.assertEqual(list(d.items()),
    1:             [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7)])
       
    1:         self.assertRaises(TypeError, OrderedDict().update, 42)
    1:         self.assertRaises(TypeError, OrderedDict().update, (), ())
    1:         self.assertRaises(TypeError, OrderedDict.update)
       
    1:     def test_abc(self):
    1:         self.assertIsInstance(OrderedDict(), MutableMapping)
    1:         self.assertTrue(issubclass(OrderedDict, MutableMapping))
       
    1:     def test_clear(self):
    1:         pairs = [('c', 1), ('b', 2), ('a', 3), ('d', 4), ('e', 5), ('f', 6)]
    1:         shuffle(pairs)
    1:         od = OrderedDict(pairs)
    1:         self.assertEqual(len(od), len(pairs))
    1:         od.clear()
    1:         self.assertEqual(len(od), 0)
       
    1:     def test_delitem(self):
    1:         pairs = [('c', 1), ('b', 2), ('a', 3), ('d', 4), ('e', 5), ('f', 6)]
    1:         od = OrderedDict(pairs)
    1:         del od['a']
    1:         self.assertNotIn('a', od)
    1:         with self.assertRaises(KeyError):
    1:             del od['a']
    1:         self.assertEqual(list(od.items()), pairs[:2] + pairs[3:])
       
    1:     def test_setitem(self):
    1:         od = OrderedDict([('d', 1), ('b', 2), ('c', 3), ('a', 4), ('e', 5)])
    1:         od['c'] = 10           # existing element
    1:         od['f'] = 20           # new element
    1:         self.assertEqual(list(od.items()),
    1:                          [('d', 1), ('b', 2), ('c', 10), ('a', 4), ('e', 5), ('f', 20)])
       
    1:     def test_iterators(self):
    1:         pairs = [('c', 1), ('b', 2), ('a', 3), ('d', 4), ('e', 5), ('f', 6)]
    1:         shuffle(pairs)
    1:         od = OrderedDict(pairs)
    7:         self.assertEqual(list(od), [t[0] for t in pairs])
    7:         self.assertEqual(od.keys()[:], [t[0] for t in pairs])
    7:         self.assertEqual(od.values()[:], [t[1] for t in pairs])
    1:         self.assertEqual(od.items()[:], pairs)
    7:         self.assertEqual(list(od.iterkeys()), [t[0] for t in pairs])
    7:         self.assertEqual(list(od.itervalues()), [t[1] for t in pairs])
    1:         self.assertEqual(list(od.iteritems()), pairs)
    1:         self.assertEqual(list(reversed(od)),
    7:                          [t[0] for t in reversed(pairs)])
       
    1:     def test_popitem(self):
    1:         pairs = [('c', 1), ('b', 2), ('a', 3), ('d', 4), ('e', 5), ('f', 6)]
    1:         shuffle(pairs)
    1:         od = OrderedDict(pairs)
    7:         while pairs:
    6:             self.assertEqual(od.popitem(), pairs.pop())
    1:         with self.assertRaises(KeyError):
    1:             od.popitem()
    1:         self.assertEqual(len(od), 0)
       
    1:     def test_pop(self):
    1:         pairs = [('c', 1), ('b', 2), ('a', 3), ('d', 4), ('e', 5), ('f', 6)]
    1:         shuffle(pairs)
    1:         od = OrderedDict(pairs)
    1:         shuffle(pairs)
    7:         while pairs:
    6:             k, v = pairs.pop()
    6:             self.assertEqual(od.pop(k), v)
    1:         with self.assertRaises(KeyError):
    1:             od.pop('xyz')
    1:         self.assertEqual(len(od), 0)
    1:         self.assertEqual(od.pop(k, 12345), 12345)
       
               # make sure pop still works when __missing__ is defined
    2:         class Missing(OrderedDict):
    1:             def __missing__(self, key):
>>>>>>                 return 0
    1:         m = Missing(a=1)
    1:         self.assertEqual(m.pop('b', 5), 5)
    1:         self.assertEqual(m.pop('a', 6), 1)
    1:         self.assertEqual(m.pop('a', 6), 6)
    1:         with self.assertRaises(KeyError):
    1:             m.pop('a')
       
    1:     def test_equality(self):
    1:         pairs = [('c', 1), ('b', 2), ('a', 3), ('d', 4), ('e', 5), ('f', 6)]
    1:         shuffle(pairs)
    1:         od1 = OrderedDict(pairs)
    1:         od2 = OrderedDict(pairs)
    1:         self.assertEqual(od1, od2)          # same order implies equality
    1:         pairs = pairs[2:] + pairs[:2]
    1:         od2 = OrderedDict(pairs)
    1:         self.assertNotEqual(od1, od2)       # different order implies inequality
               # comparison to regular dict is not order sensitive
    1:         self.assertEqual(od1, dict(od2))
    1:         self.assertEqual(dict(od2), od1)
               # different length implied inequality
    1:         self.assertNotEqual(od1, OrderedDict(pairs[:-1]))
       
    1:     def test_copying(self):
               # Check that ordered dicts are copyable, deepcopyable, picklable,
               # and have a repr/eval round-trip
    1:         pairs = [('c', 1), ('b', 2), ('a', 3), ('d', 4), ('e', 5), ('f', 6)]
    1:         od = OrderedDict(pairs)
    1:         update_test = OrderedDict()
    1:         update_test.update(od)
    1:         for i, dup in enumerate([
    1:                     od.copy(),
    1:                     copy.copy(od),
    1:                     copy.deepcopy(od),
    1:                     pickle.loads(pickle.dumps(od, 0)),
    1:                     pickle.loads(pickle.dumps(od, 1)),
    1:                     pickle.loads(pickle.dumps(od, 2)),
    1:                     pickle.loads(pickle.dumps(od, -1)),
    1:                     eval(repr(od)),
    1:                     update_test,
   11:                     OrderedDict(od),
                           ]):
   10:             self.assertTrue(dup is not od)
   10:             self.assertEqual(dup, od)
   10:             self.assertEqual(list(dup.items()), list(od.items()))
   10:             self.assertEqual(len(dup), len(od))
   10:             self.assertEqual(type(dup), type(od))
       
    1:     def test_yaml_linkage(self):
               # Verify that __reduce__ is setup in a way that supports PyYAML's dump() feature.
               # In yaml, lists are native but tuples are not.
    1:         pairs = [('c', 1), ('b', 2), ('a', 3), ('d', 4), ('e', 5), ('f', 6)]
    1:         od = OrderedDict(pairs)
               # yaml.dump(od) -->
               # '!!python/object/apply:__main__.OrderedDict\n- - [a, 1]\n  - [b, 2]\n'
    3:         self.assertTrue(all(type(pair)==list for pair in od.__reduce__()[1]))
       
    1:     def test_reduce_not_too_fat(self):
               # do not save instance dictionary if not needed
    1:         pairs = [('c', 1), ('b', 2), ('a', 3), ('d', 4), ('e', 5), ('f', 6)]
    1:         od = OrderedDict(pairs)
    1:         self.assertEqual(len(od.__reduce__()), 2)
    1:         od.x = 10
    1:         self.assertEqual(len(od.__reduce__()), 3)
       
    1:     def test_repr(self):
    1:         od = OrderedDict([('c', 1), ('b', 2), ('a', 3), ('d', 4), ('e', 5), ('f', 6)])
    1:         self.assertEqual(repr(od),
    1:             "OrderedDict([('c', 1), ('b', 2), ('a', 3), ('d', 4), ('e', 5), ('f', 6)])")
    1:         self.assertEqual(eval(repr(od)), od)
    1:         self.assertEqual(repr(OrderedDict()), "OrderedDict()")
       
    1:     def test_repr_recursive(self):
               # See issue #9826
    1:         od = OrderedDict.fromkeys('abc')
    1:         od['x'] = od
    1:         self.assertEqual(repr(od),
    1:             "OrderedDict([('a', None), ('b', None), ('c', None), ('x', ...)])")
       
    1:     def test_setdefault(self):
    1:         pairs = [('c', 1), ('b', 2), ('a', 3), ('d', 4), ('e', 5), ('f', 6)]
    1:         shuffle(pairs)
    1:         od = OrderedDict(pairs)
    1:         pair_order = list(od.items())
    1:         self.assertEqual(od.setdefault('a', 10), 3)
               # make sure order didn't change
    1:         self.assertEqual(list(od.items()), pair_order)
    1:         self.assertEqual(od.setdefault('x', 10), 10)
               # make sure 'x' is added to the end
    1:         self.assertEqual(list(od.items())[-1], ('x', 10))
       
               # make sure setdefault still works when __missing__ is defined
    2:         class Missing(OrderedDict):
    1:             def __missing__(self, key):
>>>>>>                 return 0
    1:         self.assertEqual(Missing().setdefault(5, 9), 9)
       
    1:     def test_reinsert(self):
               # Given insert a, insert b, delete a, re-insert a,
               # verify that a is now later than b.
    1:         od = OrderedDict()
    1:         od['a'] = 1
    1:         od['b'] = 2
    1:         del od['a']
    1:         od['a'] = 1
    1:         self.assertEqual(list(od.items()), [('b', 2), ('a', 1)])
       
    1:     def test_views(self):
    1:         s = 'the quick brown fox jumped over a lazy dog yesterday before dawn'.split()
    1:         od = OrderedDict.fromkeys(s)
    1:         self.assertEqual(list(od.viewkeys()),  s)
   13:         self.assertEqual(list(od.viewvalues()),  [None for k in s])
   13:         self.assertEqual(list(od.viewitems()),  [(k, None) for k in s])
       
               # See http://bugs.python.org/issue24286
    1:         self.assertEqual(od.viewkeys(), dict(od).viewkeys())
    1:         self.assertEqual(od.viewitems(), dict(od).viewitems())
       
    1:     def test_override_update(self):
               # Verify that subclasses can override update() without breaking __init__()
    2:         class MyOD(OrderedDict):
    1:             def update(self, *args, **kwds):
>>>>>>                 raise Exception()
    1:         items = [('a', 1), ('c', 3), ('b', 2)]
    1:         self.assertEqual(list(MyOD(items).items()), items)
       
    1:     def test_free_after_iterating(self):
    1:         test_support.check_free_after_iterating(self, iter, OrderedDict)
    2:         test_support.check_free_after_iterating(self, lambda d: d.iterkeys(), OrderedDict)
    2:         test_support.check_free_after_iterating(self, lambda d: d.itervalues(), OrderedDict)
    2:         test_support.check_free_after_iterating(self, lambda d: d.iteritems(), OrderedDict)
    2:         test_support.check_free_after_iterating(self, lambda d: iter(d.viewkeys()), OrderedDict)
    2:         test_support.check_free_after_iterating(self, lambda d: iter(d.viewvalues()), OrderedDict)
    2:         test_support.check_free_after_iterating(self, lambda d: iter(d.viewitems()), OrderedDict)
       
    2: class GeneralMappingTests(mapping_tests.BasicTestMappingProtocol):
    1:     type2test = OrderedDict
       
    1:     def test_popitem(self):
    1:         d = self._empty_mapping()
    1:         self.assertRaises(KeyError, d.popitem)
       
    2: class MyOrderedDict(OrderedDict):
    1:     pass
       
    2: class SubclassMappingTests(mapping_tests.BasicTestMappingProtocol):
    1:     type2test = MyOrderedDict
       
    1:     def test_popitem(self):
    1:         d = self._empty_mapping()
    1:         self.assertRaises(KeyError, d.popitem)
       
       
    1: def test_main(verbose=None):
    1:     test_classes = [TestOrderedDict, GeneralMappingTests, SubclassMappingTests]
    1:     test_support.run_unittest(*test_classes)
       
    1: if __name__ == "__main__":
>>>>>>     test_main(verbose=True)
