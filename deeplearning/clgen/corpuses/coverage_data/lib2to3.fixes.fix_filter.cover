       # Copyright 2007 Google, Inc. All Rights Reserved.
       # Licensed to PSF under a Contributor Agreement.
       
       """Fixer that changes filter(F, X) into list(filter(F, X)).
       
       We avoid the transformation if the filter() call is directly contained
       in iter(<>), list(<>), tuple(<>), sorted(<>), ...join(<>), or
       for V in <>:.
       
       NOTE: This is still not correct if the original code was depending on
       filter(F, X) to return a string if X is a string and a tuple if X is a
       tuple.  That would require type inference, which we don't do.  Let
       Python 2.6 figure it out.
    1: """
       
       # Local imports
    1: from ..pgen2 import token
    1: from .. import fixer_base
    1: from ..fixer_util import Name, Call, ListComp, in_special_context
       
    2: class FixFilter(fixer_base.ConditionalFix):
    1:     BM_compatible = True
       
           PATTERN = """
           filter_lambda=power<
               'filter'
               trailer<
                   '('
                   arglist<
                       lambdef< 'lambda'
                                (fp=NAME | vfpdef< '(' fp=NAME ')'> ) ':' xp=any
                       >
                       ','
                       it=any
                   >
                   ')'
               >
           >
           |
           power<
               'filter'
               trailer< '(' arglist< none='None' ',' seq=any > ')' >
           >
           |
           power<
               'filter'
               args=trailer< '(' [any] ')' >
           >
    1:     """
       
    1:     skip_on = "future_builtins.filter"
       
    1:     def transform(self, node, results):
   49:         if self.should_skip(node):
    4:             return
       
   45:         if "filter_lambda" in results:
    2:             new = ListComp(results.get("fp").clone(),
    2:                            results.get("fp").clone(),
    2:                            results.get("it").clone(),
    2:                            results.get("xp").clone())
       
   43:         elif "none" in results:
    2:             new = ListComp(Name(u"_f"),
    2:                            Name(u"_f"),
    2:                            results["seq"].clone(),
    2:                            Name(u"_f"))
       
               else:
   41:             if in_special_context(node):
   38:                 return None
    3:             new = node.clone()
    3:             new.prefix = u""
    3:             new = Call(Name(u"list"), [new])
    7:         new.prefix = node.prefix
    7:         return new
