    1: import unittest
       
    1: from cStringIO import StringIO
    1: import pickle
       
    1: from unittest.test.support import (LoggingResult,
                                          ResultWithNoStartTestRunStopTestRun)
       
       
    2: class TestCleanUp(unittest.TestCase):
       
    1:     def testCleanUp(self):
    2:         class TestableTest(unittest.TestCase):
    1:             def testNothing(self):
>>>>>>                 pass
       
    1:         test = TestableTest('testNothing')
    1:         self.assertEqual(test._cleanups, [])
       
    1:         cleanups = []
       
    1:         def cleanup1(*args, **kwargs):
    1:             cleanups.append((1, args, kwargs))
       
    1:         def cleanup2(*args, **kwargs):
    1:             cleanups.append((2, args, kwargs))
       
    1:         test.addCleanup(cleanup1, 1, 2, 3, four='hello', five='goodbye')
    1:         test.addCleanup(cleanup2)
       
    1:         self.assertEqual(test._cleanups,
    1:                          [(cleanup1, (1, 2, 3), dict(four='hello', five='goodbye')),
    1:                           (cleanup2, (), {})])
       
    1:         result = test.doCleanups()
    1:         self.assertTrue(result)
       
    1:         self.assertEqual(cleanups, [(2, (), {}), (1, (1, 2, 3),
    1:                                     dict(four='hello', five='goodbye'))])
       
    1:     def testCleanUpWithErrors(self):
    2:         class TestableTest(unittest.TestCase):
    1:             def testNothing(self):
>>>>>>                 pass
       
    2:         class MockResult(object):
    1:             errors = []
    1:             def addError(self, test, exc_info):
    2:                 self.errors.append((test, exc_info))
       
    1:         result = MockResult()
    1:         test = TestableTest('testNothing')
    1:         test._resultForDoCleanups = result
       
    1:         exc1 = Exception('foo')
    1:         exc2 = Exception('bar')
    1:         def cleanup1():
    1:             raise exc1
       
    1:         def cleanup2():
    1:             raise exc2
       
    1:         test.addCleanup(cleanup1)
    1:         test.addCleanup(cleanup2)
       
    1:         self.assertFalse(test.doCleanups())
       
    1:         (test1, (Type1, instance1, _)), (test2, (Type2, instance2, _)) = reversed(MockResult.errors)
    1:         self.assertEqual((test1, Type1, instance1), (test, Exception, exc1))
    1:         self.assertEqual((test2, Type2, instance2), (test, Exception, exc2))
       
    1:     def testCleanupInRun(self):
    1:         blowUp = False
    1:         ordering = []
       
    2:         class TestableTest(unittest.TestCase):
    1:             def setUp(self):
    2:                 ordering.append('setUp')
    2:                 if blowUp:
    1:                     raise Exception('foo')
       
    1:             def testNothing(self):
    1:                 ordering.append('test')
       
    1:             def tearDown(self):
    1:                 ordering.append('tearDown')
       
    1:         test = TestableTest('testNothing')
       
    1:         def cleanup1():
    2:             ordering.append('cleanup1')
    1:         def cleanup2():
    1:             ordering.append('cleanup2')
    1:         test.addCleanup(cleanup1)
    1:         test.addCleanup(cleanup2)
       
    1:         def success(some_test):
    1:             self.assertEqual(some_test, test)
    1:             ordering.append('success')
       
    1:         result = unittest.TestResult()
    1:         result.addSuccess = success
       
    1:         test.run(result)
    1:         self.assertEqual(ordering, ['setUp', 'test', 'tearDown',
    1:                                     'cleanup2', 'cleanup1', 'success'])
       
    1:         blowUp = True
    1:         ordering = []
    1:         test = TestableTest('testNothing')
    1:         test.addCleanup(cleanup1)
    1:         test.run(result)
    1:         self.assertEqual(ordering, ['setUp', 'cleanup1'])
       
    1:     def testTestCaseDebugExecutesCleanups(self):
    1:         ordering = []
       
    2:         class TestableTest(unittest.TestCase):
    1:             def setUp(self):
    1:                 ordering.append('setUp')
    1:                 self.addCleanup(cleanup1)
       
    1:             def testNothing(self):
    1:                 ordering.append('test')
       
    1:             def tearDown(self):
    1:                 ordering.append('tearDown')
       
    1:         test = TestableTest('testNothing')
       
    1:         def cleanup1():
    1:             ordering.append('cleanup1')
    1:             test.addCleanup(cleanup2)
    1:         def cleanup2():
    1:             ordering.append('cleanup2')
       
    1:         test.debug()
    1:         self.assertEqual(ordering, ['setUp', 'test', 'tearDown', 'cleanup1', 'cleanup2'])
       
       
    2: class Test_TextTestRunner(unittest.TestCase):
    1:     """Tests for TextTestRunner."""
       
    1:     def test_init(self):
    1:         runner = unittest.TextTestRunner()
    1:         self.assertFalse(runner.failfast)
    1:         self.assertFalse(runner.buffer)
    1:         self.assertEqual(runner.verbosity, 1)
    1:         self.assertTrue(runner.descriptions)
    1:         self.assertEqual(runner.resultclass, unittest.TextTestResult)
       
       
    1:     def test_multiple_inheritance(self):
    2:         class AResult(unittest.TestResult):
    1:             def __init__(self, stream, descriptions, verbosity):
    1:                 super(AResult, self).__init__(stream, descriptions, verbosity)
       
    2:         class ATextResult(unittest.TextTestResult, AResult):
    1:             pass
       
               # This used to raise an exception due to TextTestResult not passing
               # on arguments in its __init__ super call
    1:         ATextResult(None, None, 1)
       
       
    1:     def testBufferAndFailfast(self):
    2:         class Test(unittest.TestCase):
    1:             def testFoo(self):
    1:                 pass
    1:         result = unittest.TestResult()
    1:         runner = unittest.TextTestRunner(stream=StringIO(), failfast=True,
    1:                                            buffer=True)
               # Use our result object
    2:         runner._makeResult = lambda: result
    1:         runner.run(Test('testFoo'))
       
    1:         self.assertTrue(result.failfast)
    1:         self.assertTrue(result.buffer)
       
    1:     def testRunnerRegistersResult(self):
    2:         class Test(unittest.TestCase):
    1:             def testFoo(self):
>>>>>>                 pass
    1:         originalRegisterResult = unittest.runner.registerResult
    1:         def cleanup():
    1:             unittest.runner.registerResult = originalRegisterResult
    1:         self.addCleanup(cleanup)
       
    1:         result = unittest.TestResult()
    1:         runner = unittest.TextTestRunner(stream=StringIO())
               # Use our result object
    2:         runner._makeResult = lambda: result
       
    1:         self.wasRegistered = 0
    1:         def fakeRegisterResult(thisResult):
    1:             self.wasRegistered += 1
    1:             self.assertEqual(thisResult, result)
    1:         unittest.runner.registerResult = fakeRegisterResult
       
    1:         runner.run(unittest.TestSuite())
    1:         self.assertEqual(self.wasRegistered, 1)
       
    1:     def test_works_with_result_without_startTestRun_stopTestRun(self):
    2:         class OldTextResult(ResultWithNoStartTestRunStopTestRun):
    1:             separator2 = ''
    1:             def printErrors(self):
    1:                 pass
       
    2:         class Runner(unittest.TextTestRunner):
    1:             def __init__(self):
    1:                 super(Runner, self).__init__(StringIO())
       
    1:             def _makeResult(self):
    1:                 return OldTextResult()
       
    1:         runner = Runner()
    1:         runner.run(unittest.TestSuite())
       
    1:     def test_startTestRun_stopTestRun_called(self):
    2:         class LoggingTextResult(LoggingResult):
    1:             separator2 = ''
    1:             def printErrors(self):
    1:                 pass
       
    2:         class LoggingRunner(unittest.TextTestRunner):
    1:             def __init__(self, events):
    1:                 super(LoggingRunner, self).__init__(StringIO())
    1:                 self._events = events
       
    1:             def _makeResult(self):
    1:                 return LoggingTextResult(self._events)
       
    1:         events = []
    1:         runner = LoggingRunner(events)
    1:         runner.run(unittest.TestSuite())
    1:         expected = ['startTestRun', 'stopTestRun']
    1:         self.assertEqual(events, expected)
       
    1:     def test_pickle_unpickle(self):
               # Issue #7197: a TextTestRunner should be (un)pickleable. This is
               # required by test_multiprocessing under Windows (in verbose mode).
    1:         from StringIO import StringIO as PickleableIO
               # cStringIO objects are not pickleable, but StringIO objects are.
    1:         stream = PickleableIO("foo")
    1:         runner = unittest.TextTestRunner(stream)
    4:         for protocol in range(pickle.HIGHEST_PROTOCOL + 1):
    3:             s = pickle.dumps(runner, protocol=protocol)
    3:             obj = pickle.loads(s)
                   # StringIO objects never compare equal, a cheap test instead.
    3:             self.assertEqual(obj.stream.getvalue(), stream.getvalue())
       
    1:     def test_resultclass(self):
    1:         def MockResultClass(*args):
    1:             return args
    1:         STREAM = object()
    1:         DESCRIPTIONS = object()
    1:         VERBOSITY = object()
    1:         runner = unittest.TextTestRunner(STREAM, DESCRIPTIONS, VERBOSITY,
    1:                                          resultclass=MockResultClass)
    1:         self.assertEqual(runner.resultclass, MockResultClass)
       
    1:         expectedresult = (runner.stream, DESCRIPTIONS, VERBOSITY)
    1:         self.assertEqual(runner._makeResult(), expectedresult)
       
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
