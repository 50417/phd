       #-*- coding: ISO-8859-1 -*-
       # pysqlite2/test/regression.py: pysqlite regression tests
       #
       # Copyright (C) 2007 Gerhard Häring <gh@ghaering.de>
       #
       # This file is part of pysqlite.
       #
       # This software is provided 'as-is', without any express or implied
       # warranty.  In no event will the authors be held liable for any damages
       # arising from the use of this software.
       #
       # Permission is granted to anyone to use this software for any purpose,
       # including commercial applications, and to alter it and redistribute it
       # freely, subject to the following restrictions:
       #
       # 1. The origin of this software must not be misrepresented; you must not
       #    claim that you wrote the original software. If you use this software
       #    in a product, an acknowledgment in the product documentation would be
       #    appreciated but is not required.
       # 2. Altered source versions must be plainly marked as such, and must not be
       #    misrepresented as being the original software.
       # 3. This notice may not be removed or altered from any source distribution.
       
    1: from __future__ import with_statement
    1: import unittest
    1: import sqlite3 as sqlite
       
    1: did_rollback = False
       
    2: class MyConnection(sqlite.Connection):
    1:     def rollback(self):
               global did_rollback
    2:         did_rollback = True
    2:         sqlite.Connection.rollback(self)
       
    2: class ContextTests(unittest.TestCase):
    1:     def setUp(self):
               global did_rollback
    3:         self.con = sqlite.connect(":memory:", factory=MyConnection)
    3:         self.con.execute("create table test(c unique)")
    3:         did_rollback = False
       
    1:     def tearDown(self):
    3:         self.con.close()
       
    1:     def CheckContextManager(self):
               """Can the connection be used as a context manager at all?"""
    1:         with self.con:
    1:             pass
       
    1:     def CheckContextManagerCommit(self):
               """Is a commit called in the context manager?"""
    1:         with self.con:
    1:             self.con.execute("insert into test(c) values ('foo')")
    1:         self.con.rollback()
    1:         count = self.con.execute("select count(*) from test").fetchone()[0]
    1:         self.assertEqual(count, 1)
       
    1:     def CheckContextManagerRollback(self):
               """Is a rollback called in the context manager?"""
               global did_rollback
    1:         self.assertEqual(did_rollback, False)
    1:         try:
    1:             with self.con:
    1:                 self.con.execute("insert into test(c) values (4)")
    1:                 self.con.execute("insert into test(c) values (4)")
    1:         except sqlite.IntegrityError:
    1:             pass
    1:         self.assertEqual(did_rollback, True)
       
    1: def suite():
    1:     ctx_suite = unittest.makeSuite(ContextTests, "Check")
    1:     return unittest.TestSuite((ctx_suite,))
       
    1: def test():
>>>>>>     runner = unittest.TextTestRunner()
>>>>>>     runner.run(suite())
       
    1: if __name__ == "__main__":
>>>>>>     test()
