       """Implementation of JSONEncoder
    2: """
    2: import re
       
    2: try:
    2:     from _json import encode_basestring_ascii as c_encode_basestring_ascii
    1: except ImportError:
    1:     c_encode_basestring_ascii = None
    2: try:
    2:     from _json import make_encoder as c_make_encoder
    1: except ImportError:
    1:     c_make_encoder = None
       
    2: ESCAPE = re.compile(r'[\x00-\x1f\\"\b\f\n\r\t]')
    2: ESCAPE_ASCII = re.compile(r'([\\"]|[^\ -~])')
    2: HAS_UTF8 = re.compile(r'[\x80-\xff]')
    2: ESCAPE_DCT = {
    2:     '\\': '\\\\',
    2:     '"': '\\"',
    2:     '\b': '\\b',
    2:     '\f': '\\f',
    2:     '\n': '\\n',
    2:     '\r': '\\r',
    2:     '\t': '\\t',
       }
   66: for i in range(0x20):
   64:     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
           #ESCAPE_DCT.setdefault(chr(i), '\\u%04x' % (i,))
       
    2: INFINITY = float('inf')
    2: FLOAT_REPR = float.__repr__
       
    2: def encode_basestring(s):
           """Return a JSON representation of a Python string
       
           """
    6:     def replace(match):
>>>>>>         return ESCAPE_DCT[match.group(0)]
    6:     return '"' + ESCAPE.sub(replace, s) + '"'
       
       
    2: def py_encode_basestring_ascii(s):
           """Return an ASCII-only JSON representation of a Python string
       
           """
   74:     if isinstance(s, str) and HAS_UTF8.search(s) is not None:
    5:         s = s.decode('utf-8')
   73:     def replace(match):
   67:         s = match.group(0)
   67:         try:
   67:             return ESCAPE_DCT[s]
   46:         except KeyError:
   46:             n = ord(s)
   46:             if n < 0x10000:
   46:                 return '\\u{0:04x}'.format(n)
                       #return '\\u%04x' % (n,)
                   else:
                       # surrogate pair
>>>>>>                 n -= 0x10000
>>>>>>                 s1 = 0xd800 | ((n >> 10) & 0x3ff)
>>>>>>                 s2 = 0xdc00 | (n & 0x3ff)
>>>>>>                 return '\\u{0:04x}\\u{1:04x}'.format(s1, s2)
                       #return '\\u%04x\\u%04x' % (s1, s2)
   73:     return '"' + str(ESCAPE_ASCII.sub(replace, s)) + '"'
       
       
       encode_basestring_ascii = (
    2:     c_encode_basestring_ascii or py_encode_basestring_ascii)
       
    4: class JSONEncoder(object):
           """Extensible JSON <http://json.org> encoder for Python data structures.
       
           Supports the following objects and types by default:
       
           +-------------------+---------------+
           | Python            | JSON          |
           +===================+===============+
           | dict              | object        |
           +-------------------+---------------+
           | list, tuple       | array         |
           +-------------------+---------------+
           | str, unicode      | string        |
           +-------------------+---------------+
           | int, long, float  | number        |
           +-------------------+---------------+
           | True              | true          |
           +-------------------+---------------+
           | False             | false         |
           +-------------------+---------------+
           | None              | null          |
           +-------------------+---------------+
       
           To extend this to recognize other objects, subclass and implement a
           ``.default()`` method with another method that returns a serializable
           object for ``o`` if possible, otherwise it should call the superclass
           implementation (to raise ``TypeError``).
       
    2:     """
    2:     item_separator = ', '
    2:     key_separator = ': '
    2:     def __init__(self, skipkeys=False, ensure_ascii=True,
    2:             check_circular=True, allow_nan=True, sort_keys=False,
    2:             indent=None, separators=None, encoding='utf-8', default=None):
               """Constructor for JSONEncoder, with sensible defaults.
       
               If skipkeys is false, then it is a TypeError to attempt
               encoding of keys that are not str, int, long, float or None.  If
               skipkeys is True, such items are simply skipped.
       
               If *ensure_ascii* is true (the default), all non-ASCII
               characters in the output are escaped with \uXXXX sequences,
               and the results are str instances consisting of ASCII
               characters only.  If ensure_ascii is False, a result may be a
               unicode instance.  This usually happens if the input contains
               unicode strings or the *encoding* parameter is used.
       
               If check_circular is true, then lists, dicts, and custom encoded
               objects will be checked for circular references during encoding to
               prevent an infinite recursion (which would cause an OverflowError).
               Otherwise, no such check takes place.
       
               If allow_nan is true, then NaN, Infinity, and -Infinity will be
               encoded as such.  This behavior is not JSON specification compliant,
               but is consistent with most JavaScript based encoders and decoders.
               Otherwise, it will be a ValueError to encode such floats.
       
               If sort_keys is true, then the output of dictionaries will be
               sorted by key; this is useful for regression tests to ensure
               that JSON serializations can be compared on a day-to-day basis.
       
               If indent is a non-negative integer, then JSON array
               elements and object members will be pretty-printed with that
               indent level.  An indent level of 0 will only insert newlines.
               None is the most compact representation.  Since the default
               item separator is ', ',  the output might include trailing
               whitespace when indent is specified.  You can use
               separators=(',', ': ') to avoid this.
       
               If specified, separators should be a (item_separator, key_separator)
               tuple.  The default is (', ', ': ').  To get the most compact JSON
               representation you should specify (',', ':') to eliminate whitespace.
       
               If specified, default is a function that gets called for objects
               that can't otherwise be serialized.  It should return a JSON encodable
               version of the object or raise a ``TypeError``.
       
               If encoding is not None, then all input strings will be
               transformed into unicode using that encoding prior to JSON-encoding.
               The default is UTF-8.
       
               """
       
   27:         self.skipkeys = skipkeys
   27:         self.ensure_ascii = ensure_ascii
   27:         self.check_circular = check_circular
   27:         self.allow_nan = allow_nan
   27:         self.sort_keys = sort_keys
   27:         self.indent = indent
   27:         if separators is not None:
    6:             self.item_separator, self.key_separator = separators
   27:         if default is not None:
    3:             self.default = default
   27:         self.encoding = encoding
       
    2:     def default(self, o):
               """Implement this method in a subclass such that it returns
               a serializable object for ``o``, or calls the base implementation
               (to raise a ``TypeError``).
       
               For example, to support arbitrary iterators, you could
               implement default like this::
       
                   def default(self, o):
                       try:
                           iterable = iter(o)
                       except TypeError:
                           pass
                       else:
                           return list(iterable)
                       # Let the base class default method raise the TypeError
                       return JSONEncoder.default(self, o)
       
               """
>>>>>>         raise TypeError(repr(o) + " is not JSON serializable")
       
    2:     def encode(self, o):
               """Return a JSON string representation of a Python data structure.
       
               >>> JSONEncoder().encode({"foo": ["bar", "baz"]})
               '{"foo": ["bar", "baz"]}'
       
               """
               # This is for extremely simple cases and benchmarks.
   52:         if isinstance(o, basestring):
   19:             if isinstance(o, str):
    6:                 _encoding = self.encoding
    6:                 if (_encoding is not None
    6:                         and not (_encoding == 'utf-8')):
>>>>>>                     o = o.decode(_encoding)
   19:             if self.ensure_ascii:
   15:                 return encode_basestring_ascii(o)
                   else:
    4:                 return encode_basestring(o)
               # This doesn't pass the iterator directly to ''.join() because the
               # exceptions aren't as detailed.  The list call should be roughly
               # equivalent to the PySequence_Fast that ''.join() would do.
   33:         chunks = self.iterencode(o, _one_shot=True)
   30:         if not isinstance(chunks, (list, tuple)):
   16:             chunks = list(chunks)
   30:         return ''.join(chunks)
       
    2:     def iterencode(self, o, _one_shot=False):
               """Encode the given object and yield each string
               representation as available.
       
               For example::
       
                   for chunk in JSONEncoder().iterencode(bigobject):
                       mysocket.write(chunk)
       
               """
   39:         if self.check_circular:
   38:             markers = {}
               else:
    1:             markers = None
   39:         if self.ensure_ascii:
   37:             _encoder = encode_basestring_ascii
               else:
    2:             _encoder = encode_basestring
   39:         if self.encoding != 'utf-8':
>>>>>>             def _encoder(o, _orig_encoder=_encoder, _encoding=self.encoding):
>>>>>>                 if isinstance(o, str):
>>>>>>                     o = o.decode(_encoding)
>>>>>>                 return _orig_encoder(o)
       
   39:         def floatstr(o, allow_nan=self.allow_nan,
   39:                 _repr=FLOAT_REPR, _inf=INFINITY, _neginf=-INFINITY):
                   # Check for specials.  Note that this type of test is processor
                   # and/or platform-specific, so do tests which don't depend on the
                   # internals.
       
    2:             if o != o:
>>>>>>                 text = 'NaN'
    2:             elif o == _inf:
>>>>>>                 text = 'Infinity'
    2:             elif o == _neginf:
>>>>>>                 text = '-Infinity'
                   else:
    2:                 return _repr(o)
       
>>>>>>             if not allow_nan:
>>>>>>                 raise ValueError(
>>>>>>                     "Out of range float values are not JSON compliant: " +
>>>>>>                     repr(o))
       
>>>>>>             return text
       
       
   39:         if (_one_shot and c_make_encoder is not None
   23:                 and self.indent is None and not self.sort_keys):
   17:             _iterencode = c_make_encoder(
   17:                 markers, self.default, _encoder, self.indent,
   17:                 self.key_separator, self.item_separator, self.sort_keys,
   17:                 self.skipkeys, self.allow_nan)
               else:
   22:             _iterencode = _make_iterencode(
   22:                 markers, self.default, _encoder, self.indent, floatstr,
   22:                 self.key_separator, self.item_separator, self.sort_keys,
   22:                 self.skipkeys, _one_shot)
   39:         return _iterencode(o, 0)
       
       def _make_iterencode(markers, _default, _encoder, _indent, _floatstr,
               _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot,
               ## HACK: hand-optimized bytecode; turn globals into locals
    2:         ValueError=ValueError,
    2:         basestring=basestring,
    2:         dict=dict,
    2:         float=float,
    2:         id=id,
    2:         int=int,
    2:         isinstance=isinstance,
    2:         list=list,
    2:         long=long,
    2:         str=str,
    2:         tuple=tuple,
           ):
       
   22:     def _iterencode_list(lst, _current_indent_level):
   29:         if not lst:
    6:             yield '[]'
    6:             return
   23:         if markers is not None:
   23:             markerid = id(lst)
   23:             if markerid in markers:
>>>>>>                 raise ValueError("Circular reference detected")
   23:             markers[markerid] = lst
   23:         buf = '['
   23:         if _indent is not None:
   12:             _current_indent_level += 1
   12:             newline_indent = '\n' + (' ' * (_indent * _current_indent_level))
   12:             separator = _item_separator + newline_indent
   12:             buf += newline_indent
               else:
   11:             newline_indent = None
   11:             separator = _item_separator
   23:         first = True
   92:         for value in lst:
   69:             if first:
   23:                 first = False
                   else:
   46:                 buf = separator
   69:             if isinstance(value, basestring):
   33:                 yield buf + _encoder(value)
   36:             elif value is None:
>>>>>>                 yield buf + 'null'
   36:             elif value is True:
>>>>>>                 yield buf + 'true'
   36:             elif value is False:
>>>>>>                 yield buf + 'false'
   36:             elif isinstance(value, (int, long)):
    3:                 yield buf + str(value)
   33:             elif isinstance(value, float):
    2:                 yield buf + _floatstr(value)
                   else:
   31:                 yield buf
   31:                 if isinstance(value, (list, tuple)):
   18:                     chunks = _iterencode_list(value, _current_indent_level)
   13:                 elif isinstance(value, dict):
   13:                     chunks = _iterencode_dict(value, _current_indent_level)
                       else:
>>>>>>                     chunks = _iterencode(value, _current_indent_level)
  178:                 for chunk in chunks:
  147:                     yield chunk
   23:         if newline_indent is not None:
   12:             _current_indent_level -= 1
   12:             yield '\n' + (' ' * (_indent * _current_indent_level))
   23:         yield ']'
   23:         if markers is not None:
   23:             del markers[markerid]
       
   22:     def _iterencode_dict(dct, _current_indent_level):
   25:         if not dct:
>>>>>>             yield '{}'
>>>>>>             return
   25:         if markers is not None:
   25:             markerid = id(dct)
   25:             if markerid in markers:
>>>>>>                 raise ValueError("Circular reference detected")
   25:             markers[markerid] = dct
   25:         yield '{'
   25:         if _indent is not None:
   13:             _current_indent_level += 1
   13:             newline_indent = '\n' + (' ' * (_indent * _current_indent_level))
   13:             item_separator = _item_separator + newline_indent
   13:             yield newline_indent
               else:
   12:             newline_indent = None
   12:             item_separator = _item_separator
   25:         first = True
   25:         if _sort_keys:
   30:             items = sorted(dct.items(), key=lambda kv: kv[0])
               else:
   14:             items = dct.iteritems()
   65:         for key, value in items:
   40:             if isinstance(key, basestring):
   33:                 pass
                   # JavaScript is weakly typed for these, so it makes sense to
                   # also allow them.  Many encoders seem to do something like this.
    7:             elif isinstance(key, float):
>>>>>>                 key = _floatstr(key)
    7:             elif key is True:
>>>>>>                 key = 'true'
    7:             elif key is False:
>>>>>>                 key = 'false'
    7:             elif key is None:
>>>>>>                 key = 'null'
    7:             elif isinstance(key, (int, long)):
    7:                 key = str(key)
>>>>>>             elif _skipkeys:
>>>>>>                 continue
                   else:
>>>>>>                 raise TypeError("key " + repr(key) + " is not a string")
   40:             if first:
   25:                 first = False
                   else:
   15:                 yield item_separator
   40:             yield _encoder(key)
   40:             yield _key_separator
   40:             if isinstance(value, basestring):
    8:                 yield _encoder(value)
   32:             elif value is None:
>>>>>>                 yield 'null'
   32:             elif value is True:
>>>>>>                 yield 'true'
   32:             elif value is False:
    6:                 yield 'false'
   26:             elif isinstance(value, (int, long)):
   25:                 yield str(value)
    1:             elif isinstance(value, float):
>>>>>>                 yield _floatstr(value)
                   else:
    1:                 if isinstance(value, (list, tuple)):
>>>>>>                     chunks = _iterencode_list(value, _current_indent_level)
    1:                 elif isinstance(value, dict):
    1:                     chunks = _iterencode_dict(value, _current_indent_level)
                       else:
>>>>>>                     chunks = _iterencode(value, _current_indent_level)
   10:                 for chunk in chunks:
    9:                     yield chunk
   25:         if newline_indent is not None:
   13:             _current_indent_level -= 1
   13:             yield '\n' + (' ' * (_indent * _current_indent_level))
   25:         yield '}'
   25:         if markers is not None:
   25:             del markers[markerid]
       
   22:     def _iterencode(o, _current_indent_level):
   23:         if isinstance(o, basestring):
>>>>>>             yield _encoder(o)
   23:         elif o is None:
>>>>>>             yield 'null'
   23:         elif o is True:
>>>>>>             yield 'true'
   23:         elif o is False:
>>>>>>             yield 'false'
   23:         elif isinstance(o, (int, long)):
>>>>>>             yield str(o)
   23:         elif isinstance(o, float):
>>>>>>             yield _floatstr(o)
   23:         elif isinstance(o, (list, tuple)):
  230:             for chunk in _iterencode_list(o, _current_indent_level):
  219:                 yield chunk
   12:         elif isinstance(o, dict):
  112:             for chunk in _iterencode_dict(o, _current_indent_level):
  101:                 yield chunk
               else:
    1:             if markers is not None:
    1:                 markerid = id(o)
    1:                 if markerid in markers:
>>>>>>                     raise ValueError("Circular reference detected")
    1:                 markers[markerid] = o
    1:             o = _default(o)
    4:             for chunk in _iterencode(o, _current_indent_level):
    3:                 yield chunk
    1:             if markers is not None:
    1:                 del markers[markerid]
       
   22:     return _iterencode
