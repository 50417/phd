    1: import unittest, operator, copy, pickle, random
    1: from test import test_support
       
    1: test_support.import_module("sets", deprecated=True)
    1: from sets import Set, ImmutableSet
       
    1: empty_set = Set()
       
       #==============================================================================
       
    2: class TestBasicOps(unittest.TestCase):
       
    1:     def test_repr(self):
    4:         if self.repr is not None:
    3:             self.assertEqual(repr(self.set), self.repr)
       
    1:     def test_length(self):
    4:         self.assertEqual(len(self.set), self.length)
       
    1:     def test_self_equality(self):
    4:         self.assertEqual(self.set, self.set)
       
    1:     def test_equivalent_equality(self):
    4:         self.assertEqual(self.set, self.dup)
       
    1:     def test_copy(self):
    4:         self.assertEqual(self.set.copy(), self.dup)
       
    1:     def test_self_union(self):
    4:         result = self.set | self.set
    4:         self.assertEqual(result, self.dup)
       
    1:     def test_empty_union(self):
    4:         result = self.set | empty_set
    4:         self.assertEqual(result, self.dup)
       
    1:     def test_union_empty(self):
    4:         result = empty_set | self.set
    4:         self.assertEqual(result, self.dup)
       
    1:     def test_self_intersection(self):
    4:         result = self.set & self.set
    4:         self.assertEqual(result, self.dup)
       
    1:     def test_empty_intersection(self):
    4:         result = self.set & empty_set
    4:         self.assertEqual(result, empty_set)
       
    1:     def test_intersection_empty(self):
    4:         result = empty_set & self.set
    4:         self.assertEqual(result, empty_set)
       
    1:     def test_self_symmetric_difference(self):
    4:         result = self.set ^ self.set
    4:         self.assertEqual(result, empty_set)
       
    1:     def checkempty_symmetric_difference(self):
>>>>>>         result = self.set ^ empty_set
>>>>>>         self.assertEqual(result, self.set)
       
    1:     def test_self_difference(self):
    4:         result = self.set - self.set
    4:         self.assertEqual(result, empty_set)
       
    1:     def test_empty_difference(self):
    4:         result = self.set - empty_set
    4:         self.assertEqual(result, self.dup)
       
    1:     def test_empty_difference_rev(self):
    4:         result = empty_set - self.set
    4:         self.assertEqual(result, empty_set)
       
    1:     def test_iteration(self):
    9:         for v in self.set:
    5:             self.assertIn(v, self.values)
       
    1:     def test_pickling(self):
   16:         for proto in range(pickle.HIGHEST_PROTOCOL + 1):
   12:             p = pickle.dumps(self.set, proto)
   12:             copy = pickle.loads(p)
   12:             self.assertEqual(self.set, copy,
   12:                              "%s != %s" % (self.set, copy))
       
       #------------------------------------------------------------------------------
       
    2: class TestBasicOpsEmpty(TestBasicOps):
    1:     def setUp(self):
   17:         self.case   = "empty set"
   17:         self.values = []
   17:         self.set    = Set(self.values)
   17:         self.dup    = Set(self.values)
   17:         self.length = 0
   17:         self.repr   = "Set([])"
       
       #------------------------------------------------------------------------------
       
    2: class TestBasicOpsSingleton(TestBasicOps):
    1:     def setUp(self):
   19:         self.case   = "unit set (number)"
   19:         self.values = [3]
   19:         self.set    = Set(self.values)
   19:         self.dup    = Set(self.values)
   19:         self.length = 1
   19:         self.repr   = "Set([3])"
       
    1:     def test_in(self):
    1:         self.assertTrue(3 in self.set)
       
    1:     def test_not_in(self):
    1:         self.assertTrue(2 not in self.set)
       
       #------------------------------------------------------------------------------
       
    2: class TestBasicOpsTuple(TestBasicOps):
    1:     def setUp(self):
   19:         self.case   = "unit set (tuple)"
   19:         self.values = [(0, "zero")]
   19:         self.set    = Set(self.values)
   19:         self.dup    = Set(self.values)
   19:         self.length = 1
   19:         self.repr   = "Set([(0, 'zero')])"
       
    1:     def test_in(self):
    1:         self.assertTrue((0, "zero") in self.set)
       
    1:     def test_not_in(self):
    1:         self.assertTrue(9 not in self.set)
       
       #------------------------------------------------------------------------------
       
    2: class TestBasicOpsTriple(TestBasicOps):
    1:     def setUp(self):
   17:         self.case   = "triple set"
   17:         self.values = [0, "zero", operator.add]
   17:         self.set    = Set(self.values)
   17:         self.dup    = Set(self.values)
   17:         self.length = 3
   17:         self.repr   = None
       
       #==============================================================================
       
    1: def baditer():
    1:     raise TypeError
>>>>>>     yield True
       
    1: def gooditer():
    1:     yield True
       
    2: class TestExceptionPropagation(unittest.TestCase):
    1:     """SF 628246:  Set constructor should not trap iterator TypeErrors"""
       
    1:     def test_instanceWithException(self):
    1:         self.assertRaises(TypeError, Set, baditer())
       
    1:     def test_instancesWithoutException(self):
               # All of these iterables should load without exception.
    1:         Set([1,2,3])
    1:         Set((1,2,3))
    1:         Set({'one':1, 'two':2, 'three':3})
    1:         Set(xrange(3))
    1:         Set('abc')
    1:         Set(gooditer())
       
       #==============================================================================
       
    2: class TestSetOfSets(unittest.TestCase):
    1:     def test_constructor(self):
    1:         inner = Set([1])
    1:         outer = Set([inner])
    1:         element = outer.pop()
    1:         self.assertEqual(type(element), ImmutableSet)
    1:         outer.add(inner)        # Rebuild set of sets with .add method
    1:         outer.remove(inner)
    1:         self.assertEqual(outer, Set())   # Verify that remove worked
    1:         outer.discard(inner)    # Absence of KeyError indicates working fine
       
       #==============================================================================
       
    2: class TestBinaryOps(unittest.TestCase):
    1:     def setUp(self):
   15:         self.set = Set((2, 4, 6))
       
    1:     def test_eq(self):              # SF bug 643115
    1:         self.assertEqual(self.set, Set({2:1,4:3,6:5}))
       
    1:     def test_union_subset(self):
    1:         result = self.set | Set([2])
    1:         self.assertEqual(result, Set((2, 4, 6)))
       
    1:     def test_union_superset(self):
    1:         result = self.set | Set([2, 4, 6, 8])
    1:         self.assertEqual(result, Set([2, 4, 6, 8]))
       
    1:     def test_union_overlap(self):
    1:         result = self.set | Set([3, 4, 5])
    1:         self.assertEqual(result, Set([2, 3, 4, 5, 6]))
       
    1:     def test_union_non_overlap(self):
    1:         result = self.set | Set([8])
    1:         self.assertEqual(result, Set([2, 4, 6, 8]))
       
    1:     def test_intersection_subset(self):
    1:         result = self.set & Set((2, 4))
    1:         self.assertEqual(result, Set((2, 4)))
       
    1:     def test_intersection_superset(self):
    1:         result = self.set & Set([2, 4, 6, 8])
    1:         self.assertEqual(result, Set([2, 4, 6]))
       
    1:     def test_intersection_overlap(self):
    1:         result = self.set & Set([3, 4, 5])
    1:         self.assertEqual(result, Set([4]))
       
    1:     def test_intersection_non_overlap(self):
    1:         result = self.set & Set([8])
    1:         self.assertEqual(result, empty_set)
       
    1:     def test_sym_difference_subset(self):
    1:         result = self.set ^ Set((2, 4))
    1:         self.assertEqual(result, Set([6]))
       
    1:     def test_sym_difference_superset(self):
    1:         result = self.set ^ Set((2, 4, 6, 8))
    1:         self.assertEqual(result, Set([8]))
       
    1:     def test_sym_difference_overlap(self):
    1:         result = self.set ^ Set((3, 4, 5))
    1:         self.assertEqual(result, Set([2, 3, 5, 6]))
       
    1:     def test_sym_difference_non_overlap(self):
    1:         result = self.set ^ Set([8])
    1:         self.assertEqual(result, Set([2, 4, 6, 8]))
       
    1:     def test_cmp(self):
    1:         a, b = Set('a'), Set('b')
    1:         self.assertRaises(TypeError, cmp, a, b)
       
               # You can view this as a buglet:  cmp(a, a) does not raise TypeError,
               # because __eq__ is tried before __cmp__, and a.__eq__(a) returns True,
               # which Python thinks is good enough to synthesize a cmp() result
               # without calling __cmp__.
    1:         self.assertEqual(cmp(a, a), 0)
       
    1:         self.assertRaises(TypeError, cmp, a, 12)
    1:         self.assertRaises(TypeError, cmp, "abc", a)
       
    1:     def test_inplace_on_self(self):
    1:         t = self.set.copy()
    1:         t |= t
    1:         self.assertEqual(t, self.set)
    1:         t &= t
    1:         self.assertEqual(t, self.set)
    1:         t -= t
    1:         self.assertEqual(len(t), 0)
    1:         t = self.set.copy()
    1:         t ^= t
    1:         self.assertEqual(len(t), 0)
       
       
       #==============================================================================
       
    2: class TestUpdateOps(unittest.TestCase):
    1:     def setUp(self):
   20:         self.set = Set((2, 4, 6))
       
    1:     def test_union_subset(self):
    1:         self.set |= Set([2])
    1:         self.assertEqual(self.set, Set((2, 4, 6)))
       
    1:     def test_union_superset(self):
    1:         self.set |= Set([2, 4, 6, 8])
    1:         self.assertEqual(self.set, Set([2, 4, 6, 8]))
       
    1:     def test_union_overlap(self):
    1:         self.set |= Set([3, 4, 5])
    1:         self.assertEqual(self.set, Set([2, 3, 4, 5, 6]))
       
    1:     def test_union_non_overlap(self):
    1:         self.set |= Set([8])
    1:         self.assertEqual(self.set, Set([2, 4, 6, 8]))
       
    1:     def test_union_method_call(self):
    1:         self.set.union_update(Set([3, 4, 5]))
    1:         self.assertEqual(self.set, Set([2, 3, 4, 5, 6]))
       
    1:     def test_intersection_subset(self):
    1:         self.set &= Set((2, 4))
    1:         self.assertEqual(self.set, Set((2, 4)))
       
    1:     def test_intersection_superset(self):
    1:         self.set &= Set([2, 4, 6, 8])
    1:         self.assertEqual(self.set, Set([2, 4, 6]))
       
    1:     def test_intersection_overlap(self):
    1:         self.set &= Set([3, 4, 5])
    1:         self.assertEqual(self.set, Set([4]))
       
    1:     def test_intersection_non_overlap(self):
    1:         self.set &= Set([8])
    1:         self.assertEqual(self.set, empty_set)
       
    1:     def test_intersection_method_call(self):
    1:         self.set.intersection_update(Set([3, 4, 5]))
    1:         self.assertEqual(self.set, Set([4]))
       
    1:     def test_sym_difference_subset(self):
    1:         self.set ^= Set((2, 4))
    1:         self.assertEqual(self.set, Set([6]))
       
    1:     def test_sym_difference_superset(self):
    1:         self.set ^= Set((2, 4, 6, 8))
    1:         self.assertEqual(self.set, Set([8]))
       
    1:     def test_sym_difference_overlap(self):
    1:         self.set ^= Set((3, 4, 5))
    1:         self.assertEqual(self.set, Set([2, 3, 5, 6]))
       
    1:     def test_sym_difference_non_overlap(self):
    1:         self.set ^= Set([8])
    1:         self.assertEqual(self.set, Set([2, 4, 6, 8]))
       
    1:     def test_sym_difference_method_call(self):
    1:         self.set.symmetric_difference_update(Set([3, 4, 5]))
    1:         self.assertEqual(self.set, Set([2, 3, 5, 6]))
       
    1:     def test_difference_subset(self):
    1:         self.set -= Set((2, 4))
    1:         self.assertEqual(self.set, Set([6]))
       
    1:     def test_difference_superset(self):
    1:         self.set -= Set((2, 4, 6, 8))
    1:         self.assertEqual(self.set, Set([]))
       
    1:     def test_difference_overlap(self):
    1:         self.set -= Set((3, 4, 5))
    1:         self.assertEqual(self.set, Set([2, 6]))
       
    1:     def test_difference_non_overlap(self):
    1:         self.set -= Set([8])
    1:         self.assertEqual(self.set, Set([2, 4, 6]))
       
    1:     def test_difference_method_call(self):
    1:         self.set.difference_update(Set([3, 4, 5]))
    1:         self.assertEqual(self.set, Set([2, 6]))
       
       #==============================================================================
       
    2: class TestMutate(unittest.TestCase):
    1:     def setUp(self):
   13:         self.values = ["a", "b", "c"]
   13:         self.set = Set(self.values)
       
    1:     def test_add_present(self):
    1:         self.set.add("c")
    1:         self.assertEqual(self.set, Set("abc"))
       
    1:     def test_add_absent(self):
    1:         self.set.add("d")
    1:         self.assertEqual(self.set, Set("abcd"))
       
    1:     def test_add_until_full(self):
    1:         tmp = Set()
    1:         expected_len = 0
    4:         for v in self.values:
    3:             tmp.add(v)
    3:             expected_len += 1
    3:             self.assertEqual(len(tmp), expected_len)
    1:         self.assertEqual(tmp, self.set)
       
    1:     def test_remove_present(self):
    1:         self.set.remove("b")
    1:         self.assertEqual(self.set, Set("ac"))
       
    1:     def test_remove_absent(self):
    1:         try:
    1:             self.set.remove("d")
>>>>>>             self.fail("Removing missing element should have raised LookupError")
    1:         except LookupError:
    1:             pass
       
    1:     def test_remove_until_empty(self):
    1:         expected_len = len(self.set)
    4:         for v in self.values:
    3:             self.set.remove(v)
    3:             expected_len -= 1
    3:             self.assertEqual(len(self.set), expected_len)
       
    1:     def test_discard_present(self):
    1:         self.set.discard("c")
    1:         self.assertEqual(self.set, Set("ab"))
       
    1:     def test_discard_absent(self):
    1:         self.set.discard("d")
    1:         self.assertEqual(self.set, Set("abc"))
       
    1:     def test_clear(self):
    1:         self.set.clear()
    1:         self.assertEqual(len(self.set), 0)
       
    1:     def test_pop(self):
    1:         popped = {}
    4:         while self.set:
    3:             popped[self.set.pop()] = None
    1:         self.assertEqual(len(popped), len(self.values))
    4:         for v in self.values:
    3:             self.assertIn(v, popped)
       
    1:     def test_update_empty_tuple(self):
    1:         self.set.union_update(())
    1:         self.assertEqual(self.set, Set(self.values))
       
    1:     def test_update_unit_tuple_overlap(self):
    1:         self.set.union_update(("a",))
    1:         self.assertEqual(self.set, Set(self.values))
       
    1:     def test_update_unit_tuple_non_overlap(self):
    1:         self.set.union_update(("a", "z"))
    1:         self.assertEqual(self.set, Set(self.values + ["z"]))
       
       #==============================================================================
       
    2: class TestSubsets(unittest.TestCase):
       
    1:     case2method = {"<=": "issubset",
    1:                    ">=": "issuperset",
                         }
       
    1:     reverse = {"==": "==",
    1:                "!=": "!=",
    1:                "<":  ">",
    1:                ">":  "<",
    1:                "<=": ">=",
    1:                ">=": "<=",
                     }
       
    1:     def test_issubset(self):
    5:         x = self.left
    5:         y = self.right
   35:         for case in "!=", "==", "<", "<=", ">", ">=":
   30:             expected = case in self.cases
                   # Test the binary infix spelling.
   30:             result = eval("x" + case + "y", locals())
   30:             self.assertEqual(result, expected)
                   # Test the "friendly" method-name spelling, if one exists.
   30:             if case in TestSubsets.case2method:
   10:                 method = getattr(x, TestSubsets.case2method[case])
   10:                 result = method(y)
   10:                 self.assertEqual(result, expected)
       
                   # Now do the same for the operands reversed.
   30:             rcase = TestSubsets.reverse[case]
   30:             result = eval("y" + rcase + "x", locals())
   30:             self.assertEqual(result, expected)
   30:             if rcase in TestSubsets.case2method:
   10:                 method = getattr(y, TestSubsets.case2method[rcase])
   10:                 result = method(x)
   10:                 self.assertEqual(result, expected)
       #------------------------------------------------------------------------------
       
    2: class TestSubsetEqualEmpty(TestSubsets):
    1:     left  = Set()
    1:     right = Set()
    1:     name  = "both empty"
    1:     cases = "==", "<=", ">="
       
       #------------------------------------------------------------------------------
       
    2: class TestSubsetEqualNonEmpty(TestSubsets):
    1:     left  = Set([1, 2])
    1:     right = Set([1, 2])
    1:     name  = "equal pair"
    1:     cases = "==", "<=", ">="
       
       #------------------------------------------------------------------------------
       
    2: class TestSubsetEmptyNonEmpty(TestSubsets):
    1:     left  = Set()
    1:     right = Set([1, 2])
    1:     name  = "one empty, one non-empty"
    1:     cases = "!=", "<", "<="
       
       #------------------------------------------------------------------------------
       
    2: class TestSubsetPartial(TestSubsets):
    1:     left  = Set([1])
    1:     right = Set([1, 2])
    1:     name  = "one a non-empty proper subset of other"
    1:     cases = "!=", "<", "<="
       
       #------------------------------------------------------------------------------
       
    2: class TestSubsetNonOverlap(TestSubsets):
    1:     left  = Set([1])
    1:     right = Set([2])
    1:     name  = "neither empty, neither contains"
    1:     cases = "!="
       
       #==============================================================================
       
    2: class TestOnlySetsInBinaryOps(unittest.TestCase):
       
    1:     def test_eq_ne(self):
               # Unlike the others, this is testing that == and != *are* allowed.
    7:         self.assertEqual(self.other == self.set, False)
    7:         self.assertEqual(self.set == self.other, False)
    7:         self.assertEqual(self.other != self.set, True)
    7:         self.assertEqual(self.set != self.other, True)
       
    1:     def test_ge_gt_le_lt(self):
   14:         self.assertRaises(TypeError, lambda: self.set < self.other)
   14:         self.assertRaises(TypeError, lambda: self.set <= self.other)
   14:         self.assertRaises(TypeError, lambda: self.set > self.other)
   14:         self.assertRaises(TypeError, lambda: self.set >= self.other)
       
   14:         self.assertRaises(TypeError, lambda: self.other < self.set)
   14:         self.assertRaises(TypeError, lambda: self.other <= self.set)
   14:         self.assertRaises(TypeError, lambda: self.other > self.set)
   14:         self.assertRaises(TypeError, lambda: self.other >= self.set)
       
    1:     def test_union_update_operator(self):
    7:         try:
    7:             self.set |= self.other
    7:         except TypeError:
    7:             pass
               else:
>>>>>>             self.fail("expected TypeError")
       
    1:     def test_union_update(self):
    7:         if self.otherIsIterable:
    5:             self.set.union_update(self.other)
               else:
    2:             self.assertRaises(TypeError, self.set.union_update, self.other)
       
    1:     def test_union(self):
   14:         self.assertRaises(TypeError, lambda: self.set | self.other)
   14:         self.assertRaises(TypeError, lambda: self.other | self.set)
    7:         if self.otherIsIterable:
    5:             self.set.union(self.other)
               else:
    2:             self.assertRaises(TypeError, self.set.union, self.other)
       
    1:     def test_intersection_update_operator(self):
    7:         try:
    7:             self.set &= self.other
    7:         except TypeError:
    7:             pass
               else:
>>>>>>             self.fail("expected TypeError")
       
    1:     def test_intersection_update(self):
    7:         if self.otherIsIterable:
    5:             self.set.intersection_update(self.other)
               else:
    2:             self.assertRaises(TypeError,
    2:                               self.set.intersection_update,
    2:                               self.other)
       
    1:     def test_intersection(self):
   14:         self.assertRaises(TypeError, lambda: self.set & self.other)
   14:         self.assertRaises(TypeError, lambda: self.other & self.set)
    7:         if self.otherIsIterable:
    5:             self.set.intersection(self.other)
               else:
    2:             self.assertRaises(TypeError, self.set.intersection, self.other)
       
    1:     def test_sym_difference_update_operator(self):
    7:         try:
    7:             self.set ^= self.other
    7:         except TypeError:
    7:             pass
               else:
>>>>>>             self.fail("expected TypeError")
       
    1:     def test_sym_difference_update(self):
    7:         if self.otherIsIterable:
    5:             self.set.symmetric_difference_update(self.other)
               else:
    2:             self.assertRaises(TypeError,
    2:                               self.set.symmetric_difference_update,
    2:                               self.other)
       
    1:     def test_sym_difference(self):
   14:         self.assertRaises(TypeError, lambda: self.set ^ self.other)
   14:         self.assertRaises(TypeError, lambda: self.other ^ self.set)
    7:         if self.otherIsIterable:
    5:             self.set.symmetric_difference(self.other)
               else:
    2:             self.assertRaises(TypeError, self.set.symmetric_difference, self.other)
       
    1:     def test_difference_update_operator(self):
    7:         try:
    7:             self.set -= self.other
    7:         except TypeError:
    7:             pass
               else:
>>>>>>             self.fail("expected TypeError")
       
    1:     def test_difference_update(self):
    7:         if self.otherIsIterable:
    5:             self.set.difference_update(self.other)
               else:
    2:             self.assertRaises(TypeError,
    2:                               self.set.difference_update,
    2:                               self.other)
       
    1:     def test_difference(self):
   14:         self.assertRaises(TypeError, lambda: self.set - self.other)
   14:         self.assertRaises(TypeError, lambda: self.other - self.set)
    7:         if self.otherIsIterable:
    5:             self.set.difference(self.other)
               else:
    2:             self.assertRaises(TypeError, self.set.difference, self.other)
       
       #------------------------------------------------------------------------------
       
    2: class TestOnlySetsNumeric(TestOnlySetsInBinaryOps):
    1:     def setUp(self):
   14:         self.set   = Set((1, 2, 3))
   14:         self.other = 19
   14:         self.otherIsIterable = False
       
       #------------------------------------------------------------------------------
       
    2: class TestOnlySetsDict(TestOnlySetsInBinaryOps):
    1:     def setUp(self):
   14:         self.set   = Set((1, 2, 3))
   14:         self.other = {1:2, 3:4}
   14:         self.otherIsIterable = True
       
       #------------------------------------------------------------------------------
       
    2: class TestOnlySetsOperator(TestOnlySetsInBinaryOps):
    1:     def setUp(self):
   14:         self.set   = Set((1, 2, 3))
   14:         self.other = operator.add
   14:         self.otherIsIterable = False
       
    1:     def test_ge_gt_le_lt(self):
    1:         with test_support.check_py3k_warnings():
    1:             super(TestOnlySetsOperator, self).test_ge_gt_le_lt()
       
       #------------------------------------------------------------------------------
       
    2: class TestOnlySetsTuple(TestOnlySetsInBinaryOps):
    1:     def setUp(self):
   14:         self.set   = Set((1, 2, 3))
   14:         self.other = (2, 4, 6)
   14:         self.otherIsIterable = True
       
       #------------------------------------------------------------------------------
       
    2: class TestOnlySetsString(TestOnlySetsInBinaryOps):
    1:     def setUp(self):
   14:         self.set   = Set((1, 2, 3))
   14:         self.other = 'abc'
   14:         self.otherIsIterable = True
       
       #------------------------------------------------------------------------------
       
    2: class TestOnlySetsGenerator(TestOnlySetsInBinaryOps):
    1:     def setUp(self):
   14:         def gen():
   48:             for i in xrange(0, 10, 2):
   40:                 yield i
   14:         self.set   = Set((1, 2, 3))
   14:         self.other = gen()
   14:         self.otherIsIterable = True
       
       #------------------------------------------------------------------------------
       
    2: class TestOnlySetsofSets(TestOnlySetsInBinaryOps):
    1:     def setUp(self):
   14:         self.set   = Set((1, 2, 3))
   14:         self.other = [Set('ab'), ImmutableSet('cd')]
   14:         self.otherIsIterable = True
       
       #==============================================================================
       
    2: class TestCopying(unittest.TestCase):
       
    1:     def test_copy(self):
    5:         dup = self.set.copy()
    5:         self.assertEqual(len(dup), len(self.set))
    5:         dup_list = sorted(dup)
    5:         set_list = sorted(self.set)
    5:         self.assertEqual(len(dup_list), len(set_list))
   11:         for i, el in enumerate(dup_list):
    6:             self.assertIs(el, set_list[i])
       
    1:     def test_deep_copy(self):
    5:         dup = copy.deepcopy(self.set)
    5:         self.assertSetEqual(dup, self.set)
       
       #------------------------------------------------------------------------------
       
    2: class TestCopyingEmpty(TestCopying):
    1:     def setUp(self):
    2:         self.set = Set()
       
       #------------------------------------------------------------------------------
       
    2: class TestCopyingSingleton(TestCopying):
    1:     def setUp(self):
    2:         self.set = Set(["hello"])
       
       #------------------------------------------------------------------------------
       
    2: class TestCopyingTriple(TestCopying):
    1:     def setUp(self):
    2:         self.set = Set(["zero", 0, None])
       
    1:     def test_copy(self):
    1:         with test_support.check_py3k_warnings():
    1:             super(TestCopyingTriple, self).test_copy()
       
       #------------------------------------------------------------------------------
       
    2: class TestCopyingTuple(TestCopying):
    1:     def setUp(self):
    2:         self.set = Set([(1, 2)])
       
       #------------------------------------------------------------------------------
       
    2: class TestCopyingNested(TestCopying):
    1:     def setUp(self):
    2:         self.set = Set([((1, 2), (3, 4))])
       
       #==============================================================================
       
    2: class TestIdentities(unittest.TestCase):
    1:     def setUp(self):
  306:         self.a = Set([random.randrange(100) for i in xrange(50)])
  306:         self.b = Set([random.randrange(100) for i in xrange(50)])
       
    1:     def test_binopsVsSubsets(self):
    1:         a, b = self.a, self.b
    1:         self.assertTrue(a - b <= a)
    1:         self.assertTrue(b - a <= b)
    1:         self.assertTrue(a & b <= a)
    1:         self.assertTrue(a & b <= b)
    1:         self.assertTrue(a | b >= a)
    1:         self.assertTrue(a | b >= b)
    1:         self.assertTrue(a ^ b <= a | b)
       
    1:     def test_commutativity(self):
    1:         a, b = self.a, self.b
    1:         self.assertEqual(a&b, b&a)
    1:         self.assertEqual(a|b, b|a)
    1:         self.assertEqual(a^b, b^a)
    1:         if a != b:
    1:             self.assertNotEqual(a-b, b-a)
       
    1:     def test_reflexsive_relations(self):
    1:         a, zero = self.a, Set()
    1:         self.assertEqual(a ^ a, zero)
    1:         self.assertEqual(a - a, zero)
    1:         self.assertEqual(a | a, a)
    1:         self.assertEqual(a & a, a)
    1:         self.assertTrue(a <= a)
    1:         self.assertTrue(a >= a)
    1:         self.assertTrue(a == a)
       
    1:     def test_summations(self):
               # check that sums of parts equal the whole
    1:         a, b = self.a, self.b
    1:         self.assertEqual((a-b)|(a&b)|(b-a), a|b)
    1:         self.assertEqual((a&b)|(a^b), a|b)
    1:         self.assertEqual(a|(b-a), a|b)
    1:         self.assertEqual((a-b)|b, a|b)
    1:         self.assertEqual((a-b)|(a&b), a)
    1:         self.assertEqual((b-a)|(a&b), b)
    1:         self.assertEqual((a-b)|(b-a), a^b)
       
    1:     def test_exclusion(self):
               # check that inverse operations do not overlap
    1:         a, b, zero = self.a, self.b, Set()
    1:         self.assertEqual((a-b)&b, zero)
    1:         self.assertEqual((b-a)&a, zero)
    1:         self.assertEqual((a&b)&(a^b), zero)
       
    1:     def test_cardinality_relations(self):
    1:         a, b = self.a, self.b
    1:         self.assertEqual(len(a), len(a-b) + len(a&b))
    1:         self.assertEqual(len(b), len(b-a) + len(a&b))
    1:         self.assertEqual(len(a^b), len(a-b) + len(b-a))
    1:         self.assertEqual(len(a|b), len(a-b) + len(a&b) + len(b-a))
    1:         self.assertEqual(len(a^b) + len(a&b), len(a|b))
       
       #==============================================================================
       
       libreftest = """
       Example from the Library Reference:  Doc/lib/libsets.tex
       
       >>> from sets import Set as Base  # override _repr to get sorted output
       >>> class Set(Base):
       ...     def _repr(self):
       ...         return Base._repr(self, sorted=True)
       >>> engineers = Set(['John', 'Jane', 'Jack', 'Janice'])
       >>> programmers = Set(['Jack', 'Sam', 'Susan', 'Janice'])
       >>> managers = Set(['Jane', 'Jack', 'Susan', 'Zack'])
       >>> employees = engineers | programmers | managers           # union
       >>> engineering_management = engineers & managers            # intersection
       >>> fulltime_management = managers - engineers - programmers # difference
       >>> engineers.add('Marvin')
       >>> print engineers
       Set(['Jack', 'Jane', 'Janice', 'John', 'Marvin'])
       >>> employees.issuperset(engineers)           # superset test
       False
       >>> employees.union_update(engineers)         # update from another set
       >>> employees.issuperset(engineers)
       True
       >>> for group in [engineers, programmers, managers, employees]:
       ...     group.discard('Susan')                # unconditionally remove element
       ...     print group
       ...
       Set(['Jack', 'Jane', 'Janice', 'John', 'Marvin'])
       Set(['Jack', 'Janice', 'Sam'])
       Set(['Jack', 'Jane', 'Zack'])
       Set(['Jack', 'Jane', 'Janice', 'John', 'Marvin', 'Sam', 'Zack'])
    1: """
       
       #==============================================================================
       
    1: __test__ = {'libreftest' : libreftest}
       
    1: def test_main(verbose=None):
    1:     import doctest
    1:     from test import test_sets
    1:     test_support.run_unittest(
    1:         TestSetOfSets,
    1:         TestExceptionPropagation,
    1:         TestBasicOpsEmpty,
    1:         TestBasicOpsSingleton,
    1:         TestBasicOpsTuple,
    1:         TestBasicOpsTriple,
    1:         TestBinaryOps,
    1:         TestUpdateOps,
    1:         TestMutate,
    1:         TestSubsetEqualEmpty,
    1:         TestSubsetEqualNonEmpty,
    1:         TestSubsetEmptyNonEmpty,
    1:         TestSubsetPartial,
    1:         TestSubsetNonOverlap,
    1:         TestOnlySetsNumeric,
    1:         TestOnlySetsDict,
    1:         TestOnlySetsOperator,
    1:         TestOnlySetsTuple,
    1:         TestOnlySetsString,
    1:         TestOnlySetsGenerator,
    1:         TestOnlySetsofSets,
    1:         TestCopyingEmpty,
    1:         TestCopyingSingleton,
    1:         TestCopyingTriple,
    1:         TestCopyingTuple,
    1:         TestCopyingNested,
    1:         TestIdentities,
    1:         doctest.DocTestSuite(test_sets),
           )
       
    1: if __name__ == "__main__":
>>>>>>     test_main(verbose=True)
