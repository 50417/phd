    1: import unittest
    1: from test import test_support
       
    1: import string
    1: import StringIO
       
    1: mimetools = test_support.import_module("mimetools", deprecated=True)
       
    1: msgtext1 = mimetools.Message(StringIO.StringIO(
       """Content-Type: text/plain; charset=iso-8859-1; format=flowed
       Content-Transfer-Encoding: 8bit
       
       Foo!
    1: """))
       
    2: class MimeToolsTest(unittest.TestCase):
       
    1:     def test_decodeencode(self):
    1:         start = string.ascii_letters + "=" + string.digits + "\n"
    1:         for enc in ['7bit','8bit','base64','quoted-printable',
    9:                     'uuencode', 'x-uuencode', 'uue', 'x-uue']:
    8:             i = StringIO.StringIO(start)
    8:             o = StringIO.StringIO()
    8:             mimetools.encode(i, o, enc)
    8:             i = StringIO.StringIO(o.getvalue())
    8:             o = StringIO.StringIO()
    8:             mimetools.decode(i, o, enc)
    8:             self.assertEqual(o.getvalue(), start)
       
    1:     def test_boundary(self):
    1:         s = set([""])
  101:         for i in xrange(100):
  100:             nb = mimetools.choose_boundary()
  100:             self.assertNotIn(nb, s)
  100:             s.add(nb)
       
    1:     def test_message(self):
    1:         msg = mimetools.Message(StringIO.StringIO(msgtext1))
    1:         self.assertEqual(msg.gettype(), "text/plain")
    1:         self.assertEqual(msg.getmaintype(), "text")
    1:         self.assertEqual(msg.getsubtype(), "plain")
    1:         self.assertEqual(msg.getplist(), ["charset=iso-8859-1", "format=flowed"])
    1:         self.assertEqual(msg.getparamnames(), ["charset", "format"])
    1:         self.assertEqual(msg.getparam("charset"), "iso-8859-1")
    1:         self.assertEqual(msg.getparam("format"), "flowed")
    1:         self.assertEqual(msg.getparam("spam"), None)
    1:         self.assertEqual(msg.getencoding(), "8bit")
       
    1: def test_main():
    1:     test_support.run_unittest(MimeToolsTest)
       
    1: if __name__=="__main__":
>>>>>>     test_main()
