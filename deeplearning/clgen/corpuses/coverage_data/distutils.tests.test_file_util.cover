    1: """Tests for distutils.file_util."""
    1: import unittest
    1: import os
    1: import shutil
       
    1: from distutils.file_util import move_file, write_file, copy_file
    1: from distutils import log
    1: from distutils.tests import support
    1: from test.test_support import run_unittest
       
       
    1: requires_os_link = unittest.skipUnless(hasattr(os, "link"),
    1:                                        "test requires os.link()")
       
       
    2: class FileUtilTestCase(support.TempdirManager, unittest.TestCase):
       
    1:     def _log(self, msg, *args):
    5:         if len(args) > 0:
    5:             self._logs.append(msg % args)
               else:
>>>>>>             self._logs.append(msg)
       
    1:     def setUp(self):
    5:         super(FileUtilTestCase, self).setUp()
    5:         self._logs = []
    5:         self.old_log = log.info
    5:         log.info = self._log
    5:         tmp_dir = self.mkdtemp()
    5:         self.source = os.path.join(tmp_dir, 'f1')
    5:         self.target = os.path.join(tmp_dir, 'f2')
    5:         self.target_dir = os.path.join(tmp_dir, 'd1')
       
    1:     def tearDown(self):
    5:         log.info = self.old_log
    5:         super(FileUtilTestCase, self).tearDown()
       
    1:     def test_move_file_verbosity(self):
    1:         f = open(self.source, 'w')
    1:         try:
    1:             f.write('some content')
               finally:
    1:             f.close()
       
    1:         move_file(self.source, self.target, verbose=0)
    1:         wanted = []
    1:         self.assertEqual(self._logs, wanted)
       
               # back to original state
    1:         move_file(self.target, self.source, verbose=0)
       
    1:         move_file(self.source, self.target, verbose=1)
    1:         wanted = ['moving %s -> %s' % (self.source, self.target)]
    1:         self.assertEqual(self._logs, wanted)
       
               # back to original state
    1:         move_file(self.target, self.source, verbose=0)
       
    1:         self._logs = []
               # now the target is a dir
    1:         os.mkdir(self.target_dir)
    1:         move_file(self.source, self.target_dir, verbose=1)
    1:         wanted = ['moving %s -> %s' % (self.source, self.target_dir)]
    1:         self.assertEqual(self._logs, wanted)
       
    1:     def test_write_file(self):
    1:         lines = ['a', 'b', 'c']
    1:         dir = self.mkdtemp()
    1:         foo = os.path.join(dir, 'foo')
    1:         write_file(foo, lines)
    4:         content = [line.strip() for line in open(foo).readlines()]
    1:         self.assertEqual(content, lines)
       
    1:     def test_copy_file(self):
    1:         src_dir = self.mkdtemp()
    1:         foo = os.path.join(src_dir, 'foo')
    1:         write_file(foo, 'content')
    1:         dst_dir = self.mkdtemp()
    1:         copy_file(foo, dst_dir)
    1:         self.assertTrue(os.path.exists(os.path.join(dst_dir, 'foo')))
       
    1:     @requires_os_link
           def test_copy_file_hard_link(self):
    1:         with open(self.source, 'w') as f:
    1:             f.write('some content')
    1:         st = os.stat(self.source)
    1:         copy_file(self.source, self.target, link='hard')
    1:         st2 = os.stat(self.source)
    1:         st3 = os.stat(self.target)
    1:         self.assertTrue(os.path.samestat(st, st2), (st, st2))
    1:         self.assertTrue(os.path.samestat(st2, st3), (st2, st3))
    1:         with open(self.source, 'r') as f:
    1:             self.assertEqual(f.read(), 'some content')
       
    1:     @requires_os_link
           def test_copy_file_hard_link_failure(self):
               # If hard linking fails, copy_file() falls back on copying file
               # (some special filesystems don't support hard linking even under
               #  Unix, see issue #8876).
    1:         with open(self.source, 'w') as f:
    1:             f.write('some content')
    1:         st = os.stat(self.source)
    1:         def _os_link(*args):
    1:             raise OSError(0, "linking unsupported")
    1:         old_link = os.link
    1:         os.link = _os_link
    1:         try:
    1:             copy_file(self.source, self.target, link='hard')
               finally:
    1:             os.link = old_link
    1:         st2 = os.stat(self.source)
    1:         st3 = os.stat(self.target)
    1:         self.assertTrue(os.path.samestat(st, st2), (st, st2))
    1:         self.assertFalse(os.path.samestat(st2, st3), (st2, st3))
    3:         for fn in (self.source, self.target):
    2:             with open(fn, 'r') as f:
    2:                 self.assertEqual(f.read(), 'some content')
       
       
    1: def test_suite():
    1:     return unittest.makeSuite(FileUtilTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     run_unittest(test_suite())
