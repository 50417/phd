    1: import unittest
    1: from test import test_support
    1: import operator
    1: from sys import maxint
    1: maxsize = test_support.MAX_Py_ssize_t
    1: minsize = -maxsize-1
       
    2: class oldstyle:
    1:     def __index__(self):
  133:         return self.ind
       
    2: class newstyle(object):
    1:     def __index__(self):
  138:         return self.ind
       
    2: class TrapInt(int):
    1:     def __index__(self):
>>>>>>         return self
       
    2: class TrapLong(long):
    1:     def __index__(self):
>>>>>>         return self
       
    2: class BaseTestCase(unittest.TestCase):
    1:     def setUp(self):
    5:         self.o = oldstyle()
    5:         self.n = newstyle()
       
    1:     def test_basic(self):
    1:         self.o.ind = -2
    1:         self.n.ind = 2
    1:         self.assertEqual(operator.index(self.o), -2)
    1:         self.assertEqual(operator.index(self.n), 2)
       
    1:     def test_slice(self):
    1:         self.o.ind = 1
    1:         self.n.ind = 2
    1:         slc = slice(self.o, self.o, self.o)
    1:         check_slc = slice(1, 1, 1)
    1:         self.assertEqual(slc.indices(self.o), check_slc.indices(1))
    1:         slc = slice(self.n, self.n, self.n)
    1:         check_slc = slice(2, 2, 2)
    1:         self.assertEqual(slc.indices(self.n), check_slc.indices(2))
       
    1:     def test_wrappers(self):
    1:         self.o.ind = 4
    1:         self.n.ind = 5
    1:         self.assertEqual(6 .__index__(), 6)
    1:         self.assertEqual(-7L.__index__(), -7)
    1:         self.assertEqual(self.o.__index__(), 4)
    1:         self.assertEqual(self.n.__index__(), 5)
    1:         self.assertEqual(True.__index__(), 1)
    1:         self.assertEqual(False.__index__(), 0)
       
    1:     def test_subclasses(self):
    1:         r = range(10)
    1:         self.assertEqual(r[TrapInt(5):TrapInt(10)], r[5:10])
    1:         self.assertEqual(r[TrapLong(5):TrapLong(10)], r[5:10])
    1:         self.assertEqual(slice(TrapInt()).indices(0), (0,0,1))
    1:         self.assertEqual(slice(TrapLong(0)).indices(0), (0,0,1))
       
    1:     def test_error(self):
    1:         self.o.ind = 'dumb'
    1:         self.n.ind = 'bad'
    1:         self.assertRaises(TypeError, operator.index, self.o)
    1:         self.assertRaises(TypeError, operator.index, self.n)
    1:         self.assertRaises(TypeError, slice(self.o).indices, 0)
    1:         self.assertRaises(TypeError, slice(self.n).indices, 0)
       
       
    2: class SeqTestCase(unittest.TestCase):
           # This test case isn't run directly. It just defines common tests
           # to the different sequence types below
    1:     def setUp(self):
   74:         self.o = oldstyle()
   74:         self.n = newstyle()
   74:         self.o2 = oldstyle()
   74:         self.n2 = newstyle()
       
    1:     def test_index(self):
    9:         self.o.ind = -2
    9:         self.n.ind = 2
    9:         self.assertEqual(self.seq[self.n], self.seq[2])
    9:         self.assertEqual(self.seq[self.o], self.seq[-2])
       
    1:     def test_slice(self):
    9:         self.o.ind = 1
    9:         self.o2.ind = 3
    9:         self.n.ind = 2
    9:         self.n2.ind = 4
    9:         self.assertEqual(self.seq[self.o:self.o2], self.seq[1:3])
    9:         self.assertEqual(self.seq[self.n:self.n2], self.seq[2:4])
       
    1:     def test_slice_bug7532a(self):
    9:         seqlen = len(self.seq)
    9:         self.o.ind = int(seqlen * 1.5)
    9:         self.n.ind = seqlen + 2
    9:         self.assertEqual(self.seq[self.o:], self.seq[0:0])
    9:         self.assertEqual(self.seq[:self.o], self.seq)
    9:         self.assertEqual(self.seq[self.n:], self.seq[0:0])
    9:         self.assertEqual(self.seq[:self.n], self.seq)
       
    1:     def test_slice_bug7532b(self):
    9:         if isinstance(self.seq, ClassicSeq):
    2:             self.skipTest('test fails for ClassicSeq')
               # These tests fail for ClassicSeq (see bug #7532)
    7:         seqlen = len(self.seq)
    7:         self.o2.ind = -seqlen - 2
    7:         self.n2.ind = -int(seqlen * 1.5)
    7:         self.assertEqual(self.seq[self.o2:], self.seq)
    7:         self.assertEqual(self.seq[:self.o2], self.seq[0:0])
    7:         self.assertEqual(self.seq[self.n2:], self.seq)
    7:         self.assertEqual(self.seq[:self.n2], self.seq[0:0])
       
    1:     def test_repeat(self):
    9:         self.o.ind = 3
    9:         self.n.ind = 2
    9:         self.assertEqual(self.seq * self.o, self.seq * 3)
    9:         self.assertEqual(self.seq * self.n, self.seq * 2)
    9:         self.assertEqual(self.o * self.seq, self.seq * 3)
    9:         self.assertEqual(self.n * self.seq, self.seq * 2)
       
    1:     def test_wrappers(self):
    9:         self.o.ind = 4
    9:         self.n.ind = 5
    9:         self.assertEqual(self.seq.__getitem__(self.o), self.seq[4])
    9:         self.assertEqual(self.seq.__mul__(self.o), self.seq * 4)
    9:         self.assertEqual(self.seq.__rmul__(self.o), self.seq * 4)
    9:         self.assertEqual(self.seq.__getitem__(self.n), self.seq[5])
    9:         self.assertEqual(self.seq.__mul__(self.n), self.seq * 5)
    9:         self.assertEqual(self.seq.__rmul__(self.n), self.seq * 5)
       
    1:     def test_subclasses(self):
    9:         self.assertEqual(self.seq[TrapInt()], self.seq[0])
    9:         self.assertEqual(self.seq[TrapLong()], self.seq[0])
       
    1:     def test_error(self):
    9:         self.o.ind = 'dumb'
    9:         self.n.ind = 'bad'
   27:         indexobj = lambda x, obj: obj.seq[x]
    9:         self.assertRaises(TypeError, indexobj, self.o, self)
    9:         self.assertRaises(TypeError, indexobj, self.n, self)
   27:         sliceobj = lambda x, obj: obj.seq[x:]
    9:         self.assertRaises(TypeError, sliceobj, self.o, self)
    9:         self.assertRaises(TypeError, sliceobj, self.n, self)
       
       
    2: class ListTestCase(SeqTestCase):
    1:     seq = [0,10,20,30,40,50]
       
    1:     def test_setdelitem(self):
    1:         self.o.ind = -2
    1:         self.n.ind = 2
    1:         lst = list('ab!cdefghi!j')
    1:         del lst[self.o]
    1:         del lst[self.n]
    1:         lst[self.o] = 'X'
    1:         lst[self.n] = 'Y'
    1:         self.assertEqual(lst, list('abYdefghXj'))
       
    1:         lst = [5, 6, 7, 8, 9, 10, 11]
    1:         lst.__setitem__(self.n, "here")
    1:         self.assertEqual(lst, [5, 6, "here", 8, 9, 10, 11])
    1:         lst.__delitem__(self.n)
    1:         self.assertEqual(lst, [5, 6, 8, 9, 10, 11])
       
    1:     def test_inplace_repeat(self):
    1:         self.o.ind = 2
    1:         self.n.ind = 3
    1:         lst = [6, 4]
    1:         lst *= self.o
    1:         self.assertEqual(lst, [6, 4, 6, 4])
    1:         lst *= self.n
    1:         self.assertEqual(lst, [6, 4, 6, 4] * 3)
       
    1:         lst = [5, 6, 7, 8, 9, 11]
    1:         l2 = lst.__imul__(self.n)
    1:         self.assertIs(l2, lst)
    1:         self.assertEqual(lst, [5, 6, 7, 8, 9, 11] * 3)
       
       
    2: class _BaseSeq:
       
    1:     def __init__(self, iterable):
   68:         self._list = list(iterable)
       
    1:     def __repr__(self):
>>>>>>         return repr(self._list)
       
    1:     def __eq__(self, other):
   76:         return self._list == other
       
    1:     def __len__(self):
   10:         return len(self._list)
       
    1:     def __mul__(self, n):
   64:         return self.__class__(self._list*n)
    1:     __rmul__ = __mul__
       
    1:     def __getitem__(self, index):
   84:         return self._list[index]
       
       
    2: class _GetSliceMixin:
       
    1:     def __getslice__(self, i, j):
   26:         return self._list.__getslice__(i, j)
       
       
    2: class ClassicSeq(_BaseSeq): pass
    2: class NewSeq(_BaseSeq, object): pass
    2: class ClassicSeqDeprecated(_GetSliceMixin, ClassicSeq): pass
    2: class NewSeqDeprecated(_GetSliceMixin, NewSeq): pass
       
       
    2: class TupleTestCase(SeqTestCase):
    1:     seq = (0,10,20,30,40,50)
       
    2: class StringTestCase(SeqTestCase):
    1:     seq = "this is a test"
       
    2: class ByteArrayTestCase(SeqTestCase):
    1:     seq = bytearray("this is a test")
       
    2: class UnicodeTestCase(SeqTestCase):
    1:     seq = u"this is a test"
       
    2: class ClassicSeqTestCase(SeqTestCase):
    1:     seq = ClassicSeq((0,10,20,30,40,50))
       
    2: class NewSeqTestCase(SeqTestCase):
    1:     seq = NewSeq((0,10,20,30,40,50))
       
    2: class ClassicSeqDeprecatedTestCase(SeqTestCase):
    1:     seq = ClassicSeqDeprecated((0,10,20,30,40,50))
       
    2: class NewSeqDeprecatedTestCase(SeqTestCase):
    1:     seq = NewSeqDeprecated((0,10,20,30,40,50))
       
       
    2: class XRangeTestCase(unittest.TestCase):
       
    1:     def test_xrange(self):
    1:         n = newstyle()
    1:         n.ind = 5
    1:         self.assertEqual(xrange(1, 20)[n], 6)
    1:         self.assertEqual(xrange(1, 20).__getitem__(n), 6)
       
    2: class OverflowTestCase(unittest.TestCase):
       
    1:     def setUp(self):
    4:         self.pos = 2**100
    4:         self.neg = -self.pos
       
    1:     def test_large_longs(self):
    1:         self.assertEqual(self.pos.__index__(), self.pos)
    1:         self.assertEqual(self.neg.__index__(), self.neg)
       
    1:     def _getitem_helper(self, base):
    2:         class GetItem(base):
    1:             def __len__(self):
>>>>>>                 return maxint # cannot return long here
    1:             def __getitem__(self, key):
    4:                 return key
    1:         x = GetItem()
    1:         self.assertEqual(x[self.pos], self.pos)
    1:         self.assertEqual(x[self.neg], self.neg)
    1:         self.assertEqual(x[self.neg:self.pos].indices(maxsize),
    1:                          (0, maxsize, 1))
    1:         self.assertEqual(x[self.neg:self.pos:1].indices(maxsize),
    1:                          (0, maxsize, 1))
       
    1:     def _getslice_helper_deprecated(self, base):
    4:         class GetItem(base):
    2:             def __len__(self):
    2:                 return maxint # cannot return long here
    2:             def __getitem__(self, key):
    6:                 return key
    2:             def __getslice__(self, i, j):
    2:                 return i, j
    2:         x = GetItem()
    2:         self.assertEqual(x[self.pos], self.pos)
    2:         self.assertEqual(x[self.neg], self.neg)
    2:         self.assertEqual(x[self.neg:self.pos], (maxint+minsize, maxsize))
    2:         self.assertEqual(x[self.neg:self.pos:1].indices(maxsize),
    2:                          (0, maxsize, 1))
       
    1:     def test_getitem(self):
    1:         self._getitem_helper(object)
    1:         with test_support.check_py3k_warnings():
    1:             self._getslice_helper_deprecated(object)
       
    1:     def test_getitem_classic(self):
    2:         class Empty: pass
               # XXX This test fails (see bug #7532)
               #self._getitem_helper(Empty)
    1:         with test_support.check_py3k_warnings():
    1:             self._getslice_helper_deprecated(Empty)
       
    1:     def test_sequence_repeat(self):
    2:         self.assertRaises(OverflowError, lambda: "a" * self.pos)
    2:         self.assertRaises(OverflowError, lambda: "a" * self.neg)
       
       
    1: def test_main():
    1:     test_support.run_unittest(
    1:         BaseTestCase,
    1:         ListTestCase,
    1:         TupleTestCase,
    1:         ByteArrayTestCase,
    1:         StringTestCase,
    1:         UnicodeTestCase,
    1:         ClassicSeqTestCase,
    1:         NewSeqTestCase,
    1:         XRangeTestCase,
    1:         OverflowTestCase,
           )
    1:     with test_support.check_py3k_warnings():
    1:         test_support.run_unittest(
    1:             ClassicSeqDeprecatedTestCase,
    1:             NewSeqDeprecatedTestCase,
               )
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
