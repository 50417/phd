    1: """Tests for distutils.command.build_scripts."""
       
    1: import os
    1: import unittest
       
    1: from distutils.command.build_scripts import build_scripts
    1: from distutils.core import Distribution
    1: import sysconfig
       
    1: from distutils.tests import support
    1: from test.test_support import run_unittest
       
       
    2: class BuildScriptsTestCase(support.TempdirManager,
    1:                            support.LoggingSilencer,
    1:                            unittest.TestCase):
       
    1:     def test_default_settings(self):
    1:         cmd = self.get_build_scripts_cmd("/foo/bar", [])
    1:         self.assertFalse(cmd.force)
    1:         self.assertIsNone(cmd.build_dir)
       
    1:         cmd.finalize_options()
       
    1:         self.assertTrue(cmd.force)
    1:         self.assertEqual(cmd.build_dir, "/foo/bar")
       
    1:     def test_build(self):
    1:         source = self.mkdtemp()
    1:         target = self.mkdtemp()
    1:         expected = self.write_sample_scripts(source)
       
    1:         cmd = self.get_build_scripts_cmd(target,
    1:                                          [os.path.join(source, fn)
    4:                                           for fn in expected])
    1:         cmd.finalize_options()
    1:         cmd.run()
       
    1:         built = os.listdir(target)
    4:         for name in expected:
    3:             self.assertIn(name, built)
       
    1:     def get_build_scripts_cmd(self, target, scripts):
    3:         import sys
    3:         dist = Distribution()
    3:         dist.scripts = scripts
    3:         dist.command_obj["build"] = support.DummyCommand(
    3:             build_scripts=target,
    3:             force=1,
    3:             executable=sys.executable
                   )
    3:         return build_scripts(dist)
       
    1:     def write_sample_scripts(self, dir):
    2:         expected = []
    2:         expected.append("script1.py")
    2:         self.write_script(dir, "script1.py",
    2:                           ("#! /usr/bin/env python2.3\n"
                                  "# bogus script w/ Python sh-bang\n"
                                  "pass\n"))
    2:         expected.append("script2.py")
    2:         self.write_script(dir, "script2.py",
    2:                           ("#!/usr/bin/python\n"
                                  "# bogus script w/ Python sh-bang\n"
                                  "pass\n"))
    2:         expected.append("shell.sh")
    2:         self.write_script(dir, "shell.sh",
    2:                           ("#!/bin/sh\n"
                                  "# bogus shell script w/ sh-bang\n"
                                  "exit 0\n"))
    2:         return expected
       
    1:     def write_script(self, dir, name, text):
    6:         f = open(os.path.join(dir, name), "w")
    6:         try:
    6:             f.write(text)
               finally:
    6:             f.close()
       
    1:     def test_version_int(self):
    1:         source = self.mkdtemp()
    1:         target = self.mkdtemp()
    1:         expected = self.write_sample_scripts(source)
       
       
    1:         cmd = self.get_build_scripts_cmd(target,
    1:                                          [os.path.join(source, fn)
    4:                                           for fn in expected])
    1:         cmd.finalize_options()
       
               # http://bugs.python.org/issue4524
               #
               # On linux-g++-32 with command line `./configure --enable-ipv6
               # --with-suffix=3`, python is compiled okay but the build scripts
               # failed when writing the name of the executable
    1:         old = sysconfig.get_config_vars().get('VERSION')
    1:         sysconfig._CONFIG_VARS['VERSION'] = 4
    1:         try:
    1:             cmd.run()
               finally:
    1:             if old is not None:
    1:                 sysconfig._CONFIG_VARS['VERSION'] = old
       
    1:         built = os.listdir(target)
    4:         for name in expected:
    3:             self.assertIn(name, built)
       
    1: def test_suite():
    1:     return unittest.makeSuite(BuildScriptsTestCase)
       
    1: if __name__ == "__main__":
>>>>>>     run_unittest(test_suite())
