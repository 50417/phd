    1: from test.test_support import have_unicode, run_unittest
    1: import unittest
       
       
    2: class base_set:
    1:     def __init__(self, el):
    3:         self.el = el
       
    2: class set(base_set):
    1:     def __contains__(self, el):
    2:         return self.el == el
       
    2: class seq(base_set):
    1:     def __getitem__(self, n):
    3:         return [self.el][n]
       
       
    2: class TestContains(unittest.TestCase):
    1:     def test_common_tests(self):
    1:         a = base_set(1)
    1:         b = set(1)
    1:         c = seq(1)
    1:         self.assertIn(1, b)
    1:         self.assertNotIn(0, b)
    1:         self.assertIn(1, c)
    1:         self.assertNotIn(0, c)
    2:         self.assertRaises(TypeError, lambda: 1 in a)
    2:         self.assertRaises(TypeError, lambda: 1 not in a)
       
               # test char in string
    1:         self.assertIn('c', 'abc')
    1:         self.assertNotIn('d', 'abc')
       
    1:         self.assertIn('', '')
    1:         self.assertIn('', 'abc')
       
    2:         self.assertRaises(TypeError, lambda: None in 'abc')
       
    1:     if have_unicode:
    1:         def test_char_in_unicode(self):
    1:             self.assertIn('c', unicode('abc'))
    1:             self.assertNotIn('d', unicode('abc'))
       
    1:             self.assertIn('', unicode(''))
    1:             self.assertIn(unicode(''), '')
    1:             self.assertIn(unicode(''), unicode(''))
    1:             self.assertIn('', unicode('abc'))
    1:             self.assertIn(unicode(''), 'abc')
    1:             self.assertIn(unicode(''), unicode('abc'))
       
    2:             self.assertRaises(TypeError, lambda: None in unicode('abc'))
       
                   # test Unicode char in Unicode
    1:             self.assertIn(unicode('c'), unicode('abc'))
    1:             self.assertNotIn(unicode('d'), unicode('abc'))
       
                   # test Unicode char in string
    1:             self.assertIn(unicode('c'), 'abc')
    1:             self.assertNotIn(unicode('d'), 'abc')
       
    1:     def test_builtin_sequence_types(self):
               # a collection of tests on builtin sequence types
    1:         a = range(10)
   11:         for i in a:
   10:             self.assertIn(i, a)
    1:         self.assertNotIn(16, a)
    1:         self.assertNotIn(a, a)
       
    1:         a = tuple(a)
   11:         for i in a:
   10:             self.assertIn(i, a)
    1:         self.assertNotIn(16, a)
    1:         self.assertNotIn(a, a)
       
    2:         class Deviant1:
                   """Behaves strangely when compared
       
                   This class is designed to make sure that the contains code
                   works when the list is modified during the check.
    1:             """
    1:             aList = range(15)
    1:             def __cmp__(self, other):
   13:                 if other == 12:
    1:                     self.aList.remove(12)
    1:                     self.aList.remove(13)
    1:                     self.aList.remove(14)
   13:                 return 1
       
    1:         self.assertNotIn(Deviant1(), Deviant1.aList)
       
    2:         class Deviant2:
                   """Behaves strangely when compared
       
                   This class raises an exception during comparison.  That in
                   turn causes the comparison to fail with a TypeError.
    1:             """
    1:             def __cmp__(self, other):
    1:                 if other == 4:
>>>>>>                     raise RuntimeError, "gotcha"
       
    1:         try:
    1:             self.assertNotIn(Deviant2(), a)
    1:         except TypeError:
    1:             pass
       
       
    1: def test_main():
    1:     run_unittest(TestContains)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
