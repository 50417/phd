       # Tests universal newline support for both reading and parsing files.
       
       # NOTE: this file tests the new `io` library backported from Python 3.x.
       # Similar tests for the builtin file object can be found in test_univnewlines2k.py.
       
    1: from __future__ import print_function
    1: from __future__ import unicode_literals
       
    1: import io
    1: import _pyio as pyio
    1: import unittest
    1: import os
    1: import sys
    1: from test import test_support as support
       
    1: if not hasattr(sys.stdin, 'newlines'):
>>>>>>     raise unittest.SkipTest(
>>>>>>         "This Python does not have universal newline support")
       
    1: FATX = 'x' * (2**14)
       
       DATA_TEMPLATE = [
    1:     "line1=1",
           "line2='this is a very long line designed to go past any default " +
    1:         "buffer limits that exist in io.py but we also want to test " +
    1:         "the uncommon case, naturally.'",
    1:     "def line3():pass",
    1:     "line4 = '%s'" % FATX,
           ]
       
    1: DATA_LF = "\n".join(DATA_TEMPLATE) + "\n"
    1: DATA_CR = "\r".join(DATA_TEMPLATE) + "\r"
    1: DATA_CRLF = "\r\n".join(DATA_TEMPLATE) + "\r\n"
       
       # Note that DATA_MIXED also tests the ability to recognize a lone \r
       # before end-of-file.
    1: DATA_MIXED = "\n".join(DATA_TEMPLATE) + "\r"
    5: DATA_SPLIT = [x + "\n" for x in DATA_TEMPLATE]
       
    2: class TestGenericUnivNewlines(unittest.TestCase):
           # use a class variable DATA to define the data to write to the file
           # and a class variable NEWLINE to set the expected newlines value
    1:     READMODE = 'r'
    1:     WRITEMODE = 'wb'
       
    1:     def setUp(self):
   34:         data = self.DATA
   34:         if "b" in self.WRITEMODE:
   34:             data = data.encode("ascii")
   34:         with self.open(support.TESTFN, self.WRITEMODE) as fp:
   34:             fp.write(data)
       
    1:     def tearDown(self):
   34:         try:
   34:             os.unlink(support.TESTFN)
>>>>>>         except:
>>>>>>             pass
       
    1:     def test_read(self):
    8:         with self.open(support.TESTFN, self.READMODE) as fp:
    8:             data = fp.read()
    8:         self.assertEqual(data, DATA_LF)
    8:         self.assertEqual(set(fp.newlines), set(self.NEWLINE))
       
    1:     def test_readlines(self):
    8:         with self.open(support.TESTFN, self.READMODE) as fp:
    8:             data = fp.readlines()
    8:         self.assertEqual(data, DATA_SPLIT)
    8:         self.assertEqual(set(fp.newlines), set(self.NEWLINE))
       
    1:     def test_readline(self):
    8:         with self.open(support.TESTFN, self.READMODE) as fp:
    8:             data = []
    8:             d = fp.readline()
   40:             while d:
   32:                 data.append(d)
   32:                 d = fp.readline()
    8:         self.assertEqual(data, DATA_SPLIT)
    8:         self.assertEqual(set(fp.newlines), set(self.NEWLINE))
       
    1:     def test_seek(self):
    8:         with self.open(support.TESTFN, self.READMODE) as fp:
    8:             fp.readline()
    8:             pos = fp.tell()
    8:             data = fp.readlines()
    8:             self.assertEqual(data, DATA_SPLIT[1:])
    8:             fp.seek(pos)
    8:             data = fp.readlines()
    8:         self.assertEqual(data, DATA_SPLIT[1:])
       
       
    2: class TestCRNewlines(TestGenericUnivNewlines):
    1:     NEWLINE = '\r'
    1:     DATA = DATA_CR
       
    2: class TestLFNewlines(TestGenericUnivNewlines):
    1:     NEWLINE = '\n'
    1:     DATA = DATA_LF
       
    2: class TestCRLFNewlines(TestGenericUnivNewlines):
    1:     NEWLINE = '\r\n'
    1:     DATA = DATA_CRLF
       
    1:     def test_tell(self):
    2:         with self.open(support.TESTFN, self.READMODE) as fp:
    2:             self.assertEqual(repr(fp.newlines), repr(None))
    2:             data = fp.readline()
    2:             pos = fp.tell()
    2:         self.assertEqual(repr(fp.newlines), repr(self.NEWLINE))
       
    2: class TestMixedNewlines(TestGenericUnivNewlines):
    1:     NEWLINE = ('\r', '\n')
    1:     DATA = DATA_MIXED
       
       
    1: def test_main():
    1:     base_tests = (TestCRNewlines,
    1:                   TestLFNewlines,
    1:                   TestCRLFNewlines,
    1:                   TestMixedNewlines)
    1:     tests = []
           # Test the C and Python implementations.
    5:     for test in base_tests:
    8:         class CTest(test):
    4:             open = io.open
    4:         CTest.__name__ = str("C" + test.__name__)
    8:         class PyTest(test):
    4:             open = staticmethod(pyio.open)
    4:         PyTest.__name__ = str("Py" + test.__name__)
    4:         tests.append(CTest)
    4:         tests.append(PyTest)
    1:     support.run_unittest(*tests)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
