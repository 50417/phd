    1: """ Tests for the linecache module """
       
    1: import linecache
    1: import unittest
    1: import os.path
    1: from test import support
       
       
    1: FILENAME = linecache.__file__
    1: INVALID_NAME = '!@$)(!@#_1'
    1: EMPTY = ''
    1: TESTS = 'inspect_fodder inspect_fodder2 mapping_tests'
    1: TESTS = TESTS.split()
    1: TEST_PATH = support.TEST_HOME_DIR
    1: MODULES = "linecache abc".split()
    1: MODULE_PATH = os.path.dirname(FILENAME)
       
       SOURCE_1 = '''
       " Docstring "
       
       def function():
           return result
       
    1: '''
       
       SOURCE_2 = '''
       def f():
           return 1 + 1
       
       a = f()
       
    1: '''
       
       SOURCE_3 = '''
       def f():
    1:     return 3''' # No ending newline
       
       
    2: class LineCacheTests(unittest.TestCase):
       
    1:     def test_getline(self):
    1:         getline = linecache.getline
       
               # Bad values for line number should return an empty string
    1:         self.assertEqual(getline(FILENAME, 2**15), EMPTY)
    1:         self.assertEqual(getline(FILENAME, -1), EMPTY)
       
               # Float values currently raise TypeError, should it?
    1:         self.assertRaises(TypeError, getline, FILENAME, 1.1)
       
               # Bad filenames should return an empty string
    1:         self.assertEqual(getline(EMPTY, 1), EMPTY)
    1:         self.assertEqual(getline(INVALID_NAME, 1), EMPTY)
       
               # Check whether lines correspond to those from file iteration
    4:         for entry in TESTS:
    3:             filename = os.path.join(TEST_PATH, entry) + '.py'
  846:             for index, line in enumerate(open(filename)):
  843:                 self.assertEqual(line, getline(filename, index + 1))
       
               # Check module loading
    3:         for entry in MODULES:
    2:             filename = os.path.join(MODULE_PATH, entry) + '.py'
  326:             for index, line in enumerate(open(filename)):
  324:                 self.assertEqual(line, getline(filename, index + 1))
       
               # Check that bogus data isn't returned (issue #1309567)
    1:         empty = linecache.getlines('a/b/c/__init__.py')
    1:         self.assertEqual(empty, [])
       
    1:     def test_no_ending_newline(self):
    1:         self.addCleanup(support.unlink, support.TESTFN)
    1:         with open(support.TESTFN, "w") as fp:
    1:             fp.write(SOURCE_3)
    1:         lines = linecache.getlines(support.TESTFN)
    1:         self.assertEqual(lines, ["\n", "def f():\n", "    return 3\n"])
       
    1:     def test_clearcache(self):
    1:         cached = []
    4:         for entry in TESTS:
    3:             filename = os.path.join(TEST_PATH, entry) + '.py'
    3:             cached.append(filename)
    3:             linecache.getline(filename, 1)
       
               # Are all files cached?
    4:         cached_empty = [fn for fn in cached if fn not in linecache.cache]
    1:         self.assertEqual(cached_empty, [])
       
               # Can we clear the cache?
    1:         linecache.clearcache()
    4:         cached_empty = [fn for fn in cached if fn in linecache.cache]
    1:         self.assertEqual(cached_empty, [])
       
    1:     def test_checkcache(self):
    1:         getline = linecache.getline
               # Create a source file and cache its contents
    1:         source_name = support.TESTFN + '.py'
    1:         self.addCleanup(support.unlink, source_name)
    1:         with open(source_name, 'w') as source:
    1:             source.write(SOURCE_1)
    1:         getline(source_name, 1)
       
               # Keep a copy of the old contents
    1:         source_list = []
    1:         with open(source_name) as source:
    7:             for index, line in enumerate(source):
    6:                 self.assertEqual(line, getline(source_name, index + 1))
    6:                 source_list.append(line)
       
    1:         with open(source_name, 'w') as source:
    1:             source.write(SOURCE_2)
       
               # Try to update a bogus cache entry
    1:         linecache.checkcache('dummy')
       
               # Check that the cache matches the old contents
    7:         for index, line in enumerate(source_list):
    6:             self.assertEqual(line, getline(source_name, index + 1))
       
               # Update the cache and check whether it matches the new source file
    1:         linecache.checkcache(source_name)
    1:         with open(source_name) as source:
    7:             for index, line in enumerate(source):
    6:                 self.assertEqual(line, getline(source_name, index + 1))
    6:                 source_list.append(line)
       
    1:     def test_memoryerror(self):
    1:         lines = linecache.getlines(FILENAME)
    1:         self.assertTrue(lines)
    1:         def raise_memoryerror(*args, **kwargs):
    1:             raise MemoryError
    1:         with support.swap_attr(linecache, 'updatecache', raise_memoryerror):
    1:             lines2 = linecache.getlines(FILENAME)
    1:         self.assertEqual(lines2, lines)
       
    1:         linecache.clearcache()
    1:         with support.swap_attr(linecache, 'updatecache', raise_memoryerror):
    1:             lines3 = linecache.getlines(FILENAME)
    1:         self.assertEqual(lines3, [])
    1:         self.assertEqual(linecache.getlines(FILENAME), lines)
       
       
    1: def test_main():
    1:     support.run_unittest(LineCacheTests)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
