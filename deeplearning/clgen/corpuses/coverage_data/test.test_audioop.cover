    1: import audioop
    1: import sys
    1: import unittest
    1: import struct
    1: from test.test_support import run_unittest
       
       
    1: formats = {
    1:     1: 'b',
    1:     2: 'h',
    1:     4: 'i',
       }
       
    1: def pack(width, data):
  115:     return struct.pack('=%d%s' % (len(data), formats[width]), *data)
       
    1: packs = {
   32:     1: lambda *data: pack(1, data),
   42:     2: lambda *data: pack(2, data),
   44:     4: lambda *data: pack(4, data),
       }
    5: maxvalues = {w: (1 << (8 * w - 1)) - 1 for w in (1, 2, 4)}
    5: minvalues = {w: -1 << (8 * w - 1) for w in (1, 2, 4)}
       
    1: datas = {
    1:     1: b'\x00\x12\x45\xbb\x7f\x80\xff',
    1:     2: packs[2](0, 0x1234, 0x4567, -0x4567, 0x7fff, -0x8000, -1),
    1:     4: packs[4](0, 0x12345678, 0x456789ab, -0x456789ab,
    1:                 0x7fffffff, -0x80000000, -1),
       }
       
       INVALID_DATA = [
    1:     (b'abc', 0),
    1:     (b'abc', 2),
    1:     (b'abc', 4),
       ]
       
       
    2: class TestAudioop(unittest.TestCase):
       
    1:     def test_max(self):
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.max(b'', w), 0)
    3:             p = packs[w]
    3:             self.assertEqual(audioop.max(p(5), w), 5)
    3:             self.assertEqual(audioop.max(p(5, -8, -1), w), 8)
    3:             self.assertEqual(audioop.max(p(maxvalues[w]), w), maxvalues[w])
    3:             self.assertEqual(audioop.max(p(minvalues[w]), w), -minvalues[w])
    3:             self.assertEqual(audioop.max(datas[w], w), -minvalues[w])
       
    1:     def test_minmax(self):
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.minmax(b'', w),
    3:                              (0x7fffffff, -0x80000000))
    3:             p = packs[w]
    3:             self.assertEqual(audioop.minmax(p(5), w), (5, 5))
    3:             self.assertEqual(audioop.minmax(p(5, -8, -1), w), (-8, 5))
    3:             self.assertEqual(audioop.minmax(p(maxvalues[w]), w),
    3:                              (maxvalues[w], maxvalues[w]))
    3:             self.assertEqual(audioop.minmax(p(minvalues[w]), w),
    3:                              (minvalues[w], minvalues[w]))
    3:             self.assertEqual(audioop.minmax(datas[w], w),
    3:                              (minvalues[w], maxvalues[w]))
       
    1:     def test_maxpp(self):
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.maxpp(b'', w), 0)
    3:             self.assertEqual(audioop.maxpp(packs[w](*range(100)), w), 0)
    3:             self.assertEqual(audioop.maxpp(packs[w](9, 10, 5, 5, 0, 1), w), 10)
    3:             self.assertEqual(audioop.maxpp(datas[w], w),
    3:                              maxvalues[w] - minvalues[w])
       
    1:     def test_avg(self):
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.avg(b'', w), 0)
    3:             p = packs[w]
    3:             self.assertEqual(audioop.avg(p(5), w), 5)
    3:             self .assertEqual(audioop.avg(p(5, 8), w), 6)
    3:             self.assertEqual(audioop.avg(p(5, -8), w), -2)
    3:             self.assertEqual(audioop.avg(p(maxvalues[w], maxvalues[w]), w),
    3:                              maxvalues[w])
    3:             self.assertEqual(audioop.avg(p(minvalues[w], minvalues[w]), w),
    3:                              minvalues[w])
    1:         self.assertEqual(audioop.avg(packs[4](0x50000000, 0x70000000), 4),
    1:                          0x60000000)
    1:         self.assertEqual(audioop.avg(packs[4](-0x50000000, -0x70000000), 4),
    1:                          -0x60000000)
       
    1:     def test_avgpp(self):
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.avgpp(b'', w), 0)
    3:             self.assertEqual(audioop.avgpp(packs[w](*range(100)), w), 0)
    3:             self.assertEqual(audioop.avgpp(packs[w](9, 10, 5, 5, 0, 1), w), 10)
    1:         self.assertEqual(audioop.avgpp(datas[1], 1), 196)
    1:         self.assertEqual(audioop.avgpp(datas[2], 2), 50534)
    1:         self.assertEqual(audioop.avgpp(datas[4], 4), 3311897002)
       
    1:     def test_rms(self):
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.rms(b'', w), 0)
    3:             p = packs[w]
    3:             self.assertEqual(audioop.rms(p(*range(100)), w), 57)
    3:             self.assertAlmostEqual(audioop.rms(p(maxvalues[w]) * 5, w),
    3:                                    maxvalues[w], delta=1)
    3:             self.assertAlmostEqual(audioop.rms(p(minvalues[w]) * 5, w),
    3:                                    -minvalues[w], delta=1)
    1:         self.assertEqual(audioop.rms(datas[1], 1), 77)
    1:         self.assertEqual(audioop.rms(datas[2], 2), 20001)
    1:         self.assertEqual(audioop.rms(datas[4], 4), 1310854152)
       
    1:     def test_cross(self):
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.cross(b'', w), -1)
    3:             p = packs[w]
    3:             self.assertEqual(audioop.cross(p(0, 1, 2), w), 0)
    3:             self.assertEqual(audioop.cross(p(1, 2, -3, -4), w), 1)
    3:             self.assertEqual(audioop.cross(p(-1, -2, 3, 4), w), 1)
    3:             self.assertEqual(audioop.cross(p(0, minvalues[w]), w), 1)
    3:             self.assertEqual(audioop.cross(p(minvalues[w], maxvalues[w]), w), 1)
       
    1:     def test_add(self):
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.add(b'', b'', w), b'')
    3:             self.assertEqual(audioop.add(datas[w], b'\0' * len(datas[w]), w),
    3:                              datas[w])
    1:         self.assertEqual(audioop.add(datas[1], datas[1], 1),
    1:                          b'\x00\x24\x7f\x80\x7f\x80\xfe')
    1:         self.assertEqual(audioop.add(datas[2], datas[2], 2),
    1:                 packs[2](0, 0x2468, 0x7fff, -0x8000, 0x7fff, -0x8000, -2))
    1:         self.assertEqual(audioop.add(datas[4], datas[4], 4),
    1:                 packs[4](0, 0x2468acf0, 0x7fffffff, -0x80000000,
    1:                        0x7fffffff, -0x80000000, -2))
       
    1:     def test_bias(self):
    4:         for w in 1, 2, 4:
   24:             for bias in 0, 1, -1, 127, -128, 0x7fffffff, -0x80000000:
   21:                 self.assertEqual(audioop.bias(b'', w, bias), b'')
    1:         self.assertEqual(audioop.bias(datas[1], 1, 1),
    1:                          b'\x01\x13\x46\xbc\x80\x81\x00')
    1:         self.assertEqual(audioop.bias(datas[1], 1, -1),
    1:                          b'\xff\x11\x44\xba\x7e\x7f\xfe')
    1:         self.assertEqual(audioop.bias(datas[1], 1, 0x7fffffff),
    1:                          b'\xff\x11\x44\xba\x7e\x7f\xfe')
    1:         self.assertEqual(audioop.bias(datas[1], 1, -0x80000000),
    1:                          datas[1])
    1:         self.assertEqual(audioop.bias(datas[2], 2, 1),
    1:                 packs[2](1, 0x1235, 0x4568, -0x4566, -0x8000, -0x7fff, 0))
    1:         self.assertEqual(audioop.bias(datas[2], 2, -1),
    1:                 packs[2](-1, 0x1233, 0x4566, -0x4568, 0x7ffe, 0x7fff, -2))
    1:         self.assertEqual(audioop.bias(datas[2], 2, 0x7fffffff),
    1:                 packs[2](-1, 0x1233, 0x4566, -0x4568, 0x7ffe, 0x7fff, -2))
    1:         self.assertEqual(audioop.bias(datas[2], 2, -0x80000000),
    1:                 datas[2])
    1:         self.assertEqual(audioop.bias(datas[4], 4, 1),
    1:                 packs[4](1, 0x12345679, 0x456789ac, -0x456789aa,
    1:                          -0x80000000, -0x7fffffff, 0))
    1:         self.assertEqual(audioop.bias(datas[4], 4, -1),
    1:                 packs[4](-1, 0x12345677, 0x456789aa, -0x456789ac,
    1:                          0x7ffffffe, 0x7fffffff, -2))
    1:         self.assertEqual(audioop.bias(datas[4], 4, 0x7fffffff),
    1:                 packs[4](0x7fffffff, -0x6dcba989, -0x3a987656, 0x3a987654,
    1:                          -2, -1, 0x7ffffffe))
    1:         self.assertEqual(audioop.bias(datas[4], 4, -0x80000000),
    1:                 packs[4](-0x80000000, -0x6dcba988, -0x3a987655, 0x3a987655,
    1:                          -1, 0, 0x7fffffff))
       
    1:     def test_lin2lin(self):
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.lin2lin(datas[w], w, w), datas[w])
       
    1:         self.assertEqual(audioop.lin2lin(datas[1], 1, 2),
    1:             packs[2](0, 0x1200, 0x4500, -0x4500, 0x7f00, -0x8000, -0x100))
    1:         self.assertEqual(audioop.lin2lin(datas[1], 1, 4),
    1:             packs[4](0, 0x12000000, 0x45000000, -0x45000000,
    1:                      0x7f000000, -0x80000000, -0x1000000))
    1:         self.assertEqual(audioop.lin2lin(datas[2], 2, 1),
    1:             b'\x00\x12\x45\xba\x7f\x80\xff')
    1:         self.assertEqual(audioop.lin2lin(datas[2], 2, 4),
    1:             packs[4](0, 0x12340000, 0x45670000, -0x45670000,
    1:                      0x7fff0000, -0x80000000, -0x10000))
    1:         self.assertEqual(audioop.lin2lin(datas[4], 4, 1),
    1:             b'\x00\x12\x45\xba\x7f\x80\xff')
    1:         self.assertEqual(audioop.lin2lin(datas[4], 4, 2),
    1:             packs[2](0, 0x1234, 0x4567, -0x4568, 0x7fff, -0x8000, -1))
       
    1:     def test_adpcm2lin(self):
    1:         self.assertEqual(audioop.adpcm2lin(b'\x07\x7f\x7f', 1, None),
    1:                          (b'\x00\x00\x00\xff\x00\xff', (-179, 40)))
    1:         self.assertEqual(audioop.adpcm2lin(b'\x07\x7f\x7f', 2, None),
    1:                          (packs[2](0, 0xb, 0x29, -0x16, 0x72, -0xb3), (-179, 40)))
    1:         self.assertEqual(audioop.adpcm2lin(b'\x07\x7f\x7f', 4, None),
    1:                          (packs[4](0, 0xb0000, 0x290000, -0x160000, 0x720000,
    1:                                    -0xb30000), (-179, 40)))
       
               # Very cursory test
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.adpcm2lin(b'\0' * 5, w, None),
    3:                              (b'\0' * w * 10, (0, 0)))
       
    1:     def test_lin2adpcm(self):
    1:         self.assertEqual(audioop.lin2adpcm(datas[1], 1, None),
    1:                          (b'\x07\x7f\x7f', (-221, 39)))
    1:         self.assertEqual(audioop.lin2adpcm(datas[2], 2, None),
    1:                          (b'\x07\x7f\x7f', (31, 39)))
    1:         self.assertEqual(audioop.lin2adpcm(datas[4], 4, None),
    1:                          (b'\x07\x7f\x7f', (31, 39)))
       
               # Very cursory test
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.lin2adpcm(b'\0' * w * 10, w, None),
    3:                              (b'\0' * 5, (0, 0)))
       
    1:     def test_invalid_adpcm_state(self):
               # state must be a tuple or None, not an integer
    1:         self.assertRaises(TypeError, audioop.adpcm2lin, b'\0', 1, 555)
    1:         self.assertRaises(TypeError, audioop.lin2adpcm, b'\0', 1, 555)
               # Issues #24456, #24457: index out of range
    1:         self.assertRaises(ValueError, audioop.adpcm2lin, b'\0', 1, (0, -1))
    1:         self.assertRaises(ValueError, audioop.adpcm2lin, b'\0', 1, (0, 89))
    1:         self.assertRaises(ValueError, audioop.lin2adpcm, b'\0', 1, (0, -1))
    1:         self.assertRaises(ValueError, audioop.lin2adpcm, b'\0', 1, (0, 89))
               # value out of range
    1:         self.assertRaises(ValueError, audioop.adpcm2lin, b'\0', 1, (-0x8001, 0))
    1:         self.assertRaises(ValueError, audioop.adpcm2lin, b'\0', 1, (0x8000, 0))
    1:         self.assertRaises(ValueError, audioop.lin2adpcm, b'\0', 1, (-0x8001, 0))
    1:         self.assertRaises(ValueError, audioop.lin2adpcm, b'\0', 1, (0x8000, 0))
       
    1:     def test_lin2alaw(self):
    1:         self.assertEqual(audioop.lin2alaw(datas[1], 1),
    1:                          b'\xd5\x87\xa4\x24\xaa\x2a\x5a')
    1:         self.assertEqual(audioop.lin2alaw(datas[2], 2),
    1:                          b'\xd5\x87\xa4\x24\xaa\x2a\x55')
    1:         self.assertEqual(audioop.lin2alaw(datas[4], 4),
    1:                          b'\xd5\x87\xa4\x24\xaa\x2a\x55')
       
    1:     def test_alaw2lin(self):
    1:         encoded = b'\x00\x03\x24\x2a\x51\x54\x55\x58\x6b\x71\x7f'\
                         b'\x80\x83\xa4\xaa\xd1\xd4\xd5\xd8\xeb\xf1\xff'
    1:         src = [-688, -720, -2240, -4032, -9, -3, -1, -27, -244, -82, -106,
    1:                688, 720, 2240, 4032, 9, 3, 1, 27, 244, 82, 106]
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.alaw2lin(encoded, w),
   72:                              packs[w](*(x << (w * 8) >> 13 for x in src)))
       
  258:         encoded = ''.join(chr(x) for x in xrange(256))
    3:         for w in 2, 4:
    2:             decoded = audioop.alaw2lin(encoded, w)
    2:             self.assertEqual(audioop.lin2alaw(decoded, w), encoded)
       
    1:     def test_lin2ulaw(self):
    1:         self.assertEqual(audioop.lin2ulaw(datas[1], 1),
    1:                          b'\xff\xad\x8e\x0e\x80\x00\x67')
    1:         self.assertEqual(audioop.lin2ulaw(datas[2], 2),
    1:                          b'\xff\xad\x8e\x0e\x80\x00\x7e')
    1:         self.assertEqual(audioop.lin2ulaw(datas[4], 4),
    1:                          b'\xff\xad\x8e\x0e\x80\x00\x7e')
       
    1:     def test_ulaw2lin(self):
    1:         encoded = b'\x00\x0e\x28\x3f\x57\x6a\x76\x7c\x7e\x7f'\
                         b'\x80\x8e\xa8\xbf\xd7\xea\xf6\xfc\xfe\xff'
    1:         src = [-8031, -4447, -1471, -495, -163, -53, -18, -6, -2, 0,
    1:                8031, 4447, 1471, 495, 163, 53, 18, 6, 2, 0]
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.ulaw2lin(encoded, w),
   66:                              packs[w](*(x << (w * 8) >> 14 for x in src)))
       
               # Current u-law implementation has two codes fo 0: 0x7f and 0xff.
  257:         encoded = ''.join(chr(x) for x in range(127) + range(128, 256))
    3:         for w in 2, 4:
    2:             decoded = audioop.ulaw2lin(encoded, w)
    2:             self.assertEqual(audioop.lin2ulaw(decoded, w), encoded)
       
    1:     def test_mul(self):
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.mul(b'', w, 2), b'')
    3:             self.assertEqual(audioop.mul(datas[w], w, 0),
    3:                              b'\0' * len(datas[w]))
    3:             self.assertEqual(audioop.mul(datas[w], w, 1),
    3:                              datas[w])
    1:         self.assertEqual(audioop.mul(datas[1], 1, 2),
    1:                          b'\x00\x24\x7f\x80\x7f\x80\xfe')
    1:         self.assertEqual(audioop.mul(datas[2], 2, 2),
    1:                 packs[2](0, 0x2468, 0x7fff, -0x8000, 0x7fff, -0x8000, -2))
    1:         self.assertEqual(audioop.mul(datas[4], 4, 2),
    1:                 packs[4](0, 0x2468acf0, 0x7fffffff, -0x80000000,
    1:                          0x7fffffff, -0x80000000, -2))
       
    1:     def test_ratecv(self):
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.ratecv(b'', w, 1, 8000, 8000, None),
    3:                              (b'', (-1, ((0, 0),))))
    3:             self.assertEqual(audioop.ratecv(b'', w, 5, 8000, 8000, None),
    3:                              (b'', (-1, ((0, 0),) * 5)))
    3:             self.assertEqual(audioop.ratecv(b'', w, 1, 8000, 16000, None),
    3:                              (b'', (-2, ((0, 0),))))
    3:             self.assertEqual(audioop.ratecv(datas[w], w, 1, 8000, 8000, None)[0],
    3:                              datas[w])
    3:             self.assertEqual(audioop.ratecv(datas[w], w, 1, 8000, 8000, None, 1, 0)[0],
    3:                              datas[w])
       
    1:         state = None
    1:         d1, state = audioop.ratecv(b'\x00\x01\x02', 1, 1, 8000, 16000, state)
    1:         d2, state = audioop.ratecv(b'\x00\x01\x02', 1, 1, 8000, 16000, state)
    1:         self.assertEqual(d1 + d2, b'\000\000\001\001\002\001\000\000\001\001\002')
       
    4:         for w in 1, 2, 4:
    3:             d0, state0 = audioop.ratecv(datas[w], w, 1, 8000, 16000, None)
    3:             d, state = b'', None
   24:             for i in range(0, len(datas[w]), w):
   21:                 d1, state = audioop.ratecv(datas[w][i:i + w], w, 1,
   21:                                            8000, 16000, state)
   21:                 d += d1
    3:             self.assertEqual(d, d0)
    3:             self.assertEqual(state, state0)
       
    1:         expected = {
    1:             1: packs[1](0, 0x0d, 0x37, -0x26, 0x55, -0x4b, -0x14),
    1:             2: packs[2](0, 0x0da7, 0x3777, -0x2630, 0x5673, -0x4a64, -0x129a),
    1:             4: packs[4](0, 0x0da740da, 0x37777776, -0x262fc962,
    1:                         0x56740da6, -0x4a62fc96, -0x1298bf26),
               }
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.ratecv(datas[w], w, 1, 8000, 8000, None, 3, 1)[0],
    3:                              expected[w])
    3:             self.assertEqual(audioop.ratecv(datas[w], w, 1, 8000, 8000, None, 30, 10)[0],
    3:                              expected[w])
       
    1:     def test_reverse(self):
    4:         for w in 1, 2, 4:
    3:             self.assertEqual(audioop.reverse(b'', w), b'')
    3:             self.assertEqual(audioop.reverse(packs[w](0, 1, 2), w),
    3:                              packs[w](2, 1, 0))
       
    1:     def test_tomono(self):
    4:         for w in 1, 2, 4:
    3:             data1 = datas[w]
    3:             data2 = bytearray(2 * len(data1))
   10:             for k in range(w):
    7:                 data2[k::2*w] = data1[k::w]
    3:             self.assertEqual(audioop.tomono(str(data2), w, 1, 0), data1)
    3:             self.assertEqual(audioop.tomono(str(data2), w, 0, 1), b'\0' * len(data1))
   10:             for k in range(w):
    7:                 data2[k+w::2*w] = data1[k::w]
    3:             self.assertEqual(audioop.tomono(str(data2), w, 0.5, 0.5), data1)
       
    1:     def test_tostereo(self):
    4:         for w in 1, 2, 4:
    3:             data1 = datas[w]
    3:             data2 = bytearray(2 * len(data1))
   10:             for k in range(w):
    7:                 data2[k::2*w] = data1[k::w]
    3:             self.assertEqual(audioop.tostereo(data1, w, 1, 0), data2)
    3:             self.assertEqual(audioop.tostereo(data1, w, 0, 0), b'\0' * len(data2))
   10:             for k in range(w):
    7:                 data2[k+w::2*w] = data1[k::w]
    3:             self.assertEqual(audioop.tostereo(data1, w, 1, 1), data2)
       
    1:     def test_findfactor(self):
    1:         self.assertEqual(audioop.findfactor(datas[2], datas[2]), 1.0)
    1:         self.assertEqual(audioop.findfactor(b'\0' * len(datas[2]), datas[2]),
    1:                          0.0)
       
    1:     def test_findfit(self):
    1:         self.assertEqual(audioop.findfit(datas[2], datas[2]), (0, 1.0))
    1:         self.assertEqual(audioop.findfit(datas[2], packs[2](1, 2, 0)),
    1:                          (1, 8038.8))
    1:         self.assertEqual(audioop.findfit(datas[2][:-2] * 5 + datas[2], datas[2]),
    1:                          (30, 1.0))
       
    1:     def test_findmax(self):
    1:         self.assertEqual(audioop.findmax(datas[2], 1), 5)
       
    1:     def test_getsample(self):
    4:         for w in 1, 2, 4:
    3:             data = packs[w](0, 1, -1, maxvalues[w], minvalues[w])
    3:             self.assertEqual(audioop.getsample(data, w, 0), 0)
    3:             self.assertEqual(audioop.getsample(data, w, 1), 1)
    3:             self.assertEqual(audioop.getsample(data, w, 2), -1)
    3:             self.assertEqual(audioop.getsample(data, w, 3), maxvalues[w])
    3:             self.assertEqual(audioop.getsample(data, w, 4), minvalues[w])
       
    1:     def test_negativelen(self):
               # from issue 3306, previously it segfaulted
    1:         self.assertRaises(audioop.error,
  258:             audioop.findmax, ''.join( chr(x) for x in xrange(256)), -2392392)
       
    1:     def test_issue7673(self):
    1:         state = None
    4:         for data, size in INVALID_DATA:
    3:             size2 = size
    3:             self.assertRaises(audioop.error, audioop.getsample, data, size, 0)
    3:             self.assertRaises(audioop.error, audioop.max, data, size)
    3:             self.assertRaises(audioop.error, audioop.minmax, data, size)
    3:             self.assertRaises(audioop.error, audioop.avg, data, size)
    3:             self.assertRaises(audioop.error, audioop.rms, data, size)
    3:             self.assertRaises(audioop.error, audioop.avgpp, data, size)
    3:             self.assertRaises(audioop.error, audioop.maxpp, data, size)
    3:             self.assertRaises(audioop.error, audioop.cross, data, size)
    3:             self.assertRaises(audioop.error, audioop.mul, data, size, 1.0)
    3:             self.assertRaises(audioop.error, audioop.tomono, data, size, 0.5, 0.5)
    3:             self.assertRaises(audioop.error, audioop.tostereo, data, size, 0.5, 0.5)
    3:             self.assertRaises(audioop.error, audioop.add, data, data, size)
    3:             self.assertRaises(audioop.error, audioop.bias, data, size, 0)
    3:             self.assertRaises(audioop.error, audioop.reverse, data, size)
    3:             self.assertRaises(audioop.error, audioop.lin2lin, data, size, size2)
    3:             self.assertRaises(audioop.error, audioop.ratecv, data, size, 1, 1, 1, state)
    3:             self.assertRaises(audioop.error, audioop.lin2ulaw, data, size)
    3:             self.assertRaises(audioop.error, audioop.lin2alaw, data, size)
    3:             self.assertRaises(audioop.error, audioop.lin2adpcm, data, size, state)
       
    1:     def test_wrongsize(self):
    1:         data = b'abcdefgh'
    1:         state = None
    6:         for size in (-1, 0, 3, 5, 1024):
    5:             self.assertRaises(audioop.error, audioop.ulaw2lin, data, size)
    5:             self.assertRaises(audioop.error, audioop.alaw2lin, data, size)
    5:             self.assertRaises(audioop.error, audioop.adpcm2lin, data, size, state)
       
    1: def test_main():
    1:     run_unittest(TestAudioop)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
