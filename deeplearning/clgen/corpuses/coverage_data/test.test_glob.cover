    1: import glob
    1: import os
    1: import shutil
    1: import sys
    1: import unittest
       
    1: from test.test_support import run_unittest, TESTFN
       
       
    1: def fsdecode(s):
   90:     return unicode(s, sys.getfilesystemencoding())
       
       
    2: class GlobTests(unittest.TestCase):
       
    1:     def norm(self, *parts):
  144:         return os.path.normpath(os.path.join(self.tempdir, *parts))
       
    1:     def mktemp(self, *parts):
   64:         filename = self.norm(*parts)
   64:         base, file = os.path.split(filename)
   64:         if not os.path.exists(base):
   56:             os.makedirs(base)
   64:         f = open(filename, 'w')
   64:         f.close()
       
    1:     def setUp(self):
    8:         self.tempdir = TESTFN + "_dir"
    8:         self.mktemp('a', 'D')
    8:         self.mktemp('aab', 'F')
    8:         self.mktemp('.aa', 'G')
    8:         self.mktemp('.bb', 'H')
    8:         self.mktemp('aaa', 'zzzF')
    8:         self.mktemp('ZZZ')
    8:         self.mktemp('a', 'bcd', 'EF')
    8:         self.mktemp('a', 'bcd', 'efg', 'ha')
    8:         if hasattr(os, 'symlink'):
    8:             os.symlink(self.norm('broken'), self.norm('sym1'))
    8:             os.symlink('broken', self.norm('sym2'))
    8:             os.symlink(os.path.join('a', 'bcd'), self.norm('sym3'))
       
    1:     def tearDown(self):
    8:         shutil.rmtree(self.tempdir)
       
    1:     def glob(self, *parts):
   24:         if len(parts) == 1:
   15:             pattern = parts[0]
               else:
    9:             pattern = os.path.join(*parts)
   24:         p = os.path.join(self.tempdir, pattern)
   24:         res = glob.glob(p)
   24:         self.assertEqual(list(glob.iglob(p)), res)
   57:         ures = [fsdecode(x) for x in res]
   24:         self.assertEqual(glob.glob(fsdecode(p)), ures)
   24:         self.assertEqual(list(glob.iglob(fsdecode(p))), ures)
   24:         return res
       
    1:     def assertSequencesEqual_noorder(self, l1, l2):
   23:         l1 = list(l1)
   23:         l2 = list(l2)
   23:         self.assertEqual(set(l1), set(l2))
   23:         self.assertEqual(sorted(l1), sorted(l2))
       
    1:     def test_glob_literal(self):
    1:         eq = self.assertSequencesEqual_noorder
    1:         eq(self.glob('a'), [self.norm('a')])
    1:         eq(self.glob('a', 'D'), [self.norm('a', 'D')])
    1:         eq(self.glob('aab'), [self.norm('aab')])
    1:         eq(self.glob('zymurgy'), [])
       
    1:         res = glob.glob('*')
    3:         self.assertEqual({type(r) for r in res}, {str})
    1:         res = glob.glob(os.path.join(os.curdir, '*'))
    3:         self.assertEqual({type(r) for r in res}, {str})
       
               # test return types are unicode, but only if os.listdir
               # returns unicode filenames
    1:         tmp = os.listdir(fsdecode(os.curdir))
    3:         if {type(x) for x in tmp} == {unicode}:
    1:             res = glob.glob(u'*')
    3:             self.assertEqual({type(r) for r in res}, {unicode})
    1:             res = glob.glob(os.path.join(fsdecode(os.curdir), u'*'))
    3:             self.assertEqual({type(r) for r in res}, {unicode})
       
    1:     def test_glob_one_directory(self):
    1:         eq = self.assertSequencesEqual_noorder
    1:         eq(self.glob('a*'), map(self.norm, ['a', 'aab', 'aaa']))
    1:         eq(self.glob('*a'), map(self.norm, ['a', 'aaa']))
    1:         eq(self.glob('.*'), map(self.norm, ['.aa', '.bb']))
    1:         eq(self.glob('?aa'), map(self.norm, ['aaa']))
    1:         eq(self.glob('aa?'), map(self.norm, ['aaa', 'aab']))
    1:         eq(self.glob('aa[ab]'), map(self.norm, ['aaa', 'aab']))
    1:         eq(self.glob('*q'), [])
       
    1:     def test_glob_nested_directory(self):
    1:         eq = self.assertSequencesEqual_noorder
    1:         if os.path.normcase("abCD") == "abCD":
                   # case-sensitive filesystem
    1:             eq(self.glob('a', 'bcd', 'E*'), [self.norm('a', 'bcd', 'EF')])
               else:
                   # case insensitive filesystem
>>>>>>             eq(self.glob('a', 'bcd', 'E*'), [self.norm('a', 'bcd', 'EF'),
>>>>>>                                              self.norm('a', 'bcd', 'efg')])
    1:         eq(self.glob('a', 'bcd', '*g'), [self.norm('a', 'bcd', 'efg')])
       
    1:     def test_glob_directory_names(self):
    1:         eq = self.assertSequencesEqual_noorder
    1:         eq(self.glob('*', 'D'), [self.norm('a', 'D')])
    1:         eq(self.glob('*', '*a'), [])
    1:         eq(self.glob('a', '*', '*', '*a'),
    1:            [self.norm('a', 'bcd', 'efg', 'ha')])
    1:         eq(self.glob('?a?', '*F'), [self.norm('aaa', 'zzzF'),
    1:                                     self.norm('aab', 'F')])
       
    1:     def test_glob_directory_with_trailing_slash(self):
               # Patterns ending with a slash shouldn't match non-dirs
    1:         res = glob.glob(self.norm('Z*Z') + os.sep)
    1:         self.assertEqual(res, [])
    1:         res = glob.glob(self.norm('ZZZ') + os.sep)
    1:         self.assertEqual(res, [])
               # When there is a wildcard pattern which ends with os.sep, glob()
               # doesn't blow up.
    1:         res = glob.glob(self.norm('aa*') + os.sep)
    1:         self.assertEqual(len(res), 2)
               # either of these results is reasonable
    1:         self.assertIn(set(res), [
    1:                       {self.norm('aaa'), self.norm('aab')},
    1:                       {self.norm('aaa') + os.sep, self.norm('aab') + os.sep},
                             ])
       
    1:     def test_glob_unicode_directory_with_trailing_slash(self):
               # Same as test_glob_directory_with_trailing_slash, but with an
               # unicode argument.
    1:         res = glob.glob(fsdecode(self.norm('Z*Z') + os.sep))
    1:         self.assertEqual(res, [])
    1:         res = glob.glob(fsdecode(self.norm('ZZZ') + os.sep))
    1:         self.assertEqual(res, [])
    1:         res = glob.glob(fsdecode(self.norm('aa*') + os.sep))
    1:         self.assertEqual(len(res), 2)
               # either of these results is reasonable
    1:         self.assertIn(set(res), [
    1:                       {fsdecode(self.norm('aaa')), fsdecode(self.norm('aab'))},
    1:                       {fsdecode(self.norm('aaa') + os.sep),
    1:                        fsdecode(self.norm('aab') + os.sep)},
                             ])
       
    1:     @unittest.skipUnless(hasattr(os, 'symlink'), "Requires symlink support")
           def test_glob_symlinks(self):
    1:         eq = self.assertSequencesEqual_noorder
    1:         eq(self.glob('sym3'), [self.norm('sym3')])
    1:         eq(self.glob('sym3', '*'), [self.norm('sym3', 'EF'),
    1:                                     self.norm('sym3', 'efg')])
    1:         self.assertIn(self.glob('sym3' + os.sep),
    1:                       [[self.norm('sym3')], [self.norm('sym3') + os.sep]])
    1:         eq(self.glob('*', '*F'),
    1:            [self.norm('aaa', 'zzzF'), self.norm('aab', 'F'),
    1:             self.norm('sym3', 'EF')])
       
    1:     @unittest.skipUnless(hasattr(os, 'symlink'), "Requires symlink support")
           def test_glob_broken_symlinks(self):
    1:         eq = self.assertSequencesEqual_noorder
    1:         eq(self.glob('sym*'), [self.norm('sym1'), self.norm('sym2'),
    1:                                self.norm('sym3')])
    1:         eq(self.glob('sym1'), [self.norm('sym1')])
    1:         eq(self.glob('sym2'), [self.norm('sym2')])
       
    1:     @unittest.skipUnless(sys.platform == "win32", "Win32 specific test")
           def test_glob_magic_in_drive(self):
>>>>>>         eq = self.assertSequencesEqual_noorder
>>>>>>         eq(glob.glob('*:'), [])
>>>>>>         eq(glob.glob(u'*:'), [])
>>>>>>         eq(glob.glob('?:'), [])
>>>>>>         eq(glob.glob(u'?:'), [])
       
       
    1: def test_main():
    1:     run_unittest(GlobTests)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
