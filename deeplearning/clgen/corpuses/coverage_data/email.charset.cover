       # Copyright (C) 2001-2006 Python Software Foundation
       # Author: Ben Gertzfield, Barry Warsaw
       # Contact: email-sig@python.org
       
       __all__ = [
    1:     'Charset',
    1:     'add_alias',
    1:     'add_charset',
    1:     'add_codec',
           ]
       
    1: import codecs
    1: import email.base64mime
    1: import email.quoprimime
       
    1: from email import errors
    1: from email.encoders import encode_7or8bit
       
       
       
       # Flags for types of header encodings
    1: QP          = 1 # Quoted-Printable
    1: BASE64      = 2 # Base64
    1: SHORTEST    = 3 # the shorter of QP and base64, but only for headers
       
       # In "=?charset?q?hello_world?=", the =?, ?q?, and ?= add up to 7
    1: MISC_LEN = 7
       
    1: DEFAULT_CHARSET = 'us-ascii'
       
       
       
       # Defaults
    1: CHARSETS = {
           # input        header enc  body enc output conv
    1:     'iso-8859-1':  (QP,        QP,      None),
    1:     'iso-8859-2':  (QP,        QP,      None),
    1:     'iso-8859-3':  (QP,        QP,      None),
    1:     'iso-8859-4':  (QP,        QP,      None),
           # iso-8859-5 is Cyrillic, and not especially used
           # iso-8859-6 is Arabic, also not particularly used
           # iso-8859-7 is Greek, QP will not make it readable
           # iso-8859-8 is Hebrew, QP will not make it readable
    1:     'iso-8859-9':  (QP,        QP,      None),
    1:     'iso-8859-10': (QP,        QP,      None),
           # iso-8859-11 is Thai, QP will not make it readable
    1:     'iso-8859-13': (QP,        QP,      None),
    1:     'iso-8859-14': (QP,        QP,      None),
    1:     'iso-8859-15': (QP,        QP,      None),
    1:     'iso-8859-16': (QP,        QP,      None),
    1:     'windows-1252':(QP,        QP,      None),
    1:     'viscii':      (QP,        QP,      None),
    1:     'us-ascii':    (None,      None,    None),
    1:     'big5':        (BASE64,    BASE64,  None),
    1:     'gb2312':      (BASE64,    BASE64,  None),
    1:     'euc-jp':      (BASE64,    None,    'iso-2022-jp'),
    1:     'shift_jis':   (BASE64,    None,    'iso-2022-jp'),
    1:     'iso-2022-jp': (BASE64,    None,    None),
    1:     'koi8-r':      (BASE64,    BASE64,  None),
    1:     'utf-8':       (SHORTEST,  BASE64, 'utf-8'),
           # We're making this one up to represent raw unencoded 8-bit
    1:     '8bit':        (None,      BASE64, 'utf-8'),
           }
       
       # Aliases for other commonly-used names for character sets.  Map
       # them to the real ones used in email.
    1: ALIASES = {
    1:     'latin_1': 'iso-8859-1',
    1:     'latin-1': 'iso-8859-1',
    1:     'latin_2': 'iso-8859-2',
    1:     'latin-2': 'iso-8859-2',
    1:     'latin_3': 'iso-8859-3',
    1:     'latin-3': 'iso-8859-3',
    1:     'latin_4': 'iso-8859-4',
    1:     'latin-4': 'iso-8859-4',
    1:     'latin_5': 'iso-8859-9',
    1:     'latin-5': 'iso-8859-9',
    1:     'latin_6': 'iso-8859-10',
    1:     'latin-6': 'iso-8859-10',
    1:     'latin_7': 'iso-8859-13',
    1:     'latin-7': 'iso-8859-13',
    1:     'latin_8': 'iso-8859-14',
    1:     'latin-8': 'iso-8859-14',
    1:     'latin_9': 'iso-8859-15',
    1:     'latin-9': 'iso-8859-15',
    1:     'latin_10':'iso-8859-16',
    1:     'latin-10':'iso-8859-16',
    1:     'cp949':   'ks_c_5601-1987',
    1:     'euc_jp':  'euc-jp',
    1:     'euc_kr':  'euc-kr',
    1:     'ascii':   'us-ascii',
           }
       
       
       # Map charsets to their Unicode codec strings.
    1: CODEC_MAP = {
    1:     'gb2312':      'eucgb2312_cn',
    1:     'big5':        'big5_tw',
           # Hack: We don't want *any* conversion for stuff marked us-ascii, as all
           # sorts of garbage might be sent to us in the guise of 7-bit us-ascii.
           # Let that stuff pass through without conversion to/from Unicode.
    1:     'us-ascii':    None,
           }
       
       
       
       # Convenience functions for extending the above mappings
    1: def add_charset(charset, header_enc=None, body_enc=None, output_charset=None):
           """Add character set properties to the global registry.
       
           charset is the input character set, and must be the canonical name of a
           character set.
       
           Optional header_enc and body_enc is either Charset.QP for
           quoted-printable, Charset.BASE64 for base64 encoding, Charset.SHORTEST for
           the shortest of qp or base64 encoding, or None for no encoding.  SHORTEST
           is only valid for header_enc.  It describes how message headers and
           message bodies in the input charset are to be encoded.  Default is no
           encoding.
       
           Optional output_charset is the character set that the output should be
           in.  Conversions will proceed from input charset, to Unicode, to the
           output charset when the method Charset.convert() is called.  The default
           is to output in the same character set as the input.
       
           Both input_charset and output_charset must have Unicode codec entries in
           the module's charset-to-codec mapping; use add_codec(charset, codecname)
           to add codecs the module does not know about.  See the codecs module's
           documentation for more information.
           """
    3:     if body_enc == SHORTEST:
>>>>>>         raise ValueError('SHORTEST not allowed for body_enc')
    3:     CHARSETS[charset] = (header_enc, body_enc, output_charset)
       
       
    1: def add_alias(alias, canonical):
           """Add a character set alias.
       
           alias is the alias name, e.g. latin-1
           canonical is the character set's canonical name, e.g. iso-8859-1
           """
>>>>>>     ALIASES[alias] = canonical
       
       
    1: def add_codec(charset, codecname):
           """Add a codec that map characters in the given charset to/from Unicode.
       
           charset is the canonical name of a character set.  codecname is the name
           of a Python codec, as appropriate for the second argument to the unicode()
           built-in, or to the encode() method of a Unicode string.
           """
>>>>>>     CODEC_MAP[charset] = codecname
       
       
       
    2: class Charset:
           """Map character sets to their email properties.
       
           This class provides information about the requirements imposed on email
           for a specific character set.  It also provides convenience routines for
           converting between character sets, given the availability of the
           applicable codecs.  Given a character set, it will do its best to provide
           information on how to use that character set in an email in an
           RFC-compliant way.
       
           Certain character sets must be encoded with quoted-printable or base64
           when used in email headers or bodies.  Certain character sets must be
           converted outright, and are not allowed in email.  Instances of this
           module expose the following information about a character set:
       
           input_charset: The initial character set specified.  Common aliases
                          are converted to their `official' email names (e.g. latin_1
                          is converted to iso-8859-1).  Defaults to 7-bit us-ascii.
       
           header_encoding: If the character set must be encoded before it can be
                            used in an email header, this attribute will be set to
                            Charset.QP (for quoted-printable), Charset.BASE64 (for
                            base64 encoding), or Charset.SHORTEST for the shortest of
                            QP or BASE64 encoding.  Otherwise, it will be None.
       
           body_encoding: Same as header_encoding, but describes the encoding for the
                          mail message's body, which indeed may be different than the
                          header encoding.  Charset.SHORTEST is not allowed for
                          body_encoding.
       
           output_charset: Some character sets must be converted before they can be
                           used in email headers or bodies.  If the input_charset is
                           one of them, this attribute will contain the name of the
                           charset output will be converted to.  Otherwise, it will
                           be None.
       
           input_codec: The name of the Python codec used to convert the
                        input_charset to Unicode.  If no conversion codec is
                        necessary, this attribute will be None.
       
           output_codec: The name of the Python codec used to convert Unicode
                         to the output_charset.  If no conversion codec is necessary,
                         this attribute will have the same value as the input_codec.
    1:     """
    1:     def __init__(self, input_charset=DEFAULT_CHARSET):
               # RFC 2046, $4.1.2 says charsets are not case sensitive.  We coerce to
               # unicode because its .lower() is locale insensitive.  If the argument
               # is already a unicode, we leave it at that, but ensure that the
               # charset is ASCII, as the standard (RFC XXX) requires.
  264:         try:
  264:             if isinstance(input_charset, unicode):
    4:                 input_charset.encode('ascii')
                   else:
  260:                 input_charset = unicode(input_charset, 'ascii')
    3:         except UnicodeError:
    3:             raise errors.CharsetError(input_charset)
  261:         input_charset = input_charset.lower().encode('ascii')
               # Set the input charset after filtering through the aliases and/or codecs
  261:         if not (input_charset in ALIASES or input_charset in CHARSETS):
   10:             try:
   10:                 input_charset = codecs.lookup(input_charset).name
    3:             except LookupError:
    3:                 pass
  261:         self.input_charset = ALIASES.get(input_charset, input_charset)
               # We can try to guess which encoding and conversion to use by the
               # charset_map dictionary.  Try that first, but let the user override
               # it.
  261:         henc, benc, conv = CHARSETS.get(self.input_charset,
  261:                                         (SHORTEST, BASE64, None))
  261:         if not conv:
  229:             conv = self.input_charset
               # Set the attributes, allowing the arguments to override the default.
  261:         self.header_encoding = henc
  261:         self.body_encoding = benc
  261:         self.output_charset = ALIASES.get(conv, conv)
               # Now set the codecs.  If one isn't defined for input_charset,
               # guess and try a Unicode codec with the same name as input_codec.
  261:         self.input_codec = CODEC_MAP.get(self.input_charset,
  261:                                          self.input_charset)
  261:         self.output_codec = CODEC_MAP.get(self.output_charset,
  261:                                           self.output_charset)
       
    1:     def __str__(self):
 1517:         return self.input_charset.lower()
       
    1:     __repr__ = __str__
       
    1:     def __eq__(self, other):
 1328:         return str(self) == str(other).lower()
       
    1:     def __ne__(self, other):
  783:         return not self.__eq__(other)
       
    1:     def get_body_encoding(self):
               """Return the content-transfer-encoding used for body encoding.
       
               This is either the string `quoted-printable' or `base64' depending on
               the encoding used, or it is a function in which case you should call
               the function with a single argument, the Message object being
               encoded.  The function should then set the Content-Transfer-Encoding
               header itself to whatever is appropriate.
       
               Returns "quoted-printable" if self.body_encoding is QP.
               Returns "base64" if self.body_encoding is BASE64.
               Returns "7bit" otherwise.
               """
  161:         assert self.body_encoding != SHORTEST
  161:         if self.body_encoding == QP:
    9:             return 'quoted-printable'
  152:         elif self.body_encoding == BASE64:
   10:             return 'base64'
               else:
  142:             return encode_7or8bit
       
    1:     def convert(self, s):
               """Convert a string from the input_codec to the output_codec."""
   31:         if self.input_codec != self.output_codec:
    6:             return unicode(s, self.input_codec).encode(self.output_codec)
               else:
   25:             return s
       
    1:     def to_splittable(self, s):
               """Convert a possibly multibyte string to a safely splittable format.
       
               Uses the input_codec to try and convert the string to Unicode, so it
               can be safely split on character boundaries (even for multibyte
               characters).
       
               Returns the string as-is if it isn't known how to convert it to
               Unicode with the input_charset.
       
               Characters that could not be converted to Unicode will be replaced
               with the Unicode replacement character U+FFFD.
               """
 1032:         if isinstance(s, unicode) or self.input_codec is None:
  685:             return s
  347:         try:
  347:             return unicode(s, self.input_codec, 'replace')
>>>>>>         except LookupError:
                   # Input codec not installed on system, so return the original
                   # string unchanged.
>>>>>>             return s
       
    1:     def from_splittable(self, ustr, to_output=True):
               """Convert a splittable string back into an encoded string.
       
               Uses the proper codec to try and convert the string from Unicode back
               into an encoded format.  Return the string as-is if it is not Unicode,
               or if it could not be converted from Unicode.
       
               Characters that could not be converted from Unicode will be replaced
               with an appropriate character (usually '?').
       
               If to_output is True (the default), uses output_codec to convert to an
               encoded format.  If to_output is False, uses input_codec.
               """
 2153:         if to_output:
 1889:             codec = self.output_codec
               else:
  264:             codec = self.input_codec
 2153:         if not isinstance(ustr, unicode) or codec is None:
  685:             return ustr
 1468:         try:
 1468:             return ustr.encode(codec, 'replace')
>>>>>>         except LookupError:
                   # Output codec not installed
>>>>>>             return ustr
       
    1:     def get_output_charset(self):
               """Return the output character set.
       
               This is self.output_charset if that is not None, otherwise it is
               self.input_charset.
               """
 3791:         return self.output_charset or self.input_charset
       
    1:     def encoded_header_len(self, s):
               """Return the length of the encoded header string."""
 3275:         cset = self.get_output_charset()
               # The len(s) of a 7bit encoding is len(s)
 3275:         if self.header_encoding == BASE64:
   39:             return email.base64mime.base64_len(s) + len(cset) + MISC_LEN
 3236:         elif self.header_encoding == QP:
  623:             return email.quoprimime.header_quopri_len(s) + len(cset) + MISC_LEN
 2613:         elif self.header_encoding == SHORTEST:
  576:             lenb64 = email.base64mime.base64_len(s)
  576:             lenqp = email.quoprimime.header_quopri_len(s)
  576:             return min(lenb64, lenqp) + len(cset) + MISC_LEN
               else:
 2037:             return len(s)
       
    1:     def header_encode(self, s, convert=False):
               """Header-encode a string, optionally converting it to output_charset.
       
               If convert is True, the string will be converted from the input
               charset to the output charset automatically.  This is not useful for
               multibyte character sets, which have line length issues (multibyte
               characters must be split on a character, not a byte boundary); use the
               high-level Header class to deal with these issues.  convert defaults
               to False.
       
               The type of encoding (base64 or quoted-printable) will be based on
               self.header_encoding.
               """
  215:         cset = self.get_output_charset()
  215:         if convert:
>>>>>>             s = self.convert(s)
               # 7bit/8bit encodings return the string unchanged (modulo conversions)
  215:         if self.header_encoding == BASE64:
   11:             return email.base64mime.header_encode(s, cset)
  204:         elif self.header_encoding == QP:
  114:             return email.quoprimime.header_encode(s, cset, maxlinelen=None)
   90:         elif self.header_encoding == SHORTEST:
   90:             lenb64 = email.base64mime.base64_len(s)
   90:             lenqp = email.quoprimime.header_quopri_len(s)
   90:             if lenb64 < lenqp:
   69:                 return email.base64mime.header_encode(s, cset)
                   else:
   21:                 return email.quoprimime.header_encode(s, cset, maxlinelen=None)
               else:
>>>>>>             return s
       
    1:     def body_encode(self, s, convert=True):
               """Body-encode a string and convert it to output_charset.
       
               If convert is True (the default), the string will be converted from
               the input charset to output charset automatically.  Unlike
               header_encode(), there are no issues with byte boundaries and
               multibyte charsets in email bodies, so this is usually pretty safe.
       
               The type of encoding (base64 or quoted-printable) will be based on
               self.body_encoding.
               """
   34:         if convert:
   31:             s = self.convert(s)
               # 7bit/8bit encodings return the string unchanged (module conversions)
   34:         if self.body_encoding is BASE64:
    7:             return email.base64mime.body_encode(s)
   27:         elif self.body_encoding is QP:
   12:             return email.quoprimime.body_encode(s)
               else:
   15:             return s
