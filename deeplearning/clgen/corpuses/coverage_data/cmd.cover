       """A generic class to build line-oriented command interpreters.
       
       Interpreters constructed with this class obey the following conventions:
       
       1. End of file on input is processed as the command 'EOF'.
       2. A command is parsed out of each line by collecting the prefix composed
          of characters in the identchars member.
       3. A command `foo' is dispatched to a method 'do_foo()'; the do_ method
          is passed a single argument consisting of the remainder of the line.
       4. Typing an empty line repeats the last command.  (Actually, it calls the
          method `emptyline', which may be overridden in a subclass.)
       5. There is a predefined `help' method.  Given an argument `topic', it
          calls the command `help_topic'.  With no arguments, it lists all topics
          with defined help_ functions, broken into up to three topics; documented
          commands, miscellaneous help topics, and undocumented commands.
       6. The command '?' is a synonym for `help'.  The command '!' is a synonym
          for `shell', if a do_shell method exists.
       7. If completion is enabled, completing commands will be done automatically,
          and completing of commands args is done by calling complete_foo() with
          arguments text, line, begidx, endidx.  text is string we are matching
          against, all returned matches must begin with it.  line is the current
          input line (lstripped), begidx and endidx are the beginning and end
          indexes of the text being matched, which could be used to provide
          different completion depending upon which position the argument is in.
       
       The `default' method may be overridden to intercept commands for which there
       is no do_ method.
       
       The `completedefault' method may be overridden to intercept completions for
       commands that have no complete_ method.
       
       The data member `self.ruler' sets the character used to draw separator lines
       in the help messages.  If empty, no ruler line is drawn.  It defaults to "=".
       
       If the value of `self.intro' is nonempty when the cmdloop method is called,
       it is printed out on interpreter startup.  This value may be overridden
       via an optional argument to the cmdloop() method.
       
       The data members `self.doc_header', `self.misc_header', and
       `self.undoc_header' set the headers used for the help function's
       listings of documented functions, miscellaneous topics, and undocumented
       functions respectively.
       
       These interpreters use raw_input; thus, if the readline module is loaded,
       they automatically support Emacs-like command history and editing features.
    1: """
       
    1: import string
       
    1: __all__ = ["Cmd"]
       
    1: PROMPT = '(Cmd) '
    1: IDENTCHARS = string.ascii_letters + string.digits + '_'
       
    2: class Cmd:
           """A simple framework for writing line-oriented command interpreters.
       
           These are often useful for test harnesses, administrative tools, and
           prototypes that will later be wrapped in a more sophisticated interface.
       
           A Cmd instance or subclass instance is a line-oriented interpreter
           framework.  There is no good reason to instantiate Cmd itself; rather,
           it's useful as a superclass of an interpreter class you define yourself
           in order to inherit Cmd's methods and encapsulate action methods.
       
    1:     """
    1:     prompt = PROMPT
    1:     identchars = IDENTCHARS
    1:     ruler = '='
    1:     lastcmd = ''
    1:     intro = None
    1:     doc_leader = ""
    1:     doc_header = "Documented commands (type help <topic>):"
    1:     misc_header = "Miscellaneous help topics:"
    1:     undoc_header = "Undocumented commands:"
    1:     nohelp = "*** No help on %s"
    1:     use_rawinput = 1
       
    1:     def __init__(self, completekey='tab', stdin=None, stdout=None):
               """Instantiate a line-oriented interpreter framework.
       
               The optional argument 'completekey' is the readline name of a
               completion key; it defaults to the Tab key. If completekey is
               not None and the readline module is available, command completion
               is done automatically. The optional arguments stdin and stdout
               specify alternate input and output file objects; if not specified,
               sys.stdin and sys.stdout are used.
       
               """
 1682:         import sys
 1682:         if stdin is not None:
    2:             self.stdin = stdin
               else:
 1680:             self.stdin = sys.stdin
 1682:         if stdout is not None:
 1678:             self.stdout = stdout
               else:
    4:             self.stdout = sys.stdout
 1682:         self.cmdqueue = []
 1682:         self.completekey = completekey
       
    1:     def cmdloop(self, intro=None):
               """Repeatedly issue a prompt, accept input, parse an initial prefix
               off the received input, and dispatch to action methods, passing them
               the remainder of the line as argument.
       
               """
       
    4:         self.preloop()
    4:         if self.use_rawinput and self.completekey:
>>>>>>             try:
>>>>>>                 import readline
>>>>>>                 self.old_completer = readline.get_completer()
>>>>>>                 readline.set_completer(self.complete)
>>>>>>                 readline.parse_and_bind(self.completekey+": complete")
>>>>>>             except ImportError:
>>>>>>                 pass
    4:         try:
    4:             if intro is not None:
>>>>>>                 self.intro = intro
    4:             if self.intro:
>>>>>>                 self.stdout.write(str(self.intro)+"\n")
    4:             stop = None
   19:             while not stop:
   15:                 if self.cmdqueue:
    6:                     line = self.cmdqueue.pop(0)
                       else:
    9:                     if self.use_rawinput:
>>>>>>                         try:
>>>>>>                             line = raw_input(self.prompt)
>>>>>>                         except EOFError:
>>>>>>                             line = 'EOF'
                           else:
    9:                         self.stdout.write(self.prompt)
    9:                         self.stdout.flush()
    9:                         line = self.stdin.readline()
    9:                         if not len(line):
    3:                             line = 'EOF'
                               else:
    6:                             line = line.rstrip('\r\n')
   15:                 line = self.precmd(line)
   15:                 stop = self.onecmd(line)
   15:                 stop = self.postcmd(stop, line)
    4:             self.postloop()
               finally:
    4:             if self.use_rawinput and self.completekey:
>>>>>>                 try:
>>>>>>                     import readline
>>>>>>                     readline.set_completer(self.old_completer)
>>>>>>                 except ImportError:
>>>>>>                     pass
       
       
    1:     def precmd(self, line):
               """Hook method executed just before the command line is
               interpreted, but after the input prompt is generated and issued.
       
               """
   15:         return line
       
    1:     def postcmd(self, stop, line):
               """Hook method executed just after a command dispatch is finished."""
   15:         return stop
       
    1:     def preloop(self):
               """Hook method executed once when the cmdloop() method is called."""
    3:         pass
       
    1:     def postloop(self):
               """Hook method executed once when the cmdloop() method is about to
               return.
       
               """
    3:         pass
       
    1:     def parseline(self, line):
               """Parse the line into a command name and a string containing
               the arguments.  Returns a tuple containing (command, args, line).
               'command' and 'args' may be None if the line couldn't be parsed.
               """
   31:         line = line.strip()
   31:         if not line:
    5:             return None, None, line
   26:         elif line[0] == '?':
    2:             line = 'help ' + line[1:]
   24:         elif line[0] == '!':
    2:             if hasattr(self, 'do_shell'):
    2:                 line = 'shell ' + line[1:]
                   else:
>>>>>>                 return None, None, line
   26:         i, n = 0, len(line)
  131:         while i < n and line[i] in self.identchars: i = i+1
   26:         cmd, arg = line[:i], line[i:].strip()
   26:         return cmd, arg, line
       
    1:     def onecmd(self, line):
               """Interpret the argument as though it had been typed in response
               to the prompt.
       
               This may be overridden, but should not normally need to be;
               see the precmd() and postcmd() methods for useful execution hooks.
               The return value is a flag indicating whether interpretation of
               commands by the interpreter should stop.
       
               """
   24:         cmd, arg, line = self.parseline(line)
   24:         if not line:
    4:             return self.emptyline()
   20:         if cmd is None:
>>>>>>             return self.default(line)
   20:         self.lastcmd = line
   20:         if line == 'EOF' :
    3:             self.lastcmd = ''
   20:         if cmd == '':
>>>>>>             return self.default(line)
               else:
   20:             try:
   20:                 func = getattr(self, 'do_' + cmd)
    2:             except AttributeError:
    2:                 return self.default(line)
   18:             return func(arg)
       
    1:     def emptyline(self):
               """Called when an empty line is entered in response to the prompt.
       
               If this method is not overridden, it repeats the last nonempty
               command entered.
       
               """
    5:         if self.lastcmd:
    4:             return self.onecmd(self.lastcmd)
       
    1:     def default(self, line):
               """Called on an input line when the command prefix is not recognized.
       
               If this method is not overridden, it prints an error message and
               returns.
       
               """
    3:         self.stdout.write('*** Unknown syntax: %s\n'%line)
       
    1:     def completedefault(self, *ignored):
               """Method called to complete an input line when no command-specific
               complete_*() method is available.
       
               By default, it returns an empty list.
       
               """
>>>>>>         return []
       
    1:     def completenames(self, text, *ignored):
    7:         dotext = 'do_'+text
  259:         return [a[3:] for a in self.get_names() if a.startswith(dotext)]
       
    1:     def complete(self, text, state):
               """Return the next possible completion for 'text'.
       
               If a command has not been entered, then complete against command list.
               Otherwise try to call complete_<command> to get list of completions.
               """
>>>>>>         if state == 0:
>>>>>>             import readline
>>>>>>             origline = readline.get_line_buffer()
>>>>>>             line = origline.lstrip()
>>>>>>             stripped = len(origline) - len(line)
>>>>>>             begidx = readline.get_begidx() - stripped
>>>>>>             endidx = readline.get_endidx() - stripped
>>>>>>             if begidx>0:
>>>>>>                 cmd, args, foo = self.parseline(line)
>>>>>>                 if cmd == '':
>>>>>>                     compfunc = self.completedefault
                       else:
>>>>>>                     try:
>>>>>>                         compfunc = getattr(self, 'complete_' + cmd)
>>>>>>                     except AttributeError:
>>>>>>                         compfunc = self.completedefault
                   else:
>>>>>>                 compfunc = self.completenames
>>>>>>             self.completion_matches = compfunc(text, line, begidx, endidx)
>>>>>>         try:
>>>>>>             return self.completion_matches[state]
>>>>>>         except IndexError:
>>>>>>             return None
       
    1:     def get_names(self):
               # This method used to pull in base class attributes
               # at a time dir() didn't do it yet.
   13:         return dir(self.__class__)
       
    1:     def complete_help(self, *args):
    4:         commands = set(self.completenames(*args))
  152:         topics = set(a[5:] for a in self.get_names()
  144:                      if a.startswith('help_' + args[0]))
    4:         return list(commands | topics)
       
    1:     def do_help(self, arg):
               'List available commands with "help" or detailed help with "help cmd".'
    7:         if arg:
                   # XXX check arg syntax
    5:             try:
    5:                 func = getattr(self, 'help_' + arg)
    1:             except AttributeError:
    1:                 try:
    1:                     doc=getattr(self, 'do_' + arg).__doc__
>>>>>>                     if doc:
>>>>>>                         self.stdout.write("%s\n"%str(doc))
>>>>>>                         return
    1:                 except AttributeError:
    1:                     pass
    1:                 self.stdout.write("%s\n"%str(self.nohelp % (arg,)))
    1:                 return
    4:             func()
               else:
    2:             names = self.get_names()
    2:             cmds_doc = []
    2:             cmds_undoc = []
    2:             help = {}
   74:             for name in names:
   72:                 if name[:5] == 'help_':
    2:                     help[name[5:]]=1
    2:             names.sort()
                   # There can be duplicates if routines overridden
    2:             prevname = ''
   74:             for name in names:
   72:                 if name[:3] == 'do_':
    8:                     if name == prevname:
>>>>>>                         continue
    8:                     prevname = name
    8:                     cmd=name[3:]
    8:                     if cmd in help:
    2:                         cmds_doc.append(cmd)
    2:                         del help[cmd]
    6:                     elif getattr(self, name).__doc__:
    2:                         cmds_doc.append(cmd)
                           else:
    4:                         cmds_undoc.append(cmd)
    2:             self.stdout.write("%s\n"%str(self.doc_leader))
    2:             self.print_topics(self.doc_header,   cmds_doc,   15,80)
    2:             self.print_topics(self.misc_header,  help.keys(),15,80)
    2:             self.print_topics(self.undoc_header, cmds_undoc, 15,80)
       
    1:     def print_topics(self, header, cmds, cmdlen, maxcol):
    7:         if cmds:
    5:             self.stdout.write("%s\n"%str(header))
    5:             if self.ruler:
    5:                 self.stdout.write("%s\n"%str(self.ruler * len(header)))
    5:             self.columnize(cmds, maxcol-1)
    5:             self.stdout.write("\n")
       
    1:     def columnize(self, list, displaywidth=80):
               """Display a list of strings as a compact set of columns.
       
               Each column is only as wide as necessary.
               Columns are separated by two spaces (one was not legible enough).
               """
    7:         if not list:
>>>>>>             self.stdout.write("<empty>\n")
>>>>>>             return
   57:         nonstrings = [i for i in range(len(list))
   50:                         if not isinstance(list[i], str)]
    7:         if nonstrings:
>>>>>>             raise TypeError, ("list[i] not a string for i in %s" %
>>>>>>                               ", ".join(map(str, nonstrings)))
    7:         size = len(list)
    7:         if size == 1:
>>>>>>             self.stdout.write('%s\n'%str(list[0]))
>>>>>>             return
               # Try every row count from 1 upwards
   14:         for nrows in range(1, len(list)):
   13:             ncols = (size+nrows-1) // nrows
   13:             colwidths = []
   13:             totwidth = -2
   65:             for col in range(ncols):
   59:                 colwidth = 0
  192:                 for row in range(nrows):
  135:                     i = row + nrows*col
  135:                     if i >= size:
    2:                         break
  133:                     x = list[i]
  133:                     colwidth = max(colwidth, len(x))
   59:                 colwidths.append(colwidth)
   59:                 totwidth += colwidth + 2
   59:                 if totwidth > displaywidth:
    7:                     break
   13:             if totwidth <= displaywidth:
    6:                 break
               else:
    1:             nrows = len(list)
    1:             ncols = 1
    1:             colwidths = [0]
   21:         for row in range(nrows):
   14:             texts = []
   65:             for col in range(ncols):
   51:                 i = row + nrows*col
   51:                 if i >= size:
    1:                     x = ""
                       else:
   50:                     x = list[i]
   51:                 texts.append(x)
   15:             while texts and not texts[-1]:
    1:                 del texts[-1]
   64:             for col in range(len(texts)):
   50:                 texts[col] = texts[col].ljust(colwidths[col])
   14:             self.stdout.write("%s\n"%str("  ".join(texts)))
