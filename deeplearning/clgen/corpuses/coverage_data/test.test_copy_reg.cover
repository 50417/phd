    1: import copy_reg
    1: import unittest
       
    1: from test import test_support
    1: from test.pickletester import ExtensionSaver
       
    2: class C:
    1:     pass
       
       
    2: class WithoutSlots(object):
    1:     pass
       
    2: class WithWeakref(object):
    1:     __slots__ = ('__weakref__',)
       
    2: class WithPrivate(object):
    1:     __slots__ = ('__spam',)
       
    2: class _WithLeadingUnderscoreAndPrivate(object):
    1:     __slots__ = ('__spam',)
       
    2: class ___(object):
    1:     __slots__ = ('__spam',)
       
    2: class WithSingleString(object):
    1:     __slots__ = 'spam'
       
    2: class WithInherited(WithSingleString):
    1:     __slots__ = ('eggs',)
       
       
    2: class CopyRegTestCase(unittest.TestCase):
       
    1:     def test_class(self):
    1:         self.assertRaises(TypeError, copy_reg.pickle,
    1:                           C, None, None)
       
    1:     def test_noncallable_reduce(self):
    1:         self.assertRaises(TypeError, copy_reg.pickle,
    1:                           type(1), "not a callable")
       
    1:     def test_noncallable_constructor(self):
    1:         self.assertRaises(TypeError, copy_reg.pickle,
    1:                           type(1), int, "not a callable")
       
    1:     def test_bool(self):
    1:         import copy
    1:         self.assertEqual(True, copy.copy(True))
       
    1:     def test_extension_registry(self):
    1:         mod, func, code = 'junk1 ', ' junk2', 0xabcd
    1:         e = ExtensionSaver(code)
    1:         try:
                   # Shouldn't be in registry now.
    1:             self.assertRaises(ValueError, copy_reg.remove_extension,
    1:                               mod, func, code)
    1:             copy_reg.add_extension(mod, func, code)
                   # Should be in the registry.
    1:             self.assertTrue(copy_reg._extension_registry[mod, func] == code)
    1:             self.assertTrue(copy_reg._inverted_registry[code] == (mod, func))
                   # Shouldn't be in the cache.
    1:             self.assertNotIn(code, copy_reg._extension_cache)
                   # Redundant registration should be OK.
    1:             copy_reg.add_extension(mod, func, code)  # shouldn't blow up
                   # Conflicting code.
    1:             self.assertRaises(ValueError, copy_reg.add_extension,
    1:                               mod, func, code + 1)
    1:             self.assertRaises(ValueError, copy_reg.remove_extension,
    1:                               mod, func, code + 1)
                   # Conflicting module name.
    1:             self.assertRaises(ValueError, copy_reg.add_extension,
    1:                               mod[1:], func, code )
    1:             self.assertRaises(ValueError, copy_reg.remove_extension,
    1:                               mod[1:], func, code )
                   # Conflicting function name.
    1:             self.assertRaises(ValueError, copy_reg.add_extension,
    1:                               mod, func[1:], code)
    1:             self.assertRaises(ValueError, copy_reg.remove_extension,
    1:                               mod, func[1:], code)
                   # Can't remove one that isn't registered at all.
    1:             if code + 1 not in copy_reg._inverted_registry:
    1:                 self.assertRaises(ValueError, copy_reg.remove_extension,
    1:                                   mod[1:], func[1:], code + 1)
       
               finally:
    1:             e.restore()
       
               # Shouldn't be there anymore.
    1:         self.assertNotIn((mod, func), copy_reg._extension_registry)
               # The code *may* be in copy_reg._extension_registry, though, if
               # we happened to pick on a registered code.  So don't check for
               # that.
       
               # Check valid codes at the limits.
    3:         for code in 1, 0x7fffffff:
    2:             e = ExtensionSaver(code)
    2:             try:
    2:                 copy_reg.add_extension(mod, func, code)
    2:                 copy_reg.remove_extension(mod, func, code)
                   finally:
    2:                 e.restore()
       
               # Ensure invalid codes blow up.
    4:         for code in -1, 0, 0x80000000L:
    3:             self.assertRaises(ValueError, copy_reg.add_extension,
    3:                               mod, func, code)
       
    1:     def test_slotnames(self):
    1:         self.assertEqual(copy_reg._slotnames(WithoutSlots), [])
    1:         self.assertEqual(copy_reg._slotnames(WithWeakref), [])
    1:         expected = ['_WithPrivate__spam']
    1:         self.assertEqual(copy_reg._slotnames(WithPrivate), expected)
    1:         expected = ['_WithLeadingUnderscoreAndPrivate__spam']
    1:         self.assertEqual(copy_reg._slotnames(_WithLeadingUnderscoreAndPrivate),
    1:                          expected)
    1:         self.assertEqual(copy_reg._slotnames(___), ['__spam'])
    1:         self.assertEqual(copy_reg._slotnames(WithSingleString), ['spam'])
    1:         expected = ['eggs', 'spam']
    1:         expected.sort()
    1:         result = copy_reg._slotnames(WithInherited)
    1:         result.sort()
    1:         self.assertEqual(result, expected)
       
       
    1: def test_main():
    1:     test_support.run_unittest(CopyRegTestCase)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
