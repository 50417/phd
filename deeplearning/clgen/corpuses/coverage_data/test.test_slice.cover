       # tests for slice objects; in particular the indices method.
       
    1: import unittest
    1: import weakref
       
    1: from cPickle import loads, dumps
    1: from test import test_support
       
    1: import sys
       
    2: class SliceTest(unittest.TestCase):
       
    1:     def test_constructor(self):
    1:         self.assertRaises(TypeError, slice)
    1:         self.assertRaises(TypeError, slice, 1, 2, 3, 4)
       
    1:     def test_repr(self):
    1:         self.assertEqual(repr(slice(1, 2, 3)), "slice(1, 2, 3)")
       
    1:     def test_hash(self):
               # Verify clearing of SF bug #800796
    1:         self.assertRaises(TypeError, hash, slice(5))
    1:         with self.assertRaises(TypeError):
    1:             slice(5).__hash__()
       
    1:     def test_cmp(self):
    1:         s1 = slice(1, 2, 3)
    1:         s2 = slice(1, 2, 3)
    1:         s3 = slice(1, 2, 4)
    1:         self.assertEqual(s1, s2)
    1:         self.assertNotEqual(s1, s3)
       
    2:         class Exc(Exception):
    1:             pass
       
    2:         class BadCmp(object):
    1:             def __eq__(self, other):
    3:                 raise Exc
    1:             __hash__ = None # Silence Py3k warning
       
    1:         s1 = slice(BadCmp())
    1:         s2 = slice(BadCmp())
    1:         self.assertRaises(Exc, cmp, s1, s2)
    1:         self.assertEqual(s1, s1)
       
    1:         s1 = slice(1, BadCmp())
    1:         s2 = slice(1, BadCmp())
    1:         self.assertEqual(s1, s1)
    1:         self.assertRaises(Exc, cmp, s1, s2)
       
    1:         s1 = slice(1, 2, BadCmp())
    1:         s2 = slice(1, 2, BadCmp())
    1:         self.assertEqual(s1, s1)
    1:         self.assertRaises(Exc, cmp, s1, s2)
       
    1:     def test_members(self):
    1:         s = slice(1)
    1:         self.assertEqual(s.start, None)
    1:         self.assertEqual(s.stop, 1)
    1:         self.assertEqual(s.step, None)
       
    1:         s = slice(1, 2)
    1:         self.assertEqual(s.start, 1)
    1:         self.assertEqual(s.stop, 2)
    1:         self.assertEqual(s.step, None)
       
    1:         s = slice(1, 2, 3)
    1:         self.assertEqual(s.start, 1)
    1:         self.assertEqual(s.stop, 2)
    1:         self.assertEqual(s.step, 3)
       
    2:         class AnyClass:
    1:             pass
       
    1:         obj = AnyClass()
    1:         s = slice(obj)
    1:         self.assertTrue(s.stop is obj)
       
    1:     def test_indices(self):
    1:         self.assertEqual(slice(None           ).indices(10), (0, 10,  1))
    1:         self.assertEqual(slice(None,  None,  2).indices(10), (0, 10,  2))
    1:         self.assertEqual(slice(1,     None,  2).indices(10), (1, 10,  2))
    1:         self.assertEqual(slice(None,  None, -1).indices(10), (9, -1, -1))
    1:         self.assertEqual(slice(None,  None, -2).indices(10), (9, -1, -2))
    1:         self.assertEqual(slice(3,     None, -2).indices(10), (3, -1, -2))
               # issue 3004 tests
    1:         self.assertEqual(slice(None, -9).indices(10), (0, 1, 1))
    1:         self.assertEqual(slice(None, -10).indices(10), (0, 0, 1))
    1:         self.assertEqual(slice(None, -11).indices(10), (0, 0, 1))
    1:         self.assertEqual(slice(None, -10, -1).indices(10), (9, 0, -1))
    1:         self.assertEqual(slice(None, -11, -1).indices(10), (9, -1, -1))
    1:         self.assertEqual(slice(None, -12, -1).indices(10), (9, -1, -1))
    1:         self.assertEqual(slice(None, 9).indices(10), (0, 9, 1))
    1:         self.assertEqual(slice(None, 10).indices(10), (0, 10, 1))
    1:         self.assertEqual(slice(None, 11).indices(10), (0, 10, 1))
    1:         self.assertEqual(slice(None, 8, -1).indices(10), (9, 8, -1))
    1:         self.assertEqual(slice(None, 9, -1).indices(10), (9, 9, -1))
    1:         self.assertEqual(slice(None, 10, -1).indices(10), (9, 9, -1))
       
    1:         self.assertEqual(
    1:             slice(-100,  100     ).indices(10),
    1:             slice(None).indices(10)
               )
    1:         self.assertEqual(
    1:             slice(100,  -100,  -1).indices(10),
    1:             slice(None, None, -1).indices(10)
               )
    1:         self.assertEqual(slice(-100L, 100L, 2L).indices(10), (0, 10,  2))
       
    1:         self.assertEqual(range(10)[::sys.maxint - 1], [0])
       
    1:         self.assertRaises(OverflowError, slice(None).indices, 1L<<100)
       
    1:     def test_setslice_without_getslice(self):
    1:         tmp = []
    2:         class X(object):
    1:             def __setslice__(self, i, j, k):
    1:                 tmp.append((i, j, k))
       
    1:         x = X()
    1:         with test_support.check_py3k_warnings():
    1:             x[1:2] = 42
    1:         self.assertEqual(tmp, [(1, 2, 42)])
       
    1:     def test_pickle(self):
    1:         s = slice(10, 20, 3)
    4:         for protocol in (0,1,2):
    3:             t = loads(dumps(s, protocol))
    3:             self.assertEqual(s, t)
    3:             self.assertEqual(s.indices(15), t.indices(15))
    3:             self.assertNotEqual(id(s), id(t))
       
    1:     def test_cycle(self):
    2:         class myobj(): pass
    1:         o = myobj()
    1:         o.s = slice(o)
    1:         w = weakref.ref(o)
    1:         o = None
    1:         test_support.gc_collect()
    1:         self.assertIsNone(w())
       
    1: def test_main():
    1:     test_support.run_unittest(SliceTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
