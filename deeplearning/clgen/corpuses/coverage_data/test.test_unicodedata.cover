       """ Test script for the unicodedata module.
       
           Written by Marc-Andre Lemburg (mal@lemburg.com).
       
           (c) Copyright CNRI, All Rights Reserved. NO WARRANTY.
       
    1: """
       
    1: import sys
    1: import unittest
    1: import hashlib
    1: import subprocess
    1: import test.test_support
       
    1: encoding = 'utf-8'
       
       
       ### Run tests
       
    2: class UnicodeMethodsTest(unittest.TestCase):
       
           # update this, if the database changes
    1:     expectedchecksum = '4504dffd035baea02c5b9de82bebc3d65e0e0baf'
       
    1:     def test_method_checksum(self):
    1:         h = hashlib.sha1()
65537:         for i in range(0x10000):
65536:             char = unichr(i)
                   data = [
                       # Predicates (single char)
65536:                 u"01"[char.isalnum()],
65536:                 u"01"[char.isalpha()],
65536:                 u"01"[char.isdecimal()],
65536:                 u"01"[char.isdigit()],
65536:                 u"01"[char.islower()],
65536:                 u"01"[char.isnumeric()],
65536:                 u"01"[char.isspace()],
65536:                 u"01"[char.istitle()],
65536:                 u"01"[char.isupper()],
       
                       # Predicates (multiple chars)
65536:                 u"01"[(char + u'abc').isalnum()],
65536:                 u"01"[(char + u'abc').isalpha()],
65536:                 u"01"[(char + u'123').isdecimal()],
65536:                 u"01"[(char + u'123').isdigit()],
65536:                 u"01"[(char + u'abc').islower()],
65536:                 u"01"[(char + u'123').isnumeric()],
65536:                 u"01"[(char + u' \t').isspace()],
65536:                 u"01"[(char + u'abc').istitle()],
65536:                 u"01"[(char + u'ABC').isupper()],
       
                       # Mappings (single char)
65536:                 char.lower(),
65536:                 char.upper(),
65536:                 char.title(),
       
                       # Mappings (multiple chars)
65536:                 (char + u'abc').lower(),
65536:                 (char + u'ABC').upper(),
65536:                 (char + u'abc').title(),
65536:                 (char + u'ABC').title(),
       
                       ]
65536:             h.update(u''.join(data).encode(encoding))
    1:         result = h.hexdigest()
    1:         self.assertEqual(result, self.expectedchecksum)
       
    2: class UnicodeDatabaseTest(unittest.TestCase):
       
    1:     def setUp(self):
               # In case unicodedata is not available, this will raise an ImportError,
               # but the other test cases will still be run
   21:         import unicodedata
   21:         self.db = unicodedata
       
    1:     def tearDown(self):
   21:         del self.db
       
    2: class UnicodeFunctionsTest(UnicodeDatabaseTest):
       
           # update this, if the database changes
    1:     expectedchecksum = '6ccf1b1a36460d2694f9b0b0f0324942fe70ede6'
       
    1:     def test_function_checksum(self):
    1:         data = []
    1:         h = hashlib.sha1()
       
65537:         for i in range(0x10000):
65536:             char = unichr(i)
                   data = [
                       # Properties
65536:                 str(self.db.digit(char, -1)),
65536:                 str(self.db.numeric(char, -1)),
65536:                 str(self.db.decimal(char, -1)),
65536:                 self.db.category(char),
65536:                 self.db.bidirectional(char),
65536:                 self.db.decomposition(char),
65536:                 str(self.db.mirrored(char)),
65536:                 str(self.db.combining(char)),
                   ]
65536:             h.update(''.join(data))
    1:         result = h.hexdigest()
    1:         self.assertEqual(result, self.expectedchecksum)
       
    1:     def test_digit(self):
    1:         self.assertEqual(self.db.digit(u'A', None), None)
    1:         self.assertEqual(self.db.digit(u'9'), 9)
    1:         self.assertEqual(self.db.digit(u'\u215b', None), None)
    1:         self.assertEqual(self.db.digit(u'\u2468'), 9)
    1:         self.assertEqual(self.db.digit(u'\U00020000', None), None)
       
    1:         self.assertRaises(TypeError, self.db.digit)
    1:         self.assertRaises(TypeError, self.db.digit, u'xx')
    1:         self.assertRaises(ValueError, self.db.digit, u'x')
       
    1:     def test_numeric(self):
    1:         self.assertEqual(self.db.numeric(u'A',None), None)
    1:         self.assertEqual(self.db.numeric(u'9'), 9)
    1:         self.assertEqual(self.db.numeric(u'\u215b'), 0.125)
    1:         self.assertEqual(self.db.numeric(u'\u2468'), 9.0)
    1:         self.assertEqual(self.db.numeric(u'\ua627'), 7.0)
    1:         self.assertEqual(self.db.numeric(u'\U00020000', None), None)
       
    1:         self.assertRaises(TypeError, self.db.numeric)
    1:         self.assertRaises(TypeError, self.db.numeric, u'xx')
    1:         self.assertRaises(ValueError, self.db.numeric, u'x')
       
    1:     def test_decimal(self):
    1:         self.assertEqual(self.db.decimal(u'A',None), None)
    1:         self.assertEqual(self.db.decimal(u'9'), 9)
    1:         self.assertEqual(self.db.decimal(u'\u215b', None), None)
    1:         self.assertEqual(self.db.decimal(u'\u2468', None), None)
    1:         self.assertEqual(self.db.decimal(u'\U00020000', None), None)
       
    1:         self.assertRaises(TypeError, self.db.decimal)
    1:         self.assertRaises(TypeError, self.db.decimal, u'xx')
    1:         self.assertRaises(ValueError, self.db.decimal, u'x')
       
    1:     def test_category(self):
    1:         self.assertEqual(self.db.category(u'\uFFFE'), 'Cn')
    1:         self.assertEqual(self.db.category(u'a'), 'Ll')
    1:         self.assertEqual(self.db.category(u'A'), 'Lu')
    1:         self.assertEqual(self.db.category(u'\U00020000'), 'Lo')
       
    1:         self.assertRaises(TypeError, self.db.category)
    1:         self.assertRaises(TypeError, self.db.category, u'xx')
       
    1:     def test_bidirectional(self):
    1:         self.assertEqual(self.db.bidirectional(u'\uFFFE'), '')
    1:         self.assertEqual(self.db.bidirectional(u' '), 'WS')
    1:         self.assertEqual(self.db.bidirectional(u'A'), 'L')
    1:         self.assertEqual(self.db.bidirectional(u'\U00020000'), 'L')
       
    1:         self.assertRaises(TypeError, self.db.bidirectional)
    1:         self.assertRaises(TypeError, self.db.bidirectional, u'xx')
       
    1:     def test_decomposition(self):
    1:         self.assertEqual(self.db.decomposition(u'\uFFFE'),'')
    1:         self.assertEqual(self.db.decomposition(u'\u00bc'), '<fraction> 0031 2044 0034')
       
    1:         self.assertRaises(TypeError, self.db.decomposition)
    1:         self.assertRaises(TypeError, self.db.decomposition, u'xx')
       
    1:     def test_mirrored(self):
    1:         self.assertEqual(self.db.mirrored(u'\uFFFE'), 0)
    1:         self.assertEqual(self.db.mirrored(u'a'), 0)
    1:         self.assertEqual(self.db.mirrored(u'\u2201'), 1)
    1:         self.assertEqual(self.db.mirrored(u'\U00020000'), 0)
       
    1:         self.assertRaises(TypeError, self.db.mirrored)
    1:         self.assertRaises(TypeError, self.db.mirrored, u'xx')
       
    1:     def test_combining(self):
    1:         self.assertEqual(self.db.combining(u'\uFFFE'), 0)
    1:         self.assertEqual(self.db.combining(u'a'), 0)
    1:         self.assertEqual(self.db.combining(u'\u20e1'), 230)
    1:         self.assertEqual(self.db.combining(u'\U00020000'), 0)
       
    1:         self.assertRaises(TypeError, self.db.combining)
    1:         self.assertRaises(TypeError, self.db.combining, u'xx')
       
    1:     def test_normalize(self):
    1:         self.assertRaises(TypeError, self.db.normalize)
    1:         self.assertRaises(ValueError, self.db.normalize, 'unknown', u'xx')
    1:         self.assertEqual(self.db.normalize('NFKC', u''), u'')
               # The rest can be found in test_normalization.py
               # which requires an external file.
       
    1:     def test_pr29(self):
               # http://www.unicode.org/review/pr-29.html
               # See issues #1054943 and #10254.
    1:         composed = (u"\u0b47\u0300\u0b3e", u"\u1100\u0300\u1161",
    1:                     u'Li\u030dt-s\u1e73\u0301',
                           u'\u092e\u093e\u0930\u094d\u0915 \u091c\u093c'
    1:                     + u'\u0941\u0915\u0947\u0930\u092c\u0930\u094d\u0917',
    1:                     u'\u0915\u093f\u0930\u094d\u0917\u093f\u091c\u093c'
    1:                     + 'u\u0938\u094d\u0924\u093e\u0928')
    6:         for text in composed:
    5:             self.assertEqual(self.db.normalize('NFC', text), text)
       
    1:     def test_issue10254(self):
               # Crash reported in #10254
    1:         a = u'C\u0338' * 20  + u'C\u0327'
    1:         b = u'C\u0338' * 20  + u'\xC7'
    1:         self.assertEqual(self.db.normalize('NFC', a), b)
       
    1:     def test_east_asian_width(self):
    1:         eaw = self.db.east_asian_width
    1:         self.assertRaises(TypeError, eaw, 'a')
    1:         self.assertRaises(TypeError, eaw, u'')
    1:         self.assertRaises(TypeError, eaw, u'ra')
    1:         self.assertEqual(eaw(u'\x1e'), 'N')
    1:         self.assertEqual(eaw(u'\x20'), 'Na')
    1:         self.assertEqual(eaw(u'\uC894'), 'W')
    1:         self.assertEqual(eaw(u'\uFF66'), 'H')
    1:         self.assertEqual(eaw(u'\uFF1F'), 'F')
    1:         self.assertEqual(eaw(u'\u2010'), 'A')
    1:         self.assertEqual(eaw(u'\U00020000'), 'W')
       
    2: class UnicodeMiscTest(UnicodeDatabaseTest):
       
    1:     def test_failed_import_during_compiling(self):
               # Issue 4367
               # Decoding \N escapes requires the unicodedata module. If it can't be
               # imported, we shouldn't segfault.
       
               # This program should raise a SyntaxError in the eval.
    1:         code = "import sys;" \
                   "sys.modules['unicodedata'] = None;" \
                   """eval("u'\N{SOFT HYPHEN}'")"""
    1:         args = [sys.executable, "-c", code]
               # We use a subprocess because the unicodedata module may already have
               # been loaded in this process.
    1:         popen = subprocess.Popen(args, stderr=subprocess.PIPE)
    1:         popen.wait()
    1:         self.assertEqual(popen.returncode, 1)
    1:         error = "SyntaxError: (unicode error) \N escapes not supported " \
                   "(can't load unicodedata module)"
    1:         self.assertIn(error, popen.stderr.read())
       
    1:     def test_decimal_numeric_consistent(self):
               # Test that decimal and numeric are consistent,
               # i.e. if a character has a decimal value,
               # its numeric value should be the same.
    1:         count = 0
65537:         for i in xrange(0x10000):
65536:             c = unichr(i)
65536:             dec = self.db.decimal(c, -1)
65536:             if dec != -1:
  351:                 self.assertEqual(dec, self.db.numeric(c))
  351:                 count += 1
    1:         self.assertTrue(count >= 10) # should have tested at least the ASCII digits
       
    1:     def test_digit_numeric_consistent(self):
               # Test that digit and numeric are consistent,
               # i.e. if a character has a digit value,
               # its numeric value should be the same.
    1:         count = 0
65537:         for i in xrange(0x10000):
65536:             c = unichr(i)
65536:             dec = self.db.digit(c, -1)
65536:             if dec != -1:
  445:                 self.assertEqual(dec, self.db.numeric(c))
  445:                 count += 1
    1:         self.assertTrue(count >= 10) # should have tested at least the ASCII digits
       
    1:     def test_bug_1704793(self):
    1:         self.assertEqual(self.db.lookup("GOTHIC LETTER FAIHU"), u'\U00010346')
       
    1:     def test_ucd_510(self):
    1:         import unicodedata
               # In UCD 5.1.0, a mirrored property changed wrt. UCD 3.2.0
    1:         self.assertTrue(unicodedata.mirrored(u"\u0f3a"))
    1:         self.assertTrue(not unicodedata.ucd_3_2_0.mirrored(u"\u0f3a"))
               # Also, we now have two ways of representing
               # the upper-case mapping: as delta, or as absolute value
    1:         self.assertTrue(u"a".upper()==u'A')
    1:         self.assertTrue(u"\u1d79".upper()==u'\ua77d')
    1:         self.assertTrue(u".".upper()==u".")
       
    1:     def test_bug_5828(self):
    1:         self.assertEqual(u"\u1d79".lower(), u"\u1d79")
               # Only U+0000 should have U+0000 as its upper/lower/titlecase variant
    1:         self.assertEqual(
                   [
65537:                 c for c in range(sys.maxunicode+1)
65536:                 if u"\x00" in unichr(c).lower()+unichr(c).upper()+unichr(c).title()
                   ],
    1:             [0]
               )
       
    1:     def test_bug_4971(self):
               # LETTER DZ WITH CARON: DZ, Dz, dz
    1:         self.assertEqual(u"\u01c4".title(), u"\u01c5")
    1:         self.assertEqual(u"\u01c5".title(), u"\u01c5")
    1:         self.assertEqual(u"\u01c6".title(), u"\u01c5")
       
    1:     def test_linebreak_7643(self):
65537:         for i in range(0x10000):
65536:             lines = (unichr(i) + u'A').splitlines()
65536:             if i in (0x0a, 0x0b, 0x0c, 0x0d, 0x85,
65536:                      0x1c, 0x1d, 0x1e, 0x2028, 0x2029):
   10:                 self.assertEqual(len(lines), 2,
   10:                                  r"\u%.4x should be a linebreak" % i)
                   else:
65526:                 self.assertEqual(len(lines), 1,
65526:                                  r"\u%.4x should not be a linebreak" % i)
       
    1: def test_main():
    1:     test.test_support.run_unittest(
    1:         UnicodeMiscTest,
    1:         UnicodeMethodsTest,
    1:         UnicodeFunctionsTest
           )
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
