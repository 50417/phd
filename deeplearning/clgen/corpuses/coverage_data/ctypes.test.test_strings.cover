    1: import unittest
    1: from ctypes import *
    1: from ctypes.test import need_symbol
    1: from test import test_support
       
    2: class StringArrayTestCase(unittest.TestCase):
    1:     def test(self):
    1:         BUF = c_char * 4
       
    1:         buf = BUF("a", "b", "c")
    1:         self.assertEqual(buf.value, "abc")
    1:         self.assertEqual(buf.raw, "abc\000")
       
    1:         buf.value = "ABCD"
    1:         self.assertEqual(buf.value, "ABCD")
    1:         self.assertEqual(buf.raw, "ABCD")
       
    1:         buf.value = "x"
    1:         self.assertEqual(buf.value, "x")
    1:         self.assertEqual(buf.raw, "x\000CD")
       
    1:         buf[1] = "Z"
    1:         self.assertEqual(buf.value, "xZCD")
    1:         self.assertEqual(buf.raw, "xZCD")
       
    1:         self.assertRaises(ValueError, setattr, buf, "value", "aaaaaaaa")
    1:         self.assertRaises(TypeError, setattr, buf, "value", 42)
       
    1:     def test_c_buffer_value(self, memoryview=memoryview):
    2:         buf = c_buffer(32)
       
    2:         buf.value = "Hello, World"
    2:         self.assertEqual(buf.value, "Hello, World")
       
    2:         self.assertRaises(TypeError, setattr, buf, "value", memoryview("Hello, World"))
    2:         self.assertRaises(TypeError, setattr, buf, "value", memoryview("abc"))
    2:         self.assertRaises(ValueError, setattr, buf, "raw", memoryview("x" * 100))
       
    1:     def test_c_buffer_raw(self, memoryview=memoryview):
    2:         buf = c_buffer(32)
       
    2:         buf.raw = memoryview("Hello, World")
    2:         self.assertEqual(buf.value, "Hello, World")
    2:         self.assertRaises(TypeError, setattr, buf, "value", memoryview("abc"))
    2:         self.assertRaises(ValueError, setattr, buf, "raw", memoryview("x" * 100))
       
    1:     def test_c_buffer_deprecated(self):
               # Compatibility with 2.x
    1:         with test_support.check_py3k_warnings():
    1:             self.test_c_buffer_value(buffer)
    1:             self.test_c_buffer_raw(buffer)
       
    1:     def test_param_1(self):
    1:         BUF = c_char * 4
    1:         buf = BUF()
       ##        print c_char_p.from_param(buf)
       
    1:     def test_param_2(self):
    1:         BUF = c_char * 4
    1:         buf = BUF()
       ##        print BUF.from_param(c_char_p("python"))
       ##        print BUF.from_param(BUF(*"pyth"))
       
    2: @need_symbol('c_wchar')
    1: class WStringArrayTestCase(unittest.TestCase):
    1:     def test(self):
    1:         BUF = c_wchar * 4
       
    1:         buf = BUF(u"a", u"b", u"c")
    1:         self.assertEqual(buf.value, u"abc")
       
    1:         buf.value = u"ABCD"
    1:         self.assertEqual(buf.value, u"ABCD")
       
    1:         buf.value = u"x"
    1:         self.assertEqual(buf.value, u"x")
       
    1:         buf[1] = u"Z"
    1:         self.assertEqual(buf.value, u"xZCD")
       
    2: class StringTestCase(unittest.TestCase):
    1:     @unittest.skip('test disabled')
           def test_basic_strings(self):
>>>>>>         cs = c_string("abcdef")
       
               # Cannot call len on a c_string any longer
>>>>>>         self.assertRaises(TypeError, len, cs)
>>>>>>         self.assertEqual(sizeof(cs), 7)
       
               # The value property is the string up to the first terminating NUL.
>>>>>>         self.assertEqual(cs.value, "abcdef")
>>>>>>         self.assertEqual(c_string("abc\000def").value, "abc")
       
               # The raw property is the total buffer contents:
>>>>>>         self.assertEqual(cs.raw, "abcdef\000")
>>>>>>         self.assertEqual(c_string("abc\000def").raw, "abc\000def\000")
       
               # We can change the value:
>>>>>>         cs.value = "ab"
>>>>>>         self.assertEqual(cs.value, "ab")
>>>>>>         self.assertEqual(cs.raw, "ab\000\000\000\000\000")
       
>>>>>>         cs.raw = "XY"
>>>>>>         self.assertEqual(cs.value, "XY")
>>>>>>         self.assertEqual(cs.raw, "XY\000\000\000\000\000")
       
>>>>>>         self.assertRaises(TypeError, c_string, u"123")
       
    1:     @unittest.skip('test disabled')
           def test_sized_strings(self):
       
               # New in releases later than 0.4.0:
>>>>>>         self.assertRaises(TypeError, c_string, None)
       
               # New in releases later than 0.4.0:
               # c_string(number) returns an empty string of size number
>>>>>>         self.assertEqual(len(c_string(32).raw), 32)
>>>>>>         self.assertRaises(ValueError, c_string, -1)
>>>>>>         self.assertRaises(ValueError, c_string, 0)
       
               # These tests fail, because it is no longer initialized
       ##        self.assertEqual(c_string(2).value, "")
       ##        self.assertEqual(c_string(2).raw, "\000\000")
>>>>>>         self.assertEqual(c_string(2).raw[-1], "\000")
>>>>>>         self.assertEqual(len(c_string(2).raw), 2)
       
    1:     @unittest.skip('test disabled')
           def test_initialized_strings(self):
       
>>>>>>         self.assertEqual(c_string("ab", 4).raw[:2], "ab")
>>>>>>         self.assertEqual(c_string("ab", 4).raw[:2:], "ab")
>>>>>>         self.assertEqual(c_string("ab", 4).raw[:2:-1], "ba")
>>>>>>         self.assertEqual(c_string("ab", 4).raw[:2:2], "a")
>>>>>>         self.assertEqual(c_string("ab", 4).raw[-1], "\000")
>>>>>>         self.assertEqual(c_string("ab", 2).raw, "a\000")
       
    1:     @unittest.skip('test disabled')
           def test_toolong(self):
>>>>>>         cs = c_string("abcdef")
               # Much too long string:
>>>>>>         self.assertRaises(ValueError, setattr, cs, "value", "123456789012345")
       
               # One char too long values:
>>>>>>         self.assertRaises(ValueError, setattr, cs, "value", "1234567")
       
    1:     @unittest.skip('test disabled')
           def test_perf(self):
>>>>>>         check_perf()
       
    2: @need_symbol('c_wchar')
    1: class WStringTestCase(unittest.TestCase):
    1:     def test_wchar(self):
    1:         c_wchar(u"x")
    1:         repr(byref(c_wchar(u"x")))
    1:         c_wchar("x")
       
       
    1:     @unittest.skip('test disabled')
           def test_basic_wstrings(self):
>>>>>>         cs = c_wstring(u"abcdef")
       
               # XXX This behaviour is about to change:
               # len returns the size of the internal buffer in bytes.
               # This includes the terminating NUL character.
>>>>>>         self.assertEqual(sizeof(cs), 14)
       
               # The value property is the string up to the first terminating NUL.
>>>>>>         self.assertEqual(cs.value, u"abcdef")
>>>>>>         self.assertEqual(c_wstring(u"abc\000def").value, u"abc")
       
>>>>>>         self.assertEqual(c_wstring(u"abc\000def").value, u"abc")
       
               # The raw property is the total buffer contents:
>>>>>>         self.assertEqual(cs.raw, u"abcdef\000")
>>>>>>         self.assertEqual(c_wstring(u"abc\000def").raw, u"abc\000def\000")
       
               # We can change the value:
>>>>>>         cs.value = u"ab"
>>>>>>         self.assertEqual(cs.value, u"ab")
>>>>>>         self.assertEqual(cs.raw, u"ab\000\000\000\000\000")
       
>>>>>>         self.assertRaises(TypeError, c_wstring, "123")
>>>>>>         self.assertRaises(ValueError, c_wstring, 0)
       
    1:     @unittest.skip('test disabled')
           def test_toolong(self):
>>>>>>         cs = c_wstring(u"abcdef")
               # Much too long string:
>>>>>>         self.assertRaises(ValueError, setattr, cs, "value", u"123456789012345")
       
               # One char too long values:
>>>>>>         self.assertRaises(ValueError, setattr, cs, "value", u"1234567")
       
       
    1: def run_test(rep, msg, func, arg):
>>>>>>     items = range(rep)
>>>>>>     from time import clock
>>>>>>     start = clock()
>>>>>>     for i in items:
>>>>>>         func(arg); func(arg); func(arg); func(arg); func(arg)
>>>>>>     stop = clock()
>>>>>>     print "%20s: %.2f us" % (msg, ((stop-start)*1e6/5/rep))
       
    1: def check_perf():
           # Construct 5 objects
       
>>>>>>     REP = 200000
       
>>>>>>     run_test(REP, "c_string(None)", c_string, None)
>>>>>>     run_test(REP, "c_string('abc')", c_string, 'abc')
       
       # Python 2.3 -OO, win2k, P4 700 MHz:
       #
       #      c_string(None): 1.75 us
       #     c_string('abc'): 2.74 us
       
       # Python 2.2 -OO, win2k, P4 700 MHz:
       #
       #      c_string(None): 2.95 us
       #     c_string('abc'): 3.67 us
       
       
    1: if __name__ == '__main__':
       ##    check_perf()
>>>>>>     unittest.main()
