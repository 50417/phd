    1: import unittest
    1: from ctypes import *
    1: from binascii import hexlify
    1: import re
       
    1: def dump(obj):
           # helper function to dump memory contents in hex, with a hyphen
           # between the bytes.
    4:     h = hexlify(memoryview(obj))
    4:     return re.sub(r"(..)", r"\1-", h)[:-1]
       
       
    2: class Value(Structure):
    1:     _fields_ = [("val", c_byte)]
       
    2: class Container(Structure):
    1:     _fields_ = [("pvalues", POINTER(Value))]
       
    2: class Test(unittest.TestCase):
    1:     def test(self):
               # create an array of 4 values
    1:         val_array = (Value * 4)()
       
               # create a container, which holds a pointer to the pvalues array.
    1:         c = Container()
    1:         c.pvalues = val_array
       
               # memory contains 4 NUL bytes now, that's correct
    1:         self.assertEqual("00-00-00-00", dump(val_array))
       
               # set the values of the array through the pointer:
    5:         for i in range(4):
    4:             c.pvalues[i].val = i + 1
       
    5:         values = [c.pvalues[i].val for i in range(4)]
       
               # These are the expected results: here s the bug!
    1:         self.assertEqual(
    1:             (values, dump(val_array)),
    1:             ([1, 2, 3, 4], "01-02-03-04")
               )
       
    1:     def test_2(self):
       
    1:         val_array = (Value * 4)()
       
               # memory contains 4 NUL bytes now, that's correct
    1:         self.assertEqual("00-00-00-00", dump(val_array))
       
    1:         ptr = cast(val_array, POINTER(Value))
               # set the values of the array through the pointer:
    5:         for i in range(4):
    4:             ptr[i].val = i + 1
       
    5:         values = [ptr[i].val for i in range(4)]
       
               # These are the expected results: here s the bug!
    1:         self.assertEqual(
    1:             (values, dump(val_array)),
    1:             ([1, 2, 3, 4], "01-02-03-04")
               )
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
