    1: import unittest
    1: from ctypes import *
    1: from ctypes.test import need_symbol
    1: import _ctypes_test
       
    1: dll = CDLL(_ctypes_test.__file__)
       
    1: try:
    1:     CALLBACK_FUNCTYPE = WINFUNCTYPE
    1: except NameError:
           # fake to enable this test on Linux
    1:     CALLBACK_FUNCTYPE = CFUNCTYPE
       
    2: class POINT(Structure):
    1:     _fields_ = [("x", c_int), ("y", c_int)]
       
    2: class BasicWrapTestCase(unittest.TestCase):
    1:     def wrap(self, param):
   26:         return param
       
    1:     @need_symbol('c_wchar')
           def test_wchar_parm(self):
    3:         f = dll._testfunc_i_bhilfd
    3:         f.argtypes = [c_byte, c_wchar, c_int, c_long, c_float, c_double]
    3:         result = f(self.wrap(1), self.wrap(u"x"), self.wrap(3), self.wrap(4), self.wrap(5.0), self.wrap(6.0))
    3:         self.assertEqual(result, 139)
    3:         self.assertTrue(type(result), int)
       
    1:     def test_pointers(self):
    3:         f = dll._testfunc_p_p
    3:         f.restype = POINTER(c_int)
    3:         f.argtypes = [POINTER(c_int)]
       
               # This only works if the value c_int(42) passed to the
               # function is still alive while the pointer (the result) is
               # used.
       
    3:         v = c_int(42)
       
    3:         self.assertEqual(pointer(v).contents.value, 42)
    3:         result = f(self.wrap(pointer(v)))
    3:         self.assertEqual(type(result), POINTER(c_int))
    3:         self.assertEqual(result.contents.value, 42)
       
               # This on works...
    3:         result = f(self.wrap(pointer(v)))
    3:         self.assertEqual(result.contents.value, v.value)
       
    3:         p = pointer(c_int(99))
    3:         result = f(self.wrap(p))
    3:         self.assertEqual(result.contents.value, 99)
       
    1:     def test_shorts(self):
    3:         f = dll._testfunc_callback_i_if
       
    3:         args = []
    3:         expected = [262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048,
    3:                     1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]
       
    3:         def callback(v):
   57:             args.append(v)
   57:             return v
       
    3:         CallBack = CFUNCTYPE(c_int, c_int)
       
    3:         cb = CallBack(callback)
    3:         f(self.wrap(2**18), self.wrap(cb))
    3:         self.assertEqual(args, expected)
       
           ################################################################
       
    1:     def test_callbacks(self):
    3:         f = dll._testfunc_callback_i_if
    3:         f.restype = c_int
    3:         f.argtypes = None
       
    3:         MyCallback = CFUNCTYPE(c_int, c_int)
       
    3:         def callback(value):
                   #print "called back with", value
   36:             return value
       
    3:         cb = MyCallback(callback)
       
    3:         result = f(self.wrap(-10), self.wrap(cb))
    3:         self.assertEqual(result, -18)
       
               # test with prototype
    3:         f.argtypes = [c_int, MyCallback]
    3:         cb = MyCallback(callback)
       
    3:         result = f(self.wrap(-10), self.wrap(cb))
    3:         self.assertEqual(result, -18)
       
    3:         result = f(self.wrap(-10), self.wrap(cb))
    3:         self.assertEqual(result, -18)
       
    3:         AnotherCallback = CALLBACK_FUNCTYPE(c_int, c_int, c_int, c_int, c_int)
       
               # check that the prototype works: we call f with wrong
               # argument types
    3:         cb = AnotherCallback(callback)
    3:         self.assertRaises(ArgumentError, f, self.wrap(-10), self.wrap(cb))
       
    1:     def test_callbacks_2(self):
               # Can also use simple datatypes as argument type specifiers
               # for the callback function.
               # In this case the call receives an instance of that type
    3:         f = dll._testfunc_callback_i_if
    3:         f.restype = c_int
       
    3:         MyCallback = CFUNCTYPE(c_int, c_int)
       
    3:         f.argtypes = [c_int, MyCallback]
       
    3:         def callback(value):
                   #print "called back with", value
   12:             self.assertEqual(type(value), int)
   12:             return value
       
    3:         cb = MyCallback(callback)
    3:         result = f(self.wrap(-10), self.wrap(cb))
    3:         self.assertEqual(result, -18)
       
    1:     def test_longlong_callbacks(self):
       
    3:         f = dll._testfunc_callback_q_qf
    3:         f.restype = c_longlong
       
    3:         MyCallback = CFUNCTYPE(c_longlong, c_longlong)
       
    3:         f.argtypes = [c_longlong, MyCallback]
       
    3:         def callback(value):
  120:             self.assertIsInstance(value, (int, long))
  120:             return value & 0x7FFFFFFF
       
    3:         cb = MyCallback(callback)
       
    3:         self.assertEqual(13577625587, int(f(self.wrap(1000000000000), self.wrap(cb))))
       
    1:     def test_byval(self):
               # without prototype
    3:         ptin = POINT(1, 2)
    3:         ptout = POINT()
               # EXPORT int _testfunc_byval(point in, point *pout)
    3:         result = dll._testfunc_byval(ptin, byref(ptout))
    3:         got = result, ptout.x, ptout.y
    3:         expected = 3, 1, 2
    3:         self.assertEqual(got, expected)
       
               # with prototype
    3:         ptin = POINT(101, 102)
    3:         ptout = POINT()
    3:         dll._testfunc_byval.argtypes = (POINT, POINTER(POINT))
    3:         dll._testfunc_byval.restype = c_int
    3:         result = dll._testfunc_byval(self.wrap(ptin), byref(ptout))
    3:         got = result, ptout.x, ptout.y
    3:         expected = 203, 101, 102
    3:         self.assertEqual(got, expected)
       
    1:     def test_struct_return_2H(self):
    6:         class S2H(Structure):
    3:             _fields_ = [("x", c_short),
    3:                         ("y", c_short)]
    3:         dll.ret_2h_func.restype = S2H
    3:         dll.ret_2h_func.argtypes = [S2H]
    3:         inp = S2H(99, 88)
    3:         s2h = dll.ret_2h_func(self.wrap(inp))
    3:         self.assertEqual((s2h.x, s2h.y), (99*2, 88*3))
       
    1:     def test_struct_return_8H(self):
    6:         class S8I(Structure):
    3:             _fields_ = [("a", c_int),
    3:                         ("b", c_int),
    3:                         ("c", c_int),
    3:                         ("d", c_int),
    3:                         ("e", c_int),
    3:                         ("f", c_int),
    3:                         ("g", c_int),
    3:                         ("h", c_int)]
    3:         dll.ret_8i_func.restype = S8I
    3:         dll.ret_8i_func.argtypes = [S8I]
    3:         inp = S8I(9, 8, 7, 6, 5, 4, 3, 2)
    3:         s8i = dll.ret_8i_func(self.wrap(inp))
    3:         self.assertEqual((s8i.a, s8i.b, s8i.c, s8i.d, s8i.e, s8i.f, s8i.g, s8i.h),
    3:                              (9*2, 8*3, 7*4, 6*5, 5*6, 4*7, 3*8, 2*9))
       
    1:     def test_recursive_as_param(self):
    3:         from ctypes import c_int
       
    6:         class A(object):
    3:             pass
       
    3:         a = A()
    3:         a._as_parameter_ = a
    3:         with self.assertRaises(RuntimeError):
    3:             c_int.from_param(a)
       
       
       #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       
    2: class AsParamWrapper(object):
    1:     def __init__(self, param):
   26:         self._as_parameter_ = param
       
    2: class AsParamWrapperTestCase(BasicWrapTestCase):
    1:     wrap = AsParamWrapper
       
       #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       
    2: class AsParamPropertyWrapper(object):
    1:     def __init__(self, param):
   26:         self._param = param
       
    1:     def getParameter(self):
   26:         return self._param
    1:     _as_parameter_ = property(getParameter)
       
    2: class AsParamPropertyWrapperTestCase(BasicWrapTestCase):
    1:     wrap = AsParamPropertyWrapper
       
       #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
