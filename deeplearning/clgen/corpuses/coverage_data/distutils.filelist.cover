       """distutils.filelist
       
       Provides the FileList class, used for poking about the filesystem
       and building lists of files.
    1: """
       
    1: __revision__ = "$Id$"
       
    1: import os, re
    1: import fnmatch
    1: from distutils.util import convert_path
    1: from distutils.errors import DistutilsTemplateError, DistutilsInternalError
    1: from distutils import log
       
    2: class FileList:
           """A list of files built by on exploring the filesystem and filtered by
           applying various patterns to what we find there.
       
           Instance attributes:
             dir
               directory from which files will be taken -- only used if
               'allfiles' not supplied to constructor
             files
               list of filenames currently being built/filtered/manipulated
             allfiles
               complete list of files under consideration (ie. without any
               filtering applied)
    1:     """
       
    1:     def __init__(self, warn=None, debug_print=None):
               # ignore argument to FileList, but keep them for backwards
               # compatibility
   35:         self.allfiles = None
   35:         self.files = []
       
    1:     def set_allfiles(self, allfiles):
    8:         self.allfiles = allfiles
       
    1:     def findall(self, dir=os.curdir):
   12:         self.allfiles = findall(dir)
       
    1:     def debug_print(self, msg):
               """Print 'msg' to stdout if the global DEBUG (taken from the
               DISTUTILS_DEBUG environment variable) flag is true.
               """
  137:         from distutils.debug import DEBUG
  137:         if DEBUG:
    1:             print msg
       
           # -- List-like methods ---------------------------------------------
       
    1:     def append(self, item):
   36:         self.files.append(item)
       
    1:     def extend(self, items):
   13:         self.files.extend(items)
       
    1:     def sort(self):
               # Not a strict lexical sort!
   15:         sortable_files = map(os.path.split, self.files)
   15:         sortable_files.sort()
   15:         self.files = []
   70:         for sort_tuple in sortable_files:
   55:             self.files.append(os.path.join(*sort_tuple))
       
       
           # -- Other miscellaneous utility methods ---------------------------
       
    1:     def remove_duplicates(self):
               # Assumes list has been sorted!
   55:         for i in range(len(self.files) - 1, 0, -1):
   40:             if self.files[i] == self.files[i - 1]:
    2:                 del self.files[i]
       
       
           # -- "File template" methods ---------------------------------------
       
    1:     def _parse_template_line(self, line):
   39:         words = line.split()
   39:         action = words[0]
       
   39:         patterns = dir = dir_pattern = None
       
   39:         if action in ('include', 'exclude',
   39:                       'global-include', 'global-exclude'):
   20:             if len(words) < 2:
    4:                 raise DistutilsTemplateError, \
    4:                       "'%s' expects <pattern1> <pattern2> ..." % action
       
   16:             patterns = map(convert_path, words[1:])
       
   19:         elif action in ('recursive-include', 'recursive-exclude'):
    8:             if len(words) < 3:
    2:                 raise DistutilsTemplateError, \
    2:                       "'%s' expects <dir> <pattern1> <pattern2> ..." % action
       
    6:             dir = convert_path(words[1])
    6:             patterns = map(convert_path, words[2:])
       
   11:         elif action in ('graft', 'prune'):
    9:             if len(words) != 2:
    3:                 raise DistutilsTemplateError, \
    3:                      "'%s' expects a single <dir_pattern>" % action
       
    6:             dir_pattern = convert_path(words[1])
       
               else:
    2:             raise DistutilsTemplateError, "unknown action '%s'" % action
       
   28:         return (action, patterns, dir, dir_pattern)
       
    1:     def process_template_line(self, line):
               # Parse the line: split it up, make sure the right number of words
               # is there, and return the relevant words.  'action' is always
               # defined: it's the first word of the line.  Which of the other
               # three are defined depends on the action; it'll be either
               # patterns, (dir and patterns), or (dir_pattern).
   39:         action, patterns, dir, dir_pattern = self._parse_template_line(line)
       
               # OK, now we know that the action is valid and we have the
               # right number of words on the line for that action -- so we
               # can proceed with minimal error-checking.
   28:         if action == 'include':
    6:             self.debug_print("include " + ' '.join(patterns))
   12:             for pattern in patterns:
    6:                 if not self.include_pattern(pattern, anchor=1):
    1:                     log.warn("warning: no files found matching '%s'",
    1:                              pattern)
       
   22:         elif action == 'exclude':
    3:             self.debug_print("exclude " + ' '.join(patterns))
    6:             for pattern in patterns:
    3:                 if not self.exclude_pattern(pattern, anchor=1):
    1:                     log.warn(("warning: no previously-included files "
    1:                               "found matching '%s'"), pattern)
       
   19:         elif action == 'global-include':
    4:             self.debug_print("global-include " + ' '.join(patterns))
    8:             for pattern in patterns:
    4:                 if not self.include_pattern(pattern, anchor=0):
    1:                     log.warn(("warning: no files found matching '%s' " +
    1:                               "anywhere in distribution"), pattern)
       
   15:         elif action == 'global-exclude':
    3:             self.debug_print("global-exclude " + ' '.join(patterns))
    6:             for pattern in patterns:
    3:                 if not self.exclude_pattern(pattern, anchor=0):
    1:                     log.warn(("warning: no previously-included files matching "
                                     "'%s' found anywhere in distribution"),
    1:                              pattern)
       
   12:         elif action == 'recursive-include':
    3:             self.debug_print("recursive-include %s %s" %
    3:                              (dir, ' '.join(patterns)))
    6:             for pattern in patterns:
    3:                 if not self.include_pattern(pattern, prefix=dir):
    1:                     log.warn(("warning: no files found matching '%s' " +
    1:                                 "under directory '%s'"),
    1:                              pattern, dir)
       
    9:         elif action == 'recursive-exclude':
    3:             self.debug_print("recursive-exclude %s %s" %
    3:                              (dir, ' '.join(patterns)))
    6:             for pattern in patterns:
    3:                 if not self.exclude_pattern(pattern, prefix=dir):
    1:                     log.warn(("warning: no previously-included files matching "
                                     "'%s' found under directory '%s'"),
    1:                              pattern, dir)
       
    6:         elif action == 'graft':
    3:             self.debug_print("graft " + dir_pattern)
    3:             if not self.include_pattern(None, prefix=dir_pattern):
    1:                 log.warn("warning: no directories found matching '%s'",
    1:                          dir_pattern)
       
    3:         elif action == 'prune':
    3:             self.debug_print("prune " + dir_pattern)
    3:             if not self.exclude_pattern(None, prefix=dir_pattern):
    1:                 log.warn(("no previously-included directories found " +
    1:                           "matching '%s'"), dir_pattern)
               else:
>>>>>>             raise DistutilsInternalError, \
>>>>>>                   "this cannot happen: invalid action '%s'" % action
       
           # -- Filtering/selection methods -----------------------------------
       
    1:     def include_pattern(self, pattern, anchor=1, prefix=None, is_regex=0):
               """Select strings (presumably filenames) from 'self.files' that
               match 'pattern', a Unix-style wildcard (glob) pattern.
       
               Patterns are not quite the same as implemented by the 'fnmatch'
               module: '*' and '?'  match non-special characters, where "special"
               is platform-dependent: slash on Unix; colon, slash, and backslash on
               DOS/Windows; and colon on Mac OS.
       
               If 'anchor' is true (the default), then the pattern match is more
               stringent: "*.py" will match "foo.py" but not "foo/bar.py".  If
               'anchor' is false, both of these will match.
       
               If 'prefix' is supplied, then only filenames starting with 'prefix'
               (itself a pattern) and ending with 'pattern', with anything in between
               them, will match.  'anchor' is ignored in this case.
       
               If 'is_regex' is true, 'anchor' and 'prefix' are ignored, and
               'pattern' is assumed to be either a string containing a regex or a
               regex object -- no translation is done, the regex is just compiled
               and used as-is.
       
               Selected strings will be added to self.files.
       
               Return 1 if files are found.
               """
               # XXX docstring lying about what the special chars are?
   19:         files_found = 0
   19:         pattern_re = translate_pattern(pattern, anchor, prefix, is_regex)
   19:         self.debug_print("include_pattern: applying regex r'%s'" %
   19:                          pattern_re.pattern)
       
               # delayed loading of allfiles list
   19:         if self.allfiles is None:
>>>>>>             self.findall()
       
  171:         for name in self.allfiles:
  152:             if pattern_re.search(name):
   23:                 self.debug_print(" adding " + name)
   23:                 self.files.append(name)
   23:                 files_found = 1
       
   19:         return files_found
       
       
    1:     def exclude_pattern(self, pattern, anchor=1, prefix=None, is_regex=0):
               """Remove strings (presumably filenames) from 'files' that match
               'pattern'.
       
               Other parameters are the same as for 'include_pattern()', above.
               The list 'self.files' is modified in place. Return 1 if files are
               found.
               """
   51:         files_found = 0
   51:         pattern_re = translate_pattern(pattern, anchor, prefix, is_regex)
   51:         self.debug_print("exclude_pattern: applying regex r'%s'" %
   51:                          pattern_re.pattern)
  247:         for i in range(len(self.files)-1, -1, -1):
  196:             if pattern_re.search(self.files[i]):
   14:                 self.debug_print(" removing " + self.files[i])
   14:                 del self.files[i]
   14:                 files_found = 1
       
   51:         return files_found
       
       
       # ----------------------------------------------------------------------
       # Utility functions
       
    1: def findall(dir = os.curdir):
           """Find all files under 'dir' and return the list of full filenames
           (relative to 'dir').
           """
   12:     from stat import ST_MODE, S_ISREG, S_ISDIR, S_ISLNK
       
   12:     list = []
   12:     stack = [dir]
   12:     pop = stack.pop
   12:     push = stack.append
       
   55:     while stack:
   43:         dir = pop()
   43:         names = os.listdir(dir)
       
  133:         for name in names:
   90:             if dir != os.curdir:        # avoid the dreaded "./" syndrome
   32:                 fullname = os.path.join(dir, name)
                   else:
   58:                 fullname = name
       
                   # Avoid excess stat calls -- just one will do, thank you!
   90:             stat = os.stat(fullname)
   90:             mode = stat[ST_MODE]
   90:             if S_ISREG(mode):
   59:                 list.append(fullname)
   31:             elif S_ISDIR(mode) and not S_ISLNK(mode):
   31:                 push(fullname)
       
   12:     return list
       
       
    1: def glob_to_re(pattern):
           """Translate a shell-like glob pattern to a regular expression.
       
           Return a string containing the regex.  Differs from
           'fnmatch.translate()' in that '*' does not match "special characters"
           (which are platform-specific).
           """
  109:     pattern_re = fnmatch.translate(pattern)
       
           # '?' and '*' in the glob pattern become '.' and '.*' in the RE, which
           # IMHO is wrong -- '?' and '*' aren't supposed to match slash in Unix,
           # and by extension they shouldn't match such "special characters" under
           # any OS.  So change all non-escaped dots in the RE to match any
           # character except the special characters (currently: just os.sep).
  109:     sep = os.sep
  109:     if os.sep == '\\':
               # we're using a regex to manipulate a regex, so we need
               # to escape the backslash twice
>>>>>>         sep = r'\\\\'
  109:     escaped = r'\1[^%s]' % sep
  109:     pattern_re = re.sub(r'((?<!\\)(\\\\)*)\.', escaped, pattern_re)
  109:     return pattern_re
       
       
    1: def translate_pattern(pattern, anchor=1, prefix=None, is_regex=0):
           """Translate a shell-like wildcard pattern to a compiled regular
           expression.
       
           Return the compiled regex.  If 'is_regex' true,
           then 'pattern' is directly compiled to a regex (if it's a string)
           or just returned as-is (assumes it's a regex object).
           """
   74:     if is_regex:
   14:         if isinstance(pattern, str):
   13:             return re.compile(pattern)
               else:
    1:             return pattern
       
   60:     if pattern:
   30:         pattern_re = glob_to_re(pattern)
           else:
   30:         pattern_re = ''
       
   60:     if prefix is not None:
               # ditch end of pattern character
   36:         empty_pattern = glob_to_re('')
   36:         prefix_re = glob_to_re(prefix)[:-len(empty_pattern)]
   36:         sep = os.sep
   36:         if os.sep == '\\':
>>>>>>             sep = r'\\'
   36:         pattern_re = "^" + sep.join((prefix_re, ".*" + pattern_re))
           else:                               # no prefix -- respect anchor flag
   24:         if anchor:
   17:             pattern_re = "^" + pattern_re
       
   60:     return re.compile(pattern_re)
