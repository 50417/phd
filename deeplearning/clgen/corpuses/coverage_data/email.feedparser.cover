       # Copyright (C) 2004-2006 Python Software Foundation
       # Authors: Baxter, Wouters and Warsaw
       # Contact: email-sig@python.org
       
       """FeedParser - An email feed parser.
       
       The feed parser implements an interface for incrementally parsing an email
       message, line by line.  This has advantages for certain applications, such as
       those reading email messages off a socket.
       
       FeedParser.feed() is the primary interface for pushing new data into the
       parser.  It returns when there's nothing more it can do with the available
       data.  When you have no more data to push into the parser, call .close().
       This completes the parsing and returns the root message object.
       
       The other advantage of this parser is that it will never raise a parsing
       exception.  Instead, when it finds something unexpected, it adds a 'defect' to
       the current message.  Defects are just instances that live on the message
       object's .defects attribute.
    1: """
       
    1: __all__ = ['FeedParser']
       
    1: import re
       
    1: from email import errors
    1: from email import message
       
    1: NLCRE = re.compile('\r\n|\r|\n')
    1: NLCRE_bol = re.compile('(\r\n|\r|\n)')
    1: NLCRE_eol = re.compile('(\r\n|\r|\n)\Z')
    1: NLCRE_crack = re.compile('(\r\n|\r|\n)')
       # RFC 2822 $3.6.8 Optional fields.  ftext is %d33-57 / %d59-126, Any character
       # except controls, SP, and ":".
    1: headerRE = re.compile(r'^(From |[\041-\071\073-\176]{1,}:|[\t ])')
    1: EMPTYSTRING = ''
    1: NL = '\n'
       
    1: NeedMoreData = object()
       
       
       
    2: class BufferedSubFile(object):
           """A file-ish object that can have new data loaded into it.
       
           You can also push and pop line-matching predicates onto a stack.  When the
           current predicate matches the current line, a false EOF response
           (i.e. empty string) is returned instead.  This lets the parser adhere to a
           simple abstraction -- it parses until EOF closes the current message.
    1:     """
    1:     def __init__(self):
               # Chunks of the last partial line pushed into this object.
 1042:         self._partial = []
               # The list of full, pushed lines, in reverse order
 1042:         self._lines = []
               # The stack of false-EOF checking predicates.
 1042:         self._eofstack = []
               # A flag indicating whether the file has been closed or not.
 1042:         self._closed = False
       
    1:     def push_eof_matcher(self, pred):
  968:         self._eofstack.append(pred)
       
    1:     def pop_eof_matcher(self):
  968:         return self._eofstack.pop()
       
    1:     def close(self):
               # Don't forget any trailing partial line.
 1040:         self.pushlines(''.join(self._partial).splitlines(True))
 1040:         self._partial = []
 1040:         self._closed = True
       
    1:     def readline(self):
89467:         if not self._lines:
64237:             if self._closed:
 1183:                 return ''
63054:             return NeedMoreData
               # Pop the line off the stack and see if it matches the current
               # false-EOF predicate.
25230:         line = self._lines.pop()
               # RFC 2046, section 5.1.2 requires us to recognize outer level
               # boundaries at any level of inner nesting.  Do this, but be sure it's
               # in the order of most to least nested.
35401:         for ateof in self._eofstack[::-1]:
11241:             if ateof(line):
                       # We're at the false EOF.  But push the last line back first.
 1070:                 self._lines.append(line)
 1070:                 return ''
24160:         return line
       
    1:     def unreadline(self, line):
               # Let the consumer push a line back into the buffer.
 1354:         assert line is not NeedMoreData
 1354:         self._lines.append(line)
       
    1:     def push(self, data):
               """Push some new data into this object."""
               # Crack into lines, but preserve the linesep characters on the end of each
63054:         parts = data.splitlines(True)
       
63054:         if not parts or not parts[0].endswith(('\n', '\r')):
                   # No new complete lines, so just accumulate partials
60500:             self._partial += parts
60500:             return
       
 2554:         if self._partial:
                   # If there are previous leftovers, complete them now
 1334:             self._partial.append(parts[0])
 1334:             parts[0:1] = ''.join(self._partial).splitlines(True)
 1334:             del self._partial[:]
       
               # If the last element of the list does not end in a newline, then treat
               # it as a partial line.  We only check for '\n' here because a line
               # ending with '\r' might be a line that was split in the middle of a
               # '\r\n' sequence (see bugs 1555570 and 1721862).
 2554:         if not parts[-1].endswith('\n'):
 1296:             self._partial = [parts.pop()]
 2554:         self.pushlines(parts)
       
    1:     def pushlines(self, lines):
               # Crack into lines, but preserve the newlines on the end of each
>>>>>>         parts = NLCRE_crack.split(data)
               # The *ahem* interesting behaviour of re.split when supplied grouping
               # parentheses is that the last element of the resulting list is the
               # data after the final RE.  In the case of a NL/CR terminated string,
               # this is the empty string.
>>>>>>         self._partial = parts.pop()
               #GAN 29Mar09  bugs 1555570, 1721862  Confusion at 8K boundary ending with \r:
               # is there a \n to follow later?
>>>>>>         if not self._partial and parts and parts[-1].endswith('\r'):
>>>>>>             self._partial = parts.pop(-2)+parts.pop()
               # parts is a list of strings, alternating between the line contents
               # and the eol character(s).  Gather up a list of lines after
               # re-attaching the newlines.
>>>>>>         lines = []
>>>>>>         for i in range(len(parts) // 2):
>>>>>>             lines.append(parts[i*2] + parts[i*2+1])
>>>>>>         self.pushlines(lines)
       
    1:     def pushlines(self, lines):
               # Reverse and insert at the front of the lines.
 3594:         self._lines[:0] = lines[::-1]
       
    1:     def is_closed(self):
>>>>>>         return self._closed
       
    1:     def __iter__(self):
 4165:         return self
       
    1:     def next(self):
81583:         line = self.readline()
81583:         if line == '':
 2211:             raise StopIteration
79372:         return line
       
       
       
    2: class FeedParser:
    1:     """A feed-style parser of email."""
       
    1:     def __init__(self, _factory=message.Message):
               """_factory is called with no arguments to create a new message obj"""
 1040:         self._factory = _factory
 1040:         self._input = BufferedSubFile()
 1040:         self._msgstack = []
 1040:         self._parse = self._parsegen().next
 1040:         self._cur = None
 1040:         self._last = None
 1040:         self._headersonly = False
       
           # Non-public interface for supporting Parser's headersonly flag
    1:     def _set_headersonly(self):
    4:         self._headersonly = True
       
    1:     def feed(self, data):
               """Push more data into the parser."""
61045:         self._input.push(data)
61045:         self._call_parse()
       
    1:     def _call_parse(self):
62085:         try:
62085:             self._parse()
 1040:         except StopIteration:
 1040:             pass
       
    1:     def close(self):
               """Parse all remaining data and return the root message object."""
 1040:         self._input.close()
 1040:         self._call_parse()
 1040:         root = self._pop_message()
 1040:         assert not self._msgstack
               # Look for final set of defects
 1040:         if root.get_content_maintype() == 'multipart' \
  373:                and not root.is_multipart():
   26:             root.defects.append(errors.MultipartInvariantViolationDefect())
 1040:         return root
       
    1:     def _new_message(self):
 2170:         msg = self._factory()
 2170:         if self._cur and self._cur.get_content_type() == 'multipart/digest':
  126:             msg.set_default_type('message/rfc822')
 2170:         if self._msgstack:
 1130:             self._msgstack[-1].attach(msg)
 2170:         self._msgstack.append(msg)
 2170:         self._cur = msg
 2170:         self._last = msg
       
    1:     def _pop_message(self):
 2170:         retval = self._msgstack.pop()
 2170:         if self._msgstack:
 1130:             self._cur = self._msgstack[-1]
               else:
 1040:             self._cur = None
 2170:         return retval
       
    1:     def _parsegen(self):
               # Create a new message and start by parsing headers.
 2170:         self._new_message()
 2170:         headers = []
               # Collect the headers, searching for a line that doesn't match the RFC
               # 2822 header or continuation pattern (including an empty line).
53375:         for line in self._input:
53159:             if line is NeedMoreData:
40129:                 yield NeedMoreData
40129:                 continue
13030:             if not headerRE.match(line):
                       # If we saw the RFC defined header/body separator
                       # (i.e. newline), just throw it away. Otherwise the line is
                       # part of the body so push it back.
 1954:                 if not NLCRE.match(line):
   15:                     self._input.unreadline(line)
 1954:                 break
11076:             headers.append(line)
               # Done with the headers, so parse them and figure out what we're
               # supposed to see in the body of the message.
 2170:         self._parse_headers(headers)
               # Headers-only parsing is a backwards compatibility hack, which was
               # necessary in the older parser, which could raise errors.  All
               # remaining lines in the input are thrown into the message body.
 2170:         if self._headersonly:
    4:             lines = []
  397:             while True:
  397:                 line = self._input.readline()
  397:                 if line is NeedMoreData:
    4:                     yield NeedMoreData
    4:                     continue
  393:                 if line == '':
    4:                     break
  389:                 lines.append(line)
    4:             self._cur.set_payload(EMPTYSTRING.join(lines))
    4:             return
 2166:         if self._cur.get_content_type() == 'message/delivery-status':
                   # message/delivery-status contains blocks of headers separated by
                   # a blank line.  We'll represent each header block as a separate
                   # nested message object, but the processing is a bit different
                   # than standard message/* types because there is no body for the
                   # nested messages.  A blank line separates the subparts.
   90:             while True:
   90:                 self._input.push_eof_matcher(NLCRE.match)
   90:                 for retval in self._parsegen():
>>>>>>                     if retval is NeedMoreData:
>>>>>>                         yield NeedMoreData
>>>>>>                         continue
>>>>>>                     break
   90:                 msg = self._pop_message()
                       # We need to pop the EOF matcher in order to tell if we're at
                       # the end of the current file, not the end of the last block
                       # of message headers.
   90:                 self._input.pop_eof_matcher()
                       # The input stream must be sitting at the newline or at the
                       # EOF.  We want to see if we're at the end of this subpart, so
                       # first consume the blank line, then test the next line to see
                       # if we're at this subpart's EOF.
   90:                 while True:
   90:                     line = self._input.readline()
   90:                     if line is NeedMoreData:
>>>>>>                         yield NeedMoreData
>>>>>>                         continue
   90:                     break
   93:                 while True:
   93:                     line = self._input.readline()
   93:                     if line is NeedMoreData:
    3:                         yield NeedMoreData
    3:                         continue
   90:                     break
   90:                 if line == '':
    9:                     break
                       # Not at EOF so this is a line we're going to need.
   81:                 self._input.unreadline(line)
    9:             return
 2157:         if self._cur.get_content_maintype() == 'message':
                   # The message claims to be a message/* type, then what follows is
                   # another RFC 2822 message.
  171:             for retval in self._parsegen():
    9:                 if retval is NeedMoreData:
    9:                     yield NeedMoreData
    9:                     continue
>>>>>>                 break
  162:             self._pop_message()
  162:             return
 1995:         if self._cur.get_content_maintype() == 'multipart':
  412:             boundary = self._cur.get_boundary()
  412:             if boundary is None:
                       # The message /claims/ to be a multipart but it has not
                       # defined a boundary.  That's a problem which we'll handle by
                       # reading everything until the EOF and marking the message as
                       # defective.
    6:                 self._cur.defects.append(errors.NoBoundaryInMultipartDefect())
    6:                 lines = []
  315:                 for line in self._input:
  309:                     if line is NeedMoreData:
    6:                         yield NeedMoreData
    6:                         continue
  303:                     lines.append(line)
    6:                 self._cur.set_payload(EMPTYSTRING.join(lines))
    6:                 return
                   # Create a line match predicate which matches the inter-part
                   # boundary as well as the end-of-multipart boundary.  Don't push
                   # this onto the input stream until we've scanned past the
                   # preamble.
  406:             separator = '--' + boundary
  406:             boundaryre = re.compile(
  406:                 '(?P<sep>' + re.escape(separator) +
  406:                 r')(?P<end>--)?(?P<ws>[ \t]*)(?P<linesep>\r\n|\r|\n)?$')
  406:             capturing_preamble = True
  406:             preamble = []
  406:             linesep = False
 2018:             while True:
 2018:                 line = self._input.readline()
 2018:                 if line is NeedMoreData:
    9:                     yield NeedMoreData
    9:                     continue
 2009:                 if line == '':
   29:                     break
 1980:                 mo = boundaryre.match(line)
 1980:                 if mo:
                           # If we're looking at the end boundary, we're done with
                           # this multipart.  If there was a newline at the end of
                           # the closing boundary, then we need to initialize the
                           # epilogue with the empty string (see below).
 1635:                     if mo.group('end'):
  377:                         linesep = mo.group('linesep')
  377:                         break
                           # We saw an inter-part boundary.  Were we in the preamble?
 1258:                     if capturing_preamble:
  380:                         if preamble:
                                   # According to RFC 2046, the last newline belongs
                                   # to the boundary.
  245:                             lastline = preamble[-1]
  245:                             eolmo = NLCRE_eol.search(lastline)
  245:                             if eolmo:
  245:                                 preamble[-1] = lastline[:-len(eolmo.group(0))]
  245:                             self._cur.preamble = EMPTYSTRING.join(preamble)
  380:                         capturing_preamble = False
  380:                         self._input.unreadline(line)
  380:                         continue
                           # We saw a boundary separating two parts.  Consume any
                           # multiple boundary lines that may be following.  Our
                           # interpretation of RFC 2046 BNF grammar does not produce
                           # body parts within such double boundaries.
  890:                     while True:
  890:                         line = self._input.readline()
  890:                         if line is NeedMoreData:
>>>>>>                             yield NeedMoreData
>>>>>>                             continue
  890:                         mo = boundaryre.match(line)
  890:                         if not mo:
  878:                             self._input.unreadline(line)
  878:                             break
                           # Recurse to parse this subpart; the input stream points
                           # at the subpart's first line.
  878:                     self._input.push_eof_matcher(boundaryre.match)
  887:                     for retval in self._parsegen():
    9:                         if retval is NeedMoreData:
    9:                             yield NeedMoreData
    9:                             continue
>>>>>>                         break
                           # Because of RFC 2046, the newline preceding the boundary
                           # separator actually belongs to the boundary, not the
                           # previous subpart's payload (or epilogue if the previous
                           # part is a multipart).
  878:                     if self._last.get_content_maintype() == 'multipart':
   42:                         epilogue = self._last.epilogue
   42:                         if epilogue == '':
   15:                             self._last.epilogue = None
   27:                         elif epilogue is not None:
   27:                             mo = NLCRE_eol.search(epilogue)
   27:                             if mo:
   27:                                 end = len(mo.group(0))
   27:                                 self._last.epilogue = epilogue[:-end]
                           else:
  836:                         payload = self._last.get_payload()
  836:                         if isinstance(payload, basestring):
  836:                             mo = NLCRE_eol.search(payload)
  836:                             if mo:
  821:                                 payload = payload[:-len(mo.group(0))]
  821:                                 self._last.set_payload(payload)
  878:                     self._input.pop_eof_matcher()
  878:                     self._pop_message()
                           # Set the multipart up for newline cleansing, which will
                           # happen if we're in a nested multipart.
  878:                     self._last = self._cur
                       else:
                           # I think we must be in the preamble
  345:                     assert capturing_preamble
  345:                     preamble.append(line)
                   # We've seen either the EOF or the end boundary.  If we're still
                   # capturing the preamble, we never saw the start boundary.  Note
                   # that as a defect and store the captured text as the payload.
                   # Everything from here to the EOF is epilogue.
  406:             if capturing_preamble:
   26:                 self._cur.defects.append(errors.StartBoundaryNotFoundDefect())
   26:                 self._cur.set_payload(EMPTYSTRING.join(preamble))
   26:                 epilogue = []
   29:                 for line in self._input:
    3:                     if line is NeedMoreData:
>>>>>>                         yield NeedMoreData
>>>>>>                         continue
   26:                 self._cur.epilogue = EMPTYSTRING.join(epilogue)
   26:                 return
                   # If the end boundary ended in a newline, we'll need to make sure
                   # the epilogue isn't None
  380:             if linesep:
  368:                 epilogue = ['']
                   else:
   12:                 epilogue = []
 1011:             for line in self._input:
  631:                 if line is NeedMoreData:
  341:                     yield NeedMoreData
  341:                     continue
  290:                 epilogue.append(line)
                   # Any CRLF at the front of the epilogue is not technically part of
                   # the epilogue.  Also, watch out for an empty string epilogue,
                   # which means a single newline.
  380:             if epilogue:
  368:                 firstline = epilogue[0]
  368:                 bolmo = NLCRE_bol.match(firstline)
  368:                 if bolmo:
>>>>>>                     epilogue[0] = firstline[len(bolmo.group(0)):]
  380:             self._cur.epilogue = EMPTYSTRING.join(epilogue)
  380:             return
               # Otherwise, it's some non-multipart type, so the entire rest of the
               # file contents becomes the payload.
 1583:         lines = []
26853:         for line in self._input:
25270:             if line is NeedMoreData:
20553:                 yield NeedMoreData
20553:                 continue
 4717:             lines.append(line)
 1583:         self._cur.set_payload(EMPTYSTRING.join(lines))
       
    1:     def _parse_headers(self, lines):
               # Passed a list of lines that make up the headers for the current msg
 2170:         lastheader = ''
 2170:         lastvalue = []
13246:         for lineno, line in enumerate(lines):
                   # Check for continuation
11076:             if line[0] in ' \t':
 1905:                 if not lastheader:
                           # The first line of the headers was a continuation.  This
                           # is illegal, so let's note the defect, store the illegal
                           # line, and ignore it for purposes of headers.
    3:                     defect = errors.FirstHeaderLineIsContinuationDefect(line)
    3:                     self._cur.defects.append(defect)
    3:                     continue
 1902:                 lastvalue.append(line)
 1902:                 continue
 9171:             if lastheader:
                       # XXX reconsider the joining of folded lines
 7114:                 lhdr = EMPTYSTRING.join(lastvalue)[:-1].rstrip('\r\n')
 7114:                 self._cur[lastheader] = lhdr
 7114:                 lastheader, lastvalue = '', []
                   # Check for envelope header, i.e. unix-from
 9171:             if line.startswith('From '):
   12:                 if lineno == 0:
                           # Strip off the trailing newline
   12:                     mo = NLCRE_eol.search(line)
   12:                     if mo:
   12:                         line = line[:-len(mo.group(0))]
   12:                     self._cur.set_unixfrom(line)
   12:                     continue
>>>>>>                 elif lineno == len(lines) - 1:
                           # Something looking like a unix-from at the end - it's
                           # probably the first line of the body, so push back the
                           # line and stop.
>>>>>>                     self._input.unreadline(line)
>>>>>>                     return
                       else:
                           # Weirdly placed unix-from line.  Note this as a defect
                           # and ignore it.
>>>>>>                     defect = errors.MisplacedEnvelopeHeaderDefect(line)
>>>>>>                     self._cur.defects.append(defect)
>>>>>>                     continue
                   # Split the line on the colon separating field name from value.
 9159:             i = line.find(':')
 9159:             if i < 0:
>>>>>>                 defect = errors.MalformedHeaderDefect(line)
>>>>>>                 self._cur.defects.append(defect)
>>>>>>                 continue
 9159:             lastheader = line[:i]
 9159:             lastvalue = [line[i+1:].lstrip()]
               # Done with all the lines, so handle the last header.
 2170:         if lastheader:
                   # XXX reconsider the joining of folded lines
 2045:             self._cur[lastheader] = EMPTYSTRING.join(lastvalue).rstrip('\r\n')
