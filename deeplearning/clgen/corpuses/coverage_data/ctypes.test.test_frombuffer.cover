    1: from ctypes import *
    1: import array
    1: import gc
    1: import unittest
       
    2: class X(Structure):
    1:     _fields_ = [("c_int", c_int)]
    1:     init_called = False
    1:     def __init__(self):
>>>>>>         self._init_called = True
       
    2: class Test(unittest.TestCase):
    1:     def test_fom_buffer(self):
    1:         a = array.array("i", range(16))
    1:         x = (c_int * 16).from_buffer(a)
       
    1:         y = X.from_buffer(a)
    1:         self.assertEqual(y.c_int, a[0])
    1:         self.assertFalse(y.init_called)
       
    1:         self.assertEqual(x[:], a.tolist())
       
    1:         a[0], a[-1] = 200, -200
    1:         self.assertEqual(x[:], a.tolist())
       
    1:         self.assertIn(a, x._objects.values())
       
    1:         self.assertRaises(ValueError,
    1:                           c_int.from_buffer, a, -1)
       
    1:         expected = x[:]
    1:         del a; gc.collect(); gc.collect(); gc.collect()
    1:         self.assertEqual(x[:], expected)
       
    1:         self.assertRaises(TypeError,
    1:                           (c_char * 16).from_buffer, "a" * 16)
       
    1:     def test_fom_buffer_with_offset(self):
    1:         a = array.array("i", range(16))
    1:         x = (c_int * 15).from_buffer(a, sizeof(c_int))
       
    1:         self.assertEqual(x[:], a.tolist()[1:])
    2:         self.assertRaises(ValueError, lambda: (c_int * 16).from_buffer(a, sizeof(c_int)))
    2:         self.assertRaises(ValueError, lambda: (c_int * 1).from_buffer(a, 16 * sizeof(c_int)))
       
    1:     def test_from_buffer_copy(self):
    1:         a = array.array("i", range(16))
    1:         x = (c_int * 16).from_buffer_copy(a)
       
    1:         y = X.from_buffer_copy(a)
    1:         self.assertEqual(y.c_int, a[0])
    1:         self.assertFalse(y.init_called)
       
    1:         self.assertEqual(x[:], range(16))
       
    1:         a[0], a[-1] = 200, -200
    1:         self.assertEqual(x[:], range(16))
       
    1:         self.assertEqual(x._objects, None)
       
    1:         self.assertRaises(ValueError,
    1:                           c_int.from_buffer, a, -1)
       
    1:         del a; gc.collect(); gc.collect(); gc.collect()
    1:         self.assertEqual(x[:], range(16))
       
    1:         x = (c_char * 16).from_buffer_copy("a" * 16)
    1:         self.assertEqual(x[:], "a" * 16)
       
    1:     def test_fom_buffer_copy_with_offset(self):
    1:         a = array.array("i", range(16))
    1:         x = (c_int * 15).from_buffer_copy(a, sizeof(c_int))
       
    1:         self.assertEqual(x[:], a.tolist()[1:])
    1:         self.assertRaises(ValueError,
    1:                           (c_int * 16).from_buffer_copy, a, sizeof(c_int))
    1:         self.assertRaises(ValueError,
    1:                           (c_int * 1).from_buffer_copy, a, 16 * sizeof(c_int))
       
    1:     def test_abstract(self):
    1:         self.assertRaises(TypeError, Array.from_buffer, bytearray(10))
    1:         self.assertRaises(TypeError, Structure.from_buffer, bytearray(10))
    1:         self.assertRaises(TypeError, Union.from_buffer, bytearray(10))
    1:         self.assertRaises(TypeError, Array.from_buffer_copy, b"123")
    1:         self.assertRaises(TypeError, Structure.from_buffer_copy, b"123")
    1:         self.assertRaises(TypeError, Union.from_buffer_copy, b"123")
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
