       """
       Here is probably the place to write the docs, since the test-cases
       show how the type behave.
       
       Later...
    1: """
       
    1: from ctypes import *
    1: from ctypes.test import need_symbol
    1: import sys, unittest
       
    1: try:
    1:     WINFUNCTYPE
    1: except NameError:
           # fake to enable this test on Linux
    1:     WINFUNCTYPE = CFUNCTYPE
       
    1: import _ctypes_test
    1: dll = CDLL(_ctypes_test.__file__)
    1: if sys.platform == "win32":
>>>>>>     windll = WinDLL(_ctypes_test.__file__)
       
    2: class POINT(Structure):
    1:     _fields_ = [("x", c_int), ("y", c_int)]
    2: class RECT(Structure):
    1:     _fields_ = [("left", c_int), ("top", c_int),
    1:                 ("right", c_int), ("bottom", c_int)]
    2: class FunctionTestCase(unittest.TestCase):
       
    1:     def test_mro(self):
               # in Python 2.3, this raises TypeError: MRO conflict among bases classes,
               # in Python 2.2 it works.
               #
               # But in early versions of _ctypes.c, the result of tp_new
               # wasn't checked, and it even crashed Python.
               # Found by Greg Chapman.
       
    1:         try:
    2:             class X(object, Array):
    1:                 _length_ = 5
    1:                 _type_ = "i"
    1:         except TypeError:
    1:             pass
       
       
    1:         from _ctypes import _Pointer
    1:         try:
    2:             class X(object, _Pointer):
    1:                 pass
    1:         except TypeError:
    1:             pass
       
    1:         from _ctypes import _SimpleCData
    1:         try:
    2:             class X(object, _SimpleCData):
    1:                 _type_ = "i"
    1:         except TypeError:
    1:             pass
       
    1:         try:
    2:             class X(object, Structure):
    1:                 _fields_ = []
    1:         except TypeError:
    1:             pass
       
       
    1:     @need_symbol('c_wchar')
           def test_wchar_parm(self):
    1:         f = dll._testfunc_i_bhilfd
    1:         f.argtypes = [c_byte, c_wchar, c_int, c_long, c_float, c_double]
    1:         result = f(1, u"x", 3, 4, 5.0, 6.0)
    1:         self.assertEqual(result, 139)
    1:         self.assertEqual(type(result), int)
       
    1:     @need_symbol('c_wchar')
           def test_wchar_result(self):
    1:         f = dll._testfunc_i_bhilfd
    1:         f.argtypes = [c_byte, c_short, c_int, c_long, c_float, c_double]
    1:         f.restype = c_wchar
    1:         result = f(0, 0, 0, 0, 0, 0)
    1:         self.assertEqual(result, u'\x00')
       
    1:     def test_voidresult(self):
    1:         f = dll._testfunc_v
    1:         f.restype = None
    1:         f.argtypes = [c_int, c_int, POINTER(c_int)]
    1:         result = c_int()
    1:         self.assertEqual(None, f(1, 2, byref(result)))
    1:         self.assertEqual(result.value, 3)
       
    1:     def test_intresult(self):
    1:         f = dll._testfunc_i_bhilfd
    1:         f.argtypes = [c_byte, c_short, c_int, c_long, c_float, c_double]
    1:         f.restype = c_int
    1:         result = f(1, 2, 3, 4, 5.0, 6.0)
    1:         self.assertEqual(result, 21)
    1:         self.assertEqual(type(result), int)
       
    1:         result = f(-1, -2, -3, -4, -5.0, -6.0)
    1:         self.assertEqual(result, -21)
    1:         self.assertEqual(type(result), int)
       
               # If we declare the function to return a short,
               # is the high part split off?
    1:         f.restype = c_short
    1:         result = f(1, 2, 3, 4, 5.0, 6.0)
    1:         self.assertEqual(result, 21)
    1:         self.assertEqual(type(result), int)
       
    1:         result = f(1, 2, 3, 0x10004, 5.0, 6.0)
    1:         self.assertEqual(result, 21)
    1:         self.assertEqual(type(result), int)
       
               # You cannot assign character format codes as restype any longer
    1:         self.assertRaises(TypeError, setattr, f, "restype", "i")
       
    1:     def test_floatresult(self):
    1:         f = dll._testfunc_f_bhilfd
    1:         f.argtypes = [c_byte, c_short, c_int, c_long, c_float, c_double]
    1:         f.restype = c_float
    1:         result = f(1, 2, 3, 4, 5.0, 6.0)
    1:         self.assertEqual(result, 21)
    1:         self.assertEqual(type(result), float)
       
    1:         result = f(-1, -2, -3, -4, -5.0, -6.0)
    1:         self.assertEqual(result, -21)
    1:         self.assertEqual(type(result), float)
       
    1:     def test_doubleresult(self):
    1:         f = dll._testfunc_d_bhilfd
    1:         f.argtypes = [c_byte, c_short, c_int, c_long, c_float, c_double]
    1:         f.restype = c_double
    1:         result = f(1, 2, 3, 4, 5.0, 6.0)
    1:         self.assertEqual(result, 21)
    1:         self.assertEqual(type(result), float)
       
    1:         result = f(-1, -2, -3, -4, -5.0, -6.0)
    1:         self.assertEqual(result, -21)
    1:         self.assertEqual(type(result), float)
       
    1:     def test_longdoubleresult(self):
    1:         f = dll._testfunc_D_bhilfD
    1:         f.argtypes = [c_byte, c_short, c_int, c_long, c_float, c_longdouble]
    1:         f.restype = c_longdouble
    1:         result = f(1, 2, 3, 4, 5.0, 6.0)
    1:         self.assertEqual(result, 21)
    1:         self.assertEqual(type(result), float)
       
    1:         result = f(-1, -2, -3, -4, -5.0, -6.0)
    1:         self.assertEqual(result, -21)
    1:         self.assertEqual(type(result), float)
       
    1:     @need_symbol('c_longlong')
           def test_longlongresult(self):
    1:         f = dll._testfunc_q_bhilfd
    1:         f.restype = c_longlong
    1:         f.argtypes = [c_byte, c_short, c_int, c_long, c_float, c_double]
    1:         result = f(1, 2, 3, 4, 5.0, 6.0)
    1:         self.assertEqual(result, 21)
       
    1:         f = dll._testfunc_q_bhilfdq
    1:         f.restype = c_longlong
    1:         f.argtypes = [c_byte, c_short, c_int, c_long, c_float, c_double, c_longlong]
    1:         result = f(1, 2, 3, 4, 5.0, 6.0, 21)
    1:         self.assertEqual(result, 42)
       
    1:     def test_stringresult(self):
    1:         f = dll._testfunc_p_p
    1:         f.argtypes = None
    1:         f.restype = c_char_p
    1:         result = f("123")
    1:         self.assertEqual(result, "123")
       
    1:         result = f(None)
    1:         self.assertEqual(result, None)
       
    1:     def test_pointers(self):
    1:         f = dll._testfunc_p_p
    1:         f.restype = POINTER(c_int)
    1:         f.argtypes = [POINTER(c_int)]
       
               # This only works if the value c_int(42) passed to the
               # function is still alive while the pointer (the result) is
               # used.
       
    1:         v = c_int(42)
       
    1:         self.assertEqual(pointer(v).contents.value, 42)
    1:         result = f(pointer(v))
    1:         self.assertEqual(type(result), POINTER(c_int))
    1:         self.assertEqual(result.contents.value, 42)
       
               # This on works...
    1:         result = f(pointer(v))
    1:         self.assertEqual(result.contents.value, v.value)
       
    1:         p = pointer(c_int(99))
    1:         result = f(p)
    1:         self.assertEqual(result.contents.value, 99)
       
    1:         arg = byref(v)
    1:         result = f(arg)
    1:         self.assertNotEqual(result.contents, v.value)
       
    1:         self.assertRaises(ArgumentError, f, byref(c_short(22)))
       
               # It is dangerous, however, because you don't control the lifetime
               # of the pointer:
    1:         result = f(byref(c_int(99)))
    1:         self.assertNotEqual(result.contents, 99)
       
    1:     def test_errors(self):
>>>>>>         f = dll._testfunc_p_p
>>>>>>         f.restype = c_int
       
>>>>>>         class X(Structure):
>>>>>>             _fields_ = [("y", c_int)]
       
>>>>>>         self.assertRaises(TypeError, f, X()) #cannot convert parameter
       
           ################################################################
    1:     def test_shorts(self):
    1:         f = dll._testfunc_callback_i_if
       
    1:         args = []
    1:         expected = [262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048,
    1:                     1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]
       
    1:         def callback(v):
   19:             args.append(v)
   19:             return v
       
    1:         CallBack = CFUNCTYPE(c_int, c_int)
       
    1:         cb = CallBack(callback)
    1:         f(2**18, cb)
    1:         self.assertEqual(args, expected)
       
           ################################################################
       
       
    1:     def test_callbacks(self):
    1:         f = dll._testfunc_callback_i_if
    1:         f.restype = c_int
    1:         f.argtypes = None
       
    1:         MyCallback = CFUNCTYPE(c_int, c_int)
       
    1:         def callback(value):
                   #print "called back with", value
    8:             return value
       
    1:         cb = MyCallback(callback)
    1:         result = f(-10, cb)
    1:         self.assertEqual(result, -18)
       
               # test with prototype
    1:         f.argtypes = [c_int, MyCallback]
    1:         cb = MyCallback(callback)
    1:         result = f(-10, cb)
    1:         self.assertEqual(result, -18)
       
    1:         AnotherCallback = WINFUNCTYPE(c_int, c_int, c_int, c_int, c_int)
       
               # check that the prototype works: we call f with wrong
               # argument types
    1:         cb = AnotherCallback(callback)
    1:         self.assertRaises(ArgumentError, f, -10, cb)
       
       
    1:     def test_callbacks_2(self):
               # Can also use simple datatypes as argument type specifiers
               # for the callback function.
               # In this case the call receives an instance of that type
    1:         f = dll._testfunc_callback_i_if
    1:         f.restype = c_int
       
    1:         MyCallback = CFUNCTYPE(c_int, c_int)
       
    1:         f.argtypes = [c_int, MyCallback]
       
    1:         def callback(value):
                   #print "called back with", value
    4:             self.assertEqual(type(value), int)
    4:             return value
       
    1:         cb = MyCallback(callback)
    1:         result = f(-10, cb)
    1:         self.assertEqual(result, -18)
       
    1:     @need_symbol('c_longlong')
           def test_longlong_callbacks(self):
       
    1:         f = dll._testfunc_callback_q_qf
    1:         f.restype = c_longlong
       
    1:         MyCallback = CFUNCTYPE(c_longlong, c_longlong)
       
    1:         f.argtypes = [c_longlong, MyCallback]
       
    1:         def callback(value):
   40:             self.assertIsInstance(value, (int, long))
   40:             return value & 0x7FFFFFFF
       
    1:         cb = MyCallback(callback)
       
    1:         self.assertEqual(13577625587, f(1000000000000, cb))
       
    1:     def test_errors(self):
    1:         self.assertRaises(AttributeError, getattr, dll, "_xxx_yyy")
    1:         self.assertRaises(ValueError, c_int.in_dll, dll, "_xxx_yyy")
       
    1:     def test_byval(self):
       
               # without prototype
    1:         ptin = POINT(1, 2)
    1:         ptout = POINT()
               # EXPORT int _testfunc_byval(point in, point *pout)
    1:         result = dll._testfunc_byval(ptin, byref(ptout))
    1:         got = result, ptout.x, ptout.y
    1:         expected = 3, 1, 2
    1:         self.assertEqual(got, expected)
       
               # with prototype
    1:         ptin = POINT(101, 102)
    1:         ptout = POINT()
    1:         dll._testfunc_byval.argtypes = (POINT, POINTER(POINT))
    1:         dll._testfunc_byval.restype = c_int
    1:         result = dll._testfunc_byval(ptin, byref(ptout))
    1:         got = result, ptout.x, ptout.y
    1:         expected = 203, 101, 102
    1:         self.assertEqual(got, expected)
       
    1:     def test_struct_return_2H(self):
    2:         class S2H(Structure):
    1:             _fields_ = [("x", c_short),
    1:                         ("y", c_short)]
    1:         dll.ret_2h_func.restype = S2H
    1:         dll.ret_2h_func.argtypes = [S2H]
    1:         inp = S2H(99, 88)
    1:         s2h = dll.ret_2h_func(inp)
    1:         self.assertEqual((s2h.x, s2h.y), (99*2, 88*3))
       
    1:     @unittest.skipUnless(sys.platform == "win32", 'Windows-specific test')
           def test_struct_return_2H_stdcall(self):
>>>>>>         class S2H(Structure):
>>>>>>             _fields_ = [("x", c_short),
>>>>>>                         ("y", c_short)]
       
>>>>>>         windll.s_ret_2h_func.restype = S2H
>>>>>>         windll.s_ret_2h_func.argtypes = [S2H]
>>>>>>         s2h = windll.s_ret_2h_func(S2H(99, 88))
>>>>>>         self.assertEqual((s2h.x, s2h.y), (99*2, 88*3))
       
    1:     def test_struct_return_8H(self):
    2:         class S8I(Structure):
    1:             _fields_ = [("a", c_int),
    1:                         ("b", c_int),
    1:                         ("c", c_int),
    1:                         ("d", c_int),
    1:                         ("e", c_int),
    1:                         ("f", c_int),
    1:                         ("g", c_int),
    1:                         ("h", c_int)]
    1:         dll.ret_8i_func.restype = S8I
    1:         dll.ret_8i_func.argtypes = [S8I]
    1:         inp = S8I(9, 8, 7, 6, 5, 4, 3, 2)
    1:         s8i = dll.ret_8i_func(inp)
    1:         self.assertEqual((s8i.a, s8i.b, s8i.c, s8i.d, s8i.e, s8i.f, s8i.g, s8i.h),
    1:                              (9*2, 8*3, 7*4, 6*5, 5*6, 4*7, 3*8, 2*9))
       
    1:     @unittest.skipUnless(sys.platform == "win32", 'Windows-specific test')
           def test_struct_return_8H_stdcall(self):
>>>>>>         class S8I(Structure):
>>>>>>             _fields_ = [("a", c_int),
>>>>>>                         ("b", c_int),
>>>>>>                         ("c", c_int),
>>>>>>                         ("d", c_int),
>>>>>>                         ("e", c_int),
>>>>>>                         ("f", c_int),
>>>>>>                         ("g", c_int),
>>>>>>                         ("h", c_int)]
>>>>>>         windll.s_ret_8i_func.restype = S8I
>>>>>>         windll.s_ret_8i_func.argtypes = [S8I]
>>>>>>         inp = S8I(9, 8, 7, 6, 5, 4, 3, 2)
>>>>>>         s8i = windll.s_ret_8i_func(inp)
>>>>>>         self.assertEqual(
>>>>>>                 (s8i.a, s8i.b, s8i.c, s8i.d, s8i.e, s8i.f, s8i.g, s8i.h),
>>>>>>                 (9*2, 8*3, 7*4, 6*5, 5*6, 4*7, 3*8, 2*9))
       
    1:     def test_sf1651235(self):
               # see http://www.python.org/sf/1651235
       
    1:         proto = CFUNCTYPE(c_int, RECT, POINT)
    1:         def callback(*args):
>>>>>>             return 0
       
    1:         callback = proto(callback)
    2:         self.assertRaises(ArgumentError, lambda: callback((1, 2, 3, 4), POINT()))
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
