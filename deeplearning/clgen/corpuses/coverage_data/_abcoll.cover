       # Copyright 2007 Google, Inc. All Rights Reserved.
       # Licensed to PSF under a Contributor Agreement.
       
       """Abstract Base Classes (ABCs) for collections, according to PEP 3119.
       
       DON'T USE THIS MODULE DIRECTLY!  The classes here should be imported
       via collections; they are defined here only to alleviate certain
       bootstrapping issues.  Unit tests are in test_collections.
>>>>>> """
       
>>>>>> from abc import ABCMeta, abstractmethod
>>>>>> import sys
       
>>>>>> __all__ = ["Hashable", "Iterable", "Iterator",
>>>>>>            "Sized", "Container", "Callable",
>>>>>>            "Set", "MutableSet",
>>>>>>            "Mapping", "MutableMapping",
>>>>>>            "MappingView", "KeysView", "ItemsView", "ValuesView",
>>>>>>            "Sequence", "MutableSequence",
                  ]
       
       ### ONE-TRICK PONIES ###
       
>>>>>> def _hasattr(C, attr):
  117:     try:
  336:         return any(attr in B.__dict__ for B in C.__mro__)
   12:     except AttributeError:
               # Old-style class
   12:         return hasattr(C, attr)
       
       
>>>>>> class Hashable:
>>>>>>     __metaclass__ = ABCMeta
       
>>>>>>     @abstractmethod
           def __hash__(self):
    1:         return 0
       
>>>>>>     @classmethod
           def __subclasshook__(cls, C):
   37:         if cls is Hashable:
   28:             try:
   36:                 for B in C.__mro__:
   34:                     if "__hash__" in B.__dict__:
   26:                         if B.__dict__["__hash__"]:
   19:                             return True
    7:                         break
    2:             except AttributeError:
                       # Old-style class
    2:                 if getattr(C, "__hash__", None):
    1:                     return True
   17:         return NotImplemented
       
       
>>>>>> class Iterable:
>>>>>>     __metaclass__ = ABCMeta
       
>>>>>>     @abstractmethod
           def __iter__(self):
    1:         while False:
>>>>>>             yield None
       
>>>>>>     @classmethod
           def __subclasshook__(cls, C):
   33:         if cls is Iterable:
   23:             if _hasattr(C, "__iter__"):
   13:                 return True
   20:         return NotImplemented
       
>>>>>> Iterable.register(str)
       
       
>>>>>> class Iterator(Iterable):
       
>>>>>>     @abstractmethod
           def next(self):
               'Return the next item from the iterator. When exhausted, raise StopIteration'
>>>>>>         raise StopIteration
       
>>>>>>     def __iter__(self):
>>>>>>         return self
       
>>>>>>     @classmethod
           def __subclasshook__(cls, C):
   33:         if cls is Iterator:
   24:             if _hasattr(C, "next") and _hasattr(C, "__iter__"):
    7:                 return True
   26:         return NotImplemented
       
       
>>>>>> class Sized:
>>>>>>     __metaclass__ = ABCMeta
       
>>>>>>     @abstractmethod
           def __len__(self):
>>>>>>         return 0
       
>>>>>>     @classmethod
           def __subclasshook__(cls, C):
  479:         if cls is Sized:
   21:             if _hasattr(C, "__len__"):
   12:                 return True
  467:         return NotImplemented
       
       
>>>>>> class Container:
>>>>>>     __metaclass__ = ABCMeta
       
>>>>>>     @abstractmethod
           def __contains__(self, x):
>>>>>>         return False
       
>>>>>>     @classmethod
           def __subclasshook__(cls, C):
   26:         if cls is Container:
   20:             if _hasattr(C, "__contains__"):
   11:                 return True
   15:         return NotImplemented
       
       
>>>>>> class Callable:
>>>>>>     __metaclass__ = ABCMeta
       
>>>>>>     @abstractmethod
           def __call__(self, *args, **kwds):
>>>>>>         return False
       
>>>>>>     @classmethod
           def __subclasshook__(cls, C):
   28:         if cls is Callable:
   22:             if _hasattr(C, "__call__"):
    7:                 return True
   21:         return NotImplemented
       
       
       ### SETS ###
       
       
>>>>>> class Set(Sized, Iterable, Container):
           """A set is a finite, iterable container.
       
           This class provides concrete generic implementations of all
           methods except for __contains__, __iter__ and __len__.
       
           To override the comparisons (presumably for speed, as the
           semantics are fixed), redefine __le__ and __ge__,
           then the other operations will automatically follow suit.
           """
       
>>>>>>     def __le__(self, other):
   21:         if not isinstance(other, Set):
    4:             return NotImplemented
   17:         if len(self) > len(other):
>>>>>>             return False
   88:         for elem in self:
   72:             if elem not in other:
    1:                 return False
   16:         return True
       
>>>>>>     def __lt__(self, other):
    8:         if not isinstance(other, Set):
    4:             return NotImplemented
    4:         return len(self) < len(other) and self.__le__(other)
       
>>>>>>     def __gt__(self, other):
   15:         if not isinstance(other, Set):
    4:             return NotImplemented
   11:         return len(self) > len(other) and self.__ge__(other)
       
>>>>>>     def __ge__(self, other):
   17:         if not isinstance(other, Set):
    4:             return NotImplemented
   13:         if len(self) < len(other):
>>>>>>             return False
   34:         for elem in other:
   24:             if elem not in self:
    3:                 return False
   10:         return True
       
>>>>>>     def __eq__(self, other):
   25:         if not isinstance(other, Set):
    7:             return NotImplemented
   18:         return len(self) == len(other) and self.__le__(other)
       
>>>>>>     def __ne__(self, other):
   10:         return not (self == other)
       
>>>>>>     @classmethod
           def _from_iterable(cls, it):
               '''Construct an instance of the class from any iterable input.
       
               Must override this method if the class constructor signature
               does not accept an iterable for an input.
               '''
   53:         return cls(it)
       
>>>>>>     def __and__(self, other):
    7:         if not isinstance(other, Iterable):
    1:             return NotImplemented
   33:         return self._from_iterable(value for value in other if value in self)
       
>>>>>>     __rand__ = __and__
       
>>>>>>     def isdisjoint(self, other):
               'Return True if two sets have a null intersection.'
>>>>>>         for value in other:
>>>>>>             if value in self:
>>>>>>                 return False
>>>>>>         return True
       
>>>>>>     def __or__(self, other):
   13:         if not isinstance(other, Iterable):
    1:             return NotImplemented
   99:         chain = (e for s in (self, other) for e in s)
   12:         return self._from_iterable(chain)
       
>>>>>>     __ror__ = __or__
       
>>>>>>     def __sub__(self, other):
   21:         if not isinstance(other, Set):
    5:             if not isinstance(other, Iterable):
    1:                 return NotImplemented
    4:             other = self._from_iterable(other)
  108:         return self._from_iterable(value for value in self
   68:                                    if value not in other)
       
>>>>>>     def __rsub__(self, other):
    6:         if not isinstance(other, Set):
    2:             if not isinstance(other, Iterable):
>>>>>>                 return NotImplemented
    2:             other = self._from_iterable(other)
   30:         return self._from_iterable(value for value in other
   18:                                    if value not in self)
       
>>>>>>     def __xor__(self, other):
    7:         if not isinstance(other, Set):
    4:             if not isinstance(other, Iterable):
    1:                 return NotImplemented
    3:             other = self._from_iterable(other)
    6:         return (self - other) | (other - self)
       
>>>>>>     __rxor__ = __xor__
       
           # Sets are not hashable by default, but subclasses can change this
>>>>>>     __hash__ = None
       
>>>>>>     def _hash(self):
               """Compute the hash value of a set.
       
               Note that we don't define __hash__: not all sets are hashable.
               But if you define a hashable set type, its __hash__ should
               call this function.
       
               This must be compatible __eq__.
       
               All sets ought to compare equal if they contain the same
               elements, regardless of how they are implemented, and
               regardless of the order of the elements; so there's not much
               freedom for __eq__ or __hash__.  We match the algorithm used
               by the built-in frozenset type.
               """
    2:         MAX = sys.maxint
    2:         MASK = 2 * MAX + 1
    2:         n = len(self)
    2:         h = 1927868237 * (n + 1)
    2:         h &= MASK
    8:         for x in self:
    6:             hx = hash(x)
    6:             h ^= (hx ^ (hx << 16) ^ 89869747)  * 3644798167
    6:             h &= MASK
    2:         h = h * 69069 + 907133923
    2:         h &= MASK
    2:         if h > MAX:
    2:             h -= MASK + 1
    2:         if h == -1:
>>>>>>             h = 590923713
    2:         return h
       
>>>>>> Set.register(frozenset)
       
       
>>>>>> class MutableSet(Set):
           """A mutable set is a finite, iterable container.
       
           This class provides concrete generic implementations of all
           methods except for __contains__, __iter__, __len__,
           add(), and discard().
       
           To override the comparisons (presumably for speed, as the
           semantics are fixed), all you have to do is redefine __le__ and
           then the other operations will automatically follow suit.
           """
       
>>>>>>     @abstractmethod
           def add(self, value):
               """Add an element."""
>>>>>>         raise NotImplementedError
       
>>>>>>     @abstractmethod
           def discard(self, value):
               """Remove an element.  Do not raise an exception if absent."""
>>>>>>         raise NotImplementedError
       
>>>>>>     def remove(self, value):
               """Remove an element. If not a member, raise a KeyError."""
>>>>>>         if value not in self:
>>>>>>             raise KeyError(value)
>>>>>>         self.discard(value)
       
>>>>>>     def pop(self):
               """Return the popped value.  Raise KeyError if empty."""
   23:         it = iter(self)
   23:         try:
   23:             value = next(it)
    2:         except StopIteration:
    2:             raise KeyError
   21:         self.discard(value)
   21:         return value
       
>>>>>>     def clear(self):
               """This is slow (creates N new iterators!) but effective."""
    2:         try:
   22:             while True:
   22:                 self.pop()
    2:         except KeyError:
    2:             pass
       
>>>>>>     def __ior__(self, it):
   11:         for value in it:
   10:             self.add(value)
    1:         return self
       
>>>>>>     def __iand__(self, it):
    4:         for value in (self - it):
    2:             self.discard(value)
    2:         return self
       
>>>>>>     def __ixor__(self, it):
    1:         if it is self:
    1:             self.clear()
               else:
>>>>>>             if not isinstance(it, Set):
>>>>>>                 it = self._from_iterable(it)
>>>>>>             for value in it:
>>>>>>                 if value in self:
>>>>>>                     self.discard(value)
                       else:
>>>>>>                     self.add(value)
    1:         return self
       
>>>>>>     def __isub__(self, it):
    1:         if it is self:
    1:             self.clear()
               else:
>>>>>>             for value in it:
>>>>>>                 self.discard(value)
    1:         return self
       
>>>>>> MutableSet.register(set)
       
       
       ### MAPPINGS ###
       
       
>>>>>> class Mapping(Sized, Iterable, Container):
       
           """A Mapping is a generic container for associating key/value
           pairs.
       
           This class provides concrete generic implementations of all
           methods except for __getitem__, __iter__, and __len__.
       
           """
       
>>>>>>     @abstractmethod
           def __getitem__(self, key):
>>>>>>         raise KeyError
       
>>>>>>     def get(self, key, default=None):
               'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.'
   15:         try:
   15:             return self[key]
   10:         except KeyError:
   10:             return default
       
>>>>>>     def __contains__(self, key):
  192:         try:
  192:             self[key]
   47:         except KeyError:
   47:             return False
               else:
  145:             return True
       
>>>>>>     def iterkeys(self):
               'D.iterkeys() -> an iterator over the keys of D'
   15:         return iter(self)
       
>>>>>>     def itervalues(self):
               'D.itervalues() -> an iterator over the values of D'
  105:         for key in self:
   90:             yield self[key]
       
>>>>>>     def iteritems(self):
               'D.iteritems() -> an iterator over the (key, value) items of D'
>>>>>>         for key in self:
>>>>>>             yield (key, self[key])
       
>>>>>>     def keys(self):
               "D.keys() -> list of D's keys"
>>>>>>         return list(self)
       
>>>>>>     def items(self):
               "D.items() -> list of D's (key, value) pairs, as 2-tuples"
  115:         return [(key, self[key]) for key in self]
       
>>>>>>     def values(self):
               "D.values() -> list of D's values"
  170:         return [self[key] for key in self]
       
           # Mappings are not hashable by default, but subclasses can change this
>>>>>>     __hash__ = None
       
>>>>>>     def __eq__(self, other):
    1:         if not isinstance(other, Mapping):
    1:             return NotImplemented
>>>>>>         return dict(self.items()) == dict(other.items())
       
>>>>>>     def __ne__(self, other):
    1:         return not (self == other)
       
>>>>>> class MappingView(Sized):
       
>>>>>>     def __init__(self, mapping):
    8:         self._mapping = mapping
       
>>>>>>     def __len__(self):
    7:         return len(self._mapping)
       
>>>>>>     def __repr__(self):
>>>>>>         return '{0.__class__.__name__}({0._mapping!r})'.format(self)
       
       
>>>>>> class KeysView(MappingView, Set):
       
>>>>>>     @classmethod
           def _from_iterable(self, it):
>>>>>>         return set(it)
       
>>>>>>     def __contains__(self, key):
>>>>>>         return key in self._mapping
       
>>>>>>     def __iter__(self):
   27:         for key in self._mapping:
   24:             yield key
       
>>>>>> KeysView.register(type({}.viewkeys()))
       
>>>>>> class ItemsView(MappingView, Set):
       
>>>>>>     @classmethod
           def _from_iterable(self, it):
>>>>>>         return set(it)
       
>>>>>>     def __contains__(self, item):
>>>>>>         key, value = item
>>>>>>         try:
>>>>>>             v = self._mapping[key]
>>>>>>         except KeyError:
>>>>>>             return False
               else:
>>>>>>             return v == value
       
>>>>>>     def __iter__(self):
   27:         for key in self._mapping:
   24:             yield (key, self._mapping[key])
       
>>>>>> ItemsView.register(type({}.viewitems()))
       
>>>>>> class ValuesView(MappingView):
       
>>>>>>     def __contains__(self, value):
>>>>>>         for key in self._mapping:
>>>>>>             if value == self._mapping[key]:
>>>>>>                 return True
>>>>>>         return False
       
>>>>>>     def __iter__(self):
   14:         for key in self._mapping:
   12:             yield self._mapping[key]
       
>>>>>> ValuesView.register(type({}.viewvalues()))
       
>>>>>> class MutableMapping(Mapping):
       
           """A MutableMapping is a generic container for associating
           key/value pairs.
       
           This class provides concrete generic implementations of all
           methods except for __getitem__, __setitem__, __delitem__,
           __iter__, and __len__.
       
           """
       
>>>>>>     @abstractmethod
           def __setitem__(self, key, value):
>>>>>>         raise KeyError
       
>>>>>>     @abstractmethod
           def __delitem__(self, key):
>>>>>>         raise KeyError
       
>>>>>>     __marker = object()
       
>>>>>>     def pop(self, key, default=__marker):
               '''D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
                 If key is not found, d is returned if given, otherwise KeyError is raised.
               '''
    5:         try:
    5:             value = self[key]
>>>>>>         except KeyError:
>>>>>>             if default is self.__marker:
>>>>>>                 raise
>>>>>>             return default
               else:
    5:             del self[key]
    5:             return value
       
>>>>>>     def popitem(self):
               '''D.popitem() -> (k, v), remove and return some (key, value) pair
                  as a 2-tuple; but raise KeyError if D is empty.
               '''
   40:         try:
   40:             key = next(iter(self))
    5:         except StopIteration:
    5:             raise KeyError
   35:         value = self[key]
   35:         del self[key]
   35:         return key, value
       
>>>>>>     def clear(self):
               'D.clear() -> None.  Remove all items from D.'
    5:         try:
   35:             while True:
   35:                 self.popitem()
    5:         except KeyError:
    5:             pass
       
>>>>>>     def update(*args, **kwds):
               ''' D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
                   If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
                   If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
                   In either case, this is followed by: for k, v in F.items(): D[k] = v
               '''
15483:         if not args:
>>>>>>             raise TypeError("descriptor 'update' of 'MutableMapping' object "
                                   "needs an argument")
15483:         self = args[0]
15483:         args = args[1:]
15483:         if len(args) > 1:
    2:             raise TypeError('update expected at most 1 arguments, got %d' %
    2:                             len(args))
15481:         if args:
13170:             other = args[0]
13170:             if isinstance(other, Mapping):
  947:                 for key in other:
  749:                     self[key] = other[key]
12972:             elif hasattr(other, "keys"):
   14:                 for key in other.keys():
    8:                     self[key] = other[key]
                   else:
93061:                 for key, value in other:
80097:                     self[key] = value
15494:         for key, value in kwds.items():
   27:             self[key] = value
       
>>>>>>     def setdefault(self, key, default=None):
               'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D'
   10:         try:
   10:             return self[key]
    5:         except KeyError:
    5:             self[key] = default
    5:         return default
       
>>>>>> MutableMapping.register(dict)
       
       
       ### SEQUENCES ###
       
       
>>>>>> class Sequence(Sized, Iterable, Container):
           """All the operations on a read-only sequence.
       
           Concrete subclasses must override __new__ or __init__,
           __getitem__, and __len__.
           """
       
>>>>>>     @abstractmethod
           def __getitem__(self, index):
>>>>>>         raise IndexError
       
>>>>>>     def __iter__(self):
   93:         i = 0
   93:         try:
 1276:             while True:
 1276:                 v = self[i]
 1187:                 yield v
 1183:                 i += 1
   93:         except IndexError:
   89:             return
       
>>>>>>     def __contains__(self, value):
>>>>>>         for v in self:
>>>>>>             if v == value:
>>>>>>                 return True
>>>>>>         return False
       
>>>>>>     def __reversed__(self):
   23:         for i in reversed(range(len(self))):
   20:             yield self[i]
       
>>>>>>     def index(self, value):
               '''S.index(value) -> integer -- return first index of value.
                  Raises ValueError if the value is not present.
               '''
>>>>>>         for i, v in enumerate(self):
>>>>>>             if v == value:
>>>>>>                 return i
>>>>>>         raise ValueError
       
>>>>>>     def count(self, value):
               'S.count(value) -> integer -- return number of occurrences of value'
>>>>>>         return sum(1 for v in self if v == value)
       
>>>>>> Sequence.register(tuple)
>>>>>> Sequence.register(basestring)
>>>>>> Sequence.register(buffer)
>>>>>> Sequence.register(xrange)
       
       
>>>>>> class MutableSequence(Sequence):
       
           """All the operations on a read-only sequence.
       
           Concrete subclasses must provide __new__ or __init__,
           __getitem__, __setitem__, __delitem__, __len__, and insert().
       
           """
       
>>>>>>     @abstractmethod
           def __setitem__(self, index, value):
>>>>>>         raise IndexError
       
>>>>>>     @abstractmethod
           def __delitem__(self, index):
>>>>>>         raise IndexError
       
>>>>>>     @abstractmethod
           def insert(self, index, value):
               'S.insert(index, object) -- insert object before index'
>>>>>>         raise IndexError
       
>>>>>>     def append(self, value):
               'S.append(object) -- append object to the end of the sequence'
>>>>>>         self.insert(len(self), value)
       
>>>>>>     def reverse(self):
               'S.reverse() -- reverse *IN PLACE*'
>>>>>>         n = len(self)
>>>>>>         for i in range(n//2):
>>>>>>             self[i], self[n-i-1] = self[n-i-1], self[i]
       
>>>>>>     def extend(self, values):
               'S.extend(iterable) -- extend sequence by appending elements from the iterable'
>>>>>>         for v in values:
>>>>>>             self.append(v)
       
>>>>>>     def pop(self, index=-1):
               '''S.pop([index]) -> item -- remove and return item at index (default last).
                  Raise IndexError if list is empty or index is out of range.
               '''
>>>>>>         v = self[index]
>>>>>>         del self[index]
>>>>>>         return v
       
>>>>>>     def remove(self, value):
               '''S.remove(value) -- remove first occurrence of value.
                  Raise ValueError if the value is not present.
               '''
>>>>>>         del self[self.index(value)]
       
>>>>>>     def __iadd__(self, values):
>>>>>>         self.extend(values)
>>>>>>         return self
       
>>>>>> MutableSequence.register(list)
