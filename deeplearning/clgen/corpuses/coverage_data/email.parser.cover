       # Copyright (C) 2001-2006 Python Software Foundation
       # Author: Barry Warsaw, Thomas Wouters, Anthony Baxter
       # Contact: email-sig@python.org
       
    1: """A parser of RFC 2822 and MIME email messages."""
       
    1: __all__ = ['Parser', 'HeaderParser']
       
    1: import warnings
    1: from cStringIO import StringIO
       
    1: from email.feedparser import FeedParser
    1: from email.message import Message
       
       
       
    2: class Parser:
    1:     def __init__(self, *args, **kws):
               """Parser of RFC 2822 and MIME email messages.
       
               Creates an in-memory object tree representing the email message, which
               can then be manipulated and turned over to a Generator to return the
               textual representation of the message.
       
               The string must be formatted as a block of RFC 2822 headers and header
               continuation lines, optionally preceded by a `Unix-from' header.  The
               header block is terminated either by the end of the string or by a
               blank line.
       
               _class is the class to instantiate for new message objects when they
               must be created.  This class must have a constructor that can take
               zero arguments.  Default is Message.Message.
               """
 1032:         if len(args) >= 1:
   12:             if '_class' in kws:
>>>>>>                 raise TypeError("Multiple values for keyword arg '_class'")
   12:             kws['_class'] = args[0]
 1032:         if len(args) == 2:
>>>>>>             if 'strict' in kws:
>>>>>>                 raise TypeError("Multiple values for keyword arg 'strict'")
>>>>>>             kws['strict'] = args[1]
 1032:         if len(args) > 2:
>>>>>>             raise TypeError('Too many arguments')
 1032:         if '_class' in kws:
   12:             self._class = kws['_class']
   12:             del kws['_class']
               else:
 1020:             self._class = Message
 1032:         if 'strict' in kws:
>>>>>>             warnings.warn("'strict' argument is deprecated (and ignored)",
>>>>>>                           DeprecationWarning, 2)
>>>>>>             del kws['strict']
 1032:         if kws:
>>>>>>             raise TypeError('Unexpected keyword arguments')
       
    1:     def parse(self, fp, headersonly=False):
               """Create a message structure from the data in a file.
       
               Reads all the data from the file and returns the root of the message
               structure.  Optional headersonly is a flag specifying whether to stop
               parsing after reading the headers or not.  The default is False,
               meaning it parses the entire contents of the file.
               """
 1032:         feedparser = FeedParser(self._class)
 1032:         if headersonly:
    4:             feedparser._set_headersonly()
 2065:         while True:
 2065:             data = fp.read(8192)
 2065:             if not data:
 1032:                 break
 1033:             feedparser.feed(data)
 1032:         return feedparser.close()
       
    1:     def parsestr(self, text, headersonly=False):
               """Create a message structure from a string.
       
               Returns the root of the message structure.  Optional headersonly is a
               flag specifying whether to stop parsing after reading the headers or
               not.  The default is False, meaning it parses the entire contents of
               the file.
               """
  674:         return self.parse(StringIO(text), headersonly=headersonly)
       
       
       
    2: class HeaderParser(Parser):
    1:     def parse(self, fp, headersonly=True):
    4:         return Parser.parse(self, fp, True)
       
    1:     def parsestr(self, text, headersonly=True):
    1:         return Parser.parsestr(self, text, True)
