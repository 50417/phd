       # tests common to dict and UserDict
    1: import unittest
    1: import UserDict
    1: import test_support
       
       
    2: class BasicTestMappingProtocol(unittest.TestCase):
           # This base class can be used to check that an object conforms to the
           # mapping protocol
       
           # Functions that can be useful to override to adapt to dictionary
           # semantics
    1:     type2test = None # which class is being tested (overwrite in subclasses)
       
    1:     def _reference(self):
               """Return a dictionary of values which are invariant by storage
               in the object under test."""
  101:         return {1:2, "key1":"value1", "key2":(1,2,3)}
    1:     def _empty_mapping(self):
               """Return an empty mapping object"""
  367:         return self.type2test()
    1:     def _full_mapping(self, data):
               """Return a mapping object with the value contained in data
               dictionary"""
   63:         x = self._empty_mapping()
  179:         for key, value in data.items():
  116:             x[key] = value
   63:         return x
       
    1:     def __init__(self, *args, **kw):
  229:         unittest.TestCase.__init__(self, *args, **kw)
  229:         self.reference = self._reference().copy()
       
               # A (key, value) pair not in the mapping
  229:         key, value = self.reference.popitem()
  229:         self.other = {key:value}
       
               # A (key, value) pair in the mapping
  229:         key, value = self.reference.popitem()
  229:         self.inmapping = {key:value}
  229:         self.reference[key] = value
       
    1:     def test_read(self):
               # Test for read only operations on mapping
   15:         p = self._empty_mapping()
   15:         p1 = dict(p) #workaround for singleton objects
   15:         d = self._full_mapping(self.reference)
   15:         if d is p:
    1:             p = p1
               #Indexing
   45:         for key, value in self.reference.items():
   30:             self.assertEqual(d[key], value)
   15:         knownkey = self.other.keys()[0]
   30:         self.assertRaises(KeyError, lambda:d[knownkey])
               #len
   15:         self.assertEqual(len(p), 0)
   15:         self.assertEqual(len(d), len(self.reference))
               #in
   45:         for k in self.reference:
   30:             self.assertIn(k, d)
   30:         for k in self.other:
   15:             self.assertNotIn(k, d)
               #has_key
   15:         with test_support.check_py3k_warnings(quiet=True):
   45:             for k in self.reference:
   30:                 self.assertTrue(d.has_key(k))
   30:             for k in self.other:
   15:                 self.assertFalse(d.has_key(k))
               #cmp
   15:         self.assertEqual(cmp(p,p), 0)
   15:         self.assertEqual(cmp(d,d), 0)
   15:         self.assertEqual(cmp(p,d), -1)
   15:         self.assertEqual(cmp(d,p), 1)
               #__non__zero__
   15:         if p: self.fail("Empty mapping must compare to False")
   15:         if not d: self.fail("Full mapping must compare to True")
               # keys(), items(), iterkeys() ...
   15:         def check_iterandlist(iter, lst, ref):
   60:             self.assertTrue(hasattr(iter, 'next'))
   60:             self.assertTrue(hasattr(iter, '__iter__'))
   60:             x = list(iter)
   60:             self.assertTrue(set(x)==set(lst)==set(ref))
   15:         check_iterandlist(d.iterkeys(), d.keys(), self.reference.keys())
   15:         check_iterandlist(iter(d), d.keys(), self.reference.keys())
   15:         check_iterandlist(d.itervalues(), d.values(), self.reference.values())
   15:         check_iterandlist(d.iteritems(), d.items(), self.reference.items())
               #get
   15:         key, value = d.iteritems().next()
   15:         knownkey, knownvalue = self.other.iteritems().next()
   15:         self.assertEqual(d.get(key, knownvalue), value)
   15:         self.assertEqual(d.get(knownkey, knownvalue), knownvalue)
   15:         self.assertNotIn(knownkey, d)
       
    1:     def test_write(self):
               # Test for write operations on mapping
   15:         p = self._empty_mapping()
               #Indexing
   45:         for key, value in self.reference.items():
   30:             p[key] = value
   30:             self.assertEqual(p[key], value)
   45:         for key in self.reference.keys():
   30:             del p[key]
   60:             self.assertRaises(KeyError, lambda:p[key])
   15:         p = self._empty_mapping()
               #update
   15:         p.update(self.reference)
   15:         self.assertEqual(dict(p), self.reference)
   15:         items = p.items()
   15:         p = self._empty_mapping()
   15:         p.update(items)
   15:         self.assertEqual(dict(p), self.reference)
   15:         d = self._full_mapping(self.reference)
               #setdefault
   15:         key, value = d.iteritems().next()
   15:         knownkey, knownvalue = self.other.iteritems().next()
   15:         self.assertEqual(d.setdefault(key, knownvalue), value)
   15:         self.assertEqual(d[key], value)
   15:         self.assertEqual(d.setdefault(knownkey, knownvalue), knownvalue)
   15:         self.assertEqual(d[knownkey], knownvalue)
               #pop
   15:         self.assertEqual(d.pop(knownkey), knownvalue)
   15:         self.assertNotIn(knownkey, d)
   15:         self.assertRaises(KeyError, d.pop, knownkey)
   15:         default = 909
   15:         d[knownkey] = knownvalue
   15:         self.assertEqual(d.pop(knownkey, default), knownvalue)
   15:         self.assertNotIn(knownkey, d)
   15:         self.assertEqual(d.pop(knownkey, default), default)
               #popitem
   15:         key, value = d.popitem()
   15:         self.assertNotIn(key, d)
   15:         self.assertEqual(value, self.reference[key])
   15:         p=self._empty_mapping()
   15:         self.assertRaises(KeyError, p.popitem)
       
    1:     def test_constructor(self):
   15:         self.assertEqual(self._empty_mapping(), self._empty_mapping())
       
    1:     def test_bool(self):
   15:         self.assertTrue(not self._empty_mapping())
   15:         self.assertTrue(self.reference)
   15:         self.assertTrue(bool(self._empty_mapping()) is False)
   15:         self.assertTrue(bool(self.reference) is True)
       
    1:     def test_keys(self):
   15:         d = self._empty_mapping()
   15:         self.assertEqual(d.keys(), [])
   15:         d = self.reference
   15:         self.assertIn(self.inmapping.keys()[0], d.keys())
   15:         self.assertNotIn(self.other.keys()[0], d.keys())
   15:         self.assertRaises(TypeError, d.keys, None)
       
    1:     def test_values(self):
   15:         d = self._empty_mapping()
   15:         self.assertEqual(d.values(), [])
       
   15:         self.assertRaises(TypeError, d.values, None)
       
    1:     def test_items(self):
   15:         d = self._empty_mapping()
   15:         self.assertEqual(d.items(), [])
       
   15:         self.assertRaises(TypeError, d.items, None)
       
    1:     def test_len(self):
   15:         d = self._empty_mapping()
   15:         self.assertEqual(len(d), 0)
       
    1:     def test_getitem(self):
   15:         d = self.reference
   15:         self.assertEqual(d[self.inmapping.keys()[0]], self.inmapping.values()[0])
       
   15:         self.assertRaises(TypeError, d.__getitem__)
       
    1:     def test_update(self):
               # mapping argument
   14:         d = self._empty_mapping()
   14:         d.update(self.other)
   14:         self.assertEqual(d.items(), self.other.items())
       
               # No argument
   14:         d = self._empty_mapping()
   14:         d.update()
   14:         self.assertEqual(d, self._empty_mapping())
       
               # item sequence
   14:         d = self._empty_mapping()
   14:         d.update(self.other.items())
   14:         self.assertEqual(d.items(), self.other.items())
       
               # Iterator
   14:         d = self._empty_mapping()
   14:         d.update(self.other.iteritems())
   14:         self.assertEqual(d.items(), self.other.items())
       
               # FIXME: Doesn't work with UserDict
               # self.assertRaises((TypeError, AttributeError), d.update, None)
   14:         self.assertRaises((TypeError, AttributeError), d.update, 42)
       
   14:         outerself = self
   28:         class SimpleUserDict:
   14:             def __init__(self):
   14:                 self.d = outerself.reference
   14:             def keys(self):
   14:                 return self.d.keys()
   14:             def __getitem__(self, i):
   28:                 return self.d[i]
   14:         d.clear()
   14:         d.update(SimpleUserDict())
   14:         i1 = d.items()
   14:         i2 = self.reference.items()
       
   14:         def safe_sort_key(kv):
   56:             k, v = kv
   56:             return id(type(k)), id(type(v)), k, v
   14:         i1.sort(key=safe_sort_key)
   14:         i2.sort(key=safe_sort_key)
   14:         self.assertEqual(i1, i2)
       
   28:         class Exc(Exception): pass
       
   14:         d = self._empty_mapping()
   28:         class FailingUserDict:
   14:             def keys(self):
   14:                 raise Exc
   14:         self.assertRaises(Exc, d.update, FailingUserDict())
       
   14:         d.clear()
       
   28:         class FailingUserDict:
   14:             def keys(self):
   28:                 class BogonIter:
   14:                     def __init__(self):
   14:                         self.i = 1
   14:                     def __iter__(self):
   14:                         return self
   14:                     def next(self):
   28:                         if self.i:
   14:                             self.i = 0
   14:                             return 'a'
   14:                         raise Exc
   14:                 return BogonIter()
   14:             def __getitem__(self, key):
   14:                 return key
   14:         self.assertRaises(Exc, d.update, FailingUserDict())
       
   28:         class FailingUserDict:
   14:             def keys(self):
   28:                 class BogonIter:
   14:                     def __init__(self):
   14:                         self.i = ord('a')
   14:                     def __iter__(self):
   14:                         return self
   14:                     def next(self):
   14:                         if self.i <= ord('z'):
   14:                             rtn = chr(self.i)
   14:                             self.i += 1
   14:                             return rtn
>>>>>>                         raise StopIteration
   14:                 return BogonIter()
   14:             def __getitem__(self, key):
   14:                 raise Exc
   14:         self.assertRaises(Exc, d.update, FailingUserDict())
       
   14:         d = self._empty_mapping()
   28:         class badseq(object):
   14:             def __iter__(self):
   14:                 return self
   14:             def next(self):
   14:                 raise Exc()
       
   14:         self.assertRaises(Exc, d.update, badseq())
       
   14:         self.assertRaises(ValueError, d.update, [(1, 2, 3)])
       
           # no test_fromkeys or test_copy as both os.environ and selves don't support it
       
    1:     def test_get(self):
   15:         d = self._empty_mapping()
   15:         self.assertTrue(d.get(self.other.keys()[0]) is None)
   15:         self.assertEqual(d.get(self.other.keys()[0], 3), 3)
   15:         d = self.reference
   15:         self.assertTrue(d.get(self.other.keys()[0]) is None)
   15:         self.assertEqual(d.get(self.other.keys()[0], 3), 3)
   15:         self.assertEqual(d.get(self.inmapping.keys()[0]), self.inmapping.values()[0])
   15:         self.assertEqual(d.get(self.inmapping.keys()[0], 3), self.inmapping.values()[0])
   15:         self.assertRaises(TypeError, d.get)
   15:         self.assertRaises(TypeError, d.get, None, None, None)
       
    1:     def test_setdefault(self):
   15:         d = self._empty_mapping()
   15:         self.assertRaises(TypeError, d.setdefault)
       
    1:     def test_popitem(self):
   13:         d = self._empty_mapping()
   13:         self.assertRaises(KeyError, d.popitem)
   13:         self.assertRaises(TypeError, d.popitem, 42)
       
    1:     def test_pop(self):
   15:         d = self._empty_mapping()
   15:         k, v = self.inmapping.items()[0]
   15:         d[k] = v
   15:         self.assertRaises(KeyError, d.pop, self.other.keys()[0])
       
   15:         self.assertEqual(d.pop(k), v)
   15:         self.assertEqual(len(d), 0)
       
   15:         self.assertRaises(KeyError, d.pop, k)
       
       
    2: class TestMappingProtocol(BasicTestMappingProtocol):
    1:     def test_constructor(self):
    2:         BasicTestMappingProtocol.test_constructor(self)
    2:         self.assertTrue(self._empty_mapping() is not self._empty_mapping())
    2:         self.assertEqual(self.type2test(x=1, y=2), {"x": 1, "y": 2})
       
    1:     def test_bool(self):
    2:         BasicTestMappingProtocol.test_bool(self)
    2:         self.assertTrue(not self._empty_mapping())
    2:         self.assertTrue(self._full_mapping({"x": "y"}))
    2:         self.assertTrue(bool(self._empty_mapping()) is False)
    2:         self.assertTrue(bool(self._full_mapping({"x": "y"})) is True)
       
    1:     def test_keys(self):
    2:         BasicTestMappingProtocol.test_keys(self)
    2:         d = self._empty_mapping()
    2:         self.assertEqual(d.keys(), [])
    2:         d = self._full_mapping({'a': 1, 'b': 2})
    2:         k = d.keys()
    2:         self.assertIn('a', k)
    2:         self.assertIn('b', k)
    2:         self.assertNotIn('c', k)
       
    1:     def test_values(self):
    2:         BasicTestMappingProtocol.test_values(self)
    2:         d = self._full_mapping({1:2})
    2:         self.assertEqual(d.values(), [2])
       
    1:     def test_items(self):
    2:         BasicTestMappingProtocol.test_items(self)
       
    2:         d = self._full_mapping({1:2})
    2:         self.assertEqual(d.items(), [(1, 2)])
       
    1:     def test_has_key(self):
    2:         d = self._empty_mapping()
    2:         self.assertTrue(not d.has_key('a'))
    2:         d = self._full_mapping({'a': 1, 'b': 2})
    2:         k = d.keys()
    6:         k.sort(key=lambda k: (id(type(k)), k))
    2:         self.assertEqual(k, ['a', 'b'])
       
    2:         self.assertRaises(TypeError, d.has_key)
       
    1:     def test_contains(self):
    2:         d = self._empty_mapping()
    2:         self.assertNotIn('a', d)
    2:         self.assertTrue(not ('a' in d))
    2:         self.assertTrue('a' not in d)
    2:         d = self._full_mapping({'a': 1, 'b': 2})
    2:         self.assertIn('a', d)
    2:         self.assertIn('b', d)
    2:         self.assertNotIn('c', d)
       
    2:         self.assertRaises(TypeError, d.__contains__)
       
    1:     def test_len(self):
    2:         BasicTestMappingProtocol.test_len(self)
    2:         d = self._full_mapping({'a': 1, 'b': 2})
    2:         self.assertEqual(len(d), 2)
       
    1:     def test_getitem(self):
    2:         BasicTestMappingProtocol.test_getitem(self)
    2:         d = self._full_mapping({'a': 1, 'b': 2})
    2:         self.assertEqual(d['a'], 1)
    2:         self.assertEqual(d['b'], 2)
    2:         d['c'] = 3
    2:         d['a'] = 4
    2:         self.assertEqual(d['c'], 3)
    2:         self.assertEqual(d['a'], 4)
    2:         del d['b']
    2:         self.assertEqual(d, {'a': 4, 'c': 3})
       
    2:         self.assertRaises(TypeError, d.__getitem__)
       
    1:     def test_clear(self):
    2:         d = self._full_mapping({1:1, 2:2, 3:3})
    2:         d.clear()
    2:         self.assertEqual(d, {})
       
    2:         self.assertRaises(TypeError, d.clear, None)
       
    1:     def test_update(self):
    1:         BasicTestMappingProtocol.test_update(self)
               # mapping argument
    1:         d = self._empty_mapping()
    1:         d.update({1:100})
    1:         d.update({2:20})
    1:         d.update({1:1, 2:2, 3:3})
    1:         self.assertEqual(d, {1:1, 2:2, 3:3})
       
               # no argument
    1:         d.update()
    1:         self.assertEqual(d, {1:1, 2:2, 3:3})
       
               # keyword arguments
    1:         d = self._empty_mapping()
    1:         d.update(x=100)
    1:         d.update(y=20)
    1:         d.update(x=1, y=2, z=3)
    1:         self.assertEqual(d, {"x":1, "y":2, "z":3})
       
               # item sequence
    1:         d = self._empty_mapping()
    1:         d.update([("x", 100), ("y", 20)])
    1:         self.assertEqual(d, {"x":100, "y":20})
       
               # Both item sequence and keyword arguments
    1:         d = self._empty_mapping()
    1:         d.update([("x", 100), ("y", 20)], x=1, y=2)
    1:         self.assertEqual(d, {"x":1, "y":2})
       
               # iterator
    1:         d = self._full_mapping({1:3, 2:4})
    1:         d.update(self._full_mapping({1:2, 3:4, 5:6}).iteritems())
    1:         self.assertEqual(d, {1:2, 2:4, 3:4, 5:6})
       
    2:         class SimpleUserDict:
    1:             def __init__(self):
    1:                 self.d = {1:1, 2:2, 3:3}
    1:             def keys(self):
    1:                 return self.d.keys()
    1:             def __getitem__(self, i):
    3:                 return self.d[i]
    1:         d.clear()
    1:         d.update(SimpleUserDict())
    1:         self.assertEqual(d, {1:1, 2:2, 3:3})
       
    1:     def test_fromkeys(self):
    2:         self.assertEqual(self.type2test.fromkeys('abc'), {'a':None, 'b':None, 'c':None})
    2:         d = self._empty_mapping()
    2:         self.assertTrue(not(d.fromkeys('abc') is d))
    2:         self.assertEqual(d.fromkeys('abc'), {'a':None, 'b':None, 'c':None})
    2:         self.assertEqual(d.fromkeys((4,5),0), {4:0, 5:0})
    2:         self.assertEqual(d.fromkeys([]), {})
    2:         def g():
    2:             yield 1
    2:         self.assertEqual(d.fromkeys(g()), {1:None})
    2:         self.assertRaises(TypeError, {}.fromkeys, 3)
    4:         class dictlike(self.type2test): pass
    2:         self.assertEqual(dictlike.fromkeys('a'), {'a':None})
    2:         self.assertEqual(dictlike().fromkeys('a'), {'a':None})
    2:         self.assertTrue(dictlike.fromkeys('a').__class__ is dictlike)
    2:         self.assertTrue(dictlike().fromkeys('a').__class__ is dictlike)
               # FIXME: the following won't work with UserDict, because it's an old style class
               # self.assertTrue(type(dictlike.fromkeys('a')) is dictlike)
    4:         class mydict(self.type2test):
    2:             def __new__(cls):
>>>>>>                 return UserDict.UserDict()
    2:         ud = mydict.fromkeys('ab')
    2:         self.assertEqual(ud, {'a':None, 'b':None})
               # FIXME: the following won't work with UserDict, because it's an old style class
               # self.assertIsInstance(ud, UserDict.UserDict)
    2:         self.assertRaises(TypeError, dict.fromkeys)
       
    4:         class Exc(Exception): pass
       
    4:         class baddict1(self.type2test):
    2:             def __init__(self):
    2:                 raise Exc()
       
    2:         self.assertRaises(Exc, baddict1.fromkeys, [1])
       
    4:         class BadSeq(object):
    2:             def __iter__(self):
    2:                 return self
    2:             def next(self):
    2:                 raise Exc()
       
    2:         self.assertRaises(Exc, self.type2test.fromkeys, BadSeq())
       
    4:         class baddict2(self.type2test):
    2:             def __setitem__(self, key, value):
    2:                 raise Exc()
       
    2:         self.assertRaises(Exc, baddict2.fromkeys, [1])
       
    1:     def test_copy(self):
    2:         d = self._full_mapping({1:1, 2:2, 3:3})
    2:         self.assertEqual(d.copy(), {1:1, 2:2, 3:3})
    2:         d = self._empty_mapping()
    2:         self.assertEqual(d.copy(), d)
    2:         self.assertIsInstance(d.copy(), d.__class__)
    2:         self.assertRaises(TypeError, d.copy, None)
       
    1:     def test_get(self):
    2:         BasicTestMappingProtocol.test_get(self)
    2:         d = self._empty_mapping()
    2:         self.assertTrue(d.get('c') is None)
    2:         self.assertEqual(d.get('c', 3), 3)
    2:         d = self._full_mapping({'a' : 1, 'b' : 2})
    2:         self.assertTrue(d.get('c') is None)
    2:         self.assertEqual(d.get('c', 3), 3)
    2:         self.assertEqual(d.get('a'), 1)
    2:         self.assertEqual(d.get('a', 3), 1)
       
    1:     def test_setdefault(self):
    2:         BasicTestMappingProtocol.test_setdefault(self)
    2:         d = self._empty_mapping()
    2:         self.assertTrue(d.setdefault('key0') is None)
    2:         d.setdefault('key0', [])
    2:         self.assertTrue(d.setdefault('key0') is None)
    2:         d.setdefault('key', []).append(3)
    2:         self.assertEqual(d['key'][0], 3)
    2:         d.setdefault('key', []).append(4)
    2:         self.assertEqual(len(d['key']), 2)
       
    1:     def test_popitem(self):
    2:         BasicTestMappingProtocol.test_popitem(self)
    6:         for copymode in -1, +1:
                   # -1: b has same structure as a
                   # +1: b is a.copy()
   52:             for log2size in range(12):
   48:                 size = 2**log2size
   48:                 a = self._empty_mapping()
   48:                 b = self._empty_mapping()
16428:                 for i in range(size):
16380:                     a[repr(i)] = i
16380:                     if copymode < 0:
 8190:                         b[repr(i)] = i
   48:                 if copymode > 0:
   24:                     b = a.copy()
16428:                 for i in range(size):
16380:                     ka, va = ta = a.popitem()
16380:                     self.assertEqual(va, int(ka))
16380:                     kb, vb = tb = b.popitem()
16380:                     self.assertEqual(vb, int(kb))
16380:                     self.assertTrue(not(copymode < 0 and ta != tb))
   48:                 self.assertTrue(not a)
   48:                 self.assertTrue(not b)
       
    1:     def test_pop(self):
    2:         BasicTestMappingProtocol.test_pop(self)
       
               # Tests for pop with specified key
    2:         d = self._empty_mapping()
    2:         k, v = 'abc', 'def'
       
               # verify longs/ints get same value when key > 32 bits (for 64-bit archs)
               # see SF bug #689659
    2:         x = 4503599627370496L
    2:         y = 4503599627370496
    2:         h = self._full_mapping({x: 'anything', y: 'something else'})
    2:         self.assertEqual(h[x], h[y])
       
    2:         self.assertEqual(d.pop(k, v), v)
    2:         d[k] = v
    2:         self.assertEqual(d.pop(k, 1), v)
       
       
    2: class TestHashMappingProtocol(TestMappingProtocol):
       
    1:     def test_getitem(self):
    1:         TestMappingProtocol.test_getitem(self)
    2:         class Exc(Exception): pass
       
    2:         class BadEq(object):
    1:             def __eq__(self, other):
>>>>>>                 raise Exc()
    1:             def __hash__(self):
    1:                 return 24
       
    1:         d = self._empty_mapping()
    1:         d[BadEq()] = 42
    1:         self.assertRaises(KeyError, d.__getitem__, 23)
       
    2:         class BadHash(object):
    1:             fail = False
    1:             def __hash__(self):
    2:                 if self.fail:
    1:                     raise Exc()
                       else:
    1:                     return 42
       
    1:         d = self._empty_mapping()
    1:         x = BadHash()
    1:         d[x] = 42
    1:         x.fail = True
    1:         self.assertRaises(Exc, d.__getitem__, x)
       
    1:     def test_fromkeys(self):
    1:         TestMappingProtocol.test_fromkeys(self)
    2:         class mydict(self.type2test):
    1:             def __new__(cls):
>>>>>>                 return UserDict.UserDict()
    1:         ud = mydict.fromkeys('ab')
    1:         self.assertEqual(ud, {'a':None, 'b':None})
    1:         self.assertIsInstance(ud, UserDict.UserDict)
       
    1:     def test_pop(self):
    1:         TestMappingProtocol.test_pop(self)
       
    2:         class Exc(Exception): pass
       
    2:         class BadHash(object):
    1:             fail = False
    1:             def __hash__(self):
    2:                 if self.fail:
    1:                     raise Exc()
                       else:
    1:                     return 42
       
    1:         d = self._empty_mapping()
    1:         x = BadHash()
    1:         d[x] = 42
    1:         x.fail = True
    1:         self.assertRaises(Exc, d.pop, x)
       
    1:     def test_mutatingiteration(self):
    1:         d = self._empty_mapping()
    1:         d[1] = 1
    1:         try:
    2:             for i in d:
    1:                 d[i+1] = 1
    1:         except RuntimeError:
    1:             pass
               else:
>>>>>>             self.fail("changing dict size during iteration doesn't raise Error")
       
    1:     def test_repr(self):
    1:         d = self._empty_mapping()
    1:         self.assertEqual(repr(d), '{}')
    1:         d[1] = 2
    1:         self.assertEqual(repr(d), '{1: 2}')
    1:         d = self._empty_mapping()
    1:         d[1] = d
    1:         self.assertEqual(repr(d), '{1: {...}}')
       
    2:         class Exc(Exception): pass
       
    2:         class BadRepr(object):
    1:             def __repr__(self):
    1:                 raise Exc()
       
    1:         d = self._full_mapping({1: BadRepr()})
    1:         self.assertRaises(Exc, repr, d)
       
    1:     def test_le(self):
    1:         self.assertTrue(not (self._empty_mapping() < self._empty_mapping()))
    1:         self.assertTrue(not (self._full_mapping({1: 2}) < self._full_mapping({1L: 2L})))
       
    2:         class Exc(Exception): pass
       
    2:         class BadCmp(object):
    1:             def __eq__(self, other):
    1:                 raise Exc()
    1:             def __hash__(self):
    3:                 return 42
       
    1:         d1 = self._full_mapping({BadCmp(): 1})
    1:         d2 = self._full_mapping({1: 1})
    1:         try:
    1:             d1 < d2
    1:         except Exc:
    1:             pass
               else:
>>>>>>             self.fail("< didn't raise Exc")
       
    1:     def test_setdefault(self):
    1:         TestMappingProtocol.test_setdefault(self)
       
    2:         class Exc(Exception): pass
       
    2:         class BadHash(object):
    1:             fail = False
    1:             def __hash__(self):
    2:                 if self.fail:
    1:                     raise Exc()
                       else:
    1:                     return 42
       
    1:         d = self._empty_mapping()
    1:         x = BadHash()
    1:         d[x] = 42
    1:         x.fail = True
    1:         self.assertRaises(Exc, d.setdefault, x, [])
