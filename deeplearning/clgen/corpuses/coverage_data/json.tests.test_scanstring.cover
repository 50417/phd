    1: import sys
    1: from json.tests import PyTest, CTest
       
       
    2: class TestScanstring(object):
    1:     def test_scanstring(self):
    2:         scanstring = self.json.decoder.scanstring
    2:         if sys.maxunicode == 65535:
    2:             self.assertEqual(
    2:                 scanstring(u'"z\U0001d120x"', 1, None, True),
    2:                 (u'z\U0001d120x', 6))
               else:
>>>>>>             self.assertEqual(
>>>>>>                 scanstring(u'"z\U0001d120x"', 1, None, True),
>>>>>>                 (u'z\U0001d120x', 5))
       
    2:         self.assertEqual(
    2:             scanstring('"\\u007b"', 1, None, True),
    2:             (u'{', 8))
       
    2:         self.assertEqual(
    2:             scanstring('"A JSON payload should be an object or array, not a string."', 1, None, True),
    2:             (u'A JSON payload should be an object or array, not a string.', 60))
       
    2:         self.assertEqual(
    2:             scanstring('["Unclosed array"', 2, None, True),
    2:             (u'Unclosed array', 17))
       
    2:         self.assertEqual(
    2:             scanstring('["extra comma",]', 2, None, True),
    2:             (u'extra comma', 14))
       
    2:         self.assertEqual(
    2:             scanstring('["double extra comma",,]', 2, None, True),
    2:             (u'double extra comma', 21))
       
    2:         self.assertEqual(
    2:             scanstring('["Comma after the close"],', 2, None, True),
    2:             (u'Comma after the close', 24))
       
    2:         self.assertEqual(
    2:             scanstring('["Extra close"]]', 2, None, True),
    2:             (u'Extra close', 14))
       
    2:         self.assertEqual(
    2:             scanstring('{"Extra comma": true,}', 2, None, True),
    2:             (u'Extra comma', 14))
       
    2:         self.assertEqual(
    2:             scanstring('{"Extra value after close": true} "misplaced quoted value"', 2, None, True),
    2:             (u'Extra value after close', 26))
       
    2:         self.assertEqual(
    2:             scanstring('{"Illegal expression": 1 + 2}', 2, None, True),
    2:             (u'Illegal expression', 21))
       
    2:         self.assertEqual(
    2:             scanstring('{"Illegal invocation": alert()}', 2, None, True),
    2:             (u'Illegal invocation', 21))
       
    2:         self.assertEqual(
    2:             scanstring('{"Numbers cannot have leading zeroes": 013}', 2, None, True),
    2:             (u'Numbers cannot have leading zeroes', 37))
       
    2:         self.assertEqual(
    2:             scanstring('{"Numbers cannot be hex": 0x14}', 2, None, True),
    2:             (u'Numbers cannot be hex', 24))
       
    2:         self.assertEqual(
    2:             scanstring('[[[[[[[[[[[[[[[[[[[["Too deep"]]]]]]]]]]]]]]]]]]]]', 21, None, True),
    2:             (u'Too deep', 30))
       
    2:         self.assertEqual(
    2:             scanstring('{"Missing colon" null}', 2, None, True),
    2:             (u'Missing colon', 16))
       
    2:         self.assertEqual(
    2:             scanstring('{"Double colon":: null}', 2, None, True),
    2:             (u'Double colon', 15))
       
    2:         self.assertEqual(
    2:             scanstring('{"Comma instead of colon", null}', 2, None, True),
    2:             (u'Comma instead of colon', 25))
       
    2:         self.assertEqual(
    2:             scanstring('["Colon instead of comma": false]', 2, None, True),
    2:             (u'Colon instead of comma', 25))
       
    2:         self.assertEqual(
    2:             scanstring('["Bad value", truth]', 2, None, True),
    2:             (u'Bad value', 12))
       
    1:     def test_surrogates(self):
    2:         scanstring = self.json.decoder.scanstring
    2:         def assertScan(given, expect):
   18:             self.assertEqual(scanstring(given, 1, None, True),
   18:                              (expect, len(given)))
   18:             if not isinstance(given, unicode):
   10:                 given = unicode(given)
   10:                 self.assertEqual(scanstring(given, 1, None, True),
   10:                                  (expect, len(given)))
       
    2:         surrogates = unichr(0xd834) + unichr(0xdd20)
    2:         assertScan('"z\\ud834\\u0079x"', u'z\ud834yx')
    2:         assertScan('"z\\ud834\\udd20x"', u'z\U0001d120x')
    2:         assertScan('"z\\ud834\\ud834\\udd20x"', u'z\ud834\U0001d120x')
    2:         assertScan('"z\\ud834x"', u'z\ud834x')
    2:         assertScan(u'"z\\ud834\udd20x12345"', u'z%sx12345' % surrogates)
    2:         assertScan('"z\\udd20x"', u'z\udd20x')
    2:         assertScan(u'"z\ud834\udd20x"', u'z\ud834\udd20x')
    2:         assertScan(u'"z\ud834\\udd20x"', u'z%sx' % surrogates)
    2:         assertScan(u'"z\ud834x"', u'z\ud834x')
       
    1:     def test_bad_escapes(self):
    2:         scanstring = self.json.decoder.scanstring
               bad_escapes = [
    2:             '"\\"',
    2:             '"\\x"',
    2:             '"\\u"',
    2:             '"\\u0"',
    2:             '"\\u01"',
    2:             '"\\u012"',
    2:             '"\\uz012"',
    2:             '"\\u0z12"',
    2:             '"\\u01z2"',
    2:             '"\\u012z"',
    2:             '"\\u0x12"',
    2:             '"\\u0X12"',
    2:             '"\\ud834\\"',
    2:             '"\\ud834\\u"',
    2:             '"\\ud834\\ud"',
    2:             '"\\ud834\\udd"',
    2:             '"\\ud834\\udd2"',
    2:             '"\\ud834\\uzdd2"',
    2:             '"\\ud834\\udzd2"',
    2:             '"\\ud834\\uddz2"',
    2:             '"\\ud834\\udd2z"',
    2:             '"\\ud834\\u0x20"',
    2:             '"\\ud834\\u0X20"',
               ]
   48:         for s in bad_escapes:
   46:             with self.assertRaises(ValueError):
   46:                 scanstring(s, 1, None, True)
       
    1:     def test_issue3623(self):
    2:         self.assertRaises(ValueError, self.json.decoder.scanstring, b"xxx", 1,
    2:                           "xxx")
    2:         self.assertRaises(UnicodeDecodeError,
    2:                           self.json.encoder.encode_basestring_ascii, b"xx\xff")
       
    1:     def test_overflow(self):
    2:         with self.assertRaises(OverflowError):
    2:             self.json.decoder.scanstring(b"xxx", sys.maxsize+1)
       
       
    2: class TestPyScanstring(TestScanstring, PyTest): pass
    2: class TestCScanstring(TestScanstring, CTest): pass
