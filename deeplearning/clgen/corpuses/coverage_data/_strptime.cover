       """Strptime-related classes and functions.
       
       CLASSES:
           LocaleTime -- Discovers and stores locale-specific time information
           TimeRE -- Creates regexes for pattern matching a string of text containing
                       time information
       
       FUNCTIONS:
           _getlang -- Figure out what language is being used for the locale
           strptime -- Calculates the time struct represented by the passed-in string
       
    1: """
    1: import time
    1: import locale
    1: import calendar
    1: from re import compile as re_compile
    1: from re import IGNORECASE
    1: from re import escape as re_escape
    1: from datetime import date as datetime_date
    1: try:
    1:     from thread import allocate_lock as _thread_allocate_lock
>>>>>> except:
>>>>>>     from dummy_thread import allocate_lock as _thread_allocate_lock
       
    1: __all__ = []
       
    1: def _getlang():
           # Figure out what the current language is set to.
  660:     return locale.getlocale(locale.LC_TIME)
       
    2: class LocaleTime(object):
           """Stores and handles locale-specific information related to time.
       
           ATTRIBUTES:
               f_weekday -- full weekday names (7-item list)
               a_weekday -- abbreviated weekday names (7-item list)
               f_month -- full month names (13-item list; dummy value in [0], which
                           is added by code)
               a_month -- abbreviated month names (13-item list, dummy value in
                           [0], which is added by code)
               am_pm -- AM/PM representation (2-item list)
               LC_date_time -- format string for date/time representation (string)
               LC_date -- format string for date representation (string)
               LC_time -- format string for time representation (string)
               timezone -- daylight- and non-daylight-savings timezone representation
                           (2-item list of sets)
               lang -- Language used by instance (2-item tuple)
    1:     """
       
    1:     def __init__(self):
               """Set all attributes.
       
               Order of methods called matters for dependency reasons.
       
               The locale language is set at the offset and then checked again before
               exiting.  This is to make sure that the attributes were not set with a
               mix of information from more than one locale.  This would most likely
               happen when using threads where one thread calls a locale-dependent
               function while another thread changes the locale while the function in
               the other thread is still running.  Proper coding would call for
               locks to prevent changing the locale while locale-dependent code is
               running.  The check here is done in case someone does not think about
               doing this.
       
               Only other possible issue is if someone changed the timezone and did
               not call tz.tzset .  That is an issue for the programmer, though,
               since changing the timezone is worthless without that call.
       
               """
   33:         self.lang = _getlang()
   33:         self.__calc_weekday()
   33:         self.__calc_month()
   33:         self.__calc_am_pm()
   33:         self.__calc_timezone()
   33:         self.__calc_date_time()
   33:         if _getlang() != self.lang:
>>>>>>             raise ValueError("locale changed during initialization")
   33:         if time.tzname != self.tzname or time.daylight != self.daylight:
>>>>>>             raise ValueError("timezone changed during initialization")
       
    1:     def __pad(self, seq, front):
               # Add '' to seq to either the front (is True), else the back.
>>>>>>         seq = list(seq)
>>>>>>         if front:
>>>>>>             seq.insert(0, '')
               else:
>>>>>>             seq.append('')
>>>>>>         return seq
       
    1:     def __calc_weekday(self):
               # Set self.a_weekday and self.f_weekday using the calendar
               # module.
  264:         a_weekday = [calendar.day_abbr[i].lower() for i in range(7)]
  264:         f_weekday = [calendar.day_name[i].lower() for i in range(7)]
   33:         self.a_weekday = a_weekday
   33:         self.f_weekday = f_weekday
       
    1:     def __calc_month(self):
               # Set self.f_month and self.a_month using the calendar module.
  462:         a_month = [calendar.month_abbr[i].lower() for i in range(13)]
  462:         f_month = [calendar.month_name[i].lower() for i in range(13)]
   33:         self.a_month = a_month
   33:         self.f_month = f_month
       
    1:     def __calc_am_pm(self):
               # Set self.am_pm by using time.strftime().
       
               # The magic date (1999,3,17,hour,44,55,2,76,0) is not really that
               # magical; just happened to have used it everywhere else where a
               # static date was needed.
   33:         am_pm = []
   99:         for hour in (01,22):
   66:             time_tuple = time.struct_time((1999,3,17,hour,44,55,2,76,0))
   66:             am_pm.append(time.strftime("%p", time_tuple).lower())
   33:         self.am_pm = am_pm
       
    1:     def __calc_date_time(self):
               # Set self.date_time, self.date, & self.time by using
               # time.strftime().
       
               # Use (1999,3,17,22,44,55,2,76,0) for magic date because the amount of
               # overloaded numbers is minimized.  The order in which searches for
               # values within the format string is very important; it eliminates
               # possible ambiguity for what something represents.
   33:         time_tuple = time.struct_time((1999,3,17,22,44,55,2,76,0))
   33:         date_time = [None, None, None]
   33:         date_time[0] = time.strftime("%c", time_tuple).lower()
   33:         date_time[1] = time.strftime("%x", time_tuple).lower()
   33:         date_time[2] = time.strftime("%X", time_tuple).lower()
   33:         replacement_pairs = [('%', '%%'), (self.f_weekday[2], '%A'),
   33:                     (self.f_month[3], '%B'), (self.a_weekday[2], '%a'),
   33:                     (self.a_month[3], '%b'), (self.am_pm[1], '%p'),
   33:                     ('1999', '%Y'), ('99', '%y'), ('22', '%H'),
   33:                     ('44', '%M'), ('55', '%S'), ('76', '%j'),
   33:                     ('17', '%d'), ('03', '%m'), ('3', '%m'),
                           # '3' needed for when no leading zero.
   33:                     ('2', '%w'), ('10', '%I')]
   99:         replacement_pairs.extend([(tz, "%Z") for tz_values in self.timezone
  198:                                                 for tz in tz_values])
  132:         for offset,directive in ((0,'%c'), (1,'%x'), (2,'%X')):
   99:             current_format = date_time[offset]
 2178:             for old, new in replacement_pairs:
                       # Must deal with possible lack of locale info
                       # manifesting itself as the empty string (e.g., Swedish's
                       # lack of AM/PM info) or a platform returning a tuple of empty
                       # strings (e.g., MacOS 9 having timezone as ('','')).
 2079:                 if old:
 2079:                     current_format = current_format.replace(old, new)
                   # If %W is used, then Sunday, 2005-01-03 will fall on week 0 since
                   # 2005-01-03 occurs before the first Monday of the year.  Otherwise
                   # %U is used.
   99:             time_tuple = time.struct_time((1999,1,3,1,1,1,6,3,0))
   99:             if '00' in time.strftime(directive, time_tuple):
>>>>>>                 U_W = '%W'
                   else:
   99:                 U_W = '%U'
   99:             date_time[offset] = current_format.replace('11', U_W)
   33:         self.LC_date_time = date_time[0]
   33:         self.LC_date = date_time[1]
   33:         self.LC_time = date_time[2]
       
    1:     def __calc_timezone(self):
               # Set self.timezone by using time.tzname.
               # Do not worry about possibility of time.tzname[0] == time.tzname[1]
               # and time.daylight; handle that in strptime.
   33:         try:
   33:             time.tzset()
>>>>>>         except AttributeError:
>>>>>>             pass
   33:         self.tzname = time.tzname
   33:         self.daylight = time.daylight
   33:         no_saving = frozenset(["utc", "gmt", self.tzname[0].lower()])
   33:         if self.daylight:
   33:             has_saving = frozenset([self.tzname[1].lower()])
               else:
>>>>>>             has_saving = frozenset()
   33:         self.timezone = (no_saving, has_saving)
       
       
    2: class TimeRE(dict):
    1:     """Handle conversion from format directives to regexes."""
       
    1:     def __init__(self, locale_time=None):
               """Create keys/values.
       
               Order of execution is important for dependency reasons.
       
               """
   18:         if locale_time:
    2:             self.locale_time = locale_time
               else:
   16:             self.locale_time = LocaleTime()
   18:         base = super(TimeRE, self)
   18:         base.__init__({
                   # The " \d" part of the regex is to make %c from ANSI C work
   18:             'd': r"(?P<d>3[0-1]|[1-2]\d|0[1-9]|[1-9]| [1-9])",
   18:             'f': r"(?P<f>[0-9]{1,6})",
   18:             'H': r"(?P<H>2[0-3]|[0-1]\d|\d)",
   18:             'I': r"(?P<I>1[0-2]|0[1-9]|[1-9])",
   18:             'j': r"(?P<j>36[0-6]|3[0-5]\d|[1-2]\d\d|0[1-9]\d|00[1-9]|[1-9]\d|0[1-9]|[1-9])",
   18:             'm': r"(?P<m>1[0-2]|0[1-9]|[1-9])",
   18:             'M': r"(?P<M>[0-5]\d|\d)",
   18:             'S': r"(?P<S>6[0-1]|[0-5]\d|\d)",
   18:             'U': r"(?P<U>5[0-3]|[0-4]\d|\d)",
   18:             'w': r"(?P<w>[0-6])",
                   # W is set below by using 'U'
   18:             'y': r"(?P<y>\d\d)",
                   #XXX: Does 'Y' need to worry about having less or more than
                   #     4 digits?
   18:             'Y': r"(?P<Y>\d\d\d\d)",
   18:             'A': self.__seqToRE(self.locale_time.f_weekday, 'A'),
   18:             'a': self.__seqToRE(self.locale_time.a_weekday, 'a'),
   18:             'B': self.__seqToRE(self.locale_time.f_month[1:], 'B'),
   18:             'b': self.__seqToRE(self.locale_time.a_month[1:], 'b'),
   18:             'p': self.__seqToRE(self.locale_time.am_pm, 'p'),
   72:             'Z': self.__seqToRE((tz for tz_names in self.locale_time.timezone
  119:                                         for tz in tz_names),
   18:                                 'Z'),
   18:             '%': '%'})
   18:         base.__setitem__('W', base.__getitem__('U').replace('U', 'W'))
   18:         base.__setitem__('c', self.pattern(self.locale_time.LC_date_time))
   18:         base.__setitem__('x', self.pattern(self.locale_time.LC_date))
   18:         base.__setitem__('X', self.pattern(self.locale_time.LC_time))
       
    1:     def __seqToRE(self, to_convert, directive):
               """Convert a list to a regex string for matching a directive.
       
               Want possible matching values to be from longest to shortest.  This
               prevents the possibility of a match occurring for a value that also
               a substring of a larger value that should have matched (e.g., 'abc'
               matching when 'abcdef' should have been the match).
       
               """
  108:         to_convert = sorted(to_convert, key=len, reverse=True)
  108:         for value in to_convert:
  107:             if value != '':
  107:                 break
               else:
    1:             return ''
 1017:         regex = '|'.join(re_escape(stuff) for stuff in to_convert)
  107:         regex = '(?P<%s>%s' % (directive, regex)
  107:         return '%s)' % regex
       
    1:     def pattern(self, format):
               """Return regex pattern for the format string.
       
               Need to make sure that any characters that might be interpreted as
               regex syntax are escaped.
       
               """
  158:         processed_format = ''
               # The sub() call escapes all characters that might be misconstrued
               # as regex syntax.  Cannot use re.escape since we have to deal with
               # format directives (%m, etc.).
  158:         regex_chars = re_compile(r"([\\.^$*+?\(\){}\[\]|])")
  158:         format = regex_chars.sub(r"\\\1", format)
  158:         whitespace_replacement = re_compile(r'\s+')
  158:         format = whitespace_replacement.sub(r'\\s+', format)
  555:         while '%' in format:
  400:             directive_index = format.index('%')+1
  400:             processed_format = "%s%s%s" % (processed_format,
  400:                                            format[:directive_index-1],
  400:                                            self[format[directive_index]])
  397:             format = format[directive_index+1:]
  155:         return "%s%s" % (processed_format, format)
       
    1:     def compile(self, format):
               """Return a compiled re object for the format string."""
  100:         return re_compile(self.pattern(format), IGNORECASE)
       
    1: _cache_lock = _thread_allocate_lock()
       # DO NOT modify _TimeRE_cache or _regex_cache without acquiring the cache lock
       # first!
    1: _TimeRE_cache = TimeRE()
    1: _CACHE_MAX_SIZE = 5 # Max number of regexes stored in _regex_cache
    1: _regex_cache = {}
       
    1: def _calc_julian_from_U_or_W(year, week_of_year, day_of_week, week_starts_Mon):
           """Calculate the Julian day based on the year, week of the year, and day of
           the week, with week_start_day representing whether the week of the year
           assumes the week starts on Sunday or Monday (6 or 0)."""
   68:     first_weekday = datetime_date(year, 1, 1).weekday()
           # If we are dealing with the %U directive (week starts on Sunday), it's
           # easier to just shift the view to Sunday being the first day of the
           # week.
   68:     if not week_starts_Mon:
   34:         first_weekday = (first_weekday + 1) % 7
   34:         day_of_week = (day_of_week + 1) % 7
           # Need to watch out for a week 0 (when the first day of the year is not
           # the same as that specified by %U or %W).
   68:     week_0_length = (7 - first_weekday) % 7
   68:     if week_of_year == 0:
   32:         return 1 + day_of_week - first_weekday
           else:
   36:         days_to_week = week_0_length + (7 * (week_of_year - 1))
   36:         return 1 + days_to_week + day_of_week
       
       
    1: def _strptime(data_string, format="%a %b %d %H:%M:%S %Y"):
           """Return a time struct based on the input string and the format string."""
           global _TimeRE_cache, _regex_cache
  592:     with _cache_lock:
  592:         locale_time = _TimeRE_cache.locale_time
  592:         if (_getlang() != locale_time.lang or
  587:             time.tzname != locale_time.tzname or
  584:             time.daylight != locale_time.daylight):
    8:             _TimeRE_cache = TimeRE()
    8:             _regex_cache.clear()
    8:             locale_time = _TimeRE_cache.locale_time
  592:         if len(_regex_cache) > _CACHE_MAX_SIZE:
    9:             _regex_cache.clear()
  592:         format_regex = _regex_cache.get(format)
  592:         if not format_regex:
   74:             try:
   74:                 format_regex = _TimeRE_cache.compile(format)
                   # KeyError raised when a bad format is found; can be specified as
                   # \\, in which case it was a stray % but with a space after it
    3:             except KeyError, err:
    2:                 bad_directive = err.args[0]
    2:                 if bad_directive == "\\":
    1:                     bad_directive = "%"
    2:                 del err
    2:                 raise ValueError("'%s' is a bad directive in format '%s'" %
    2:                                     (bad_directive, format))
                   # IndexError only occurs when the format string is "%"
    1:             except IndexError:
    1:                 raise ValueError("stray %% in format '%s'" % format)
   71:             _regex_cache[format] = format_regex
  589:     found = format_regex.match(data_string)
  589:     if not found:
   10:         raise ValueError("time data %r does not match format %r" %
   10:                          (data_string, format))
  579:     if len(data_string) != found.end():
    1:         raise ValueError("unconverted data remains: %s" %
    1:                           data_string[found.end():])
       
  578:     year = None
  578:     month = day = 1
  578:     hour = minute = second = fraction = 0
  578:     tz = -1
           # Default to -1 to signify that values not known; not critical to have,
           # though
  578:     week_of_year = -1
  578:     week_of_year_start = -1
           # weekday and julian defaulted to None so as to signal need to calculate
           # values
  578:     weekday = julian = None
  578:     found_dict = found.groupdict()
 1982:     for group_key in found_dict.iterkeys():
               # Directives not explicitly handled below:
               #   c, x, X
               #      handled by making out of other directives
               #   U, W
               #      worthless without day of the week
 1404:         if group_key == 'y':
   10:             year = int(found_dict['y'])
                   # Open Group specification for strptime() states that a %y
                   #value in the range of [00, 68] is in the century 2000, while
                   #[69,99] is in the century 1900
   10:             if year <= 68:
    8:                 year += 2000
                   else:
    2:                 year += 1900
 1394:         elif group_key == 'Y':
  497:             year = int(found_dict['Y'])
  897:         elif group_key == 'm':
   29:             month = int(found_dict['m'])
  868:         elif group_key == 'B':
    5:             month = locale_time.f_month.index(found_dict['B'].lower())
  863:         elif group_key == 'b':
   28:             month = locale_time.a_month.index(found_dict['b'].lower())
  835:         elif group_key == 'd':
   73:             day = int(found_dict['d'])
  762:         elif group_key == 'H':
   65:             hour = int(found_dict['H'])
  697:         elif group_key == 'I':
    6:             hour = int(found_dict['I'])
    6:             ampm = found_dict.get('p', '').lower()
                   # If there was no AM/PM indicator, we'll treat this like AM
    6:             if ampm in ('', locale_time.am_pm[0]):
                       # We're in AM so the hour is correct unless we're
                       # looking at 12 midnight.
                       # 12 midnight == 12 AM == hour 0
    3:                 if hour == 12:
    2:                     hour = 0
    3:             elif ampm == locale_time.am_pm[1]:
                       # We're in PM so we need to add 12 to the hour unless
                       # we're looking at 12 noon.
                       # 12 noon == 12 PM == hour 12
    3:                 if hour != 12:
    1:                     hour += 12
  691:         elif group_key == 'M':
   64:             minute = int(found_dict['M'])
  627:         elif group_key == 'S':
   65:             second = int(found_dict['S'])
  562:         elif group_key == 'f':
    5:             s = found_dict['f']
                   # Pad to always return microseconds.
    5:             s += "0" * (6 - len(s))
    5:             fraction = int(s)
  557:         elif group_key == 'A':
    2:             weekday = locale_time.f_weekday.index(found_dict['A'].lower())
  555:         elif group_key == 'a':
   25:             weekday = locale_time.a_weekday.index(found_dict['a'].lower())
  530:         elif group_key == 'w':
   72:             weekday = int(found_dict['w'])
   72:             if weekday == 0:
   24:                 weekday = 6
                   else:
   48:                 weekday -= 1
  458:         elif group_key == 'j':
  370:             julian = int(found_dict['j'])
   88:         elif group_key in ('U', 'W'):
   70:             week_of_year = int(found_dict[group_key])
   70:             if group_key == 'U':
                       # U starts week on Sunday.
   35:                 week_of_year_start = 6
                   else:
                       # W starts week on Monday.
   35:                 week_of_year_start = 0
   18:         elif group_key == 'Z':
                   # Since -1 is default value only need to worry about setting tz if
                   # it can be something other than -1.
   12:             found_zone = found_dict['Z'].lower()
   15:             for value, tz_values in enumerate(locale_time.timezone):
   15:                 if found_zone in tz_values:
                           # Deal with bad locale setup where timezone names are the
                           # same and yet time.daylight is true; too ambiguous to
                           # be able to tell what timezone has daylight savings
   12:                     if (time.tzname[0] == time.tzname[1] and
    1:                        time.daylight and found_zone not in ("utc", "gmt")):
    1:                         break
                           else:
   11:                         tz = value
   11:                         break
  578:     leap_year_fix = False
  578:     if year is None and month == 2 and day == 29:
    2:         year = 1904  # 1904 is first leap year of 20th century
    2:         leap_year_fix = True
  576:     elif year is None:
   69:         year = 1900
           # If we know the week of the year and what day of that week, we can figure
           # out the Julian day of the year.
  578:     if julian is None and week_of_year != -1 and weekday is not None:
   68:         week_starts_Mon = True if week_of_year_start == 0 else False
   68:         julian = _calc_julian_from_U_or_W(year, week_of_year, weekday,
   68:                                             week_starts_Mon)
   68:         if julian <= 0:
   14:             year -= 1
   14:             yday = 366 if calendar.isleap(year) else 365
   14:             julian += yday
           # Cannot pre-calculate datetime_date() since can change in Julian
           # calculation and thus could have different value for the day of the week
           # calculation.
  578:     if julian is None:
               # Need to add 1 to result since first day of the year is 1, not 0.
               julian = datetime_date(year, month, day).toordinal() - \
  140:                   datetime_date(year, 1, 1).toordinal() + 1
           else:  # Assume that if they bothered to include Julian day it will
                  # be accurate.
  438:         datetime_result = datetime_date.fromordinal((julian - 1) + datetime_date(year, 1, 1).toordinal())
  438:         year = datetime_result.year
  438:         month = datetime_result.month
  438:         day = datetime_result.day
  578:     if weekday is None:
  479:         weekday = datetime_date(year, month, day).weekday()
  578:     if leap_year_fix:
               # the caller didn't supply a year but asked for Feb 29th. We couldn't
               # use the default of 1900 for computations. We set it back to ensure
               # that February 29th is smaller than March 1st.
    2:         year = 1900
       
  578:     return (time.struct_time((year, month, day,
  578:                               hour, minute, second,
  578:                               weekday, julian, tz)), fraction)
       
    1: def _strptime_time(data_string, format="%a %b %d %H:%M:%S %Y"):
  587:     return _strptime(data_string, format)[0]
