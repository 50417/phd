       '''
          Tests for fpformat module
          Nick Mathewson
    1: '''
    1: from test.test_support import run_unittest, import_module
    1: import unittest
    1: fpformat = import_module('fpformat', deprecated=True)
    1: fix, sci, NotANumber = fpformat.fix, fpformat.sci, fpformat.NotANumber
       
    1: StringType = type('')
       
       # Test the old and obsolescent fpformat module.
       #
       # (It's obsolescent because fix(n,d) == "%.*f"%(d,n) and
       #                           sci(n,d) == "%.*e"%(d,n)
       #  for all reasonable numeric n and d, except that sci gives 3 exponent
       #  digits instead of 2.
       #
       # Differences only occur for unreasonable n and d.    <.2 wink>)
       
    2: class FpformatTest(unittest.TestCase):
       
    1:     def checkFix(self, n, digits):
  168:         result = fix(n, digits)
  168:         if isinstance(n, StringType):
>>>>>>             n = repr(n)
  168:         expected = "%.*f" % (digits, float(n))
       
  168:         self.assertEqual(result, expected)
       
    1:     def checkSci(self, n, digits):
  168:         result = sci(n, digits)
  168:         if isinstance(n, StringType):
>>>>>>             n = repr(n)
  168:         expected = "%.*e" % (digits, float(n))
               # add the extra 0 if needed
  168:         num, exp = expected.split("e")
  168:         if len(exp) < 4:
  168:             exp = exp[0] + "0" + exp[1:]
  168:         expected = "%se%s" % (num, exp)
       
  168:         self.assertEqual(result, expected)
       
    1:     def test_basic_cases(self):
    1:         self.assertEqual(fix(100.0/3, 3), '33.333')
    1:         self.assertEqual(sci(100.0/3, 3), '3.333e+001')
       
    1:     def test_reasonable_values(self):
    8:         for d in range(7):
   49:             for val in (1000.0/3, 1000, 1000.0, .002, 1.0/3, 1e10):
  210:                 for realVal in (val, 1.0/val, -val, -1.0/val):
  168:                     self.checkFix(realVal, d)
  168:                     self.checkSci(realVal, d)
       
    1:     def test_failing_values(self):
               # Now for 'unreasonable n and d'
    1:         self.assertEqual(fix(1.0, 1000), '1.'+('0'*1000))
    1:         self.assertEqual(sci("1"+('0'*1000), 0), '1e+1000')
       
               # This behavior is inconsistent.  sci raises an exception; fix doesn't.
    1:         yacht = "Throatwobbler Mangrove"
    1:         self.assertEqual(fix(yacht, 10), yacht)
    1:         try:
    1:             sci(yacht, 10)
    1:         except NotANumber:
    1:             pass
               else:
>>>>>>             self.fail("No exception on non-numeric sci")
       
       
    1: def test_main():
    1:     run_unittest(FpformatTest)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
