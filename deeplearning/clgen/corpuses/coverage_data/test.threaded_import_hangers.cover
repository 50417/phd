       # This is a helper module for test_threaded_import.  The test imports this
       # module, and this module tries to run various Python library functions in
       # their own thread, as a side effect of being imported.  If the spawned
       # thread doesn't complete in TIMEOUT seconds, an "appeared to hang" message
       # is appended to the module-global `errors` list.  That list remains empty
       # if (and only if) all functions tested complete.
       
    1: TIMEOUT = 10
       
    1: import threading
       
    1: import tempfile
    1: import os.path
       
    1: errors = []
       
       # This class merely runs a function in its own thread T.  The thread importing
       # this module holds the import lock, so if the function called by T tries
       # to do its own imports it will block waiting for this module's import
       # to complete.
    2: class Worker(threading.Thread):
    1:     def __init__(self, function, args):
    2:         threading.Thread.__init__(self)
    2:         self.function = function
    2:         self.args = args
       
    1:     def run(self):
    2:         self.function(*self.args)
       
    1: for name, func, args in [
               # Bug 147376:  TemporaryFile hung on Windows, starting in Python 2.4.
    1:         ("tempfile.TemporaryFile", tempfile.TemporaryFile, ()),
       
               # The real cause for bug 147376:  ntpath.abspath() caused the hang.
    3:         ("os.path.abspath", os.path.abspath, ('.',)),
               ]:
       
    2:     t = Worker(func, args)
    2:     t.start()
    2:     t.join(TIMEOUT)
    2:     if t.is_alive():
>>>>>>         errors.append("%s appeared to hang" % name)
