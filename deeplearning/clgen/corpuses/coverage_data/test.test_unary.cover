    1: """Test compiler changes for unary ops (+, -, ~) introduced in Python 2.2"""
       
    1: import unittest
    1: from test.test_support import run_unittest, have_unicode
       
    2: class UnaryOpTestCase(unittest.TestCase):
       
    1:     def test_negative(self):
    1:         self.assertTrue(-2 == 0 - 2)
    1:         self.assertTrue(-0 == 0)
    1:         self.assertTrue(--2 == 2)
    1:         self.assertTrue(-2L == 0 - 2L)
    1:         self.assertTrue(-2.0 == 0 - 2.0)
    1:         self.assertTrue(-2j == 0 - 2j)
       
    1:     def test_positive(self):
    1:         self.assertTrue(+2 == 2)
    1:         self.assertTrue(+0 == 0)
    1:         self.assertTrue(++2 == 2)
    1:         self.assertTrue(+2L == 2L)
    1:         self.assertTrue(+2.0 == 2.0)
    1:         self.assertTrue(+2j == 2j)
       
    1:     def test_invert(self):
    1:         self.assertTrue(-2 == 0 - 2)
    1:         self.assertTrue(-0 == 0)
    1:         self.assertTrue(--2 == 2)
    1:         self.assertTrue(-2L == 0 - 2L)
       
    1:     def test_no_overflow(self):
    1:         nines = "9" * 32
    1:         self.assertTrue(eval("+" + nines) == eval("+" + nines + "L"))
    1:         self.assertTrue(eval("-" + nines) == eval("-" + nines + "L"))
    1:         self.assertTrue(eval("~" + nines) == eval("~" + nines + "L"))
       
    1:     def test_negation_of_exponentiation(self):
               # Make sure '**' does the right thing; these form a
               # regression test for SourceForge bug #456756.
    1:         self.assertEqual(-2 ** 3, -8)
    1:         self.assertEqual((-2) ** 3, -8)
    1:         self.assertEqual(-2 ** 4, -16)
    1:         self.assertEqual((-2) ** 4, 16)
       
    1:     def test_bad_types(self):
    4:         for op in '+', '-', '~':
    3:             self.assertRaises(TypeError, eval, op + "'a'")
    3:             if have_unicode:
    3:                 self.assertRaises(TypeError, eval, op + "u'a'")
       
    1:         self.assertRaises(TypeError, eval, "~2j")
    1:         self.assertRaises(TypeError, eval, "~2.0")
       
       
    1: def test_main():
    1:     run_unittest(UnaryOpTestCase)
       
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
