       # -*- coding: iso-8859-1 -*-
    1: import unittest
    1: import shlex
       
    1: from test import test_support
       
    1: try:
    1:     from cStringIO import StringIO
>>>>>> except ImportError:
>>>>>>     from StringIO import StringIO
       
       
       # The original test data set was from shellwords, by Hartmut Goebel.
       
       data = r"""x|x|
       foo bar|foo|bar|
        foo bar|foo|bar|
        foo bar |foo|bar|
       foo   bar    bla     fasel|foo|bar|bla|fasel|
       x y  z              xxxx|x|y|z|xxxx|
       \x bar|\|x|bar|
       \ x bar|\|x|bar|
       \ bar|\|bar|
       foo \x bar|foo|\|x|bar|
       foo \ x bar|foo|\|x|bar|
       foo \ bar|foo|\|bar|
       foo "bar" bla|foo|"bar"|bla|
       "foo" "bar" "bla"|"foo"|"bar"|"bla"|
       "foo" bar "bla"|"foo"|bar|"bla"|
       "foo" bar bla|"foo"|bar|bla|
       foo 'bar' bla|foo|'bar'|bla|
       'foo' 'bar' 'bla'|'foo'|'bar'|'bla'|
       'foo' bar 'bla'|'foo'|bar|'bla'|
       'foo' bar bla|'foo'|bar|bla|
       blurb foo"bar"bar"fasel" baz|blurb|foo"bar"bar"fasel"|baz|
       blurb foo'bar'bar'fasel' baz|blurb|foo'bar'bar'fasel'|baz|
       ""|""|
       ''|''|
       foo "" bar|foo|""|bar|
       foo '' bar|foo|''|bar|
       foo "" "" "" bar|foo|""|""|""|bar|
       foo '' '' '' bar|foo|''|''|''|bar|
       \""|\|""|
       "\"|"\"|
       "foo\ bar"|"foo\ bar"|
       "foo\\ bar"|"foo\\ bar"|
       "foo\\ bar\"|"foo\\ bar\"|
       "foo\\" bar\""|"foo\\"|bar|\|""|
       "foo\\ bar\" dfadf"|"foo\\ bar\"|dfadf"|
       "foo\\\ bar\" dfadf"|"foo\\\ bar\"|dfadf"|
       "foo\\\x bar\" dfadf"|"foo\\\x bar\"|dfadf"|
       "foo\x bar\" dfadf"|"foo\x bar\"|dfadf"|
       \''|\|''|
       'foo\ bar'|'foo\ bar'|
       'foo\\ bar'|'foo\\ bar'|
       "foo\\\x bar\" df'a\ 'df'|"foo\\\x bar\"|df'a|\|'df'|
       \"foo"|\|"foo"|
       \"foo"\x|\|"foo"|\|x|
       "foo\x"|"foo\x"|
       "foo\ "|"foo\ "|
       foo\ xx|foo|\|xx|
       foo\ x\x|foo|\|x|\|x|
       foo\ x\x\""|foo|\|x|\|x|\|""|
       "foo\ x\x"|"foo\ x\x"|
       "foo\ x\x\\"|"foo\ x\x\\"|
       "foo\ x\x\\""foobar"|"foo\ x\x\\"|"foobar"|
       "foo\ x\x\\"\''"foobar"|"foo\ x\x\\"|\|''|"foobar"|
       "foo\ x\x\\"\'"fo'obar"|"foo\ x\x\\"|\|'"fo'|obar"|
       "foo\ x\x\\"\'"fo'obar" 'don'\''t'|"foo\ x\x\\"|\|'"fo'|obar"|'don'|\|''|t'|
       'foo\ bar'|'foo\ bar'|
       'foo\\ bar'|'foo\\ bar'|
       foo\ bar|foo|\|bar|
       foo#bar\nbaz|foobaz|
       :-) ;-)|:|-|)|;|-|)|
       áéíóú|á|é|í|ó|ú|
    1: """
       
       posix_data = r"""x|x|
       foo bar|foo|bar|
        foo bar|foo|bar|
        foo bar |foo|bar|
       foo   bar    bla     fasel|foo|bar|bla|fasel|
       x y  z              xxxx|x|y|z|xxxx|
       \x bar|x|bar|
       \ x bar| x|bar|
       \ bar| bar|
       foo \x bar|foo|x|bar|
       foo \ x bar|foo| x|bar|
       foo \ bar|foo| bar|
       foo "bar" bla|foo|bar|bla|
       "foo" "bar" "bla"|foo|bar|bla|
       "foo" bar "bla"|foo|bar|bla|
       "foo" bar bla|foo|bar|bla|
       foo 'bar' bla|foo|bar|bla|
       'foo' 'bar' 'bla'|foo|bar|bla|
       'foo' bar 'bla'|foo|bar|bla|
       'foo' bar bla|foo|bar|bla|
       blurb foo"bar"bar"fasel" baz|blurb|foobarbarfasel|baz|
       blurb foo'bar'bar'fasel' baz|blurb|foobarbarfasel|baz|
       ""||
       ''||
       foo "" bar|foo||bar|
       foo '' bar|foo||bar|
       foo "" "" "" bar|foo||||bar|
       foo '' '' '' bar|foo||||bar|
       \"|"|
       "\""|"|
       "foo\ bar"|foo\ bar|
       "foo\\ bar"|foo\ bar|
       "foo\\ bar\""|foo\ bar"|
       "foo\\" bar\"|foo\|bar"|
       "foo\\ bar\" dfadf"|foo\ bar" dfadf|
       "foo\\\ bar\" dfadf"|foo\\ bar" dfadf|
       "foo\\\x bar\" dfadf"|foo\\x bar" dfadf|
       "foo\x bar\" dfadf"|foo\x bar" dfadf|
       \'|'|
       'foo\ bar'|foo\ bar|
       'foo\\ bar'|foo\\ bar|
       "foo\\\x bar\" df'a\ 'df"|foo\\x bar" df'a\ 'df|
       \"foo|"foo|
       \"foo\x|"foox|
       "foo\x"|foo\x|
       "foo\ "|foo\ |
       foo\ xx|foo xx|
       foo\ x\x|foo xx|
       foo\ x\x\"|foo xx"|
       "foo\ x\x"|foo\ x\x|
       "foo\ x\x\\"|foo\ x\x\|
       "foo\ x\x\\""foobar"|foo\ x\x\foobar|
       "foo\ x\x\\"\'"foobar"|foo\ x\x\'foobar|
       "foo\ x\x\\"\'"fo'obar"|foo\ x\x\'fo'obar|
       "foo\ x\x\\"\'"fo'obar" 'don'\''t'|foo\ x\x\'fo'obar|don't|
       "foo\ x\x\\"\'"fo'obar" 'don'\''t' \\|foo\ x\x\'fo'obar|don't|\|
       'foo\ bar'|foo\ bar|
       'foo\\ bar'|foo\\ bar|
       foo\ bar|foo bar|
       foo#bar\nbaz|foo|baz|
       :-) ;-)|:-)|;-)|
       áéíóú|áéíóú|
    1: """
       
    2: class ShlexTest(unittest.TestCase):
    1:     def setUp(self):
    3:         self.data = [x.split("|")[:-1]
  186:                      for x in data.splitlines()]
    3:         self.posix_data = [x.split("|")[:-1]
  189:                            for x in posix_data.splitlines()]
  186:         for item in self.data:
  183:             item[0] = item[0].replace(r"\n", "\n")
  189:         for item in self.posix_data:
  186:             item[0] = item[0].replace(r"\n", "\n")
       
    1:     def splitTest(self, data, comments):
   63:         for i in range(len(data)):
   62:             l = shlex.split(data[i][0], comments=comments)
   62:             self.assertEqual(l, data[i][1:],
   62:                              "%s: %s != %s" %
   62:                              (data[i][0], l, data[i][1:]))
       
    1:     def oldSplit(self, s):
   61:         ret = []
   61:         lex = shlex.shlex(StringIO(s))
   61:         tok = lex.get_token()
  229:         while tok:
  168:             ret.append(tok)
  168:             tok = lex.get_token()
   61:         return ret
       
    1:     def testSplitPosix(self):
               """Test data splitting with posix parser"""
    1:         self.splitTest(self.posix_data, comments=True)
       
    1:     def testCompat(self):
               """Test compatibility interface"""
   62:         for i in range(len(self.data)):
   61:             l = self.oldSplit(self.data[i][0])
   61:             self.assertEqual(l, self.data[i][1:],
   61:                              "%s: %s != %s" %
   61:                              (self.data[i][0], l, self.data[i][1:]))
       
    1:     def testEmptyStringHandling(self):
               """Test that parsing of empty strings is correctly handled."""
               # see Issue #21999
    1:         expected = ['', ')', 'abc']
       
    1:         s = shlex.shlex("'')abc", posix=True)
    1:         slist = list(s)
    1:         self.assertEqual(slist, expected)
    1:         expected = ["''", ')', 'abc']
    1:         s = shlex.shlex("'')abc")
    1:         self.assertEqual(list(s), expected)
       
       
       # Allow this test to be used with old shlex.py
    1: if not getattr(shlex, "split", None):
>>>>>>     for methname in dir(ShlexTest):
>>>>>>         if methname.startswith("test") and methname != "testCompat":
>>>>>>             delattr(ShlexTest, methname)
       
    1: def test_main():
    1:     test_support.run_unittest(ShlexTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
