    2: """Unit tests for contextlib.py, and other context managers."""
       
    2: import sys
    2: import tempfile
    2: import unittest
    2: from contextlib import *  # Tests __all__
    2: from test import test_support
    2: try:
    2:     import threading
>>>>>> except ImportError:
>>>>>>     threading = None
       
       
    4: class ContextManagerTestCase(unittest.TestCase):
       
    2:     def test_contextmanager_plain(self):
    1:         state = []
    1:         @contextmanager
               def woohoo():
    1:             state.append(1)
    1:             yield 42
    1:             state.append(999)
    1:         with woohoo() as x:
    1:             self.assertEqual(state, [1])
    1:             self.assertEqual(x, 42)
    1:             state.append(x)
    1:         self.assertEqual(state, [1, 42, 999])
       
    2:     def test_contextmanager_finally(self):
    1:         state = []
    1:         @contextmanager
               def woohoo():
    1:             state.append(1)
    1:             try:
    1:                 yield 42
                   finally:
    1:                 state.append(999)
    1:         with self.assertRaises(ZeroDivisionError):
    1:             with woohoo() as x:
    1:                 self.assertEqual(state, [1])
    1:                 self.assertEqual(x, 42)
    1:                 state.append(x)
    1:                 raise ZeroDivisionError()
    1:         self.assertEqual(state, [1, 42, 999])
       
    2:     def test_contextmanager_no_reraise(self):
    1:         @contextmanager
               def whee():
    1:             yield
    1:         ctx = whee()
    1:         ctx.__enter__()
               # Calling __exit__ should not result in an exception
    1:         self.assertFalse(ctx.__exit__(TypeError, TypeError("foo"), None))
       
    2:     def test_contextmanager_trap_yield_after_throw(self):
    1:         @contextmanager
               def whoo():
    1:             try:
    1:                 yield
    1:             except:
    1:                 yield
    1:         ctx = whoo()
    1:         ctx.__enter__()
    1:         self.assertRaises(
    1:             RuntimeError, ctx.__exit__, TypeError, TypeError("foo"), None
               )
       
    2:     def test_contextmanager_except(self):
    1:         state = []
    1:         @contextmanager
               def woohoo():
    1:             state.append(1)
    1:             try:
    1:                 yield 42
    1:             except ZeroDivisionError, e:
    1:                 state.append(e.args[0])
    1:                 self.assertEqual(state, [1, 42, 999])
    1:         with woohoo() as x:
    1:             self.assertEqual(state, [1])
    1:             self.assertEqual(x, 42)
    1:             state.append(x)
    1:             raise ZeroDivisionError(999)
    1:         self.assertEqual(state, [1, 42, 999])
       
    2:     def _create_contextmanager_attribs(self):
    2:         def attribs(**kw):
    2:             def decorate(func):
    4:                 for k,v in kw.items():
    2:                     setattr(func,k,v)
    2:                 return func
    2:             return decorate
    2:         @contextmanager
    2:         @attribs(foo='bar')
               def baz(spam):
                   """Whee!"""
    2:         return baz
       
    2:     def test_contextmanager_attribs(self):
    1:         baz = self._create_contextmanager_attribs()
    1:         self.assertEqual(baz.__name__,'baz')
    1:         self.assertEqual(baz.foo, 'bar')
       
    2:     @unittest.skipIf(sys.flags.optimize >= 2,
    2:                      "Docstrings are omitted with -O2 and above")
           def test_contextmanager_doc_attrib(self):
    1:         baz = self._create_contextmanager_attribs()
    1:         self.assertEqual(baz.__doc__, "Whee!")
       
    2:     def test_keywords(self):
               # Ensure no keyword arguments are inhibited
    1:         @contextmanager
               def woohoo(self, func, args, kwds):
    1:             yield (self, func, args, kwds)
    1:         with woohoo(self=11, func=22, args=33, kwds=44) as target:
    1:             self.assertEqual(target, (11, 22, 33, 44))
       
    4: class NestedTestCase(unittest.TestCase):
       
           # XXX This needs more work
       
    2:     def test_nested(self):
    1:         @contextmanager
               def a():
    1:             yield 1
    1:         @contextmanager
               def b():
    1:             yield 2
    1:         @contextmanager
               def c():
    1:             yield 3
    1:         with nested(a(), b(), c()) as (x, y, z):
    1:             self.assertEqual(x, 1)
    1:             self.assertEqual(y, 2)
    1:             self.assertEqual(z, 3)
       
    2:     def test_nested_cleanup(self):
    1:         state = []
    1:         @contextmanager
               def a():
    1:             state.append(1)
    1:             try:
    1:                 yield 2
                   finally:
    1:                 state.append(3)
    1:         @contextmanager
               def b():
    1:             state.append(4)
    1:             try:
    1:                 yield 5
                   finally:
    1:                 state.append(6)
    1:         with self.assertRaises(ZeroDivisionError):
    1:             with nested(a(), b()) as (x, y):
    1:                 state.append(x)
    1:                 state.append(y)
    1:                 1 // 0
    1:         self.assertEqual(state, [1, 4, 2, 5, 6, 3])
       
    2:     def test_nested_right_exception(self):
    1:         @contextmanager
               def a():
    1:             yield 1
    2:         class b(object):
    1:             def __enter__(self):
    1:                 return 2
    1:             def __exit__(self, *exc_info):
    1:                 try:
    1:                     raise Exception()
    1:                 except:
    1:                     pass
    1:         with self.assertRaises(ZeroDivisionError):
    1:             with nested(a(), b()) as (x, y):
    1:                 1 // 0
    1:         self.assertEqual((x, y), (1, 2))
       
    2:     def test_nested_b_swallows(self):
    1:         @contextmanager
               def a():
    1:             yield
    1:         @contextmanager
               def b():
    1:             try:
    1:                 yield
    1:             except:
                       # Swallow the exception
    1:                 pass
    1:         try:
    1:             with nested(a(), b()):
    1:                 1 // 0
>>>>>>         except ZeroDivisionError:
>>>>>>             self.fail("Didn't swallow ZeroDivisionError")
       
    2:     def test_nested_break(self):
    1:         @contextmanager
               def a():
    2:             yield
    1:         state = 0
    1:         while True:
    1:             state += 1
    1:             with nested(a(), a()):
    1:                 break
>>>>>>             state += 10
    1:         self.assertEqual(state, 1)
       
    2:     def test_nested_continue(self):
    1:         @contextmanager
               def a():
    6:             yield
    1:         state = 0
    4:         while state < 3:
    3:             state += 1
    3:             with nested(a(), a()):
    3:                 continue
>>>>>>             state += 10
    1:         self.assertEqual(state, 3)
       
    2:     def test_nested_return(self):
    1:         @contextmanager
               def a():
    2:             try:
    2:                 yield
>>>>>>             except:
>>>>>>                 pass
    1:         def foo():
    1:             with nested(a(), a()):
    1:                 return 1
>>>>>>             return 10
    1:         self.assertEqual(foo(), 1)
       
    4: class ClosingTestCase(unittest.TestCase):
       
           # XXX This needs more work
       
    2:     def test_closing(self):
    1:         state = []
    2:         class C:
    1:             def close(self):
    1:                 state.append(1)
    1:         x = C()
    1:         self.assertEqual(state, [])
    1:         with closing(x) as y:
    1:             self.assertEqual(x, y)
    1:         self.assertEqual(state, [1])
       
    2:     def test_closing_error(self):
    1:         state = []
    2:         class C:
    1:             def close(self):
    1:                 state.append(1)
    1:         x = C()
    1:         self.assertEqual(state, [])
    1:         with self.assertRaises(ZeroDivisionError):
    1:             with closing(x) as y:
    1:                 self.assertEqual(x, y)
    1:                 1 // 0
    1:         self.assertEqual(state, [1])
       
    4: class FileContextTestCase(unittest.TestCase):
       
    2:     def testWithOpen(self):
    1:         tfn = tempfile.mktemp()
    1:         try:
    1:             f = None
    1:             with open(tfn, "w") as f:
    1:                 self.assertFalse(f.closed)
    1:                 f.write("Booh\n")
    1:             self.assertTrue(f.closed)
    1:             f = None
    1:             with self.assertRaises(ZeroDivisionError):
    1:                 with open(tfn, "r") as f:
    1:                     self.assertFalse(f.closed)
    1:                     self.assertEqual(f.read(), "Booh\n")
    1:                     1 // 0
    1:             self.assertTrue(f.closed)
               finally:
    1:             test_support.unlink(tfn)
       
    4: @unittest.skipUnless(threading, 'Threading required for this test.')
    2: class LockContextTestCase(unittest.TestCase):
       
    2:     def boilerPlate(self, lock, locked):
    5:         self.assertFalse(locked())
    5:         with lock:
    5:             self.assertTrue(locked())
    5:         self.assertFalse(locked())
    5:         with self.assertRaises(ZeroDivisionError):
    5:             with lock:
    5:                 self.assertTrue(locked())
    5:                 1 // 0
    5:         self.assertFalse(locked())
       
    2:     def testWithLock(self):
    1:         lock = threading.Lock()
    1:         self.boilerPlate(lock, lock.locked)
       
    2:     def testWithRLock(self):
    1:         lock = threading.RLock()
    1:         self.boilerPlate(lock, lock._is_owned)
       
    2:     def testWithCondition(self):
    1:         lock = threading.Condition()
    1:         def locked():
    5:             return lock._is_owned()
    1:         self.boilerPlate(lock, locked)
       
    2:     def testWithSemaphore(self):
    1:         lock = threading.Semaphore()
    1:         def locked():
    5:             if lock.acquire(False):
    3:                 lock.release()
    3:                 return False
                   else:
    2:                 return True
    1:         self.boilerPlate(lock, locked)
       
    2:     def testWithBoundedSemaphore(self):
    1:         lock = threading.BoundedSemaphore()
    1:         def locked():
    5:             if lock.acquire(False):
    3:                 lock.release()
    3:                 return False
                   else:
    2:                 return True
    1:         self.boilerPlate(lock, locked)
       
       # This is needed to make the test actually run under regrtest.py!
    2: def test_main():
    1:     with test_support.check_warnings(("With-statements now directly support "
                                             "multiple context managers",
    1:                                       DeprecationWarning)):
    1:         test_support.run_unittest(__name__)
       
    2: if __name__ == "__main__":
>>>>>>     test_main()
