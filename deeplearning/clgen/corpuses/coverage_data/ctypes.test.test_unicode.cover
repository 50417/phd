       # coding: latin-1
    1: import unittest
    1: import ctypes
    1: from ctypes.test import need_symbol
    1: import _ctypes_test
       
    2: @need_symbol('c_wchar')
    1: class UnicodeTestCase(unittest.TestCase):
    1:     @classmethod
           def setUpClass(cls):
    2:         dll = ctypes.CDLL(_ctypes_test.__file__)
    2:         cls.wcslen = dll.my_wcslen
    2:         cls.wcslen.argtypes = [ctypes.c_wchar_p]
    1:     def setUp(self):
    5:         self.prev_conv_mode = ctypes.set_conversion_mode("ascii", "strict")
       
    1:     def tearDown(self):
    5:         ctypes.set_conversion_mode(*self.prev_conv_mode)
       
    1:     def test_ascii_strict(self):
    2:         wcslen = self.wcslen
    2:         ctypes.set_conversion_mode("ascii", "strict")
               # no conversions take place with unicode arguments
    2:         self.assertEqual(wcslen(u"abc"), 3)
    2:         self.assertEqual(wcslen(u"ab\u2070"), 3)
               # string args are converted
    2:         self.assertEqual(wcslen("abc"), 3)
    2:         self.assertRaises(ctypes.ArgumentError, wcslen, "abä")
       
    1:     def test_ascii_replace(self):
    1:         wcslen = self.wcslen
    1:         ctypes.set_conversion_mode("ascii", "replace")
    1:         self.assertEqual(wcslen(u"abc"), 3)
    1:         self.assertEqual(wcslen(u"ab\u2070"), 3)
    1:         self.assertEqual(wcslen("abc"), 3)
    1:         self.assertEqual(wcslen("abä"), 3)
       
    1:     def test_ascii_ignore(self):
    1:         wcslen = self.wcslen
    1:         ctypes.set_conversion_mode("ascii", "ignore")
    1:         self.assertEqual(wcslen(u"abc"), 3)
    1:         self.assertEqual(wcslen(u"ab\u2070"), 3)
               # ignore error mode skips non-ascii characters
    1:         self.assertEqual(wcslen("abc"), 3)
    1:         self.assertEqual(wcslen("äöüß"), 0)
       
    1:     def test_latin1_strict(self):
    2:         wcslen = self.wcslen
    2:         ctypes.set_conversion_mode("latin-1", "strict")
    2:         self.assertEqual(wcslen(u"abc"), 3)
    2:         self.assertEqual(wcslen(u"ab\u2070"), 3)
    2:         self.assertEqual(wcslen("abc"), 3)
    2:         self.assertEqual(wcslen("äöüß"), 4)
       
    1:     def test_buffers(self):
    1:         ctypes.set_conversion_mode("ascii", "strict")
    1:         buf = ctypes.create_unicode_buffer("abc")
    1:         self.assertEqual(len(buf), 3+1)
       
    1:         ctypes.set_conversion_mode("ascii", "replace")
    1:         buf = ctypes.create_unicode_buffer("abäöü")
    1:         self.assertEqual(buf[:], u"ab\uFFFD\uFFFD\uFFFD\0")
    1:         self.assertEqual(buf[::], u"ab\uFFFD\uFFFD\uFFFD\0")
    1:         self.assertEqual(buf[::-1], u"\0\uFFFD\uFFFD\uFFFDba")
    1:         self.assertEqual(buf[::2], u"a\uFFFD\uFFFD")
    1:         self.assertEqual(buf[6:5:-1], u"")
       
    1:         ctypes.set_conversion_mode("ascii", "ignore")
    1:         buf = ctypes.create_unicode_buffer("abäöü")
               # is that correct? not sure.  But with 'ignore', you get what you pay for..
    1:         self.assertEqual(buf[:], u"ab\0\0\0\0")
    1:         self.assertEqual(buf[::], u"ab\0\0\0\0")
    1:         self.assertEqual(buf[::-1], u"\0\0\0\0ba")
    1:         self.assertEqual(buf[::2], u"a\0\0")
    1:         self.assertEqual(buf[6:5:-1], u"")
       
    2: @need_symbol('c_wchar')
    1: class StringTestCase(UnicodeTestCase):
    1:     @classmethod
           def setUpClass(cls):
    1:         super(StringTestCase, cls).setUpClass()
    1:         cls.func = ctypes.CDLL(_ctypes_test.__file__)._testfunc_p_p
       
    1:     def setUp(self):
    5:         func = self.func
    5:         self.prev_conv_mode = ctypes.set_conversion_mode("ascii", "strict")
    5:         func.argtypes = [ctypes.c_char_p]
    5:         func.restype = ctypes.c_char_p
       
    1:     def tearDown(self):
    5:         func = self.func
    5:         ctypes.set_conversion_mode(*self.prev_conv_mode)
    5:         func.argtypes = None
    5:         func.restype = ctypes.c_int
       
    1:     def test_ascii_replace(self):
>>>>>>         func = self.func
>>>>>>         ctypes.set_conversion_mode("ascii", "strict")
>>>>>>         self.assertEqual(func("abc"), "abc")
>>>>>>         self.assertEqual(func(u"abc"), "abc")
>>>>>>         self.assertRaises(ctypes.ArgumentError, func, u"abä")
       
    1:     def test_ascii_ignore(self):
    1:         func = self.func
    1:         ctypes.set_conversion_mode("ascii", "ignore")
    1:         self.assertEqual(func("abc"), "abc")
    1:         self.assertEqual(func(u"abc"), "abc")
    1:         self.assertEqual(func(u"äöüß"), "")
       
    1:     def test_ascii_replace(self):
    1:         func = self.func
    1:         ctypes.set_conversion_mode("ascii", "replace")
    1:         self.assertEqual(func("abc"), "abc")
    1:         self.assertEqual(func(u"abc"), "abc")
    1:         self.assertEqual(func(u"äöüß"), "????")
       
    1:     def test_buffers(self):
    1:         ctypes.set_conversion_mode("ascii", "strict")
    1:         buf = ctypes.create_string_buffer(u"abc")
    1:         self.assertEqual(len(buf), 3+1)
       
    1:         ctypes.set_conversion_mode("ascii", "replace")
    1:         buf = ctypes.create_string_buffer(u"abäöü")
    1:         self.assertEqual(buf[:], "ab???\0")
    1:         self.assertEqual(buf[::], "ab???\0")
    1:         self.assertEqual(buf[::-1], "\0???ba")
    1:         self.assertEqual(buf[::2], "a??")
    1:         self.assertEqual(buf[6:5:-1], "")
       
    1:         ctypes.set_conversion_mode("ascii", "ignore")
    1:         buf = ctypes.create_string_buffer(u"abäöü")
               # is that correct? not sure.  But with 'ignore', you get what you pay for..
    1:         self.assertEqual(buf[:], "ab\0\0\0\0")
    1:         self.assertEqual(buf[::], "ab\0\0\0\0")
    1:         self.assertEqual(buf[::-1], "\0\0\0\0ba")
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main()
