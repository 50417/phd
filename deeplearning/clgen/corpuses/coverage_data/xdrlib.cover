       """Implements (a subset of) Sun XDR -- eXternal Data Representation.
       
       See: RFC 1014
       
    1: """
       
    1: import struct
    1: try:
    1:     from cStringIO import StringIO as _StringIO
>>>>>> except ImportError:
>>>>>>     from StringIO import StringIO as _StringIO
    1: from functools import wraps
       
    1: __all__ = ["Error", "Packer", "Unpacker", "ConversionError"]
       
       # exceptions
    2: class Error(Exception):
           """Exception class for this module. Use:
       
           except xdrlib.Error, var:
               # var has the Error instance for the exception
       
           Public ivars:
               msg -- contains the message
       
    1:     """
    1:     def __init__(self, msg):
    5:         self.msg = msg
    1:     def __repr__(self):
>>>>>>         return repr(self.msg)
    1:     def __str__(self):
>>>>>>         return str(self.msg)
       
       
    2: class ConversionError(Error):
    1:     pass
       
    1: def raise_conversion_error(function):
           """ Wrap any raised struct.errors in a ConversionError. """
       
    4:     @wraps(function)
           def result(self, value):
   28:         try:
   28:             return function(self, value)
    4:         except struct.error as e:
    4:             raise ConversionError(e.args[0])
    4:     return result
       
       
    2: class Packer:
    1:     """Pack various data representations into a buffer."""
       
    1:     def __init__(self):
    6:         self.reset()
       
    1:     def reset(self):
    6:         self.__buf = _StringIO()
       
    1:     def get_buffer(self):
    1:         return self.__buf.getvalue()
           # backwards compatibility
    1:     get_buf = get_buffer
       
    1:     @raise_conversion_error
           def pack_uint(self, x):
   21:         self.__buf.write(struct.pack('>L', x))
       
    1:     @raise_conversion_error
           def pack_int(self, x):
    3:         self.__buf.write(struct.pack('>l', x))
       
    1:     pack_enum = pack_int
       
    1:     def pack_bool(self, x):
    2:         if x: self.__buf.write('\0\0\0\1')
    1:         else: self.__buf.write('\0\0\0\0')
       
    1:     def pack_uhyper(self, x):
    2:         try:
    2:             self.pack_uint(x>>32 & 0xffffffffL)
    1:         except (TypeError, struct.error) as e:
    1:             raise ConversionError(e.args[0])
    1:         try:
    1:             self.pack_uint(x & 0xffffffffL)
>>>>>>         except (TypeError, struct.error) as e:
>>>>>>             raise ConversionError(e.args[0])
       
    1:     pack_hyper = pack_uhyper
       
    1:     @raise_conversion_error
           def pack_float(self, x):
    2:         self.__buf.write(struct.pack('>f', x))
       
    1:     @raise_conversion_error
           def pack_double(self, x):
    2:         self.__buf.write(struct.pack('>d', x))
       
    1:     def pack_fstring(self, n, s):
    5:         if n < 0:
>>>>>>             raise ValueError, 'fstring size must be nonnegative'
    5:         data = s[:n]
    5:         n = ((n+3)//4)*4
    5:         data = data + (n - len(data)) * '\0'
    5:         self.__buf.write(data)
       
    1:     pack_fopaque = pack_fstring
       
    1:     def pack_string(self, s):
    5:         n = len(s)
    5:         self.pack_uint(n)
    5:         self.pack_fstring(n, s)
       
    1:     pack_opaque = pack_string
    1:     pack_bytes = pack_string
       
    1:     def pack_list(self, list, pack_item):
    6:         for item in list:
    5:             self.pack_uint(1)
    5:             pack_item(item)
    1:         self.pack_uint(0)
       
    1:     def pack_farray(self, n, list, pack_item):
    1:         if len(list) != n:
>>>>>>             raise ValueError, 'wrong array size'
    5:         for item in list:
    4:             pack_item(item)
       
    1:     def pack_array(self, list, pack_item):
    1:         n = len(list)
    1:         self.pack_uint(n)
    1:         self.pack_farray(n, list, pack_item)
       
       
       
    2: class Unpacker:
    1:     """Unpacks various data representations from the given buffer."""
       
    1:     def __init__(self, data):
    1:         self.reset(data)
       
    1:     def reset(self, data):
    1:         self.__buf = data
    1:         self.__pos = 0
       
    1:     def get_position(self):
    2:         return self.__pos
       
    1:     def set_position(self, position):
    1:         self.__pos = position
       
    1:     def get_buffer(self):
>>>>>>         return self.__buf
       
    1:     def done(self):
    1:         if self.__pos < len(self.__buf):
>>>>>>             raise Error('unextracted data remains')
       
    1:     def unpack_uint(self):
   21:         i = self.__pos
   21:         self.__pos = j = i+4
   21:         data = self.__buf[i:j]
   21:         if len(data) < 4:
    1:             raise EOFError
   20:         x = struct.unpack('>L', data)[0]
   20:         try:
   20:             return int(x)
>>>>>>         except OverflowError:
>>>>>>             return x
       
    1:     def unpack_int(self):
    5:         i = self.__pos
    5:         self.__pos = j = i+4
    5:         data = self.__buf[i:j]
    5:         if len(data) < 4:
>>>>>>             raise EOFError
    5:         return struct.unpack('>l', data)[0]
       
    1:     unpack_enum = unpack_int
       
    1:     def unpack_bool(self):
    3:         return bool(self.unpack_int())
       
    1:     def unpack_uhyper(self):
    1:         hi = self.unpack_uint()
    1:         lo = self.unpack_uint()
    1:         return long(hi)<<32 | lo
       
    1:     def unpack_hyper(self):
>>>>>>         x = self.unpack_uhyper()
>>>>>>         if x >= 0x8000000000000000L:
>>>>>>             x = x - 0x10000000000000000L
>>>>>>         return x
       
    1:     def unpack_float(self):
    1:         i = self.__pos
    1:         self.__pos = j = i+4
    1:         data = self.__buf[i:j]
    1:         if len(data) < 4:
>>>>>>             raise EOFError
    1:         return struct.unpack('>f', data)[0]
       
    1:     def unpack_double(self):
    1:         i = self.__pos
    1:         self.__pos = j = i+8
    1:         data = self.__buf[i:j]
    1:         if len(data) < 8:
>>>>>>             raise EOFError
    1:         return struct.unpack('>d', data)[0]
       
    1:     def unpack_fstring(self, n):
    5:         if n < 0:
>>>>>>             raise ValueError, 'fstring size must be nonnegative'
    5:         i = self.__pos
    5:         j = i + (n+3)//4*4
    5:         if j > len(self.__buf):
>>>>>>             raise EOFError
    5:         self.__pos = j
    5:         return self.__buf[i:i+n]
       
    1:     unpack_fopaque = unpack_fstring
       
    1:     def unpack_string(self):
    5:         n = self.unpack_uint()
    5:         return self.unpack_fstring(n)
       
    1:     unpack_opaque = unpack_string
    1:     unpack_bytes = unpack_string
       
    1:     def unpack_list(self, unpack_item):
    1:         list = []
    1:         while 1:
    6:             x = self.unpack_uint()
    6:             if x == 0: break
    5:             if x != 1:
>>>>>>                 raise ConversionError, '0 or 1 expected, got %r' % (x,)
    5:             item = unpack_item()
    5:             list.append(item)
    1:         return list
       
    1:     def unpack_farray(self, n, unpack_item):
    1:         list = []
    5:         for i in range(n):
    4:             list.append(unpack_item())
    1:         return list
       
    1:     def unpack_array(self, unpack_item):
    1:         n = self.unpack_uint()
    1:         return self.unpack_farray(n, unpack_item)
