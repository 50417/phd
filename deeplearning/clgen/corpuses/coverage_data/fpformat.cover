       """General floating point formatting functions.
       
       Functions:
       fix(x, digits_behind)
       sci(x, digits_behind)
       
       Each takes a number or a string and a number of digits as arguments.
       
       Parameters:
       x:             number to be formatted; or a string resembling a number
       digits_behind: number of digits behind the decimal point
    1: """
    1: from warnings import warnpy3k
    1: warnpy3k("the fpformat module has been removed in Python 3.0", stacklevel=2)
    1: del warnpy3k
       
    1: import re
       
    1: __all__ = ["fix","sci","NotANumber"]
       
       # Compiled regular expression to "decode" a number
    1: decoder = re.compile(r'^([-+]?)0*(\d*)((?:\.\d*)?)(([eE][-+]?\d+)?)$')
       # \0 the whole thing
       # \1 leading sign or empty
       # \2 digits left of decimal point
       # \3 fraction (empty or begins with point)
       # \4 exponent part (empty or begins with 'e' or 'E')
       
    1: try:
    2:     class NotANumber(ValueError):
    1:         pass
>>>>>> except TypeError:
>>>>>>     NotANumber = 'fpformat.NotANumber'
       
    1: def extract(s):
           """Return (sign, intpart, fraction, expo) or raise an exception:
           sign is '+' or '-'
           intpart is 0 or more digits beginning with a nonzero
           fraction is 0 or more digits
           expo is an integer"""
  342:     res = decoder.match(s)
  342:     if res is None: raise NotANumber, s
  340:     sign, intpart, fraction, exppart = res.group(1,2,3,4)
  340:     if sign == '+': sign = ''
  340:     if fraction: fraction = fraction[1:]
  340:     if exppart: expo = int(exppart[1:])
  312:     else: expo = 0
  340:     return sign, intpart, fraction, expo
       
    1: def unexpo(intpart, fraction, expo):
           """Remove the exponent by changing intpart and fraction."""
  170:     if expo > 0: # Move the point left
>>>>>>         f = len(fraction)
>>>>>>         intpart, fraction = intpart + fraction[:expo], fraction[expo:]
>>>>>>         if expo > f:
>>>>>>             intpart = intpart + '0'*(expo-f)
  170:     elif expo < 0: # Move the point right
   14:         i = len(intpart)
   14:         intpart, fraction = intpart[:expo], intpart[expo:] + fraction
   14:         if expo < -i:
   14:             fraction = '0'*(-expo-i) + fraction
  170:     return intpart, fraction
       
    1: def roundfrac(intpart, fraction, digs):
           """Round or extend the fraction to size digs."""
  340:     f = len(fraction)
  340:     if f <= digs:
  199:         return intpart, fraction + '0'*(digs-f)
  141:     i = len(intpart)
  141:     if i+digs < 0:
>>>>>>         return '0'*-digs, ''
  141:     total = intpart + fraction
  141:     nextdigit = total[i+digs]
  141:     if nextdigit >= '5': # Hard case: increment last digit, may have carry!
>>>>>>         n = i + digs - 1
>>>>>>         while n >= 0:
>>>>>>             if total[n] != '9': break
>>>>>>             n = n-1
               else:
>>>>>>             total = '0' + total
>>>>>>             i = i+1
>>>>>>             n = 0
>>>>>>         total = total[:n] + chr(ord(total[n]) + 1) + '0'*(len(total)-n-1)
>>>>>>         intpart, fraction = total[:i], total[i:]
  141:     if digs >= 0:
  141:         return intpart, fraction[:digs]
           else:
>>>>>>         return intpart[:digs] + '0'*-digs, ''
       
    1: def fix(x, digs):
           """Format x as [-]ddd.ddd with 'digs' digits after the point
           and at least one digit before.
           If digs <= 0, the point is suppressed."""
  171:     if type(x) != type(''): x = repr(x)
  171:     try:
  171:         sign, intpart, fraction, expo = extract(x)
    1:     except NotANumber:
    1:         return x
  170:     intpart, fraction = unexpo(intpart, fraction, expo)
  170:     intpart, fraction = roundfrac(intpart, fraction, digs)
  170:     while intpart and intpart[0] == '0': intpart = intpart[1:]
  170:     if intpart == '': intpart = '0'
  170:     if digs > 0: return sign + intpart + '.' + fraction
   24:     else: return sign + intpart
       
    1: def sci(x, digs):
           """Format x as [-]d.dddE[+-]ddd with 'digs' digits after the point
           and exactly one digit before.
           If digs is <= 0, one digit is kept and the point is suppressed."""
  171:     if type(x) != type(''): x = repr(x)
  171:     sign, intpart, fraction, expo = extract(x)
  170:     if not intpart:
  182:         while fraction and fraction[0] == '0':
  112:             fraction = fraction[1:]
  112:             expo = expo - 1
   70:         if fraction:
   70:             intpart, fraction = fraction[0], fraction[1:]
   70:             expo = expo - 1
               else:
>>>>>>             intpart = '0'
           else:
  100:         expo = expo + len(intpart) - 1
  100:         intpart, fraction = intpart[0], intpart[1:] + fraction
  170:     digs = max(0, digs)
  170:     intpart, fraction = roundfrac(intpart, fraction, digs)
  170:     if len(intpart) > 1:
               intpart, fraction, expo = \
>>>>>>             intpart[0], intpart[1:] + fraction[:-1], \
>>>>>>             expo + len(intpart) - 1
  170:     s = sign + intpart
  170:     if digs > 0: s = s + '.' + fraction
  170:     e = repr(abs(expo))
  170:     e = '0'*(3-len(e)) + e
  170:     if expo < 0: e = '-' + e
   86:     else: e = '+' + e
  170:     return s + 'e' + e
       
    1: def test():
           """Interactive test run."""
>>>>>>     try:
>>>>>>         while 1:
>>>>>>             x, digs = input('Enter (x, digs): ')
>>>>>>             print x, fix(x, digs), sci(x, digs)
>>>>>>     except (EOFError, KeyboardInterrupt):
>>>>>>         pass
