    1: from DocXMLRPCServer import DocXMLRPCServer
    1: import httplib
    1: import sys
    1: from test import test_support
    1: threading = test_support.import_module('threading')
    1: import unittest
       
    1: def make_request_and_skipIf(condition, reason):
           # If we skip the test, we have to make a request because
           # the server created in setUp blocks expecting one to come in.
    2:     if not condition:
    4:         return lambda func: func
>>>>>>     def decorator(func):
>>>>>>         def make_request_and_skip(self):
>>>>>>             self.client.request("GET", "/")
>>>>>>             self.client.getresponse()
>>>>>>             raise unittest.SkipTest(reason)
>>>>>>         return make_request_and_skip
>>>>>>     return decorator
       
       
    1: def make_server():
    6:     serv = DocXMLRPCServer(("localhost", 0), logRequests=False)
       
    6:     try:
               # Add some documentation
    6:         serv.set_server_title("DocXMLRPCServer Test Documentation")
    6:         serv.set_server_name("DocXMLRPCServer Test Docs")
    6:         serv.set_server_documentation(
    6:             "This is an XML-RPC server's documentation, but the server "
                   "can be used by POSTing to /RPC2. Try self.add, too.")
       
               # Create and register classes and functions
   12:         class TestClass(object):
    6:             def test_method(self, arg):
                       """Test method's docs. This method truly does very little."""
>>>>>>                 self.arg = arg
       
    6:         serv.register_introspection_functions()
    6:         serv.register_instance(TestClass())
       
    6:         def add(x, y):
                   """Add two instances together. This follows PEP008, but has nothing
                   to do with RFC1952. Case should matter: pEp008 and rFC1952.  Things
                   that start with http and ftp should be auto-linked, too:
                   http://google.com.
                   """
>>>>>>             return x + y
       
    6:         serv.register_function(add)
    6:         serv.register_function(lambda x, y: x-y)
    6:         return serv
>>>>>>     except:
>>>>>>         serv.server_close()
>>>>>>         raise
       
    2: class DocXMLRPCHTTPGETServer(unittest.TestCase):
    1:     def setUp(self):
               # Enable server feedback
    6:         DocXMLRPCServer._send_traceback_header = True
       
    6:         self.serv = make_server()
    6:         self.thread = threading.Thread(target=self.serv.serve_forever)
    6:         self.thread.start()
       
    6:         PORT = self.serv.server_address[1]
    6:         self.client = httplib.HTTPConnection("localhost:%d" % PORT)
       
    1:     def tearDown(self):
    6:         self.client.close()
       
               # Disable server feedback
    6:         DocXMLRPCServer._send_traceback_header = False
    6:         self.serv.shutdown()
    6:         self.thread.join()
    6:         self.serv.server_close()
       
    1:     def test_valid_get_response(self):
    1:         self.client.request("GET", "/")
    1:         response = self.client.getresponse()
       
    1:         self.assertEqual(response.status, 200)
    1:         self.assertEqual(response.getheader("Content-type"), "text/html")
       
               # Server raises an exception if we don't start to read the data
    1:         response.read()
       
    1:     def test_invalid_get_response(self):
    1:         self.client.request("GET", "/spam")
    1:         response = self.client.getresponse()
       
    1:         self.assertEqual(response.status, 404)
    1:         self.assertEqual(response.getheader("Content-type"), "text/plain")
       
    1:         response.read()
       
    1:     def test_lambda(self):
               """Test that lambda functionality stays the same.  The output produced
               currently is, I suspect invalid because of the unencoded brackets in the
               HTML, "<lambda>".
       
               The subtraction lambda method is tested.
               """
    1:         self.client.request("GET", "/")
    1:         response = self.client.getresponse()
       
    1:         self.assertIn('<dl><dt><a name="-&lt;lambda&gt;"><strong>'
                             '&lt;lambda&gt;</strong></a>(x, y)</dt></dl>',
    1:                       response.read())
       
    1:     @make_request_and_skipIf(sys.flags.optimize >= 2,
    1:                      "Docstrings are omitted with -O2 and above")
           def test_autolinking(self):
               """Test that the server correctly automatically wraps references to
               PEPS and RFCs with links, and that it linkifies text starting with
               http or ftp protocol prefixes.
       
               The documentation for the "add" method contains the test material.
               """
    1:         self.client.request("GET", "/")
    1:         response = self.client.getresponse()
       
    1:         self.assertIn(
    1:             ('<dl><dt><a name="-add"><strong>add</strong></a>(x, y)</dt><dd>'
                    '<tt>Add&nbsp;two&nbsp;instances&nbsp;together.&nbsp;This&nbsp;'
                    'follows&nbsp;<a href="http://www.python.org/dev/peps/pep-0008/">'
                    'PEP008</a>,&nbsp;but&nbsp;has&nbsp;nothing<br>\nto&nbsp;do&nbsp;'
                    'with&nbsp;<a href="http://www.rfc-editor.org/rfc/rfc1952.txt">'
                    'RFC1952</a>.&nbsp;Case&nbsp;should&nbsp;matter:&nbsp;pEp008&nbsp;'
                    'and&nbsp;rFC1952.&nbsp;&nbsp;Things<br>\nthat&nbsp;start&nbsp;'
                    'with&nbsp;http&nbsp;and&nbsp;ftp&nbsp;should&nbsp;be&nbsp;'
                    'auto-linked,&nbsp;too:<br>\n<a href="http://google.com">'
    1:              'http://google.com</a>.</tt></dd></dl>'), response.read())
       
    1:     @make_request_and_skipIf(sys.flags.optimize >= 2,
    1:                      "Docstrings are omitted with -O2 and above")
           def test_system_methods(self):
               """Test the presence of three consecutive system.* methods.
       
               This also tests their use of parameter type recognition and the
               systems related to that process.
               """
    1:         self.client.request("GET", "/")
    1:         response = self.client.getresponse()
       
    1:         self.assertIn(
    1:             ('<dl><dt><a name="-system.listMethods"><strong>system.listMethods'
                    '</strong></a>()</dt><dd><tt><a href="#-system.listMethods">system'
                    '.listMethods</a>()&nbsp;=&gt;&nbsp;[\'add\',&nbsp;\'subtract\','
                    '&nbsp;\'multiple\']<br>\n&nbsp;<br>\nReturns&nbsp;a&nbsp;list'
                    '&nbsp;of&nbsp;the&nbsp;methods&nbsp;supported&nbsp;by&nbsp;the'
                    '&nbsp;server.</tt></dd></dl>\n <dl><dt><a name="-system.methodHelp">'
                    '<strong>system.methodHelp</strong></a>(method_name)</dt><dd><tt>'
                    '<a href="#-system.methodHelp">system.methodHelp</a>(\'add\')&nbsp;'
                    '=&gt;&nbsp;"Adds&nbsp;two&nbsp;integers&nbsp;together"<br>\n&nbsp;'
                    '<br>\nReturns&nbsp;a&nbsp;string&nbsp;containing&nbsp;documentation'
                    '&nbsp;for&nbsp;the&nbsp;specified&nbsp;method.</tt></dd></dl>\n '
                    '<dl><dt><a name="-system.methodSignature"><strong>system.'
                    'methodSignature</strong></a>(method_name)</dt><dd><tt><a href="#-'
                    'system.methodSignature">system.methodSignature</a>(\'add\')&nbsp;'
                    '=&gt;&nbsp;[double,&nbsp;int,&nbsp;int]<br>\n&nbsp;<br>\nReturns'
                    '&nbsp;a&nbsp;list&nbsp;describing&nbsp;the&nbsp;signature&nbsp;of'
                    '&nbsp;the&nbsp;method.&nbsp;In&nbsp;the<br>\nabove&nbsp;example,'
                    '&nbsp;the&nbsp;add&nbsp;method&nbsp;takes&nbsp;two&nbsp;integers'
                    '&nbsp;as&nbsp;arguments<br>\nand&nbsp;returns&nbsp;a&nbsp;double'
                    '&nbsp;result.<br>\n&nbsp;<br>\nThis&nbsp;server&nbsp;does&nbsp;'
                    'NOT&nbsp;support&nbsp;system.methodSignature.</tt></dd></dl>'),
    1:             response.read())
       
    1:     def test_autolink_dotted_methods(self):
               """Test that selfdot values are made strong automatically in the
               documentation."""
    1:         self.client.request("GET", "/")
    1:         response = self.client.getresponse()
       
    1:         self.assertIn("""Try&nbsp;self.<strong>add</strong>,&nbsp;too.""",
    1:                       response.read())
       
    1: def test_main():
    1:     test_support.run_unittest(DocXMLRPCHTTPGETServer)
       
    1: if __name__ == '__main__':
>>>>>>     test_main()
