    1: from __future__ import print_function
       
    1: import unittest
    1: from test import test_support as support
    1: import os
    1: import sys
       
       # Setup bsddb warnings
    1: try:
    1:     bsddb = support.import_module('bsddb', deprecated=True)
>>>>>> except unittest.SkipTest:
>>>>>>     pass
       
       
    2: class NoAll(RuntimeError):
    1:     pass
       
    2: class FailedImport(RuntimeError):
    1:     pass
       
       
    2: class AllTest(unittest.TestCase):
       
    1:     def check_all(self, modname):
  224:         names = {}
  224:         with support.check_warnings((".* (module|package)",
  224:                                      DeprecationWarning), quiet=True):
  224:             try:
  224:                 exec "import %s" % modname in names
    1:             except:
                       # Silent fail here seems the best route since some modules
                       # may not be available or not initialize properly in all
                       # environments.
    1:                 raise FailedImport(modname)
  223:         if not hasattr(sys.modules[modname], "__all__"):
   18:             raise NoAll(modname)
  205:         names = {}
  205:         try:
  205:             exec "from %s import *" % modname in names
>>>>>>         except Exception as e:
                   # Include the module name in the exception string
>>>>>>             self.fail("__all__ failure in {}: {}: {}".format(
>>>>>>                       modname, e.__class__.__name__, e))
  205:         if "__builtins__" in names:
  205:             del names["__builtins__"]
  205:         keys = set(names)
  205:         all = set(sys.modules[modname].__all__)
  205:         self.assertEqual(keys, all)
       
    1:     def walk_modules(self, basedir, modpath):
 4099:         for fn in sorted(os.listdir(basedir)):
 4056:             path = os.path.join(basedir, fn)
 4056:             if os.path.isdir(path):
   60:                 pkg_init = os.path.join(path, '__init__.py')
   60:                 if os.path.exists(pkg_init):
   42:                     yield pkg_init, modpath + fn
 1435:                     for p, m in self.walk_modules(path, modpath + fn + "."):
 1393:                         yield p, m
>>>>>>                 continue
 3996:             if not fn.endswith('.py') or fn == '__init__.py':
   42:                 continue
 1270:             yield path, modpath + fn[:-3]
       
    1:     def test_all(self):
               # Blacklisted modules and packages
    1:         blacklist = set([
                   # Will raise a SyntaxError when compiling the exec statement
    1:             '__future__',
               ])
       
    1:         if not sys.platform.startswith('java'):
                   # In case _socket fails to build, make this test fail more gracefully
                   # than an AttributeError somewhere deep in CGIHTTPServer.
    1:             import _socket
       
               # rlcompleter needs special consideration; it imports readline which
               # initializes GNU readline which calls setlocale(LC_CTYPE, "")... :-(
    1:         import locale
    1:         locale_tuple = locale.getlocale(locale.LC_CTYPE)
    1:         try:
    1:             import rlcompleter
>>>>>>         except ImportError:
>>>>>>             pass
               finally:
    1:             locale.setlocale(locale.LC_CTYPE, locale_tuple)
       
    1:         ignored = []
    1:         failed_imports = []
    1:         lib_dir = os.path.dirname(os.path.dirname(__file__))
 1313:         for path, modname in self.walk_modules(lib_dir, ""):
 1312:             m = modname
 1312:             blacklisted = False
 4017:             while m:
 2706:                 if m in blacklist:
    1:                     blacklisted = True
    1:                     break
 2705:                 m = m.rpartition('.')[0]
 1312:             if blacklisted:
    1:                 continue
 1311:             if support.verbose:
>>>>>>                 print(modname)
 1311:             try:
                       # This heuristic speeds up the process by removing, de facto,
                       # most test modules (and avoiding the auto-executing ones).
 1311:                 with open(path, "rb") as f:
 1311:                     if "__all__" not in f.read():
 1087:                         raise NoAll(modname)
  224:                     self.check_all(modname)
 1106:             except NoAll:
 1105:                 ignored.append(modname)
    1:             except FailedImport:
    1:                 failed_imports.append(modname)
       
    1:         if support.verbose:
>>>>>>             print('Following modules have no __all__ and have been ignored:',
>>>>>>                   ignored)
>>>>>>             print('Following modules failed to be imported:', failed_imports)
       
       
    1: def test_main():
    1:     support.run_unittest(AllTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
