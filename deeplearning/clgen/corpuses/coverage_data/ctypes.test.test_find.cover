    1: import unittest
    1: import os.path
    1: import sys
    1: from test import test_support
    1: from ctypes import *
    1: from ctypes.util import find_library
    1: from ctypes.test import is_resource_enabled
       
    1: if sys.platform == "win32":
>>>>>>     lib_gl = find_library("OpenGL32")
>>>>>>     lib_glu = find_library("Glu32")
>>>>>>     lib_gle = None
    1: elif sys.platform == "darwin":
    1:     lib_gl = lib_glu = find_library("OpenGL")
    1:     lib_gle = None
       else:
>>>>>>     lib_gl = find_library("GL")
>>>>>>     lib_glu = find_library("GLU")
>>>>>>     lib_gle = find_library("gle")
       
       ## print, for debugging
    1: if is_resource_enabled("printing"):
>>>>>>     if lib_gl or lib_glu or lib_gle:
>>>>>>         print "OpenGL libraries:"
>>>>>>         for item in (("GL", lib_gl),
>>>>>>                      ("GLU", lib_glu),
>>>>>>                      ("gle", lib_gle)):
>>>>>>             print "\t", item
       
       
       # On some systems, loading the OpenGL libraries needs the RTLD_GLOBAL mode.
    2: class Test_OpenGL_libs(unittest.TestCase):
    1:     def setUp(self):
    3:         self.gl = self.glu = self.gle = None
    3:         if lib_gl:
    3:             try:
    3:                 self.gl = CDLL(lib_gl, mode=RTLD_GLOBAL)
>>>>>>             except OSError:
>>>>>>                 pass
    3:         if lib_glu:
    3:             try:
    3:                 self.glu = CDLL(lib_glu, RTLD_GLOBAL)
>>>>>>             except OSError:
>>>>>>                 pass
    3:         if lib_gle:
>>>>>>             try:
>>>>>>                 self.gle = CDLL(lib_gle)
>>>>>>             except OSError:
>>>>>>                 pass
       
    1:     def tearDown(self):
    3:         self.gl = self.glu = self.gle = None
       
    1:     @unittest.skipUnless(lib_gl, 'lib_gl not available')
           def test_gl(self):
    1:         if self.gl:
    1:             self.gl.glClearIndex
       
    1:     @unittest.skipUnless(lib_glu, 'lib_glu not available')
           def test_glu(self):
    1:         if self.glu:
    1:             self.glu.gluBeginCurve
       
    1:     @unittest.skipUnless(lib_gle, 'lib_gle not available')
           def test_gle(self):
>>>>>>         if self.gle:
>>>>>>             self.gle.gleGetJoinStyle
       
    1:     def test_shell_injection(self):
    1:         result = find_library('; echo Hello shell > ' + test_support.TESTFN)
    1:         self.assertFalse(os.path.lexists(test_support.TESTFN))
    1:         self.assertIsNone(result)
       
    1: if __name__ == "__main__":
>>>>>>     unittest.main()
