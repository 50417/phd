       # Author: Paul Kippes <kippesp@gmail.com>
       
    1: import unittest
    1: import sqlite3 as sqlite
       
    2: class DumpTests(unittest.TestCase):
    1:     def setUp(self):
    2:         self.cx = sqlite.connect(":memory:")
    2:         self.cu = self.cx.cursor()
       
    1:     def tearDown(self):
    2:         self.cx.close()
       
    1:     def CheckTableDump(self):
               expected_sqls = [
    1:                 """CREATE TABLE "index"("index" blob);"""
                       ,
    1:                 """INSERT INTO "index" VALUES(X'01');"""
                       ,
    1:                 """CREATE TABLE "quoted""table"("quoted""field" text);"""
                       ,
    1:                 """INSERT INTO "quoted""table" VALUES('quoted''value');"""
                       ,
    1:                 "CREATE TABLE t1(id integer primary key, s1 text, " \
                       "t1_i1 integer not null, i2 integer, unique (s1), " \
                       "constraint t1_idx1 unique (i2));"
                       ,
    1:                 "INSERT INTO \"t1\" VALUES(1,'foo',10,20);"
                       ,
    1:                 "INSERT INTO \"t1\" VALUES(2,'foo2',30,30);"
                       ,
    1:                 u"INSERT INTO \"t1\" VALUES(3,'f\xc3\xb6',40,10);"
                       ,
    1:                 "CREATE TABLE t2(id integer, t2_i1 integer, " \
                       "t2_i2 integer, primary key (id)," \
                       "foreign key(t2_i1) references t1(t1_i1));"
                       ,
    1:                 "CREATE TRIGGER trigger_1 update of t1_i1 on t1 " \
                       "begin " \
                       "update t2 set t2_i1 = new.t1_i1 where t2_i1 = old.t1_i1; " \
                       "end;"
                       ,
    1:                 "CREATE VIEW v1 as select * from t1 left join t2 " \
                       "using (id);"
                       ]
   12:         [self.cu.execute(s) for s in expected_sqls]
    1:         i = self.cx.iterdump()
   14:         actual_sqls = [s for s in i]
    1:         expected_sqls = ['BEGIN TRANSACTION;'] + expected_sqls + \
    1:             ['COMMIT;']
    1:         [self.assertEqual(expected_sqls[i], actual_sqls[i])
   14:             for i in xrange(len(expected_sqls))]
       
    1:     def CheckUnorderableRow(self):
               # iterdump() should be able to cope with unorderable row types (issue #15545)
    2:         class UnorderableRow:
    1:             def __init__(self, cursor, row):
    4:                 self.row = row
    1:             def __getitem__(self, index):
   10:                 return self.row[index]
    1:         self.cx.row_factory = UnorderableRow
    1:         CREATE_ALPHA = """CREATE TABLE "alpha" ("one");"""
    1:         CREATE_BETA = """CREATE TABLE "beta" ("two");"""
               expected = [
    1:             "BEGIN TRANSACTION;",
    1:             CREATE_ALPHA,
    1:             CREATE_BETA,
    1:             "COMMIT;"
                   ]
    1:         self.cu.execute(CREATE_BETA)
    1:         self.cu.execute(CREATE_ALPHA)
    1:         got = list(self.cx.iterdump())
    1:         self.assertEqual(expected, got)
       
    1: def suite():
    1:     return unittest.TestSuite(unittest.makeSuite(DumpTests, "Check"))
       
    1: def test():
>>>>>>     runner = unittest.TextTestRunner()
>>>>>>     runner.run(suite())
       
    1: if __name__ == "__main__":
>>>>>>     test()
