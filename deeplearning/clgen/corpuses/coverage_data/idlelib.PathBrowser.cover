    1: import os
    1: import sys
    1: import imp
       
    1: from idlelib.TreeWidget import TreeItem
    1: from idlelib.ClassBrowser import ClassBrowser, ModuleBrowserTreeItem
    1: from idlelib.PyShell import PyShellFileList
       
       
    2: class PathBrowser(ClassBrowser):
       
    1:     def __init__(self, flist, _htest=False):
               """
               _htest - bool, change box location when running htest
               """
>>>>>>         self._htest = _htest
>>>>>>         self.init(flist)
       
    1:     def settitle(self):
               "Set window titles."
>>>>>>         self.top.wm_title("Path Browser")
>>>>>>         self.top.wm_iconname("Path Browser")
       
    1:     def rootnode(self):
>>>>>>         return PathBrowserTreeItem()
       
    2: class PathBrowserTreeItem(TreeItem):
       
    1:     def GetText(self):
    1:         return "sys.path"
       
    1:     def GetSubList(self):
    1:         sublist = []
   10:         for dir in sys.path:
    9:             item = DirBrowserTreeItem(dir)
    9:             sublist.append(item)
    1:         return sublist
       
    2: class DirBrowserTreeItem(TreeItem):
       
    1:     def __init__(self, dir, packages=[]):
   10:         self.dir = dir
   10:         self.packages = packages
       
    1:     def GetText(self):
    1:         if not self.packages:
    1:             return self.dir
               else:
>>>>>>             return self.packages[-1] + ": package"
       
    1:     def GetSubList(self):
    1:         try:
    1:             names = os.listdir(self.dir or os.curdir)
>>>>>>         except os.error:
>>>>>>             return []
    1:         packages = []
    1:         for name in names:
>>>>>>             file = os.path.join(self.dir, name)
>>>>>>             if self.ispackagedir(file):
>>>>>>                 nn = os.path.normcase(name)
>>>>>>                 packages.append((nn, name, file))
    1:         packages.sort()
    1:         sublist = []
    1:         for nn, name, file in packages:
>>>>>>             item = DirBrowserTreeItem(file, self.packages + [name])
>>>>>>             sublist.append(item)
    1:         for nn, name in self.listmodules(names):
>>>>>>             item = ModuleBrowserTreeItem(os.path.join(self.dir, name))
>>>>>>             sublist.append(item)
    1:         return sublist
       
    1:     def ispackagedir(self, file):
    2:         if not os.path.isdir(file):
>>>>>>             return False
    2:         init = os.path.join(file, "__init__.py")
    2:         return os.path.exists(init)
       
    1:     def listmodules(self, allnames):
    1:         modules = {}
    1:         suffixes = imp.get_suffixes()
    1:         sorted = []
    5:         for suff, mode, flag in suffixes:
    4:             i = -len(suff)
    4:             for name in allnames[:]:
>>>>>>                 normed_name = os.path.normcase(name)
>>>>>>                 if normed_name[i:] == suff:
>>>>>>                     mod_name = name[:i]
>>>>>>                     if mod_name not in modules:
>>>>>>                         modules[mod_name] = None
>>>>>>                         sorted.append((normed_name, name))
>>>>>>                         allnames.remove(name)
    1:         sorted.sort()
    1:         return sorted
       
    1: def _path_browser(parent):  # htest #
>>>>>>     flist = PyShellFileList(parent)
>>>>>>     PathBrowser(flist, _htest=True)
>>>>>>     parent.mainloop()
       
    1: if __name__ == "__main__":
>>>>>>     from unittest import main
>>>>>>     main('idlelib.idle_test.test_pathbrowser', verbosity=2, exit=False)
       
>>>>>>     from idlelib.idle_test.htest import run
>>>>>>     run(_path_browser)
