       """ Test script for the Unicode implementation.
       
       Written by Bill Tutt.
       Modified for Python 2.0 by Fredrik Lundh (fredrik@pythonware.com)
       
       (c) Copyright CNRI, All Rights Reserved. NO WARRANTY.
       
    1: """#"
       
    1: import unittest
    1: import sys
       
    1: from test import test_support
       
    1: try:
    1:     from _testcapi import INT_MAX, PY_SSIZE_T_MAX, UINT_MAX
>>>>>> except ImportError:
>>>>>>     INT_MAX = PY_SSIZE_T_MAX = UINT_MAX = 2**64 - 1
       
    2: class UnicodeNamesTest(unittest.TestCase):
       
    1:     def checkletter(self, name, code):
               # Helper that put all \N escapes inside eval'd raw strings,
               # to make sure this script runs even if the compiler
               # chokes on \N escapes
   49:         res = eval(ur'u"\N{%s}"' % name)
   49:         self.assertEqual(res, code)
   49:         return res
       
    1:     def test_general(self):
               # General and case insensitivity test:
               chars = [
    1:             "LATIN CAPITAL LETTER T",
    1:             "LATIN SMALL LETTER H",
    1:             "LATIN SMALL LETTER E",
    1:             "SPACE",
    1:             "LATIN SMALL LETTER R",
    1:             "LATIN CAPITAL LETTER E",
    1:             "LATIN SMALL LETTER D",
    1:             "SPACE",
    1:             "LATIN SMALL LETTER f",
    1:             "LATIN CAPITAL LeTtEr o",
    1:             "LATIN SMaLl LETTER x",
    1:             "SPACE",
    1:             "LATIN SMALL LETTER A",
    1:             "LATIN SMALL LETTER T",
    1:             "LATIN SMALL LETTER E",
    1:             "SPACE",
    1:             "LATIN SMALL LETTER T",
    1:             "LATIN SMALL LETTER H",
    1:             "LATIN SMALL LETTER E",
    1:             "SpAcE",
    1:             "LATIN SMALL LETTER S",
    1:             "LATIN SMALL LETTER H",
    1:             "LATIN small LETTER e",
    1:             "LATIN small LETTER e",
    1:             "LATIN SMALL LETTER P",
    1:             "FULL STOP"
               ]
    1:         string = u"The rEd fOx ate the sheep."
       
    1:         self.assertEqual(
   27:             u"".join([self.checkletter(*args) for args in zip(chars, string)]),
    1:             string
               )
       
    1:     def test_ascii_letters(self):
    1:         import unicodedata
       
   26:         for char in "".join(map(chr, xrange(ord("a"), ord("z")))):
   25:             name = "LATIN SMALL LETTER %s" % char.upper()
   25:             code = unicodedata.lookup(name)
   25:             self.assertEqual(unicodedata.name(code), name)
       
    1:     def test_hangul_syllables(self):
    1:         self.checkletter("HANGUL SYLLABLE GA", u"\uac00")
    1:         self.checkletter("HANGUL SYLLABLE GGWEOSS", u"\uafe8")
    1:         self.checkletter("HANGUL SYLLABLE DOLS", u"\ub3d0")
    1:         self.checkletter("HANGUL SYLLABLE RYAN", u"\ub7b8")
    1:         self.checkletter("HANGUL SYLLABLE MWIK", u"\ubba0")
    1:         self.checkletter("HANGUL SYLLABLE BBWAEM", u"\ubf88")
    1:         self.checkletter("HANGUL SYLLABLE SSEOL", u"\uc370")
    1:         self.checkletter("HANGUL SYLLABLE YI", u"\uc758")
    1:         self.checkletter("HANGUL SYLLABLE JJYOSS", u"\ucb40")
    1:         self.checkletter("HANGUL SYLLABLE KYEOLS", u"\ucf28")
    1:         self.checkletter("HANGUL SYLLABLE PAN", u"\ud310")
    1:         self.checkletter("HANGUL SYLLABLE HWEOK", u"\ud6f8")
    1:         self.checkletter("HANGUL SYLLABLE HIH", u"\ud7a3")
       
    1:         import unicodedata
    1:         self.assertRaises(ValueError, unicodedata.name, u"\ud7a4")
       
    1:     def test_cjk_unified_ideographs(self):
    1:         self.checkletter("CJK UNIFIED IDEOGRAPH-3400", u"\u3400")
    1:         self.checkletter("CJK UNIFIED IDEOGRAPH-4DB5", u"\u4db5")
    1:         self.checkletter("CJK UNIFIED IDEOGRAPH-4E00", u"\u4e00")
    1:         self.checkletter("CJK UNIFIED IDEOGRAPH-9FA5", u"\u9fa5")
    1:         self.checkletter("CJK UNIFIED IDEOGRAPH-20000", u"\U00020000")
    1:         self.checkletter("CJK UNIFIED IDEOGRAPH-2A6D6", u"\U0002a6d6")
       
    1:     def test_bmp_characters(self):
    1:         import unicodedata
    1:         count = 0
65537:         for code in xrange(0x10000):
65536:             char = unichr(code)
65536:             name = unicodedata.name(char, None)
65536:             if name is not None:
54299:                 self.assertEqual(unicodedata.lookup(name), char)
54299:                 count += 1
       
    1:     def test_misc_symbols(self):
    1:         self.checkletter("PILCROW SIGN", u"\u00b6")
    1:         self.checkletter("REPLACEMENT CHARACTER", u"\uFFFD")
    1:         self.checkletter("HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK", u"\uFF9F")
    1:         self.checkletter("FULLWIDTH LATIN SMALL LETTER A", u"\uFF41")
       
    1:     def test_errors(self):
    1:         import unicodedata
    1:         self.assertRaises(TypeError, unicodedata.name)
    1:         self.assertRaises(TypeError, unicodedata.name, u'xx')
    1:         self.assertRaises(TypeError, unicodedata.lookup)
    1:         self.assertRaises(KeyError, unicodedata.lookup, u'unknown')
       
    1:     def test_strict_eror_handling(self):
               # bogus character name
    1:         self.assertRaises(
    1:             UnicodeError,
    1:             unicode, "\\N{blah}", 'unicode-escape', 'strict'
               )
               # long bogus character name
    1:         self.assertRaises(
    1:             UnicodeError,
    1:             unicode, "\\N{%s}" % ("x" * 100000), 'unicode-escape', 'strict'
               )
               # missing closing brace
    1:         self.assertRaises(
    1:             UnicodeError,
    1:             unicode, "\\N{SPACE", 'unicode-escape', 'strict'
               )
               # missing opening brace
    1:         self.assertRaises(
    1:             UnicodeError,
    1:             unicode, "\\NSPACE", 'unicode-escape', 'strict'
               )
       
    1:     @test_support.cpython_only
    1:     @unittest.skipUnless(INT_MAX < PY_SSIZE_T_MAX, "needs UINT_MAX < SIZE_MAX")
    1:     @unittest.skipUnless(UINT_MAX < sys.maxint, "needs UINT_MAX < sys.maxint")
    1:     @test_support.bigmemtest(minsize=UINT_MAX + 1,
    1:                              memuse=2 + 4 // len(u'\U00010000'))
           def test_issue16335(self, size):
    1:         func = self.test_issue16335
    1:         if size < func.minsize:
    1:             raise unittest.SkipTest("not enough memory: %.1fG minimum needed" %
    1:                     (func.minsize * func.memuse / float(1024**3),))
               # very very long bogus character name
>>>>>>         x = b'\\N{SPACE' + b'x' * int(UINT_MAX + 1) + b'}'
>>>>>>         self.assertEqual(len(x), len(b'\\N{SPACE}') + (UINT_MAX + 1))
>>>>>>         self.assertRaisesRegexp(UnicodeError,
>>>>>>             'unknown Unicode character name',
>>>>>>             x.decode, 'unicode-escape'
               )
       
       
    1: def test_main():
    1:     test_support.run_unittest(UnicodeNamesTest)
       
    1: if __name__ == "__main__":
>>>>>>     test_main()
