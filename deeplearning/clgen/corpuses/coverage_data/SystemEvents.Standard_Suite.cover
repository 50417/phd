       """Suite Standard Suite: Common classes and commands for most applications.
       Level 1, version 1
       
       Generated from /System/Library/CoreServices/System Events.app
       AETE/AEUT resource version 1/0, language 0, script 0
    1: """
       
    1: import aetools
    1: import MacOS
       
    1: _code = '????'
       
    2: class Standard_Suite_Events:
       
    1:     _argmap_close = {
    1:         'saving_in' : 'kfil',
    1:         'saving' : 'savo',
           }
       
    1:     def close(self, _object, _attributes={}, **_arguments):
               """close: Close an object.
               Required argument: the object for the command
               Keyword argument saving_in: The file in which to save the object.
               Keyword argument saving: Specifies whether changes should be saved before closing.
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'clos'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_close)
>>>>>>         _arguments['----'] = _object
       
>>>>>>         aetools.enumsubst(_arguments, 'savo', _Enum_savo)
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_count = {
    1:         'each' : 'kocl',
           }
       
    1:     def count(self, _object, _attributes={}, **_arguments):
               """count: Return the number of elements of a particular class within an object.
               Required argument: the object for the command
               Keyword argument each: The class of objects to be counted.
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: the reply for the command
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'cnte'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_count)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def delete(self, _object, _attributes={}, **_arguments):
               """delete: Delete an object.
               Required argument: the object for the command
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'delo'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_duplicate = {
    1:         'to' : 'insh',
    1:         'with_properties' : 'prdt',
           }
       
    1:     def duplicate(self, _object, _attributes={}, **_arguments):
               """duplicate: Copy object(s) and put the copies at a new location.
               Required argument: the object for the command
               Keyword argument to: The location for the new object(s).
               Keyword argument with_properties: Properties to be set in the new duplicated object(s).
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'clon'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_duplicate)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def exists(self, _object, _attributes={}, **_arguments):
               """exists: Verify if an object exists.
               Required argument: the object for the command
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: the reply for the command
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'doex'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def get(self, _object, _attributes={}, **_arguments):
               """get: Get the data for an object.
               Required argument: the object for the command
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: the reply for the command
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'getd'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_make = {
    1:         'at' : 'insh',
    1:         'new' : 'kocl',
    1:         'with_data' : 'data',
    1:         'with_properties' : 'prdt',
           }
       
    1:     def make(self, _no_object=None, _attributes={}, **_arguments):
               """make: Make a new object.
               Keyword argument at: The location at which to insert the object.
               Keyword argument new: The class of the new object.
               Keyword argument with_data: The initial data for the object.
               Keyword argument with_properties: The initial values for properties of the object.
               Keyword argument _attributes: AppleEvent attribute dictionary
               Returns: the reply for the command
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'crel'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_make)
>>>>>>         if _no_object is not None: raise TypeError, 'No direct arg expected'
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_move = {
    1:         'to' : 'insh',
           }
       
    1:     def move(self, _object, _attributes={}, **_arguments):
               """move: Move object(s) to a new location.
               Required argument: the object for the command
               Keyword argument to: The new location for the object(s).
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'move'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_move)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def open(self, _object=None, _attributes={}, **_arguments):
               """open: Open an object.
               Required argument: list of objects
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'aevt'
>>>>>>         _subcode = 'odoc'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     def print_(self, _object=None, _attributes={}, **_arguments):
               """print: Print an object.
               Required argument: list of objects
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'aevt'
>>>>>>         _subcode = 'pdoc'
       
>>>>>>         if _arguments: raise TypeError, 'No optional args expected'
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_quit = {
    1:         'saving' : 'savo',
           }
       
    1:     def quit(self, _object, _attributes={}, **_arguments):
               """quit: Quit an application.
               Required argument: the object for the command
               Keyword argument saving: Specifies whether changes should be saved before quitting.
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'aevt'
>>>>>>         _subcode = 'quit'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_quit)
>>>>>>         _arguments['----'] = _object
       
>>>>>>         aetools.enumsubst(_arguments, 'savo', _Enum_savo)
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_save = {
    1:         'in_' : 'kfil',
    1:         'as' : 'fltp',
           }
       
    1:     def save(self, _object, _attributes={}, **_arguments):
               """save: Save an object.
               Required argument: the object for the command
               Keyword argument in_: The file in which to save the object.
               Keyword argument as: The file type in which to save the data.
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'save'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_save)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
    1:     _argmap_set = {
    1:         'to' : 'data',
           }
       
    1:     def set(self, _object, _attributes={}, **_arguments):
               """set: Set an object's data.
               Required argument: the object for the command
               Keyword argument to: The new value.
               Keyword argument _attributes: AppleEvent attribute dictionary
               """
>>>>>>         _code = 'core'
>>>>>>         _subcode = 'setd'
       
>>>>>>         aetools.keysubst(_arguments, self._argmap_set)
>>>>>>         _arguments['----'] = _object
       
       
>>>>>>         _reply, _arguments, _attributes = self.send(_code, _subcode,
>>>>>>                 _arguments, _attributes)
>>>>>>         if _arguments.get('errn', 0):
>>>>>>             raise aetools.Error, aetools.decodeerror(_arguments)
               # XXXX Optionally decode result
>>>>>>         if _arguments.has_key('----'):
>>>>>>             return _arguments['----']
       
       
    2: class application(aetools.ComponentItem):
    1:     """application - An application's top level scripting object. """
    1:     want = 'capp'
    2: class _Prop__3c_Inheritance_3e_(aetools.NProperty):
    1:     """<Inheritance> - All of the properties of the superclass. """
    1:     which = 'c@#^'
    1:     want = 'cobj'
    1: _3c_Inheritance_3e_ = _Prop__3c_Inheritance_3e_()
    2: class _Prop_frontmost(aetools.NProperty):
    1:     """frontmost - Is this the frontmost (active) application? """
    1:     which = 'pisf'
    1:     want = 'bool'
    1: frontmost = _Prop_frontmost()
    2: class _Prop_name(aetools.NProperty):
    1:     """name - The name of the application. """
    1:     which = 'pnam'
    1:     want = 'utxt'
    1: name = _Prop_name()
    2: class _Prop_version(aetools.NProperty):
    1:     """version - The version of the application. """
    1:     which = 'vers'
    1:     want = 'utxt'
    1: version = _Prop_version()
       #        element 'cwin' as ['name', 'indx', 'rele', 'rang', 'test', 'ID  ']
       #        element 'docu' as ['name', 'indx', 'rele', 'rang', 'test']
       
    1: applications = application
       
    2: class item(aetools.ComponentItem):
    1:     """item - A scriptable object. """
    1:     want = 'cobj'
    2: class _Prop_class_(aetools.NProperty):
    1:     """class - The class of the object. """
    1:     which = 'pcls'
    1:     want = 'type'
    2: class _Prop_properties(aetools.NProperty):
    1:     """properties - All of the object's properties. """
    1:     which = 'pALL'
    1:     want = 'reco'
       
    1: items = item
       
    2: class color(aetools.ComponentItem):
    1:     """color - A color. """
    1:     want = 'colr'
       
    1: colors = color
       
    2: class window(aetools.ComponentItem):
    1:     """window - A window. """
    1:     want = 'cwin'
    2: class _Prop_bounds(aetools.NProperty):
    1:     """bounds - The bounding rectangle of the window. """
    1:     which = 'pbnd'
    1:     want = 'qdrt'
    2: class _Prop_closeable(aetools.NProperty):
    1:     """closeable - Whether the window has a close box. """
    1:     which = 'hclb'
    1:     want = 'bool'
    2: class _Prop_document(aetools.NProperty):
    1:     """document - The document whose contents are being displayed in the window. """
    1:     which = 'docu'
    1:     want = 'docu'
    2: class _Prop_floating(aetools.NProperty):
    1:     """floating - Whether the window floats. """
    1:     which = 'isfl'
    1:     want = 'bool'
    2: class _Prop_id(aetools.NProperty):
    1:     """id - The unique identifier of the window. """
    1:     which = 'ID  '
    1:     want = 'long'
    2: class _Prop_index(aetools.NProperty):
    1:     """index - The index of the window in the back-to-front window ordering. """
    1:     which = 'pidx'
    1:     want = 'long'
    2: class _Prop_miniaturizable(aetools.NProperty):
    1:     """miniaturizable - Whether the window can be miniaturized. """
    1:     which = 'ismn'
    1:     want = 'bool'
    2: class _Prop_miniaturized(aetools.NProperty):
    1:     """miniaturized - Whether the window is currently miniaturized. """
    1:     which = 'pmnd'
    1:     want = 'bool'
    2: class _Prop_modal(aetools.NProperty):
    1:     """modal - Whether the window is the application's current modal window. """
    1:     which = 'pmod'
    1:     want = 'bool'
    2: class _Prop_resizable(aetools.NProperty):
    1:     """resizable - Whether the window can be resized. """
    1:     which = 'prsz'
    1:     want = 'bool'
    2: class _Prop_titled(aetools.NProperty):
    1:     """titled - Whether the window has a title bar. """
    1:     which = 'ptit'
    1:     want = 'bool'
    2: class _Prop_visible(aetools.NProperty):
    1:     """visible - Whether the window is currently visible. """
    1:     which = 'pvis'
    1:     want = 'bool'
    2: class _Prop_zoomable(aetools.NProperty):
    1:     """zoomable - Whether the window can be zoomed. """
    1:     which = 'iszm'
    1:     want = 'bool'
    2: class _Prop_zoomed(aetools.NProperty):
    1:     """zoomed - Whether the window is currently zoomed. """
    1:     which = 'pzum'
    1:     want = 'bool'
       
    1: windows = window
       
    2: class document(aetools.ComponentItem):
    1:     """document - A document. """
    1:     want = 'docu'
    2: class _Prop_modified(aetools.NProperty):
    1:     """modified - Has the document been modified since the last save? """
    1:     which = 'imod'
    1:     want = 'bool'
    2: class _Prop_path(aetools.NProperty):
    1:     """path - The document's path. """
    1:     which = 'ppth'
    1:     want = 'utxt'
       
    1: documents = document
    1: application._superclassnames = ['item']
    1: application._privpropdict = {
    1:     '_3c_Inheritance_3e_' : _Prop__3c_Inheritance_3e_,
    1:     'frontmost' : _Prop_frontmost,
    1:     'name' : _Prop_name,
    1:     'version' : _Prop_version,
       }
    1: application._privelemdict = {
    1:     'document' : document,
    1:     'window' : window,
       }
    1: item._superclassnames = []
    1: item._privpropdict = {
    1:     'class_' : _Prop_class_,
    1:     'properties' : _Prop_properties,
       }
    1: item._privelemdict = {
       }
    1: color._superclassnames = ['item']
    1: color._privpropdict = {
    1:     '_3c_Inheritance_3e_' : _Prop__3c_Inheritance_3e_,
       }
    1: color._privelemdict = {
       }
    1: window._superclassnames = ['item']
    1: window._privpropdict = {
    1:     '_3c_Inheritance_3e_' : _Prop__3c_Inheritance_3e_,
    1:     'bounds' : _Prop_bounds,
    1:     'closeable' : _Prop_closeable,
    1:     'document' : _Prop_document,
    1:     'floating' : _Prop_floating,
    1:     'id' : _Prop_id,
    1:     'index' : _Prop_index,
    1:     'miniaturizable' : _Prop_miniaturizable,
    1:     'miniaturized' : _Prop_miniaturized,
    1:     'modal' : _Prop_modal,
    1:     'name' : _Prop_name,
    1:     'resizable' : _Prop_resizable,
    1:     'titled' : _Prop_titled,
    1:     'visible' : _Prop_visible,
    1:     'zoomable' : _Prop_zoomable,
    1:     'zoomed' : _Prop_zoomed,
       }
    1: window._privelemdict = {
       }
    1: document._superclassnames = ['item']
    1: document._privpropdict = {
    1:     '_3c_Inheritance_3e_' : _Prop__3c_Inheritance_3e_,
    1:     'modified' : _Prop_modified,
    1:     'name' : _Prop_name,
    1:     'path' : _Prop_path,
       }
    1: document._privelemdict = {
       }
    2: class _3c_(aetools.NComparison):
    1:     """< - Less than """
    2: class _3d_(aetools.NComparison):
    1:     """= - Equal """
    2: class _3e_(aetools.NComparison):
    1:     """> - Greater than """
    2: class contains(aetools.NComparison):
    1:     """contains - Contains """
    2: class ends_with(aetools.NComparison):
    1:     """ends with - Ends with """
    2: class starts_with(aetools.NComparison):
    1:     """starts with - Starts with """
    2: class _b2_(aetools.NComparison):
    1:     """\xb2 - Less than or equal to """
    2: class _b3_(aetools.NComparison):
    1:     """\xb3 - Greater than or equal to """
    1: _Enum_savo = {
    1:     'ask' : 'ask ',     # Ask the user whether or not to save the file.
    1:     'yes' : 'yes ',     # Save the file.
    1:     'no' : 'no  ',      # Do not save the file.
       }
       
       
       #
       # Indices of types declared in this module
       #
    1: _classdeclarations = {
    1:     'capp' : application,
    1:     'cobj' : item,
    1:     'colr' : color,
    1:     'cwin' : window,
    1:     'docu' : document,
       }
       
    1: _propdeclarations = {
    1:     'ID  ' : _Prop_id,
    1:     'c@#^' : _Prop__3c_Inheritance_3e_,
    1:     'docu' : _Prop_document,
    1:     'hclb' : _Prop_closeable,
    1:     'imod' : _Prop_modified,
    1:     'isfl' : _Prop_floating,
    1:     'ismn' : _Prop_miniaturizable,
    1:     'iszm' : _Prop_zoomable,
    1:     'pALL' : _Prop_properties,
    1:     'pbnd' : _Prop_bounds,
    1:     'pcls' : _Prop_class_,
    1:     'pidx' : _Prop_index,
    1:     'pisf' : _Prop_frontmost,
    1:     'pmnd' : _Prop_miniaturized,
    1:     'pmod' : _Prop_modal,
    1:     'pnam' : _Prop_name,
    1:     'ppth' : _Prop_path,
    1:     'prsz' : _Prop_resizable,
    1:     'ptit' : _Prop_titled,
    1:     'pvis' : _Prop_visible,
    1:     'pzum' : _Prop_zoomed,
    1:     'vers' : _Prop_version,
       }
       
    1: _compdeclarations = {
    1:     '<   ' : _3c_,
    1:     '<=  ' : _b2_,
    1:     '=   ' : _3d_,
    1:     '>   ' : _3e_,
    1:     '>=  ' : _b3_,
    1:     'bgwt' : starts_with,
    1:     'cont' : contains,
    1:     'ends' : ends_with,
       }
       
    1: _enumdeclarations = {
    1:     'savo' : _Enum_savo,
       }
