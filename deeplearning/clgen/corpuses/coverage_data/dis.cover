       """Disassembler of Python byte code into mnemonics."""
       
>>>>>> import sys
>>>>>> import types
       
>>>>>> from opcode import *
>>>>>> from opcode import __all__ as _opcodes_all
       
>>>>>> __all__ = ["dis", "disassemble", "distb", "disco",
>>>>>>            "findlinestarts", "findlabels"] + _opcodes_all
>>>>>> del _opcodes_all
       
>>>>>> _have_code = (types.MethodType, types.FunctionType, types.CodeType,
>>>>>>               types.ClassType, type)
       
>>>>>> def dis(x=None):
           """Disassemble classes, methods, functions, or code.
       
           With no argument, disassemble the last traceback.
       
           """
  820:     if x is None:
>>>>>>         distb()
>>>>>>         return
  820:     if isinstance(x, types.InstanceType):
>>>>>>         x = x.__class__
  820:     if hasattr(x, 'im_func'):
>>>>>>         x = x.im_func
  820:     if hasattr(x, 'func_code'):
  781:         x = x.func_code
  820:     if hasattr(x, '__dict__'):
>>>>>>         items = x.__dict__.items()
>>>>>>         items.sort()
>>>>>>         for name, x1 in items:
>>>>>>             if isinstance(x1, _have_code):
>>>>>>                 print "Disassembly of %s:" % name
>>>>>>                 try:
>>>>>>                     dis(x1)
>>>>>>                 except TypeError, msg:
>>>>>>                     print "Sorry:", msg
>>>>>>                 print
  820:     elif hasattr(x, 'co_code'):
  820:         disassemble(x)
>>>>>>     elif isinstance(x, str):
>>>>>>         disassemble_string(x)
           else:
>>>>>>         raise TypeError, \
>>>>>>               "don't know how to disassemble %s objects" % \
>>>>>>               type(x).__name__
       
>>>>>> def distb(tb=None):
           """Disassemble a traceback (default: last traceback)."""
>>>>>>     if tb is None:
>>>>>>         try:
>>>>>>             tb = sys.last_traceback
>>>>>>         except AttributeError:
>>>>>>             raise RuntimeError, "no last traceback to disassemble"
>>>>>>         while tb.tb_next: tb = tb.tb_next
>>>>>>     disassemble(tb.tb_frame.f_code, tb.tb_lasti)
       
>>>>>> def disassemble(co, lasti=-1):
           """Disassemble a code object."""
  820:     code = co.co_code
  820:     labels = findlabels(code)
  820:     linestarts = dict(findlinestarts(co))
  820:     n = len(code)
  820:     i = 0
  820:     extended_arg = 0
  820:     free = None
 4182:     while i < n:
 3362:         c = code[i]
 3362:         op = ord(c)
 3362:         if i in linestarts:
  837:             if i > 0:
   17:                 print
  837:             print "%3d" % linestarts[i],
               else:
 2525:             print '   ',
       
 3362:         if i == lasti: print '-->',
 3362:         else: print '   ',
 3362:         if i in labels: print '>>',
 3345:         else: print '  ',
 3362:         print repr(i).rjust(4),
 3362:         print opname[op].ljust(20),
 3362:         i = i+1
 3362:         if op >= HAVE_ARGUMENT:
 1725:             oparg = ord(code[i]) + ord(code[i+1])*256 + extended_arg
 1725:             extended_arg = 0
 1725:             i = i+2
 1725:             if op == EXTENDED_ARG:
>>>>>>                 extended_arg = oparg*65536L
 1725:             print repr(oparg).rjust(5),
 1725:             if op in hasconst:
  867:                 print '(' + repr(co.co_consts[oparg]) + ')',
  858:             elif op in hasname:
  812:                 print '(' + co.co_names[oparg] + ')',
   46:             elif op in hasjrel:
    8:                 print '(to ' + repr(i + oparg) + ')',
   38:             elif op in haslocal:
   16:                 print '(' + co.co_varnames[oparg] + ')',
   22:             elif op in hascompare:
    5:                 print '(' + cmp_op[oparg] + ')',
   17:             elif op in hasfree:
>>>>>>                 if free is None:
>>>>>>                     free = co.co_cellvars + co.co_freevars
>>>>>>                 print '(' + free[oparg] + ')',
 3362:         print
       
>>>>>> def disassemble_string(code, lasti=-1, varnames=None, names=None,
>>>>>>                        constants=None):
>>>>>>     labels = findlabels(code)
>>>>>>     n = len(code)
>>>>>>     i = 0
>>>>>>     while i < n:
>>>>>>         c = code[i]
>>>>>>         op = ord(c)
>>>>>>         if i == lasti: print '-->',
>>>>>>         else: print '   ',
>>>>>>         if i in labels: print '>>',
>>>>>>         else: print '  ',
>>>>>>         print repr(i).rjust(4),
>>>>>>         print opname[op].ljust(15),
>>>>>>         i = i+1
>>>>>>         if op >= HAVE_ARGUMENT:
>>>>>>             oparg = ord(code[i]) + ord(code[i+1])*256
>>>>>>             i = i+2
>>>>>>             print repr(oparg).rjust(5),
>>>>>>             if op in hasconst:
>>>>>>                 if constants:
>>>>>>                     print '(' + repr(constants[oparg]) + ')',
                       else:
>>>>>>                     print '(%d)'%oparg,
>>>>>>             elif op in hasname:
>>>>>>                 if names is not None:
>>>>>>                     print '(' + names[oparg] + ')',
                       else:
>>>>>>                     print '(%d)'%oparg,
>>>>>>             elif op in hasjrel:
>>>>>>                 print '(to ' + repr(i + oparg) + ')',
>>>>>>             elif op in haslocal:
>>>>>>                 if varnames:
>>>>>>                     print '(' + varnames[oparg] + ')',
                       else:
>>>>>>                     print '(%d)' % oparg,
>>>>>>             elif op in hascompare:
>>>>>>                 print '(' + cmp_op[oparg] + ')',
>>>>>>         print
       
>>>>>> disco = disassemble                     # XXX For backwards compatibility
       
>>>>>> def findlabels(code):
           """Detect all offsets in a byte code which are jump targets.
       
           Return the list of offsets.
       
           """
  820:     labels = []
  820:     n = len(code)
  820:     i = 0
 4182:     while i < n:
 3362:         c = code[i]
 3362:         op = ord(c)
 3362:         i = i+1
 3362:         if op >= HAVE_ARGUMENT:
 1725:             oparg = ord(code[i]) + ord(code[i+1])*256
 1725:             i = i+2
 1725:             label = -1
 1725:             if op in hasjrel:
    8:                 label = i+oparg
 1717:             elif op in hasjabs:
   11:                 label = oparg
 1725:             if label >= 0:
   19:                 if label not in labels:
   17:                     labels.append(label)
  820:     return labels
       
>>>>>> def findlinestarts(code):
           """Find the offsets in a byte code which are start of lines in the source.
       
           Generate pairs (offset, lineno) as described in Python/compile.c.
       
           """
 6313:     byte_increments = [ord(c) for c in code.co_lnotab[0::2]]
 6313:     line_increments = [ord(c) for c in code.co_lnotab[1::2]]
       
  820:     lastlineno = None
  820:     lineno = code.co_firstlineno
  820:     addr = 0
 6313:     for byte_incr, line_incr in zip(byte_increments, line_increments):
 5493:         if byte_incr:
   21:             if lineno != lastlineno:
   18:                 yield (addr, lineno)
   18:                 lastlineno = lineno
   21:             addr += byte_incr
 5493:         lineno += line_incr
  820:     if lineno != lastlineno:
  819:         yield (addr, lineno)
       
>>>>>> def _test():
           """Simple test program to disassemble a file."""
>>>>>>     if sys.argv[1:]:
>>>>>>         if sys.argv[2:]:
>>>>>>             sys.stderr.write("usage: python dis.py [-|file]\n")
>>>>>>             sys.exit(2)
>>>>>>         fn = sys.argv[1]
>>>>>>         if not fn or fn == "-":
>>>>>>             fn = None
           else:
>>>>>>         fn = None
>>>>>>     if fn is None:
>>>>>>         f = sys.stdin
           else:
>>>>>>         f = open(fn)
>>>>>>     source = f.read()
>>>>>>     if fn is not None:
>>>>>>         f.close()
           else:
>>>>>>         fn = "<stdin>"
>>>>>>     code = compile(source, fn, "exec")
>>>>>>     dis(code)
       
>>>>>> if __name__ == "__main__":
>>>>>>     _test()
