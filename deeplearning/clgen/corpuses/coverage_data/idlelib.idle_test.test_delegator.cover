    1: import unittest
    1: from idlelib.Delegator import Delegator
       
    2: class DelegatorTest(unittest.TestCase):
       
    1:     def test_mydel(self):
               # test a simple use scenario
       
               # initialize
    1:         mydel = Delegator(int)
    1:         self.assertIs(mydel.delegate, int)
    1:         self.assertEqual(mydel._Delegator__cache, set())
       
               # add an attribute:
    1:         self.assertRaises(AttributeError, mydel.__getattr__, 'xyz')
    1:         bl = mydel.bit_length
    1:         self.assertIs(bl, int.bit_length)
    1:         self.assertIs(mydel.__dict__['bit_length'], int.bit_length)
    1:         self.assertEqual(mydel._Delegator__cache, {'bit_length'})
       
               # add a second attribute
    1:         mydel.numerator
    1:         self.assertEqual(mydel._Delegator__cache, {'bit_length', 'numerator'})
       
               # delete the second (which, however, leaves it in the name cache)
    1:         del mydel.numerator
    1:         self.assertNotIn('numerator', mydel.__dict__)
    1:         self.assertIn('numerator', mydel._Delegator__cache)
       
               # reset by calling .setdelegate, which calls .resetcache
    1:         mydel.setdelegate(float)
    1:         self.assertIs(mydel.delegate, float)
    1:         self.assertNotIn('bit_length', mydel.__dict__)
    1:         self.assertEqual(mydel._Delegator__cache, set())
       
    1: if __name__ == '__main__':
>>>>>>     unittest.main(verbosity=2, exit=2)
