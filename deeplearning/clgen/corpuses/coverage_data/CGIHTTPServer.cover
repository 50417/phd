       """CGI-savvy HTTP Server.
       
       This module builds on SimpleHTTPServer by implementing GET and POST
       requests to cgi-bin scripts.
       
       If the os.fork() function is not present (e.g. on Windows),
       os.popen2() is used as a fallback, with slightly altered semantics; if
       that function is not present either (e.g. on Macintosh), only Python
       scripts are supported, and they are executed by the current process.
       
       In all cases, the implementation is intentionally naive -- all
       requests are executed sychronously.
       
       SECURITY WARNING: DON'T USE THIS CODE UNLESS YOU ARE INSIDE A FIREWALL
       -- it may execute arbitrary Python code or external programs.
       
       Note that status code 200 is sent prior to execution of a CGI script, so
       scripts cannot send other status codes such as 302 (redirect).
    1: """
       
       
    1: __version__ = "0.4"
       
    1: __all__ = ["CGIHTTPRequestHandler"]
       
    1: import os
    1: import sys
    1: import urllib
    1: import BaseHTTPServer
    1: import SimpleHTTPServer
    1: import select
    1: import copy
       
       
    2: class CGIHTTPRequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
       
           """Complete HTTP server with GET, HEAD and POST commands.
       
           GET and HEAD also support running CGI scripts.
       
           The POST command is *only* implemented for CGI scripts.
       
    1:     """
       
           # Determine platform specifics
    1:     have_fork = hasattr(os, 'fork')
    1:     have_popen2 = hasattr(os, 'popen2')
    1:     have_popen3 = hasattr(os, 'popen3')
       
           # Make rfile unbuffered -- we need to read one line and then pass
           # the rest to a subprocess, so we can't use buffered input.
    1:     rbufsize = 0
       
    1:     def do_POST(self):
               """Serve a POST request.
       
               This is only implemented for CGI scripts.
       
               """
       
    1:         if self.is_cgi():
    1:             self.run_cgi()
               else:
>>>>>>             self.send_error(501, "Can only POST to CGI scripts")
       
    1:     def send_head(self):
               """Version of send_head that support CGI scripts"""
   10:         if self.is_cgi():
   10:             return self.run_cgi()
               else:
>>>>>>             return SimpleHTTPServer.SimpleHTTPRequestHandler.send_head(self)
       
    1:     def is_cgi(self):
               """Test whether self.path corresponds to a CGI script.
       
               Returns True and updates the cgi_info attribute to the tuple
               (dir, rest) if self.path requires running a CGI script.
               Returns False otherwise.
       
               If any exception is raised, the caller should assume that
               self.path was rejected as invalid and act accordingly.
       
               The default implementation tests whether the normalized url
               path begins with one of the strings in self.cgi_directories
               (and the next character is a '/' or the end of the string).
               """
   11:         collapsed_path = _url_collapse_path(self.path)
   11:         dir_sep = collapsed_path.find('/', 1)
   11:         head, tail = collapsed_path[:dir_sep], collapsed_path[dir_sep+1:]
   11:         if head in self.cgi_directories:
   11:             self.cgi_info = head, tail
   11:             return True
>>>>>>         return False
       
    1:     cgi_directories = ['/cgi-bin', '/htbin']
       
    1:     def is_executable(self, path):
               """Test whether argument path is an executable file."""
>>>>>>         return executable(path)
       
    1:     def is_python(self, path):
               """Test whether argument path is a Python script."""
    9:         head, tail = os.path.splitext(path)
    9:         return tail.lower() in (".py", ".pyw")
       
    1:     def run_cgi(self):
               """Execute a CGI script."""
   11:         dir, rest = self.cgi_info
   11:         path = dir + '/' + rest
   11:         i = path.find('/', len(dir)+1)
   12:         while i >= 0:
    2:             nextdir = path[:i]
    2:             nextrest = path[i+1:]
       
    2:             scriptdir = self.translate_path(nextdir)
    2:             if os.path.isdir(scriptdir):
    1:                 dir, rest = nextdir, nextrest
    1:                 i = path.find('/', len(dir)+1)
                   else:
    1:                 break
       
               # find an explicit query string, if present.
   11:         rest, _, query = rest.partition('?')
       
               # dissect the part after the directory name into a script name &
               # a possible additional path, to be stored in PATH_INFO.
   11:         i = rest.find('/')
   11:         if i >= 0:
>>>>>>             script, rest = rest[:i], rest[i:]
               else:
   11:             script, rest = rest, ''
       
   11:         scriptname = dir + '/' + script
   11:         scriptfile = self.translate_path(scriptname)
   11:         if not os.path.exists(scriptfile):
    2:             self.send_error(404, "No such CGI script (%r)" % scriptname)
    2:             return
    9:         if not os.path.isfile(scriptfile):
>>>>>>             self.send_error(403, "CGI script is not a plain file (%r)" %
>>>>>>                             scriptname)
>>>>>>             return
    9:         ispy = self.is_python(scriptname)
    9:         if not ispy:
>>>>>>             if not (self.have_fork or self.have_popen2 or self.have_popen3):
>>>>>>                 self.send_error(403, "CGI script is not a Python script (%r)" %
>>>>>>                                 scriptname)
>>>>>>                 return
>>>>>>             if not self.is_executable(scriptfile):
>>>>>>                 self.send_error(403, "CGI script is not executable (%r)" %
>>>>>>                                 scriptname)
>>>>>>                 return
       
               # Reference: http://hoohoo.ncsa.uiuc.edu/cgi/env.html
               # XXX Much of the following could be prepared ahead of time!
    9:         env = copy.deepcopy(os.environ)
    9:         env['SERVER_SOFTWARE'] = self.version_string()
    9:         env['SERVER_NAME'] = self.server.server_name
    9:         env['GATEWAY_INTERFACE'] = 'CGI/1.1'
    9:         env['SERVER_PROTOCOL'] = self.protocol_version
    9:         env['SERVER_PORT'] = str(self.server.server_port)
    9:         env['REQUEST_METHOD'] = self.command
    9:         uqrest = urllib.unquote(rest)
    9:         env['PATH_INFO'] = uqrest
    9:         env['PATH_TRANSLATED'] = self.translate_path(uqrest)
    9:         env['SCRIPT_NAME'] = scriptname
    9:         if query:
    2:             env['QUERY_STRING'] = query
    9:         host = self.address_string()
    9:         if host != self.client_address[0]:
    9:             env['REMOTE_HOST'] = host
    9:         env['REMOTE_ADDR'] = self.client_address[0]
    9:         authorization = self.headers.getheader("authorization")
    9:         if authorization:
    1:             authorization = authorization.split()
    1:             if len(authorization) == 2:
    1:                 import base64, binascii
    1:                 env['AUTH_TYPE'] = authorization[0]
    1:                 if authorization[0].lower() == "basic":
    1:                     try:
    1:                         authorization = base64.decodestring(authorization[1])
>>>>>>                     except binascii.Error:
>>>>>>                         pass
                           else:
    1:                         authorization = authorization.split(':')
    1:                         if len(authorization) == 2:
    1:                             env['REMOTE_USER'] = authorization[0]
               # XXX REMOTE_IDENT
    9:         if self.headers.typeheader is None:
    8:             env['CONTENT_TYPE'] = self.headers.type
               else:
    1:             env['CONTENT_TYPE'] = self.headers.typeheader
    9:         length = self.headers.getheader('content-length')
    9:         if length:
    1:             env['CONTENT_LENGTH'] = length
    9:         referer = self.headers.getheader('referer')
    9:         if referer:
>>>>>>             env['HTTP_REFERER'] = referer
    9:         accept = []
    9:         for line in self.headers.getallmatchingheaders('accept'):
>>>>>>             if line[:1] in "\t\n\r ":
>>>>>>                 accept.append(line.strip())
                   else:
>>>>>>                 accept = accept + line[7:].split(',')
    9:         env['HTTP_ACCEPT'] = ','.join(accept)
    9:         ua = self.headers.getheader('user-agent')
    9:         if ua:
>>>>>>             env['HTTP_USER_AGENT'] = ua
    9:         co = filter(None, self.headers.getheaders('cookie'))
    9:         if co:
>>>>>>             env['HTTP_COOKIE'] = ', '.join(co)
               # XXX Other HTTP_* headers
               # Since we're setting the env in the parent, provide empty
               # values to override previously set values
    9:         for k in ('QUERY_STRING', 'REMOTE_HOST', 'CONTENT_LENGTH',
   63:                   'HTTP_USER_AGENT', 'HTTP_COOKIE', 'HTTP_REFERER'):
   54:             env.setdefault(k, "")
       
    9:         self.send_response(200, "Script output follows")
       
    9:         decoded_query = query.replace('+', ' ')
       
    9:         if self.have_fork:
                   # Unix -- fork as we should
    9:             args = [script]
    9:             if '=' not in decoded_query:
    7:                 args.append(decoded_query)
    9:             nobody = nobody_uid()
    9:             self.wfile.flush() # Always flush before forking
    9:             pid = os.fork()
    9:             if pid != 0:
                       # Parent
    9:                 pid, sts = os.waitpid(pid, 0)
                       # throw away additional data [see bug #427345]
    9:                 while select.select([self.rfile], [], [], 0)[0]:
>>>>>>                     if not self.rfile.read(1):
>>>>>>                         break
    9:                 if sts:
>>>>>>                     self.log_error("CGI script exit status %#x", sts)
    9:                 return
                   # Child
>>>>>>             try:
>>>>>>                 try:
>>>>>>                     os.setuid(nobody)
>>>>>>                 except os.error:
>>>>>>                     pass
>>>>>>                 os.dup2(self.rfile.fileno(), 0)
>>>>>>                 os.dup2(self.wfile.fileno(), 1)
>>>>>>                 os.execve(scriptfile, args, env)
>>>>>>             except:
>>>>>>                 self.server.handle_error(self.request, self.client_address)
>>>>>>                 os._exit(127)
       
               else:
                   # Non Unix - use subprocess
>>>>>>             import subprocess
>>>>>>             cmdline = [scriptfile]
>>>>>>             if self.is_python(scriptfile):
>>>>>>                 interp = sys.executable
>>>>>>                 if interp.lower().endswith("w.exe"):
                           # On Windows, use python.exe, not pythonw.exe
>>>>>>                     interp = interp[:-5] + interp[-4:]
>>>>>>                 cmdline = [interp, '-u'] + cmdline
>>>>>>             if '=' not in query:
>>>>>>                 cmdline.append(query)
       
>>>>>>             self.log_message("command: %s", subprocess.list2cmdline(cmdline))
>>>>>>             try:
>>>>>>                 nbytes = int(length)
>>>>>>             except (TypeError, ValueError):
>>>>>>                 nbytes = 0
>>>>>>             p = subprocess.Popen(cmdline,
>>>>>>                                  stdin = subprocess.PIPE,
>>>>>>                                  stdout = subprocess.PIPE,
>>>>>>                                  stderr = subprocess.PIPE,
>>>>>>                                  env = env
                                       )
>>>>>>             if self.command.lower() == "post" and nbytes > 0:
>>>>>>                 data = self.rfile.read(nbytes)
                   else:
>>>>>>                 data = None
                   # throw away additional data [see bug #427345]
>>>>>>             while select.select([self.rfile._sock], [], [], 0)[0]:
>>>>>>                 if not self.rfile._sock.recv(1):
>>>>>>                     break
>>>>>>             stdout, stderr = p.communicate(data)
>>>>>>             self.wfile.write(stdout)
>>>>>>             if stderr:
>>>>>>                 self.log_error('%s', stderr)
>>>>>>             p.stderr.close()
>>>>>>             p.stdout.close()
>>>>>>             status = p.returncode
>>>>>>             if status:
>>>>>>                 self.log_error("CGI script exit status %#x", status)
                   else:
>>>>>>                 self.log_message("CGI script exited OK")
       
       
    1: def _url_collapse_path(path):
           """
           Given a URL path, remove extra '/'s and '.' path elements and collapse
           any '..' references and returns a colllapsed path.
       
           Implements something akin to RFC-2396 5.2 step 6 to parse relative paths.
           The utility of this function is limited to is_cgi method and helps
           preventing some security attacks.
       
           Returns: The reconstituted URL, which will always start with a '/'.
       
           Raises: IndexError if too many '..' occur within the path.
       
           """
           # Query component should not be involved.
   39:     path, _, query = path.partition('?')
   39:     path = urllib.unquote(path)
       
           # Similar to os.path.split(os.path.normpath(path)) but specific to URL
           # path semantics rather than local operating system semantics.
   39:     path_parts = path.split('/')
   39:     head_parts = []
  196:     for part in path_parts[:-1]:
  159:         if part == '..':
   37:             head_parts.pop() # IndexError if more '..' than prior parts
  122:         elif part and part != '.':
   69:             head_parts.append( part )
   37:     if path_parts:
   37:         tail_part = path_parts.pop()
   37:         if tail_part:
   31:             if tail_part == '..':
    4:                 head_parts.pop()
    2:                 tail_part = ''
   27:             elif tail_part == '.':
    2:                 tail_part = ''
           else:
>>>>>>         tail_part = ''
       
   35:     if query:
    2:         tail_part = '?'.join((tail_part, query))
       
   35:     splitpath = ('/' + '/'.join(head_parts), tail_part)
   35:     collapsed_path = "/".join(splitpath)
       
   35:     return collapsed_path
       
       
    1: nobody = None
       
    1: def nobody_uid():
           """Internal routine to get nobody's uid"""
           global nobody
    9:     if nobody:
    8:         return nobody
    1:     try:
    1:         import pwd
>>>>>>     except ImportError:
>>>>>>         return -1
    1:     try:
    1:         nobody = pwd.getpwnam('nobody')[2]
>>>>>>     except KeyError:
>>>>>>         nobody = 1 + max(map(lambda x: x[2], pwd.getpwall()))
    1:     return nobody
       
       
    1: def executable(path):
           """Test for executable file."""
>>>>>>     try:
>>>>>>         st = os.stat(path)
>>>>>>     except os.error:
>>>>>>         return False
>>>>>>     return st.st_mode & 0111 != 0
       
       
    1: def test(HandlerClass = CGIHTTPRequestHandler,
    1:          ServerClass = BaseHTTPServer.HTTPServer):
>>>>>>     SimpleHTTPServer.test(HandlerClass, ServerClass)
       
       
    1: if __name__ == '__main__':
>>>>>>     test()
