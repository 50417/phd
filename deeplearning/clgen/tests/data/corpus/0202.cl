__kernel void fn_A(__global int* restrict A, __global int* restrict B, int C, int D) {
  int E = -1;
  int F = 0, G = 0, H = -1;
  int I = 1;

  int J[((100) * (((64) * ((4)))) * 2 + (((64) * ((4)))))];

  for (int K = 0; K < ((100) * (((64) * ((4)))) * 2 + (((64) * ((4))))); ++K) {
    J[K] = 2147483647;
  }

  do {
    ++H;
    if (H == (4)) {
      H = 0;
      --I;
      if (I > 0) {
        F -= ((64) * ((4)));
        ++G;
      } else {
        I = 100;
        ++E;
        F = E * ((64) * ((4)));
        G = 0;
      }
    }

    int L = F + H * 64;
    int M[64];
    for (int K = 0; K < 64; ++K) {
      int N = L + K;
      if (N >= 0 && N < C) {
        M[K] = A[((N) + (G)*C)];

        int O = ((100) * (((64) * ((4)))) * 2 + (((64) * ((4))))) - (100 * ((64) * ((4)))) - ((64) * ((4))) + K;
        if (G != 0) {
          int P = J[O];
          int Q;
          if (H == (4) - 1 && K == 64 - 1) {
            Q = J[((100) * (((64) * ((4)))) * 2 + (((64) * ((4))))) - ((64) * ((4))) * 2 + 64];
          } else {
            Q = J[O + 1];
          }
          int R;
          if (H == 0 && K == 0) {
            R = J[((64) * ((4))) - 1];
          } else {
            R = J[O - 1];
          }
          M[K] += ((((R) <= (P) ? (R) : (P))) <= (Q) ? (((R) <= (P) ? (R) : (P))) : (Q));
        }
      } else {
        M[K] = 2147483647;
      }
    }
    for (int K = 0; K < ((100) * (((64) * ((4)))) * 2 + (((64) * ((4))))) - 64; ++K) {
      J[K] = J[K + 64];
    }
    for (int K = 0; K < 64; ++K) {
      J[((100) * (((64) * ((4)))) * 2 + (((64) * ((4))))) - 64 + K] = M[K];
    }
    for (int K = 0; K < 64; ++K) {
      if (L + K >= 0 && L + K < C)
        B[L + K] = M[K];
    }
  } while (F + (H + 1) * 64 < C || G != D - 1);
}