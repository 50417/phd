typedef uint eh_index; typedef __attribute__((aligned(64))) struct crypto_generichash_blake2b_state {
  ulong h[8];
  ulong t[2];
  ulong f[2];
  uchar buf[2 * 128];
  size_t buflen;
  uchar last_node;

} crypto_generichash_blake2b_state;

typedef crypto_generichash_blake2b_state eh_hash_state;

__constant ulong gb_A[8] = {0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL, 0x3c6ef372fe94f82bULL, 0xa54ff53a5f1d36f1ULL, 0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL, 0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL};

__constant uchar gb_B[12][16] = {{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3}, {11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4}, {7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8}, {9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13}, {2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9},
                                 {12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11}, {13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10}, {6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5}, {10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3}};

inline ulong fn_A(__const ulong A, __const unsigned B) {
  return (A >> B) | (A << (64 - B));
}

void fn_B(void* A, void* B, size_t C) {
  char* D = (char*)B;
  char* E = (char*)A;

  for (int F = 0; F < C; F++)
    E[F] = D[F];
}

ulong fn_C(__const void* A) {
  ulong B;
  fn_B(&B, A, sizeof(B));
  return B;
}

void fn_D(void* A, ulong B) {
  fn_B(A, &B, sizeof(B));
}

int fn_E(eh_hash_state* A, __const ulong B) {
  A->t[0] += B;
  A->t[1] += (A->t[0] < B);
  return 0;
}

int fn_F(__const eh_hash_state* A) {
  return A->f[0] != 0;
}

int fn_G(eh_hash_state* A) {
  A->f[1] = -1;
  return 0;
}

int fn_H(eh_hash_state* A) {
  if (A->last_node)
    fn_G(A);

  A->f[0] = -1;
  return 0;
}

int fn_I(eh_hash_state* A, __const uchar B[128]) {
  ulong C[16];
  ulong D[16];
  int E;

  for (E = 0; E < 16; ++E)
    C[E] = fn_C(B + E * sizeof(C[E]));

  for (E = 0; E < 8; ++E)
    D[E] = A->h[E];

  D[8] = gb_A[0];
  D[9] = gb_A[1];
  D[10] = gb_A[2];
  D[11] = gb_A[3];
  D[12] = A->t[0] ^ gb_A[4];
  D[13] = A->t[1] ^ gb_A[5];
  D[14] = A->f[0] ^ gb_A[6];
  D[15] = A->f[1] ^ gb_A[7];
  do {
    do {
      D[0] = D[0] + D[4] + C[gb_B[0][2 * 0 + 0]];
      D[12] = fn_A(D[12] ^ D[0], 32);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 24);
      D[0] = D[0] + D[4] + C[gb_B[0][2 * 0 + 1]];
      D[12] = fn_A(D[12] ^ D[0], 16);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 63);
    } while (0);
    do {
      D[1] = D[1] + D[5] + C[gb_B[0][2 * 1 + 0]];
      D[13] = fn_A(D[13] ^ D[1], 32);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 24);
      D[1] = D[1] + D[5] + C[gb_B[0][2 * 1 + 1]];
      D[13] = fn_A(D[13] ^ D[1], 16);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 63);
    } while (0);
    do {
      D[2] = D[2] + D[6] + C[gb_B[0][2 * 2 + 0]];
      D[14] = fn_A(D[14] ^ D[2], 32);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 24);
      D[2] = D[2] + D[6] + C[gb_B[0][2 * 2 + 1]];
      D[14] = fn_A(D[14] ^ D[2], 16);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 63);
    } while (0);
    do {
      D[3] = D[3] + D[7] + C[gb_B[0][2 * 3 + 0]];
      D[15] = fn_A(D[15] ^ D[3], 32);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 24);
      D[3] = D[3] + D[7] + C[gb_B[0][2 * 3 + 1]];
      D[15] = fn_A(D[15] ^ D[3], 16);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 63);
    } while (0);
    do {
      D[0] = D[0] + D[5] + C[gb_B[0][2 * 4 + 0]];
      D[15] = fn_A(D[15] ^ D[0], 32);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 24);
      D[0] = D[0] + D[5] + C[gb_B[0][2 * 4 + 1]];
      D[15] = fn_A(D[15] ^ D[0], 16);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 63);
    } while (0);
    do {
      D[1] = D[1] + D[6] + C[gb_B[0][2 * 5 + 0]];
      D[12] = fn_A(D[12] ^ D[1], 32);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 24);
      D[1] = D[1] + D[6] + C[gb_B[0][2 * 5 + 1]];
      D[12] = fn_A(D[12] ^ D[1], 16);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 63);
    } while (0);
    do {
      D[2] = D[2] + D[7] + C[gb_B[0][2 * 6 + 0]];
      D[13] = fn_A(D[13] ^ D[2], 32);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 24);
      D[2] = D[2] + D[7] + C[gb_B[0][2 * 6 + 1]];
      D[13] = fn_A(D[13] ^ D[2], 16);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 63);
    } while (0);
    do {
      D[3] = D[3] + D[4] + C[gb_B[0][2 * 7 + 0]];
      D[14] = fn_A(D[14] ^ D[3], 32);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 24);
      D[3] = D[3] + D[4] + C[gb_B[0][2 * 7 + 1]];
      D[14] = fn_A(D[14] ^ D[3], 16);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      D[0] = D[0] + D[4] + C[gb_B[1][2 * 0 + 0]];
      D[12] = fn_A(D[12] ^ D[0], 32);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 24);
      D[0] = D[0] + D[4] + C[gb_B[1][2 * 0 + 1]];
      D[12] = fn_A(D[12] ^ D[0], 16);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 63);
    } while (0);
    do {
      D[1] = D[1] + D[5] + C[gb_B[1][2 * 1 + 0]];
      D[13] = fn_A(D[13] ^ D[1], 32);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 24);
      D[1] = D[1] + D[5] + C[gb_B[1][2 * 1 + 1]];
      D[13] = fn_A(D[13] ^ D[1], 16);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 63);
    } while (0);
    do {
      D[2] = D[2] + D[6] + C[gb_B[1][2 * 2 + 0]];
      D[14] = fn_A(D[14] ^ D[2], 32);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 24);
      D[2] = D[2] + D[6] + C[gb_B[1][2 * 2 + 1]];
      D[14] = fn_A(D[14] ^ D[2], 16);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 63);
    } while (0);
    do {
      D[3] = D[3] + D[7] + C[gb_B[1][2 * 3 + 0]];
      D[15] = fn_A(D[15] ^ D[3], 32);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 24);
      D[3] = D[3] + D[7] + C[gb_B[1][2 * 3 + 1]];
      D[15] = fn_A(D[15] ^ D[3], 16);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 63);
    } while (0);
    do {
      D[0] = D[0] + D[5] + C[gb_B[1][2 * 4 + 0]];
      D[15] = fn_A(D[15] ^ D[0], 32);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 24);
      D[0] = D[0] + D[5] + C[gb_B[1][2 * 4 + 1]];
      D[15] = fn_A(D[15] ^ D[0], 16);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 63);
    } while (0);
    do {
      D[1] = D[1] + D[6] + C[gb_B[1][2 * 5 + 0]];
      D[12] = fn_A(D[12] ^ D[1], 32);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 24);
      D[1] = D[1] + D[6] + C[gb_B[1][2 * 5 + 1]];
      D[12] = fn_A(D[12] ^ D[1], 16);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 63);
    } while (0);
    do {
      D[2] = D[2] + D[7] + C[gb_B[1][2 * 6 + 0]];
      D[13] = fn_A(D[13] ^ D[2], 32);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 24);
      D[2] = D[2] + D[7] + C[gb_B[1][2 * 6 + 1]];
      D[13] = fn_A(D[13] ^ D[2], 16);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 63);
    } while (0);
    do {
      D[3] = D[3] + D[4] + C[gb_B[1][2 * 7 + 0]];
      D[14] = fn_A(D[14] ^ D[3], 32);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 24);
      D[3] = D[3] + D[4] + C[gb_B[1][2 * 7 + 1]];
      D[14] = fn_A(D[14] ^ D[3], 16);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      D[0] = D[0] + D[4] + C[gb_B[2][2 * 0 + 0]];
      D[12] = fn_A(D[12] ^ D[0], 32);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 24);
      D[0] = D[0] + D[4] + C[gb_B[2][2 * 0 + 1]];
      D[12] = fn_A(D[12] ^ D[0], 16);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 63);
    } while (0);
    do {
      D[1] = D[1] + D[5] + C[gb_B[2][2 * 1 + 0]];
      D[13] = fn_A(D[13] ^ D[1], 32);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 24);
      D[1] = D[1] + D[5] + C[gb_B[2][2 * 1 + 1]];
      D[13] = fn_A(D[13] ^ D[1], 16);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 63);
    } while (0);
    do {
      D[2] = D[2] + D[6] + C[gb_B[2][2 * 2 + 0]];
      D[14] = fn_A(D[14] ^ D[2], 32);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 24);
      D[2] = D[2] + D[6] + C[gb_B[2][2 * 2 + 1]];
      D[14] = fn_A(D[14] ^ D[2], 16);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 63);
    } while (0);
    do {
      D[3] = D[3] + D[7] + C[gb_B[2][2 * 3 + 0]];
      D[15] = fn_A(D[15] ^ D[3], 32);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 24);
      D[3] = D[3] + D[7] + C[gb_B[2][2 * 3 + 1]];
      D[15] = fn_A(D[15] ^ D[3], 16);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 63);
    } while (0);
    do {
      D[0] = D[0] + D[5] + C[gb_B[2][2 * 4 + 0]];
      D[15] = fn_A(D[15] ^ D[0], 32);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 24);
      D[0] = D[0] + D[5] + C[gb_B[2][2 * 4 + 1]];
      D[15] = fn_A(D[15] ^ D[0], 16);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 63);
    } while (0);
    do {
      D[1] = D[1] + D[6] + C[gb_B[2][2 * 5 + 0]];
      D[12] = fn_A(D[12] ^ D[1], 32);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 24);
      D[1] = D[1] + D[6] + C[gb_B[2][2 * 5 + 1]];
      D[12] = fn_A(D[12] ^ D[1], 16);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 63);
    } while (0);
    do {
      D[2] = D[2] + D[7] + C[gb_B[2][2 * 6 + 0]];
      D[13] = fn_A(D[13] ^ D[2], 32);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 24);
      D[2] = D[2] + D[7] + C[gb_B[2][2 * 6 + 1]];
      D[13] = fn_A(D[13] ^ D[2], 16);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 63);
    } while (0);
    do {
      D[3] = D[3] + D[4] + C[gb_B[2][2 * 7 + 0]];
      D[14] = fn_A(D[14] ^ D[3], 32);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 24);
      D[3] = D[3] + D[4] + C[gb_B[2][2 * 7 + 1]];
      D[14] = fn_A(D[14] ^ D[3], 16);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      D[0] = D[0] + D[4] + C[gb_B[3][2 * 0 + 0]];
      D[12] = fn_A(D[12] ^ D[0], 32);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 24);
      D[0] = D[0] + D[4] + C[gb_B[3][2 * 0 + 1]];
      D[12] = fn_A(D[12] ^ D[0], 16);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 63);
    } while (0);
    do {
      D[1] = D[1] + D[5] + C[gb_B[3][2 * 1 + 0]];
      D[13] = fn_A(D[13] ^ D[1], 32);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 24);
      D[1] = D[1] + D[5] + C[gb_B[3][2 * 1 + 1]];
      D[13] = fn_A(D[13] ^ D[1], 16);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 63);
    } while (0);
    do {
      D[2] = D[2] + D[6] + C[gb_B[3][2 * 2 + 0]];
      D[14] = fn_A(D[14] ^ D[2], 32);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 24);
      D[2] = D[2] + D[6] + C[gb_B[3][2 * 2 + 1]];
      D[14] = fn_A(D[14] ^ D[2], 16);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 63);
    } while (0);
    do {
      D[3] = D[3] + D[7] + C[gb_B[3][2 * 3 + 0]];
      D[15] = fn_A(D[15] ^ D[3], 32);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 24);
      D[3] = D[3] + D[7] + C[gb_B[3][2 * 3 + 1]];
      D[15] = fn_A(D[15] ^ D[3], 16);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 63);
    } while (0);
    do {
      D[0] = D[0] + D[5] + C[gb_B[3][2 * 4 + 0]];
      D[15] = fn_A(D[15] ^ D[0], 32);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 24);
      D[0] = D[0] + D[5] + C[gb_B[3][2 * 4 + 1]];
      D[15] = fn_A(D[15] ^ D[0], 16);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 63);
    } while (0);
    do {
      D[1] = D[1] + D[6] + C[gb_B[3][2 * 5 + 0]];
      D[12] = fn_A(D[12] ^ D[1], 32);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 24);
      D[1] = D[1] + D[6] + C[gb_B[3][2 * 5 + 1]];
      D[12] = fn_A(D[12] ^ D[1], 16);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 63);
    } while (0);
    do {
      D[2] = D[2] + D[7] + C[gb_B[3][2 * 6 + 0]];
      D[13] = fn_A(D[13] ^ D[2], 32);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 24);
      D[2] = D[2] + D[7] + C[gb_B[3][2 * 6 + 1]];
      D[13] = fn_A(D[13] ^ D[2], 16);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 63);
    } while (0);
    do {
      D[3] = D[3] + D[4] + C[gb_B[3][2 * 7 + 0]];
      D[14] = fn_A(D[14] ^ D[3], 32);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 24);
      D[3] = D[3] + D[4] + C[gb_B[3][2 * 7 + 1]];
      D[14] = fn_A(D[14] ^ D[3], 16);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      D[0] = D[0] + D[4] + C[gb_B[4][2 * 0 + 0]];
      D[12] = fn_A(D[12] ^ D[0], 32);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 24);
      D[0] = D[0] + D[4] + C[gb_B[4][2 * 0 + 1]];
      D[12] = fn_A(D[12] ^ D[0], 16);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 63);
    } while (0);
    do {
      D[1] = D[1] + D[5] + C[gb_B[4][2 * 1 + 0]];
      D[13] = fn_A(D[13] ^ D[1], 32);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 24);
      D[1] = D[1] + D[5] + C[gb_B[4][2 * 1 + 1]];
      D[13] = fn_A(D[13] ^ D[1], 16);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 63);
    } while (0);
    do {
      D[2] = D[2] + D[6] + C[gb_B[4][2 * 2 + 0]];
      D[14] = fn_A(D[14] ^ D[2], 32);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 24);
      D[2] = D[2] + D[6] + C[gb_B[4][2 * 2 + 1]];
      D[14] = fn_A(D[14] ^ D[2], 16);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 63);
    } while (0);
    do {
      D[3] = D[3] + D[7] + C[gb_B[4][2 * 3 + 0]];
      D[15] = fn_A(D[15] ^ D[3], 32);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 24);
      D[3] = D[3] + D[7] + C[gb_B[4][2 * 3 + 1]];
      D[15] = fn_A(D[15] ^ D[3], 16);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 63);
    } while (0);
    do {
      D[0] = D[0] + D[5] + C[gb_B[4][2 * 4 + 0]];
      D[15] = fn_A(D[15] ^ D[0], 32);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 24);
      D[0] = D[0] + D[5] + C[gb_B[4][2 * 4 + 1]];
      D[15] = fn_A(D[15] ^ D[0], 16);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 63);
    } while (0);
    do {
      D[1] = D[1] + D[6] + C[gb_B[4][2 * 5 + 0]];
      D[12] = fn_A(D[12] ^ D[1], 32);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 24);
      D[1] = D[1] + D[6] + C[gb_B[4][2 * 5 + 1]];
      D[12] = fn_A(D[12] ^ D[1], 16);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 63);
    } while (0);
    do {
      D[2] = D[2] + D[7] + C[gb_B[4][2 * 6 + 0]];
      D[13] = fn_A(D[13] ^ D[2], 32);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 24);
      D[2] = D[2] + D[7] + C[gb_B[4][2 * 6 + 1]];
      D[13] = fn_A(D[13] ^ D[2], 16);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 63);
    } while (0);
    do {
      D[3] = D[3] + D[4] + C[gb_B[4][2 * 7 + 0]];
      D[14] = fn_A(D[14] ^ D[3], 32);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 24);
      D[3] = D[3] + D[4] + C[gb_B[4][2 * 7 + 1]];
      D[14] = fn_A(D[14] ^ D[3], 16);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      D[0] = D[0] + D[4] + C[gb_B[5][2 * 0 + 0]];
      D[12] = fn_A(D[12] ^ D[0], 32);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 24);
      D[0] = D[0] + D[4] + C[gb_B[5][2 * 0 + 1]];
      D[12] = fn_A(D[12] ^ D[0], 16);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 63);
    } while (0);
    do {
      D[1] = D[1] + D[5] + C[gb_B[5][2 * 1 + 0]];
      D[13] = fn_A(D[13] ^ D[1], 32);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 24);
      D[1] = D[1] + D[5] + C[gb_B[5][2 * 1 + 1]];
      D[13] = fn_A(D[13] ^ D[1], 16);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 63);
    } while (0);
    do {
      D[2] = D[2] + D[6] + C[gb_B[5][2 * 2 + 0]];
      D[14] = fn_A(D[14] ^ D[2], 32);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 24);
      D[2] = D[2] + D[6] + C[gb_B[5][2 * 2 + 1]];
      D[14] = fn_A(D[14] ^ D[2], 16);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 63);
    } while (0);
    do {
      D[3] = D[3] + D[7] + C[gb_B[5][2 * 3 + 0]];
      D[15] = fn_A(D[15] ^ D[3], 32);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 24);
      D[3] = D[3] + D[7] + C[gb_B[5][2 * 3 + 1]];
      D[15] = fn_A(D[15] ^ D[3], 16);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 63);
    } while (0);
    do {
      D[0] = D[0] + D[5] + C[gb_B[5][2 * 4 + 0]];
      D[15] = fn_A(D[15] ^ D[0], 32);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 24);
      D[0] = D[0] + D[5] + C[gb_B[5][2 * 4 + 1]];
      D[15] = fn_A(D[15] ^ D[0], 16);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 63);
    } while (0);
    do {
      D[1] = D[1] + D[6] + C[gb_B[5][2 * 5 + 0]];
      D[12] = fn_A(D[12] ^ D[1], 32);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 24);
      D[1] = D[1] + D[6] + C[gb_B[5][2 * 5 + 1]];
      D[12] = fn_A(D[12] ^ D[1], 16);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 63);
    } while (0);
    do {
      D[2] = D[2] + D[7] + C[gb_B[5][2 * 6 + 0]];
      D[13] = fn_A(D[13] ^ D[2], 32);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 24);
      D[2] = D[2] + D[7] + C[gb_B[5][2 * 6 + 1]];
      D[13] = fn_A(D[13] ^ D[2], 16);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 63);
    } while (0);
    do {
      D[3] = D[3] + D[4] + C[gb_B[5][2 * 7 + 0]];
      D[14] = fn_A(D[14] ^ D[3], 32);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 24);
      D[3] = D[3] + D[4] + C[gb_B[5][2 * 7 + 1]];
      D[14] = fn_A(D[14] ^ D[3], 16);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      D[0] = D[0] + D[4] + C[gb_B[6][2 * 0 + 0]];
      D[12] = fn_A(D[12] ^ D[0], 32);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 24);
      D[0] = D[0] + D[4] + C[gb_B[6][2 * 0 + 1]];
      D[12] = fn_A(D[12] ^ D[0], 16);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 63);
    } while (0);
    do {
      D[1] = D[1] + D[5] + C[gb_B[6][2 * 1 + 0]];
      D[13] = fn_A(D[13] ^ D[1], 32);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 24);
      D[1] = D[1] + D[5] + C[gb_B[6][2 * 1 + 1]];
      D[13] = fn_A(D[13] ^ D[1], 16);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 63);
    } while (0);
    do {
      D[2] = D[2] + D[6] + C[gb_B[6][2 * 2 + 0]];
      D[14] = fn_A(D[14] ^ D[2], 32);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 24);
      D[2] = D[2] + D[6] + C[gb_B[6][2 * 2 + 1]];
      D[14] = fn_A(D[14] ^ D[2], 16);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 63);
    } while (0);
    do {
      D[3] = D[3] + D[7] + C[gb_B[6][2 * 3 + 0]];
      D[15] = fn_A(D[15] ^ D[3], 32);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 24);
      D[3] = D[3] + D[7] + C[gb_B[6][2 * 3 + 1]];
      D[15] = fn_A(D[15] ^ D[3], 16);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 63);
    } while (0);
    do {
      D[0] = D[0] + D[5] + C[gb_B[6][2 * 4 + 0]];
      D[15] = fn_A(D[15] ^ D[0], 32);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 24);
      D[0] = D[0] + D[5] + C[gb_B[6][2 * 4 + 1]];
      D[15] = fn_A(D[15] ^ D[0], 16);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 63);
    } while (0);
    do {
      D[1] = D[1] + D[6] + C[gb_B[6][2 * 5 + 0]];
      D[12] = fn_A(D[12] ^ D[1], 32);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 24);
      D[1] = D[1] + D[6] + C[gb_B[6][2 * 5 + 1]];
      D[12] = fn_A(D[12] ^ D[1], 16);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 63);
    } while (0);
    do {
      D[2] = D[2] + D[7] + C[gb_B[6][2 * 6 + 0]];
      D[13] = fn_A(D[13] ^ D[2], 32);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 24);
      D[2] = D[2] + D[7] + C[gb_B[6][2 * 6 + 1]];
      D[13] = fn_A(D[13] ^ D[2], 16);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 63);
    } while (0);
    do {
      D[3] = D[3] + D[4] + C[gb_B[6][2 * 7 + 0]];
      D[14] = fn_A(D[14] ^ D[3], 32);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 24);
      D[3] = D[3] + D[4] + C[gb_B[6][2 * 7 + 1]];
      D[14] = fn_A(D[14] ^ D[3], 16);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      D[0] = D[0] + D[4] + C[gb_B[7][2 * 0 + 0]];
      D[12] = fn_A(D[12] ^ D[0], 32);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 24);
      D[0] = D[0] + D[4] + C[gb_B[7][2 * 0 + 1]];
      D[12] = fn_A(D[12] ^ D[0], 16);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 63);
    } while (0);
    do {
      D[1] = D[1] + D[5] + C[gb_B[7][2 * 1 + 0]];
      D[13] = fn_A(D[13] ^ D[1], 32);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 24);
      D[1] = D[1] + D[5] + C[gb_B[7][2 * 1 + 1]];
      D[13] = fn_A(D[13] ^ D[1], 16);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 63);
    } while (0);
    do {
      D[2] = D[2] + D[6] + C[gb_B[7][2 * 2 + 0]];
      D[14] = fn_A(D[14] ^ D[2], 32);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 24);
      D[2] = D[2] + D[6] + C[gb_B[7][2 * 2 + 1]];
      D[14] = fn_A(D[14] ^ D[2], 16);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 63);
    } while (0);
    do {
      D[3] = D[3] + D[7] + C[gb_B[7][2 * 3 + 0]];
      D[15] = fn_A(D[15] ^ D[3], 32);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 24);
      D[3] = D[3] + D[7] + C[gb_B[7][2 * 3 + 1]];
      D[15] = fn_A(D[15] ^ D[3], 16);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 63);
    } while (0);
    do {
      D[0] = D[0] + D[5] + C[gb_B[7][2 * 4 + 0]];
      D[15] = fn_A(D[15] ^ D[0], 32);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 24);
      D[0] = D[0] + D[5] + C[gb_B[7][2 * 4 + 1]];
      D[15] = fn_A(D[15] ^ D[0], 16);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 63);
    } while (0);
    do {
      D[1] = D[1] + D[6] + C[gb_B[7][2 * 5 + 0]];
      D[12] = fn_A(D[12] ^ D[1], 32);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 24);
      D[1] = D[1] + D[6] + C[gb_B[7][2 * 5 + 1]];
      D[12] = fn_A(D[12] ^ D[1], 16);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 63);
    } while (0);
    do {
      D[2] = D[2] + D[7] + C[gb_B[7][2 * 6 + 0]];
      D[13] = fn_A(D[13] ^ D[2], 32);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 24);
      D[2] = D[2] + D[7] + C[gb_B[7][2 * 6 + 1]];
      D[13] = fn_A(D[13] ^ D[2], 16);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 63);
    } while (0);
    do {
      D[3] = D[3] + D[4] + C[gb_B[7][2 * 7 + 0]];
      D[14] = fn_A(D[14] ^ D[3], 32);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 24);
      D[3] = D[3] + D[4] + C[gb_B[7][2 * 7 + 1]];
      D[14] = fn_A(D[14] ^ D[3], 16);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      D[0] = D[0] + D[4] + C[gb_B[8][2 * 0 + 0]];
      D[12] = fn_A(D[12] ^ D[0], 32);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 24);
      D[0] = D[0] + D[4] + C[gb_B[8][2 * 0 + 1]];
      D[12] = fn_A(D[12] ^ D[0], 16);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 63);
    } while (0);
    do {
      D[1] = D[1] + D[5] + C[gb_B[8][2 * 1 + 0]];
      D[13] = fn_A(D[13] ^ D[1], 32);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 24);
      D[1] = D[1] + D[5] + C[gb_B[8][2 * 1 + 1]];
      D[13] = fn_A(D[13] ^ D[1], 16);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 63);
    } while (0);
    do {
      D[2] = D[2] + D[6] + C[gb_B[8][2 * 2 + 0]];
      D[14] = fn_A(D[14] ^ D[2], 32);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 24);
      D[2] = D[2] + D[6] + C[gb_B[8][2 * 2 + 1]];
      D[14] = fn_A(D[14] ^ D[2], 16);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 63);
    } while (0);
    do {
      D[3] = D[3] + D[7] + C[gb_B[8][2 * 3 + 0]];
      D[15] = fn_A(D[15] ^ D[3], 32);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 24);
      D[3] = D[3] + D[7] + C[gb_B[8][2 * 3 + 1]];
      D[15] = fn_A(D[15] ^ D[3], 16);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 63);
    } while (0);
    do {
      D[0] = D[0] + D[5] + C[gb_B[8][2 * 4 + 0]];
      D[15] = fn_A(D[15] ^ D[0], 32);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 24);
      D[0] = D[0] + D[5] + C[gb_B[8][2 * 4 + 1]];
      D[15] = fn_A(D[15] ^ D[0], 16);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 63);
    } while (0);
    do {
      D[1] = D[1] + D[6] + C[gb_B[8][2 * 5 + 0]];
      D[12] = fn_A(D[12] ^ D[1], 32);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 24);
      D[1] = D[1] + D[6] + C[gb_B[8][2 * 5 + 1]];
      D[12] = fn_A(D[12] ^ D[1], 16);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 63);
    } while (0);
    do {
      D[2] = D[2] + D[7] + C[gb_B[8][2 * 6 + 0]];
      D[13] = fn_A(D[13] ^ D[2], 32);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 24);
      D[2] = D[2] + D[7] + C[gb_B[8][2 * 6 + 1]];
      D[13] = fn_A(D[13] ^ D[2], 16);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 63);
    } while (0);
    do {
      D[3] = D[3] + D[4] + C[gb_B[8][2 * 7 + 0]];
      D[14] = fn_A(D[14] ^ D[3], 32);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 24);
      D[3] = D[3] + D[4] + C[gb_B[8][2 * 7 + 1]];
      D[14] = fn_A(D[14] ^ D[3], 16);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      D[0] = D[0] + D[4] + C[gb_B[9][2 * 0 + 0]];
      D[12] = fn_A(D[12] ^ D[0], 32);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 24);
      D[0] = D[0] + D[4] + C[gb_B[9][2 * 0 + 1]];
      D[12] = fn_A(D[12] ^ D[0], 16);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 63);
    } while (0);
    do {
      D[1] = D[1] + D[5] + C[gb_B[9][2 * 1 + 0]];
      D[13] = fn_A(D[13] ^ D[1], 32);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 24);
      D[1] = D[1] + D[5] + C[gb_B[9][2 * 1 + 1]];
      D[13] = fn_A(D[13] ^ D[1], 16);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 63);
    } while (0);
    do {
      D[2] = D[2] + D[6] + C[gb_B[9][2 * 2 + 0]];
      D[14] = fn_A(D[14] ^ D[2], 32);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 24);
      D[2] = D[2] + D[6] + C[gb_B[9][2 * 2 + 1]];
      D[14] = fn_A(D[14] ^ D[2], 16);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 63);
    } while (0);
    do {
      D[3] = D[3] + D[7] + C[gb_B[9][2 * 3 + 0]];
      D[15] = fn_A(D[15] ^ D[3], 32);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 24);
      D[3] = D[3] + D[7] + C[gb_B[9][2 * 3 + 1]];
      D[15] = fn_A(D[15] ^ D[3], 16);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 63);
    } while (0);
    do {
      D[0] = D[0] + D[5] + C[gb_B[9][2 * 4 + 0]];
      D[15] = fn_A(D[15] ^ D[0], 32);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 24);
      D[0] = D[0] + D[5] + C[gb_B[9][2 * 4 + 1]];
      D[15] = fn_A(D[15] ^ D[0], 16);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 63);
    } while (0);
    do {
      D[1] = D[1] + D[6] + C[gb_B[9][2 * 5 + 0]];
      D[12] = fn_A(D[12] ^ D[1], 32);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 24);
      D[1] = D[1] + D[6] + C[gb_B[9][2 * 5 + 1]];
      D[12] = fn_A(D[12] ^ D[1], 16);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 63);
    } while (0);
    do {
      D[2] = D[2] + D[7] + C[gb_B[9][2 * 6 + 0]];
      D[13] = fn_A(D[13] ^ D[2], 32);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 24);
      D[2] = D[2] + D[7] + C[gb_B[9][2 * 6 + 1]];
      D[13] = fn_A(D[13] ^ D[2], 16);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 63);
    } while (0);
    do {
      D[3] = D[3] + D[4] + C[gb_B[9][2 * 7 + 0]];
      D[14] = fn_A(D[14] ^ D[3], 32);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 24);
      D[3] = D[3] + D[4] + C[gb_B[9][2 * 7 + 1]];
      D[14] = fn_A(D[14] ^ D[3], 16);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      D[0] = D[0] + D[4] + C[gb_B[10][2 * 0 + 0]];
      D[12] = fn_A(D[12] ^ D[0], 32);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 24);
      D[0] = D[0] + D[4] + C[gb_B[10][2 * 0 + 1]];
      D[12] = fn_A(D[12] ^ D[0], 16);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 63);
    } while (0);
    do {
      D[1] = D[1] + D[5] + C[gb_B[10][2 * 1 + 0]];
      D[13] = fn_A(D[13] ^ D[1], 32);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 24);
      D[1] = D[1] + D[5] + C[gb_B[10][2 * 1 + 1]];
      D[13] = fn_A(D[13] ^ D[1], 16);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 63);
    } while (0);
    do {
      D[2] = D[2] + D[6] + C[gb_B[10][2 * 2 + 0]];
      D[14] = fn_A(D[14] ^ D[2], 32);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 24);
      D[2] = D[2] + D[6] + C[gb_B[10][2 * 2 + 1]];
      D[14] = fn_A(D[14] ^ D[2], 16);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 63);
    } while (0);
    do {
      D[3] = D[3] + D[7] + C[gb_B[10][2 * 3 + 0]];
      D[15] = fn_A(D[15] ^ D[3], 32);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 24);
      D[3] = D[3] + D[7] + C[gb_B[10][2 * 3 + 1]];
      D[15] = fn_A(D[15] ^ D[3], 16);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 63);
    } while (0);
    do {
      D[0] = D[0] + D[5] + C[gb_B[10][2 * 4 + 0]];
      D[15] = fn_A(D[15] ^ D[0], 32);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 24);
      D[0] = D[0] + D[5] + C[gb_B[10][2 * 4 + 1]];
      D[15] = fn_A(D[15] ^ D[0], 16);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 63);
    } while (0);
    do {
      D[1] = D[1] + D[6] + C[gb_B[10][2 * 5 + 0]];
      D[12] = fn_A(D[12] ^ D[1], 32);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 24);
      D[1] = D[1] + D[6] + C[gb_B[10][2 * 5 + 1]];
      D[12] = fn_A(D[12] ^ D[1], 16);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 63);
    } while (0);
    do {
      D[2] = D[2] + D[7] + C[gb_B[10][2 * 6 + 0]];
      D[13] = fn_A(D[13] ^ D[2], 32);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 24);
      D[2] = D[2] + D[7] + C[gb_B[10][2 * 6 + 1]];
      D[13] = fn_A(D[13] ^ D[2], 16);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 63);
    } while (0);
    do {
      D[3] = D[3] + D[4] + C[gb_B[10][2 * 7 + 0]];
      D[14] = fn_A(D[14] ^ D[3], 32);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 24);
      D[3] = D[3] + D[4] + C[gb_B[10][2 * 7 + 1]];
      D[14] = fn_A(D[14] ^ D[3], 16);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      D[0] = D[0] + D[4] + C[gb_B[11][2 * 0 + 0]];
      D[12] = fn_A(D[12] ^ D[0], 32);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 24);
      D[0] = D[0] + D[4] + C[gb_B[11][2 * 0 + 1]];
      D[12] = fn_A(D[12] ^ D[0], 16);
      D[8] = D[8] + D[12];
      D[4] = fn_A(D[4] ^ D[8], 63);
    } while (0);
    do {
      D[1] = D[1] + D[5] + C[gb_B[11][2 * 1 + 0]];
      D[13] = fn_A(D[13] ^ D[1], 32);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 24);
      D[1] = D[1] + D[5] + C[gb_B[11][2 * 1 + 1]];
      D[13] = fn_A(D[13] ^ D[1], 16);
      D[9] = D[9] + D[13];
      D[5] = fn_A(D[5] ^ D[9], 63);
    } while (0);
    do {
      D[2] = D[2] + D[6] + C[gb_B[11][2 * 2 + 0]];
      D[14] = fn_A(D[14] ^ D[2], 32);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 24);
      D[2] = D[2] + D[6] + C[gb_B[11][2 * 2 + 1]];
      D[14] = fn_A(D[14] ^ D[2], 16);
      D[10] = D[10] + D[14];
      D[6] = fn_A(D[6] ^ D[10], 63);
    } while (0);
    do {
      D[3] = D[3] + D[7] + C[gb_B[11][2 * 3 + 0]];
      D[15] = fn_A(D[15] ^ D[3], 32);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 24);
      D[3] = D[3] + D[7] + C[gb_B[11][2 * 3 + 1]];
      D[15] = fn_A(D[15] ^ D[3], 16);
      D[11] = D[11] + D[15];
      D[7] = fn_A(D[7] ^ D[11], 63);
    } while (0);
    do {
      D[0] = D[0] + D[5] + C[gb_B[11][2 * 4 + 0]];
      D[15] = fn_A(D[15] ^ D[0], 32);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 24);
      D[0] = D[0] + D[5] + C[gb_B[11][2 * 4 + 1]];
      D[15] = fn_A(D[15] ^ D[0], 16);
      D[10] = D[10] + D[15];
      D[5] = fn_A(D[5] ^ D[10], 63);
    } while (0);
    do {
      D[1] = D[1] + D[6] + C[gb_B[11][2 * 5 + 0]];
      D[12] = fn_A(D[12] ^ D[1], 32);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 24);
      D[1] = D[1] + D[6] + C[gb_B[11][2 * 5 + 1]];
      D[12] = fn_A(D[12] ^ D[1], 16);
      D[11] = D[11] + D[12];
      D[6] = fn_A(D[6] ^ D[11], 63);
    } while (0);
    do {
      D[2] = D[2] + D[7] + C[gb_B[11][2 * 6 + 0]];
      D[13] = fn_A(D[13] ^ D[2], 32);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 24);
      D[2] = D[2] + D[7] + C[gb_B[11][2 * 6 + 1]];
      D[13] = fn_A(D[13] ^ D[2], 16);
      D[8] = D[8] + D[13];
      D[7] = fn_A(D[7] ^ D[8], 63);
    } while (0);
    do {
      D[3] = D[3] + D[4] + C[gb_B[11][2 * 7 + 0]];
      D[14] = fn_A(D[14] ^ D[3], 32);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 24);
      D[3] = D[3] + D[4] + C[gb_B[11][2 * 7 + 1]];
      D[14] = fn_A(D[14] ^ D[3], 16);
      D[9] = D[9] + D[14];
      D[4] = fn_A(D[4] ^ D[9], 63);
    } while (0);
  } while (0);

  for (E = 0; E < 8; ++E)
    A->h[E] = A->h[E] ^ D[E] ^ D[E + 8];

  return 0;
}

int fn_J(eh_hash_state* A, __const uchar* B, ulong C) {
  while (C > 0) {
    size_t D = A->buflen;
    size_t E = 2 * 128 - D;

    if (C > E) {
      fn_B(A->buf + D, B, E);

      A->buflen += E;
      fn_E(A, 128);
      fn_I(A, A->buf);
      fn_B(A->buf, A->buf + 128, 128);

      A->buflen -= 128;
      B += E;
      C -= E;
    } else {
      fn_B(A->buf + D, B, C);

      A->buflen += C;
      B += C;
      C -= C;
    }
  }

  return 0;
}

int fn_K(eh_hash_state* A, uchar* B, uchar C) {
  uchar D[64] = {0};
  int E;

  if (B == 0 || C == 0 || C > 64)
    return -1;

  if (fn_F(A))
    return -1;

  if (A->buflen > 128) {
    fn_E(A, 128);
    fn_I(A, A->buf);
    A->buflen -= 128;
    fn_B(A->buf, A->buf + 128, A->buflen);
  }

  fn_E(A, A->buflen);
  fn_H(A);

  for (E = 0; E < 2 * 128 - A->buflen; ++E)
    (A->buf + A->buflen)[E] = 0;

  fn_I(A, A->buf);

  for (E = 0; E < 8; ++E)
    fn_D(D + sizeof(A->h[E]) * E, A->h[E]);

  fn_B(B, D, C);

  return 0;
}

void fn_L(__const eh_hash_state* A, eh_index B, uchar* C, size_t D) {
  eh_hash_state E = *A;

  eh_index F = (B);
  fn_J(&E, (__const uchar*)&F, sizeof(eh_index));
  fn_K(&E, C, D);
}

void fn_M(__const uchar* A, size_t B, uchar* C, size_t D, size_t E, size_t F) {
  size_t G = (E + 7) / 8 + F;

  uint H = ((uint)1 << E) - 1;

  size_t I = 0;
  uint J = 0;

  size_t K = 0;
  for (size_t L = 0; L < B; L++) {
    J = (J << 8) | A[L];
    I += 8;

    if (I >= E) {
      I -= E;
      for (size_t M = 0; M < F; M++) {
        C[K + M] = 0;
      }
      for (size_t M = F; M < G; M++) {
        C[K + M] = (

                       J >> (I + (8 * (G - M - 1)))) &
                   (

                       (H >> (8 * (G - M - 1))) & 0xFF);
      }
      K += G;
    }
  }
}

void fn_N(__const eh_index A, uchar* B) {
  eh_index C = (__builtin_astype(__builtin_astype(A, uchar4).wzyx, uint));
  fn_B(B, &C, sizeof(eh_index));
}

__kernel void fn_O(__const eh_hash_state A) {
  size_t B = get_global_id(0);

  uchar C[512 / 200 * 200 / 8];

  fn_L(&A, B, C, 512 / 200 * 200 / 8);

  eh_index D;
  for (D = 0; D < 512 / 200; ++D) {
    if (B + D >= 1 << (200 / (9 + 1) + 1))
      break;

    uchar E[2 * (200 / (9 + 1) + 7) / 8 + sizeof(eh_index) * (1 << (9 - 1))];
    fn_M(C + (D * 200 / 8), 200 / 8, E, (9 + 1) * (200 / (9 + 1) + 7) / 8, 200 / (9 + 1), 0);
    fn_N((B * 512 / 200) + D, E + (size_t)(9 + 1) * (200 / (9 + 1) + 7) / 8);
  }
}