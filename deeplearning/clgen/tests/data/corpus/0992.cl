inline void fn_A(float* A) {
  float B = A[0] + A[7];
  float C = A[1] + A[6];
  float D = A[2] + A[5];
  float E = A[3] + A[4];

  float F = A[0] - A[7];
  float G = A[6] - A[1];
  float H = A[2] - A[5];
  float I = A[4] - A[3];

  float J = B + E;
  float K = B - E;
  float L = C + D;
  float M = C - D;

  A[0] = 0.35355339059327376220042218105242f * (J + L);
  A[2] = 0.35355339059327376220042218105242f * (1.3065629648763765278566431734272f * K + 0.54119610014619698439972320536639f * M);
  A[4] = 0.35355339059327376220042218105242f * (J - L);
  A[6] = 0.35355339059327376220042218105242f * (0.54119610014619698439972320536639f * K - 1.3065629648763765278566431734272f * M);

  A[1] = 0.35355339059327376220042218105242f * (1.3870398453221474618216191915664f * F - 1.1758756024193587169744671046113f * G + 0.78569495838710218127789736765722f * H - 0.27589937928294301233595756366937f * I);
  A[3] = 0.35355339059327376220042218105242f * (1.1758756024193587169744671046113f * F + 0.27589937928294301233595756366937f * G - 1.3870398453221474618216191915664f * H + 0.78569495838710218127789736765722f * I);
  A[5] = 0.35355339059327376220042218105242f * (0.78569495838710218127789736765722f * F + 1.3870398453221474618216191915664f * G + 0.27589937928294301233595756366937f * H - 1.1758756024193587169744671046113f * I);
  A[7] = 0.35355339059327376220042218105242f * (0.27589937928294301233595756366937f * F + 0.78569495838710218127789736765722f * G + 1.1758756024193587169744671046113f * H + 1.3870398453221474618216191915664f * I);
}

inline void fn_B(float* A) {
  float B = A[0] + A[4];
  float C = 1.3065629648763765278566431734272f * A[2] + 0.54119610014619698439972320536639f * A[6];

  float D = B + C;
  float E = B - C;
  float F = 0.27589937928294301233595756366937f * A[7] + 1.3870398453221474618216191915664f * A[1] + 1.1758756024193587169744671046113f * A[3] + 0.78569495838710218127789736765722f * A[5];
  float G = 1.3870398453221474618216191915664f * A[7] - 0.27589937928294301233595756366937f * A[1] + 0.78569495838710218127789736765722f * A[3] - 1.1758756024193587169744671046113f * A[5];

  float H = A[0] - A[4];
  float I = 0.54119610014619698439972320536639f * A[2] - 1.3065629648763765278566431734272f * A[6];

  float J = H + I;
  float K = H - I;
  float L = 1.1758756024193587169744671046113f * A[1] - 0.78569495838710218127789736765722f * A[7] - 0.27589937928294301233595756366937f * A[3] - 1.3870398453221474618216191915664f * A[5];
  float M = 0.78569495838710218127789736765722f * A[1] + 1.1758756024193587169744671046113f * A[7] - 1.3870398453221474618216191915664f * A[3] + 0.27589937928294301233595756366937f * A[5];

  A[0] = 0.35355339059327376220042218105242f * (D + F);
  A[7] = 0.35355339059327376220042218105242f * (D - F);
  A[4] = 0.35355339059327376220042218105242f * (E + G);
  A[3] = 0.35355339059327376220042218105242f * (E - G);

  A[1] = 0.35355339059327376220042218105242f * (J + L);
  A[5] = 0.35355339059327376220042218105242f * (K - M);
  A[2] = 0.35355339059327376220042218105242f * (K + M);
  A[6] = 0.35355339059327376220042218105242f * (J - L);
}
__kernel __attribute__((reqd_work_group_size(32, 16 / 8, 1))) void fn_C(__global float* A, __global float* B, uint C, uint D, uint E) {
  __local float F[16][32 + 1];
  const uint G = get_local_id(0);
  const uint H = 8 * get_local_id(1);
  const uint I = G & (8 - 1);
  const uint J = get_group_id(0) * 32 + G;
  const uint K = get_group_id(1) * 16 + H;

  if ((J - I + 8 - 1 >= E) || (K + 8 - 1 >= D))
    return;

  __local float* L = &F[H + 0][G + 0];
  __local float* M = &F[H + I][G - I];
  B += K * C + J;
  A += K * C + J;

  float N[8];
  for (uint O = 0; O < 8; O++)
    L[O * (32 + 1)] = B[O * C];

  for (uint O = 0; O < 8; O++)
    N[O] = M[O];
  fn_A(N);
  for (uint O = 0; O < 8; O++)
    M[O] = N[O];

  for (uint O = 0; O < 8; O++)
    N[O] = L[O * (32 + 1)];
  fn_A(N);

  for (uint O = 0; O < 8; O++)
    A[O * C] = N[O];
}

__kernel __attribute__((reqd_work_group_size(32, 16 / 8, 1))) void fn_D(__global float* A, __global float* B, uint C, uint D, uint E) {
  __local float F[16][32 + 1];
  const uint G = get_local_id(0);
  const uint H = 8 * get_local_id(1);
  const uint I = G & (8 - 1);
  const uint J = get_group_id(0) * 32 + G;
  const uint K = get_group_id(1) * 16 + H;

  if ((J - I + 8 - 1 >= E) || (K + 8 - 1 >= D))
    return;

  __local float* L = &F[H + 0][G + 0];
  __local float* M = &F[H + I][G - I];
  B += K * C + J;
  A += K * C + J;

  float N[8];
  for (uint O = 0; O < 8; O++)
    L[O * (32 + 1)] = B[O * C];

  for (uint O = 0; O < 8; O++)
    N[O] = M[O];
  fn_B(N);
  for (uint O = 0; O < 8; O++)
    M[O] = N[O];

  for (uint O = 0; O < 8; O++)
    N[O] = L[O * (32 + 1)];
  fn_B(N);
  for (uint O = 0; O < 8; O++)
    A[O * C] = N[O];
}